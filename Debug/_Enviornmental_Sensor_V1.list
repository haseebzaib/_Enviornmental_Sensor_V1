
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  080258d4  00000000  2**0
                  ALLOC
  2 .text         00022048  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000036dc  080221e8  080221e8  000231e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080258c4  080258c4  00027304  2**0
                  CONTENTS
  5 .ARM          00000008  080258c4  080258c4  000268c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080258cc  080258cc  00027304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080258cc  080258cc  000268cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080258d0  080258d0  000268d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000304  20000000  080258d4  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034ac  20000304  08025bd8  00027304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200037b0  08025bd8  000277b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037915  00000000  00000000  00027334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a5f  00000000  00000000  0005ec49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003018  00000000  00000000  000676a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002503  00000000  00000000  0006a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026549  00000000  00000000  0006cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044fa1  00000000  00000000  0009310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f8a  00000000  00000000  000d80ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018d037  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de84  00000000  00000000  0018d07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0019af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080221d0 	.word	0x080221d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	080221d0 	.word	0x080221d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ca 	.word	0x200012ca
 80010f4:	20000324 	.word	0x20000324

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 ffc5 	bl	8006094 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001589 	.word	0x20001589
 8001128:	40020000 	.word	0x40020000
 800112c:	20001588 	.word	0x20001588

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 ffd5 	bl	80040fc <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000157c 	.word	0x2000157c
 8001160:	200017c0 	.word	0x200017c0

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 ff91 	bl	8006094 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 ff9d 	bl	80060c4 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001530 	.word	0x20001530
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fd7d 	bl	8004cc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fd96 	bl	8004cfa <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 ff80 	bl	8004114 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001530 	.word	0x20001530
 800121c:	40000400 	.word	0x40000400
 8001220:	20000324 	.word	0x20000324

08001224 <clock_speed_high>:
}

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01d fd4e 	bl	801ecd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <clock_speed_high+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <clock_speed_high+0xd4>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <clock_speed_high+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <clock_speed_high+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <clock_speed_high+0xd8>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <clock_speed_high+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc2e 	bl	8008b14 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <clock_speed_high+0x9e>
		Error_Handler();
 80012be:	f002 f9d3 	bl	8003668 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fe90 	bl	8009004 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <clock_speed_high+0xca>
		Error_Handler();
 80012ea:	f002 f9bd 	bl	8003668 <Error_Handler>
	}

}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <load_param+0xa4>)
 8001308:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 325f 	ldrh.w	r3, [r3, #607]	@ 0x25f
 8001310:	b29b      	uxth	r3, r3
 8001312:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001316:	4293      	cmp	r3, r2
 8001318:	d118      	bne.n	800134c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <load_param+0xa8>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f240 2361 	movw	r3, #609	@ 0x261
 8001326:	461a      	mov	r2, r3
 8001328:	f01d fdeb 	bl	801ef02 <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 800132c:	491f      	ldr	r1, [pc, #124]	@ (80013ac <load_param+0xac>)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <load_param+0xa8>)
 8001330:	f01d fd42 	bl	801edb8 <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800133a:	f001 f895 	bl	8002468 <ver_GetUid>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <load_param+0xb0>)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <load_param+0xa8>)
 8001346:	f01d fb7b 	bl	801ea40 <siprintf>
 800134a:	e010      	b.n	800136e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <load_param+0xa8>)
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <load_param+0xb4>)
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f240 2361 	movw	r3, #609	@ 0x261
 8001358:	461a      	mov	r2, r3
 800135a:	f01d fdd2 	bl	801ef02 <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800135e:	f001 f883 	bl	8002468 <ver_GetUid>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <load_param+0xb0>)
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <load_param+0xa8>)
 800136a:	f01d fb69 	bl	801ea40 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800136e:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <load_param+0xb8>)
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <load_param+0xbc>)
 8001372:	f01d fd21 	bl	801edb8 <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <load_param+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001384:	e00a      	b.n	800139c <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <load_param+0xc4>)
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <load_param+0xbc>)
 800138a:	f01d fd15 	bl	801edb8 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <load_param+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08060000 	.word	0x08060000
 80013a8:	200012cc 	.word	0x200012cc
 80013ac:	080221e8 	.word	0x080221e8
 80013b0:	080221f0 	.word	0x080221f0
 80013b4:	08024d30 	.word	0x08024d30
 80013b8:	080221f4 	.word	0x080221f4
 80013bc:	20001330 	.word	0x20001330
 80013c0:	20001530 	.word	0x20001530
 80013c4:	080221fc 	.word	0x080221fc

080013c8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <store_param+0xc0>)
 80013d4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80013d6:	f004 f955 	bl	8005684 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <store_param+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <store_param+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <store_param+0xc4>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <store_param+0xc4>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <store_param+0xc4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <store_param+0xc4>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <store_param+0xc4>)
 8001400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001404:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <store_param+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <store_param+0xc8>)
 800140e:	2202      	movs	r2, #2
 8001410:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <store_param+0xc8>)
 8001414:	2207      	movs	r2, #7
 8001416:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <store_param+0xc8>)
 800141a:	2201      	movs	r2, #1
 800141c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <store_param+0xc8>)
 8001424:	f004 faac 	bl	8005980 <HAL_FLASHEx_Erase>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800142e:	f004 f95b 	bl	80056e8 <HAL_FLASH_GetError>
 8001432:	4603      	mov	r3, r0
 8001434:	e024      	b.n	8001480 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <store_param+0xcc>)
 8001438:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <store_param+0xd0>)
 800143c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800143e:	e016      	b.n	800146e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001440:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	2002      	movs	r0, #2
 800144a:	f004 f8c7 	bl	80055dc <HAL_FLASH_Program>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <store_param+0x9a>

		{
			WrAdr += 4;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e005      	b.n	800146e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001462:	f004 f931 	bl	80056c8 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001466:	f004 f93f 	bl	80056e8 <HAL_FLASH_GetError>
 800146a:	4603      	mov	r3, r0
 800146c:	e008      	b.n	8001480 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3e4      	bcc.n	8001440 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001476:	f004 f927 	bl	80056c8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800147a:	b662      	cpsie	i
}
 800147c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200012cc 	.word	0x200012cc
 800148c:	40023c00 	.word	0x40023c00
 8001490:	200017dc 	.word	0x200017dc
 8001494:	08060261 	.word	0x08060261
 8001498:	08060000 	.word	0x08060000

0800149c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (save_param) {
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <save_data+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <save_data+0x52>
		if (start_timer) {
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <save_data+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <save_data+0x60>)
 80014b2:	f009 ff0d 	bl	800b2d0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <save_data+0x60>)
 80014b8:	f009 fea8 	bl	800b20c <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <save_data+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <save_data+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <save_data+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d0:	d30d      	bcc.n	80014ee <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <save_data+0x60>)
 80014d4:	f009 fefc 	bl	800b2d0 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80014d8:	f7ff ff76 	bl	80013c8 <store_param>
			time_keep = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <save_data+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <save_data+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <save_data+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001579 	.word	0x20001579
 80014f8:	2000157a 	.word	0x2000157a
 80014fc:	20001984 	.word	0x20001984
 8001500:	2000157c 	.word	0x2000157c

08001504 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0



	int16_t error = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800150e:	f013 fd1d 	bl	8014f4c <sensirion_i2c_hal_init>


	scd4x_wake_up();
 8001512:	f013 fba3 	bl	8014c5c <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001516:	f013 fb2d 	bl	8014b74 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800151a:	f013 fb53 	bl	8014bc4 <scd4x_reinit>
	scd4x_power_down();
 800151e:	f013 fb77 	bl	8014c10 <scd4x_power_down>


	init_driver(SCD30_I2C_ADDR_61);
 8001522:	2061      	movs	r0, #97	@ 0x61
 8001524:	f012 fea4 	bl	8014270 <init_driver>
	scd30_stop_periodic_measurement();
 8001528:	f012 ff46 	bl	80143b8 <scd30_stop_periodic_measurement>
scd30_set_measurement_interval(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f012 ff71 	bl	8014414 <scd30_set_measurement_interval>
//uint16_t inter;
//scd30_get_measurement_interval(&inter);
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 800153a:	1d3a      	adds	r2, r7, #4
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f013 fa99 	bl	8014a78 <scd30_read_firmware_version>
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b09e      	sub	sp, #120	@ 0x78
 800155a:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f012 fef0 	bl	8014348 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001574:	e081      	b.n	800167a <get_scd30_measurement+0x126>
		run_console_co2 = 1;
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	4848      	ldr	r0, [pc, #288]	@ (80016a4 <get_scd30_measurement+0x150>)
 8001582:	f004 fd87 	bl	8006094 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <get_scd30_measurement+0x3e>
		{
		sensirion_i2c_hal_sleep_usec(1500000);
 800158c:	4846      	ldr	r0, [pc, #280]	@ (80016a8 <get_scd30_measurement+0x154>)
 800158e:	f013 fd53 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
		}
		console_process();
 8001592:	f010 fe5d 	bl	8012250 <console_process>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001596:	4a45      	ldr	r2, [pc, #276]	@ (80016ac <get_scd30_measurement+0x158>)
 8001598:	4945      	ldr	r1, [pc, #276]	@ (80016b0 <get_scd30_measurement+0x15c>)
 800159a:	4846      	ldr	r0, [pc, #280]	@ (80016b4 <get_scd30_measurement+0x160>)
 800159c:	f012 feb4 	bl	8014308 <scd30_blocking_read_measurement_data>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <get_scd30_measurement+0x164>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d05c      	beq.n	8001668 <get_scd30_measurement+0x114>
			char buf[100];
			if (error) {
 80015ae:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <get_scd30_measurement+0x8a>
				sprintf(buf,
 80015b6:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80015ba:	463b      	mov	r3, r7
 80015bc:	493f      	ldr	r1, [pc, #252]	@ (80016bc <get_scd30_measurement+0x168>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f01d fa3e 	bl	801ea40 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015c4:	463b      	mov	r3, r7
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe6a 	bl	80002a0 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4639      	mov	r1, r7
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	483a      	ldr	r0, [pc, #232]	@ (80016c0 <get_scd30_measurement+0x16c>)
 80015d8:	f00a fe30 	bl	800c23c <HAL_UART_Transmit>
 80015dc:	e044      	b.n	8001668 <get_scd30_measurement+0x114>
			} else if (_RunTime_Packet.co2 == 0) {
 80015de:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <get_scd30_measurement+0x160>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d111      	bne.n	8001612 <get_scd30_measurement+0xbe>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80015ee:	463b      	mov	r3, r7
 80015f0:	4934      	ldr	r1, [pc, #208]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f01d fa24 	bl	801ea40 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015f8:	463b      	mov	r3, r7
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe50 	bl	80002a0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	4639      	mov	r1, r7
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	482d      	ldr	r0, [pc, #180]	@ (80016c0 <get_scd30_measurement+0x16c>)
 800160c:	f00a fe16 	bl	800c23c <HAL_UART_Transmit>
 8001610:	e02a      	b.n	8001668 <get_scd30_measurement+0x114>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001614:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffae 	bl	8000578 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001622:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffa7 	bl	8000578 <__aeabi_f2d>
 800162a:	4604      	mov	r4, r0
 800162c:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001630:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa0 	bl	8000578 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4638      	mov	r0, r7
 800163e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001642:	e9cd 4500 	strd	r4, r5, [sp]
 8001646:	4642      	mov	r2, r8
 8001648:	464b      	mov	r3, r9
 800164a:	491f      	ldr	r1, [pc, #124]	@ (80016c8 <get_scd30_measurement+0x174>)
 800164c:	f01d f9f8 	bl	801ea40 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001650:	463b      	mov	r3, r7
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe24 	bl	80002a0 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4639      	mov	r1, r7
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <get_scd30_measurement+0x16c>)
 8001664:	f00a fdea 	bl	800c23c <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 8001668:	f000 fd34 	bl	80020d4 <led_awake_routine1>
		console_process();
 800166c:	f010 fdf0 	bl	8012250 <console_process>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 8001670:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001674:	3301      	adds	r3, #1
 8001676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800167a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <get_scd30_measurement+0x178>)
 8001682:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8001686:	b29b      	uxth	r3, r3
 8001688:	429a      	cmp	r2, r3
 800168a:	f4ff af74 	bcc.w	8001576 <get_scd30_measurement+0x22>
	}
	run_console_co2 = 0;
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

}
 8001694:	bf00      	nop
 8001696:	3768      	adds	r7, #104	@ 0x68
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800169e:	bf00      	nop
 80016a0:	20000320 	.word	0x20000320
 80016a4:	40020000 	.word	0x40020000
 80016a8:	0016e360 	.word	0x0016e360
 80016ac:	20001538 	.word	0x20001538
 80016b0:	20001534 	.word	0x20001534
 80016b4:	20001530 	.word	0x20001530
 80016b8:	20001578 	.word	0x20001578
 80016bc:	08022204 	.word	0x08022204
 80016c0:	20001a74 	.word	0x20001a74
 80016c4:	0802223c 	.word	0x0802223c
 80016c8:	08022260 	.word	0x08022260
 80016cc:	200012cc 	.word	0x200012cc

080016d0 <get_scd30_measurement_>:

void get_scd30_measurement_()
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b09e      	sub	sp, #120	@ 0x78
 80016d6:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f012 fe32 	bl	8014348 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016f0:	e06f      	b.n	80017d2 <get_scd30_measurement_+0x102>
		//sensirion_i2c_hal_sleep_usec(1500000);
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 80016f2:	4a3f      	ldr	r2, [pc, #252]	@ (80017f0 <get_scd30_measurement_+0x120>)
 80016f4:	493f      	ldr	r1, [pc, #252]	@ (80017f4 <get_scd30_measurement_+0x124>)
 80016f6:	4840      	ldr	r0, [pc, #256]	@ (80017f8 <get_scd30_measurement_+0x128>)
 80016f8:	f012 fe06 	bl	8014308 <scd30_blocking_read_measurement_data>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <get_scd30_measurement_+0x12c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d05c      	beq.n	80017c4 <get_scd30_measurement_+0xf4>
			char buf[100];
			if (error) {
 800170a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800170e:	2b00      	cmp	r3, #0
 8001710:	d013      	beq.n	800173a <get_scd30_measurement_+0x6a>
				sprintf(buf,
 8001712:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001716:	463b      	mov	r3, r7
 8001718:	4939      	ldr	r1, [pc, #228]	@ (8001800 <get_scd30_measurement_+0x130>)
 800171a:	4618      	mov	r0, r3
 800171c:	f01d f990 	bl	801ea40 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdbc 	bl	80002a0 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	4639      	mov	r1, r7
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	4834      	ldr	r0, [pc, #208]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001734:	f00a fd82 	bl	800c23c <HAL_UART_Transmit>
 8001738:	e044      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else if (_RunTime_Packet.co2 == 0) {
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d111      	bne.n	800176e <get_scd30_measurement_+0x9e>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800174a:	463b      	mov	r3, r7
 800174c:	492e      	ldr	r1, [pc, #184]	@ (8001808 <get_scd30_measurement_+0x138>)
 800174e:	4618      	mov	r0, r3
 8001750:	f01d f976 	bl	801ea40 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fda2 	bl	80002a0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	4639      	mov	r1, r7
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	4827      	ldr	r0, [pc, #156]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001768:	f00a fd68 	bl	800c23c <HAL_UART_Transmit>
 800176c:	e02a      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <get_scd30_measurement_+0x128>)
 8001770:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff00 	bl	8000578 <__aeabi_f2d>
 8001778:	4680      	mov	r8, r0
 800177a:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800177e:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fef9 	bl	8000578 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800178c:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fef2 	bl	8000578 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4638      	mov	r0, r7
 800179a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179e:	e9cd 4500 	strd	r4, r5, [sp]
 80017a2:	4642      	mov	r2, r8
 80017a4:	464b      	mov	r3, r9
 80017a6:	4919      	ldr	r1, [pc, #100]	@ (800180c <get_scd30_measurement_+0x13c>)
 80017a8:	f01d f94a 	bl	801ea40 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd76 	bl	80002a0 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4639      	mov	r1, r7
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <get_scd30_measurement_+0x134>)
 80017c0:	f00a fd3c 	bl	800c23c <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 80017c4:	f000 fc86 	bl	80020d4 <led_awake_routine1>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80017c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <get_scd30_measurement_+0x140>)
 80017da:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80017de:	b29b      	uxth	r3, r3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d386      	bcc.n	80016f2 <get_scd30_measurement_+0x22>

	}
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3768      	adds	r7, #104	@ 0x68
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	20001538 	.word	0x20001538
 80017f4:	20001534 	.word	0x20001534
 80017f8:	20001530 	.word	0x20001530
 80017fc:	20001578 	.word	0x20001578
 8001800:	08022204 	.word	0x08022204
 8001804:	20001a74 	.word	0x20001a74
 8001808:	0802223c 	.word	0x0802223c
 800180c:	08022260 	.word	0x08022260
 8001810:	200012cc 	.word	0x200012cc

08001814 <init_sps30>:

#endif

static void init_sps30() {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	@ 0x30
 8001818:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <init_sps30+0x34>)
 800181c:	f014 f810 	bl	8015840 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001820:	f013 ff58 	bl	80156d4 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f014 f929 	bl	8015a7e <sps30_read_version>
 800182c:	4603      	mov	r3, r0
 800182e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f014 f817 	bl	8015868 <sps30_get_serial>
 800183a:	4603      	mov	r3, r0
 800183c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	@ 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000f4240 	.word	0x000f4240

0800184c <get_sps30_measurement>:
void get_sps30_measurement() {
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b0a0      	sub	sp, #128	@ 0x80
 8001852:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001854:	f014 f834 	bl	80158c0 <sps30_start_measurement>
 8001858:	4603      	mov	r3, r0
 800185a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800185e:	483a      	ldr	r0, [pc, #232]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001860:	f014 f85a 	bl	8015918 <sps30_read_measurement>
 8001864:	4603      	mov	r3, r0
 8001866:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <get_sps30_measurement+0xfc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a37      	ldr	r2, [pc, #220]	@ (800194c <get_sps30_measurement+0x100>)
 8001870:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a35      	ldr	r2, [pc, #212]	@ (800194c <get_sps30_measurement+0x100>)
 8001878:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <get_sps30_measurement+0xfc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a33      	ldr	r2, [pc, #204]	@ (800194c <get_sps30_measurement+0x100>)
 8001880:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a31      	ldr	r2, [pc, #196]	@ (800194c <get_sps30_measurement+0x100>)
 8001888:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800188a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800188e:	2b00      	cmp	r3, #0
 8001890:	db54      	blt.n	800193c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001892:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <get_sps30_measurement+0x104>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d050      	beq.n	800193c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800189a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800189e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d113      	bne.n	80018d4 <get_sps30_measurement+0x88>
				sprintf(buffer,
 80018ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	463b      	mov	r3, r7
 80018b4:	4927      	ldr	r1, [pc, #156]	@ (8001954 <get_sps30_measurement+0x108>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01d f8c2 	bl	801ea40 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80018bc:	463b      	mov	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fcee 	bl	80002a0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4639      	mov	r1, r7
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	4822      	ldr	r0, [pc, #136]	@ (8001958 <get_sps30_measurement+0x10c>)
 80018d0:	f00a fcb4 	bl	800c23c <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe4d 	bl	8000578 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018e4:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe46 	bl	8000578 <__aeabi_f2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe3f 	bl	8000578 <__aeabi_f2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001900:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe38 	bl	8000578 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4638      	mov	r0, r7
 800190e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001912:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001916:	e9cd 4500 	strd	r4, r5, [sp]
 800191a:	4652      	mov	r2, sl
 800191c:	465b      	mov	r3, fp
 800191e:	490f      	ldr	r1, [pc, #60]	@ (800195c <get_sps30_measurement+0x110>)
 8001920:	f01d f88e 	bl	801ea40 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001924:	463b      	mov	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fcba 	bl	80002a0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	4639      	mov	r1, r7
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <get_sps30_measurement+0x10c>)
 8001938:	f00a fc80 	bl	800c23c <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800193c:	bf00      	nop
 800193e:	3768      	adds	r7, #104	@ 0x68
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001946:	bf00      	nop
 8001948:	20001798 	.word	0x20001798
 800194c:	20001530 	.word	0x20001530
 8001950:	20001578 	.word	0x20001578
 8001954:	08022294 	.word	0x08022294
 8001958:	20001a74 	.word	0x20001a74
 800195c:	080222c8 	.word	0x080222c8

08001960 <check_peripheral_error>:
static void check_peripheral_error() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <check_peripheral_error+0xa0>)
 8001968:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001970:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <check_peripheral_error+0xa0>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 8001978:	f010 fc82 	bl	8012280 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <check_peripheral_error+0xa0>)
 800197e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <check_peripheral_error+0xa0>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001994:	481b      	ldr	r0, [pc, #108]	@ (8001a04 <check_peripheral_error+0xa4>)
 8001996:	f004 fb95 	bl	80060c4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800199a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800199e:	f002 fbb9 	bl	8004114 <HAL_Delay>
		enable_5v();
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a8:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <check_peripheral_error+0xa4>)
 80019aa:	f004 fb8b 	bl	80060c4 <HAL_GPIO_WritePin>
		init_sps30();
 80019ae:	f7ff ff31 	bl	8001814 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	2205      	movs	r2, #5
 80019b8:	21c2      	movs	r1, #194	@ 0xc2
 80019ba:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <check_peripheral_error+0xa8>)
 80019bc:	f005 f858 	bl	8006a70 <HAL_I2C_IsDeviceReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d018      	beq.n	80019f8 <check_peripheral_error+0x98>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <check_peripheral_error+0xac>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	490f      	ldr	r1, [pc, #60]	@ (8001a10 <check_peripheral_error+0xb0>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f01d f834 	bl	801ea40 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc60 	bl	80002a0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	1d39      	adds	r1, r7, #4
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <check_peripheral_error+0xb4>)
 80019ec:	f00a fc26 	bl	800c23c <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <check_peripheral_error+0xa0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
#endif

}
 80019f8:	bf00      	nop
 80019fa:	3738      	adds	r7, #56	@ 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20001530 	.word	0x20001530
 8001a04:	40020400 	.word	0x40020400
 8001a08:	20001838 	.word	0x20001838
 8001a0c:	20001578 	.word	0x20001578
 8001a10:	08022300 	.word	0x08022300
 8001a14:	20001a74 	.word	0x20001a74

08001a18 <sensor_calibration>:
static void sensor_calibration() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <sensor_calibration+0x28>)
 8001a1e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <sensor_calibration+0x24>
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <sensor_calibration+0x28>)
 8001a28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <sensor_calibration+0x28>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 8001a38:	f014 f80d 	bl	8015a56 <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20001530 	.word	0x20001530

08001a44 <sleep>:
static void sleep() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 8001a48:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <sleep+0xd0>)
 8001a4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001a50:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <sleep+0xd0>)
 8001a52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a56:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 8001a58:	4a2f      	ldr	r2, [pc, #188]	@ (8001b18 <sleep+0xd4>)
 8001a5a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a5e:	2008      	movs	r0, #8
 8001a60:	f7ff fad8 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001a64:	482d      	ldr	r0, [pc, #180]	@ (8001b1c <sleep+0xd8>)
 8001a66:	f002 fc00 	bl	800426a <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	220b      	movs	r2, #11
 8001a70:	492b      	ldr	r1, [pc, #172]	@ (8001b20 <sleep+0xdc>)
 8001a72:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <sleep+0xe0>)
 8001a74:	f00a fbe2 	bl	800c23c <HAL_UART_Transmit>
	disable_5v();
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a7e:	482a      	ldr	r0, [pc, #168]	@ (8001b28 <sleep+0xe4>)
 8001a80:	f004 fb20 	bl	80060c4 <HAL_GPIO_WritePin>
	disable_motion();
 8001a84:	2201      	movs	r2, #1
 8001a86:	2102      	movs	r1, #2
 8001a88:	4828      	ldr	r0, [pc, #160]	@ (8001b2c <sleep+0xe8>)
 8001a8a:	f004 fb1b 	bl	80060c4 <HAL_GPIO_WritePin>
	scd4x_power_down();
#elif use_scd30
//	scd4x_stop_periodic_measurement();
//	scd4x_power_down();
	//check_peripheral_error() ;
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <sleep+0xec>)
 8001a90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <sleep+0x62>
	scd30_stop_periodic_measurement();
 8001a98:	f012 fc8e 	bl	80143b8 <scd30_stop_periodic_measurement>
	scd30_activate_auto_calibration(0);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f012 fdb3 	bl	8014608 <scd30_activate_auto_calibration>
	scd30_soft_reset();
 8001aa2:	f013 f837 	bl	8014b14 <scd30_soft_reset>
	}
#endif
	console_uart_deinit();
 8001aa6:	f010 fbdf 	bl	8012268 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001aaa:	f013 fa81 	bl	8014fb0 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001aae:	f013 fe51 	bl	8015754 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001ab2:	f01b f91d 	bl	801ccf0 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001ab6:	481f      	ldr	r0, [pc, #124]	@ (8001b34 <sleep+0xf0>)
 8001ab8:	f009 faf9 	bl	800b0ae <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001abc:	481e      	ldr	r0, [pc, #120]	@ (8001b38 <sleep+0xf4>)
 8001abe:	f009 faf6 	bl	800b0ae <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001ac2:	481e      	ldr	r0, [pc, #120]	@ (8001b3c <sleep+0xf8>)
 8001ac4:	f009 faf3 	bl	800b0ae <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001ac8:	481d      	ldr	r0, [pc, #116]	@ (8001b40 <sleep+0xfc>)
 8001aca:	f003 f9f1 	bl	8004eb0 <HAL_DMA_DeInit>
	HAL_SuspendTick();
 8001ace:	f002 fb45 	bl	800415c <HAL_SuspendTick>
	gpio_disable();
 8001ad2:	f001 fce7 	bl	80034a4 <gpio_disable>
//	   __HAL_RCC_GPIOD_CLK_DISABLE();
//	   __HAL_RCC_GPIOE_CLK_DISABLE();
//	   __HAL_RCC_GPIOH_CLK_DISABLE();

	   /* FLASH Deep Power Down Mode enabled */
	   HAL_PWREx_EnableFlashPowerDown();
 8001ad6:	f007 f805 	bl	8008ae4 <HAL_PWREx_EnableFlashPowerDown>

	//HAL_RCC_DeInit();
	//clock_speed_slow();


	Rtc_Alarm_watchdog();
 8001ada:	f012 f883 	bl	8013be4 <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001ade:	4819      	ldr	r0, [pc, #100]	@ (8001b44 <sleep+0x100>)
 8001ae0:	f005 fcbc 	bl	800745c <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f006 ffcc 	bl	8008a84 <HAL_PWR_EnterSTOPMode>
	//HAL_IWDG_Refresh(&hiwdg);
	Rtc_Alarm_watchdog();
 8001aec:	f012 f87a 	bl	8013be4 <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <sleep+0x104>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <sleep+0xc8>
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <sleep+0xec>)
 8001afa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <sleep+0xc8>
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <sleep+0xec>)
 8001b04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0e8      	beq.n	8001ade <sleep+0x9a>

	Rtc_Alarm_watchdog_disable();
 8001b0c:	f012 f858 	bl	8013bc0 <Rtc_Alarm_watchdog_disable>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40000400 	.word	0x40000400
 8001b18:	20000324 	.word	0x20000324
 8001b1c:	200017f0 	.word	0x200017f0
 8001b20:	08022328 	.word	0x08022328
 8001b24:	20001a74 	.word	0x20001a74
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	20001530 	.word	0x20001530
 8001b34:	2000193c 	.word	0x2000193c
 8001b38:	20001984 	.word	0x20001984
 8001b3c:	200019cc 	.word	0x200019cc
 8001b40:	20001a14 	.word	0x20001a14
 8001b44:	2000188c 	.word	0x2000188c
 8001b48:	20000029 	.word	0x20000029

08001b4c <wakeup>:
static void wakeup() {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_RCC_DeInit();
 8001b50:	f007 fd26 	bl	80095a0 <HAL_RCC_DeInit>
	clock_speed_high();
 8001b54:	f7ff fb66 	bl	8001224 <clock_speed_high>

	HAL_PWREx_DisableFlashPowerDown();
 8001b58:	f006 ffd0 	bl	8008afc <HAL_PWREx_DisableFlashPowerDown>
	HAL_ResumeTick();
 8001b5c:	f002 fb0e 	bl	800417c <HAL_ResumeTick>
	gpio_enable();
 8001b60:	f001 fcd6 	bl	8003510 <gpio_enable>

	enable_5v();
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6a:	4838      	ldr	r0, [pc, #224]	@ (8001c4c <wakeup+0x100>)
 8001b6c:	f004 faaa 	bl	80060c4 <HAL_GPIO_WritePin>
	enable_motion();
 8001b70:	2200      	movs	r2, #0
 8001b72:	2102      	movs	r1, #2
 8001b74:	4836      	ldr	r0, [pc, #216]	@ (8001c50 <wakeup+0x104>)
 8001b76:	f004 faa5 	bl	80060c4 <HAL_GPIO_WritePin>
	console_uart_init();
 8001b7a:	f010 fb81 	bl	8012280 <console_uart_init>

	MX_DMA_Init();
 8001b7e:	f7ff fb0d 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001b82:	f001 f8f7 	bl	8002d74 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001b86:	f001 f945 	bl	8002e14 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001b8a:	f001 f991 	bl	8002eb0 <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001b8e:	f7ff fcb9 	bl	8001504 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001b92:	4830      	ldr	r0, [pc, #192]	@ (8001c54 <wakeup+0x108>)
 8001b94:	f01a fa32 	bl	801bffc <Mount_SD>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <wakeup+0x5e>
		Unmount_SD("/");
 8001b9e:	482d      	ldr	r0, [pc, #180]	@ (8001c54 <wakeup+0x108>)
 8001ba0:	f01a fa58 	bl	801c054 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001ba4:	f01b f8b6 	bl	801cd14 <MX_USB_DEVICE_Init>
 8001ba8:	e002      	b.n	8001bb0 <wakeup+0x64>
	} else {
		datawritten = 2;
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <wakeup+0x10c>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb4:	4826      	ldr	r0, [pc, #152]	@ (8001c50 <wakeup+0x104>)
 8001bb6:	f004 fa6d 	bl	8006094 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <wakeup+0x7a>
		init_sps30();
 8001bc0:	f7ff fe28 	bl	8001814 <init_sps30>
 8001bc4:	e00f      	b.n	8001be6 <wakeup+0x9a>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <wakeup+0x110>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <wakeup+0x110>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <wakeup+0x114>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001bdc:	f002 fa8e 	bl	80040fc <HAL_GetTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a20      	ldr	r2, [pc, #128]	@ (8001c64 <wakeup+0x118>)
 8001be4:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001be6:	4820      	ldr	r0, [pc, #128]	@ (8001c68 <wakeup+0x11c>)
 8001be8:	f009 fab6 	bl	800b158 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001bec:	491f      	ldr	r1, [pc, #124]	@ (8001c6c <wakeup+0x120>)
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c70 <wakeup+0x124>)
 8001bf4:	481f      	ldr	r0, [pc, #124]	@ (8001c74 <wakeup+0x128>)
 8001bf6:	f003 f9b9 	bl	8004f6c <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <wakeup+0x11c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <wakeup+0x11c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c08:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001c0a:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <wakeup+0x120>)
 8001c0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c10:	2008      	movs	r0, #8
 8001c12:	f7ff f9ff 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001c16:	2100      	movs	r1, #0
 8001c18:	4817      	ldr	r0, [pc, #92]	@ (8001c78 <wakeup+0x12c>)
 8001c1a:	f009 fbe1 	bl	800b3e0 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <wakeup+0x130>)
 8001c20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001c26:	2104      	movs	r1, #4
 8001c28:	4813      	ldr	r0, [pc, #76]	@ (8001c78 <wakeup+0x12c>)
 8001c2a:	f009 fbd9 	bl	800b3e0 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <wakeup+0x130>)
 8001c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001c36:	f7ff fad1 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	220a      	movs	r2, #10
 8001c40:	490f      	ldr	r1, [pc, #60]	@ (8001c80 <wakeup+0x134>)
 8001c42:	4810      	ldr	r0, [pc, #64]	@ (8001c84 <wakeup+0x138>)
 8001c44:	f00a fafa 	bl	800c23c <HAL_UART_Transmit>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020000 	.word	0x40020000
 8001c54:	08022334 	.word	0x08022334
 8001c58:	20002328 	.word	0x20002328
 8001c5c:	20001530 	.word	0x20001530
 8001c60:	20001584 	.word	0x20001584
 8001c64:	200017c8 	.word	0x200017c8
 8001c68:	2000193c 	.word	0x2000193c
 8001c6c:	20000324 	.word	0x20000324
 8001c70:	40020418 	.word	0x40020418
 8001c74:	20001a14 	.word	0x20001a14
 8001c78:	200019cc 	.word	0x200019cc
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	08022338 	.word	0x08022338
 8001c84:	20001a74 	.word	0x20001a74

08001c88 <green_led_blink>:

static void green_led_blink() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <green_led_blink+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c96:	f002 fa3d 	bl	8004114 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <green_led_blink+0x4c>)
 8001c9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001ca2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ca6:	f002 fa35 	bl	8004114 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <green_led_blink+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cb0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cb4:	f002 fa2e 	bl	8004114 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <green_led_blink+0x4c>)
 8001cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cc0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cc4:	f002 fa26 	bl	8004114 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cc8:	4b02      	ldr	r3, [pc, #8]	@ (8001cd4 <green_led_blink+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <led_awake_routine>:

static void led_awake_routine() {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001cdc:	4ba6      	ldr	r3, [pc, #664]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001cde:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8195 	bne.w	8002012 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001ce8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cec:	48a3      	ldr	r0, [pc, #652]	@ (8001f7c <led_awake_routine+0x2a4>)
 8001cee:	f004 f9d1 	bl	8006094 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d025      	beq.n	8001d44 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001cf8:	4b9f      	ldr	r3, [pc, #636]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001cfa:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cfe:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001f80 <led_awake_routine+0x2a8>
 8001d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	db0d      	blt.n	8001d28 <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001d0c:	4b9d      	ldr	r3, [pc, #628]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d12:	4b9c      	ldr	r3, [pc, #624]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d18:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d1a:	4a9b      	ldr	r2, [pc, #620]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d20:	2008      	movs	r0, #8
 8001d22:	f7ff f977 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001d26:	e196      	b.n	8002056 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001d28:	4b96      	ldr	r3, [pc, #600]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d2e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d30:	4b94      	ldr	r3, [pc, #592]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001d38:	4a93      	ldr	r2, [pc, #588]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	f7ff f969 	bl	8001014 <setSoftPWM>
}
 8001d42:	e188      	b.n	8002056 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001d44:	4a90      	ldr	r2, [pc, #576]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d4a:	2008      	movs	r0, #8
 8001d4c:	f7ff f962 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d50:	4b89      	ldr	r3, [pc, #548]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001d52:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d56:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001f80 <led_awake_routine+0x2a8>
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	db38      	blt.n	8001dd6 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001d64:	4b87      	ldr	r3, [pc, #540]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d6c:	4a86      	ldr	r2, [pc, #536]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d72:	2008      	movs	r0, #8
 8001d74:	f7ff f94e 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d78:	4b84      	ldr	r3, [pc, #528]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001d80:	4b83      	ldr	r3, [pc, #524]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3305      	adds	r3, #5
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b80      	ldr	r3, [pc, #512]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e008      	b.n	8001da6 <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001d94:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b05      	subs	r3, #5
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b7b      	ldr	r3, [pc, #492]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001da4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001db0:	dd03      	ble.n	8001dba <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001db2:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e007      	b.n	8001dca <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001dba:	4b75      	ldr	r3, [pc, #468]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dc02      	bgt.n	8001dca <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001dc4:	4b71      	ldr	r3, [pc, #452]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001dca:	4b71      	ldr	r3, [pc, #452]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001dcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001dd4:	e13f      	b.n	8002056 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001dd6:	4b68      	ldr	r3, [pc, #416]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001dd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ddc:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd42      	ble.n	8001e70 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001dec:	edd3 7a08 	vldr	s15, [r3, #32]
 8001df0:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f80 <led_awake_routine+0x2a8>
 8001df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	d838      	bhi.n	8001e70 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001dfe:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001e00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e04:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001e06:	4a60      	ldr	r2, [pc, #384]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001e08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e0c:	2008      	movs	r0, #8
 8001e0e:	f7ff f901 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e12:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3305      	adds	r3, #5
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	e008      	b.n	8001e40 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001e2e:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b05      	subs	r3, #5
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b21a      	sxth	r2, r3
 8001e3c:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e3e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e4a:	dd03      	ble.n	8001e54 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e007      	b.n	8001e64 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001e54:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dc02      	bgt.n	8001e64 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e64:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e6e:	e0f2      	b.n	8002056 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001e70:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001e72:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e76:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001f94 <led_awake_routine+0x2bc>
 8001e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	f340 808d 	ble.w	8001fa0 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001e86:	4b3c      	ldr	r3, [pc, #240]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001e88:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e8c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	f200 8082 	bhi.w	8001fa0 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d003      	beq.n	8001eb0 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001eae:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001eb0:	4a35      	ldr	r2, [pc, #212]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001eb2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001eb6:	2008      	movs	r0, #8
 8001eb8:	f7ff f8ac 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001ebc:	4b33      	ldr	r3, [pc, #204]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001ec4:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3305      	adds	r3, #5
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e008      	b.n	8001eea <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b05      	subs	r3, #5
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001ee8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001eea:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ef4:	dd03      	ble.n	8001efe <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001efe:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dc02      	bgt.n	8001f0e <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3305      	adds	r3, #5
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e008      	b.n	8001f3c <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b05      	subs	r3, #5
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f3a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f46:	dd03      	ble.n	8001f50 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e007      	b.n	8001f60 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	dc02      	bgt.n	8001f60 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001f62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001f72:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f74:	e06f      	b.n	8002056 <led_awake_routine+0x37e>
 8001f76:	bf00      	nop
 8001f78:	20001530 	.word	0x20001530
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40833333 	.word	0x40833333
 8001f84:	40000400 	.word	0x40000400
 8001f88:	20000324 	.word	0x20000324
 8001f8c:	200012c4 	.word	0x200012c4
 8001f90:	200012c6 	.word	0x200012c6
 8001f94:	40533333 	.word	0x40533333
 8001f98:	200012c5 	.word	0x200012c5
 8001f9c:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <led_awake_routine+0x384>)
 8001fa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fa6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <led_awake_routine+0x388>)
 8001faa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fae:	2008      	movs	r0, #8
 8001fb0:	f7ff f830 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <led_awake_routine+0x38c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <led_awake_routine+0x390>)
 8001fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3305      	adds	r3, #5
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <led_awake_routine+0x390>)
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e008      	b.n	8001fe2 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <led_awake_routine+0x390>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b05      	subs	r3, #5
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <led_awake_routine+0x390>)
 8001fe0:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <led_awake_routine+0x390>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fec:	dd03      	ble.n	8001ff6 <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <led_awake_routine+0x38c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e007      	b.n	8002006 <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <led_awake_routine+0x390>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dc02      	bgt.n	8002006 <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <led_awake_routine+0x38c>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <led_awake_routine+0x390>)
 8002008:	f9b3 2000 	ldrsh.w	r2, [r3]
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <led_awake_routine+0x384>)
 800200e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002010:	e021      	b.n	8002056 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <led_awake_routine+0x384>)
 8002014:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002018:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <led_awake_routine+0x388>)
 800201c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002020:	2008      	movs	r0, #8
 8002022:	f7fe fff7 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <led_awake_routine+0x390>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002030:	d004      	beq.n	800203c <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <led_awake_routine+0x390>)
 8002034:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	e002      	b.n	8002042 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <led_awake_routine+0x390>)
 800203e:	2200      	movs	r2, #0
 8002040:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <led_awake_routine+0x390>)
 8002044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <led_awake_routine+0x384>)
 800204a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800204c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002050:	f002 f860 	bl	8004114 <HAL_Delay>
}
 8002054:	e7ff      	b.n	8002056 <led_awake_routine+0x37e>
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40000400 	.word	0x40000400
 8002060:	20000324 	.word	0x20000324
 8002064:	200012c5 	.word	0x200012c5
 8002068:	200012c8 	.word	0x200012c8

0800206c <blink_red>:

void blink_red() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <blink_red+0x60>)
 8002072:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8002078:	4a15      	ldr	r2, [pc, #84]	@ (80020d0 <blink_red+0x64>)
 800207a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800207e:	2008      	movs	r0, #8
 8002080:	f7fe ffc8 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <blink_red+0x60>)
 8002086:	2200      	movs	r2, #0
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800208a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208e:	f002 f841 	bl	8004114 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <blink_red+0x60>)
 8002094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002098:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800209a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800209e:	f002 f839 	bl	8004114 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <blink_red+0x60>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ac:	f002 f832 	bl	8004114 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <blink_red+0x60>)
 80020b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020bc:	f002 f82a 	bl	8004114 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020c0:	4b02      	ldr	r3, [pc, #8]	@ (80020cc <blink_red+0x60>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40000400 	.word	0x40000400
 80020d0:	20000324 	.word	0x20000324

080020d4 <led_awake_routine1>:

static void led_awake_routine1() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 80020d8:	4ba6      	ldr	r3, [pc, #664]	@ (8002374 <led_awake_routine1+0x2a0>)
 80020da:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8195 	bne.w	800240e <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 80020e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020e8:	48a3      	ldr	r0, [pc, #652]	@ (8002378 <led_awake_routine1+0x2a4>)
 80020ea:	f003 ffd3 	bl	8006094 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d025      	beq.n	8002140 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 80020f4:	4b9f      	ldr	r3, [pc, #636]	@ (8002374 <led_awake_routine1+0x2a0>)
 80020f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80020fa:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800237c <led_awake_routine1+0x2a8>
 80020fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	db0d      	blt.n	8002124 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 8002108:	4b9d      	ldr	r3, [pc, #628]	@ (8002380 <led_awake_routine1+0x2ac>)
 800210a:	2200      	movs	r2, #0
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800210e:	4b9c      	ldr	r3, [pc, #624]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002110:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002116:	4a9b      	ldr	r2, [pc, #620]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002118:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800211c:	2008      	movs	r0, #8
 800211e:	f7fe ff79 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002122:	e196      	b.n	8002452 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002124:	4b96      	ldr	r3, [pc, #600]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002126:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800212c:	4b94      	ldr	r3, [pc, #592]	@ (8002380 <led_awake_routine1+0x2ac>)
 800212e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002132:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002134:	4a93      	ldr	r2, [pc, #588]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002136:	2100      	movs	r1, #0
 8002138:	2008      	movs	r0, #8
 800213a:	f7fe ff6b 	bl	8001014 <setSoftPWM>
}
 800213e:	e188      	b.n	8002452 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002140:	4a90      	ldr	r2, [pc, #576]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002142:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002146:	2008      	movs	r0, #8
 8002148:	f7fe ff64 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 800214c:	4b89      	ldr	r3, [pc, #548]	@ (8002374 <led_awake_routine1+0x2a0>)
 800214e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002152:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800237c <led_awake_routine1+0x2a8>
 8002156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	db38      	blt.n	80021d2 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 8002160:	4b87      	ldr	r3, [pc, #540]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002166:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002168:	4a86      	ldr	r2, [pc, #536]	@ (8002384 <led_awake_routine1+0x2b0>)
 800216a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800216e:	2008      	movs	r0, #8
 8002170:	f7fe ff50 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002174:	4b84      	ldr	r3, [pc, #528]	@ (8002388 <led_awake_routine1+0x2b4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 800217c:	4b83      	ldr	r3, [pc, #524]	@ (800238c <led_awake_routine1+0x2b8>)
 800217e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002182:	b29b      	uxth	r3, r3
 8002184:	3328      	adds	r3, #40	@ 0x28
 8002186:	b29b      	uxth	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b80      	ldr	r3, [pc, #512]	@ (800238c <led_awake_routine1+0x2b8>)
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e008      	b.n	80021a2 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 8002190:	4b7e      	ldr	r3, [pc, #504]	@ (800238c <led_awake_routine1+0x2b8>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b28      	subs	r3, #40	@ 0x28
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b7b      	ldr	r3, [pc, #492]	@ (800238c <led_awake_routine1+0x2b8>)
 80021a0:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021a2:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <led_awake_routine1+0x2b8>)
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ac:	dd03      	ble.n	80021b6 <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 80021ae:	4b76      	ldr	r3, [pc, #472]	@ (8002388 <led_awake_routine1+0x2b4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e007      	b.n	80021c6 <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80021b6:	4b75      	ldr	r3, [pc, #468]	@ (800238c <led_awake_routine1+0x2b8>)
 80021b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dc02      	bgt.n	80021c6 <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 80021c0:	4b71      	ldr	r3, [pc, #452]	@ (8002388 <led_awake_routine1+0x2b4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80021c6:	4b71      	ldr	r3, [pc, #452]	@ (800238c <led_awake_routine1+0x2b8>)
 80021c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002380 <led_awake_routine1+0x2ac>)
 80021ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021d0:	e13f      	b.n	8002452 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 80021d2:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <led_awake_routine1+0x2a0>)
 80021d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80021d8:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	dd42      	ble.n	800226c <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 80021e6:	4b63      	ldr	r3, [pc, #396]	@ (8002374 <led_awake_routine1+0x2a0>)
 80021e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80021ec:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800237c <led_awake_routine1+0x2a8>
 80021f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d838      	bhi.n	800226c <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 80021fa:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <led_awake_routine1+0x2ac>)
 80021fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002200:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002202:	4a60      	ldr	r2, [pc, #384]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002204:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002208:	2008      	movs	r0, #8
 800220a:	f7fe ff03 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800220e:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <led_awake_routine1+0x2b4>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 8002216:	4b5d      	ldr	r3, [pc, #372]	@ (800238c <led_awake_routine1+0x2b8>)
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	b29b      	uxth	r3, r3
 800221e:	3328      	adds	r3, #40	@ 0x28
 8002220:	b29b      	uxth	r3, r3
 8002222:	b21a      	sxth	r2, r3
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <led_awake_routine1+0x2b8>)
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	e008      	b.n	800223c <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800222a:	4b58      	ldr	r3, [pc, #352]	@ (800238c <led_awake_routine1+0x2b8>)
 800222c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b28      	subs	r3, #40	@ 0x28
 8002234:	b29b      	uxth	r3, r3
 8002236:	b21a      	sxth	r2, r3
 8002238:	4b54      	ldr	r3, [pc, #336]	@ (800238c <led_awake_routine1+0x2b8>)
 800223a:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800223c:	4b53      	ldr	r3, [pc, #332]	@ (800238c <led_awake_routine1+0x2b8>)
 800223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002246:	dd03      	ble.n	8002250 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 8002248:	4b4f      	ldr	r3, [pc, #316]	@ (8002388 <led_awake_routine1+0x2b4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e007      	b.n	8002260 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8002250:	4b4e      	ldr	r3, [pc, #312]	@ (800238c <led_awake_routine1+0x2b8>)
 8002252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	dc02      	bgt.n	8002260 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 800225a:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <led_awake_routine1+0x2b4>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002260:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <led_awake_routine1+0x2b8>)
 8002262:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
 800226a:	e0f2      	b.n	8002452 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 800226c:	4b41      	ldr	r3, [pc, #260]	@ (8002374 <led_awake_routine1+0x2a0>)
 800226e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002272:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002390 <led_awake_routine1+0x2bc>
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	f340 808d 	ble.w	800239c <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8002282:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <led_awake_routine1+0x2a0>)
 8002284:	edd3 7a08 	vldr	s15, [r3, #32]
 8002288:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 800228c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002294:	f200 8082 	bhi.w	800239c <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8002298:	4b3b      	ldr	r3, [pc, #236]	@ (8002388 <led_awake_routine1+0x2b4>)
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	4b3d      	ldr	r3, [pc, #244]	@ (8002394 <led_awake_routine1+0x2c0>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d003      	beq.n	80022ac <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80022a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <led_awake_routine1+0x2c0>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b37      	ldr	r3, [pc, #220]	@ (8002388 <led_awake_routine1+0x2b4>)
 80022aa:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 80022ac:	4a35      	ldr	r2, [pc, #212]	@ (8002384 <led_awake_routine1+0x2b0>)
 80022ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022b2:	2008      	movs	r0, #8
 80022b4:	f7fe feae 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <led_awake_routine1+0x2b4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 80022c0:	4b32      	ldr	r3, [pc, #200]	@ (800238c <led_awake_routine1+0x2b8>)
 80022c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3328      	adds	r3, #40	@ 0x28
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <led_awake_routine1+0x2b8>)
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	e008      	b.n	80022e6 <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 80022d4:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <led_awake_routine1+0x2b8>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b28      	subs	r3, #40	@ 0x28
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <led_awake_routine1+0x2b8>)
 80022e4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <led_awake_routine1+0x2b8>)
 80022e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022f0:	dd03      	ble.n	80022fa <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 80022f2:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <led_awake_routine1+0x2b4>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <led_awake_routine1+0x2b8>)
 80022fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	dc02      	bgt.n	800230a <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002304:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <led_awake_routine1+0x2b4>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800230a:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <led_awake_routine1+0x2c0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	b29b      	uxth	r3, r3
 800231a:	3328      	adds	r3, #40	@ 0x28
 800231c:	b29b      	uxth	r3, r3
 800231e:	b21a      	sxth	r2, r3
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e008      	b.n	8002338 <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b28      	subs	r3, #40	@ 0x28
 8002330:	b29b      	uxth	r3, r3
 8002332:	b21a      	sxth	r2, r3
 8002334:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002336:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002338:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <led_awake_routine1+0x2c4>)
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002342:	dd03      	ble.n	800234c <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <led_awake_routine1+0x2c0>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <led_awake_routine1+0x2c4>)
 800234e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	dc02      	bgt.n	800235c <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 8002356:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <led_awake_routine1+0x2c0>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <led_awake_routine1+0x2b8>)
 800235e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002368:	f9b3 2000 	ldrsh.w	r2, [r3]
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <led_awake_routine1+0x2ac>)
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002370:	e06f      	b.n	8002452 <led_awake_routine1+0x37e>
 8002372:	bf00      	nop
 8002374:	20001530 	.word	0x20001530
 8002378:	40020000 	.word	0x40020000
 800237c:	40833333 	.word	0x40833333
 8002380:	40000400 	.word	0x40000400
 8002384:	20000324 	.word	0x20000324
 8002388:	200012c4 	.word	0x200012c4
 800238c:	200012c6 	.word	0x200012c6
 8002390:	40533333 	.word	0x40533333
 8002394:	200012c5 	.word	0x200012c5
 8002398:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 800239c:	4b2e      	ldr	r3, [pc, #184]	@ (8002458 <led_awake_routine1+0x384>)
 800239e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023a2:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80023a4:	4a2d      	ldr	r2, [pc, #180]	@ (800245c <led_awake_routine1+0x388>)
 80023a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023aa:	2008      	movs	r0, #8
 80023ac:	f7fe fe32 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80023b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <led_awake_routine1+0x38c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <led_awake_routine1+0x390>)
 80023ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3328      	adds	r3, #40	@ 0x28
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <led_awake_routine1+0x390>)
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e008      	b.n	80023de <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <led_awake_routine1+0x390>)
 80023ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b28      	subs	r3, #40	@ 0x28
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <led_awake_routine1+0x390>)
 80023dc:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <led_awake_routine1+0x390>)
 80023e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e8:	dd03      	ble.n	80023f2 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <led_awake_routine1+0x38c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 80023f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <led_awake_routine1+0x390>)
 80023f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	dc02      	bgt.n	8002402 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <led_awake_routine1+0x38c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <led_awake_routine1+0x390>)
 8002404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <led_awake_routine1+0x384>)
 800240a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800240c:	e021      	b.n	8002452 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 800240e:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <led_awake_routine1+0x384>)
 8002410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8002416:	4a11      	ldr	r2, [pc, #68]	@ (800245c <led_awake_routine1+0x388>)
 8002418:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800241c:	2008      	movs	r0, #8
 800241e:	f7fe fdf9 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <led_awake_routine1+0x390>)
 8002424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002428:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800242c:	d004      	beq.n	8002438 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <led_awake_routine1+0x390>)
 8002430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	e002      	b.n	800243e <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <led_awake_routine1+0x390>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <led_awake_routine1+0x390>)
 8002440:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <led_awake_routine1+0x384>)
 8002446:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8002448:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800244c:	f001 fe62 	bl	8004114 <HAL_Delay>
}
 8002450:	e7ff      	b.n	8002452 <led_awake_routine1+0x37e>
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40000400 	.word	0x40000400
 800245c:	20000324 	.word	0x20000324
 8002460:	200012c5 	.word	0x200012c5
 8002464:	200012c8 	.word	0x200012c8

08002468 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800246e:	f001 fea1 	bl	80041b4 <HAL_GetUIDw1>
 8002472:	4603      	mov	r3, r0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002478:	f001 fe9c 	bl	80041b4 <HAL_GetUIDw1>
 800247c:	4603      	mov	r3, r0
 800247e:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <ver_GetUid+0x8c>)
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002484:	4c1c      	ldr	r4, [pc, #112]	@ (80024f8 <ver_GetUid+0x90>)
 8002486:	f001 fea1 	bl	80041cc <HAL_GetUIDw2>
 800248a:	4603      	mov	r3, r0
 800248c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b23      	cmp	r3, #35	@ 0x23
 8002492:	d909      	bls.n	80024a8 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b3d      	cmp	r3, #61	@ 0x3d
 8002498:	bf28      	it	cs
 800249a:	233d      	movcs	r3, #61	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	333d      	adds	r3, #61	@ 0x3d
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <ver_GetUid+0x8c>)
 80024a4:	71da      	strb	r2, [r3, #7]
 80024a6:	e00b      	b.n	80024c0 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	d901      	bls.n	80024b2 <ver_GetUid+0x4a>
 80024ae:	2241      	movs	r2, #65	@ 0x41
 80024b0:	e000      	b.n	80024b4 <ver_GetUid+0x4c>
 80024b2:	2230      	movs	r2, #48	@ 0x30
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <ver_GetUid+0x8c>)
 80024be:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80024c0:	f001 fe6c 	bl	800419c <HAL_GetUIDw0>
 80024c4:	4603      	mov	r3, r0
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	480b      	ldr	r0, [pc, #44]	@ (80024fc <ver_GetUid+0x94>)
 80024ce:	f011 fd9d 	bl	801400c <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80024d2:	f001 fe63 	bl	800419c <HAL_GetUIDw0>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	4808      	ldr	r0, [pc, #32]	@ (8002500 <ver_GetUid+0x98>)
 80024de:	f011 fd95 	bl	801400c <CharToHexasc>
	sUid[12] = 0;
 80024e2:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <ver_GetUid+0x8c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80024e8:	4b02      	ldr	r3, [pc, #8]	@ (80024f4 <ver_GetUid+0x8c>)
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200017cc 	.word	0x200017cc
 80024f8:	200017cf 	.word	0x200017cf
 80024fc:	200017d4 	.word	0x200017d4
 8002500:	200017d6 	.word	0x200017d6

08002504 <run_console_from_scd30>:

void run_console_from_scd30()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0


	if(run_console_co2)
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <run_console_from_scd30+0x18>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <run_console_from_scd30+0x10>
	{
		console_process();
 8002510:	f00f fe9e 	bl	8012250 <console_process>
	}
	led_awake_routine1();
 8002514:	f7ff fdde 	bl	80020d4 <led_awake_routine1>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000320 	.word	0x20000320

08002520 <app_main>:

void app_main() {
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8002526:	2248      	movs	r2, #72	@ 0x48
 8002528:	2100      	movs	r1, #0
 800252a:	489e      	ldr	r0, [pc, #632]	@ (80027a4 <app_main+0x284>)
 800252c:	f01c fbd2 	bl	801ecd4 <memset>

	load_param();
 8002530:	f7fe fee6 	bl	8001300 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002534:	489c      	ldr	r0, [pc, #624]	@ (80027a8 <app_main+0x288>)
 8002536:	f008 fe0f 	bl	800b158 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800253a:	499c      	ldr	r1, [pc, #624]	@ (80027ac <app_main+0x28c>)
 800253c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002540:	4a9b      	ldr	r2, [pc, #620]	@ (80027b0 <app_main+0x290>)
 8002542:	489c      	ldr	r0, [pc, #624]	@ (80027b4 <app_main+0x294>)
 8002544:	f002 fd12 	bl	8004f6c <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002548:	4b97      	ldr	r3, [pc, #604]	@ (80027a8 <app_main+0x288>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b96      	ldr	r3, [pc, #600]	@ (80027a8 <app_main+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002556:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002558:	4a94      	ldr	r2, [pc, #592]	@ (80027ac <app_main+0x28c>)
 800255a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800255e:	2008      	movs	r0, #8
 8002560:	f7fe fd58 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8002564:	2100      	movs	r1, #0
 8002566:	4894      	ldr	r0, [pc, #592]	@ (80027b8 <app_main+0x298>)
 8002568:	f008 ff3a 	bl	800b3e0 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 800256c:	4b93      	ldr	r3, [pc, #588]	@ (80027bc <app_main+0x29c>)
 800256e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002574:	2104      	movs	r1, #4
 8002576:	4890      	ldr	r0, [pc, #576]	@ (80027b8 <app_main+0x298>)
 8002578:	f008 ff32 	bl	800b3e0 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 800257c:	4b8f      	ldr	r3, [pc, #572]	@ (80027bc <app_main+0x29c>)
 800257e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002582:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 8002584:	488e      	ldr	r0, [pc, #568]	@ (80027c0 <app_main+0x2a0>)
 8002586:	f019 fd39 	bl	801bffc <Mount_SD>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <app_main+0x7c>

		Unmount_SD("/");
 8002590:	488b      	ldr	r0, [pc, #556]	@ (80027c0 <app_main+0x2a0>)
 8002592:	f019 fd5f 	bl	801c054 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8002596:	f01a fbbd 	bl	801cd14 <MX_USB_DEVICE_Init>
 800259a:	e002      	b.n	80025a2 <app_main+0x82>

	} else {
		datawritten = 2;
 800259c:	4b89      	ldr	r3, [pc, #548]	@ (80027c4 <app_main+0x2a4>)
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80025a2:	f001 fdab 	bl	80040fc <HAL_GetTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a87      	ldr	r2, [pc, #540]	@ (80027c8 <app_main+0x2a8>)
 80025aa:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80025ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025b0:	4886      	ldr	r0, [pc, #536]	@ (80027cc <app_main+0x2ac>)
 80025b2:	f003 fd6f 	bl	8006094 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <app_main+0xa2>
		init_sps30();
 80025bc:	f7ff f92a 	bl	8001814 <init_sps30>
 80025c0:	e016      	b.n	80025f0 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80025c2:	4b78      	ldr	r3, [pc, #480]	@ (80027a4 <app_main+0x284>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <app_main+0x284>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 80025d2:	4b74      	ldr	r3, [pc, #464]	@ (80027a4 <app_main+0x284>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 80025da:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <app_main+0x284>)
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 80025e2:	4b7b      	ldr	r3, [pc, #492]	@ (80027d0 <app_main+0x2b0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 80025e8:	4b6e      	ldr	r3, [pc, #440]	@ (80027a4 <app_main+0x284>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 80025f0:	f7fe ff88 	bl	8001504 <init_scd30_i2c>
#endif
	console_init();
 80025f4:	f00f fe78 	bl	80122e8 <console_init>
	Rtc_set_alarm();
 80025f8:	f011 fb76 	bl	8013ce8 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	4873      	ldr	r0, [pc, #460]	@ (80027d4 <app_main+0x2b4>)
 8002606:	f007 fa98 	bl	8009b3a <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 800260a:	7ffb      	ldrb	r3, [r7, #31]
 800260c:	461a      	mov	r2, r3
 800260e:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <app_main+0x284>)
 8002610:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if ((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || (strcmp(_Flash_Packet.filename_with_format,"default") == 0)) //we save this value and dont change it untill and untless RTC data is not lost
 8002612:	2101      	movs	r1, #1
 8002614:	486f      	ldr	r0, [pc, #444]	@ (80027d4 <app_main+0x2b4>)
 8002616:	f007 fd41 	bl	800a09c <HAL_RTCEx_BKUPRead>
 800261a:	4603      	mov	r3, r0
 800261c:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002620:	4293      	cmp	r3, r2
 8002622:	d106      	bne.n	8002632 <app_main+0x112>
 8002624:	496c      	ldr	r1, [pc, #432]	@ (80027d8 <app_main+0x2b8>)
 8002626:	486d      	ldr	r0, [pc, #436]	@ (80027dc <app_main+0x2bc>)
 8002628:	f7fd fdda 	bl	80001e0 <strcmp>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d112      	bne.n	8002658 <app_main+0x138>
	    {

		   HAL_PWR_EnableBkUpAccess();
 8002632:	f006 f9ff 	bl	8008a34 <HAL_PWR_EnableBkUpAccess>
		   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8002636:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 800263a:	2101      	movs	r1, #1
 800263c:	4865      	ldr	r0, [pc, #404]	@ (80027d4 <app_main+0x2b4>)
 800263e:	f007 fd13 	bl	800a068 <HAL_RTCEx_BKUPWrite>
		   HAL_PWR_DisableBkUpAccess();
 8002642:	f006 fa0b 	bl	8008a5c <HAL_PWR_DisableBkUpAccess>


		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002646:	4966      	ldr	r1, [pc, #408]	@ (80027e0 <app_main+0x2c0>)
 8002648:	4866      	ldr	r0, [pc, #408]	@ (80027e4 <app_main+0x2c4>)
 800264a:	f01a facd 	bl	801cbe8 <createfile>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <app_main+0x284>)
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 8002658:	f7ff fb16 	bl	8001c88 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 800265c:	23c8      	movs	r3, #200	@ 0xc8
 800265e:	2215      	movs	r2, #21
 8002660:	4961      	ldr	r1, [pc, #388]	@ (80027e8 <app_main+0x2c8>)
 8002662:	4862      	ldr	r0, [pc, #392]	@ (80027ec <app_main+0x2cc>)
 8002664:	f009 fdea 	bl	800c23c <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002668:	f001 fd48 	bl	80040fc <HAL_GetTick>
 800266c:	4603      	mov	r3, r0
 800266e:	4a60      	ldr	r2, [pc, #384]	@ (80027f0 <app_main+0x2d0>)
 8002670:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002672:	f001 fd43 	bl	80040fc <HAL_GetTick>
 8002676:	4603      	mov	r3, r0
 8002678:	4a5e      	ldr	r2, [pc, #376]	@ (80027f4 <app_main+0x2d4>)
 800267a:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800267c:	4b5e      	ldr	r3, [pc, #376]	@ (80027f8 <app_main+0x2d8>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 8002682:	f7fe fdab 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002686:	e179      	b.n	800297c <app_main+0x45c>
		{
			pwr_off_detected();
 8002688:	f7fe fda8 	bl	80011dc <pwr_off_detected>
//
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}
			adc_Measure(&_RunTime_Packet.battery_voltage);
 800268c:	485b      	ldr	r0, [pc, #364]	@ (80027fc <app_main+0x2dc>)
 800268e:	f011 fd53 	bl	8014138 <adc_Measure>
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8002692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002696:	484d      	ldr	r0, [pc, #308]	@ (80027cc <app_main+0x2ac>)
 8002698:	f003 fcfc 	bl	8006094 <HAL_GPIO_ReadPin>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <app_main+0x18c>
					{
				prev_sleep_time = HAL_GetTick();
 80026a2:	f001 fd2b 	bl	80040fc <HAL_GetTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a51      	ldr	r2, [pc, #324]	@ (80027f0 <app_main+0x2d0>)
 80026aa:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	4847      	ldr	r0, [pc, #284]	@ (80027d4 <app_main+0x2b4>)
 80026b6:	f007 f95e 	bl	8009976 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	4844      	ldr	r0, [pc, #272]	@ (80027d4 <app_main+0x2b4>)
 80026c2:	f007 fa3a 	bl	8009b3a <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80026c6:	79ba      	ldrb	r2, [r7, #6]
 80026c8:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <app_main+0x284>)
 80026ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			_RunTime_Packet.month = sDate.Month;
 80026ce:	797a      	ldrb	r2, [r7, #5]
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <app_main+0x284>)
 80026d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			_RunTime_Packet.year = sDate.Year;
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <app_main+0x284>)
 80026da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

			if (_RunTime_Packet.prev_year != sDate.Year) {
 80026de:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <app_main+0x284>)
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <app_main+0x1d8>
				_RunTime_Packet.year_changed = 1; //this for year now
 80026e8:	4b2e      	ldr	r3, [pc, #184]	@ (80027a4 <app_main+0x284>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <app_main+0x284>)
 80026f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 80026f8:	f7ff f932 	bl	8001960 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 80026fc:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <app_main+0x284>)
 80026fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <app_main+0x1f0>
					|| _RunTime_Packet.usb_first_start) {
 8002706:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <app_main+0x284>)
 8002708:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800270c:	2b00      	cmp	r3, #0
 800270e:	d045      	beq.n	800279c <app_main+0x27c>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <app_main+0x284>)
 8002712:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <app_main+0x202>
				{

					start_usb_timer = 1;
 800271a:	4b39      	ldr	r3, [pc, #228]	@ (8002800 <app_main+0x2e0>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e003      	b.n	800272a <app_main+0x20a>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <app_main+0x284>)
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800272a:	f001 fce7 	bl	80040fc <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <app_main+0x2a8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1ad2      	subs	r2, r2, r3
 8002736:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <app_main+0x2e4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d329      	bcc.n	8002792 <app_main+0x272>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <app_main+0x284>)
 8002740:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d10d      	bne.n	8002766 <app_main+0x246>
							&& _RunTime_Packet.usb_first_start) {
 800274a:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <app_main+0x284>)
 800274c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <app_main+0x246>
						_RunTime_Packet.sd_file_creation = createfile(
 8002754:	4922      	ldr	r1, [pc, #136]	@ (80027e0 <app_main+0x2c0>)
 8002756:	4823      	ldr	r0, [pc, #140]	@ (80027e4 <app_main+0x2c4>)
 8002758:	f01a fa46 	bl	801cbe8 <createfile>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <app_main+0x284>)
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <app_main+0x284>)
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <app_main+0x284>)
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <app_main+0x284>)
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 800277e:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <app_main+0x2e0>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002784:	f7ff f846 	bl	8001814 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8002788:	f001 fcb8 	bl	80040fc <HAL_GetTick>
 800278c:	4603      	mov	r3, r0
 800278e:	4a19      	ldr	r2, [pc, #100]	@ (80027f4 <app_main+0x2d4>)
 8002790:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8002792:	f001 fcb3 	bl	80040fc <HAL_GetTick>
 8002796:	4603      	mov	r3, r0
 8002798:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <app_main+0x2d0>)
 800279a:	6013      	str	r3, [r2, #0]
			}

			console_process();
 800279c:	f00f fd58 	bl	8012250 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80027a0:	e046      	b.n	8002830 <app_main+0x310>
 80027a2:	bf00      	nop
 80027a4:	20001530 	.word	0x20001530
 80027a8:	2000193c 	.word	0x2000193c
 80027ac:	20000324 	.word	0x20000324
 80027b0:	40020418 	.word	0x40020418
 80027b4:	20001a14 	.word	0x20001a14
 80027b8:	200019cc 	.word	0x200019cc
 80027bc:	40000400 	.word	0x40000400
 80027c0:	08022334 	.word	0x08022334
 80027c4:	20002328 	.word	0x20002328
 80027c8:	200017c8 	.word	0x200017c8
 80027cc:	40020000 	.word	0x40020000
 80027d0:	20001584 	.word	0x20001584
 80027d4:	20001898 	.word	0x20001898
 80027d8:	08022344 	.word	0x08022344
 80027dc:	20001461 	.word	0x20001461
 80027e0:	20001330 	.word	0x20001330
 80027e4:	200012cc 	.word	0x200012cc
 80027e8:	0802234c 	.word	0x0802234c
 80027ec:	20001a74 	.word	0x20001a74
 80027f0:	200017c0 	.word	0x200017c0
 80027f4:	200017c4 	.word	0x200017c4
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	20001550 	.word	0x20001550
 8002800:	20001580 	.word	0x20001580
 8002804:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002808:	f00f fd22 	bl	8012250 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 800280c:	4b90      	ldr	r3, [pc, #576]	@ (8002a50 <app_main+0x530>)
 800280e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <app_main+0x2fa>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 8002816:	f7fe fe9d 	bl	8001554 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 800281a:	f7ff f817 	bl	800184c <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 800281e:	488d      	ldr	r0, [pc, #564]	@ (8002a54 <app_main+0x534>)
 8002820:	f011 fc8a 	bl	8014138 <adc_Measure>
				led_awake_routine1();
 8002824:	f7ff fc56 	bl	80020d4 <led_awake_routine1>
				pwr_off_detected();
 8002828:	f7fe fcd8 	bl	80011dc <pwr_off_detected>
				check_peripheral_error();
 800282c:	f7ff f898 	bl	8001960 <check_peripheral_error>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002830:	f001 fc64 	bl	80040fc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	4b88      	ldr	r3, [pc, #544]	@ (8002a58 <app_main+0x538>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1ad2      	subs	r2, r2, r3
 800283c:	4b87      	ldr	r3, [pc, #540]	@ (8002a5c <app_main+0x53c>)
 800283e:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 8002840:	429a      	cmp	r2, r3
 8002842:	d809      	bhi.n	8002858 <app_main+0x338>
					&& !_RunTime_Packet.usb_detection
 8002844:	4b82      	ldr	r3, [pc, #520]	@ (8002a50 <app_main+0x530>)
 8002846:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <app_main+0x338>
					&& !_RunTime_Packet.usb_first_start)
 800284e:	4b80      	ldr	r3, [pc, #512]	@ (8002a50 <app_main+0x530>)
 8002850:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0d7      	beq.n	8002808 <app_main+0x2e8>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002858:	f7ff f8de 	bl	8001a18 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 800285c:	4b80      	ldr	r3, [pc, #512]	@ (8002a60 <app_main+0x540>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d016      	beq.n	8002892 <app_main+0x372>
 8002864:	4b7a      	ldr	r3, [pc, #488]	@ (8002a50 <app_main+0x530>)
 8002866:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800286a:	2b00      	cmp	r3, #0
 800286c:	d111      	bne.n	8002892 <app_main+0x372>
					&& !_RunTime_Packet.usb_first_start
 800286e:	4b78      	ldr	r3, [pc, #480]	@ (8002a50 <app_main+0x530>)
 8002870:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <app_main+0x372>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800287c:	4879      	ldr	r0, [pc, #484]	@ (8002a64 <app_main+0x544>)
 800287e:	f003 fc09 	bl	8006094 <HAL_GPIO_ReadPin>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <app_main+0x372>
				scd4x_stop_periodic_measurement();
#elif use_scd30
				//scd30_stop_periodic_measurement();
#endif

				sps30_stop_measurement();
 8002888:	f013 f832 	bl	80158f0 <sps30_stop_measurement>
				stop_measurement = 0;
 800288c:	4b74      	ldr	r3, [pc, #464]	@ (8002a60 <app_main+0x540>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 8002892:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002896:	4873      	ldr	r0, [pc, #460]	@ (8002a64 <app_main+0x544>)
 8002898:	f003 fbfc 	bl	8006094 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d050      	beq.n	8002944 <app_main+0x424>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80028a2:	4b71      	ldr	r3, [pc, #452]	@ (8002a68 <app_main+0x548>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d04c      	beq.n	8002944 <app_main+0x424>
 80028aa:	4b69      	ldr	r3, [pc, #420]	@ (8002a50 <app_main+0x530>)
 80028ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d147      	bne.n	8002944 <app_main+0x424>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80028b4:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <app_main+0x530>)
 80028b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <app_main+0x3be>
						|| _RunTime_Packet.filename_changed
 80028be:	4b64      	ldr	r3, [pc, #400]	@ (8002a50 <app_main+0x530>)
 80028c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <app_main+0x3be>
						|| _RunTime_Packet.fileformat_changed
 80028c8:	4b61      	ldr	r3, [pc, #388]	@ (8002a50 <app_main+0x530>)
 80028ca:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <app_main+0x3be>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80028d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a50 <app_main+0x530>)
 80028d4:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d114      	bne.n	8002908 <app_main+0x3e8>
					_RunTime_Packet.year_changed = 0;
 80028de:	4b5c      	ldr	r3, [pc, #368]	@ (8002a50 <app_main+0x530>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 80028e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a50 <app_main+0x530>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 80028ee:	4b58      	ldr	r3, [pc, #352]	@ (8002a50 <app_main+0x530>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					_RunTime_Packet.sd_file_creation = createfile(
 80028f6:	495d      	ldr	r1, [pc, #372]	@ (8002a6c <app_main+0x54c>)
 80028f8:	485d      	ldr	r0, [pc, #372]	@ (8002a70 <app_main+0x550>)
 80028fa:	f01a f975 	bl	801cbe8 <createfile>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b53      	ldr	r3, [pc, #332]	@ (8002a50 <app_main+0x530>)
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 8002908:	f01a f944 	bl	801cb94 <filesaving_process>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d013      	beq.n	800293a <app_main+0x41a>
					HAL_Delay(1500);
 8002912:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002916:	f001 fbfd 	bl	8004114 <HAL_Delay>
					if (filesaving_process()) {
 800291a:	f01a f93b 	bl	801cb94 <filesaving_process>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <app_main+0x41a>
						HAL_Delay(1500);
 8002924:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002928:	f001 fbf4 	bl	8004114 <HAL_Delay>
						if (filesaving_process()) {
 800292c:	f01a f932 	bl	801cb94 <filesaving_process>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <app_main+0x41a>
							HAL_NVIC_SystemReset();
 8002936:	f002 f9fc 	bl	8004d32 <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 800293a:	f001 fbdf 	bl	80040fc <HAL_GetTick>
 800293e:	4603      	mov	r3, r0
 8002940:	4a45      	ldr	r2, [pc, #276]	@ (8002a58 <app_main+0x538>)
 8002942:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002944:	f011 f9d0 	bl	8013ce8 <Rtc_set_alarm>

		//	adc_Measure(&_RunTime_Packet.battery_voltage);
			led_awake_routine();
 8002948:	f7ff f9c6 	bl	8001cd8 <led_awake_routine>
			save_data();
 800294c:	f7fe fda6 	bl	800149c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8002950:	2101      	movs	r1, #1
 8002952:	4844      	ldr	r0, [pc, #272]	@ (8002a64 <app_main+0x544>)
 8002954:	f003 fb9e 	bl	8006094 <HAL_GPIO_ReadPin>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <app_main+0x44c>
				_RunTime_Packet.motion_detection = 1;
 800295e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a50 <app_main+0x530>)
 8002960:	2201      	movs	r2, #1
 8002962:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002964:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <app_main+0x554>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e005      	b.n	8002978 <app_main+0x458>
			} else {
				_RunTime_Packet.motion_detection = 0;
 800296c:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <app_main+0x530>)
 800296e:	2200      	movs	r2, #0
 8002970:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002972:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <app_main+0x554>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002978:	f7fe fc30 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800297c:	f001 fbbe 	bl	80040fc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <app_main+0x558>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	4b3c      	ldr	r3, [pc, #240]	@ (8002a7c <app_main+0x55c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	f67f ae7b 	bls.w	8002688 <app_main+0x168>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 8002992:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <app_main+0x530>)
 8002994:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <app_main+0x49c>
 800299c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a50 <app_main+0x530>)
 800299e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <app_main+0x49c>
				|| _RunTime_Packet.fileformat_changed
 80029a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <app_main+0x530>)
 80029a8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <app_main+0x49c>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80029b0:	4b27      	ldr	r3, [pc, #156]	@ (8002a50 <app_main+0x530>)
 80029b2:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d11b      	bne.n	80029f4 <app_main+0x4d4>

			_RunTime_Packet.year_changed = 0;
 80029bc:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <app_main+0x530>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 80029c4:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <app_main+0x530>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 80029cc:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <app_main+0x530>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			_RunTime_Packet.sd_file_creation = createfile(
 80029d4:	4925      	ldr	r1, [pc, #148]	@ (8002a6c <app_main+0x54c>)
 80029d6:	4826      	ldr	r0, [pc, #152]	@ (8002a70 <app_main+0x550>)
 80029d8:	f01a f906 	bl	801cbe8 <createfile>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <app_main+0x530>)
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);


			/*be sure to save data before going to sleep*/
			while(save_param)
 80029e6:	e001      	b.n	80029ec <app_main+0x4cc>
			{
				save_data();
 80029e8:	f7fe fd58 	bl	800149c <save_data>
			while(save_param)
 80029ec:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <app_main+0x560>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <app_main+0x4c8>
			}
		}
		if (filesaving_process()) {
 80029f4:	f01a f8ce 	bl	801cb94 <filesaving_process>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d013      	beq.n	8002a26 <app_main+0x506>
			HAL_Delay(1500);
 80029fe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a02:	f001 fb87 	bl	8004114 <HAL_Delay>
			if (filesaving_process()) {
 8002a06:	f01a f8c5 	bl	801cb94 <filesaving_process>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <app_main+0x506>
				HAL_Delay(1500);
 8002a10:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a14:	f001 fb7e 	bl	8004114 <HAL_Delay>
				if (filesaving_process()) {
 8002a18:	f01a f8bc 	bl	801cb94 <filesaving_process>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <app_main+0x506>
					HAL_NVIC_SystemReset();
 8002a22:	f002 f986 	bl	8004d32 <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002a26:	f001 fb69 	bl	80040fc <HAL_GetTick>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a12      	ldr	r2, [pc, #72]	@ (8002a78 <app_main+0x558>)
 8002a2e:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 8002a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a34:	480b      	ldr	r0, [pc, #44]	@ (8002a64 <app_main+0x544>)
 8002a36:	f003 fb2d 	bl	8006094 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <app_main+0x528>

			sleep();
 8002a40:	f7ff f800 	bl	8001a44 <sleep>
			wakeup();
 8002a44:	f7ff f882 	bl	8001b4c <wakeup>

		}
		pwr_off_detected();
 8002a48:	f7fe fbc8 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002a4c:	e60c      	b.n	8002668 <app_main+0x148>
 8002a4e:	bf00      	nop
 8002a50:	20001530 	.word	0x20001530
 8002a54:	20001550 	.word	0x20001550
 8002a58:	200017c4 	.word	0x200017c4
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	40020000 	.word	0x40020000
 8002a68:	20000029 	.word	0x20000029
 8002a6c:	20001330 	.word	0x20001330
 8002a70:	200012cc 	.word	0x200012cc
 8002a74:	20001589 	.word	0x20001589
 8002a78:	200017c0 	.word	0x200017c0
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20001579 	.word	0x20001579

08002a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a88:	f001 fad2 	bl	8004030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a8c:	f000 f822 	bl	8002ad4 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a94:	f001 fb3e 	bl	8004114 <HAL_Delay>
  MX_GPIO_Init();
 8002a98:	f000 fb00 	bl	800309c <MX_GPIO_Init>
  MX_DMA_Init();
 8002a9c:	f000 fade 	bl	800305c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002aa0:	f000 f948 	bl	8002d34 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002aa4:	f000 fa86 	bl	8002fb4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002aa8:	f000 f91e 	bl	8002ce8 <MX_RTC_Init>
  MX_I2C1_Init();
 8002aac:	f000 f8d4 	bl	8002c58 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002ab0:	f000 f9b0 	bl	8002e14 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002ab4:	f000 faa8 	bl	8003008 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002ab8:	f000 f87c 	bl	8002bb4 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002abc:	f010 fef6 	bl	80138ac <MX_FATFS_Init>
  MX_TIM1_Init();
 8002ac0:	f000 f958 	bl	8002d74 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ac4:	f000 f9f4 	bl	8002eb0 <MX_TIM3_Init>
  MX_IWDG_Init();
 8002ac8:	f000 f8f4 	bl	8002cb4 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 8002acc:	f7ff fd28 	bl	8002520 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <main+0x4c>

08002ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b094      	sub	sp, #80	@ 0x50
 8002ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ada:	f107 0320 	add.w	r3, r7, #32
 8002ade:	2230      	movs	r2, #48	@ 0x30
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f01c f8f6 	bl	801ecd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <SystemClock_Config+0xd8>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <SystemClock_Config+0xd8>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <SystemClock_Config+0xd8>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <SystemClock_Config+0xdc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b20:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <SystemClock_Config+0xdc>)
 8002b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <SystemClock_Config+0xdc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002b34:	230d      	movs	r3, #13
 8002b36:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b42:	2301      	movs	r3, #1
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b46:	2302      	movs	r3, #2
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b50:	2319      	movs	r3, #25
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b5e:	2307      	movs	r3, #7
 8002b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b62:	f107 0320 	add.w	r3, r7, #32
 8002b66:	4618      	mov	r0, r3
 8002b68:	f005 ffd4 	bl	8008b14 <HAL_RCC_OscConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002b72:	f000 fd79 	bl	8003668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b76:	230f      	movs	r3, #15
 8002b78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 fa36 	bl	8009004 <HAL_RCC_ClockConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002b9e:	f000 fd63 	bl	8003668 <Error_Handler>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3750      	adds	r7, #80	@ 0x50
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000

08002bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bba:	463b      	mov	r3, r7
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bc8:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <MX_ADC1_Init+0x9c>)
 8002bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bda:	4b1c      	ldr	r3, [pc, #112]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002be6:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bee:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <MX_ADC1_Init+0xa0>)
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c14:	480d      	ldr	r0, [pc, #52]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002c16:	f001 fae5 	bl	80041e4 <HAL_ADC_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c20:	f000 fd22 	bl	8003668 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c24:	230a      	movs	r3, #10
 8002c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c30:	463b      	mov	r3, r7
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <MX_ADC1_Init+0x98>)
 8002c36:	f001 fccb 	bl	80045d0 <HAL_ADC_ConfigChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c40:	f000 fd12 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200017f0 	.word	0x200017f0
 8002c50:	40012000 	.word	0x40012000
 8002c54:	0f000001 	.word	0x0f000001

08002c58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c5e:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <MX_I2C1_Init+0x54>)
 8002c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c64:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <MX_I2C1_Init+0x58>)
 8002c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c88:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c96:	f003 fa47 	bl	8006128 <HAL_I2C_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ca0:	f000 fce2 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20001838 	.word	0x20001838
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	000186a0 	.word	0x000186a0

08002cb4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <MX_IWDG_Init+0x2c>)
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <MX_IWDG_Init+0x30>)
 8002cbc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <MX_IWDG_Init+0x2c>)
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <MX_IWDG_Init+0x2c>)
 8002cc6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002cca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002ccc:	4804      	ldr	r0, [pc, #16]	@ (8002ce0 <MX_IWDG_Init+0x2c>)
 8002cce:	f004 fb83 	bl	80073d8 <HAL_IWDG_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002cd8:	f000 fcc6 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	2000188c 	.word	0x2000188c
 8002ce4:	40003000 	.word	0x40003000

08002ce8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <MX_RTC_Init+0x48>)
 8002cf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002cfa:	227f      	movs	r2, #127	@ 0x7f
 8002cfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002d00:	22ff      	movs	r2, #255	@ 0xff
 8002d02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <MX_RTC_Init+0x44>)
 8002d18:	f006 fd10 	bl	800973c <HAL_RTC_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d22:	f000 fca1 	bl	8003668 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20001898 	.word	0x20001898
 8002d30:	40002800 	.word	0x40002800

08002d34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d70 <MX_SDIO_SD_Init+0x3c>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d56:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <MX_SDIO_SD_Init+0x38>)
 8002d5e:	2205      	movs	r2, #5
 8002d60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	200018b8 	.word	0x200018b8
 8002d70:	40012c00 	.word	0x40012c00

08002d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d90:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002d92:	4a1f      	ldr	r2, [pc, #124]	@ (8002e10 <MX_TIM1_Init+0x9c>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d96:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002da4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002da8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002db0:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dbc:	4813      	ldr	r0, [pc, #76]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002dbe:	f008 f927 	bl	800b010 <HAL_TIM_Base_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002dc8:	f000 fc4e 	bl	8003668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480c      	ldr	r0, [pc, #48]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002dda:	f008 fd63 	bl	800b8a4 <HAL_TIM_ConfigClockSource>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002de4:	f000 fc40 	bl	8003668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002de8:	2320      	movs	r3, #32
 8002dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002df0:	463b      	mov	r3, r7
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <MX_TIM1_Init+0x98>)
 8002df6:	f009 f91d 	bl	800c034 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e00:	f000 fc32 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000193c 	.word	0x2000193c
 8002e10:	40010000 	.word	0x40010000

08002e14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002e38:	4b1c      	ldr	r3, [pc, #112]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e40:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002e46:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e48:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e54:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e56:	2280      	movs	r2, #128	@ 0x80
 8002e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e5a:	4814      	ldr	r0, [pc, #80]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e5c:	f008 f8d8 	bl	800b010 <HAL_TIM_Base_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e66:	f000 fbff 	bl	8003668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	4619      	mov	r1, r3
 8002e76:	480d      	ldr	r0, [pc, #52]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e78:	f008 fd14 	bl	800b8a4 <HAL_TIM_ConfigClockSource>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e82:	f000 fbf1 	bl	8003668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4619      	mov	r1, r3
 8002e92:	4806      	ldr	r0, [pc, #24]	@ (8002eac <MX_TIM2_Init+0x98>)
 8002e94:	f009 f8ce 	bl	800c034 <HAL_TIMEx_MasterConfigSynchronization>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e9e:	f000 fbe3 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20001984 	.word	0x20001984

08002eb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	@ 0x38
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	f107 0320 	add.w	r3, r7, #32
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ee0:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002ee2:	4a33      	ldr	r2, [pc, #204]	@ (8002fb0 <MX_TIM3_Init+0x100>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ee6:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b2f      	ldr	r3, [pc, #188]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002ef4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ef8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f00:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f02:	2280      	movs	r2, #128	@ 0x80
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f06:	4829      	ldr	r0, [pc, #164]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f08:	f008 f882 	bl	800b010 <HAL_TIM_Base_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f12:	f000 fba9 	bl	8003668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f20:	4619      	mov	r1, r3
 8002f22:	4822      	ldr	r0, [pc, #136]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f24:	f008 fcbe 	bl	800b8a4 <HAL_TIM_ConfigClockSource>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f2e:	f000 fb9b 	bl	8003668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f32:	481e      	ldr	r0, [pc, #120]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f34:	f008 f9fb 	bl	800b32e <HAL_TIM_PWM_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f3e:	f000 fb93 	bl	8003668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f4a:	f107 0320 	add.w	r3, r7, #32
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4816      	ldr	r0, [pc, #88]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f52:	f009 f86f 	bl	800c034 <HAL_TIMEx_MasterConfigSynchronization>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f5c:	f000 fb84 	bl	8003668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f60:	2360      	movs	r3, #96	@ 0x60
 8002f62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	2200      	movs	r2, #0
 8002f74:	4619      	mov	r1, r3
 8002f76:	480d      	ldr	r0, [pc, #52]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f78:	f008 fbd2 	bl	800b720 <HAL_TIM_PWM_ConfigChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f82:	f000 fb71 	bl	8003668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2204      	movs	r2, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4807      	ldr	r0, [pc, #28]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f8e:	f008 fbc7 	bl	800b720 <HAL_TIM_PWM_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002f98:	f000 fb66 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f9c:	4803      	ldr	r0, [pc, #12]	@ (8002fac <MX_TIM3_Init+0xfc>)
 8002f9e:	f000 fd83 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 8002fa2:	bf00      	nop
 8002fa4:	3738      	adds	r7, #56	@ 0x38
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200019cc 	.word	0x200019cc
 8002fb0:	40000400 	.word	0x40000400

08002fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <MX_USART1_UART_Init+0x50>)
 8002fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b08      	ldr	r3, [pc, #32]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fea:	4805      	ldr	r0, [pc, #20]	@ (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fec:	f009 f8a4 	bl	800c138 <HAL_UART_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ff6:	f000 fb37 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20001a74 	.word	0x20001a74
 8003004:	40011000 	.word	0x40011000

08003008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 800300e:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <MX_USART2_UART_Init+0x50>)
 8003010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 8003014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 800302e:	220c      	movs	r2, #12
 8003030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	@ (8003054 <MX_USART2_UART_Init+0x4c>)
 8003040:	f009 f87a 	bl	800c138 <HAL_UART_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800304a:	f000 fb0d 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20001abc 	.word	0x20001abc
 8003058:	40004400 	.word	0x40004400

0800305c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <MX_DMA_Init+0x3c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a0b      	ldr	r2, [pc, #44]	@ (8003098 <MX_DMA_Init+0x3c>)
 800306c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <MX_DMA_Init+0x3c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2044      	movs	r0, #68	@ 0x44
 8003084:	f001 fe1d 	bl	8004cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003088:	2044      	movs	r0, #68	@ 0x44
 800308a:	f001 fe36 	bl	8004cfa <HAL_NVIC_EnableIRQ>

}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	@ 0x28
 80030a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b71      	ldr	r3, [pc, #452]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	4a70      	ldr	r2, [pc, #448]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c2:	4b6e      	ldr	r3, [pc, #440]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	4a69      	ldr	r2, [pc, #420]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030de:	4b67      	ldr	r3, [pc, #412]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b63      	ldr	r3, [pc, #396]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4a62      	ldr	r2, [pc, #392]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fa:	4b60      	ldr	r3, [pc, #384]	@ (800327c <MX_GPIO_Init+0x1e0>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	4b5c      	ldr	r3, [pc, #368]	@ (800327c <MX_GPIO_Init+0x1e0>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a5b      	ldr	r2, [pc, #364]	@ (800327c <MX_GPIO_Init+0x1e0>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b59      	ldr	r3, [pc, #356]	@ (800327c <MX_GPIO_Init+0x1e0>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4b55      	ldr	r3, [pc, #340]	@ (800327c <MX_GPIO_Init+0x1e0>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a54      	ldr	r2, [pc, #336]	@ (800327c <MX_GPIO_Init+0x1e0>)
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b52      	ldr	r3, [pc, #328]	@ (800327c <MX_GPIO_Init+0x1e0>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800313e:	2200      	movs	r2, #0
 8003140:	2102      	movs	r1, #2
 8003142:	484f      	ldr	r0, [pc, #316]	@ (8003280 <MX_GPIO_Init+0x1e4>)
 8003144:	f002 ffbe 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003148:	2201      	movs	r2, #1
 800314a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800314e:	484d      	ldr	r0, [pc, #308]	@ (8003284 <MX_GPIO_Init+0x1e8>)
 8003150:	f002 ffb8 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003154:	2200      	movs	r2, #0
 8003156:	2108      	movs	r1, #8
 8003158:	484a      	ldr	r0, [pc, #296]	@ (8003284 <MX_GPIO_Init+0x1e8>)
 800315a:	f002 ffb3 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800315e:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 8003162:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003164:	2303      	movs	r3, #3
 8003166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4619      	mov	r1, r3
 8003172:	4845      	ldr	r0, [pc, #276]	@ (8003288 <MX_GPIO_Init+0x1ec>)
 8003174:	f002 fd26 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003178:	2301      	movs	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4619      	mov	r1, r3
 800318a:	483d      	ldr	r0, [pc, #244]	@ (8003280 <MX_GPIO_Init+0x1e4>)
 800318c:	f002 fd1a 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8003190:	2302      	movs	r3, #2
 8003192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003194:	2301      	movs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800319c:	2302      	movs	r3, #2
 800319e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	4836      	ldr	r0, [pc, #216]	@ (8003280 <MX_GPIO_Init+0x1e4>)
 80031a8:	f002 fd0c 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80031ac:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80031b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b2:	2303      	movs	r3, #3
 80031b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	482f      	ldr	r0, [pc, #188]	@ (8003280 <MX_GPIO_Init+0x1e4>)
 80031c2:	f002 fcff 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80031c6:	f247 4307 	movw	r3, #29703	@ 0x7407
 80031ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031cc:	2303      	movs	r3, #3
 80031ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	4619      	mov	r1, r3
 80031da:	482a      	ldr	r0, [pc, #168]	@ (8003284 <MX_GPIO_Init+0x1e8>)
 80031dc:	f002 fcf2 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80031e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4822      	ldr	r0, [pc, #136]	@ (8003284 <MX_GPIO_Init+0x1e8>)
 80031fa:	f002 fce3 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80031fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003204:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800320a:	2302      	movs	r3, #2
 800320c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	481a      	ldr	r0, [pc, #104]	@ (8003280 <MX_GPIO_Init+0x1e4>)
 8003216:	f002 fcd5 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 800321a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800321e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003220:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	4813      	ldr	r0, [pc, #76]	@ (8003280 <MX_GPIO_Init+0x1e4>)
 8003232:	f002 fcc7 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003236:	2308      	movs	r3, #8
 8003238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4619      	mov	r1, r3
 800324c:	480d      	ldr	r0, [pc, #52]	@ (8003284 <MX_GPIO_Init+0x1e8>)
 800324e:	f002 fcb9 	bl	8005bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	2017      	movs	r0, #23
 8003258:	f001 fd33 	bl	8004cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800325c:	2017      	movs	r0, #23
 800325e:	f001 fd4c 	bl	8004cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	2028      	movs	r0, #40	@ 0x28
 8003268:	f001 fd2b 	bl	8004cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800326c:	2028      	movs	r0, #40	@ 0x28
 800326e:	f001 fd44 	bl	8004cfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003272:	bf00      	nop
 8003274:	3728      	adds	r7, #40	@ 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	40020800 	.word	0x40020800

0800328c <gpio_analog>:

/* USER CODE BEGIN 4 */

void gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <gpio_analog+0x13c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a47      	ldr	r2, [pc, #284]	@ (80033c8 <gpio_analog+0x13c>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b45      	ldr	r3, [pc, #276]	@ (80033c8 <gpio_analog+0x13c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	4b41      	ldr	r3, [pc, #260]	@ (80033c8 <gpio_analog+0x13c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a40      	ldr	r2, [pc, #256]	@ (80033c8 <gpio_analog+0x13c>)
 80032c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b3e      	ldr	r3, [pc, #248]	@ (80033c8 <gpio_analog+0x13c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	4b3a      	ldr	r3, [pc, #232]	@ (80033c8 <gpio_analog+0x13c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a39      	ldr	r2, [pc, #228]	@ (80033c8 <gpio_analog+0x13c>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <gpio_analog+0x13c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	4b33      	ldr	r3, [pc, #204]	@ (80033c8 <gpio_analog+0x13c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a32      	ldr	r2, [pc, #200]	@ (80033c8 <gpio_analog+0x13c>)
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b30      	ldr	r3, [pc, #192]	@ (80033c8 <gpio_analog+0x13c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4b2c      	ldr	r3, [pc, #176]	@ (80033c8 <gpio_analog+0x13c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a2b      	ldr	r2, [pc, #172]	@ (80033c8 <gpio_analog+0x13c>)
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b29      	ldr	r3, [pc, #164]	@ (80033c8 <gpio_analog+0x13c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800332e:	2308      	movs	r3, #8
 8003330:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003332:	2303      	movs	r3, #3
 8003334:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4821      	ldr	r0, [pc, #132]	@ (80033cc <gpio_analog+0x140>)
 8003346:	f002 fc3d 	bl	8005bc4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = EN_5V_Pin;
 800334a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800334e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003350:	2303      	movs	r3, #3
 8003352:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	481a      	ldr	r0, [pc, #104]	@ (80033cc <gpio_analog+0x140>)
 8003364:	f002 fc2e 	bl	8005bc4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003368:	2301      	movs	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336c:	2303      	movs	r3, #3
 800336e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4814      	ldr	r0, [pc, #80]	@ (80033d0 <gpio_analog+0x144>)
 8003380:	f002 fc20 	bl	8005bc4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8003384:	2302      	movs	r3, #2
 8003386:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003388:	2303      	movs	r3, #3
 800338a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	480d      	ldr	r0, [pc, #52]	@ (80033d0 <gpio_analog+0x144>)
 800339c:	f002 fc12 	bl	8005bc4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80033a0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80033a4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a6:	2303      	movs	r3, #3
 80033a8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4619      	mov	r1, r3
 80033b8:	4805      	ldr	r0, [pc, #20]	@ (80033d0 <gpio_analog+0x144>)
 80033ba:	f002 fc03 	bl	8005bc4 <HAL_GPIO_Init>

}
 80033be:	bf00      	nop
 80033c0:	3728      	adds	r7, #40	@ 0x28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020000 	.word	0x40020000

080033d4 <i2c1_gpio_analog>:
void i2c1_gpio_analog()
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80033e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033ec:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ee:	2303      	movs	r3, #3
 80033f0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4803      	ldr	r0, [pc, #12]	@ (800340c <i2c1_gpio_analog+0x38>)
 8003400:	f002 fbe0 	bl	8005bc4 <HAL_GPIO_Init>


}
 8003404:	bf00      	nop
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40020400 	.word	0x40020400

08003410 <uart_gpio_analog>:
void uart_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003424:	23c0      	movs	r3, #192	@ 0xc0
 8003426:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003428:	2303      	movs	r3, #3
 800342a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4809      	ldr	r0, [pc, #36]	@ (8003460 <uart_gpio_analog+0x50>)
 800343a:	f002 fbc3 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800343e:	230c      	movs	r3, #12
 8003440:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003442:	2303      	movs	r3, #3
 8003444:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4804      	ldr	r0, [pc, #16]	@ (8003464 <uart_gpio_analog+0x54>)
 8003454:	f002 fbb6 	bl	8005bc4 <HAL_GPIO_Init>
}
 8003458:	bf00      	nop
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40020400 	.word	0x40020400
 8003464:	40020000 	.word	0x40020000

08003468 <timer_gpio_analog>:
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
void timer_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 800347c:	2330      	movs	r3, #48	@ 0x30
 800347e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003480:	2303      	movs	r3, #3
 8003482:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4803      	ldr	r0, [pc, #12]	@ (80034a0 <timer_gpio_analog+0x38>)
 8003492:	f002 fb97 	bl	8005bc4 <HAL_GPIO_Init>

}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40020400 	.word	0x40020400

080034a4 <gpio_disable>:



void gpio_disable()
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
	i2c1_gpio_analog();
 80034aa:	f7ff ff93 	bl	80033d4 <i2c1_gpio_analog>
	 uart_gpio_analog();
 80034ae:	f7ff ffaf 	bl	8003410 <uart_gpio_analog>
	// usb_gpio_analog();
	 timer_gpio_analog();
 80034b2:	f7ff ffd9 	bl	8003468 <timer_gpio_analog>
	 gpio_analog();
 80034b6:	f7ff fee9 	bl	800328c <gpio_analog>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80034c8:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80034cc:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ce:	2303      	movs	r3, #3
 80034d0:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	480a      	ldr	r0, [pc, #40]	@ (8003508 <gpio_disable+0x64>)
 80034e0:	f002 fb70 	bl	8005bc4 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034e4:	2304      	movs	r3, #4
 80034e6:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e8:	2303      	movs	r3, #3
 80034ea:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4804      	ldr	r0, [pc, #16]	@ (800350c <gpio_disable+0x68>)
 80034fa:	f002 fb63 	bl	8005bc4 <HAL_GPIO_Init>

}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00

08003510 <gpio_enable>:
void gpio_enable()
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8003516:	f7ff fdc1 	bl	800309c <MX_GPIO_Init>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003528:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800352c:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003536:	2303      	movs	r3, #3
 8003538:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800353a:	230c      	movs	r3, #12
 800353c:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	4619      	mov	r1, r3
 8003542:	480b      	ldr	r0, [pc, #44]	@ (8003570 <gpio_enable+0x60>)
 8003544:	f002 fb3e 	bl	8005bc4 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003548:	2304      	movs	r3, #4
 800354a:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003558:	230c      	movs	r3, #12
 800355a:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4804      	ldr	r0, [pc, #16]	@ (8003574 <gpio_enable+0x64>)
 8003562:	f002 fb2f 	bl	8005bc4 <HAL_GPIO_Init>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00

08003578 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003588:	d101      	bne.n	800358e <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 800358a:	f7fd fdd1 	bl	8001130 <timer_interrupt>
}

}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80035a8:	f7fd fda6 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035b2:	d118      	bne.n	80035e6 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <HAL_GPIO_EXTI_Callback+0x64>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <HAL_GPIO_EXTI_Callback+0x64>)
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 80035c4:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <HAL_GPIO_EXTI_Callback+0x64>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <HAL_GPIO_EXTI_Callback+0x68>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80035d2:	f000 fd93 	bl	80040fc <HAL_GetTick>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <HAL_GPIO_EXTI_Callback+0x6c>)
 80035da:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80035dc:	f000 fd8e 	bl	80040fc <HAL_GetTick>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4a09      	ldr	r2, [pc, #36]	@ (8003608 <HAL_GPIO_EXTI_Callback+0x70>)
 80035e4:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 80035ee:	f7fd fdb9 	bl	8001164 <power_off_detect>
    }
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20001530 	.word	0x20001530
 8003600:	20001584 	.word	0x20001584
 8003604:	200017c8 	.word	0x200017c8
 8003608:	200017c0 	.word	0x200017c0

0800360c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003614:	f010 fac8 	bl	8013ba8 <RtcInt>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <HAL_UART_ErrorCallback+0x40>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d106      	bne.n	800363e <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	43d2      	mvns	r2, r2
 800363a:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 800363c:	e009      	b.n	8003652 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <HAL_UART_ErrorCallback+0x44>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d105      	bne.n	8003652 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	43d2      	mvns	r2, r2
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20001a74 	.word	0x20001a74
 8003664:	20001abc 	.word	0x20001abc

08003668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800366c:	b672      	cpsid	i
}
 800366e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 8003670:	f001 fb5f 	bl	8004d32 <HAL_NVIC_SystemReset>
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <Error_Handler+0xc>

08003678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <HAL_MspInit+0x4c>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	4a0f      	ldr	r2, [pc, #60]	@ (80036c4 <HAL_MspInit+0x4c>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800368c:	6453      	str	r3, [r2, #68]	@ 0x44
 800368e:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <HAL_MspInit+0x4c>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <HAL_MspInit+0x4c>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	4a08      	ldr	r2, [pc, #32]	@ (80036c4 <HAL_MspInit+0x4c>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_MspInit+0x4c>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <HAL_ADC_MspInit+0x7c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d127      	bne.n	800373a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	4b16      	ldr	r3, [pc, #88]	@ (8003748 <HAL_ADC_MspInit+0x80>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <HAL_ADC_MspInit+0x80>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036fa:	4b13      	ldr	r3, [pc, #76]	@ (8003748 <HAL_ADC_MspInit+0x80>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4b0f      	ldr	r3, [pc, #60]	@ (8003748 <HAL_ADC_MspInit+0x80>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	4a0e      	ldr	r2, [pc, #56]	@ (8003748 <HAL_ADC_MspInit+0x80>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6313      	str	r3, [r2, #48]	@ 0x30
 8003716:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <HAL_ADC_MspInit+0x80>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8003722:	2301      	movs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003726:	2303      	movs	r3, #3
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	@ (800374c <HAL_ADC_MspInit+0x84>)
 8003736:	f002 fa45 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	@ 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40012000 	.word	0x40012000
 8003748:	40023800 	.word	0x40023800
 800374c:	40020800 	.word	0x40020800

08003750 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a08      	ldr	r2, [pc, #32]	@ (8003780 <HAL_ADC_MspDeInit+0x30>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d109      	bne.n	8003776 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003762:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_ADC_MspDeInit+0x34>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <HAL_ADC_MspDeInit+0x34>)
 8003768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800376c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800376e:	2101      	movs	r1, #1
 8003770:	4805      	ldr	r0, [pc, #20]	@ (8003788 <HAL_ADC_MspDeInit+0x38>)
 8003772:	f002 fbab 	bl	8005ecc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40012000 	.word	0x40012000
 8003784:	40023800 	.word	0x40023800
 8003788:	40020800 	.word	0x40020800

0800378c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	@ 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a19      	ldr	r2, [pc, #100]	@ (8003810 <HAL_I2C_MspInit+0x84>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d12c      	bne.n	8003808 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	4b18      	ldr	r3, [pc, #96]	@ (8003814 <HAL_I2C_MspInit+0x88>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	4a17      	ldr	r2, [pc, #92]	@ (8003814 <HAL_I2C_MspInit+0x88>)
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <HAL_I2C_MspInit+0x88>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80037ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037d0:	2312      	movs	r3, #18
 80037d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d8:	2303      	movs	r3, #3
 80037da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037dc:	2304      	movs	r3, #4
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	4619      	mov	r1, r3
 80037e6:	480c      	ldr	r0, [pc, #48]	@ (8003818 <HAL_I2C_MspInit+0x8c>)
 80037e8:	f002 f9ec 	bl	8005bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <HAL_I2C_MspInit+0x88>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	4a07      	ldr	r2, [pc, #28]	@ (8003814 <HAL_I2C_MspInit+0x88>)
 80037f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80037fc:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <HAL_I2C_MspInit+0x88>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003808:	bf00      	nop
 800380a:	3728      	adds	r7, #40	@ 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40005400 	.word	0x40005400
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0b      	ldr	r2, [pc, #44]	@ (8003858 <HAL_I2C_MspDeInit+0x3c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10f      	bne.n	800384e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_I2C_MspDeInit+0x40>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <HAL_I2C_MspDeInit+0x40>)
 8003834:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003838:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 800383a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800383e:	4808      	ldr	r0, [pc, #32]	@ (8003860 <HAL_I2C_MspDeInit+0x44>)
 8003840:	f002 fb44 	bl	8005ecc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003848:	4805      	ldr	r0, [pc, #20]	@ (8003860 <HAL_I2C_MspDeInit+0x44>)
 800384a:	f002 fb3f 	bl	8005ecc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40005400 	.word	0x40005400
 800385c:	40023800 	.word	0x40023800
 8003860:	40020400 	.word	0x40020400

08003864 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a10      	ldr	r2, [pc, #64]	@ (80038c4 <HAL_RTC_MspInit+0x60>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d119      	bne.n	80038ba <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003886:	2302      	movs	r3, #2
 8003888:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800388a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800388e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	4618      	mov	r0, r3
 8003896:	f005 fd95 	bl	80093c4 <HAL_RCCEx_PeriphCLKConfig>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80038a0:	f7ff fee2 	bl	8003668 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <HAL_RTC_MspInit+0x64>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	2029      	movs	r0, #41	@ 0x29
 80038b0:	f001 fa07 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80038b4:	2029      	movs	r0, #41	@ 0x29
 80038b6:	f001 fa20 	bl	8004cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038ba:	bf00      	nop
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40002800 	.word	0x40002800
 80038c8:	42470e3c 	.word	0x42470e3c

080038cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a28      	ldr	r2, [pc, #160]	@ (800398c <HAL_SD_MspInit+0xc0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d14a      	bne.n	8003984 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	4a26      	ldr	r2, [pc, #152]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 80038f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038fe:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6313      	str	r3, [r2, #48]	@ 0x30
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	6313      	str	r3, [r2, #48]	@ 0x30
 8003936:	4b16      	ldr	r3, [pc, #88]	@ (8003990 <HAL_SD_MspInit+0xc4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003942:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003954:	230c      	movs	r3, #12
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4619      	mov	r1, r3
 800395e:	480d      	ldr	r0, [pc, #52]	@ (8003994 <HAL_SD_MspInit+0xc8>)
 8003960:	f002 f930 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003964:	2304      	movs	r3, #4
 8003966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003970:	2303      	movs	r3, #3
 8003972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003974:	230c      	movs	r3, #12
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4619      	mov	r1, r3
 800397e:	4806      	ldr	r0, [pc, #24]	@ (8003998 <HAL_SD_MspInit+0xcc>)
 8003980:	f002 f920 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003984:	bf00      	nop
 8003986:	3728      	adds	r7, #40	@ 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40023800 	.word	0x40023800
 8003994:	40020800 	.word	0x40020800
 8003998:	40020c00 	.word	0x40020c00

0800399c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003a94 <HAL_TIM_Base_MspInit+0xf8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d13f      	bne.n	8003a2e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	4b39      	ldr	r3, [pc, #228]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	4a38      	ldr	r2, [pc, #224]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039be:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80039ca:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039cc:	4a34      	ldr	r2, [pc, #208]	@ (8003aa0 <HAL_TIM_Base_MspInit+0x104>)
 80039ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80039d0:	4b32      	ldr	r3, [pc, #200]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039d2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80039d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039d8:	4b30      	ldr	r3, [pc, #192]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039da:	2240      	movs	r2, #64	@ 0x40
 80039dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80039de:	4b2f      	ldr	r3, [pc, #188]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039ec:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039f4:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80039fc:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 80039fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a02:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a0a:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003a10:	4822      	ldr	r0, [pc, #136]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 8003a12:	f001 f99f 	bl	8004d54 <HAL_DMA_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003a1c:	f7ff fe24 	bl	8003668 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 8003a24:	621a      	str	r2, [r3, #32]
 8003a26:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_TIM_Base_MspInit+0x100>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a2c:	e02e      	b.n	8003a8c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a36:	d116      	bne.n	8003a66 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	4a15      	ldr	r2, [pc, #84]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a48:	4b13      	ldr	r3, [pc, #76]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	201c      	movs	r0, #28
 8003a5a:	f001 f932 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a5e:	201c      	movs	r0, #28
 8003a60:	f001 f94b 	bl	8004cfa <HAL_NVIC_EnableIRQ>
}
 8003a64:	e012      	b.n	8003a8c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x108>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10d      	bne.n	8003a8c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	4a07      	ldr	r2, [pc, #28]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 8003a7a:	f043 0302 	orr.w	r3, r3, #2
 8003a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_TIM_Base_MspInit+0xfc>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	20001a14 	.word	0x20001a14
 8003aa0:	40026488 	.word	0x40026488
 8003aa4:	40000400 	.word	0x40000400

08003aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a12      	ldr	r2, [pc, #72]	@ (8003b10 <HAL_TIM_MspPostInit+0x68>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d11d      	bne.n	8003b06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_TIM_MspPostInit+0x6c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	4a10      	ldr	r2, [pc, #64]	@ (8003b14 <HAL_TIM_MspPostInit+0x6c>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ada:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_TIM_MspPostInit+0x6c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003ae6:	2330      	movs	r3, #48	@ 0x30
 8003ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003af6:	2302      	movs	r3, #2
 8003af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	f107 030c 	add.w	r3, r7, #12
 8003afe:	4619      	mov	r1, r3
 8003b00:	4805      	ldr	r0, [pc, #20]	@ (8003b18 <HAL_TIM_MspPostInit+0x70>)
 8003b02:	f002 f85f 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b06:	bf00      	nop
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40020400 	.word	0x40020400

08003b1c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x68>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10b      	bne.n	8003b46 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003b2e:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 f9b6 	bl	8004eb0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003b44:	e019      	b.n	8003b7a <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4e:	d109      	bne.n	8003b64 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003b50:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	4a0c      	ldr	r2, [pc, #48]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003b5c:	201c      	movs	r0, #28
 8003b5e:	f001 f8da 	bl	8004d16 <HAL_NVIC_DisableIRQ>
}
 8003b62:	e00a      	b.n	8003b7a <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <HAL_TIM_Base_MspDeInit+0x70>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d105      	bne.n	8003b7a <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b74:	f023 0302 	bic.w	r3, r3, #2
 8003b78:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40000400 	.word	0x40000400

08003b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	@ 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3a      	ldr	r2, [pc, #232]	@ (8003c98 <HAL_UART_MspInit+0x108>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d134      	bne.n	8003c1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003bbc:	f043 0310 	orr.w	r3, r3, #16
 8003bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bc2:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	4b32      	ldr	r3, [pc, #200]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	4a31      	ldr	r2, [pc, #196]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bde:	4b2f      	ldr	r3, [pc, #188]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003bea:	23c0      	movs	r3, #192	@ 0xc0
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 031c 	add.w	r3, r7, #28
 8003c02:	4619      	mov	r1, r3
 8003c04:	4826      	ldr	r0, [pc, #152]	@ (8003ca0 <HAL_UART_MspInit+0x110>)
 8003c06:	f001 ffdd 	bl	8005bc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2025      	movs	r0, #37	@ 0x25
 8003c10:	f001 f857 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c14:	2025      	movs	r0, #37	@ 0x25
 8003c16:	f001 f870 	bl	8004cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c1a:	e038      	b.n	8003c8e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a20      	ldr	r2, [pc, #128]	@ (8003ca4 <HAL_UART_MspInit+0x114>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d133      	bne.n	8003c8e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c36:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c52:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <HAL_UART_MspInit+0x10c>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003c5e:	230c      	movs	r3, #12
 8003c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c62:	2302      	movs	r3, #2
 8003c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c6e:	2307      	movs	r3, #7
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	4619      	mov	r1, r3
 8003c78:	480b      	ldr	r0, [pc, #44]	@ (8003ca8 <HAL_UART_MspInit+0x118>)
 8003c7a:	f001 ffa3 	bl	8005bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2026      	movs	r0, #38	@ 0x26
 8003c84:	f001 f81d 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c88:	2026      	movs	r0, #38	@ 0x26
 8003c8a:	f001 f836 	bl	8004cfa <HAL_NVIC_EnableIRQ>
}
 8003c8e:	bf00      	nop
 8003c90:	3730      	adds	r7, #48	@ 0x30
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	40004400 	.word	0x40004400
 8003ca8:	40020000 	.word	0x40020000

08003cac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <HAL_UART_MspDeInit+0x5c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10d      	bne.n	8003cda <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003cbe:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <HAL_UART_MspDeInit+0x60>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	4a12      	ldr	r2, [pc, #72]	@ (8003d0c <HAL_UART_MspDeInit+0x60>)
 8003cc4:	f023 0310 	bic.w	r3, r3, #16
 8003cc8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003cca:	21c0      	movs	r1, #192	@ 0xc0
 8003ccc:	4810      	ldr	r0, [pc, #64]	@ (8003d10 <HAL_UART_MspDeInit+0x64>)
 8003cce:	f002 f8fd 	bl	8005ecc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003cd2:	2025      	movs	r0, #37	@ 0x25
 8003cd4:	f001 f81f 	bl	8004d16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003cd8:	e011      	b.n	8003cfe <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a0d      	ldr	r2, [pc, #52]	@ (8003d14 <HAL_UART_MspDeInit+0x68>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d10c      	bne.n	8003cfe <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_UART_MspDeInit+0x60>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <HAL_UART_MspDeInit+0x60>)
 8003cea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003cee:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003cf0:	210c      	movs	r1, #12
 8003cf2:	4809      	ldr	r0, [pc, #36]	@ (8003d18 <HAL_UART_MspDeInit+0x6c>)
 8003cf4:	f002 f8ea 	bl	8005ecc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003cf8:	2026      	movs	r0, #38	@ 0x26
 8003cfa:	f001 f80c 	bl	8004d16 <HAL_NVIC_DisableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40011000 	.word	0x40011000
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40004400 	.word	0x40004400
 8003d18:	40020000 	.word	0x40020000

08003d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d20:	f001 f807 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <NMI_Handler+0x8>

08003d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d2c:	f001 f801 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <HardFault_Handler+0x8>

08003d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d38:	f000 fffb 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <MemManage_Handler+0x8>

08003d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d44:	f000 fff5 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <BusFault_Handler+0x8>

08003d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d50:	f000 ffef 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <UsageFault_Handler+0x8>

08003d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d5c:	f000 ffe9 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d68:	f000 ffe3 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d74:	f000 ffdd 	bl	8004d32 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d78:	bf00      	nop
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 8003d80:	4803      	ldr	r0, [pc, #12]	@ (8003d90 <SysTick_Handler+0x14>)
 8003d82:	f003 fb6b 	bl	800745c <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d86:	f000 f9a5 	bl	80040d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000188c 	.word	0x2000188c

08003d94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003d98:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003d9c:	f002 f9ac 	bl	80060f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003da8:	4802      	ldr	r0, [pc, #8]	@ (8003db4 <TIM2_IRQHandler+0x10>)
 8003daa:	f007 fbc9 	bl	800b540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20001984 	.word	0x20001984

08003db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dbc:	4802      	ldr	r0, [pc, #8]	@ (8003dc8 <USART1_IRQHandler+0x10>)
 8003dbe:	f008 fb4b 	bl	800c458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20001a74 	.word	0x20001a74

08003dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dd0:	4802      	ldr	r0, [pc, #8]	@ (8003ddc <USART2_IRQHandler+0x10>)
 8003dd2:	f008 fb41 	bl	800c458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20001abc 	.word	0x20001abc

08003de0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003de4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003de8:	f002 f986 	bl	80060f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003df4:	4802      	ldr	r0, [pc, #8]	@ (8003e00 <RTC_Alarm_IRQHandler+0x10>)
 8003df6:	f006 f833 	bl	8009e60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20001898 	.word	0x20001898

08003e04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e08:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <OTG_FS_IRQHandler+0x10>)
 8003e0a:	f003 fcd9 	bl	80077c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20002908 	.word	0x20002908

08003e18 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003e1c:	4802      	ldr	r0, [pc, #8]	@ (8003e28 <DMA2_Stream5_IRQHandler+0x10>)
 8003e1e:	f001 f973 	bl	8005108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20001a14 	.word	0x20001a14

08003e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return 1;
 8003e30:	2301      	movs	r3, #1
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_kill>:

int _kill(int pid, int sig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e46:	f01b f827 	bl	801ee98 <__errno>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2216      	movs	r2, #22
 8003e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_exit>:

void _exit (int status)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e64:	f04f 31ff 	mov.w	r1, #4294967295
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe7 	bl	8003e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <_exit+0x12>

08003e72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e00a      	b.n	8003e9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e84:	f3af 8000 	nop.w
 8003e88:	4601      	mov	r1, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	60ba      	str	r2, [r7, #8]
 8003e90:	b2ca      	uxtb	r2, r1
 8003e92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3301      	adds	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	dbf0      	blt.n	8003e84 <_read+0x12>
  }

  return len;
 8003ea2:	687b      	ldr	r3, [r7, #4]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e009      	b.n	8003ed2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	60ba      	str	r2, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	dbf1      	blt.n	8003ebe <_write+0x12>
  }
  return len;
 8003eda:	687b      	ldr	r3, [r7, #4]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_close>:

int _close(int file)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_isatty>:

int _isatty(int file)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f24:	2301      	movs	r3, #1
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <_sbrk+0x5c>)
 8003f56:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <_sbrk+0x60>)
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <_sbrk+0x64>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f68:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <_sbrk+0x64>)
 8003f6a:	4a12      	ldr	r2, [pc, #72]	@ (8003fb4 <_sbrk+0x68>)
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <_sbrk+0x64>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d207      	bcs.n	8003f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f7c:	f01a ff8c 	bl	801ee98 <__errno>
 8003f80:	4603      	mov	r3, r0
 8003f82:	220c      	movs	r2, #12
 8003f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	e009      	b.n	8003fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f8c:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <_sbrk+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f92:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <_sbrk+0x64>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <_sbrk+0x64>)
 8003f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20018000 	.word	0x20018000
 8003fac:	00000400 	.word	0x00000400
 8003fb0:	20001b04 	.word	0x20001b04
 8003fb4:	200037b0 	.word	0x200037b0

08003fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <SystemInit+0x20>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	4a05      	ldr	r2, [pc, #20]	@ (8003fd8 <SystemInit+0x20>)
 8003fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fe0:	480d      	ldr	r0, [pc, #52]	@ (8004018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fe2:	490e      	ldr	r1, [pc, #56]	@ (800401c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8004028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004006:	f7ff ffd7 	bl	8003fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800400a:	f01a ff4b 	bl	801eea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400e:	f7fe fd39 	bl	8002a84 <main>
  bx  lr    
 8004012:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004014:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800401c:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8004020:	080258d4 	.word	0x080258d4
  ldr r2, =_sbss
 8004024:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8004028:	200037b0 	.word	0x200037b0

0800402c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800402c:	e7fe      	b.n	800402c <ADC_IRQHandler>
	...

08004030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004034:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0d      	ldr	r2, [pc, #52]	@ (8004070 <HAL_Init+0x40>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800403e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <HAL_Init+0x40>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800404a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800404c:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	@ (8004070 <HAL_Init+0x40>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f000 fe27 	bl	8004cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800405e:	200f      	movs	r0, #15
 8004060:	f000 f808 	bl	8004074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004064:	f7ff fb08 	bl	8003678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00

08004074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_InitTick+0x54>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_InitTick+0x58>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4619      	mov	r1, r3
 8004086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408a:	fbb3 f3f1 	udiv	r3, r3, r1
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fe51 	bl	8004d3a <HAL_SYSTICK_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e00e      	b.n	80040c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d80a      	bhi.n	80040be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a8:	2200      	movs	r2, #0
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	f000 fe07 	bl	8004cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b4:	4a06      	ldr	r2, [pc, #24]	@ (80040d0 <HAL_InitTick+0x5c>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000010 	.word	0x20000010
 80040cc:	20000018 	.word	0x20000018
 80040d0:	20000014 	.word	0x20000014

080040d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_IncTick+0x20>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_IncTick+0x24>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_IncTick+0x24>)
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000018 	.word	0x20000018
 80040f8:	20001b08 	.word	0x20001b08

080040fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004100:	4b03      	ldr	r3, [pc, #12]	@ (8004110 <HAL_GetTick+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20001b08 	.word	0x20001b08

08004114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800411c:	f7ff ffee 	bl	80040fc <HAL_GetTick>
 8004120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d005      	beq.n	800413a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_Delay+0x44>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413a:	bf00      	nop
 800413c:	f7ff ffde 	bl	80040fc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d8f7      	bhi.n	800413c <HAL_Delay+0x28>
  {
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000018 	.word	0x20000018

0800415c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_SuspendTick+0x1c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <HAL_SuspendTick+0x1c>)
 8004166:	f023 0302 	bic.w	r3, r3, #2
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e010 	.word	0xe000e010

0800417c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <HAL_ResumeTick+0x1c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a04      	ldr	r2, [pc, #16]	@ (8004198 <HAL_ResumeTick+0x1c>)
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	e000e010 	.word	0xe000e010

0800419c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <HAL_GetUIDw0+0x14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	1fff7a10 	.word	0x1fff7a10

080041b4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80041b8:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_GetUIDw1+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	1fff7a14 	.word	0x1fff7a14

080041cc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80041d0:	4b03      	ldr	r3, [pc, #12]	@ (80041e0 <HAL_GetUIDw2+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	1fff7a18 	.word	0x1fff7a18

080041e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e033      	b.n	8004262 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fa60 	bl	80036c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800422a:	f023 0302 	bic.w	r3, r3, #2
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 faec 	bl	8004814 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	f043 0201 	orr.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	@ 0x40
 8004252:	e001      	b.n	8004258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e022      	b.n	80042c6 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0202 	orr.w	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fa50 	bl	8003750 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_Start+0x1a>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e097      	b.n	800441a <HAL_ADC_Start+0x14a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d018      	beq.n	8004332 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004310:	4b45      	ldr	r3, [pc, #276]	@ (8004428 <HAL_ADC_Start+0x158>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a45      	ldr	r2, [pc, #276]	@ (800442c <HAL_ADC_Start+0x15c>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0c9a      	lsrs	r2, r3, #18
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004324:	e002      	b.n	800432c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3b01      	subs	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f9      	bne.n	8004326 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d15f      	bne.n	8004400 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800436a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437e:	d106      	bne.n	800438e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004384:	f023 0206 	bic.w	r2, r3, #6
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	645a      	str	r2, [r3, #68]	@ 0x44
 800438c:	e002      	b.n	8004394 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800439c:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_ADC_Start+0x160>)
 800439e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043a8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d129      	bne.n	8004418 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	e020      	b.n	8004418 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a16      	ldr	r2, [pc, #88]	@ (8004434 <HAL_ADC_Start+0x164>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d11b      	bne.n	8004418 <HAL_ADC_Start+0x148>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d114      	bne.n	8004418 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	e00b      	b.n	8004418 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000010 	.word	0x20000010
 800442c:	431bde83 	.word	0x431bde83
 8004430:	40012300 	.word	0x40012300
 8004434:	40012000 	.word	0x40012000

08004438 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_ADC_Stop+0x16>
 800444a:	2302      	movs	r3, #2
 800444c:	e021      	b.n	8004492 <HAL_ADC_Stop+0x5a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ba:	d113      	bne.n	80044e4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ca:	d10b      	bne.n	80044e4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e063      	b.n	80045ac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e4:	f7ff fe0a 	bl	80040fc <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044ea:	e021      	b.n	8004530 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d01d      	beq.n	8004530 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HAL_ADC_PollForConversion+0x6c>
 80044fa:	f7ff fdff 	bl	80040fc <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d212      	bcs.n	8004530 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d00b      	beq.n	8004530 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e03d      	b.n	80045ac <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d1d6      	bne.n	80044ec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0212 	mvn.w	r2, #18
 8004546:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d123      	bne.n	80045aa <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11f      	bne.n	80045aa <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d111      	bne.n	80045aa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x1c>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e105      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x228>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b09      	cmp	r3, #9
 80045fa:	d925      	bls.n	8004648 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	4613      	mov	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4413      	add	r3, r2
 8004610:	3b1e      	subs	r3, #30
 8004612:	2207      	movs	r2, #7
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43da      	mvns	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	400a      	ands	r2, r1
 8004620:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68d9      	ldr	r1, [r3, #12]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	4618      	mov	r0, r3
 8004634:	4603      	mov	r3, r0
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4403      	add	r3, r0
 800463a:	3b1e      	subs	r3, #30
 800463c:	409a      	lsls	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	e022      	b.n	800468e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6919      	ldr	r1, [r3, #16]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	2207      	movs	r2, #7
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43da      	mvns	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	400a      	ands	r2, r1
 800466a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6919      	ldr	r1, [r3, #16]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	4618      	mov	r0, r3
 800467e:	4603      	mov	r3, r0
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4403      	add	r3, r0
 8004684:	409a      	lsls	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b06      	cmp	r3, #6
 8004694:	d824      	bhi.n	80046e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	3b05      	subs	r3, #5
 80046a8:	221f      	movs	r2, #31
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	400a      	ands	r2, r1
 80046b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4618      	mov	r0, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	3b05      	subs	r3, #5
 80046d2:	fa00 f203 	lsl.w	r2, r0, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80046de:	e04c      	b.n	800477a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d824      	bhi.n	8004732 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	3b23      	subs	r3, #35	@ 0x23
 80046fa:	221f      	movs	r2, #31
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43da      	mvns	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	400a      	ands	r2, r1
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	3b23      	subs	r3, #35	@ 0x23
 8004724:	fa00 f203 	lsl.w	r2, r0, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004730:	e023      	b.n	800477a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	3b41      	subs	r3, #65	@ 0x41
 8004744:	221f      	movs	r2, #31
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	400a      	ands	r2, r1
 8004752:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4618      	mov	r0, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	3b41      	subs	r3, #65	@ 0x41
 800476e:	fa00 f203 	lsl.w	r2, r0, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800477a:	4b22      	ldr	r3, [pc, #136]	@ (8004804 <HAL_ADC_ConfigChannel+0x234>)
 800477c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <HAL_ADC_ConfigChannel+0x238>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d109      	bne.n	800479c <HAL_ADC_ConfigChannel+0x1cc>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b12      	cmp	r3, #18
 800478e:	d105      	bne.n	800479c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a19      	ldr	r2, [pc, #100]	@ (8004808 <HAL_ADC_ConfigChannel+0x238>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d123      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x21e>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d003      	beq.n	80047b6 <HAL_ADC_ConfigChannel+0x1e6>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b11      	cmp	r3, #17
 80047b4:	d11b      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d111      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <HAL_ADC_ConfigChannel+0x23c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a10      	ldr	r2, [pc, #64]	@ (8004810 <HAL_ADC_ConfigChannel+0x240>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	0c9a      	lsrs	r2, r3, #18
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047e0:	e002      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f9      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012300 	.word	0x40012300
 8004808:	40012000 	.word	0x40012000
 800480c:	20000010 	.word	0x20000010
 8004810:	431bde83 	.word	0x431bde83

08004814 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800481c:	4b79      	ldr	r3, [pc, #484]	@ (8004a04 <ADC_Init+0x1f0>)
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	021a      	lsls	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800486c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800488e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	4a58      	ldr	r2, [pc, #352]	@ (8004a08 <ADC_Init+0x1f4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6899      	ldr	r1, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	e00f      	b.n	8004912 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004910:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0202 	bic.w	r2, r2, #2
 8004920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7e1b      	ldrb	r3, [r3, #24]
 800492c:	005a      	lsls	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01b      	beq.n	8004978 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800495e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	3b01      	subs	r3, #1
 800496c:	035a      	lsls	r2, r3, #13
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	e007      	b.n	8004988 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	051a      	lsls	r2, r3, #20
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6899      	ldr	r1, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049ca:	025a      	lsls	r2, r3, #9
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	029a      	lsls	r2, r3, #10
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40012300 	.word	0x40012300
 8004a08:	0f000001 	.word	0x0f000001

08004a0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e031      	b.n	8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 021f 	bic.w	r2, r3, #31
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40012300 	.word	0x40012300

08004a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aca:	4a04      	ldr	r2, [pc, #16]	@ (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	60d3      	str	r3, [r2, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae4:	4b04      	ldr	r3, [pc, #16]	@ (8004af8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 0307 	and.w	r3, r3, #7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db0b      	blt.n	8004b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <__NVIC_EnableIRQ+0x38>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	db12      	blt.n	8004b70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	490a      	ldr	r1, [pc, #40]	@ (8004b7c <__NVIC_DisableIRQ+0x44>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2001      	movs	r0, #1
 8004b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5e:	3320      	adds	r3, #32
 8004b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b64:	f3bf 8f4f 	dsb	sy
}
 8004b68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b6a:	f3bf 8f6f 	isb	sy
}
 8004b6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	.word	0xe000e100

08004b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	db0a      	blt.n	8004baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	490c      	ldr	r1, [pc, #48]	@ (8004bcc <__NVIC_SetPriority+0x4c>)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	0112      	lsls	r2, r2, #4
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ba8:	e00a      	b.n	8004bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4908      	ldr	r1, [pc, #32]	@ (8004bd0 <__NVIC_SetPriority+0x50>)
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	3b04      	subs	r3, #4
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	761a      	strb	r2, [r3, #24]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000e100 	.word	0xe000e100
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	@ 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f1c3 0307 	rsb	r3, r3, #7
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	bf28      	it	cs
 8004bf2:	2304      	movcs	r3, #4
 8004bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d902      	bls.n	8004c04 <NVIC_EncodePriority+0x30>
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3b03      	subs	r3, #3
 8004c02:	e000      	b.n	8004c06 <NVIC_EncodePriority+0x32>
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	401a      	ands	r2, r3
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	43d9      	mvns	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	4313      	orrs	r3, r2
         );
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3724      	adds	r7, #36	@ 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c40:	f3bf 8f4f 	dsb	sy
}
 8004c44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <__NVIC_SystemReset+0x24>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c4e:	4904      	ldr	r1, [pc, #16]	@ (8004c60 <__NVIC_SystemReset+0x24>)
 8004c50:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <__NVIC_SystemReset+0x28>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c56:	f3bf 8f4f 	dsb	sy
}
 8004c5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <__NVIC_SystemReset+0x20>
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	05fa0004 	.word	0x05fa0004

08004c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c78:	d301      	bcc.n	8004c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e00f      	b.n	8004c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca8 <SysTick_Config+0x40>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c86:	210f      	movs	r1, #15
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	f7ff ff78 	bl	8004b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <SysTick_Config+0x40>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c96:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <SysTick_Config+0x40>)
 8004c98:	2207      	movs	r2, #7
 8004c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000e010 	.word	0xe000e010

08004cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff feef 	bl	8004a98 <__NVIC_SetPriorityGrouping>
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	4603      	mov	r3, r0
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd4:	f7ff ff04 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8004cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	6978      	ldr	r0, [r7, #20]
 8004ce0:	f7ff ff78 	bl	8004bd4 <NVIC_EncodePriority>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff47 	bl	8004b80 <__NVIC_SetPriority>
}
 8004cf2:	bf00      	nop
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fef7 	bl	8004afc <__NVIC_EnableIRQ>
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff07 	bl	8004b38 <__NVIC_DisableIRQ>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d36:	f7ff ff81 	bl	8004c3c <__NVIC_SystemReset>

08004d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ff90 	bl	8004c68 <SysTick_Config>
 8004d48:	4603      	mov	r3, r0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d60:	f7ff f9cc 	bl	80040fc <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e099      	b.n	8004ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d90:	e00f      	b.n	8004db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d92:	f7ff f9b3 	bl	80040fc <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d908      	bls.n	8004db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2203      	movs	r2, #3
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e078      	b.n	8004ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e8      	bne.n	8004d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4b38      	ldr	r3, [pc, #224]	@ (8004eac <HAL_DMA_Init+0x158>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d107      	bne.n	8004e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e14:	4313      	orrs	r3, r2
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d117      	bne.n	8004e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb43 	bl	80054e4 <DMA_CheckFifoParam>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2240      	movs	r2, #64	@ 0x40
 8004e68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e72:	2301      	movs	r3, #1
 8004e74:	e016      	b.n	8004ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fafa 	bl	8005478 <DMA_CalcBaseAndBitshift>
 8004e84:	4603      	mov	r3, r0
 8004e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	223f      	movs	r2, #63	@ 0x3f
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	f010803f 	.word	0xf010803f

08004eb0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e050      	b.n	8004f64 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e048      	b.n	8004f64 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2221      	movs	r2, #33	@ 0x21
 8004f10:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fab0 	bl	8005478 <DMA_CalcBaseAndBitshift>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	223f      	movs	r2, #63	@ 0x3f
 8004f46:	409a      	lsls	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_DMA_Start+0x20>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e026      	b.n	8004fda <HAL_DMA_Start+0x6e>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d115      	bne.n	8004fcc <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fa31 	bl	800541c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e005      	b.n	8004fd8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ff0:	f7ff f884 	bl	80040fc <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d008      	beq.n	8005014 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2280      	movs	r2, #128	@ 0x80
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e052      	b.n	80050ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0216 	bic.w	r2, r2, #22
 8005022:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005032:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <HAL_DMA_Abort+0x62>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0208 	bic.w	r2, r2, #8
 8005052:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005064:	e013      	b.n	800508e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005066:	f7ff f849 	bl	80040fc <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b05      	cmp	r3, #5
 8005072:	d90c      	bls.n	800508e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2203      	movs	r2, #3
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e015      	b.n	80050ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e4      	bne.n	8005066 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a0:	223f      	movs	r2, #63	@ 0x3f
 80050a2:	409a      	lsls	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2280      	movs	r2, #128	@ 0x80
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e00c      	b.n	80050fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2205      	movs	r2, #5
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005114:	4b8e      	ldr	r3, [pc, #568]	@ (8005350 <HAL_DMA_IRQHandler+0x248>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a8e      	ldr	r2, [pc, #568]	@ (8005354 <HAL_DMA_IRQHandler+0x24c>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0a9b      	lsrs	r3, r3, #10
 8005120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005132:	2208      	movs	r2, #8
 8005134:	409a      	lsls	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0204 	bic.w	r2, r2, #4
 800515a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005160:	2208      	movs	r2, #8
 8005162:	409a      	lsls	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516c:	f043 0201 	orr.w	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005178:	2201      	movs	r2, #1
 800517a:	409a      	lsls	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d012      	beq.n	80051aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005196:	2201      	movs	r2, #1
 8005198:	409a      	lsls	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f043 0202 	orr.w	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ae:	2204      	movs	r2, #4
 80051b0:	409a      	lsls	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d012      	beq.n	80051e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	2204      	movs	r2, #4
 80051ce:	409a      	lsls	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d8:	f043 0204 	orr.w	r2, r3, #4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e4:	2210      	movs	r2, #16
 80051e6:	409a      	lsls	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d043      	beq.n	8005278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d03c      	beq.n	8005278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005202:	2210      	movs	r2, #16
 8005204:	409a      	lsls	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d018      	beq.n	800524a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d024      	beq.n	8005278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
 8005236:	e01f      	b.n	8005278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
 8005248:	e016      	b.n	8005278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0208 	bic.w	r2, r2, #8
 8005266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527c:	2220      	movs	r2, #32
 800527e:	409a      	lsls	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 808f 	beq.w	80053a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8087 	beq.w	80053a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529e:	2220      	movs	r2, #32
 80052a0:	409a      	lsls	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d136      	bne.n	8005320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0216 	bic.w	r2, r2, #22
 80052c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <HAL_DMA_IRQHandler+0x1da>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0208 	bic.w	r2, r2, #8
 80052f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f6:	223f      	movs	r2, #63	@ 0x3f
 80052f8:	409a      	lsls	r2, r3
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d07e      	beq.n	8005414 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
        }
        return;
 800531e:	e079      	b.n	8005414 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01d      	beq.n	800536a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	2b00      	cmp	r3, #0
 8005342:	d031      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
 800534c:	e02c      	b.n	80053a8 <HAL_DMA_IRQHandler+0x2a0>
 800534e:	bf00      	nop
 8005350:	20000010 	.word	0x20000010
 8005354:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d023      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
 8005368:	e01e      	b.n	80053a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10f      	bne.n	8005398 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0210 	bic.w	r2, r2, #16
 8005386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d032      	beq.n	8005416 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d022      	beq.n	8005402 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2205      	movs	r2, #5
 80053c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d307      	bcc.n	80053f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f2      	bne.n	80053d4 <HAL_DMA_IRQHandler+0x2cc>
 80053ee:	e000      	b.n	80053f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
 8005412:	e000      	b.n	8005416 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005414:	bf00      	nop
    }
  }
}
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005438:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b40      	cmp	r3, #64	@ 0x40
 8005448:	d108      	bne.n	800545c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800545a:	e007      	b.n	800546c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	3b10      	subs	r3, #16
 8005488:	4a14      	ldr	r2, [pc, #80]	@ (80054dc <DMA_CalcBaseAndBitshift+0x64>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005492:	4a13      	ldr	r2, [pc, #76]	@ (80054e0 <DMA_CalcBaseAndBitshift+0x68>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d909      	bls.n	80054ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80054b8:	e007      	b.n	80054ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	aaaaaaab 	.word	0xaaaaaaab
 80054e0:	08024fac 	.word	0x08024fac

080054e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11f      	bne.n	800553e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d856      	bhi.n	80055b2 <DMA_CheckFifoParam+0xce>
 8005504:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <DMA_CheckFifoParam+0x28>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	0800551d 	.word	0x0800551d
 8005510:	0800552f 	.word	0x0800552f
 8005514:	0800551d 	.word	0x0800551d
 8005518:	080055b3 	.word	0x080055b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d046      	beq.n	80055b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552c:	e043      	b.n	80055b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005536:	d140      	bne.n	80055ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553c:	e03d      	b.n	80055ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005546:	d121      	bne.n	800558c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b03      	cmp	r3, #3
 800554c:	d837      	bhi.n	80055be <DMA_CheckFifoParam+0xda>
 800554e:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <DMA_CheckFifoParam+0x70>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005565 	.word	0x08005565
 8005558:	0800556b 	.word	0x0800556b
 800555c:	08005565 	.word	0x08005565
 8005560:	0800557d 	.word	0x0800557d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      break;
 8005568:	e030      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d025      	beq.n	80055c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800557a:	e022      	b.n	80055c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005584:	d11f      	bne.n	80055c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800558a:	e01c      	b.n	80055c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d903      	bls.n	800559a <DMA_CheckFifoParam+0xb6>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d003      	beq.n	80055a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005598:	e018      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
      break;
 800559e:	e015      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00e      	beq.n	80055ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      break;
 80055b0:	e00b      	b.n	80055ca <DMA_CheckFifoParam+0xe6>
      break;
 80055b2:	bf00      	nop
 80055b4:	e00a      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      break;
 80055b6:	bf00      	nop
 80055b8:	e008      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      break;
 80055ba:	bf00      	nop
 80055bc:	e006      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      break;
 80055be:	bf00      	nop
 80055c0:	e004      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      break;
 80055c2:	bf00      	nop
 80055c4:	e002      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      break;   
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <DMA_CheckFifoParam+0xe8>
      break;
 80055ca:	bf00      	nop
    }
  } 
  
  return status; 
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055ee:	4b23      	ldr	r3, [pc, #140]	@ (800567c <HAL_FLASH_Program+0xa0>)
 80055f0:	7e1b      	ldrb	r3, [r3, #24]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_FLASH_Program+0x1e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e03b      	b.n	8005672 <HAL_FLASH_Program+0x96>
 80055fa:	4b20      	ldr	r3, [pc, #128]	@ (800567c <HAL_FLASH_Program+0xa0>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005600:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005604:	f000 f87c 	bl	8005700 <FLASH_WaitForLastOperation>
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d12b      	bne.n	800566a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005618:	783b      	ldrb	r3, [r7, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	68b8      	ldr	r0, [r7, #8]
 800561e:	f000 f927 	bl	8005870 <FLASH_Program_Byte>
 8005622:	e016      	b.n	8005652 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800562a:	883b      	ldrh	r3, [r7, #0]
 800562c:	4619      	mov	r1, r3
 800562e:	68b8      	ldr	r0, [r7, #8]
 8005630:	f000 f8fa 	bl	8005828 <FLASH_Program_HalfWord>
 8005634:	e00d      	b.n	8005652 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d105      	bne.n	8005648 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	68b8      	ldr	r0, [r7, #8]
 8005642:	f000 f8cf 	bl	80057e4 <FLASH_Program_Word>
 8005646:	e004      	b.n	8005652 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f000 f897 	bl	8005780 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005652:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005656:	f000 f853 	bl	8005700 <FLASH_WaitForLastOperation>
 800565a:	4603      	mov	r3, r0
 800565c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800565e:	4b08      	ldr	r3, [pc, #32]	@ (8005680 <HAL_FLASH_Program+0xa4>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	4a07      	ldr	r2, [pc, #28]	@ (8005680 <HAL_FLASH_Program+0xa4>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800566a:	4b04      	ldr	r3, [pc, #16]	@ (800567c <HAL_FLASH_Program+0xa0>)
 800566c:	2200      	movs	r2, #0
 800566e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20001b0c 	.word	0x20001b0c
 8005680:	40023c00 	.word	0x40023c00

08005684 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800568e:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <HAL_FLASH_Unlock+0x38>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da0b      	bge.n	80056ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005696:	4b09      	ldr	r3, [pc, #36]	@ (80056bc <HAL_FLASH_Unlock+0x38>)
 8005698:	4a09      	ldr	r2, [pc, #36]	@ (80056c0 <HAL_FLASH_Unlock+0x3c>)
 800569a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800569c:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <HAL_FLASH_Unlock+0x38>)
 800569e:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <HAL_FLASH_Unlock+0x40>)
 80056a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056a2:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <HAL_FLASH_Unlock+0x38>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	da01      	bge.n	80056ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056ae:	79fb      	ldrb	r3, [r7, #7]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40023c00 	.word	0x40023c00
 80056c0:	45670123 	.word	0x45670123
 80056c4:	cdef89ab 	.word	0xcdef89ab

080056c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056cc:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_FLASH_Lock+0x1c>)
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <HAL_FLASH_Lock+0x1c>)
 80056d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40023c00 	.word	0x40023c00

080056e8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80056ec:	4b03      	ldr	r3, [pc, #12]	@ (80056fc <HAL_FLASH_GetError+0x14>)
 80056ee:	69db      	ldr	r3, [r3, #28]
}  
 80056f0:	4618      	mov	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20001b0c 	.word	0x20001b0c

08005700 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800570c:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <FLASH_WaitForLastOperation+0x78>)
 800570e:	2200      	movs	r2, #0
 8005710:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005712:	f7fe fcf3 	bl	80040fc <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005718:	e010      	b.n	800573c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d00c      	beq.n	800573c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <FLASH_WaitForLastOperation+0x38>
 8005728:	f7fe fce8 	bl	80040fc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d201      	bcs.n	800573c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e019      	b.n	8005770 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800573c:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <FLASH_WaitForLastOperation+0x7c>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e8      	bne.n	800571a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <FLASH_WaitForLastOperation+0x7c>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005754:	4b09      	ldr	r3, [pc, #36]	@ (800577c <FLASH_WaitForLastOperation+0x7c>)
 8005756:	2201      	movs	r2, #1
 8005758:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800575a:	4b08      	ldr	r3, [pc, #32]	@ (800577c <FLASH_WaitForLastOperation+0x7c>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005766:	f000 f8a5 	bl	80058b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
  
}  
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20001b0c 	.word	0x20001b0c
 800577c:	40023c00 	.word	0x40023c00

08005780 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800578c:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <FLASH_Program_DoubleWord+0x60>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	4a13      	ldr	r2, [pc, #76]	@ (80057e0 <FLASH_Program_DoubleWord+0x60>)
 8005792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005796:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <FLASH_Program_DoubleWord+0x60>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4a10      	ldr	r2, [pc, #64]	@ (80057e0 <FLASH_Program_DoubleWord+0x60>)
 800579e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80057a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057a4:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <FLASH_Program_DoubleWord+0x60>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	4a0d      	ldr	r2, [pc, #52]	@ (80057e0 <FLASH_Program_DoubleWord+0x60>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80057b6:	f3bf 8f6f 	isb	sy
}
 80057ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	000a      	movs	r2, r1
 80057ca:	2300      	movs	r3, #0
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	3104      	adds	r1, #4
 80057d0:	4613      	mov	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40023c00 	.word	0x40023c00

080057e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <FLASH_Program_Word+0x40>)
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005824 <FLASH_Program_Word+0x40>)
 80057f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80057fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <FLASH_Program_Word+0x40>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4a09      	ldr	r2, [pc, #36]	@ (8005824 <FLASH_Program_Word+0x40>)
 8005800:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005806:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <FLASH_Program_Word+0x40>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4a06      	ldr	r2, [pc, #24]	@ (8005824 <FLASH_Program_Word+0x40>)
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	601a      	str	r2, [r3, #0]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40023c00 	.word	0x40023c00

08005828 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005834:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <FLASH_Program_HalfWord+0x44>)
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	4a0c      	ldr	r2, [pc, #48]	@ (800586c <FLASH_Program_HalfWord+0x44>)
 800583a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005840:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <FLASH_Program_HalfWord+0x44>)
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4a09      	ldr	r2, [pc, #36]	@ (800586c <FLASH_Program_HalfWord+0x44>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <FLASH_Program_HalfWord+0x44>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	4a06      	ldr	r2, [pc, #24]	@ (800586c <FLASH_Program_HalfWord+0x44>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	801a      	strh	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40023c00 	.word	0x40023c00

08005870 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <FLASH_Program_Byte+0x40>)
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	4a0b      	ldr	r2, [pc, #44]	@ (80058b0 <FLASH_Program_Byte+0x40>)
 8005882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <FLASH_Program_Byte+0x40>)
 800588a:	4a09      	ldr	r2, [pc, #36]	@ (80058b0 <FLASH_Program_Byte+0x40>)
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <FLASH_Program_Byte+0x40>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	4a06      	ldr	r2, [pc, #24]	@ (80058b0 <FLASH_Program_Byte+0x40>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	78fa      	ldrb	r2, [r7, #3]
 80058a0:	701a      	strb	r2, [r3, #0]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40023c00 	.word	0x40023c00

080058b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058c4:	4b2d      	ldr	r3, [pc, #180]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f043 0310 	orr.w	r3, r3, #16
 80058cc:	4a2b      	ldr	r2, [pc, #172]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 80058ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058d0:	4b29      	ldr	r3, [pc, #164]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 80058d2:	2210      	movs	r2, #16
 80058d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058d6:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058e2:	4b26      	ldr	r3, [pc, #152]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f043 0308 	orr.w	r3, r3, #8
 80058ea:	4a24      	ldr	r2, [pc, #144]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 80058ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80058ee:	4b22      	ldr	r3, [pc, #136]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 80058f0:	2220      	movs	r2, #32
 80058f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80058f4:	4b20      	ldr	r3, [pc, #128]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005900:	4b1e      	ldr	r3, [pc, #120]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f043 0304 	orr.w	r3, r3, #4
 8005908:	4a1c      	ldr	r2, [pc, #112]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 800590a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800590c:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 800590e:	2240      	movs	r2, #64	@ 0x40
 8005910:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005912:	4b19      	ldr	r3, [pc, #100]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800591e:	4b17      	ldr	r3, [pc, #92]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	4a15      	ldr	r2, [pc, #84]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 8005928:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800592a:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 800592c:	2280      	movs	r2, #128	@ 0x80
 800592e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005930:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800593c:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	4a0d      	ldr	r2, [pc, #52]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 8005946:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 800594a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800594e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005950:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800595c:	4b07      	ldr	r3, [pc, #28]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f043 0320 	orr.w	r3, r3, #32
 8005964:	4a05      	ldr	r2, [pc, #20]	@ (800597c <FLASH_SetErrorCode+0xc8>)
 8005966:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005968:	4b03      	ldr	r3, [pc, #12]	@ (8005978 <FLASH_SetErrorCode+0xc4>)
 800596a:	2202      	movs	r2, #2
 800596c:	60da      	str	r2, [r3, #12]
  }
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40023c00 	.word	0x40023c00
 800597c:	20001b0c 	.word	0x20001b0c

08005980 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005992:	4b31      	ldr	r3, [pc, #196]	@ (8005a58 <HAL_FLASHEx_Erase+0xd8>)
 8005994:	7e1b      	ldrb	r3, [r3, #24]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_FLASHEx_Erase+0x1e>
 800599a:	2302      	movs	r3, #2
 800599c:	e058      	b.n	8005a50 <HAL_FLASHEx_Erase+0xd0>
 800599e:	4b2e      	ldr	r3, [pc, #184]	@ (8005a58 <HAL_FLASHEx_Erase+0xd8>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059a8:	f7ff feaa 	bl	8005700 <FLASH_WaitForLastOperation>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d148      	bne.n	8005a48 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d115      	bne.n	80059f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 f844 	bl	8005a60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059dc:	f7ff fe90 	bl	8005700 <FLASH_WaitForLastOperation>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80059e4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a5c <HAL_FLASHEx_Erase+0xdc>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a5c <HAL_FLASHEx_Erase+0xdc>)
 80059ea:	f023 0304 	bic.w	r3, r3, #4
 80059ee:	6113      	str	r3, [r2, #16]
 80059f0:	e028      	b.n	8005a44 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60bb      	str	r3, [r7, #8]
 80059f8:	e01c      	b.n	8005a34 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	68b8      	ldr	r0, [r7, #8]
 8005a04:	f000 f850 	bl	8005aa8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a08:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a0c:	f7ff fe78 	bl	8005700 <FLASH_WaitForLastOperation>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a14:	4b11      	ldr	r3, [pc, #68]	@ (8005a5c <HAL_FLASHEx_Erase+0xdc>)
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	4a10      	ldr	r2, [pc, #64]	@ (8005a5c <HAL_FLASHEx_Erase+0xdc>)
 8005a1a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005a1e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	601a      	str	r2, [r3, #0]
          break;
 8005a2c:	e00a      	b.n	8005a44 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d3da      	bcc.n	80059fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a44:	f000 f878 	bl	8005b38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a48:	4b03      	ldr	r3, [pc, #12]	@ (8005a58 <HAL_FLASHEx_Erase+0xd8>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	761a      	strb	r2, [r3, #24]

  return status;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20001b0c 	.word	0x20001b0c
 8005a5c:	40023c00 	.word	0x40023c00

08005a60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <FLASH_MassErase+0x44>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	4a0c      	ldr	r2, [pc, #48]	@ (8005aa4 <FLASH_MassErase+0x44>)
 8005a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <FLASH_MassErase+0x44>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	4a09      	ldr	r2, [pc, #36]	@ (8005aa4 <FLASH_MassErase+0x44>)
 8005a7e:	f043 0304 	orr.w	r3, r3, #4
 8005a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005a84:	4b07      	ldr	r3, [pc, #28]	@ (8005aa4 <FLASH_MassErase+0x44>)
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	4a05      	ldr	r2, [pc, #20]	@ (8005aa4 <FLASH_MassErase+0x44>)
 8005a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a94:	6113      	str	r3, [r2, #16]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40023c00 	.word	0x40023c00

08005aa8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e010      	b.n	8005ae6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d103      	bne.n	8005ad2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005aca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e009      	b.n	8005ae6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d103      	bne.n	8005ae0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e002      	b.n	8005ae6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ae0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005ae4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ae6:	4b13      	ldr	r3, [pc, #76]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4a12      	ldr	r2, [pc, #72]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	490f      	ldr	r1, [pc, #60]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005b04:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4313      	orrs	r3, r2
 8005b14:	4a07      	ldr	r2, [pc, #28]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	4a04      	ldr	r2, [pc, #16]	@ (8005b34 <FLASH_Erase_Sector+0x8c>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b26:	6113      	str	r3, [r2, #16]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40023c00 	.word	0x40023c00

08005b38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005b3c:	4b20      	ldr	r3, [pc, #128]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d017      	beq.n	8005b78 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b48:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b4e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b52:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b54:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	4b17      	ldr	r3, [pc, #92]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b6a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b6c:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a13      	ldr	r2, [pc, #76]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b76:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b78:	4b11      	ldr	r3, [pc, #68]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d017      	beq.n	8005bb4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b84:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b8e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a07      	ldr	r2, [pc, #28]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a04      	ldr	r2, [pc, #16]	@ (8005bc0 <FLASH_FlushCaches+0x88>)
 8005bae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bb2:	6013      	str	r3, [r2, #0]
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40023c00 	.word	0x40023c00

08005bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	@ 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e159      	b.n	8005e94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005be0:	2201      	movs	r2, #1
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	f040 8148 	bne.w	8005e8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d005      	beq.n	8005c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d130      	bne.n	8005c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	2203      	movs	r2, #3
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 0201 	and.w	r2, r3, #1
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d017      	beq.n	8005cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	2203      	movs	r2, #3
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d123      	bne.n	8005d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	08da      	lsrs	r2, r3, #3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3208      	adds	r2, #8
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	220f      	movs	r2, #15
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	08da      	lsrs	r2, r3, #3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3208      	adds	r2, #8
 8005d02:	69b9      	ldr	r1, [r7, #24]
 8005d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	2203      	movs	r2, #3
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0203 	and.w	r2, r3, #3
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80a2 	beq.w	8005e8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	4b57      	ldr	r3, [pc, #348]	@ (8005eac <HAL_GPIO_Init+0x2e8>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	4a56      	ldr	r2, [pc, #344]	@ (8005eac <HAL_GPIO_Init+0x2e8>)
 8005d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d5a:	4b54      	ldr	r3, [pc, #336]	@ (8005eac <HAL_GPIO_Init+0x2e8>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d66:	4a52      	ldr	r2, [pc, #328]	@ (8005eb0 <HAL_GPIO_Init+0x2ec>)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	220f      	movs	r2, #15
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a49      	ldr	r2, [pc, #292]	@ (8005eb4 <HAL_GPIO_Init+0x2f0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d019      	beq.n	8005dc6 <HAL_GPIO_Init+0x202>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a48      	ldr	r2, [pc, #288]	@ (8005eb8 <HAL_GPIO_Init+0x2f4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_GPIO_Init+0x1fe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a47      	ldr	r2, [pc, #284]	@ (8005ebc <HAL_GPIO_Init+0x2f8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00d      	beq.n	8005dbe <HAL_GPIO_Init+0x1fa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a46      	ldr	r2, [pc, #280]	@ (8005ec0 <HAL_GPIO_Init+0x2fc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <HAL_GPIO_Init+0x1f6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a45      	ldr	r2, [pc, #276]	@ (8005ec4 <HAL_GPIO_Init+0x300>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_GPIO_Init+0x1f2>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e008      	b.n	8005dc8 <HAL_GPIO_Init+0x204>
 8005db6:	2307      	movs	r3, #7
 8005db8:	e006      	b.n	8005dc8 <HAL_GPIO_Init+0x204>
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e004      	b.n	8005dc8 <HAL_GPIO_Init+0x204>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e002      	b.n	8005dc8 <HAL_GPIO_Init+0x204>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_GPIO_Init+0x204>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	f002 0203 	and.w	r2, r2, #3
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	4093      	lsls	r3, r2
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd8:	4935      	ldr	r1, [pc, #212]	@ (8005eb0 <HAL_GPIO_Init+0x2ec>)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	089b      	lsrs	r3, r3, #2
 8005dde:	3302      	adds	r3, #2
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005de6:	4b38      	ldr	r3, [pc, #224]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4013      	ands	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e10:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e34:	4a24      	ldr	r2, [pc, #144]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e3a:	4b23      	ldr	r3, [pc, #140]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	43db      	mvns	r3, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e64:	4b18      	ldr	r3, [pc, #96]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e88:	4a0f      	ldr	r2, [pc, #60]	@ (8005ec8 <HAL_GPIO_Init+0x304>)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3301      	adds	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	f67f aea2 	bls.w	8005be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	3724      	adds	r7, #36	@ 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40013800 	.word	0x40013800
 8005eb4:	40020000 	.word	0x40020000
 8005eb8:	40020400 	.word	0x40020400
 8005ebc:	40020800 	.word	0x40020800
 8005ec0:	40020c00 	.word	0x40020c00
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40013c00 	.word	0x40013c00

08005ecc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e0bb      	b.n	8006060 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ee8:	2201      	movs	r2, #1
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	f040 80ab 	bne.w	800605a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f04:	4a5c      	ldr	r2, [pc, #368]	@ (8006078 <HAL_GPIO_DeInit+0x1ac>)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	089b      	lsrs	r3, r3, #2
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	220f      	movs	r2, #15
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a54      	ldr	r2, [pc, #336]	@ (800607c <HAL_GPIO_DeInit+0x1b0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d019      	beq.n	8005f62 <HAL_GPIO_DeInit+0x96>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a53      	ldr	r2, [pc, #332]	@ (8006080 <HAL_GPIO_DeInit+0x1b4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_GPIO_DeInit+0x92>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a52      	ldr	r2, [pc, #328]	@ (8006084 <HAL_GPIO_DeInit+0x1b8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00d      	beq.n	8005f5a <HAL_GPIO_DeInit+0x8e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a51      	ldr	r2, [pc, #324]	@ (8006088 <HAL_GPIO_DeInit+0x1bc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <HAL_GPIO_DeInit+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a50      	ldr	r2, [pc, #320]	@ (800608c <HAL_GPIO_DeInit+0x1c0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_GPIO_DeInit+0x86>
 8005f4e:	2304      	movs	r3, #4
 8005f50:	e008      	b.n	8005f64 <HAL_GPIO_DeInit+0x98>
 8005f52:	2307      	movs	r3, #7
 8005f54:	e006      	b.n	8005f64 <HAL_GPIO_DeInit+0x98>
 8005f56:	2303      	movs	r3, #3
 8005f58:	e004      	b.n	8005f64 <HAL_GPIO_DeInit+0x98>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e002      	b.n	8005f64 <HAL_GPIO_DeInit+0x98>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_GPIO_DeInit+0x98>
 8005f62:	2300      	movs	r3, #0
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	f002 0203 	and.w	r2, r2, #3
 8005f6a:	0092      	lsls	r2, r2, #2
 8005f6c:	4093      	lsls	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d132      	bne.n	8005fda <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f74:	4b46      	ldr	r3, [pc, #280]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	4944      	ldr	r1, [pc, #272]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f82:	4b43      	ldr	r3, [pc, #268]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	4941      	ldr	r1, [pc, #260]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005f90:	4b3f      	ldr	r3, [pc, #252]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	493d      	ldr	r1, [pc, #244]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	493a      	ldr	r1, [pc, #232]	@ (8006090 <HAL_GPIO_DeInit+0x1c4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	220f      	movs	r2, #15
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8006078 <HAL_GPIO_DeInit+0x1ac>)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	43da      	mvns	r2, r3
 8005fcc:	482a      	ldr	r0, [pc, #168]	@ (8006078 <HAL_GPIO_DeInit+0x1ac>)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	400a      	ands	r2, r1
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	2103      	movs	r1, #3
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	401a      	ands	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	08da      	lsrs	r2, r3, #3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3208      	adds	r2, #8
 8005ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	220f      	movs	r2, #15
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	43db      	mvns	r3, r3
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	08d2      	lsrs	r2, r2, #3
 8006010:	4019      	ands	r1, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3208      	adds	r2, #8
 8006016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	2103      	movs	r1, #3
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	401a      	ands	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	2101      	movs	r1, #1
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	2103      	movs	r1, #3
 800604e:	fa01 f303 	lsl.w	r3, r1, r3
 8006052:	43db      	mvns	r3, r3
 8006054:	401a      	ands	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3301      	adds	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b0f      	cmp	r3, #15
 8006064:	f67f af40 	bls.w	8005ee8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40013800 	.word	0x40013800
 800607c:	40020000 	.word	0x40020000
 8006080:	40020400 	.word	0x40020400
 8006084:	40020800 	.word	0x40020800
 8006088:	40020c00 	.word	0x40020c00
 800608c:	40021000 	.word	0x40021000
 8006090:	40013c00 	.word	0x40013c00

08006094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
 80060b0:	e001      	b.n	80060b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
 80060d0:	4613      	mov	r3, r2
 80060d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060d4:	787b      	ldrb	r3, [r7, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060e0:	e003      	b.n	80060ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060e2:	887b      	ldrh	r3, [r7, #2]
 80060e4:	041a      	lsls	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	619a      	str	r2, [r3, #24]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006102:	4b08      	ldr	r3, [pc, #32]	@ (8006124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006104:	695a      	ldr	r2, [r3, #20]
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800610e:	4a05      	ldr	r2, [pc, #20]	@ (8006124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd fa3e 	bl	8003598 <HAL_GPIO_EXTI_Callback>
  }
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40013c00 	.word	0x40013c00

08006128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e12b      	b.n	8006392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fd fb1c 	bl	800378c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	@ 0x24
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800617a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800618a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800618c:	f003 f8f2 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 8006190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4a81      	ldr	r2, [pc, #516]	@ (800639c <HAL_I2C_Init+0x274>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d807      	bhi.n	80061ac <HAL_I2C_Init+0x84>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a80      	ldr	r2, [pc, #512]	@ (80063a0 <HAL_I2C_Init+0x278>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bf94      	ite	ls
 80061a4:	2301      	movls	r3, #1
 80061a6:	2300      	movhi	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e006      	b.n	80061ba <HAL_I2C_Init+0x92>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a7d      	ldr	r2, [pc, #500]	@ (80063a4 <HAL_I2C_Init+0x27c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	bf94      	ite	ls
 80061b4:	2301      	movls	r3, #1
 80061b6:	2300      	movhi	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0e7      	b.n	8006392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a78      	ldr	r2, [pc, #480]	@ (80063a8 <HAL_I2C_Init+0x280>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	0c9b      	lsrs	r3, r3, #18
 80061cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4a6a      	ldr	r2, [pc, #424]	@ (800639c <HAL_I2C_Init+0x274>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d802      	bhi.n	80061fc <HAL_I2C_Init+0xd4>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3301      	adds	r3, #1
 80061fa:	e009      	b.n	8006210 <HAL_I2C_Init+0xe8>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	4a69      	ldr	r2, [pc, #420]	@ (80063ac <HAL_I2C_Init+0x284>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	099b      	lsrs	r3, r3, #6
 800620e:	3301      	adds	r3, #1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	430b      	orrs	r3, r1
 8006216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	495c      	ldr	r1, [pc, #368]	@ (800639c <HAL_I2C_Init+0x274>)
 800622c:	428b      	cmp	r3, r1
 800622e:	d819      	bhi.n	8006264 <HAL_I2C_Init+0x13c>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1e59      	subs	r1, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	fbb1 f3f3 	udiv	r3, r1, r3
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006244:	400b      	ands	r3, r1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_I2C_Init+0x138>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1e59      	subs	r1, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	fbb1 f3f3 	udiv	r3, r1, r3
 8006258:	3301      	adds	r3, #1
 800625a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625e:	e051      	b.n	8006304 <HAL_I2C_Init+0x1dc>
 8006260:	2304      	movs	r3, #4
 8006262:	e04f      	b.n	8006304 <HAL_I2C_Init+0x1dc>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d111      	bne.n	8006290 <HAL_I2C_Init+0x168>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	1e58      	subs	r0, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6859      	ldr	r1, [r3, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	440b      	add	r3, r1
 800627a:	fbb0 f3f3 	udiv	r3, r0, r3
 800627e:	3301      	adds	r3, #1
 8006280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006284:	2b00      	cmp	r3, #0
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	e012      	b.n	80062b6 <HAL_I2C_Init+0x18e>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1e58      	subs	r0, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6859      	ldr	r1, [r3, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	0099      	lsls	r1, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a6:	3301      	adds	r3, #1
 80062a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_I2C_Init+0x196>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e022      	b.n	8006304 <HAL_I2C_Init+0x1dc>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10e      	bne.n	80062e4 <HAL_I2C_Init+0x1bc>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1e58      	subs	r0, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6859      	ldr	r1, [r3, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	440b      	add	r3, r1
 80062d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d8:	3301      	adds	r3, #1
 80062da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062e2:	e00f      	b.n	8006304 <HAL_I2C_Init+0x1dc>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1e58      	subs	r0, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	0099      	lsls	r1, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fa:	3301      	adds	r3, #1
 80062fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	6809      	ldr	r1, [r1, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69da      	ldr	r2, [r3, #28]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6911      	ldr	r1, [r2, #16]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	4311      	orrs	r1, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	430b      	orrs	r3, r1
 8006346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	000186a0 	.word	0x000186a0
 80063a0:	001e847f 	.word	0x001e847f
 80063a4:	003d08ff 	.word	0x003d08ff
 80063a8:	431bde83 	.word	0x431bde83
 80063ac:	10624dd3 	.word	0x10624dd3

080063b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e021      	b.n	8006406 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2224      	movs	r2, #36	@ 0x24
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fd fa1e 	bl	800381c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	461a      	mov	r2, r3
 800641c:	460b      	mov	r3, r1
 800641e:	817b      	strh	r3, [r7, #10]
 8006420:	4613      	mov	r3, r2
 8006422:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006424:	f7fd fe6a 	bl	80040fc <HAL_GetTick>
 8006428:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b20      	cmp	r3, #32
 8006434:	f040 80e0 	bne.w	80065f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2319      	movs	r3, #25
 800643e:	2201      	movs	r2, #1
 8006440:	4970      	ldr	r1, [pc, #448]	@ (8006604 <HAL_I2C_Master_Transmit+0x1f4>)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fd92 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800644e:	2302      	movs	r3, #2
 8006450:	e0d3      	b.n	80065fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_I2C_Master_Transmit+0x50>
 800645c:	2302      	movs	r3, #2
 800645e:	e0cc      	b.n	80065fa <HAL_I2C_Master_Transmit+0x1ea>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	d007      	beq.n	8006486 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2221      	movs	r2, #33	@ 0x21
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2210      	movs	r2, #16
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	893a      	ldrh	r2, [r7, #8]
 80064b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a50      	ldr	r2, [pc, #320]	@ (8006608 <HAL_I2C_Master_Transmit+0x1f8>)
 80064c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064c8:	8979      	ldrh	r1, [r7, #10]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fbfc 	bl	8006ccc <I2C_MasterRequestWrite>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e08d      	b.n	80065fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064f4:	e066      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	6a39      	ldr	r1, [r7, #32]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fe50 	bl	80071a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	2b04      	cmp	r3, #4
 800650c:	d107      	bne.n	800651e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800651c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e06b      	b.n	80065fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b04      	cmp	r3, #4
 800655e:	d11b      	bne.n	8006598 <HAL_I2C_Master_Transmit+0x188>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d017      	beq.n	8006598 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	6a39      	ldr	r1, [r7, #32]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fe47 	bl	8007230 <I2C_WaitOnBTFFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00d      	beq.n	80065c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d107      	bne.n	80065c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e01a      	b.n	80065fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d194      	bne.n	80064f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	00100002 	.word	0x00100002
 8006608:	ffff0000 	.word	0xffff0000

0800660c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	@ 0x30
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	461a      	mov	r2, r3
 8006618:	460b      	mov	r3, r1
 800661a:	817b      	strh	r3, [r7, #10]
 800661c:	4613      	mov	r3, r2
 800661e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006620:	f7fd fd6c 	bl	80040fc <HAL_GetTick>
 8006624:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	f040 8217 	bne.w	8006a62 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2319      	movs	r3, #25
 800663a:	2201      	movs	r2, #1
 800663c:	497c      	ldr	r1, [pc, #496]	@ (8006830 <HAL_I2C_Master_Receive+0x224>)
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fc94 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800664a:	2302      	movs	r3, #2
 800664c:	e20a      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_I2C_Master_Receive+0x50>
 8006658:	2302      	movs	r3, #2
 800665a:	e203      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d007      	beq.n	8006682 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2222      	movs	r2, #34	@ 0x22
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2210      	movs	r2, #16
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	893a      	ldrh	r2, [r7, #8]
 80066b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a5c      	ldr	r2, [pc, #368]	@ (8006834 <HAL_I2C_Master_Receive+0x228>)
 80066c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066c4:	8979      	ldrh	r1, [r7, #10]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fb80 	bl	8006dd0 <I2C_MasterRequestRead>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e1c4      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d113      	bne.n	800670a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e2:	2300      	movs	r3, #0
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e198      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670e:	2b01      	cmp	r3, #1
 8006710:	d11b      	bne.n	800674a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e178      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674e:	2b02      	cmp	r3, #2
 8006750:	d11b      	bne.n	800678a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	e158      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067b0:	e144      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	f200 80f1 	bhi.w	800699e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d123      	bne.n	800680c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fd79 	bl	80072c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e145      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800680a:	e117      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006810:	2b02      	cmp	r3, #2
 8006812:	d14e      	bne.n	80068b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	2200      	movs	r2, #0
 800681c:	4906      	ldr	r1, [pc, #24]	@ (8006838 <HAL_I2C_Master_Receive+0x22c>)
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fba4 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d008      	beq.n	800683c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e11a      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
 800682e:	bf00      	nop
 8006830:	00100002 	.word	0x00100002
 8006834:	ffff0000 	.word	0xffff0000
 8006838:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800684a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068b0:	e0c4      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	2200      	movs	r2, #0
 80068ba:	496c      	ldr	r1, [pc, #432]	@ (8006a6c <HAL_I2C_Master_Receive+0x460>)
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fb55 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0cb      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	2200      	movs	r2, #0
 8006916:	4955      	ldr	r1, [pc, #340]	@ (8006a6c <HAL_I2C_Master_Receive+0x460>)
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 fb27 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e09d      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800699c:	e04e      	b.n	8006a3c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800699e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fc8c 	bl	80072c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e058      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d124      	bne.n	8006a3c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d107      	bne.n	8006a0a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a08:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f47f aeb6 	bne.w	80067b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e000      	b.n	8006a64 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
  }
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	@ 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	00010004 	.word	0x00010004

08006a70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	@ 0x28
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006a80:	f7fd fb3c 	bl	80040fc <HAL_GetTick>
 8006a84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	f040 8111 	bne.w	8006cba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2319      	movs	r3, #25
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4988      	ldr	r1, [pc, #544]	@ (8006cc4 <HAL_I2C_IsDeviceReady+0x254>)
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fa62 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e104      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_I2C_IsDeviceReady+0x50>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e0fd      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d007      	beq.n	8006ae6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0201 	orr.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2224      	movs	r2, #36	@ 0x24
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a70      	ldr	r2, [pc, #448]	@ (8006cc8 <HAL_I2C_IsDeviceReady+0x258>)
 8006b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fa20 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b40:	d103      	bne.n	8006b4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b48:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e0b6      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b4e:	897b      	ldrh	r3, [r7, #10]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7fd facd 	bl	80040fc <HAL_GetTick>
 8006b62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b92:	e025      	b.n	8006be0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b94:	f7fd fab2 	bl	80040fc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d302      	bcc.n	8006baa <HAL_I2C_IsDeviceReady+0x13a>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	22a0      	movs	r2, #160	@ 0xa0
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2301      	moveq	r3, #1
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2ba0      	cmp	r3, #160	@ 0xa0
 8006bea:	d005      	beq.n	8006bf8 <HAL_I2C_IsDeviceReady+0x188>
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <HAL_I2C_IsDeviceReady+0x188>
 8006bf2:	7dbb      	ldrb	r3, [r7, #22]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0cd      	beq.n	8006b94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d129      	bne.n	8006c62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2319      	movs	r3, #25
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4921      	ldr	r1, [pc, #132]	@ (8006cc4 <HAL_I2C_IsDeviceReady+0x254>)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f994 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e036      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e02c      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	2319      	movs	r3, #25
 8006c82:	2201      	movs	r2, #1
 8006c84:	490f      	ldr	r1, [pc, #60]	@ (8006cc4 <HAL_I2C_IsDeviceReady+0x254>)
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f970 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e012      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	f4ff af32 	bcc.w	8006b0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
  }
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00100002 	.word	0x00100002
 8006cc8:	ffff0000 	.word	0xffff0000

08006ccc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af02      	add	r7, sp, #8
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d006      	beq.n	8006cf6 <I2C_MasterRequestWrite+0x2a>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d003      	beq.n	8006cf6 <I2C_MasterRequestWrite+0x2a>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cf4:	d108      	bne.n	8006d08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e00b      	b.n	8006d20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0c:	2b12      	cmp	r3, #18
 8006d0e:	d107      	bne.n	8006d20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f91d 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d46:	d103      	bne.n	8006d50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e035      	b.n	8006dc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d5c:	d108      	bne.n	8006d70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d5e:	897b      	ldrh	r3, [r7, #10]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d6c:	611a      	str	r2, [r3, #16]
 8006d6e:	e01b      	b.n	8006da8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d70:	897b      	ldrh	r3, [r7, #10]
 8006d72:	11db      	asrs	r3, r3, #7
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	f003 0306 	and.w	r3, r3, #6
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f063 030f 	orn	r3, r3, #15
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	490e      	ldr	r1, [pc, #56]	@ (8006dc8 <I2C_MasterRequestWrite+0xfc>)
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f966 	bl	8007060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e010      	b.n	8006dc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	4907      	ldr	r1, [pc, #28]	@ (8006dcc <I2C_MasterRequestWrite+0x100>)
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f956 	bl	8007060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	00010008 	.word	0x00010008
 8006dcc:	00010002 	.word	0x00010002

08006dd0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006df4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d006      	beq.n	8006e0a <I2C_MasterRequestRead+0x3a>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d003      	beq.n	8006e0a <I2C_MasterRequestRead+0x3a>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e08:	d108      	bne.n	8006e1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e00b      	b.n	8006e34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	2b11      	cmp	r3, #17
 8006e22:	d107      	bne.n	8006e34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f893 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00d      	beq.n	8006e68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5a:	d103      	bne.n	8006e64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e079      	b.n	8006f5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e70:	d108      	bne.n	8006e84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	611a      	str	r2, [r3, #16]
 8006e82:	e05f      	b.n	8006f44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e84:	897b      	ldrh	r3, [r7, #10]
 8006e86:	11db      	asrs	r3, r3, #7
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f003 0306 	and.w	r3, r3, #6
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f063 030f 	orn	r3, r3, #15
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4930      	ldr	r1, [pc, #192]	@ (8006f64 <I2C_MasterRequestRead+0x194>)
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f8dc 	bl	8007060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e054      	b.n	8006f5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	4929      	ldr	r1, [pc, #164]	@ (8006f68 <I2C_MasterRequestRead+0x198>)
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f8cc 	bl	8007060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e044      	b.n	8006f5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f831 	bl	8006f6c <I2C_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1e:	d103      	bne.n	8006f28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f26:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e017      	b.n	8006f5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f2c:	897b      	ldrh	r3, [r7, #10]
 8006f2e:	11db      	asrs	r3, r3, #7
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f003 0306 	and.w	r3, r3, #6
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f063 030e 	orn	r3, r3, #14
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4907      	ldr	r1, [pc, #28]	@ (8006f68 <I2C_MasterRequestRead+0x198>)
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f888 	bl	8007060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	00010008 	.word	0x00010008
 8006f68:	00010002 	.word	0x00010002

08006f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f7c:	e048      	b.n	8007010 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d044      	beq.n	8007010 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f86:	f7fd f8b9 	bl	80040fc <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d302      	bcc.n	8006f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d139      	bne.n	8007010 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	0c1b      	lsrs	r3, r3, #16
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d10d      	bne.n	8006fc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	43da      	mvns	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	e00c      	b.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	43da      	mvns	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bf0c      	ite	eq
 8006fd4:	2301      	moveq	r3, #1
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d116      	bne.n	8007010 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffc:	f043 0220 	orr.w	r2, r3, #32
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e023      	b.n	8007058 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10d      	bne.n	8007036 <I2C_WaitOnFlagUntilTimeout+0xca>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	43da      	mvns	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4013      	ands	r3, r2
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	e00c      	b.n	8007050 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	43da      	mvns	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	429a      	cmp	r2, r3
 8007054:	d093      	beq.n	8006f7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800706e:	e071      	b.n	8007154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707e:	d123      	bne.n	80070c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800708e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007098:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b4:	f043 0204 	orr.w	r2, r3, #4
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e067      	b.n	8007198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d041      	beq.n	8007154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d0:	f7fd f814 	bl	80040fc <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d302      	bcc.n	80070e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d136      	bne.n	8007154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	0c1b      	lsrs	r3, r3, #16
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d10c      	bne.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	43da      	mvns	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4013      	ands	r3, r2
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bf14      	ite	ne
 8007102:	2301      	movne	r3, #1
 8007104:	2300      	moveq	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	e00b      	b.n	8007122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	43da      	mvns	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	bf14      	ite	ne
 800711c:	2301      	movne	r3, #1
 800711e:	2300      	moveq	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007140:	f043 0220 	orr.w	r2, r3, #32
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e021      	b.n	8007198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	d10c      	bne.n	8007178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	43da      	mvns	r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4013      	ands	r3, r2
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	e00b      	b.n	8007190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	43da      	mvns	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	bf14      	ite	ne
 800718a:	2301      	movne	r3, #1
 800718c:	2300      	moveq	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	f47f af6d 	bne.w	8007070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071ac:	e034      	b.n	8007218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 f8e3 	bl	800737a <I2C_IsAcknowledgeFailed>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e034      	b.n	8007228 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c4:	d028      	beq.n	8007218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c6:	f7fc ff99 	bl	80040fc <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d302      	bcc.n	80071dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11d      	bne.n	8007218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e6:	2b80      	cmp	r3, #128	@ 0x80
 80071e8:	d016      	beq.n	8007218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	f043 0220 	orr.w	r2, r3, #32
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e007      	b.n	8007228 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007222:	2b80      	cmp	r3, #128	@ 0x80
 8007224:	d1c3      	bne.n	80071ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800723c:	e034      	b.n	80072a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f89b 	bl	800737a <I2C_IsAcknowledgeFailed>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e034      	b.n	80072b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d028      	beq.n	80072a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007256:	f7fc ff51 	bl	80040fc <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	d302      	bcc.n	800726c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11d      	bne.n	80072a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b04      	cmp	r3, #4
 8007278:	d016      	beq.n	80072a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007294:	f043 0220 	orr.w	r2, r3, #32
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e007      	b.n	80072b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d1c3      	bne.n	800723e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072cc:	e049      	b.n	8007362 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b10      	cmp	r3, #16
 80072da:	d119      	bne.n	8007310 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0210 	mvn.w	r2, #16
 80072e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e030      	b.n	8007372 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007310:	f7fc fef4 	bl	80040fc <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	d302      	bcc.n	8007326 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d11d      	bne.n	8007362 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007330:	2b40      	cmp	r3, #64	@ 0x40
 8007332:	d016      	beq.n	8007362 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	f043 0220 	orr.w	r2, r3, #32
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e007      	b.n	8007372 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736c:	2b40      	cmp	r3, #64	@ 0x40
 800736e:	d1ae      	bne.n	80072ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007390:	d11b      	bne.n	80073ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800739a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b6:	f043 0204 	orr.w	r2, r3, #4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e034      	b.n	8007454 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80073f2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80073fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6852      	ldr	r2, [r2, #4]
 8007406:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6892      	ldr	r2, [r2, #8]
 8007410:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007412:	f7fc fe73 	bl	80040fc <HAL_GetTick>
 8007416:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007418:	e00f      	b.n	800743a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800741a:	f7fc fe6f 	bl	80040fc <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b31      	cmp	r3, #49	@ 0x31
 8007426:	d908      	bls.n	800743a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e00c      	b.n	8007454 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e8      	bne.n	800741a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007450:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800746c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e101      	b.n	8007692 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f015 fe07 	bl	801d0bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2203      	movs	r2, #3
 80074b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074bc:	d102      	bne.n	80074c4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f006 fd4e 	bl	800df6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	7c1a      	ldrb	r2, [r3, #16]
 80074d6:	f88d 2000 	strb.w	r2, [sp]
 80074da:	3304      	adds	r3, #4
 80074dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074de:	f006 fc2d 	bl	800dd3c <USB_CoreInit>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0ce      	b.n	8007692 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f006 fd46 	bl	800df8c <USB_SetCurrentMode>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e0bf      	b.n	8007692 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
 8007516:	e04a      	b.n	80075ae <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007518:	7bfa      	ldrb	r2, [r7, #15]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	3315      	adds	r3, #21
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800752c:	7bfa      	ldrb	r2, [r7, #15]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	3314      	adds	r3, #20
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007540:	7bfa      	ldrb	r2, [r7, #15]
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	b298      	uxth	r0, r3
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	332e      	adds	r3, #46	@ 0x2e
 8007554:	4602      	mov	r2, r0
 8007556:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007558:	7bfa      	ldrb	r2, [r7, #15]
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	440b      	add	r3, r1
 8007566:	3318      	adds	r3, #24
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800756c:	7bfa      	ldrb	r2, [r7, #15]
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	331c      	adds	r3, #28
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007580:	7bfa      	ldrb	r2, [r7, #15]
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	3320      	adds	r3, #32
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007594:	7bfa      	ldrb	r2, [r7, #15]
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3324      	adds	r3, #36	@ 0x24
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	3301      	adds	r3, #1
 80075ac:	73fb      	strb	r3, [r7, #15]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	791b      	ldrb	r3, [r3, #4]
 80075b2:	7bfa      	ldrb	r2, [r7, #15]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d3af      	bcc.n	8007518 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
 80075bc:	e044      	b.n	8007648 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075be:	7bfa      	ldrb	r2, [r7, #15]
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075d4:	7bfa      	ldrb	r2, [r7, #15]
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80075e6:	7bfa      	ldrb	r2, [r7, #15]
 80075e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075ea:	7bfa      	ldrb	r2, [r7, #15]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007616:	7bfa      	ldrb	r2, [r7, #15]
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800762c:	7bfa      	ldrb	r2, [r7, #15]
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	3301      	adds	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	791b      	ldrb	r3, [r3, #4]
 800764c:	7bfa      	ldrb	r2, [r7, #15]
 800764e:	429a      	cmp	r2, r3
 8007650:	d3b5      	bcc.n	80075be <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6818      	ldr	r0, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7c1a      	ldrb	r2, [r3, #16]
 800765a:	f88d 2000 	strb.w	r2, [sp]
 800765e:	3304      	adds	r3, #4
 8007660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007662:	f006 fcdf 	bl	800e024 <USB_DevInit>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e00c      	b.n	8007692 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f007 fd72 	bl	800f174 <USB_DevDisconnect>

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e015      	b.n	80076d8 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2203      	movs	r2, #3
 80076b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f007 fcc5 	bl	800f048 <USB_StopDevice>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e007      	b.n	80076d8 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f015 fd4b 	bl	801d164 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_PCD_Start+0x1c>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e022      	b.n	8007742 <HAL_PCD_Start+0x62>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007714:	2b01      	cmp	r3, #1
 8007716:	d105      	bne.n	8007724 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4618      	mov	r0, r3
 800772a:	f006 fc0d 	bl	800df48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f007 fcfd 	bl	800f132 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_PCD_Stop+0x1c>
 8007762:	2302      	movs	r3, #2
 8007764:	e028      	b.n	80077b8 <HAL_PCD_Stop+0x6e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f006 fbf9 	bl	800df6a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f007 fcf9 	bl	800f174 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2110      	movs	r1, #16
 8007788:	4618      	mov	r0, r3
 800778a:	f006 fdaf 	bl	800e2ec <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d105      	bne.n	80077ae <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b08d      	sub	sp, #52	@ 0x34
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f007 fd80 	bl	800f2dc <USB_GetMode>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f040 848c 	bne.w	80080fc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f007 fce4 	bl	800f1b6 <USB_ReadInterrupts>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8482 	beq.w	80080fa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	0a1b      	lsrs	r3, r3, #8
 8007800:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f007 fcd1 	bl	800f1b6 <USB_ReadInterrupts>
 8007814:	4603      	mov	r3, r0
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b02      	cmp	r3, #2
 800781c:	d107      	bne.n	800782e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	695a      	ldr	r2, [r3, #20]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f002 0202 	and.w	r2, r2, #2
 800782c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f007 fcbf 	bl	800f1b6 <USB_ReadInterrupts>
 8007838:	4603      	mov	r3, r0
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	2b10      	cmp	r3, #16
 8007840:	d161      	bne.n	8007906 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0210 	bic.w	r2, r2, #16
 8007850:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	f003 020f 	and.w	r2, r3, #15
 800785e:	4613      	mov	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	4413      	add	r3, r2
 800786e:	3304      	adds	r3, #4
 8007870:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	0c5b      	lsrs	r3, r3, #17
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	2b02      	cmp	r3, #2
 800787c:	d124      	bne.n	80078c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d035      	beq.n	80078f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007898:	b29b      	uxth	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	6a38      	ldr	r0, [r7, #32]
 800789e:	f007 faa7 	bl	800edf0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	091b      	lsrs	r3, r3, #4
 80078aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ae:	441a      	add	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	091b      	lsrs	r3, r3, #4
 80078bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078c0:	441a      	add	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	615a      	str	r2, [r3, #20]
 80078c6:	e016      	b.n	80078f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	0c5b      	lsrs	r3, r3, #17
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	2b06      	cmp	r3, #6
 80078d2:	d110      	bne.n	80078f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078da:	2208      	movs	r2, #8
 80078dc:	4619      	mov	r1, r3
 80078de:	6a38      	ldr	r0, [r7, #32]
 80078e0:	f007 fa86 	bl	800edf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	091b      	lsrs	r3, r3, #4
 80078ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078f0:	441a      	add	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0210 	orr.w	r2, r2, #16
 8007904:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f007 fc53 	bl	800f1b6 <USB_ReadInterrupts>
 8007910:	4603      	mov	r3, r0
 8007912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007916:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800791a:	f040 80a7 	bne.w	8007a6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f007 fc58 	bl	800f1dc <USB_ReadDevAllOutEpInterrupt>
 800792c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800792e:	e099      	b.n	8007a64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 808e 	beq.w	8007a58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f007 fc7c 	bl	800f244 <USB_ReadDevOutEPInterrupt>
 800794c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00c      	beq.n	8007972 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007964:	461a      	mov	r2, r3
 8007966:	2301      	movs	r3, #1
 8007968:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800796a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fecf 	bl	8008710 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00c      	beq.n	8007996 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007988:	461a      	mov	r2, r3
 800798a:	2308      	movs	r3, #8
 800798c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800798e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 ffa5 	bl	80088e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2310      	movs	r3, #16
 80079b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d030      	beq.n	8007a1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c4:	2b80      	cmp	r3, #128	@ 0x80
 80079c6:	d109      	bne.n	80079dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80079dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	3304      	adds	r3, #4
 80079f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	78db      	ldrb	r3, [r3, #3]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d108      	bne.n	8007a0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2200      	movs	r2, #0
 80079fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f015 fc7e 	bl	801d308 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d008      	beq.n	8007a3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	461a      	mov	r2, r3
 8007a36:	2320      	movs	r3, #32
 8007a38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	461a      	mov	r2, r3
 8007a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f47f af62 	bne.w	8007930 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f007 fba0 	bl	800f1b6 <USB_ReadInterrupts>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a80:	f040 80db 	bne.w	8007c3a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f007 fbc1 	bl	800f210 <USB_ReadDevAllInEpInterrupt>
 8007a8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007a94:	e0cd      	b.n	8007c32 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 80c2 	beq.w	8007c26 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f007 fbe7 	bl	800f280 <USB_ReadDevInEPInterrupt>
 8007ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d057      	beq.n	8007b6e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	69f9      	ldr	r1, [r7, #28]
 8007ada:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ade:	4013      	ands	r3, r2
 8007ae0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aee:	461a      	mov	r2, r3
 8007af0:	2301      	movs	r3, #1
 8007af2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	799b      	ldrb	r3, [r3, #6]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d132      	bne.n	8007b62 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b00:	4613      	mov	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3320      	adds	r3, #32
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b12:	4613      	mov	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4403      	add	r3, r0
 8007b1c:	331c      	adds	r3, #28
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4419      	add	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b26:	4613      	mov	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4403      	add	r3, r0
 8007b30:	3320      	adds	r3, #32
 8007b32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d113      	bne.n	8007b62 <HAL_PCD_IRQHandler+0x3a2>
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b3e:	4613      	mov	r3, r2
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	3324      	adds	r3, #36	@ 0x24
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d108      	bne.n	8007b62 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	f007 fbef 	bl	800f340 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f015 fb48 	bl	801d1fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b84:	461a      	mov	r2, r3
 8007b86:	2308      	movs	r3, #8
 8007b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2310      	movs	r3, #16
 8007ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2340      	movs	r3, #64	@ 0x40
 8007bc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d023      	beq.n	8007c14 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bce:	6a38      	ldr	r0, [r7, #32]
 8007bd0:	f006 fb8c 	bl	800e2ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	3310      	adds	r3, #16
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	4413      	add	r3, r2
 8007be4:	3304      	adds	r3, #4
 8007be6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	78db      	ldrb	r3, [r3, #3]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d108      	bne.n	8007c02 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f015 fb95 	bl	801d32c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2302      	movs	r3, #2
 8007c12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007c1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fce8 	bl	80085f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	3301      	adds	r3, #1
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f47f af2e 	bne.w	8007a96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f007 fab9 	bl	800f1b6 <USB_ReadInterrupts>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c4e:	d122      	bne.n	8007c96 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c5e:	f023 0301 	bic.w	r3, r3, #1
 8007c62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d108      	bne.n	8007c80 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c76:	2100      	movs	r1, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fecf 	bl	8008a1c <HAL_PCDEx_LPM_Callback>
 8007c7e:	e002      	b.n	8007c86 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f015 fb33 	bl	801d2ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f007 fa8b 	bl	800f1b6 <USB_ReadInterrupts>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007caa:	d112      	bne.n	8007cd2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d102      	bne.n	8007cc2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f015 faef 	bl	801d2a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695a      	ldr	r2, [r3, #20]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007cd0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f007 fa6d 	bl	800f1b6 <USB_ReadInterrupts>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce6:	f040 80b7 	bne.w	8007e58 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2110      	movs	r1, #16
 8007d04:	4618      	mov	r0, r3
 8007d06:	f006 faf1 	bl	800e2ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d0e:	e046      	b.n	8007d9e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d50:	461a      	mov	r2, r3
 8007d52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	791b      	ldrb	r3, [r3, #4]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d3b2      	bcc.n	8007d10 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007dbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7bdb      	ldrb	r3, [r3, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d016      	beq.n	8007df4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd6:	f043 030b 	orr.w	r3, r3, #11
 8007dda:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dec:	f043 030b 	orr.w	r3, r3, #11
 8007df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007df2:	e015      	b.n	8007e20 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e06:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007e0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e1a:	f043 030b 	orr.w	r3, r3, #11
 8007e1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e42:	461a      	mov	r2, r3
 8007e44:	f007 fa7c 	bl	800f340 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695a      	ldr	r2, [r3, #20]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f007 f9aa 	bl	800f1b6 <USB_ReadInterrupts>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e6c:	d123      	bne.n	8007eb6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f007 fa40 	bl	800f2f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f006 faae 	bl	800e3de <USB_GetDevSpeed>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461a      	mov	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681c      	ldr	r4, [r3, #0]
 8007e8e:	f001 fa65 	bl	800935c <HAL_RCC_GetHCLKFreq>
 8007e92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f005 ffb2 	bl	800de04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f015 f9d4 	bl	801d24e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	695a      	ldr	r2, [r3, #20]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f007 f97b 	bl	800f1b6 <USB_ReadInterrupts>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d10a      	bne.n	8007ee0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f015 f9b1 	bl	801d232 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695a      	ldr	r2, [r3, #20]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f002 0208 	and.w	r2, r2, #8
 8007ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f007 f966 	bl	800f1b6 <USB_ReadInterrupts>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef0:	2b80      	cmp	r3, #128	@ 0x80
 8007ef2:	d123      	bne.n	8007f3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f00:	2301      	movs	r3, #1
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f04:	e014      	b.n	8007f30 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d105      	bne.n	8007f2a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fb08 	bl	800853a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	791b      	ldrb	r3, [r3, #4]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d3e4      	bcc.n	8007f06 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f007 f938 	bl	800f1b6 <USB_ReadInterrupts>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f50:	d13c      	bne.n	8007fcc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f52:	2301      	movs	r3, #1
 8007f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f56:	e02b      	b.n	8007fb0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	3318      	adds	r3, #24
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d115      	bne.n	8007faa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007f7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da12      	bge.n	8007faa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	3317      	adds	r3, #23
 8007f94:	2201      	movs	r2, #1
 8007f96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fac8 	bl	800853a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	3301      	adds	r3, #1
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	791b      	ldrb	r3, [r3, #4]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d3cd      	bcc.n	8007f58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695a      	ldr	r2, [r3, #20]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f007 f8f0 	bl	800f1b6 <USB_ReadInterrupts>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fe0:	d156      	bne.n	8008090 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe6:	e045      	b.n	8008074 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d12e      	bne.n	800806e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008010:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008012:	2b00      	cmp	r3, #0
 8008014:	da2b      	bge.n	800806e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008022:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008026:	429a      	cmp	r2, r3
 8008028:	d121      	bne.n	800806e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802e:	4613      	mov	r3, r2
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800806a:	6053      	str	r3, [r2, #4]
            break;
 800806c:	e008      	b.n	8008080 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	3301      	adds	r3, #1
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	461a      	mov	r2, r3
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	4293      	cmp	r3, r2
 800807e:	d3b3      	bcc.n	8007fe8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	695a      	ldr	r2, [r3, #20]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800808e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f007 f88e 	bl	800f1b6 <USB_ReadInterrupts>
 800809a:	4603      	mov	r3, r0
 800809c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a4:	d10a      	bne.n	80080bc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f015 f952 	bl	801d350 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80080ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f007 f878 	bl	800f1b6 <USB_ReadInterrupts>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d115      	bne.n	80080fc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f015 f942 	bl	801d36c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6859      	ldr	r1, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	605a      	str	r2, [r3, #4]
 80080f8:	e000      	b.n	80080fc <HAL_PCD_IRQHandler+0x93c>
      return;
 80080fa:	bf00      	nop
    }
  }
}
 80080fc:	3734      	adds	r7, #52	@ 0x34
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd90      	pop	{r4, r7, pc}

08008102 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_PCD_SetAddress+0x1a>
 8008118:	2302      	movs	r3, #2
 800811a:	e012      	b.n	8008142 <HAL_PCD_SetAddress+0x40>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f006 ffd7 	bl	800f0e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	461a      	mov	r2, r3
 8008158:	4603      	mov	r3, r0
 800815a:	70fb      	strb	r3, [r7, #3]
 800815c:	460b      	mov	r3, r1
 800815e:	803b      	strh	r3, [r7, #0]
 8008160:	4613      	mov	r3, r2
 8008162:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800816c:	2b00      	cmp	r3, #0
 800816e:	da0f      	bge.n	8008190 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	f003 020f 	and.w	r2, r3, #15
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	3310      	adds	r3, #16
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	3304      	adds	r3, #4
 8008186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	705a      	strb	r2, [r3, #1]
 800818e:	e00f      	b.n	80081b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	4613      	mov	r3, r2
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	4413      	add	r3, r2
 80081a6:	3304      	adds	r3, #4
 80081a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80081bc:	883a      	ldrh	r2, [r7, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	78ba      	ldrb	r2, [r7, #2]
 80081c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081da:	78bb      	ldrb	r3, [r7, #2]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d102      	bne.n	80081e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_PCD_EP_Open+0xaa>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e00e      	b.n	8008212 <HAL_PCD_EP_Open+0xc8>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	4618      	mov	r0, r3
 8008204:	f006 f910 	bl	800e428 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008210:	7afb      	ldrb	r3, [r7, #11]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da0f      	bge.n	800824e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f003 020f 	and.w	r2, r3, #15
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	3310      	adds	r3, #16
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	3304      	adds	r3, #4
 8008244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	705a      	strb	r2, [r3, #1]
 800824c:	e00f      	b.n	800826e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	4613      	mov	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	3304      	adds	r3, #4
 8008266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	b2da      	uxtb	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_PCD_EP_Close+0x6e>
 8008284:	2302      	movs	r3, #2
 8008286:	e00e      	b.n	80082a6 <HAL_PCD_EP_Close+0x8c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68f9      	ldr	r1, [r7, #12]
 8008296:	4618      	mov	r0, r3
 8008298:	f006 f94e 	bl	800e538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b086      	sub	sp, #24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	460b      	mov	r3, r1
 80082bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	3304      	adds	r3, #4
 80082d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2200      	movs	r2, #0
 80082e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2200      	movs	r2, #0
 80082ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	799b      	ldrb	r3, [r3, #6]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d102      	bne.n	800830a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	799b      	ldrb	r3, [r3, #6]
 8008312:	461a      	mov	r2, r3
 8008314:	6979      	ldr	r1, [r7, #20]
 8008316:	f006 f9eb 	bl	800e6f0 <USB_EPStartXfer>

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	f003 020f 	and.w	r2, r3, #15
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008346:	681b      	ldr	r3, [r3, #0]
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	460b      	mov	r3, r1
 8008362:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	f003 020f 	and.w	r2, r3, #15
 800836a:	4613      	mov	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	3310      	adds	r3, #16
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	3304      	adds	r3, #4
 800837a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2200      	movs	r2, #0
 800838c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2201      	movs	r2, #1
 8008392:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	f003 030f 	and.w	r3, r3, #15
 800839a:	b2da      	uxtb	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	799b      	ldrb	r3, [r3, #6]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d102      	bne.n	80083ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	799b      	ldrb	r3, [r3, #6]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6979      	ldr	r1, [r7, #20]
 80083ba:	f006 f999 	bl	800e6f0 <USB_EPStartXfer>

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	7912      	ldrb	r2, [r2, #4]
 80083de:	4293      	cmp	r3, r2
 80083e0:	d901      	bls.n	80083e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e04f      	b.n	8008486 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da0f      	bge.n	800840e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	4613      	mov	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	3310      	adds	r3, #16
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	3304      	adds	r3, #4
 8008404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	705a      	strb	r2, [r3, #1]
 800840c:	e00d      	b.n	800842a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	3304      	adds	r3, #4
 8008422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	b2da      	uxtb	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_PCD_EP_SetStall+0x82>
 8008446:	2302      	movs	r3, #2
 8008448:	e01d      	b.n	8008486 <HAL_PCD_EP_SetStall+0xbe>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	4618      	mov	r0, r3
 800845a:	f006 fd21 	bl	800eea0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7999      	ldrb	r1, [r3, #6]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008476:	461a      	mov	r2, r3
 8008478:	f006 ff62 	bl	800f340 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	7912      	ldrb	r2, [r2, #4]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d901      	bls.n	80084ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e042      	b.n	8008532 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da0f      	bge.n	80084d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	f003 020f 	and.w	r2, r3, #15
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	3310      	adds	r3, #16
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	4413      	add	r3, r2
 80084c8:	3304      	adds	r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	705a      	strb	r2, [r3, #1]
 80084d2:	e00f      	b.n	80084f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	f003 020f 	and.w	r2, r3, #15
 80084da:	4613      	mov	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	b2da      	uxtb	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_PCD_EP_ClrStall+0x86>
 8008510:	2302      	movs	r3, #2
 8008512:	e00e      	b.n	8008532 <HAL_PCD_EP_ClrStall+0xa4>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	4618      	mov	r0, r3
 8008524:	f006 fd2a 	bl	800ef7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	da0c      	bge.n	8008568 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	f003 020f 	and.w	r2, r3, #15
 8008554:	4613      	mov	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	3310      	adds	r3, #16
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	3304      	adds	r3, #4
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	e00c      	b.n	8008582 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	f003 020f 	and.w	r2, r3, #15
 800856e:	4613      	mov	r3, r2
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	3304      	adds	r3, #4
 8008580:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	4618      	mov	r0, r3
 800858a:	f006 fb49 	bl	800ec20 <USB_EPStopXfer>
 800858e:	4603      	mov	r3, r0
 8008590:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008592:	7afb      	ldrb	r3, [r7, #11]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_PCD_EP_Flush+0x1a>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e01b      	b.n	80085ee <HAL_PCD_EP_Flush+0x52>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80085be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da09      	bge.n	80085da <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f005 fe8a 	bl	800e2ec <USB_FlushTxFifo>
 80085d8:	e004      	b.n	80085e4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f005 feb6 	bl	800e350 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b08a      	sub	sp, #40	@ 0x28
 80085fa:	af02      	add	r7, sp, #8
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	3310      	adds	r3, #16
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	3304      	adds	r3, #4
 800861c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	695a      	ldr	r2, [r3, #20]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	d901      	bls.n	800862e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e06b      	b.n	8008706 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	429a      	cmp	r2, r3
 8008642:	d902      	bls.n	800864a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	3303      	adds	r3, #3
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008652:	e02a      	b.n	80086aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	691a      	ldr	r2, [r3, #16]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	429a      	cmp	r2, r3
 8008668:	d902      	bls.n	8008670 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3303      	adds	r3, #3
 8008674:	089b      	lsrs	r3, r3, #2
 8008676:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68d9      	ldr	r1, [r3, #12]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	b2da      	uxtb	r2, r3
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	4603      	mov	r3, r0
 800868c:	6978      	ldr	r0, [r7, #20]
 800868e:	f006 fb71 	bl	800ed74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	441a      	add	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	695a      	ldr	r2, [r3, #20]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	441a      	add	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d809      	bhi.n	80086d4 <PCD_WriteEmptyTxFifo+0xde>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d203      	bcs.n	80086d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1bf      	bne.n	8008654 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d811      	bhi.n	8008704 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	2201      	movs	r2, #1
 80086e8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	43db      	mvns	r3, r3
 80086fa:	6939      	ldr	r1, [r7, #16]
 80086fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008700:	4013      	ands	r3, r2
 8008702:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	333c      	adds	r3, #60	@ 0x3c
 8008728:	3304      	adds	r3, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	799b      	ldrb	r3, [r3, #6]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d17b      	bne.n	800883e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d015      	beq.n	800877c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	4a61      	ldr	r2, [pc, #388]	@ (80088d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	f240 80b9 	bls.w	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80b3 	beq.w	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008772:	461a      	mov	r2, r3
 8008774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008778:	6093      	str	r3, [r2, #8]
 800877a:	e0a7      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008792:	461a      	mov	r2, r3
 8008794:	2320      	movs	r3, #32
 8008796:	6093      	str	r3, [r2, #8]
 8008798:	e098      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 8093 	bne.w	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4a4b      	ldr	r2, [pc, #300]	@ (80088d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d90f      	bls.n	80087ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c4:	461a      	mov	r2, r3
 80087c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ca:	6093      	str	r3, [r2, #8]
 80087cc:	e07e      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	0159      	lsls	r1, r3, #5
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	440b      	add	r3, r1
 80087f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d114      	bne.n	8008830 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008818:	461a      	mov	r2, r3
 800881a:	2101      	movs	r1, #1
 800881c:	f006 fd90 	bl	800f340 <USB_EP0_OutStart>
 8008820:	e006      	b.n	8008830 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	441a      	add	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f014 fcc6 	bl	801d1c8 <HAL_PCD_DataOutStageCallback>
 800883c:	e046      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4a26      	ldr	r2, [pc, #152]	@ (80088dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d124      	bne.n	8008890 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	461a      	mov	r2, r3
 800885e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008862:	6093      	str	r3, [r2, #8]
 8008864:	e032      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f003 0320 	and.w	r3, r3, #32
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887c:	461a      	mov	r2, r3
 800887e:	2320      	movs	r3, #32
 8008880:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f014 fc9d 	bl	801d1c8 <HAL_PCD_DataOutStageCallback>
 800888e:	e01d      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d114      	bne.n	80088c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d108      	bne.n	80088c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088b8:	461a      	mov	r2, r3
 80088ba:	2100      	movs	r1, #0
 80088bc:	f006 fd40 	bl	800f340 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f014 fc7e 	bl	801d1c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	4f54300a 	.word	0x4f54300a
 80088dc:	4f54310a 	.word	0x4f54310a

080088e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	333c      	adds	r3, #60	@ 0x3c
 80088f8:	3304      	adds	r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <PCD_EP_OutSetupPacket_int+0x88>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d90e      	bls.n	8008934 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892c:	461a      	mov	r2, r3
 800892e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008932:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f014 fc35 	bl	801d1a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4a0a      	ldr	r2, [pc, #40]	@ (8008968 <PCD_EP_OutSetupPacket_int+0x88>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d90c      	bls.n	800895c <PCD_EP_OutSetupPacket_int+0x7c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	799b      	ldrb	r3, [r3, #6]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008954:	461a      	mov	r2, r3
 8008956:	2101      	movs	r1, #1
 8008958:	f006 fcf2 	bl	800f340 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	4f54300a 	.word	0x4f54300a

0800896c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
 8008978:	4613      	mov	r3, r2
 800897a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008982:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d107      	bne.n	800899a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800898a:	883b      	ldrh	r3, [r7, #0]
 800898c:	0419      	lsls	r1, r3, #16
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	430a      	orrs	r2, r1
 8008996:	629a      	str	r2, [r3, #40]	@ 0x28
 8008998:	e028      	b.n	80089ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4413      	add	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
 80089ac:	e00d      	b.n	80089ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	3340      	adds	r3, #64	@ 0x40
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	3301      	adds	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	7bfa      	ldrb	r2, [r7, #15]
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d3ec      	bcc.n	80089ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80089d4:	883b      	ldrh	r3, [r7, #0]
 80089d6:	0418      	lsls	r0, r3, #16
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	3b01      	subs	r3, #1
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4302      	orrs	r2, r0
 80089e4:	3340      	adds	r3, #64	@ 0x40
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	887a      	ldrh	r2, [r7, #2]
 8008a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a3a:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a46:	687b      	ldr	r3, [r7, #4]
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	420e0020 	.word	0x420e0020
 8008a58:	40007000 	.word	0x40007000

08008a5c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008a62:	4b06      	ldr	r3, [pc, #24]	@ (8008a7c <HAL_PWR_DisableBkUpAccess+0x20>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a68:	4b05      	ldr	r3, [pc, #20]	@ (8008a80 <HAL_PWR_DisableBkUpAccess+0x24>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a6e:	687b      	ldr	r3, [r7, #4]
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	420e0020 	.word	0x420e0020
 8008a80:	40007000 	.word	0x40007000

08008a84 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008a90:	4b12      	ldr	r3, [pc, #72]	@ (8008adc <HAL_PWR_EnterSTOPMode+0x58>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f023 0203 	bic.w	r2, r3, #3
 8008a98:	4910      	ldr	r1, [pc, #64]	@ (8008adc <HAL_PWR_EnterSTOPMode+0x58>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8008ae0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008aa6:	f043 0304 	orr.w	r3, r3, #4
 8008aaa:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008ab2:	bf30      	wfi
 8008ab4:	e005      	b.n	8008ac2 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d001      	beq.n	8008ac0 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8008abc:	bf40      	sev
      __WFE();
 8008abe:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8008ac0:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008ac2:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	4a06      	ldr	r2, [pc, #24]	@ (8008ae0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ac8:	f023 0304 	bic.w	r3, r3, #4
 8008acc:	6113      	str	r3, [r2, #16]
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40007000 	.word	0x40007000
 8008ae0:	e000ed00 	.word	0xe000ed00

08008ae4 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8008ae8:	4b03      	ldr	r3, [pc, #12]	@ (8008af8 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	601a      	str	r2, [r3, #0]
}
 8008aee:	bf00      	nop
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	420e0024 	.word	0x420e0024

08008afc <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8008b00:	4b03      	ldr	r3, [pc, #12]	@ (8008b10 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
}
 8008b06:	bf00      	nop
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	420e0024 	.word	0x420e0024

08008b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e267      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d075      	beq.n	8008c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b32:	4b88      	ldr	r3, [pc, #544]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 030c 	and.w	r3, r3, #12
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d00c      	beq.n	8008b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b3e:	4b85      	ldr	r3, [pc, #532]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d112      	bne.n	8008b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b4a:	4b82      	ldr	r3, [pc, #520]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b56:	d10b      	bne.n	8008b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b58:	4b7e      	ldr	r3, [pc, #504]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d05b      	beq.n	8008c1c <HAL_RCC_OscConfig+0x108>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d157      	bne.n	8008c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e242      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b78:	d106      	bne.n	8008b88 <HAL_RCC_OscConfig+0x74>
 8008b7a:	4b76      	ldr	r3, [pc, #472]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a75      	ldr	r2, [pc, #468]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	e01d      	b.n	8008bc4 <HAL_RCC_OscConfig+0xb0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b90:	d10c      	bne.n	8008bac <HAL_RCC_OscConfig+0x98>
 8008b92:	4b70      	ldr	r3, [pc, #448]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a6f      	ldr	r2, [pc, #444]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e00b      	b.n	8008bc4 <HAL_RCC_OscConfig+0xb0>
 8008bac:	4b69      	ldr	r3, [pc, #420]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a68      	ldr	r2, [pc, #416]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	4b66      	ldr	r3, [pc, #408]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a65      	ldr	r2, [pc, #404]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d013      	beq.n	8008bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bcc:	f7fb fa96 	bl	80040fc <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7fb fa92 	bl	80040fc <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	@ 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e207      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be6:	4b5b      	ldr	r3, [pc, #364]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <HAL_RCC_OscConfig+0xc0>
 8008bf2:	e014      	b.n	8008c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fb fa82 	bl	80040fc <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7fb fa7e 	bl	80040fc <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	@ 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e1f3      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0e:	4b51      	ldr	r3, [pc, #324]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0xe8>
 8008c1a:	e000      	b.n	8008c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d063      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 030c 	and.w	r3, r3, #12
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c36:	4b47      	ldr	r3, [pc, #284]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d11c      	bne.n	8008c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c42:	4b44      	ldr	r3, [pc, #272]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d116      	bne.n	8008c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c4e:	4b41      	ldr	r3, [pc, #260]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_RCC_OscConfig+0x152>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d001      	beq.n	8008c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e1c7      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c66:	4b3b      	ldr	r3, [pc, #236]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4937      	ldr	r1, [pc, #220]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c7a:	e03a      	b.n	8008cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d020      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c84:	4b34      	ldr	r3, [pc, #208]	@ (8008d58 <HAL_RCC_OscConfig+0x244>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7fb fa37 	bl	80040fc <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c92:	f7fb fa33 	bl	80040fc <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e1a8      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb0:	4b28      	ldr	r3, [pc, #160]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4925      	ldr	r1, [pc, #148]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	e015      	b.n	8008cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cc6:	4b24      	ldr	r3, [pc, #144]	@ (8008d58 <HAL_RCC_OscConfig+0x244>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ccc:	f7fb fa16 	bl	80040fc <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cd4:	f7fb fa12 	bl	80040fc <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e187      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d036      	beq.n	8008d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d06:	4b15      	ldr	r3, [pc, #84]	@ (8008d5c <HAL_RCC_OscConfig+0x248>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d0c:	f7fb f9f6 	bl	80040fc <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d14:	f7fb f9f2 	bl	80040fc <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e167      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d26:	4b0b      	ldr	r3, [pc, #44]	@ (8008d54 <HAL_RCC_OscConfig+0x240>)
 8008d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x200>
 8008d32:	e01b      	b.n	8008d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d34:	4b09      	ldr	r3, [pc, #36]	@ (8008d5c <HAL_RCC_OscConfig+0x248>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d3a:	f7fb f9df 	bl	80040fc <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d40:	e00e      	b.n	8008d60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d42:	f7fb f9db 	bl	80040fc <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d907      	bls.n	8008d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e150      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
 8008d54:	40023800 	.word	0x40023800
 8008d58:	42470000 	.word	0x42470000
 8008d5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d60:	4b88      	ldr	r3, [pc, #544]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1ea      	bne.n	8008d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 8097 	beq.w	8008ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d7e:	4b81      	ldr	r3, [pc, #516]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10f      	bne.n	8008daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d92:	4a7c      	ldr	r2, [pc, #496]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da2:	60bb      	str	r3, [r7, #8]
 8008da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008daa:	4b77      	ldr	r3, [pc, #476]	@ (8008f88 <HAL_RCC_OscConfig+0x474>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d118      	bne.n	8008de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008db6:	4b74      	ldr	r3, [pc, #464]	@ (8008f88 <HAL_RCC_OscConfig+0x474>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a73      	ldr	r2, [pc, #460]	@ (8008f88 <HAL_RCC_OscConfig+0x474>)
 8008dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dc2:	f7fb f99b 	bl	80040fc <HAL_GetTick>
 8008dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dc8:	e008      	b.n	8008ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dca:	f7fb f997 	bl	80040fc <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e10c      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8008f88 <HAL_RCC_OscConfig+0x474>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d106      	bne.n	8008dfe <HAL_RCC_OscConfig+0x2ea>
 8008df0:	4b64      	ldr	r3, [pc, #400]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df4:	4a63      	ldr	r2, [pc, #396]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008df6:	f043 0301 	orr.w	r3, r3, #1
 8008dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dfc:	e01c      	b.n	8008e38 <HAL_RCC_OscConfig+0x324>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d10c      	bne.n	8008e20 <HAL_RCC_OscConfig+0x30c>
 8008e06:	4b5f      	ldr	r3, [pc, #380]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e0c:	f043 0304 	orr.w	r3, r3, #4
 8008e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e12:	4b5c      	ldr	r3, [pc, #368]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e16:	4a5b      	ldr	r2, [pc, #364]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e18:	f043 0301 	orr.w	r3, r3, #1
 8008e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e1e:	e00b      	b.n	8008e38 <HAL_RCC_OscConfig+0x324>
 8008e20:	4b58      	ldr	r3, [pc, #352]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e24:	4a57      	ldr	r2, [pc, #348]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e26:	f023 0301 	bic.w	r3, r3, #1
 8008e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e2c:	4b55      	ldr	r3, [pc, #340]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e30:	4a54      	ldr	r2, [pc, #336]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e32:	f023 0304 	bic.w	r3, r3, #4
 8008e36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d015      	beq.n	8008e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e40:	f7fb f95c 	bl	80040fc <HAL_GetTick>
 8008e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e46:	e00a      	b.n	8008e5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e48:	f7fb f958 	bl	80040fc <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e0cb      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e5e:	4b49      	ldr	r3, [pc, #292]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0ee      	beq.n	8008e48 <HAL_RCC_OscConfig+0x334>
 8008e6a:	e014      	b.n	8008e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e6c:	f7fb f946 	bl	80040fc <HAL_GetTick>
 8008e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e72:	e00a      	b.n	8008e8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e74:	f7fb f942 	bl	80040fc <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e0b5      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1ee      	bne.n	8008e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d105      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e9c:	4b39      	ldr	r3, [pc, #228]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea0:	4a38      	ldr	r2, [pc, #224]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ea6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80a1 	beq.w	8008ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008eb2:	4b34      	ldr	r3, [pc, #208]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 030c 	and.w	r3, r3, #12
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d05c      	beq.n	8008f78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d141      	bne.n	8008f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec6:	4b31      	ldr	r3, [pc, #196]	@ (8008f8c <HAL_RCC_OscConfig+0x478>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ecc:	f7fb f916 	bl	80040fc <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ed4:	f7fb f912 	bl	80040fc <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e087      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ee6:	4b27      	ldr	r3, [pc, #156]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	019b      	lsls	r3, r3, #6
 8008f02:	431a      	orrs	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f08:	085b      	lsrs	r3, r3, #1
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	041b      	lsls	r3, r3, #16
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	061b      	lsls	r3, r3, #24
 8008f16:	491b      	ldr	r1, [pc, #108]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8008f8c <HAL_RCC_OscConfig+0x478>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f22:	f7fb f8eb 	bl	80040fc <HAL_GetTick>
 8008f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f28:	e008      	b.n	8008f3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f2a:	f7fb f8e7 	bl	80040fc <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d901      	bls.n	8008f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e05c      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f3c:	4b11      	ldr	r3, [pc, #68]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0f0      	beq.n	8008f2a <HAL_RCC_OscConfig+0x416>
 8008f48:	e054      	b.n	8008ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f4a:	4b10      	ldr	r3, [pc, #64]	@ (8008f8c <HAL_RCC_OscConfig+0x478>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f50:	f7fb f8d4 	bl	80040fc <HAL_GetTick>
 8008f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f56:	e008      	b.n	8008f6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f58:	f7fb f8d0 	bl	80040fc <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e045      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f6a:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <HAL_RCC_OscConfig+0x470>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1f0      	bne.n	8008f58 <HAL_RCC_OscConfig+0x444>
 8008f76:	e03d      	b.n	8008ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d107      	bne.n	8008f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e038      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
 8008f84:	40023800 	.word	0x40023800
 8008f88:	40007000 	.word	0x40007000
 8008f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f90:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <HAL_RCC_OscConfig+0x4ec>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d028      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d121      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d11a      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d111      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d107      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d001      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40023800 	.word	0x40023800

08009004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0cc      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009018:	4b68      	ldr	r3, [pc, #416]	@ (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0307 	and.w	r3, r3, #7
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d90c      	bls.n	8009040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009026:	4b65      	ldr	r3, [pc, #404]	@ (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800902e:	4b63      	ldr	r3, [pc, #396]	@ (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d001      	beq.n	8009040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e0b8      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d020      	beq.n	800908e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009058:	4b59      	ldr	r3, [pc, #356]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	4a58      	ldr	r2, [pc, #352]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800905e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009070:	4b53      	ldr	r3, [pc, #332]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4a52      	ldr	r2, [pc, #328]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800907a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800907c:	4b50      	ldr	r3, [pc, #320]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	494d      	ldr	r1, [pc, #308]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800908a:	4313      	orrs	r3, r2
 800908c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d044      	beq.n	8009124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d107      	bne.n	80090b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090a2:	4b47      	ldr	r3, [pc, #284]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d119      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e07f      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d003      	beq.n	80090c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d107      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090c2:	4b3f      	ldr	r3, [pc, #252]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e06f      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d2:	4b3b      	ldr	r3, [pc, #236]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e067      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090e2:	4b37      	ldr	r3, [pc, #220]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f023 0203 	bic.w	r2, r3, #3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4934      	ldr	r1, [pc, #208]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090f4:	f7fb f802 	bl	80040fc <HAL_GetTick>
 80090f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090fa:	e00a      	b.n	8009112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090fc:	f7fa fffe 	bl	80040fc <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800910a:	4293      	cmp	r3, r2
 800910c:	d901      	bls.n	8009112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e04f      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009112:	4b2b      	ldr	r3, [pc, #172]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 020c 	and.w	r2, r3, #12
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	429a      	cmp	r2, r3
 8009122:	d1eb      	bne.n	80090fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009124:	4b25      	ldr	r3, [pc, #148]	@ (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d20c      	bcs.n	800914c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b22      	ldr	r3, [pc, #136]	@ (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800913a:	4b20      	ldr	r3, [pc, #128]	@ (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d001      	beq.n	800914c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e032      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d008      	beq.n	800916a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009158:	4b19      	ldr	r3, [pc, #100]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	4916      	ldr	r1, [pc, #88]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	4313      	orrs	r3, r2
 8009168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009176:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	490e      	ldr	r1, [pc, #56]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009186:	4313      	orrs	r3, r2
 8009188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800918a:	f000 f821 	bl	80091d0 <HAL_RCC_GetSysClockFreq>
 800918e:	4602      	mov	r2, r0
 8009190:	4b0b      	ldr	r3, [pc, #44]	@ (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	091b      	lsrs	r3, r3, #4
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	490a      	ldr	r1, [pc, #40]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c0>)
 800919c:	5ccb      	ldrb	r3, [r1, r3]
 800919e:	fa22 f303 	lsr.w	r3, r2, r3
 80091a2:	4a09      	ldr	r2, [pc, #36]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c4>)
 80091a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091a6:	4b09      	ldr	r3, [pc, #36]	@ (80091cc <HAL_RCC_ClockConfig+0x1c8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fa ff62 	bl	8004074 <HAL_InitTick>

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40023c00 	.word	0x40023c00
 80091c0:	40023800 	.word	0x40023800
 80091c4:	08024f94 	.word	0x08024f94
 80091c8:	20000010 	.word	0x20000010
 80091cc:	20000014 	.word	0x20000014

080091d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d4:	b090      	sub	sp, #64	@ 0x40
 80091d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e0:	2300      	movs	r3, #0
 80091e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091e8:	4b59      	ldr	r3, [pc, #356]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x180>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 030c 	and.w	r3, r3, #12
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d00d      	beq.n	8009210 <HAL_RCC_GetSysClockFreq+0x40>
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	f200 80a1 	bhi.w	800933c <HAL_RCC_GetSysClockFreq+0x16c>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <HAL_RCC_GetSysClockFreq+0x34>
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d003      	beq.n	800920a <HAL_RCC_GetSysClockFreq+0x3a>
 8009202:	e09b      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009204:	4b53      	ldr	r3, [pc, #332]	@ (8009354 <HAL_RCC_GetSysClockFreq+0x184>)
 8009206:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009208:	e09b      	b.n	8009342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800920a:	4b53      	ldr	r3, [pc, #332]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x188>)
 800920c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800920e:	e098      	b.n	8009342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009210:	4b4f      	ldr	r3, [pc, #316]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x180>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009218:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800921a:	4b4d      	ldr	r3, [pc, #308]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x180>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d028      	beq.n	8009278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009226:	4b4a      	ldr	r3, [pc, #296]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x180>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	099b      	lsrs	r3, r3, #6
 800922c:	2200      	movs	r2, #0
 800922e:	623b      	str	r3, [r7, #32]
 8009230:	627a      	str	r2, [r7, #36]	@ 0x24
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009238:	2100      	movs	r1, #0
 800923a:	4b47      	ldr	r3, [pc, #284]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x188>)
 800923c:	fb03 f201 	mul.w	r2, r3, r1
 8009240:	2300      	movs	r3, #0
 8009242:	fb00 f303 	mul.w	r3, r0, r3
 8009246:	4413      	add	r3, r2
 8009248:	4a43      	ldr	r2, [pc, #268]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x188>)
 800924a:	fba0 1202 	umull	r1, r2, r0, r2
 800924e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009250:	460a      	mov	r2, r1
 8009252:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009256:	4413      	add	r3, r2
 8009258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800925a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925c:	2200      	movs	r2, #0
 800925e:	61bb      	str	r3, [r7, #24]
 8009260:	61fa      	str	r2, [r7, #28]
 8009262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800926a:	f7f7 fd25 	bl	8000cb8 <__aeabi_uldivmod>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4613      	mov	r3, r2
 8009274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009276:	e053      	b.n	8009320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009278:	4b35      	ldr	r3, [pc, #212]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x180>)
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	099b      	lsrs	r3, r3, #6
 800927e:	2200      	movs	r2, #0
 8009280:	613b      	str	r3, [r7, #16]
 8009282:	617a      	str	r2, [r7, #20]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800928a:	f04f 0b00 	mov.w	fp, #0
 800928e:	4652      	mov	r2, sl
 8009290:	465b      	mov	r3, fp
 8009292:	f04f 0000 	mov.w	r0, #0
 8009296:	f04f 0100 	mov.w	r1, #0
 800929a:	0159      	lsls	r1, r3, #5
 800929c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092a0:	0150      	lsls	r0, r2, #5
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	ebb2 080a 	subs.w	r8, r2, sl
 80092aa:	eb63 090b 	sbc.w	r9, r3, fp
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092c2:	ebb2 0408 	subs.w	r4, r2, r8
 80092c6:	eb63 0509 	sbc.w	r5, r3, r9
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	00eb      	lsls	r3, r5, #3
 80092d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092d8:	00e2      	lsls	r2, r4, #3
 80092da:	4614      	mov	r4, r2
 80092dc:	461d      	mov	r5, r3
 80092de:	eb14 030a 	adds.w	r3, r4, sl
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	eb45 030b 	adc.w	r3, r5, fp
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092f6:	4629      	mov	r1, r5
 80092f8:	028b      	lsls	r3, r1, #10
 80092fa:	4621      	mov	r1, r4
 80092fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009300:	4621      	mov	r1, r4
 8009302:	028a      	lsls	r2, r1, #10
 8009304:	4610      	mov	r0, r2
 8009306:	4619      	mov	r1, r3
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930a:	2200      	movs	r2, #0
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	60fa      	str	r2, [r7, #12]
 8009310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009314:	f7f7 fcd0 	bl	8000cb8 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4613      	mov	r3, r2
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009320:	4b0b      	ldr	r3, [pc, #44]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x180>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	0c1b      	lsrs	r3, r3, #16
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	3301      	adds	r3, #1
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800933a:	e002      	b.n	8009342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800933c:	4b05      	ldr	r3, [pc, #20]	@ (8009354 <HAL_RCC_GetSysClockFreq+0x184>)
 800933e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009344:	4618      	mov	r0, r3
 8009346:	3740      	adds	r7, #64	@ 0x40
 8009348:	46bd      	mov	sp, r7
 800934a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800934e:	bf00      	nop
 8009350:	40023800 	.word	0x40023800
 8009354:	00f42400 	.word	0x00f42400
 8009358:	017d7840 	.word	0x017d7840

0800935c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009360:	4b03      	ldr	r3, [pc, #12]	@ (8009370 <HAL_RCC_GetHCLKFreq+0x14>)
 8009362:	681b      	ldr	r3, [r3, #0]
}
 8009364:	4618      	mov	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	20000010 	.word	0x20000010

08009374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009378:	f7ff fff0 	bl	800935c <HAL_RCC_GetHCLKFreq>
 800937c:	4602      	mov	r2, r0
 800937e:	4b05      	ldr	r3, [pc, #20]	@ (8009394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	0a9b      	lsrs	r3, r3, #10
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	4903      	ldr	r1, [pc, #12]	@ (8009398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800938a:	5ccb      	ldrb	r3, [r1, r3]
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009390:	4618      	mov	r0, r3
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40023800 	.word	0x40023800
 8009398:	08024fa4 	.word	0x08024fa4

0800939c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093a0:	f7ff ffdc 	bl	800935c <HAL_RCC_GetHCLKFreq>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	0b5b      	lsrs	r3, r3, #13
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	4903      	ldr	r1, [pc, #12]	@ (80093c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093b2:	5ccb      	ldrb	r3, [r1, r3]
 80093b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40023800 	.word	0x40023800
 80093c0:	08024fa4 	.word	0x08024fa4

080093c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d105      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d035      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093ec:	4b67      	ldr	r3, [pc, #412]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093f2:	f7fa fe83 	bl	80040fc <HAL_GetTick>
 80093f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093f8:	e008      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093fa:	f7fa fe7f 	bl	80040fc <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d901      	bls.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e0ba      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800940c:	4b60      	ldr	r3, [pc, #384]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1f0      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	019a      	lsls	r2, r3, #6
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	071b      	lsls	r3, r3, #28
 8009424:	495a      	ldr	r1, [pc, #360]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800942c:	4b57      	ldr	r3, [pc, #348]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800942e:	2201      	movs	r2, #1
 8009430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009432:	f7fa fe63 	bl	80040fc <HAL_GetTick>
 8009436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009438:	e008      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800943a:	f7fa fe5f 	bl	80040fc <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e09a      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800944c:	4b50      	ldr	r3, [pc, #320]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0f0      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 8083 	beq.w	800956c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	4b49      	ldr	r3, [pc, #292]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	4a48      	ldr	r2, [pc, #288]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009474:	6413      	str	r3, [r2, #64]	@ 0x40
 8009476:	4b46      	ldr	r3, [pc, #280]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009482:	4b44      	ldr	r3, [pc, #272]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a43      	ldr	r2, [pc, #268]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800948c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800948e:	f7fa fe35 	bl	80040fc <HAL_GetTick>
 8009492:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009494:	e008      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009496:	f7fa fe31 	bl	80040fc <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d901      	bls.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e06c      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094a8:	4b3a      	ldr	r3, [pc, #232]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0f0      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094b4:	4b36      	ldr	r3, [pc, #216]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d02f      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d028      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094de:	2201      	movs	r2, #1
 80094e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094e2:	4b2d      	ldr	r3, [pc, #180]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80094e8:	4a29      	ldr	r2, [pc, #164]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80094ee:	4b28      	ldr	r3, [pc, #160]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d114      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80094fa:	f7fa fdff 	bl	80040fc <HAL_GetTick>
 80094fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009500:	e00a      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009502:	f7fa fdfb 	bl	80040fc <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009510:	4293      	cmp	r3, r2
 8009512:	d901      	bls.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e034      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009518:	4b1d      	ldr	r3, [pc, #116]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0ee      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800952c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009530:	d10d      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009532:	4b17      	ldr	r3, [pc, #92]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009546:	4912      	ldr	r1, [pc, #72]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009548:	4313      	orrs	r3, r2
 800954a:	608b      	str	r3, [r1, #8]
 800954c:	e005      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800954e:	4b10      	ldr	r3, [pc, #64]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	4a0f      	ldr	r2, [pc, #60]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009554:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009558:	6093      	str	r3, [r2, #8]
 800955a:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800955c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009566:	490a      	ldr	r1, [pc, #40]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009568:	4313      	orrs	r3, r2
 800956a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7c1a      	ldrb	r2, [r3, #16]
 800957c:	4b07      	ldr	r3, [pc, #28]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800957e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	42470068 	.word	0x42470068
 8009590:	40023800 	.word	0x40023800
 8009594:	40007000 	.word	0x40007000
 8009598:	42470e40 	.word	0x42470e40
 800959c:	424711e0 	.word	0x424711e0

080095a0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095a6:	f7fa fda9 	bl	80040fc <HAL_GetTick>
 80095aa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80095ac:	4b5d      	ldr	r3, [pc, #372]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5c      	ldr	r2, [pc, #368]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095b8:	e008      	b.n	80095cc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095ba:	f7fa fd9f 	bl	80040fc <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d901      	bls.n	80095cc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e0a7      	b.n	800971c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095cc:	4b55      	ldr	r3, [pc, #340]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0f0      	beq.n	80095ba <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80095d8:	4b52      	ldr	r3, [pc, #328]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a51      	ldr	r2, [pc, #324]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80095de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095e4:	f7fa fd8a 	bl	80040fc <HAL_GetTick>
 80095e8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80095ea:	4b4e      	ldr	r3, [pc, #312]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80095f0:	e00a      	b.n	8009608 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f2:	f7fa fd83 	bl	80040fc <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009600:	4293      	cmp	r3, r2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e089      	b.n	800971c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009608:	4b46      	ldr	r3, [pc, #280]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f003 030c 	and.w	r3, r3, #12
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1ee      	bne.n	80095f2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009614:	f7fa fd72 	bl	80040fc <HAL_GetTick>
 8009618:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800961a:	4b42      	ldr	r3, [pc, #264]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a41      	ldr	r2, [pc, #260]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 8009620:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009624:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009626:	e008      	b.n	800963a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009628:	f7fa fd68 	bl	80040fc <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	2b64      	cmp	r3, #100	@ 0x64
 8009634:	d901      	bls.n	800963a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e070      	b.n	800971c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800963a:	4b3a      	ldr	r3, [pc, #232]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1f0      	bne.n	8009628 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009646:	f7fa fd59 	bl	80040fc <HAL_GetTick>
 800964a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800964c:	4b35      	ldr	r3, [pc, #212]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a34      	ldr	r2, [pc, #208]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 8009652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009656:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009658:	e008      	b.n	800966c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800965a:	f7fa fd4f 	bl	80040fc <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	2b02      	cmp	r3, #2
 8009666:	d901      	bls.n	800966c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e057      	b.n	800971c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800966c:	4b2d      	ldr	r3, [pc, #180]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1f0      	bne.n	800965a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009678:	f7fa fd40 	bl	80040fc <HAL_GetTick>
 800967c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800967e:	4b29      	ldr	r3, [pc, #164]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a28      	ldr	r2, [pc, #160]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 8009684:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009688:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800968a:	e008      	b.n	800969e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800968c:	f7fa fd36 	bl	80040fc <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	2b02      	cmp	r3, #2
 8009698:	d901      	bls.n	800969e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e03e      	b.n	800971c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800969e:	4b21      	ldr	r3, [pc, #132]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1f0      	bne.n	800968c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80096aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009728 <HAL_RCC_DeInit+0x188>)
 80096ae:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80096b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096b2:	4a1e      	ldr	r2, [pc, #120]	@ (800972c <HAL_RCC_DeInit+0x18c>)
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80096b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	4a19      	ldr	r2, [pc, #100]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096be:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80096c2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80096c4:	4b17      	ldr	r3, [pc, #92]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	4a16      	ldr	r2, [pc, #88]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ce:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80096d0:	4b14      	ldr	r3, [pc, #80]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	4a13      	ldr	r2, [pc, #76]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096d6:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80096da:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80096dc:	4b11      	ldr	r3, [pc, #68]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	4a10      	ldr	r2, [pc, #64]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096e6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80096e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096ee:	f023 0301 	bic.w	r3, r3, #1
 80096f2:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80096f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009724 <HAL_RCC_DeInit+0x184>)
 80096fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096fe:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8009700:	4b0b      	ldr	r3, [pc, #44]	@ (8009730 <HAL_RCC_DeInit+0x190>)
 8009702:	4a0c      	ldr	r2, [pc, #48]	@ (8009734 <HAL_RCC_DeInit+0x194>)
 8009704:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <HAL_RCC_DeInit+0x198>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f7fa fcb2 	bl	8004074 <HAL_InitTick>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800971a:	2300      	movs	r3, #0
  }
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40023800 	.word	0x40023800
 8009728:	04003010 	.word	0x04003010
 800972c:	20003000 	.word	0x20003000
 8009730:	20000010 	.word	0x20000010
 8009734:	00f42400 	.word	0x00f42400
 8009738:	20000014 	.word	0x20000014

0800973c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e073      	b.n	800983a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7f5b      	ldrb	r3, [r3, #29]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d105      	bne.n	8009768 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fa f87e 	bl	8003864 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b10      	cmp	r3, #16
 800977a:	d055      	beq.n	8009828 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	22ca      	movs	r2, #202	@ 0xca
 8009782:	625a      	str	r2, [r3, #36]	@ 0x24
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2253      	movs	r2, #83	@ 0x53
 800978a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fbd3 	bl	8009f38 <RTC_EnterInitMode>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d12c      	bne.n	80097f6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80097aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6899      	ldr	r1, [r3, #8]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68d2      	ldr	r2, [r2, #12]
 80097d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6919      	ldr	r1, [r3, #16]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	041a      	lsls	r2, r3, #16
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fbda 	bl	8009fa6 <RTC_ExitInitMode>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d110      	bne.n	800981e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800980a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	22ff      	movs	r2, #255	@ 0xff
 8009824:	625a      	str	r2, [r3, #36]	@ 0x24
 8009826:	e001      	b.n	800982c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009842:	b590      	push	{r4, r7, lr}
 8009844:	b087      	sub	sp, #28
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	7f1b      	ldrb	r3, [r3, #28]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <HAL_RTC_SetTime+0x1c>
 800985a:	2302      	movs	r3, #2
 800985c:	e087      	b.n	800996e <HAL_RTC_SetTime+0x12c>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2202      	movs	r2, #2
 8009868:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d126      	bne.n	80098be <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fbb1 	bl	8009ff0 <RTC_ByteToBcd2>
 800988e:	4603      	mov	r3, r0
 8009890:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fbaa 	bl	8009ff0 <RTC_ByteToBcd2>
 800989c:	4603      	mov	r3, r0
 800989e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098a0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	789b      	ldrb	r3, [r3, #2]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fba2 	bl	8009ff0 <RTC_ByteToBcd2>
 80098ac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	78db      	ldrb	r3, [r3, #3]
 80098b6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098b8:	4313      	orrs	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	e018      	b.n	80098f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d102      	bne.n	80098d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2200      	movs	r2, #0
 80098d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	785b      	ldrb	r3, [r3, #1]
 80098dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098de:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	78db      	ldrb	r3, [r3, #3]
 80098ea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	22ca      	movs	r2, #202	@ 0xca
 80098f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2253      	movs	r2, #83	@ 0x53
 80098fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 fb19 	bl	8009f38 <RTC_EnterInitMode>
 8009906:	4603      	mov	r3, r0
 8009908:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800990a:	7cfb      	ldrb	r3, [r7, #19]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d120      	bne.n	8009952 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800991a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800991e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800992e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6899      	ldr	r1, [r3, #8]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	431a      	orrs	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fb2c 	bl	8009fa6 <RTC_ExitInitMode>
 800994e:	4603      	mov	r3, r0
 8009950:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009952:	7cfb      	ldrb	r3, [r7, #19]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d102      	bne.n	800995e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2201      	movs	r2, #1
 800995c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	22ff      	movs	r2, #255	@ 0xff
 8009964:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	771a      	strb	r2, [r3, #28]

  return status;
 800996c:	7cfb      	ldrb	r3, [r7, #19]
}
 800996e:	4618      	mov	r0, r3
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	bd90      	pop	{r4, r7, pc}

08009976 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b086      	sub	sp, #24
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80099a8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80099ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	0c1b      	lsrs	r3, r3, #16
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	0d9b      	lsrs	r3, r3, #22
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d11a      	bne.n	8009a28 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fb18 	bl	800a02c <RTC_Bcd2ToByte>
 80099fc:	4603      	mov	r3, r0
 80099fe:	461a      	mov	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fb0f 	bl	800a02c <RTC_Bcd2ToByte>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	789b      	ldrb	r3, [r3, #2]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fb06 	bl	800a02c <RTC_Bcd2ToByte>
 8009a20:	4603      	mov	r3, r0
 8009a22:	461a      	mov	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a32:	b590      	push	{r4, r7, lr}
 8009a34:	b087      	sub	sp, #28
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	7f1b      	ldrb	r3, [r3, #28]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <HAL_RTC_SetDate+0x1c>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e071      	b.n	8009b32 <HAL_RTC_SetDate+0x100>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2202      	movs	r2, #2
 8009a58:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10e      	bne.n	8009a7e <HAL_RTC_SetDate+0x4c>
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	785b      	ldrb	r3, [r3, #1]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	f023 0310 	bic.w	r3, r3, #16
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	330a      	adds	r3, #10
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d11c      	bne.n	8009abe <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	78db      	ldrb	r3, [r3, #3]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fab1 	bl	8009ff0 <RTC_ByteToBcd2>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 faaa 	bl	8009ff0 <RTC_ByteToBcd2>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aa0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	789b      	ldrb	r3, [r3, #2]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 faa2 	bl	8009ff0 <RTC_ByteToBcd2>
 8009aac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009aae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e00e      	b.n	8009adc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	78db      	ldrb	r3, [r3, #3]
 8009ac2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009aca:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ad0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	22ca      	movs	r2, #202	@ 0xca
 8009ae2:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2253      	movs	r2, #83	@ 0x53
 8009aea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fa23 	bl	8009f38 <RTC_EnterInitMode>
 8009af2:	4603      	mov	r3, r0
 8009af4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009af6:	7cfb      	ldrb	r3, [r7, #19]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10c      	bne.n	8009b16 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b0a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 fa4a 	bl	8009fa6 <RTC_ExitInitMode>
 8009b12:	4603      	mov	r3, r0
 8009b14:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b16:	7cfb      	ldrb	r3, [r7, #19]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	22ff      	movs	r2, #255	@ 0xff
 8009b28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	771a      	strb	r2, [r3, #28]

  return status;
 8009b30:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd90      	pop	{r4, r7, pc}

08009b3a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b086      	sub	sp, #24
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	0a1b      	lsrs	r3, r3, #8
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	f003 031f 	and.w	r3, r3, #31
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	0b5b      	lsrs	r3, r3, #13
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d11a      	bne.n	8009bce <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	78db      	ldrb	r3, [r3, #3]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fa45 	bl	800a02c <RTC_Bcd2ToByte>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fa3c 	bl	800a02c <RTC_Bcd2ToByte>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	789b      	ldrb	r3, [r3, #2]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fa33 	bl	800a02c <RTC_Bcd2ToByte>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b089      	sub	sp, #36	@ 0x24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009be4:	4b9b      	ldr	r3, [pc, #620]	@ (8009e54 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a9b      	ldr	r2, [pc, #620]	@ (8009e58 <HAL_RTC_SetAlarm_IT+0x280>)
 8009bea:	fba2 2303 	umull	r2, r3, r2, r3
 8009bee:	0adb      	lsrs	r3, r3, #11
 8009bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009bf4:	fb02 f303 	mul.w	r3, r2, r3
 8009bf8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	7f1b      	ldrb	r3, [r3, #28]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_RTC_SetAlarm_IT+0x36>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e11e      	b.n	8009e4c <HAL_RTC_SetAlarm_IT+0x274>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2201      	movs	r2, #1
 8009c12:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2202      	movs	r2, #2
 8009c18:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d137      	bne.n	8009c90 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2200      	movs	r2, #0
 8009c32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f9d9 	bl	8009ff0 <RTC_ByteToBcd2>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f9d2 	bl	8009ff0 <RTC_ByteToBcd2>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	789b      	ldrb	r3, [r3, #2]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f9ca 	bl	8009ff0 <RTC_ByteToBcd2>
 8009c5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	78db      	ldrb	r3, [r3, #3]
 8009c66:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f9bc 	bl	8009ff0 <RTC_ByteToBcd2>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e023      	b.n	8009cd8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	785b      	ldrb	r3, [r3, #1]
 8009cae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cb0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	78db      	ldrb	r3, [r3, #3]
 8009cbc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cbe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cc8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cce:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	22ca      	movs	r2, #202	@ 0xca
 8009cea:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2253      	movs	r2, #83	@ 0x53
 8009cf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cfc:	d142      	bne.n	8009d84 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d0c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009d1e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	22ff      	movs	r2, #255	@ 0xff
 8009d32:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2203      	movs	r2, #3
 8009d38:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e083      	b.n	8009e4c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0e6      	beq.n	8009d20 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d70:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d80:	609a      	str	r2, [r3, #8]
 8009d82:	e04c      	b.n	8009e1e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009d92:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009da4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009da6:	4b2b      	ldr	r3, [pc, #172]	@ (8009e54 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a2b      	ldr	r2, [pc, #172]	@ (8009e58 <HAL_RTC_SetAlarm_IT+0x280>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	0adb      	lsrs	r3, r3, #11
 8009db2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009db6:	fb02 f303 	mul.w	r3, r2, r3
 8009dba:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10b      	bne.n	8009de0 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	22ff      	movs	r2, #255	@ 0xff
 8009dce:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e035      	b.n	8009e4c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0e6      	beq.n	8009dbc <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69fa      	ldr	r2, [r7, #28]
 8009df4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e0c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e1c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009e5c <HAL_RTC_SetAlarm_IT+0x284>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a0e      	ldr	r2, [pc, #56]	@ (8009e5c <HAL_RTC_SetAlarm_IT+0x284>)
 8009e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e28:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e5c <HAL_RTC_SetAlarm_IT+0x284>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8009e5c <HAL_RTC_SetAlarm_IT+0x284>)
 8009e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e34:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	22ff      	movs	r2, #255	@ 0xff
 8009e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3724      	adds	r7, #36	@ 0x24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	20000010 	.word	0x20000010
 8009e58:	10624dd3 	.word	0x10624dd3
 8009e5c:	40013c00 	.word	0x40013c00

08009e60 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009e68:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009e6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009e6e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d012      	beq.n	8009ea4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009e9c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7f9 fbb4 	bl	800360c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d012      	beq.n	8009ed8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009ed0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f8fa 	bl	800a0cc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	775a      	strb	r2, [r3, #29]
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	40013c00 	.word	0x40013c00

08009eec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a0d      	ldr	r2, [pc, #52]	@ (8009f34 <HAL_RTC_WaitForSynchro+0x48>)
 8009efe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f00:	f7fa f8fc 	bl	80040fc <HAL_GetTick>
 8009f04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f06:	e009      	b.n	8009f1c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f08:	f7fa f8f8 	bl	80040fc <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f16:	d901      	bls.n	8009f1c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e007      	b.n	8009f2c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0ee      	beq.n	8009f08 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	00013f5f 	.word	0x00013f5f

08009f38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d122      	bne.n	8009f9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009f64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f66:	f7fa f8c9 	bl	80040fc <HAL_GetTick>
 8009f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f6c:	e00c      	b.n	8009f88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f6e:	f7fa f8c5 	bl	80040fc <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f7c:	d904      	bls.n	8009f88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2204      	movs	r2, #4
 8009f82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d102      	bne.n	8009f9c <RTC_EnterInitMode+0x64>
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d1e8      	bne.n	8009f6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fc0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f003 0320 	and.w	r3, r3, #32
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ff8b 	bl	8009eec <HAL_RTC_WaitForSynchro>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2204      	movs	r2, #4
 8009fe0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009ffe:	e005      	b.n	800a00c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	3b0a      	subs	r3, #10
 800a00a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	2b09      	cmp	r3, #9
 800a010:	d8f6      	bhi.n	800a000 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	b2db      	uxtb	r3, r3
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	091b      	lsrs	r3, r3, #4
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	461a      	mov	r2, r3
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	f003 030f 	and.w	r3, r3, #15
 800a056:	b2db      	uxtb	r3, r3
 800a058:	4413      	add	r3, r2
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3350      	adds	r3, #80	@ 0x50
 800a07e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4413      	add	r3, r2
 800a088:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	601a      	str	r2, [r3, #0]
}
 800a090:	bf00      	nop
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3350      	adds	r3, #80	@ 0x50
 800a0b0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e022      	b.n	800a138 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d105      	bne.n	800a10a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7f9 fbe1 	bl	80038cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2203      	movs	r2, #3
 800a10e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f814 	bl	800a140 <HAL_SD_InitCard>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e00a      	b.n	800a138 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a140:	b5b0      	push	{r4, r5, r7, lr}
 800a142:	b08e      	sub	sp, #56	@ 0x38
 800a144:	af04      	add	r7, sp, #16
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a148:	2300      	movs	r3, #0
 800a14a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a158:	2300      	movs	r3, #0
 800a15a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a15c:	2376      	movs	r3, #118	@ 0x76
 800a15e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681d      	ldr	r5, [r3, #0]
 800a164:	466c      	mov	r4, sp
 800a166:	f107 0314 	add.w	r3, r7, #20
 800a16a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a16e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a178:	4628      	mov	r0, r5
 800a17a:	f003 f8ad 	bl	800d2d8 <SDIO_Init>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e04f      	b.n	800a230 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a190:	4b29      	ldr	r3, [pc, #164]	@ (800a238 <HAL_SD_InitCard+0xf8>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f003 f8e5 	bl	800d36a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a1a0:	4b25      	ldr	r3, [pc, #148]	@ (800a238 <HAL_SD_InitCard+0xf8>)
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a1a6:	2002      	movs	r0, #2
 800a1a8:	f7f9 ffb4 	bl	8004114 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fe79 	bl	800aea4 <SD_PowerON>
 800a1b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00b      	beq.n	800a1d2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e02e      	b.n	800a230 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fd98 	bl	800ad08 <SD_InitCard>
 800a1d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00b      	beq.n	800a1f8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e01b      	b.n	800a230 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a200:	4618      	mov	r0, r3
 800a202:	f003 f944 	bl	800d48e <SDMMC_CmdBlockLength>
 800a206:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00f      	beq.n	800a22e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a0a      	ldr	r2, [pc, #40]	@ (800a23c <HAL_SD_InitCard+0xfc>)
 800a214:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e000      	b.n	800a230 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3728      	adds	r7, #40	@ 0x28
 800a234:	46bd      	mov	sp, r7
 800a236:	bdb0      	pop	{r4, r5, r7, pc}
 800a238:	422580a0 	.word	0x422580a0
 800a23c:	004005ff 	.word	0x004005ff

0800a240 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b092      	sub	sp, #72	@ 0x48
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a24e:	f7f9 ff55 	bl	80040fc <HAL_GetTick>
 800a252:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d107      	bne.n	800a272 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a266:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e1c5      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	f040 81b8 	bne.w	800a5f0 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	441a      	add	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a290:	429a      	cmp	r2, r3
 800a292:	d907      	bls.n	800a2a4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a298:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e1ac      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d002      	beq.n	800a2c2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	025b      	lsls	r3, r3, #9
 800a2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	025b      	lsls	r3, r3, #9
 800a2cc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2ce:	2390      	movs	r3, #144	@ 0x90
 800a2d0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f107 0214 	add.w	r2, r7, #20
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f003 f8a4 	bl	800d436 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d90a      	bls.n	800a30a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a300:	4618      	mov	r0, r3
 800a302:	f003 f908 	bl	800d516 <SDMMC_CmdReadMultiBlock>
 800a306:	6478      	str	r0, [r7, #68]	@ 0x44
 800a308:	e009      	b.n	800a31e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a316:	4618      	mov	r0, r3
 800a318:	f003 f8db 	bl	800d4d2 <SDMMC_CmdReadSingleBlock>
 800a31c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a320:	2b00      	cmp	r3, #0
 800a322:	d012      	beq.n	800a34a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a7e      	ldr	r2, [pc, #504]	@ (800a524 <HAL_SD_ReadBlocks+0x2e4>)
 800a32a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a332:	431a      	orrs	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e159      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a34e:	e061      	b.n	800a414 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d03c      	beq.n	800a3d8 <HAL_SD_ReadBlocks+0x198>
 800a35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a360:	2b00      	cmp	r3, #0
 800a362:	d039      	beq.n	800a3d8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a364:	2300      	movs	r3, #0
 800a366:	643b      	str	r3, [r7, #64]	@ 0x40
 800a368:	e033      	b.n	800a3d2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 ffdd 	bl	800d32e <SDIO_ReadFIFO>
 800a374:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a380:	3301      	adds	r3, #1
 800a382:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a386:	3b01      	subs	r3, #1
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a392:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	3301      	adds	r3, #1
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39c:	3b01      	subs	r3, #1
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a2:	0c1b      	lsrs	r3, r3, #16
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b8:	0e1b      	lsrs	r3, r3, #24
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d4:	2b07      	cmp	r3, #7
 800a3d6:	d9c8      	bls.n	800a36a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3d8:	f7f9 fe90 	bl	80040fc <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d902      	bls.n	800a3ee <HAL_SD_ReadBlocks+0x1ae>
 800a3e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d112      	bne.n	800a414 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a4c      	ldr	r2, [pc, #304]	@ (800a524 <HAL_SD_ReadBlocks+0x2e4>)
 800a3f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	e0f4      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a41a:	f240 332a 	movw	r3, #810	@ 0x32a
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d095      	beq.n	800a350 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d022      	beq.n	800a478 <HAL_SD_ReadBlocks+0x238>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d91f      	bls.n	800a478 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d01b      	beq.n	800a478 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f003 f8cd 	bl	800d5e4 <SDMMC_CmdStopTransfer>
 800a44a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d012      	beq.n	800a478 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a33      	ldr	r2, [pc, #204]	@ (800a524 <HAL_SD_ReadBlocks+0x2e4>)
 800a458:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a460:	431a      	orrs	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e0c2      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <HAL_SD_ReadBlocks+0x254>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a48c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a490:	2b00      	cmp	r3, #0
 800a492:	d012      	beq.n	800a4ba <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a22      	ldr	r2, [pc, #136]	@ (800a524 <HAL_SD_ReadBlocks+0x2e4>)
 800a49a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a0:	f043 0208 	orr.w	r2, r3, #8
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e0a1      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c0:	f003 0302 	and.w	r3, r3, #2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d012      	beq.n	800a4ee <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a15      	ldr	r2, [pc, #84]	@ (800a524 <HAL_SD_ReadBlocks+0x2e4>)
 800a4ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d4:	f043 0202 	orr.w	r2, r3, #2
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e087      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f4:	f003 0320 	and.w	r3, r3, #32
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d064      	beq.n	800a5c6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a08      	ldr	r2, [pc, #32]	@ (800a524 <HAL_SD_ReadBlocks+0x2e4>)
 800a502:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	f043 0220 	orr.w	r2, r3, #32
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e06d      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
 800a522:	bf00      	nop
 800a524:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f002 fefe 	bl	800d32e <SDIO_ReadFIFO>
 800a532:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a536:	b2da      	uxtb	r2, r3
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	3301      	adds	r3, #1
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a544:	3b01      	subs	r3, #1
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a550:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a554:	3301      	adds	r3, #1
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55a:	3b01      	subs	r3, #1
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a560:	0c1b      	lsrs	r3, r3, #16
 800a562:	b2da      	uxtb	r2, r3
 800a564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a566:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56a:	3301      	adds	r3, #1
 800a56c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a570:	3b01      	subs	r3, #1
 800a572:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a576:	0e1b      	lsrs	r3, r3, #24
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a580:	3301      	adds	r3, #1
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a586:	3b01      	subs	r3, #1
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a58a:	f7f9 fdb7 	bl	80040fc <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a596:	429a      	cmp	r2, r3
 800a598:	d902      	bls.n	800a5a0 <HAL_SD_ReadBlocks+0x360>
 800a59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d112      	bne.n	800a5c6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a18      	ldr	r2, [pc, #96]	@ (800a608 <HAL_SD_ReadBlocks+0x3c8>)
 800a5a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e01b      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <HAL_SD_ReadBlocks+0x39a>
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1a6      	bne.n	800a528 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a5e2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e006      	b.n	800a5fe <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
  }
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3748      	adds	r7, #72	@ 0x48
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	004005ff 	.word	0x004005ff

0800a60c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b092      	sub	sp, #72	@ 0x48
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a61a:	f7f9 fd6f 	bl	80040fc <HAL_GetTick>
 800a61e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d107      	bne.n	800a63e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a632:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e16d      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b01      	cmp	r3, #1
 800a648:	f040 8160 	bne.w	800a90c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	441a      	add	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d907      	bls.n	800a670 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a664:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e154      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2203      	movs	r2, #3
 800a674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2200      	movs	r2, #0
 800a67e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a684:	2b01      	cmp	r3, #1
 800a686:	d002      	beq.n	800a68e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68a:	025b      	lsls	r3, r3, #9
 800a68c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	025b      	lsls	r3, r3, #9
 800a698:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a69a:	2390      	movs	r3, #144	@ 0x90
 800a69c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f107 0218 	add.w	r2, r7, #24
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f002 febe 	bl	800d436 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d90a      	bls.n	800a6d6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f002 ff66 	bl	800d59e <SDMMC_CmdWriteMultiBlock>
 800a6d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6d4:	e009      	b.n	800a6ea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2210      	movs	r2, #16
 800a6da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 ff39 	bl	800d55a <SDMMC_CmdWriteSingleBlock>
 800a6e8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d012      	beq.n	800a716 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a8b      	ldr	r2, [pc, #556]	@ (800a924 <HAL_SD_WriteBlocks+0x318>)
 800a6f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6fe:	431a      	orrs	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e101      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a71a:	e065      	b.n	800a7e8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d040      	beq.n	800a7ac <HAL_SD_WriteBlocks+0x1a0>
 800a72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d03d      	beq.n	800a7ac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a730:	2300      	movs	r3, #0
 800a732:	643b      	str	r3, [r7, #64]	@ 0x40
 800a734:	e037      	b.n	800a7a6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73e:	3301      	adds	r3, #1
 800a740:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a744:	3b01      	subs	r3, #1
 800a746:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	021a      	lsls	r2, r3, #8
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	3301      	adds	r3, #1
 800a758:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75c:	3b01      	subs	r3, #1
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	041a      	lsls	r2, r3, #16
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4313      	orrs	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76e:	3301      	adds	r3, #1
 800a770:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a774:	3b01      	subs	r3, #1
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	061a      	lsls	r2, r3, #24
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a786:	3301      	adds	r3, #1
 800a788:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a78c:	3b01      	subs	r3, #1
 800a78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f107 0214 	add.w	r2, r7, #20
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f002 fdd4 	bl	800d348 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a8:	2b07      	cmp	r3, #7
 800a7aa:	d9c4      	bls.n	800a736 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a7ac:	f7f9 fca6 	bl	80040fc <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d902      	bls.n	800a7c2 <HAL_SD_WriteBlocks+0x1b6>
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d112      	bne.n	800a7e8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a57      	ldr	r2, [pc, #348]	@ (800a924 <HAL_SD_WriteBlocks+0x318>)
 800a7c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e098      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7ee:	f240 331a 	movw	r3, #794	@ 0x31a
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d091      	beq.n	800a71c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a802:	2b00      	cmp	r3, #0
 800a804:	d022      	beq.n	800a84c <HAL_SD_WriteBlocks+0x240>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d91f      	bls.n	800a84c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a810:	2b03      	cmp	r3, #3
 800a812:	d01b      	beq.n	800a84c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f002 fee3 	bl	800d5e4 <SDMMC_CmdStopTransfer>
 800a81e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a822:	2b00      	cmp	r3, #0
 800a824:	d012      	beq.n	800a84c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a3e      	ldr	r2, [pc, #248]	@ (800a924 <HAL_SD_WriteBlocks+0x318>)
 800a82c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a834:	431a      	orrs	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e066      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a852:	f003 0308 	and.w	r3, r3, #8
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <HAL_SD_WriteBlocks+0x25c>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a864:	2b00      	cmp	r3, #0
 800a866:	d012      	beq.n	800a88e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a2d      	ldr	r2, [pc, #180]	@ (800a924 <HAL_SD_WriteBlocks+0x318>)
 800a86e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a874:	f043 0208 	orr.w	r2, r3, #8
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e045      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d012      	beq.n	800a8c2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a20      	ldr	r2, [pc, #128]	@ (800a924 <HAL_SD_WriteBlocks+0x318>)
 800a8a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a8:	f043 0202 	orr.w	r2, r3, #2
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e02b      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c8:	f003 0310 	and.w	r3, r3, #16
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d012      	beq.n	800a8f6 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a13      	ldr	r2, [pc, #76]	@ (800a924 <HAL_SD_WriteBlocks+0x318>)
 800a8d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8dc:	f043 0210 	orr.w	r2, r3, #16
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e011      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a8fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	e006      	b.n	800a91a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a910:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
  }
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3748      	adds	r7, #72	@ 0x48
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	004005ff 	.word	0x004005ff

0800a928 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a936:	0f9b      	lsrs	r3, r3, #30
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a942:	0e9b      	lsrs	r3, r3, #26
 800a944:	b2db      	uxtb	r3, r3
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a954:	0e1b      	lsrs	r3, r3, #24
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0303 	and.w	r3, r3, #3
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a966:	0c1b      	lsrs	r3, r3, #16
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a972:	0a1b      	lsrs	r3, r3, #8
 800a974:	b2da      	uxtb	r2, r3
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a988:	0d1b      	lsrs	r3, r3, #20
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a994:	0c1b      	lsrs	r3, r3, #16
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9a6:	0bdb      	lsrs	r3, r3, #15
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9b8:	0b9b      	lsrs	r3, r3, #14
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9ca:	0b5b      	lsrs	r3, r3, #13
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9dc:	0b1b      	lsrs	r3, r3, #12
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d163      	bne.n	800aac0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9fc:	009a      	lsls	r2, r3, #2
 800a9fe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa02:	4013      	ands	r3, r2
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aa08:	0f92      	lsrs	r2, r2, #30
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa14:	0edb      	lsrs	r3, r3, #27
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa26:	0e1b      	lsrs	r3, r3, #24
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa38:	0d5b      	lsrs	r3, r3, #21
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa4a:	0c9b      	lsrs	r3, r3, #18
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0307 	and.w	r3, r3, #7
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa5c:	0bdb      	lsrs	r3, r3, #15
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	7e1b      	ldrb	r3, [r3, #24]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	f003 0307 	and.w	r3, r3, #7
 800aa7e:	3302      	adds	r3, #2
 800aa80:	2201      	movs	r2, #1
 800aa82:	fa02 f303 	lsl.w	r3, r2, r3
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800aa8a:	fb03 f202 	mul.w	r2, r3, r2
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	7a1b      	ldrb	r3, [r3, #8]
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	409a      	lsls	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800aaac:	0a52      	lsrs	r2, r2, #9
 800aaae:	fb03 f202 	mul.w	r2, r3, r2
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aabc:	661a      	str	r2, [r3, #96]	@ 0x60
 800aabe:	e031      	b.n	800ab24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d11d      	bne.n	800ab04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aacc:	041b      	lsls	r3, r3, #16
 800aace:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aad6:	0c1b      	lsrs	r3, r3, #16
 800aad8:	431a      	orrs	r2, r3
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	3301      	adds	r3, #1
 800aae4:	029a      	lsls	r2, r3, #10
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaf8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab02:	e00f      	b.n	800ab24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a58      	ldr	r2, [pc, #352]	@ (800ac6c <HAL_SD_GetCardCSD+0x344>)
 800ab0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e09d      	b.n	800ac60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab28:	0b9b      	lsrs	r3, r3, #14
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3a:	09db      	lsrs	r3, r3, #7
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab5c:	0fdb      	lsrs	r3, r3, #31
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab68:	0f5b      	lsrs	r3, r3, #29
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 0303 	and.w	r3, r3, #3
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab7a:	0e9b      	lsrs	r3, r3, #26
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f003 0307 	and.w	r3, r3, #7
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab8c:	0d9b      	lsrs	r3, r3, #22
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab9e:	0d5b      	lsrs	r3, r3, #21
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abba:	0c1b      	lsrs	r3, r3, #16
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abce:	0bdb      	lsrs	r3, r3, #15
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abe2:	0b9b      	lsrs	r3, r3, #14
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	b2da      	uxtb	r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf6:	0b5b      	lsrs	r3, r3, #13
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac0a:	0b1b      	lsrs	r3, r3, #12
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1e:	0a9b      	lsrs	r3, r3, #10
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac32:	0a1b      	lsrs	r3, r3, #8
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac46:	085b      	lsrs	r3, r3, #1
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	004005ff 	.word	0x004005ff

0800ac70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800acd4:	f107 030c 	add.w	r3, r7, #12
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f970 	bl	800afc0 <SD_SendStatus>
 800ace0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	431a      	orrs	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	0a5b      	lsrs	r3, r3, #9
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800acfe:	693b      	ldr	r3, [r7, #16]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad08:	b5b0      	push	{r4, r5, r7, lr}
 800ad0a:	b094      	sub	sp, #80	@ 0x50
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad10:	2301      	movs	r3, #1
 800ad12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f002 fb34 	bl	800d386 <SDIO_GetPowerState>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad28:	e0b8      	b.n	800ae9c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d02f      	beq.n	800ad92 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 fd1b 	bl	800d772 <SDMMC_CmdSendCID>
 800ad3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad46:	e0a9      	b.n	800ae9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f002 fb5e 	bl	800d410 <SDIO_GetResponse>
 800ad54:	4602      	mov	r2, r0
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2104      	movs	r1, #4
 800ad60:	4618      	mov	r0, r3
 800ad62:	f002 fb55 	bl	800d410 <SDIO_GetResponse>
 800ad66:	4602      	mov	r2, r0
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2108      	movs	r1, #8
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 fb4c 	bl	800d410 <SDIO_GetResponse>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	210c      	movs	r1, #12
 800ad84:	4618      	mov	r0, r3
 800ad86:	f002 fb43 	bl	800d410 <SDIO_GetResponse>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad96:	2b03      	cmp	r3, #3
 800ad98:	d00d      	beq.n	800adb6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f107 020e 	add.w	r2, r7, #14
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f002 fd21 	bl	800d7ec <SDMMC_CmdSetRelAdd>
 800adaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <SD_InitCard+0xae>
    {
      return errorstate;
 800adb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb4:	e072      	b.n	800ae9c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d036      	beq.n	800ae2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adbe:	89fb      	ldrh	r3, [r7, #14]
 800adc0:	461a      	mov	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adce:	041b      	lsls	r3, r3, #16
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f002 fceb 	bl	800d7ae <SDMMC_CmdSendCSD>
 800add8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ade0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade2:	e05b      	b.n	800ae9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2100      	movs	r1, #0
 800adea:	4618      	mov	r0, r3
 800adec:	f002 fb10 	bl	800d410 <SDIO_GetResponse>
 800adf0:	4602      	mov	r2, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2104      	movs	r1, #4
 800adfc:	4618      	mov	r0, r3
 800adfe:	f002 fb07 	bl	800d410 <SDIO_GetResponse>
 800ae02:	4602      	mov	r2, r0
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2108      	movs	r1, #8
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f002 fafe 	bl	800d410 <SDIO_GetResponse>
 800ae14:	4602      	mov	r2, r0
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	210c      	movs	r1, #12
 800ae20:	4618      	mov	r0, r3
 800ae22:	f002 faf5 	bl	800d410 <SDIO_GetResponse>
 800ae26:	4602      	mov	r2, r0
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2104      	movs	r1, #4
 800ae32:	4618      	mov	r0, r3
 800ae34:	f002 faec 	bl	800d410 <SDIO_GetResponse>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	0d1a      	lsrs	r2, r3, #20
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae40:	f107 0310 	add.w	r3, r7, #16
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff fd6e 	bl	800a928 <HAL_SD_GetCardCSD>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae56:	e021      	b.n	800ae9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6819      	ldr	r1, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	2200      	movs	r2, #0
 800ae64:	461c      	mov	r4, r3
 800ae66:	4615      	mov	r5, r2
 800ae68:	4622      	mov	r2, r4
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	4608      	mov	r0, r1
 800ae6e:	f002 fbdb 	bl	800d628 <SDMMC_CmdSelDesel>
 800ae72:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <SD_InitCard+0x176>
  {
    return errorstate;
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae7c:	e00e      	b.n	800ae9c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681d      	ldr	r5, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	466c      	mov	r4, sp
 800ae86:	f103 0210 	add.w	r2, r3, #16
 800ae8a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae90:	3304      	adds	r3, #4
 800ae92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae94:	4628      	mov	r0, r5
 800ae96:	f002 fa1f 	bl	800d2d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3740      	adds	r7, #64	@ 0x40
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bdb0      	pop	{r4, r5, r7, pc}

0800aea4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f002 fbd6 	bl	800d66e <SDMMC_CmdGoIdleState>
 800aec2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <SD_PowerON+0x2a>
  {
    return errorstate;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	e072      	b.n	800afb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f002 fbe9 	bl	800d6aa <SDMMC_CmdOperCond>
 800aed8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00d      	beq.n	800aefc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f002 fbbf 	bl	800d66e <SDMMC_CmdGoIdleState>
 800aef0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d004      	beq.n	800af02 <SD_PowerON+0x5e>
    {
      return errorstate;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	e05b      	b.n	800afb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af06:	2b01      	cmp	r3, #1
 800af08:	d137      	bne.n	800af7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2100      	movs	r1, #0
 800af10:	4618      	mov	r0, r3
 800af12:	f002 fbe9 	bl	800d6e8 <SDMMC_CmdAppCommand>
 800af16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d02d      	beq.n	800af7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af22:	e047      	b.n	800afb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f002 fbdc 	bl	800d6e8 <SDMMC_CmdAppCommand>
 800af30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <SD_PowerON+0x98>
    {
      return errorstate;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	e03b      	b.n	800afb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	491e      	ldr	r1, [pc, #120]	@ (800afbc <SD_PowerON+0x118>)
 800af42:	4618      	mov	r0, r3
 800af44:	f002 fbf2 	bl	800d72c <SDMMC_CmdAppOperCommand>
 800af48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af54:	e02e      	b.n	800afb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2100      	movs	r1, #0
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 fa57 	bl	800d410 <SDIO_GetResponse>
 800af62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	0fdb      	lsrs	r3, r3, #31
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <SD_PowerON+0xcc>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e000      	b.n	800af72 <SD_PowerON+0xce>
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]

    count++;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	3301      	adds	r3, #1
 800af78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af80:	4293      	cmp	r3, r2
 800af82:	d802      	bhi.n	800af8a <SD_PowerON+0xe6>
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0cc      	beq.n	800af24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af90:	4293      	cmp	r3, r2
 800af92:	d902      	bls.n	800af9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800af98:	e00c      	b.n	800afb4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	645a      	str	r2, [r3, #68]	@ 0x44
 800afaa:	e002      	b.n	800afb2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	c1100000 	.word	0xc1100000

0800afc0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800afd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afd4:	e018      	b.n	800b008 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afde:	041b      	lsls	r3, r3, #16
 800afe0:	4619      	mov	r1, r3
 800afe2:	4610      	mov	r0, r2
 800afe4:	f002 fc23 	bl	800d82e <SDMMC_CmdSendStatus>
 800afe8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	e009      	b.n	800b008 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f002 fa08 	bl	800d410 <SDIO_GetResponse>
 800b000:	4602      	mov	r2, r0
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e041      	b.n	800b0a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7f8 fcb0 	bl	800399c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4619      	mov	r1, r3
 800b04e:	4610      	mov	r0, r2
 800b050:	f000 fd18 	bl	800ba84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6a1a      	ldr	r2, [r3, #32]
 800b0c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10f      	bne.n	800b0ee <HAL_TIM_Base_DeInit+0x40>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6a1a      	ldr	r2, [r3, #32]
 800b0d4:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0d8:	4013      	ands	r3, r2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d107      	bne.n	800b0ee <HAL_TIM_Base_DeInit+0x40>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f022 0201 	bic.w	r2, r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7f8 fd14 	bl	8003b1c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d001      	beq.n	800b170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e03c      	b.n	800b1ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a1e      	ldr	r2, [pc, #120]	@ (800b1f8 <HAL_TIM_Base_Start+0xa0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d018      	beq.n	800b1b4 <HAL_TIM_Base_Start+0x5c>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18a:	d013      	beq.n	800b1b4 <HAL_TIM_Base_Start+0x5c>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1a      	ldr	r2, [pc, #104]	@ (800b1fc <HAL_TIM_Base_Start+0xa4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d00e      	beq.n	800b1b4 <HAL_TIM_Base_Start+0x5c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a19      	ldr	r2, [pc, #100]	@ (800b200 <HAL_TIM_Base_Start+0xa8>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d009      	beq.n	800b1b4 <HAL_TIM_Base_Start+0x5c>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a17      	ldr	r2, [pc, #92]	@ (800b204 <HAL_TIM_Base_Start+0xac>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d004      	beq.n	800b1b4 <HAL_TIM_Base_Start+0x5c>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a16      	ldr	r2, [pc, #88]	@ (800b208 <HAL_TIM_Base_Start+0xb0>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d111      	bne.n	800b1d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f003 0307 	and.w	r3, r3, #7
 800b1be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b06      	cmp	r3, #6
 800b1c4:	d010      	beq.n	800b1e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f042 0201 	orr.w	r2, r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d6:	e007      	b.n	800b1e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f042 0201 	orr.w	r2, r2, #1
 800b1e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	40010000 	.word	0x40010000
 800b1fc:	40000400 	.word	0x40000400
 800b200:	40000800 	.word	0x40000800
 800b204:	40000c00 	.word	0x40000c00
 800b208:	40014000 	.word	0x40014000

0800b20c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d001      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e044      	b.n	800b2ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68da      	ldr	r2, [r3, #12]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a1e      	ldr	r2, [pc, #120]	@ (800b2bc <HAL_TIM_Base_Start_IT+0xb0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d018      	beq.n	800b278 <HAL_TIM_Base_Start_IT+0x6c>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b24e:	d013      	beq.n	800b278 <HAL_TIM_Base_Start_IT+0x6c>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a1a      	ldr	r2, [pc, #104]	@ (800b2c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00e      	beq.n	800b278 <HAL_TIM_Base_Start_IT+0x6c>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a19      	ldr	r2, [pc, #100]	@ (800b2c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d009      	beq.n	800b278 <HAL_TIM_Base_Start_IT+0x6c>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a17      	ldr	r2, [pc, #92]	@ (800b2c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d004      	beq.n	800b278 <HAL_TIM_Base_Start_IT+0x6c>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a16      	ldr	r2, [pc, #88]	@ (800b2cc <HAL_TIM_Base_Start_IT+0xc0>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d111      	bne.n	800b29c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b06      	cmp	r3, #6
 800b288:	d010      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f042 0201 	orr.w	r2, r2, #1
 800b298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29a:	e007      	b.n	800b2ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0201 	orr.w	r2, r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	40010000 	.word	0x40010000
 800b2c0:	40000400 	.word	0x40000400
 800b2c4:	40000800 	.word	0x40000800
 800b2c8:	40000c00 	.word	0x40000c00
 800b2cc:	40014000 	.word	0x40014000

0800b2d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f022 0201 	bic.w	r2, r2, #1
 800b2e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6a1a      	ldr	r2, [r3, #32]
 800b2ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10f      	bne.n	800b318 <HAL_TIM_Base_Stop_IT+0x48>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6a1a      	ldr	r2, [r3, #32]
 800b2fe:	f240 4344 	movw	r3, #1092	@ 0x444
 800b302:	4013      	ands	r3, r2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d107      	bne.n	800b318 <HAL_TIM_Base_Stop_IT+0x48>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0201 	bic.w	r2, r2, #1
 800b316:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e041      	b.n	800b3c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d106      	bne.n	800b35a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f839 	bl	800b3cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2202      	movs	r2, #2
 800b35e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3304      	adds	r3, #4
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f000 fb89 	bl	800ba84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d109      	bne.n	800b404 <HAL_TIM_PWM_Start+0x24>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	bf14      	ite	ne
 800b3fc:	2301      	movne	r3, #1
 800b3fe:	2300      	moveq	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	e022      	b.n	800b44a <HAL_TIM_PWM_Start+0x6a>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b04      	cmp	r3, #4
 800b408:	d109      	bne.n	800b41e <HAL_TIM_PWM_Start+0x3e>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b01      	cmp	r3, #1
 800b414:	bf14      	ite	ne
 800b416:	2301      	movne	r3, #1
 800b418:	2300      	moveq	r3, #0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	e015      	b.n	800b44a <HAL_TIM_PWM_Start+0x6a>
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b08      	cmp	r3, #8
 800b422:	d109      	bne.n	800b438 <HAL_TIM_PWM_Start+0x58>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	bf14      	ite	ne
 800b430:	2301      	movne	r3, #1
 800b432:	2300      	moveq	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	e008      	b.n	800b44a <HAL_TIM_PWM_Start+0x6a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b01      	cmp	r3, #1
 800b442:	bf14      	ite	ne
 800b444:	2301      	movne	r3, #1
 800b446:	2300      	moveq	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e068      	b.n	800b524 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d104      	bne.n	800b462 <HAL_TIM_PWM_Start+0x82>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b460:	e013      	b.n	800b48a <HAL_TIM_PWM_Start+0xaa>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b04      	cmp	r3, #4
 800b466:	d104      	bne.n	800b472 <HAL_TIM_PWM_Start+0x92>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b470:	e00b      	b.n	800b48a <HAL_TIM_PWM_Start+0xaa>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b08      	cmp	r3, #8
 800b476:	d104      	bne.n	800b482 <HAL_TIM_PWM_Start+0xa2>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b480:	e003      	b.n	800b48a <HAL_TIM_PWM_Start+0xaa>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2202      	movs	r2, #2
 800b486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2201      	movs	r2, #1
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fda8 	bl	800bfe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a23      	ldr	r2, [pc, #140]	@ (800b52c <HAL_TIM_PWM_Start+0x14c>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d107      	bne.n	800b4b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a1d      	ldr	r2, [pc, #116]	@ (800b52c <HAL_TIM_PWM_Start+0x14c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d018      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x10e>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c4:	d013      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x10e>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a19      	ldr	r2, [pc, #100]	@ (800b530 <HAL_TIM_PWM_Start+0x150>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d00e      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x10e>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a17      	ldr	r2, [pc, #92]	@ (800b534 <HAL_TIM_PWM_Start+0x154>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d009      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x10e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a16      	ldr	r2, [pc, #88]	@ (800b538 <HAL_TIM_PWM_Start+0x158>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d004      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x10e>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a14      	ldr	r2, [pc, #80]	@ (800b53c <HAL_TIM_PWM_Start+0x15c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d111      	bne.n	800b512 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f003 0307 	and.w	r3, r3, #7
 800b4f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2b06      	cmp	r3, #6
 800b4fe:	d010      	beq.n	800b522 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f042 0201 	orr.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b510:	e007      	b.n	800b522 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f042 0201 	orr.w	r2, r2, #1
 800b520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	40010000 	.word	0x40010000
 800b530:	40000400 	.word	0x40000400
 800b534:	40000800 	.word	0x40000800
 800b538:	40000c00 	.word	0x40000c00
 800b53c:	40014000 	.word	0x40014000

0800b540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d020      	beq.n	800b5a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01b      	beq.n	800b5a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f06f 0202 	mvn.w	r2, #2
 800b574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	f003 0303 	and.w	r3, r3, #3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa5b 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b590:	e005      	b.n	800b59e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa4d 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fa5e 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f003 0304 	and.w	r3, r3, #4
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d020      	beq.n	800b5f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01b      	beq.n	800b5f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f06f 0204 	mvn.w	r2, #4
 800b5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fa35 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b5dc:	e005      	b.n	800b5ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa27 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fa38 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f003 0308 	and.w	r3, r3, #8
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d020      	beq.n	800b63c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f003 0308 	and.w	r3, r3, #8
 800b600:	2b00      	cmp	r3, #0
 800b602:	d01b      	beq.n	800b63c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f06f 0208 	mvn.w	r2, #8
 800b60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2204      	movs	r2, #4
 800b612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	f003 0303 	and.w	r3, r3, #3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fa0f 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b628:	e005      	b.n	800b636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fa01 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fa12 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 0310 	and.w	r3, r3, #16
 800b642:	2b00      	cmp	r3, #0
 800b644:	d020      	beq.n	800b688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f003 0310 	and.w	r3, r3, #16
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01b      	beq.n	800b688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f06f 0210 	mvn.w	r2, #16
 800b658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2208      	movs	r2, #8
 800b65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f9e9 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b674:	e005      	b.n	800b682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f9db 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f9ec 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00c      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f06f 0201 	mvn.w	r2, #1
 800b6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7f7 ff66 	bl	8003578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00c      	beq.n	800b6d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d007      	beq.n	800b6d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fd2a 	bl	800c124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d007      	beq.n	800b6f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f9bd 	bl	800ba6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00c      	beq.n	800b718 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f003 0320 	and.w	r3, r3, #32
 800b704:	2b00      	cmp	r3, #0
 800b706:	d007      	beq.n	800b718 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f06f 0220 	mvn.w	r2, #32
 800b710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fcfc 	bl	800c110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b736:	2b01      	cmp	r3, #1
 800b738:	d101      	bne.n	800b73e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b73a:	2302      	movs	r3, #2
 800b73c:	e0ae      	b.n	800b89c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b0c      	cmp	r3, #12
 800b74a:	f200 809f 	bhi.w	800b88c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b74e:	a201      	add	r2, pc, #4	@ (adr r2, 800b754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b754:	0800b789 	.word	0x0800b789
 800b758:	0800b88d 	.word	0x0800b88d
 800b75c:	0800b88d 	.word	0x0800b88d
 800b760:	0800b88d 	.word	0x0800b88d
 800b764:	0800b7c9 	.word	0x0800b7c9
 800b768:	0800b88d 	.word	0x0800b88d
 800b76c:	0800b88d 	.word	0x0800b88d
 800b770:	0800b88d 	.word	0x0800b88d
 800b774:	0800b80b 	.word	0x0800b80b
 800b778:	0800b88d 	.word	0x0800b88d
 800b77c:	0800b88d 	.word	0x0800b88d
 800b780:	0800b88d 	.word	0x0800b88d
 800b784:	0800b84b 	.word	0x0800b84b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fa04 	bl	800bb9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	699a      	ldr	r2, [r3, #24]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f042 0208 	orr.w	r2, r2, #8
 800b7a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	699a      	ldr	r2, [r3, #24]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f022 0204 	bic.w	r2, r2, #4
 800b7b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6999      	ldr	r1, [r3, #24]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	691a      	ldr	r2, [r3, #16]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	619a      	str	r2, [r3, #24]
      break;
 800b7c6:	e064      	b.n	800b892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68b9      	ldr	r1, [r7, #8]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fa4a 	bl	800bc68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	699a      	ldr	r2, [r3, #24]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	699a      	ldr	r2, [r3, #24]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6999      	ldr	r1, [r3, #24]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	021a      	lsls	r2, r3, #8
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	619a      	str	r2, [r3, #24]
      break;
 800b808:	e043      	b.n	800b892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	4618      	mov	r0, r3
 800b812:	f000 fa95 	bl	800bd40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	69da      	ldr	r2, [r3, #28]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0208 	orr.w	r2, r2, #8
 800b824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	69da      	ldr	r2, [r3, #28]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f022 0204 	bic.w	r2, r2, #4
 800b834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	69d9      	ldr	r1, [r3, #28]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	691a      	ldr	r2, [r3, #16]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	430a      	orrs	r2, r1
 800b846:	61da      	str	r2, [r3, #28]
      break;
 800b848:	e023      	b.n	800b892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	4618      	mov	r0, r3
 800b852:	f000 fadf 	bl	800be14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	69da      	ldr	r2, [r3, #28]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	69da      	ldr	r2, [r3, #28]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	69d9      	ldr	r1, [r3, #28]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	021a      	lsls	r2, r3, #8
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	61da      	str	r2, [r3, #28]
      break;
 800b88a:	e002      	b.n	800b892 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	75fb      	strb	r3, [r7, #23]
      break;
 800b890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d101      	bne.n	800b8c0 <HAL_TIM_ConfigClockSource+0x1c>
 800b8bc:	2302      	movs	r3, #2
 800b8be:	e0b4      	b.n	800ba2a <HAL_TIM_ConfigClockSource+0x186>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8f8:	d03e      	beq.n	800b978 <HAL_TIM_ConfigClockSource+0xd4>
 800b8fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8fe:	f200 8087 	bhi.w	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b906:	f000 8086 	beq.w	800ba16 <HAL_TIM_ConfigClockSource+0x172>
 800b90a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b90e:	d87f      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b910:	2b70      	cmp	r3, #112	@ 0x70
 800b912:	d01a      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0xa6>
 800b914:	2b70      	cmp	r3, #112	@ 0x70
 800b916:	d87b      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b918:	2b60      	cmp	r3, #96	@ 0x60
 800b91a:	d050      	beq.n	800b9be <HAL_TIM_ConfigClockSource+0x11a>
 800b91c:	2b60      	cmp	r3, #96	@ 0x60
 800b91e:	d877      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b920:	2b50      	cmp	r3, #80	@ 0x50
 800b922:	d03c      	beq.n	800b99e <HAL_TIM_ConfigClockSource+0xfa>
 800b924:	2b50      	cmp	r3, #80	@ 0x50
 800b926:	d873      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b928:	2b40      	cmp	r3, #64	@ 0x40
 800b92a:	d058      	beq.n	800b9de <HAL_TIM_ConfigClockSource+0x13a>
 800b92c:	2b40      	cmp	r3, #64	@ 0x40
 800b92e:	d86f      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b930:	2b30      	cmp	r3, #48	@ 0x30
 800b932:	d064      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15a>
 800b934:	2b30      	cmp	r3, #48	@ 0x30
 800b936:	d86b      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d060      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15a>
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d867      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d05c      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15a>
 800b944:	2b10      	cmp	r3, #16
 800b946:	d05a      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15a>
 800b948:	e062      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b95a:	f000 fb25 	bl	800bfa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b96c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	609a      	str	r2, [r3, #8]
      break;
 800b976:	e04f      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b988:	f000 fb0e 	bl	800bfa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b99a:	609a      	str	r2, [r3, #8]
      break;
 800b99c:	e03c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f000 fa82 	bl	800beb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2150      	movs	r1, #80	@ 0x50
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fadb 	bl	800bf72 <TIM_ITRx_SetConfig>
      break;
 800b9bc:	e02c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f000 faa1 	bl	800bf12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2160      	movs	r1, #96	@ 0x60
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 facb 	bl	800bf72 <TIM_ITRx_SetConfig>
      break;
 800b9dc:	e01c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f000 fa62 	bl	800beb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2140      	movs	r1, #64	@ 0x40
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fabb 	bl	800bf72 <TIM_ITRx_SetConfig>
      break;
 800b9fc:	e00c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f000 fab2 	bl	800bf72 <TIM_ITRx_SetConfig>
      break;
 800ba0e:	e003      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	73fb      	strb	r3, [r7, #15]
      break;
 800ba14:	e000      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba3a:	bf00      	nop
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba62:	bf00      	nop
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a3a      	ldr	r2, [pc, #232]	@ (800bb80 <TIM_Base_SetConfig+0xfc>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00f      	beq.n	800babc <TIM_Base_SetConfig+0x38>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baa2:	d00b      	beq.n	800babc <TIM_Base_SetConfig+0x38>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a37      	ldr	r2, [pc, #220]	@ (800bb84 <TIM_Base_SetConfig+0x100>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d007      	beq.n	800babc <TIM_Base_SetConfig+0x38>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a36      	ldr	r2, [pc, #216]	@ (800bb88 <TIM_Base_SetConfig+0x104>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d003      	beq.n	800babc <TIM_Base_SetConfig+0x38>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a35      	ldr	r2, [pc, #212]	@ (800bb8c <TIM_Base_SetConfig+0x108>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d108      	bne.n	800bace <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a2b      	ldr	r2, [pc, #172]	@ (800bb80 <TIM_Base_SetConfig+0xfc>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d01b      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800badc:	d017      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a28      	ldr	r2, [pc, #160]	@ (800bb84 <TIM_Base_SetConfig+0x100>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d013      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a27      	ldr	r2, [pc, #156]	@ (800bb88 <TIM_Base_SetConfig+0x104>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d00f      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a26      	ldr	r2, [pc, #152]	@ (800bb8c <TIM_Base_SetConfig+0x108>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d00b      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a25      	ldr	r2, [pc, #148]	@ (800bb90 <TIM_Base_SetConfig+0x10c>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d007      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a24      	ldr	r2, [pc, #144]	@ (800bb94 <TIM_Base_SetConfig+0x110>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d003      	beq.n	800bb0e <TIM_Base_SetConfig+0x8a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a23      	ldr	r2, [pc, #140]	@ (800bb98 <TIM_Base_SetConfig+0x114>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d108      	bne.n	800bb20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a0e      	ldr	r2, [pc, #56]	@ (800bb80 <TIM_Base_SetConfig+0xfc>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d103      	bne.n	800bb54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	691a      	ldr	r2, [r3, #16]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d105      	bne.n	800bb72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	f023 0201 	bic.w	r2, r3, #1
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	611a      	str	r2, [r3, #16]
  }
}
 800bb72:	bf00      	nop
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	40010000 	.word	0x40010000
 800bb84:	40000400 	.word	0x40000400
 800bb88:	40000800 	.word	0x40000800
 800bb8c:	40000c00 	.word	0x40000c00
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40014400 	.word	0x40014400
 800bb98:	40014800 	.word	0x40014800

0800bb9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	f023 0201 	bic.w	r2, r3, #1
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f023 0303 	bic.w	r3, r3, #3
 800bbd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f023 0302 	bic.w	r3, r3, #2
 800bbe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a1c      	ldr	r2, [pc, #112]	@ (800bc64 <TIM_OC1_SetConfig+0xc8>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d10c      	bne.n	800bc12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	f023 0308 	bic.w	r3, r3, #8
 800bbfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f023 0304 	bic.w	r3, r3, #4
 800bc10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a13      	ldr	r2, [pc, #76]	@ (800bc64 <TIM_OC1_SetConfig+0xc8>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d111      	bne.n	800bc3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	621a      	str	r2, [r3, #32]
}
 800bc58:	bf00      	nop
 800bc5a:	371c      	adds	r7, #28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	40010000 	.word	0x40010000

0800bc68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	f023 0210 	bic.w	r2, r3, #16
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f023 0320 	bic.w	r3, r3, #32
 800bcb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	011b      	lsls	r3, r3, #4
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd3c <TIM_OC2_SetConfig+0xd4>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d10d      	bne.n	800bce4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a15      	ldr	r2, [pc, #84]	@ (800bd3c <TIM_OC2_SetConfig+0xd4>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d113      	bne.n	800bd14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	621a      	str	r2, [r3, #32]
}
 800bd2e:	bf00      	nop
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	40010000 	.word	0x40010000

0800bd40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 0303 	bic.w	r3, r3, #3
 800bd76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a1d      	ldr	r2, [pc, #116]	@ (800be10 <TIM_OC3_SetConfig+0xd0>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d10d      	bne.n	800bdba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bda4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	021b      	lsls	r3, r3, #8
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a14      	ldr	r2, [pc, #80]	@ (800be10 <TIM_OC3_SetConfig+0xd0>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d113      	bne.n	800bdea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	695b      	ldr	r3, [r3, #20]
 800bdd6:	011b      	lsls	r3, r3, #4
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	621a      	str	r2, [r3, #32]
}
 800be04:	bf00      	nop
 800be06:	371c      	adds	r7, #28
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	40010000 	.word	0x40010000

0800be14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be14:	b480      	push	{r7}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	021b      	lsls	r3, r3, #8
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	4313      	orrs	r3, r2
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	031b      	lsls	r3, r3, #12
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	4313      	orrs	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a10      	ldr	r2, [pc, #64]	@ (800beb0 <TIM_OC4_SetConfig+0x9c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d109      	bne.n	800be88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	019b      	lsls	r3, r3, #6
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	4313      	orrs	r3, r2
 800be86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	621a      	str	r2, [r3, #32]
}
 800bea2:	bf00      	nop
 800bea4:	371c      	adds	r7, #28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	40010000 	.word	0x40010000

0800beb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	f023 0201 	bic.w	r2, r3, #1
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	011b      	lsls	r3, r3, #4
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f023 030a 	bic.w	r3, r3, #10
 800bef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	621a      	str	r2, [r3, #32]
}
 800bf06:	bf00      	nop
 800bf08:	371c      	adds	r7, #28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b087      	sub	sp, #28
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6a1b      	ldr	r3, [r3, #32]
 800bf28:	f023 0210 	bic.w	r2, r3, #16
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	031b      	lsls	r3, r3, #12
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	693a      	ldr	r2, [r7, #16]
 800bf5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	621a      	str	r2, [r3, #32]
}
 800bf66:	bf00      	nop
 800bf68:	371c      	adds	r7, #28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b085      	sub	sp, #20
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	f043 0307 	orr.w	r3, r3, #7
 800bf94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	609a      	str	r2, [r3, #8]
}
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	021a      	lsls	r2, r3, #8
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	697a      	ldr	r2, [r7, #20]
 800bfda:	609a      	str	r2, [r3, #8]
}
 800bfdc:	bf00      	nop
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f003 031f 	and.w	r3, r3, #31
 800bffa:	2201      	movs	r2, #1
 800bffc:	fa02 f303 	lsl.w	r3, r2, r3
 800c000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6a1a      	ldr	r2, [r3, #32]
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	43db      	mvns	r3, r3
 800c00a:	401a      	ands	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6a1a      	ldr	r2, [r3, #32]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	f003 031f 	and.w	r3, r3, #31
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	fa01 f303 	lsl.w	r3, r1, r3
 800c020:	431a      	orrs	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	621a      	str	r2, [r3, #32]
}
 800c026:	bf00      	nop
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
	...

0800c034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c048:	2302      	movs	r3, #2
 800c04a:	e050      	b.n	800c0ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2202      	movs	r2, #2
 800c058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a1c      	ldr	r2, [pc, #112]	@ (800c0fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d018      	beq.n	800c0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c098:	d013      	beq.n	800c0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a18      	ldr	r2, [pc, #96]	@ (800c100 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d00e      	beq.n	800c0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a16      	ldr	r2, [pc, #88]	@ (800c104 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d009      	beq.n	800c0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a15      	ldr	r2, [pc, #84]	@ (800c108 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d004      	beq.n	800c0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a13      	ldr	r2, [pc, #76]	@ (800c10c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d10c      	bne.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	40010000 	.word	0x40010000
 800c100:	40000400 	.word	0x40000400
 800c104:	40000800 	.word	0x40000800
 800c108:	40000c00 	.word	0x40000c00
 800c10c:	40014000 	.word	0x40014000

0800c110 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d101      	bne.n	800c14a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e042      	b.n	800c1d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	d106      	bne.n	800c164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7f7 fd16 	bl	8003b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2224      	movs	r2, #36	@ 0x24
 800c168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c17a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fe37 	bl	800cdf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	691a      	ldr	r2, [r3, #16]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	695a      	ldr	r2, [r3, #20]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2220      	movs	r2, #32
 800c1bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e024      	b.n	800c234 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2224      	movs	r2, #36	@ 0x24
 800c1ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c200:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7f7 fd52 	bl	8003cac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08a      	sub	sp, #40	@ 0x28
 800c240:	af02      	add	r7, sp, #8
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	603b      	str	r3, [r7, #0]
 800c248:	4613      	mov	r3, r2
 800c24a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b20      	cmp	r3, #32
 800c25a:	d175      	bne.n	800c348 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <HAL_UART_Transmit+0x2c>
 800c262:	88fb      	ldrh	r3, [r7, #6]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e06e      	b.n	800c34a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2221      	movs	r2, #33	@ 0x21
 800c276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c27a:	f7f7 ff3f 	bl	80040fc <HAL_GetTick>
 800c27e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	88fa      	ldrh	r2, [r7, #6]
 800c284:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	88fa      	ldrh	r2, [r7, #6]
 800c28a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c294:	d108      	bne.n	800c2a8 <HAL_UART_Transmit+0x6c>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d104      	bne.n	800c2a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	61bb      	str	r3, [r7, #24]
 800c2a6:	e003      	b.n	800c2b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2b0:	e02e      	b.n	800c310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2180      	movs	r1, #128	@ 0x80
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f000 fb67 	bl	800c990 <UART_WaitOnFlagUntilTimeout>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2220      	movs	r2, #32
 800c2cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e03a      	b.n	800c34a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10b      	bne.n	800c2f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	3302      	adds	r3, #2
 800c2ee:	61bb      	str	r3, [r7, #24]
 800c2f0:	e007      	b.n	800c302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	781a      	ldrb	r2, [r3, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	3301      	adds	r3, #1
 800c300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c306:	b29b      	uxth	r3, r3
 800c308:	3b01      	subs	r3, #1
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c314:	b29b      	uxth	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1cb      	bne.n	800c2b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2200      	movs	r2, #0
 800c322:	2140      	movs	r1, #64	@ 0x40
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 fb33 	bl	800c990 <UART_WaitOnFlagUntilTimeout>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d005      	beq.n	800c33c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2220      	movs	r2, #32
 800c334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e006      	b.n	800c34a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2220      	movs	r2, #32
 800c340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	e000      	b.n	800c34a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c348:	2302      	movs	r3, #2
  }
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3720      	adds	r7, #32
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b20      	cmp	r3, #32
 800c36a:	d112      	bne.n	800c392 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <HAL_UART_Receive_IT+0x26>
 800c372:	88fb      	ldrh	r3, [r7, #6]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e00b      	b.n	800c394 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	461a      	mov	r2, r3
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f000 fb5a 	bl	800ca42 <UART_Start_Receive_IT>
 800c38e:	4603      	mov	r3, r0
 800c390:	e000      	b.n	800c394 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c392:	2302      	movs	r3, #2
  }
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08c      	sub	sp, #48	@ 0x30
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b20      	cmp	r3, #32
 800c3b4:	d14a      	bne.n	800c44c <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c3bc:	88fb      	ldrh	r3, [r7, #6]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e043      	b.n	800c44e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c3d2:	88fb      	ldrh	r3, [r7, #6]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	68b9      	ldr	r1, [r7, #8]
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 fb32 	bl	800ca42 <UART_Start_Receive_IT>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c3e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d12c      	bne.n	800c446 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d125      	bne.n	800c440 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	613b      	str	r3, [r7, #16]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	613b      	str	r3, [r7, #16]
 800c408:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	330c      	adds	r3, #12
 800c410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	617b      	str	r3, [r7, #20]
   return(result);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f043 0310 	orr.w	r3, r3, #16
 800c420:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	330c      	adds	r3, #12
 800c428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c42a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c42c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42e:	6a39      	ldr	r1, [r7, #32]
 800c430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	61fb      	str	r3, [r7, #28]
   return(result);
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e5      	bne.n	800c40a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c43e:	e002      	b.n	800c446 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c44a:	e000      	b.n	800c44e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c44c:	2302      	movs	r3, #2
  }
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3730      	adds	r7, #48	@ 0x30
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b0ba      	sub	sp, #232	@ 0xe8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c47e:	2300      	movs	r3, #0
 800c480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c484:	2300      	movs	r3, #0
 800c486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10f      	bne.n	800c4be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a2:	f003 0320 	and.w	r3, r3, #32
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d009      	beq.n	800c4be <HAL_UART_IRQHandler+0x66>
 800c4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fbdc 	bl	800cc74 <UART_Receive_IT>
      return;
 800c4bc:	e25b      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 80de 	beq.w	800c684 <HAL_UART_IRQHandler+0x22c>
 800c4c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 80d1 	beq.w	800c684 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00b      	beq.n	800c506 <HAL_UART_IRQHandler+0xae>
 800c4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4fe:	f043 0201 	orr.w	r2, r3, #1
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00b      	beq.n	800c52a <HAL_UART_IRQHandler+0xd2>
 800c512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d005      	beq.n	800c52a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c522:	f043 0202 	orr.w	r2, r3, #2
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <HAL_UART_IRQHandler+0xf6>
 800c536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d005      	beq.n	800c54e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	f043 0204 	orr.w	r2, r3, #4
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c552:	f003 0308 	and.w	r3, r3, #8
 800c556:	2b00      	cmp	r3, #0
 800c558:	d011      	beq.n	800c57e <HAL_UART_IRQHandler+0x126>
 800c55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	d105      	bne.n	800c572 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d005      	beq.n	800c57e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c576:	f043 0208 	orr.w	r2, r3, #8
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 81f2 	beq.w	800c96c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d008      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x14e>
 800c594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c598:	f003 0320 	and.w	r3, r3, #32
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d002      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fb67 	bl	800cc74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b0:	2b40      	cmp	r3, #64	@ 0x40
 800c5b2:	bf0c      	ite	eq
 800c5b4:	2301      	moveq	r3, #1
 800c5b6:	2300      	movne	r3, #0
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c2:	f003 0308 	and.w	r3, r3, #8
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d103      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x17a>
 800c5ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d04f      	beq.n	800c672 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fa6f 	bl	800cab6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e2:	2b40      	cmp	r3, #64	@ 0x40
 800c5e4:	d141      	bne.n	800c66a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5f4:	e853 3f00 	ldrex	r3, [r3]
 800c5f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c5fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3314      	adds	r3, #20
 800c60e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c612:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c61e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c622:	e841 2300 	strex	r3, r2, [r1]
 800c626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c62a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1d9      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c636:	2b00      	cmp	r3, #0
 800c638:	d013      	beq.n	800c662 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63e:	4a7e      	ldr	r2, [pc, #504]	@ (800c838 <HAL_UART_IRQHandler+0x3e0>)
 800c640:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c646:	4618      	mov	r0, r3
 800c648:	f7f8 fd3b 	bl	80050c2 <HAL_DMA_Abort_IT>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d016      	beq.n	800c680 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c660:	e00e      	b.n	800c680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7f6 ffdc 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c668:	e00a      	b.n	800c680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7f6 ffd8 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c670:	e006      	b.n	800c680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7f6 ffd4 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c67e:	e175      	b.n	800c96c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c680:	bf00      	nop
    return;
 800c682:	e173      	b.n	800c96c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c688:	2b01      	cmp	r3, #1
 800c68a:	f040 814f 	bne.w	800c92c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c692:	f003 0310 	and.w	r3, r3, #16
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 8148 	beq.w	800c92c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6a0:	f003 0310 	and.w	r3, r3, #16
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 8141 	beq.w	800c92c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60bb      	str	r3, [r7, #8]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	60bb      	str	r3, [r7, #8]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ca:	2b40      	cmp	r3, #64	@ 0x40
 800c6cc:	f040 80b6 	bne.w	800c83c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 8145 	beq.w	800c970 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	f080 813e 	bcs.w	800c970 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c706:	f000 8088 	beq.w	800c81a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	330c      	adds	r3, #12
 800c710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c718:	e853 3f00 	ldrex	r3, [r3]
 800c71c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c720:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	330c      	adds	r3, #12
 800c732:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c736:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c73a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c742:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c74e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1d9      	bne.n	800c70a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3314      	adds	r3, #20
 800c75c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c768:	f023 0301 	bic.w	r3, r3, #1
 800c76c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3314      	adds	r3, #20
 800c776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c77a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c77e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c780:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c782:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c78c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e1      	bne.n	800c756 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3314      	adds	r3, #20
 800c798:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3314      	adds	r3, #20
 800c7b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e3      	bne.n	800c792 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2220      	movs	r2, #32
 800c7ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	330c      	adds	r3, #12
 800c7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7ea:	f023 0310 	bic.w	r3, r3, #16
 800c7ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	330c      	adds	r3, #12
 800c7f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c7fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c7fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c802:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c80a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e3      	bne.n	800c7d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c814:	4618      	mov	r0, r3
 800c816:	f7f8 fbe4 	bl	8004fe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2202      	movs	r2, #2
 800c81e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c828:	b29b      	uxth	r3, r3
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f008 ffb9 	bl	80157a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c836:	e09b      	b.n	800c970 <HAL_UART_IRQHandler+0x518>
 800c838:	0800cb7d 	.word	0x0800cb7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c844:	b29b      	uxth	r3, r3
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c850:	b29b      	uxth	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 808e 	beq.w	800c974 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 8089 	beq.w	800c974 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	330c      	adds	r3, #12
 800c868:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c886:	647a      	str	r2, [r7, #68]	@ 0x44
 800c888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c88c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c88e:	e841 2300 	strex	r3, r2, [r1]
 800c892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1e3      	bne.n	800c862 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	f023 0301 	bic.w	r3, r3, #1
 800c8b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8be:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e3      	bne.n	800c89a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	330c      	adds	r3, #12
 800c8e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	e853 3f00 	ldrex	r3, [r3]
 800c8ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f023 0310 	bic.w	r3, r3, #16
 800c8f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	330c      	adds	r3, #12
 800c900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c904:	61fa      	str	r2, [r7, #28]
 800c906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	69b9      	ldr	r1, [r7, #24]
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	617b      	str	r3, [r7, #20]
   return(result);
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e3      	bne.n	800c8e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c91e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f008 ff3f 	bl	80157a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c92a:	e023      	b.n	800c974 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c934:	2b00      	cmp	r3, #0
 800c936:	d009      	beq.n	800c94c <HAL_UART_IRQHandler+0x4f4>
 800c938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c93c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f92d 	bl	800cba4 <UART_Transmit_IT>
    return;
 800c94a:	e014      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00e      	beq.n	800c976 <HAL_UART_IRQHandler+0x51e>
 800c958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c95c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c960:	2b00      	cmp	r3, #0
 800c962:	d008      	beq.n	800c976 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f96d 	bl	800cc44 <UART_EndTransmit_IT>
    return;
 800c96a:	e004      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
    return;
 800c96c:	bf00      	nop
 800c96e:	e002      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
      return;
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
      return;
 800c974:	bf00      	nop
  }
}
 800c976:	37e8      	adds	r7, #232	@ 0xe8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	603b      	str	r3, [r7, #0]
 800c99c:	4613      	mov	r3, r2
 800c99e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9a0:	e03b      	b.n	800ca1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a8:	d037      	beq.n	800ca1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9aa:	f7f7 fba7 	bl	80040fc <HAL_GetTick>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	6a3a      	ldr	r2, [r7, #32]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d302      	bcc.n	800c9c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e03a      	b.n	800ca3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f003 0304 	and.w	r3, r3, #4
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d023      	beq.n	800ca1a <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	2b80      	cmp	r3, #128	@ 0x80
 800c9d6:	d020      	beq.n	800ca1a <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2b40      	cmp	r3, #64	@ 0x40
 800c9dc:	d01d      	beq.n	800ca1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0308 	and.w	r3, r3, #8
 800c9e8:	2b08      	cmp	r3, #8
 800c9ea:	d116      	bne.n	800ca1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	617b      	str	r3, [r7, #20]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 f857 	bl	800cab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e00f      	b.n	800ca3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	4013      	ands	r3, r2
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	bf0c      	ite	eq
 800ca2a:	2301      	moveq	r3, #1
 800ca2c:	2300      	movne	r3, #0
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	461a      	mov	r2, r3
 800ca32:	79fb      	ldrb	r3, [r7, #7]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d0b4      	beq.n	800c9a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2222      	movs	r2, #34	@ 0x22
 800ca6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d007      	beq.n	800ca88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68da      	ldr	r2, [r3, #12]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	695a      	ldr	r2, [r3, #20]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0201 	orr.w	r2, r2, #1
 800ca96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68da      	ldr	r2, [r3, #12]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f042 0220 	orr.w	r2, r2, #32
 800caa6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b095      	sub	sp, #84	@ 0x54
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	330c      	adds	r3, #12
 800cac4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	330c      	adds	r3, #12
 800cadc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cade:	643a      	str	r2, [r7, #64]	@ 0x40
 800cae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800caec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e5      	bne.n	800cabe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3314      	adds	r3, #20
 800caf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	f023 0301 	bic.w	r3, r3, #1
 800cb08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3314      	adds	r3, #20
 800cb10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e5      	bne.n	800caf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d119      	bne.n	800cb62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	330c      	adds	r3, #12
 800cb34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	e853 3f00 	ldrex	r3, [r3]
 800cb3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	f023 0310 	bic.w	r3, r3, #16
 800cb44:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	330c      	adds	r3, #12
 800cb4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb4e:	61ba      	str	r2, [r7, #24]
 800cb50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb52:	6979      	ldr	r1, [r7, #20]
 800cb54:	69ba      	ldr	r2, [r7, #24]
 800cb56:	e841 2300 	strex	r3, r2, [r1]
 800cb5a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1e5      	bne.n	800cb2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2220      	movs	r2, #32
 800cb66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cb70:	bf00      	nop
 800cb72:	3754      	adds	r7, #84	@ 0x54
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7f6 fd42 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb9c:	bf00      	nop
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b21      	cmp	r3, #33	@ 0x21
 800cbb6:	d13e      	bne.n	800cc36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbc0:	d114      	bne.n	800cbec <UART_Transmit_IT+0x48>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d110      	bne.n	800cbec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	1c9a      	adds	r2, r3, #2
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	621a      	str	r2, [r3, #32]
 800cbea:	e008      	b.n	800cbfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	1c59      	adds	r1, r3, #1
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	6211      	str	r1, [r2, #32]
 800cbf6:	781a      	ldrb	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	3b01      	subs	r3, #1
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10f      	bne.n	800cc32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68da      	ldr	r2, [r3, #12]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e000      	b.n	800cc38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc36:	2302      	movs	r3, #2
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68da      	ldr	r2, [r3, #12]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2220      	movs	r2, #32
 800cc60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fe89 	bl	800c97c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08c      	sub	sp, #48	@ 0x30
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b22      	cmp	r3, #34	@ 0x22
 800cc86:	f040 80ae 	bne.w	800cde6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc92:	d117      	bne.n	800ccc4 <UART_Receive_IT+0x50>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d113      	bne.n	800ccc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cca4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccbc:	1c9a      	adds	r2, r3, #2
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	629a      	str	r2, [r3, #40]	@ 0x28
 800ccc2:	e026      	b.n	800cd12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccd6:	d007      	beq.n	800cce8 <UART_Receive_IT+0x74>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <UART_Receive_IT+0x82>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d106      	bne.n	800ccf6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	e008      	b.n	800cd08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d15d      	bne.n	800cde2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68da      	ldr	r2, [r3, #12]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 0220 	bic.w	r2, r2, #32
 800cd34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68da      	ldr	r2, [r3, #12]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	695a      	ldr	r2, [r3, #20]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0201 	bic.w	r2, r2, #1
 800cd54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d135      	bne.n	800cdd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	330c      	adds	r3, #12
 800cd78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	613b      	str	r3, [r7, #16]
   return(result);
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f023 0310 	bic.w	r3, r3, #16
 800cd88:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	330c      	adds	r3, #12
 800cd90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd92:	623a      	str	r2, [r7, #32]
 800cd94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd96:	69f9      	ldr	r1, [r7, #28]
 800cd98:	6a3a      	ldr	r2, [r7, #32]
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e5      	bne.n	800cd72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0310 	and.w	r3, r3, #16
 800cdb0:	2b10      	cmp	r3, #16
 800cdb2:	d10a      	bne.n	800cdca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f008 fce9 	bl	80157a8 <HAL_UARTEx_RxEventCallback>
 800cdd6:	e002      	b.n	800cdde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f002 fb41 	bl	800f460 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e002      	b.n	800cde8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e000      	b.n	800cde8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cde6:	2302      	movs	r3, #2
  }
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3730      	adds	r7, #48	@ 0x30
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdf4:	b0c0      	sub	sp, #256	@ 0x100
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce0c:	68d9      	ldr	r1, [r3, #12]
 800ce0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	ea40 0301 	orr.w	r3, r0, r1
 800ce18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	431a      	orrs	r2, r3
 800ce28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ce48:	f021 010c 	bic.w	r1, r1, #12
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce56:	430b      	orrs	r3, r1
 800ce58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ce66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce6a:	6999      	ldr	r1, [r3, #24]
 800ce6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	ea40 0301 	orr.w	r3, r0, r1
 800ce76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	4b8f      	ldr	r3, [pc, #572]	@ (800d0bc <UART_SetConfig+0x2cc>)
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d005      	beq.n	800ce90 <UART_SetConfig+0xa0>
 800ce84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b8d      	ldr	r3, [pc, #564]	@ (800d0c0 <UART_SetConfig+0x2d0>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d104      	bne.n	800ce9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce90:	f7fc fa84 	bl	800939c <HAL_RCC_GetPCLK2Freq>
 800ce94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ce98:	e003      	b.n	800cea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce9a:	f7fc fa6b 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 800ce9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ceac:	f040 810c 	bne.w	800d0c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ceb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ceba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cec2:	4622      	mov	r2, r4
 800cec4:	462b      	mov	r3, r5
 800cec6:	1891      	adds	r1, r2, r2
 800cec8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ceca:	415b      	adcs	r3, r3
 800cecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ced2:	4621      	mov	r1, r4
 800ced4:	eb12 0801 	adds.w	r8, r2, r1
 800ced8:	4629      	mov	r1, r5
 800ceda:	eb43 0901 	adc.w	r9, r3, r1
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	f04f 0300 	mov.w	r3, #0
 800cee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ceea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ceee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cef2:	4690      	mov	r8, r2
 800cef4:	4699      	mov	r9, r3
 800cef6:	4623      	mov	r3, r4
 800cef8:	eb18 0303 	adds.w	r3, r8, r3
 800cefc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf00:	462b      	mov	r3, r5
 800cf02:	eb49 0303 	adc.w	r3, r9, r3
 800cf06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cf1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf1e:	460b      	mov	r3, r1
 800cf20:	18db      	adds	r3, r3, r3
 800cf22:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf24:	4613      	mov	r3, r2
 800cf26:	eb42 0303 	adc.w	r3, r2, r3
 800cf2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cf30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cf34:	f7f3 fec0 	bl	8000cb8 <__aeabi_uldivmod>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	4b61      	ldr	r3, [pc, #388]	@ (800d0c4 <UART_SetConfig+0x2d4>)
 800cf3e:	fba3 2302 	umull	r2, r3, r3, r2
 800cf42:	095b      	lsrs	r3, r3, #5
 800cf44:	011c      	lsls	r4, r3, #4
 800cf46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cf54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	1891      	adds	r1, r2, r2
 800cf5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cf60:	415b      	adcs	r3, r3
 800cf62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cf68:	4641      	mov	r1, r8
 800cf6a:	eb12 0a01 	adds.w	sl, r2, r1
 800cf6e:	4649      	mov	r1, r9
 800cf70:	eb43 0b01 	adc.w	fp, r3, r1
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	f04f 0300 	mov.w	r3, #0
 800cf7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf88:	4692      	mov	sl, r2
 800cf8a:	469b      	mov	fp, r3
 800cf8c:	4643      	mov	r3, r8
 800cf8e:	eb1a 0303 	adds.w	r3, sl, r3
 800cf92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cf96:	464b      	mov	r3, r9
 800cf98:	eb4b 0303 	adc.w	r3, fp, r3
 800cf9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cfa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cfb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	18db      	adds	r3, r3, r3
 800cfb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfba:	4613      	mov	r3, r2
 800cfbc:	eb42 0303 	adc.w	r3, r2, r3
 800cfc0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cfc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cfca:	f7f3 fe75 	bl	8000cb8 <__aeabi_uldivmod>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4b3b      	ldr	r3, [pc, #236]	@ (800d0c4 <UART_SetConfig+0x2d4>)
 800cfd6:	fba3 2301 	umull	r2, r3, r3, r1
 800cfda:	095b      	lsrs	r3, r3, #5
 800cfdc:	2264      	movs	r2, #100	@ 0x64
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
 800cfe2:	1acb      	subs	r3, r1, r3
 800cfe4:	00db      	lsls	r3, r3, #3
 800cfe6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cfea:	4b36      	ldr	r3, [pc, #216]	@ (800d0c4 <UART_SetConfig+0x2d4>)
 800cfec:	fba3 2302 	umull	r2, r3, r3, r2
 800cff0:	095b      	lsrs	r3, r3, #5
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cff8:	441c      	add	r4, r3
 800cffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cffe:	2200      	movs	r2, #0
 800d000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d004:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d00c:	4642      	mov	r2, r8
 800d00e:	464b      	mov	r3, r9
 800d010:	1891      	adds	r1, r2, r2
 800d012:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d014:	415b      	adcs	r3, r3
 800d016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d01c:	4641      	mov	r1, r8
 800d01e:	1851      	adds	r1, r2, r1
 800d020:	6339      	str	r1, [r7, #48]	@ 0x30
 800d022:	4649      	mov	r1, r9
 800d024:	414b      	adcs	r3, r1
 800d026:	637b      	str	r3, [r7, #52]	@ 0x34
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d034:	4659      	mov	r1, fp
 800d036:	00cb      	lsls	r3, r1, #3
 800d038:	4651      	mov	r1, sl
 800d03a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d03e:	4651      	mov	r1, sl
 800d040:	00ca      	lsls	r2, r1, #3
 800d042:	4610      	mov	r0, r2
 800d044:	4619      	mov	r1, r3
 800d046:	4603      	mov	r3, r0
 800d048:	4642      	mov	r2, r8
 800d04a:	189b      	adds	r3, r3, r2
 800d04c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d050:	464b      	mov	r3, r9
 800d052:	460a      	mov	r2, r1
 800d054:	eb42 0303 	adc.w	r3, r2, r3
 800d058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d068:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d06c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d070:	460b      	mov	r3, r1
 800d072:	18db      	adds	r3, r3, r3
 800d074:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d076:	4613      	mov	r3, r2
 800d078:	eb42 0303 	adc.w	r3, r2, r3
 800d07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d07e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d086:	f7f3 fe17 	bl	8000cb8 <__aeabi_uldivmod>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c4 <UART_SetConfig+0x2d4>)
 800d090:	fba3 1302 	umull	r1, r3, r3, r2
 800d094:	095b      	lsrs	r3, r3, #5
 800d096:	2164      	movs	r1, #100	@ 0x64
 800d098:	fb01 f303 	mul.w	r3, r1, r3
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	3332      	adds	r3, #50	@ 0x32
 800d0a2:	4a08      	ldr	r2, [pc, #32]	@ (800d0c4 <UART_SetConfig+0x2d4>)
 800d0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	f003 0207 	and.w	r2, r3, #7
 800d0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4422      	add	r2, r4
 800d0b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0b8:	e106      	b.n	800d2c8 <UART_SetConfig+0x4d8>
 800d0ba:	bf00      	nop
 800d0bc:	40011000 	.word	0x40011000
 800d0c0:	40011400 	.word	0x40011400
 800d0c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d0d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d0da:	4642      	mov	r2, r8
 800d0dc:	464b      	mov	r3, r9
 800d0de:	1891      	adds	r1, r2, r2
 800d0e0:	6239      	str	r1, [r7, #32]
 800d0e2:	415b      	adcs	r3, r3
 800d0e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0ea:	4641      	mov	r1, r8
 800d0ec:	1854      	adds	r4, r2, r1
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	eb43 0501 	adc.w	r5, r3, r1
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	f04f 0300 	mov.w	r3, #0
 800d0fc:	00eb      	lsls	r3, r5, #3
 800d0fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d102:	00e2      	lsls	r2, r4, #3
 800d104:	4614      	mov	r4, r2
 800d106:	461d      	mov	r5, r3
 800d108:	4643      	mov	r3, r8
 800d10a:	18e3      	adds	r3, r4, r3
 800d10c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d110:	464b      	mov	r3, r9
 800d112:	eb45 0303 	adc.w	r3, r5, r3
 800d116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d12a:	f04f 0200 	mov.w	r2, #0
 800d12e:	f04f 0300 	mov.w	r3, #0
 800d132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d136:	4629      	mov	r1, r5
 800d138:	008b      	lsls	r3, r1, #2
 800d13a:	4621      	mov	r1, r4
 800d13c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d140:	4621      	mov	r1, r4
 800d142:	008a      	lsls	r2, r1, #2
 800d144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d148:	f7f3 fdb6 	bl	8000cb8 <__aeabi_uldivmod>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	4b60      	ldr	r3, [pc, #384]	@ (800d2d4 <UART_SetConfig+0x4e4>)
 800d152:	fba3 2302 	umull	r2, r3, r3, r2
 800d156:	095b      	lsrs	r3, r3, #5
 800d158:	011c      	lsls	r4, r3, #4
 800d15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d15e:	2200      	movs	r2, #0
 800d160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d16c:	4642      	mov	r2, r8
 800d16e:	464b      	mov	r3, r9
 800d170:	1891      	adds	r1, r2, r2
 800d172:	61b9      	str	r1, [r7, #24]
 800d174:	415b      	adcs	r3, r3
 800d176:	61fb      	str	r3, [r7, #28]
 800d178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d17c:	4641      	mov	r1, r8
 800d17e:	1851      	adds	r1, r2, r1
 800d180:	6139      	str	r1, [r7, #16]
 800d182:	4649      	mov	r1, r9
 800d184:	414b      	adcs	r3, r1
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	f04f 0200 	mov.w	r2, #0
 800d18c:	f04f 0300 	mov.w	r3, #0
 800d190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d194:	4659      	mov	r1, fp
 800d196:	00cb      	lsls	r3, r1, #3
 800d198:	4651      	mov	r1, sl
 800d19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d19e:	4651      	mov	r1, sl
 800d1a0:	00ca      	lsls	r2, r1, #3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	460a      	mov	r2, r1
 800d1b4:	eb42 0303 	adc.w	r3, r2, r3
 800d1b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d1c8:	f04f 0200 	mov.w	r2, #0
 800d1cc:	f04f 0300 	mov.w	r3, #0
 800d1d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	008b      	lsls	r3, r1, #2
 800d1d8:	4641      	mov	r1, r8
 800d1da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1de:	4641      	mov	r1, r8
 800d1e0:	008a      	lsls	r2, r1, #2
 800d1e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d1e6:	f7f3 fd67 	bl	8000cb8 <__aeabi_uldivmod>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4b38      	ldr	r3, [pc, #224]	@ (800d2d4 <UART_SetConfig+0x4e4>)
 800d1f2:	fba3 2301 	umull	r2, r3, r3, r1
 800d1f6:	095b      	lsrs	r3, r3, #5
 800d1f8:	2264      	movs	r2, #100	@ 0x64
 800d1fa:	fb02 f303 	mul.w	r3, r2, r3
 800d1fe:	1acb      	subs	r3, r1, r3
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	3332      	adds	r3, #50	@ 0x32
 800d204:	4a33      	ldr	r2, [pc, #204]	@ (800d2d4 <UART_SetConfig+0x4e4>)
 800d206:	fba2 2303 	umull	r2, r3, r2, r3
 800d20a:	095b      	lsrs	r3, r3, #5
 800d20c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d210:	441c      	add	r4, r3
 800d212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d216:	2200      	movs	r2, #0
 800d218:	673b      	str	r3, [r7, #112]	@ 0x70
 800d21a:	677a      	str	r2, [r7, #116]	@ 0x74
 800d21c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d220:	4642      	mov	r2, r8
 800d222:	464b      	mov	r3, r9
 800d224:	1891      	adds	r1, r2, r2
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	415b      	adcs	r3, r3
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d230:	4641      	mov	r1, r8
 800d232:	1851      	adds	r1, r2, r1
 800d234:	6039      	str	r1, [r7, #0]
 800d236:	4649      	mov	r1, r9
 800d238:	414b      	adcs	r3, r1
 800d23a:	607b      	str	r3, [r7, #4]
 800d23c:	f04f 0200 	mov.w	r2, #0
 800d240:	f04f 0300 	mov.w	r3, #0
 800d244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d248:	4659      	mov	r1, fp
 800d24a:	00cb      	lsls	r3, r1, #3
 800d24c:	4651      	mov	r1, sl
 800d24e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d252:	4651      	mov	r1, sl
 800d254:	00ca      	lsls	r2, r1, #3
 800d256:	4610      	mov	r0, r2
 800d258:	4619      	mov	r1, r3
 800d25a:	4603      	mov	r3, r0
 800d25c:	4642      	mov	r2, r8
 800d25e:	189b      	adds	r3, r3, r2
 800d260:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d262:	464b      	mov	r3, r9
 800d264:	460a      	mov	r2, r1
 800d266:	eb42 0303 	adc.w	r3, r2, r3
 800d26a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	663b      	str	r3, [r7, #96]	@ 0x60
 800d276:	667a      	str	r2, [r7, #100]	@ 0x64
 800d278:	f04f 0200 	mov.w	r2, #0
 800d27c:	f04f 0300 	mov.w	r3, #0
 800d280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d284:	4649      	mov	r1, r9
 800d286:	008b      	lsls	r3, r1, #2
 800d288:	4641      	mov	r1, r8
 800d28a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d28e:	4641      	mov	r1, r8
 800d290:	008a      	lsls	r2, r1, #2
 800d292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d296:	f7f3 fd0f 	bl	8000cb8 <__aeabi_uldivmod>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d4 <UART_SetConfig+0x4e4>)
 800d2a0:	fba3 1302 	umull	r1, r3, r3, r2
 800d2a4:	095b      	lsrs	r3, r3, #5
 800d2a6:	2164      	movs	r1, #100	@ 0x64
 800d2a8:	fb01 f303 	mul.w	r3, r1, r3
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	011b      	lsls	r3, r3, #4
 800d2b0:	3332      	adds	r3, #50	@ 0x32
 800d2b2:	4a08      	ldr	r2, [pc, #32]	@ (800d2d4 <UART_SetConfig+0x4e4>)
 800d2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b8:	095b      	lsrs	r3, r3, #5
 800d2ba:	f003 020f 	and.w	r2, r3, #15
 800d2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4422      	add	r2, r4
 800d2c6:	609a      	str	r2, [r3, #8]
}
 800d2c8:	bf00      	nop
 800d2ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2d4:	51eb851f 	.word	0x51eb851f

0800d2d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d2d8:	b084      	sub	sp, #16
 800d2da:	b480      	push	{r7}
 800d2dc:	b085      	sub	sp, #20
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	f107 001c 	add.w	r0, r7, #28
 800d2e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d2ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d2f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d2f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d2fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d2fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d302:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	4313      	orrs	r3, r2
 800d308:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d312:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	431a      	orrs	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	b004      	add	sp, #16
 800d32c:	4770      	bx	lr

0800d32e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d36a:	b480      	push	{r7}
 800d36c:	b083      	sub	sp, #12
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2203      	movs	r2, #3
 800d376:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d386:	b480      	push	{r7}
 800d388:	b083      	sub	sp, #12
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f003 0303 	and.w	r3, r3, #3
}
 800d396:	4618      	mov	r0, r3
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b085      	sub	sp, #20
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3c0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3c6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d3cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d3dc:	f023 030f 	bic.w	r3, r3, #15
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	b2db      	uxtb	r3, r3
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3314      	adds	r3, #20
 800d41e:	461a      	mov	r2, r3
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	4413      	add	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
}  
 800d42a:	4618      	mov	r0, r3
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d436:	b480      	push	{r7}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	685a      	ldr	r2, [r3, #4]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d45c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d462:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d468:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d474:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	431a      	orrs	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d480:	2300      	movs	r3, #0

}
 800d482:	4618      	mov	r0, r3
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b088      	sub	sp, #32
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d49c:	2310      	movs	r3, #16
 800d49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4a0:	2340      	movs	r3, #64	@ 0x40
 800d4a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ae:	f107 0308 	add.w	r3, r7, #8
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff ff74 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d4ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4be:	2110      	movs	r1, #16
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f9d7 	bl	800d874 <SDMMC_GetCmdResp1>
 800d4c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4c8:	69fb      	ldr	r3, [r7, #28]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3720      	adds	r7, #32
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b088      	sub	sp, #32
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4e0:	2311      	movs	r3, #17
 800d4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4e4:	2340      	movs	r3, #64	@ 0x40
 800d4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4f2:	f107 0308 	add.w	r3, r7, #8
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff ff52 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d4fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d502:	2111      	movs	r1, #17
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f9b5 	bl	800d874 <SDMMC_GetCmdResp1>
 800d50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d50c:	69fb      	ldr	r3, [r7, #28]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3720      	adds	r7, #32
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b088      	sub	sp, #32
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d524:	2312      	movs	r3, #18
 800d526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d528:	2340      	movs	r3, #64	@ 0x40
 800d52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d52c:	2300      	movs	r3, #0
 800d52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d536:	f107 0308 	add.w	r3, r7, #8
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ff30 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d542:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d546:	2112      	movs	r1, #18
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f993 	bl	800d874 <SDMMC_GetCmdResp1>
 800d54e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d550:	69fb      	ldr	r3, [r7, #28]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3720      	adds	r7, #32
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b088      	sub	sp, #32
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d568:	2318      	movs	r3, #24
 800d56a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d56c:	2340      	movs	r3, #64	@ 0x40
 800d56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d570:	2300      	movs	r3, #0
 800d572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d57a:	f107 0308 	add.w	r3, r7, #8
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7ff ff0e 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d58a:	2118      	movs	r1, #24
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 f971 	bl	800d874 <SDMMC_GetCmdResp1>
 800d592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d594:	69fb      	ldr	r3, [r7, #28]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3720      	adds	r7, #32
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b088      	sub	sp, #32
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5ac:	2319      	movs	r3, #25
 800d5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5b0:	2340      	movs	r3, #64	@ 0x40
 800d5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5be:	f107 0308 	add.w	r3, r7, #8
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff feec 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d5ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5ce:	2119      	movs	r1, #25
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f94f 	bl	800d874 <SDMMC_GetCmdResp1>
 800d5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d8:	69fb      	ldr	r3, [r7, #28]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3720      	adds	r7, #32
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
	...

0800d5e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d5f0:	230c      	movs	r3, #12
 800d5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5f4:	2340      	movs	r3, #64	@ 0x40
 800d5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff feca 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d60e:	4a05      	ldr	r2, [pc, #20]	@ (800d624 <SDMMC_CmdStopTransfer+0x40>)
 800d610:	210c      	movs	r1, #12
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f92e 	bl	800d874 <SDMMC_GetCmdResp1>
 800d618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d61a:	69fb      	ldr	r3, [r7, #28]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3720      	adds	r7, #32
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	05f5e100 	.word	0x05f5e100

0800d628 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	@ 0x28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d638:	2307      	movs	r3, #7
 800d63a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d63c:	2340      	movs	r3, #64	@ 0x40
 800d63e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d640:	2300      	movs	r3, #0
 800d642:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d648:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d64a:	f107 0310 	add.w	r3, r7, #16
 800d64e:	4619      	mov	r1, r3
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff fea6 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d65a:	2107      	movs	r1, #7
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f000 f909 	bl	800d874 <SDMMC_GetCmdResp1>
 800d662:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d666:	4618      	mov	r0, r3
 800d668:	3728      	adds	r7, #40	@ 0x28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b088      	sub	sp, #32
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d67a:	2300      	movs	r3, #0
 800d67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d67e:	2300      	movs	r3, #0
 800d680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d682:	2300      	movs	r3, #0
 800d684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d68a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d68c:	f107 0308 	add.w	r3, r7, #8
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fe85 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 fb23 	bl	800dce4 <SDMMC_GetCmdError>
 800d69e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6a0:	69fb      	ldr	r3, [r7, #28]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3720      	adds	r7, #32
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b088      	sub	sp, #32
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6b2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d6b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6b8:	2308      	movs	r3, #8
 800d6ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6bc:	2340      	movs	r3, #64	@ 0x40
 800d6be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6ca:	f107 0308 	add.w	r3, r7, #8
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff fe66 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fab6 	bl	800dc48 <SDMMC_GetCmdResp7>
 800d6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6de:	69fb      	ldr	r3, [r7, #28]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3720      	adds	r7, #32
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6f6:	2337      	movs	r3, #55	@ 0x37
 800d6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6fa:	2340      	movs	r3, #64	@ 0x40
 800d6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6fe:	2300      	movs	r3, #0
 800d700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d708:	f107 0308 	add.w	r3, r7, #8
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff fe47 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d714:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d718:	2137      	movs	r1, #55	@ 0x37
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f8aa 	bl	800d874 <SDMMC_GetCmdResp1>
 800d720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d722:	69fb      	ldr	r3, [r7, #28]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3720      	adds	r7, #32
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d73c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d742:	2329      	movs	r3, #41	@ 0x29
 800d744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d746:	2340      	movs	r3, #64	@ 0x40
 800d748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d74e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fe21 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f9bd 	bl	800dae0 <SDMMC_GetCmdResp3>
 800d766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d768:	69fb      	ldr	r3, [r7, #28]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b088      	sub	sp, #32
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d77a:	2300      	movs	r3, #0
 800d77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d77e:	2302      	movs	r3, #2
 800d780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d782:	23c0      	movs	r3, #192	@ 0xc0
 800d784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d786:	2300      	movs	r3, #0
 800d788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d78e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d790:	f107 0308 	add.w	r3, r7, #8
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fe03 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f957 	bl	800da50 <SDMMC_GetCmdResp2>
 800d7a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a4:	69fb      	ldr	r3, [r7, #28]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3720      	adds	r7, #32
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b088      	sub	sp, #32
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7bc:	2309      	movs	r3, #9
 800d7be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7c0:	23c0      	movs	r3, #192	@ 0xc0
 800d7c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7ce:	f107 0308 	add.w	r3, r7, #8
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff fde4 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f938 	bl	800da50 <SDMMC_GetCmdResp2>
 800d7e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e2:	69fb      	ldr	r3, [r7, #28]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3720      	adds	r7, #32
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7fe:	2340      	movs	r3, #64	@ 0x40
 800d800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d80a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fdc5 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	2103      	movs	r1, #3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f99d 	bl	800db5c <SDMMC_GetCmdResp6>
 800d822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d824:	69fb      	ldr	r3, [r7, #28]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3720      	adds	r7, #32
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b088      	sub	sp, #32
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d83c:	230d      	movs	r3, #13
 800d83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d840:	2340      	movs	r3, #64	@ 0x40
 800d842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d84c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d84e:	f107 0308 	add.w	r3, r7, #8
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff fda4 	bl	800d3a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d85a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d85e:	210d      	movs	r1, #13
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f807 	bl	800d874 <SDMMC_GetCmdResp1>
 800d866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d868:	69fb      	ldr	r3, [r7, #28]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3720      	adds	r7, #32
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	460b      	mov	r3, r1
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d882:	4b70      	ldr	r3, [pc, #448]	@ (800da44 <SDMMC_GetCmdResp1+0x1d0>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a70      	ldr	r2, [pc, #448]	@ (800da48 <SDMMC_GetCmdResp1+0x1d4>)
 800d888:	fba2 2303 	umull	r2, r3, r2, r3
 800d88c:	0a5a      	lsrs	r2, r3, #9
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	fb02 f303 	mul.w	r3, r2, r3
 800d894:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	61fa      	str	r2, [r7, #28]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d102      	bne.n	800d8a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8a4:	e0c9      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d0ef      	beq.n	800d896 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1ea      	bne.n	800d896 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c4:	f003 0304 	and.w	r3, r3, #4
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8d2:	2304      	movs	r3, #4
 800d8d4:	e0b1      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e0a6      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	22c5      	movs	r2, #197	@ 0xc5
 800d8f0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f7ff fd7f 	bl	800d3f6 <SDIO_GetCommandResponse>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	7afb      	ldrb	r3, [r7, #11]
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d001      	beq.n	800d906 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d902:	2301      	movs	r3, #1
 800d904:	e099      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d906:	2100      	movs	r1, #0
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f7ff fd81 	bl	800d410 <SDIO_GetResponse>
 800d90e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	4b4e      	ldr	r3, [pc, #312]	@ (800da4c <SDMMC_GetCmdResp1+0x1d8>)
 800d914:	4013      	ands	r3, r2
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d91a:	2300      	movs	r3, #0
 800d91c:	e08d      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b00      	cmp	r3, #0
 800d922:	da02      	bge.n	800d92a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d924:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d928:	e087      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d934:	2340      	movs	r3, #64	@ 0x40
 800d936:	e080      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d942:	2380      	movs	r3, #128	@ 0x80
 800d944:	e079      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d954:	e071      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d964:	e069      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d974:	e061      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d980:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d984:	e059      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d994:	e051      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9a4:	e049      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d9b4:	e041      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d002      	beq.n	800d9c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9c4:	e039      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d002      	beq.n	800d9d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d9d4:	e031      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d9e4:	e029      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d9f4:	e021      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da04:	e019      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d002      	beq.n	800da16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da14:	e011      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d002      	beq.n	800da26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800da24:	e009      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f003 0308 	and.w	r3, r3, #8
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da30:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800da34:	e001      	b.n	800da3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3720      	adds	r7, #32
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20000010 	.word	0x20000010
 800da48:	10624dd3 	.word	0x10624dd3
 800da4c:	fdffe008 	.word	0xfdffe008

0800da50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da58:	4b1f      	ldr	r3, [pc, #124]	@ (800dad8 <SDMMC_GetCmdResp2+0x88>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a1f      	ldr	r2, [pc, #124]	@ (800dadc <SDMMC_GetCmdResp2+0x8c>)
 800da5e:	fba2 2303 	umull	r2, r3, r2, r3
 800da62:	0a5b      	lsrs	r3, r3, #9
 800da64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da68:	fb02 f303 	mul.w	r3, r2, r3
 800da6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	1e5a      	subs	r2, r3, #1
 800da72:	60fa      	str	r2, [r7, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da7c:	e026      	b.n	800dacc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d0ef      	beq.n	800da6e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1ea      	bne.n	800da6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d004      	beq.n	800daae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2204      	movs	r2, #4
 800daa8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daaa:	2304      	movs	r3, #4
 800daac:	e00e      	b.n	800dacc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d004      	beq.n	800dac4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dac0:	2301      	movs	r3, #1
 800dac2:	e003      	b.n	800dacc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	22c5      	movs	r2, #197	@ 0xc5
 800dac8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	20000010 	.word	0x20000010
 800dadc:	10624dd3 	.word	0x10624dd3

0800dae0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dae8:	4b1a      	ldr	r3, [pc, #104]	@ (800db54 <SDMMC_GetCmdResp3+0x74>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a1a      	ldr	r2, [pc, #104]	@ (800db58 <SDMMC_GetCmdResp3+0x78>)
 800daee:	fba2 2303 	umull	r2, r3, r2, r3
 800daf2:	0a5b      	lsrs	r3, r3, #9
 800daf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daf8:	fb02 f303 	mul.w	r3, r2, r3
 800dafc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	1e5a      	subs	r2, r3, #1
 800db02:	60fa      	str	r2, [r7, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d102      	bne.n	800db0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db0c:	e01b      	b.n	800db46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0ef      	beq.n	800dafe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1ea      	bne.n	800dafe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	2b00      	cmp	r3, #0
 800db32:	d004      	beq.n	800db3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2204      	movs	r2, #4
 800db38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db3a:	2304      	movs	r3, #4
 800db3c:	e003      	b.n	800db46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	22c5      	movs	r2, #197	@ 0xc5
 800db42:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20000010 	.word	0x20000010
 800db58:	10624dd3 	.word	0x10624dd3

0800db5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b088      	sub	sp, #32
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	460b      	mov	r3, r1
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db6a:	4b35      	ldr	r3, [pc, #212]	@ (800dc40 <SDMMC_GetCmdResp6+0xe4>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a35      	ldr	r2, [pc, #212]	@ (800dc44 <SDMMC_GetCmdResp6+0xe8>)
 800db70:	fba2 2303 	umull	r2, r3, r2, r3
 800db74:	0a5b      	lsrs	r3, r3, #9
 800db76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db7a:	fb02 f303 	mul.w	r3, r2, r3
 800db7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	1e5a      	subs	r2, r3, #1
 800db84:	61fa      	str	r2, [r7, #28]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d102      	bne.n	800db90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db8e:	e052      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d0ef      	beq.n	800db80 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1ea      	bne.n	800db80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbae:	f003 0304 	and.w	r3, r3, #4
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d004      	beq.n	800dbc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2204      	movs	r2, #4
 800dbba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbbc:	2304      	movs	r3, #4
 800dbbe:	e03a      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e02f      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff fc0d 	bl	800d3f6 <SDIO_GetCommandResponse>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	7afb      	ldrb	r3, [r7, #11]
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d001      	beq.n	800dbea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e025      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	22c5      	movs	r2, #197	@ 0xc5
 800dbee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7ff fc0c 	bl	800d410 <SDIO_GetResponse>
 800dbf8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d106      	bne.n	800dc12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	0c1b      	lsrs	r3, r3, #16
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e011      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dc20:	e009      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc30:	e001      	b.n	800dc36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3720      	adds	r7, #32
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	20000010 	.word	0x20000010
 800dc44:	10624dd3 	.word	0x10624dd3

0800dc48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc50:	4b22      	ldr	r3, [pc, #136]	@ (800dcdc <SDMMC_GetCmdResp7+0x94>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a22      	ldr	r2, [pc, #136]	@ (800dce0 <SDMMC_GetCmdResp7+0x98>)
 800dc56:	fba2 2303 	umull	r2, r3, r2, r3
 800dc5a:	0a5b      	lsrs	r3, r3, #9
 800dc5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc60:	fb02 f303 	mul.w	r3, r2, r3
 800dc64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	1e5a      	subs	r2, r3, #1
 800dc6a:	60fa      	str	r2, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc74:	e02c      	b.n	800dcd0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d0ef      	beq.n	800dc66 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1ea      	bne.n	800dc66 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc94:	f003 0304 	and.w	r3, r3, #4
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d004      	beq.n	800dca6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2204      	movs	r2, #4
 800dca0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dca2:	2304      	movs	r3, #4
 800dca4:	e014      	b.n	800dcd0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d004      	beq.n	800dcbc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e009      	b.n	800dcd0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2240      	movs	r2, #64	@ 0x40
 800dccc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dcce:	2300      	movs	r3, #0
  
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	20000010 	.word	0x20000010
 800dce0:	10624dd3 	.word	0x10624dd3

0800dce4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcec:	4b11      	ldr	r3, [pc, #68]	@ (800dd34 <SDMMC_GetCmdError+0x50>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a11      	ldr	r2, [pc, #68]	@ (800dd38 <SDMMC_GetCmdError+0x54>)
 800dcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf6:	0a5b      	lsrs	r3, r3, #9
 800dcf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcfc:	fb02 f303 	mul.w	r3, r2, r3
 800dd00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	1e5a      	subs	r2, r3, #1
 800dd06:	60fa      	str	r2, [r7, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d102      	bne.n	800dd12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd10:	e009      	b.n	800dd26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0f1      	beq.n	800dd02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	22c5      	movs	r2, #197	@ 0xc5
 800dd22:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20000010 	.word	0x20000010
 800dd38:	10624dd3 	.word	0x10624dd3

0800dd3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b084      	sub	sp, #16
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	f107 001c 	add.w	r0, r7, #28
 800dd4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d123      	bne.n	800dd9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dd6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d105      	bne.n	800dd92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f001 fb32 	bl	800f3fc <USB_CoreReset>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73fb      	strb	r3, [r7, #15]
 800dd9c:	e01b      	b.n	800ddd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f001 fb26 	bl	800f3fc <USB_CoreReset>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d106      	bne.n	800ddca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	639a      	str	r2, [r3, #56]	@ 0x38
 800ddc8:	e005      	b.n	800ddd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ddd6:	7fbb      	ldrb	r3, [r7, #30]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d10b      	bne.n	800ddf4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	f043 0206 	orr.w	r2, r3, #6
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f043 0220 	orr.w	r2, r3, #32
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de00:	b004      	add	sp, #16
 800de02:	4770      	bx	lr

0800de04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de04:	b480      	push	{r7}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	4613      	mov	r3, r2
 800de10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	2b02      	cmp	r3, #2
 800de16:	d165      	bne.n	800dee4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	4a41      	ldr	r2, [pc, #260]	@ (800df20 <USB_SetTurnaroundTime+0x11c>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d906      	bls.n	800de2e <USB_SetTurnaroundTime+0x2a>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	4a40      	ldr	r2, [pc, #256]	@ (800df24 <USB_SetTurnaroundTime+0x120>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d202      	bcs.n	800de2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de28:	230f      	movs	r3, #15
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	e062      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	4a3c      	ldr	r2, [pc, #240]	@ (800df24 <USB_SetTurnaroundTime+0x120>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d306      	bcc.n	800de44 <USB_SetTurnaroundTime+0x40>
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	4a3b      	ldr	r2, [pc, #236]	@ (800df28 <USB_SetTurnaroundTime+0x124>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d202      	bcs.n	800de44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de3e:	230e      	movs	r3, #14
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	e057      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	4a38      	ldr	r2, [pc, #224]	@ (800df28 <USB_SetTurnaroundTime+0x124>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d306      	bcc.n	800de5a <USB_SetTurnaroundTime+0x56>
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	4a37      	ldr	r2, [pc, #220]	@ (800df2c <USB_SetTurnaroundTime+0x128>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d202      	bcs.n	800de5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de54:	230d      	movs	r3, #13
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	e04c      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	4a33      	ldr	r2, [pc, #204]	@ (800df2c <USB_SetTurnaroundTime+0x128>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d306      	bcc.n	800de70 <USB_SetTurnaroundTime+0x6c>
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	4a32      	ldr	r2, [pc, #200]	@ (800df30 <USB_SetTurnaroundTime+0x12c>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d802      	bhi.n	800de70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de6a:	230c      	movs	r3, #12
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	e041      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4a2f      	ldr	r2, [pc, #188]	@ (800df30 <USB_SetTurnaroundTime+0x12c>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d906      	bls.n	800de86 <USB_SetTurnaroundTime+0x82>
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	4a2e      	ldr	r2, [pc, #184]	@ (800df34 <USB_SetTurnaroundTime+0x130>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d802      	bhi.n	800de86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de80:	230b      	movs	r3, #11
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	e036      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	4a2a      	ldr	r2, [pc, #168]	@ (800df34 <USB_SetTurnaroundTime+0x130>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d906      	bls.n	800de9c <USB_SetTurnaroundTime+0x98>
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	4a29      	ldr	r2, [pc, #164]	@ (800df38 <USB_SetTurnaroundTime+0x134>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d802      	bhi.n	800de9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800de96:	230a      	movs	r3, #10
 800de98:	617b      	str	r3, [r7, #20]
 800de9a:	e02b      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	4a26      	ldr	r2, [pc, #152]	@ (800df38 <USB_SetTurnaroundTime+0x134>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d906      	bls.n	800deb2 <USB_SetTurnaroundTime+0xae>
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	4a25      	ldr	r2, [pc, #148]	@ (800df3c <USB_SetTurnaroundTime+0x138>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d202      	bcs.n	800deb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800deac:	2309      	movs	r3, #9
 800deae:	617b      	str	r3, [r7, #20]
 800deb0:	e020      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	4a21      	ldr	r2, [pc, #132]	@ (800df3c <USB_SetTurnaroundTime+0x138>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d306      	bcc.n	800dec8 <USB_SetTurnaroundTime+0xc4>
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	4a20      	ldr	r2, [pc, #128]	@ (800df40 <USB_SetTurnaroundTime+0x13c>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d802      	bhi.n	800dec8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dec2:	2308      	movs	r3, #8
 800dec4:	617b      	str	r3, [r7, #20]
 800dec6:	e015      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	4a1d      	ldr	r2, [pc, #116]	@ (800df40 <USB_SetTurnaroundTime+0x13c>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d906      	bls.n	800dede <USB_SetTurnaroundTime+0xda>
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	4a1c      	ldr	r2, [pc, #112]	@ (800df44 <USB_SetTurnaroundTime+0x140>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d202      	bcs.n	800dede <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ded8:	2307      	movs	r3, #7
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	e00a      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dede:	2306      	movs	r3, #6
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e007      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dee4:	79fb      	ldrb	r3, [r7, #7]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d102      	bne.n	800def0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800deea:	2309      	movs	r3, #9
 800deec:	617b      	str	r3, [r7, #20]
 800deee:	e001      	b.n	800def4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800def0:	2309      	movs	r3, #9
 800def2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	68da      	ldr	r2, [r3, #12]
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	029b      	lsls	r3, r3, #10
 800df08:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800df0c:	431a      	orrs	r2, r3
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	371c      	adds	r7, #28
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	00d8acbf 	.word	0x00d8acbf
 800df24:	00e4e1c0 	.word	0x00e4e1c0
 800df28:	00f42400 	.word	0x00f42400
 800df2c:	01067380 	.word	0x01067380
 800df30:	011a499f 	.word	0x011a499f
 800df34:	01312cff 	.word	0x01312cff
 800df38:	014ca43f 	.word	0x014ca43f
 800df3c:	016e3600 	.word	0x016e3600
 800df40:	01a6ab1f 	.word	0x01a6ab1f
 800df44:	01e84800 	.word	0x01e84800

0800df48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f043 0201 	orr.w	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df6a:	b480      	push	{r7}
 800df6c:	b083      	sub	sp, #12
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	f023 0201 	bic.w	r2, r3, #1
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df98:	2300      	movs	r3, #0
 800df9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfa8:	78fb      	ldrb	r3, [r7, #3]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d115      	bne.n	800dfda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfba:	200a      	movs	r0, #10
 800dfbc:	f7f6 f8aa 	bl	8004114 <HAL_Delay>
      ms += 10U;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	330a      	adds	r3, #10
 800dfc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f001 f988 	bl	800f2dc <USB_GetMode>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d01e      	beq.n	800e010 <USB_SetCurrentMode+0x84>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfd6:	d9f0      	bls.n	800dfba <USB_SetCurrentMode+0x2e>
 800dfd8:	e01a      	b.n	800e010 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dfda:	78fb      	ldrb	r3, [r7, #3]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d115      	bne.n	800e00c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfec:	200a      	movs	r0, #10
 800dfee:	f7f6 f891 	bl	8004114 <HAL_Delay>
      ms += 10U;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	330a      	adds	r3, #10
 800dff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f001 f96f 	bl	800f2dc <USB_GetMode>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <USB_SetCurrentMode+0x84>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2bc7      	cmp	r3, #199	@ 0xc7
 800e008:	d9f0      	bls.n	800dfec <USB_SetCurrentMode+0x60>
 800e00a:	e001      	b.n	800e010 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e00c:	2301      	movs	r3, #1
 800e00e:	e005      	b.n	800e01c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2bc8      	cmp	r3, #200	@ 0xc8
 800e014:	d101      	bne.n	800e01a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e016:	2301      	movs	r3, #1
 800e018:	e000      	b.n	800e01c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e024:	b084      	sub	sp, #16
 800e026:	b580      	push	{r7, lr}
 800e028:	b086      	sub	sp, #24
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e036:	2300      	movs	r3, #0
 800e038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e03e:	2300      	movs	r3, #0
 800e040:	613b      	str	r3, [r7, #16]
 800e042:	e009      	b.n	800e058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	3340      	adds	r3, #64	@ 0x40
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	4413      	add	r3, r2
 800e04e:	2200      	movs	r2, #0
 800e050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	3301      	adds	r3, #1
 800e056:	613b      	str	r3, [r7, #16]
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	2b0e      	cmp	r3, #14
 800e05c:	d9f2      	bls.n	800e044 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e05e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e062:	2b00      	cmp	r3, #0
 800e064:	d11c      	bne.n	800e0a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e074:	f043 0302 	orr.w	r3, r3, #2
 800e078:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e07e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e096:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	639a      	str	r2, [r3, #56]	@ 0x38
 800e09e:	e00b      	b.n	800e0b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e0be:	461a      	mov	r2, r3
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d10d      	bne.n	800e0e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d104      	bne.n	800e0de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f968 	bl	800e3ac <USB_SetDevSpeed>
 800e0dc:	e008      	b.n	800e0f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e0de:	2101      	movs	r1, #1
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f963 	bl	800e3ac <USB_SetDevSpeed>
 800e0e6:	e003      	b.n	800e0f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e0e8:	2103      	movs	r1, #3
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f95e 	bl	800e3ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0f0:	2110      	movs	r1, #16
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f8fa 	bl	800e2ec <USB_FlushTxFifo>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d001      	beq.n	800e102 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e0fe:	2301      	movs	r3, #1
 800e100:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 f924 	bl	800e350 <USB_FlushRxFifo>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e118:	461a      	mov	r2, r3
 800e11a:	2300      	movs	r3, #0
 800e11c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e124:	461a      	mov	r2, r3
 800e126:	2300      	movs	r3, #0
 800e128:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e130:	461a      	mov	r2, r3
 800e132:	2300      	movs	r3, #0
 800e134:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e136:	2300      	movs	r3, #0
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	e043      	b.n	800e1c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	4413      	add	r3, r2
 800e144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e14e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e152:	d118      	bne.n	800e186 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10a      	bne.n	800e170 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	015a      	lsls	r2, r3, #5
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4413      	add	r3, r2
 800e162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e166:	461a      	mov	r2, r3
 800e168:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e16c:	6013      	str	r3, [r2, #0]
 800e16e:	e013      	b.n	800e198 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	4413      	add	r3, r2
 800e178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e17c:	461a      	mov	r2, r3
 800e17e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e182:	6013      	str	r3, [r2, #0]
 800e184:	e008      	b.n	800e198 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	4413      	add	r3, r2
 800e18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e192:	461a      	mov	r2, r3
 800e194:	2300      	movs	r3, #0
 800e196:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	015a      	lsls	r2, r3, #5
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	613b      	str	r3, [r7, #16]
 800e1c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d3b5      	bcc.n	800e13c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	613b      	str	r3, [r7, #16]
 800e1d4:	e043      	b.n	800e25e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	015a      	lsls	r2, r3, #5
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	4413      	add	r3, r2
 800e1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1ec:	d118      	bne.n	800e220 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10a      	bne.n	800e20a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e200:	461a      	mov	r2, r3
 800e202:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	e013      	b.n	800e232 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	015a      	lsls	r2, r3, #5
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	4413      	add	r3, r2
 800e212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e216:	461a      	mov	r2, r3
 800e218:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	e008      	b.n	800e232 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	015a      	lsls	r2, r3, #5
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	4413      	add	r3, r2
 800e228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e22c:	461a      	mov	r2, r3
 800e22e:	2300      	movs	r3, #0
 800e230:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	015a      	lsls	r2, r3, #5
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	4413      	add	r3, r2
 800e23a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e23e:	461a      	mov	r2, r3
 800e240:	2300      	movs	r3, #0
 800e242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e250:	461a      	mov	r2, r3
 800e252:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	3301      	adds	r3, #1
 800e25c:	613b      	str	r3, [r7, #16]
 800e25e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e262:	461a      	mov	r2, r3
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	4293      	cmp	r3, r2
 800e268:	d3b5      	bcc.n	800e1d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e27c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e28a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e28c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e290:	2b00      	cmp	r3, #0
 800e292:	d105      	bne.n	800e2a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	699b      	ldr	r3, [r3, #24]
 800e298:	f043 0210 	orr.w	r2, r3, #16
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	699a      	ldr	r2, [r3, #24]
 800e2a4:	4b10      	ldr	r3, [pc, #64]	@ (800e2e8 <USB_DevInit+0x2c4>)
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d005      	beq.n	800e2c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	f043 0208 	orr.w	r2, r3, #8
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e2c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d107      	bne.n	800e2d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2d0:	f043 0304 	orr.w	r3, r3, #4
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2e4:	b004      	add	sp, #16
 800e2e6:	4770      	bx	lr
 800e2e8:	803c3800 	.word	0x803c3800

0800e2ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e306:	d901      	bls.n	800e30c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e308:	2303      	movs	r3, #3
 800e30a:	e01b      	b.n	800e344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	2b00      	cmp	r3, #0
 800e312:	daf2      	bge.n	800e2fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e314:	2300      	movs	r3, #0
 800e316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	019b      	lsls	r3, r3, #6
 800e31c:	f043 0220 	orr.w	r2, r3, #32
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3301      	adds	r3, #1
 800e328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e330:	d901      	bls.n	800e336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e332:	2303      	movs	r3, #3
 800e334:	e006      	b.n	800e344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	f003 0320 	and.w	r3, r3, #32
 800e33e:	2b20      	cmp	r3, #32
 800e340:	d0f0      	beq.n	800e324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e358:	2300      	movs	r3, #0
 800e35a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3301      	adds	r3, #1
 800e360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e368:	d901      	bls.n	800e36e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e36a:	2303      	movs	r3, #3
 800e36c:	e018      	b.n	800e3a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	2b00      	cmp	r3, #0
 800e374:	daf2      	bge.n	800e35c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e376:	2300      	movs	r3, #0
 800e378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2210      	movs	r2, #16
 800e37e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3301      	adds	r3, #1
 800e384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e38c:	d901      	bls.n	800e392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e38e:	2303      	movs	r3, #3
 800e390:	e006      	b.n	800e3a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	691b      	ldr	r3, [r3, #16]
 800e396:	f003 0310 	and.w	r3, r3, #16
 800e39a:	2b10      	cmp	r3, #16
 800e39c:	d0f0      	beq.n	800e380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	78fb      	ldrb	r3, [r7, #3]
 800e3c6:	68f9      	ldr	r1, [r7, #12]
 800e3c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b087      	sub	sp, #28
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	f003 0306 	and.w	r3, r3, #6
 800e3f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d102      	bne.n	800e404 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e3fe:	2300      	movs	r3, #0
 800e400:	75fb      	strb	r3, [r7, #23]
 800e402:	e00a      	b.n	800e41a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2b02      	cmp	r3, #2
 800e408:	d002      	beq.n	800e410 <USB_GetDevSpeed+0x32>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2b06      	cmp	r3, #6
 800e40e:	d102      	bne.n	800e416 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e410:	2302      	movs	r3, #2
 800e412:	75fb      	strb	r3, [r7, #23]
 800e414:	e001      	b.n	800e41a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e416:	230f      	movs	r3, #15
 800e418:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	371c      	adds	r7, #28
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	785b      	ldrb	r3, [r3, #1]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d13a      	bne.n	800e4ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e44a:	69da      	ldr	r2, [r3, #28]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f003 030f 	and.w	r3, r3, #15
 800e454:	2101      	movs	r1, #1
 800e456:	fa01 f303 	lsl.w	r3, r1, r3
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	68f9      	ldr	r1, [r7, #12]
 800e45e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e462:	4313      	orrs	r3, r2
 800e464:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	015a      	lsls	r2, r3, #5
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	4413      	add	r3, r2
 800e46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d155      	bne.n	800e528 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	015a      	lsls	r2, r3, #5
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4413      	add	r3, r2
 800e484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	791b      	ldrb	r3, [r3, #4]
 800e496:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e498:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	059b      	lsls	r3, r3, #22
 800e49e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	0151      	lsls	r1, r2, #5
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	440a      	add	r2, r1
 800e4aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	e036      	b.n	800e528 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4c0:	69da      	ldr	r2, [r3, #28]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	f003 030f 	and.w	r3, r3, #15
 800e4ca:	2101      	movs	r1, #1
 800e4cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e4d0:	041b      	lsls	r3, r3, #16
 800e4d2:	68f9      	ldr	r1, [r7, #12]
 800e4d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	015a      	lsls	r2, r3, #5
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d11a      	bne.n	800e528 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	015a      	lsls	r2, r3, #5
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	791b      	ldrb	r3, [r3, #4]
 800e50c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e50e:	430b      	orrs	r3, r1
 800e510:	4313      	orrs	r3, r2
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	0151      	lsls	r1, r2, #5
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	440a      	add	r2, r1
 800e51a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e51e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e526:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e528:	2300      	movs	r3, #0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
	...

0800e538 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	785b      	ldrb	r3, [r3, #1]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d161      	bne.n	800e618 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e56a:	d11f      	bne.n	800e5ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	0151      	lsls	r1, r2, #5
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	440a      	add	r2, r1
 800e582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e58a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	015a      	lsls	r2, r3, #5
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	0151      	lsls	r1, r2, #5
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	440a      	add	r2, r1
 800e5a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	f003 030f 	and.w	r3, r3, #15
 800e5bc:	2101      	movs	r1, #1
 800e5be:	fa01 f303 	lsl.w	r3, r1, r3
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	43db      	mvns	r3, r3
 800e5c6:	68f9      	ldr	r1, [r7, #12]
 800e5c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5cc:	4013      	ands	r3, r2
 800e5ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5d6:	69da      	ldr	r2, [r3, #28]
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 030f 	and.w	r3, r3, #15
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	43db      	mvns	r3, r3
 800e5ea:	68f9      	ldr	r1, [r7, #12]
 800e5ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	0159      	lsls	r1, r3, #5
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	440b      	add	r3, r1
 800e60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e60e:	4619      	mov	r1, r3
 800e610:	4b35      	ldr	r3, [pc, #212]	@ (800e6e8 <USB_DeactivateEndpoint+0x1b0>)
 800e612:	4013      	ands	r3, r2
 800e614:	600b      	str	r3, [r1, #0]
 800e616:	e060      	b.n	800e6da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	015a      	lsls	r2, r3, #5
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4413      	add	r3, r2
 800e620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e62a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e62e:	d11f      	bne.n	800e670 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	0151      	lsls	r1, r2, #5
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	440a      	add	r2, r1
 800e646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e64a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e64e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	015a      	lsls	r2, r3, #5
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	4413      	add	r3, r2
 800e658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	0151      	lsls	r1, r2, #5
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	440a      	add	r2, r1
 800e666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e66a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e66e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	f003 030f 	and.w	r3, r3, #15
 800e680:	2101      	movs	r1, #1
 800e682:	fa01 f303 	lsl.w	r3, r1, r3
 800e686:	041b      	lsls	r3, r3, #16
 800e688:	43db      	mvns	r3, r3
 800e68a:	68f9      	ldr	r1, [r7, #12]
 800e68c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e690:	4013      	ands	r3, r2
 800e692:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e69a:	69da      	ldr	r2, [r3, #28]
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 030f 	and.w	r3, r3, #15
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e6aa:	041b      	lsls	r3, r3, #16
 800e6ac:	43db      	mvns	r3, r3
 800e6ae:	68f9      	ldr	r1, [r7, #12]
 800e6b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6b4:	4013      	ands	r3, r2
 800e6b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	015a      	lsls	r2, r3, #5
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	4413      	add	r3, r2
 800e6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	0159      	lsls	r1, r3, #5
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	440b      	add	r3, r1
 800e6ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <USB_DeactivateEndpoint+0x1b4>)
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3714      	adds	r7, #20
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	ec337800 	.word	0xec337800
 800e6ec:	eff37800 	.word	0xeff37800

0800e6f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b08a      	sub	sp, #40	@ 0x28
 800e6f4:	af02      	add	r7, sp, #8
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	785b      	ldrb	r3, [r3, #1]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	f040 817a 	bne.w	800ea06 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d132      	bne.n	800e780 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	015a      	lsls	r2, r3, #5
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	4413      	add	r3, r2
 800e722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	69ba      	ldr	r2, [r7, #24]
 800e72a:	0151      	lsls	r1, r2, #5
 800e72c:	69fa      	ldr	r2, [r7, #28]
 800e72e:	440a      	add	r2, r1
 800e730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e734:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e738:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e73c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	015a      	lsls	r2, r3, #5
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	4413      	add	r3, r2
 800e746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	69ba      	ldr	r2, [r7, #24]
 800e74e:	0151      	lsls	r1, r2, #5
 800e750:	69fa      	ldr	r2, [r7, #28]
 800e752:	440a      	add	r2, r1
 800e754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e758:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e75c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	015a      	lsls	r2, r3, #5
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	4413      	add	r3, r2
 800e766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	69ba      	ldr	r2, [r7, #24]
 800e76e:	0151      	lsls	r1, r2, #5
 800e770:	69fa      	ldr	r2, [r7, #28]
 800e772:	440a      	add	r2, r1
 800e774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e778:	0cdb      	lsrs	r3, r3, #19
 800e77a:	04db      	lsls	r3, r3, #19
 800e77c:	6113      	str	r3, [r2, #16]
 800e77e:	e092      	b.n	800e8a6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	015a      	lsls	r2, r3, #5
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	4413      	add	r3, r2
 800e788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	0151      	lsls	r1, r2, #5
 800e792:	69fa      	ldr	r2, [r7, #28]
 800e794:	440a      	add	r2, r1
 800e796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e79a:	0cdb      	lsrs	r3, r3, #19
 800e79c:	04db      	lsls	r3, r3, #19
 800e79e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	015a      	lsls	r2, r3, #5
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	69ba      	ldr	r2, [r7, #24]
 800e7b0:	0151      	lsls	r1, r2, #5
 800e7b2:	69fa      	ldr	r2, [r7, #28]
 800e7b4:	440a      	add	r2, r1
 800e7b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e7be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e7c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d11a      	bne.n	800e800 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	691a      	ldr	r2, [r3, #16]
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d903      	bls.n	800e7de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	689a      	ldr	r2, [r3, #8]
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	015a      	lsls	r2, r3, #5
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	69ba      	ldr	r2, [r7, #24]
 800e7ee:	0151      	lsls	r1, r2, #5
 800e7f0:	69fa      	ldr	r2, [r7, #28]
 800e7f2:	440a      	add	r2, r1
 800e7f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7fc:	6113      	str	r3, [r2, #16]
 800e7fe:	e01b      	b.n	800e838 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	4413      	add	r3, r2
 800e808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e80c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	6919      	ldr	r1, [r3, #16]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	440b      	add	r3, r1
 800e818:	1e59      	subs	r1, r3, #1
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e822:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e824:	4ba2      	ldr	r3, [pc, #648]	@ (800eab0 <USB_EPStartXfer+0x3c0>)
 800e826:	400b      	ands	r3, r1
 800e828:	69b9      	ldr	r1, [r7, #24]
 800e82a:	0148      	lsls	r0, r1, #5
 800e82c:	69f9      	ldr	r1, [r7, #28]
 800e82e:	4401      	add	r1, r0
 800e830:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e834:	4313      	orrs	r3, r2
 800e836:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	015a      	lsls	r2, r3, #5
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	4413      	add	r3, r2
 800e840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e844:	691a      	ldr	r2, [r3, #16]
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e84e:	69b9      	ldr	r1, [r7, #24]
 800e850:	0148      	lsls	r0, r1, #5
 800e852:	69f9      	ldr	r1, [r7, #28]
 800e854:	4401      	add	r1, r0
 800e856:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e85a:	4313      	orrs	r3, r2
 800e85c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	791b      	ldrb	r3, [r3, #4]
 800e862:	2b01      	cmp	r3, #1
 800e864:	d11f      	bne.n	800e8a6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	69ba      	ldr	r2, [r7, #24]
 800e876:	0151      	lsls	r1, r2, #5
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	440a      	add	r2, r1
 800e87c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e880:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e884:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	69ba      	ldr	r2, [r7, #24]
 800e896:	0151      	lsls	r1, r2, #5
 800e898:	69fa      	ldr	r2, [r7, #28]
 800e89a:	440a      	add	r2, r1
 800e89c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d14b      	bne.n	800e944 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	69db      	ldr	r3, [r3, #28]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d009      	beq.n	800e8c8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	69db      	ldr	r3, [r3, #28]
 800e8c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	791b      	ldrb	r3, [r3, #4]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d128      	bne.n	800e922 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d110      	bne.n	800e902 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	0151      	lsls	r1, r2, #5
 800e8f2:	69fa      	ldr	r2, [r7, #28]
 800e8f4:	440a      	add	r2, r1
 800e8f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	e00f      	b.n	800e922 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	015a      	lsls	r2, r3, #5
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	4413      	add	r3, r2
 800e90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	69ba      	ldr	r2, [r7, #24]
 800e912:	0151      	lsls	r1, r2, #5
 800e914:	69fa      	ldr	r2, [r7, #28]
 800e916:	440a      	add	r2, r1
 800e918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e91c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e920:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	015a      	lsls	r2, r3, #5
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	4413      	add	r3, r2
 800e92a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	69ba      	ldr	r2, [r7, #24]
 800e932:	0151      	lsls	r1, r2, #5
 800e934:	69fa      	ldr	r2, [r7, #28]
 800e936:	440a      	add	r2, r1
 800e938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e93c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	e165      	b.n	800ec10 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	015a      	lsls	r2, r3, #5
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	4413      	add	r3, r2
 800e94c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	69ba      	ldr	r2, [r7, #24]
 800e954:	0151      	lsls	r1, r2, #5
 800e956:	69fa      	ldr	r2, [r7, #28]
 800e958:	440a      	add	r2, r1
 800e95a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e95e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e962:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	791b      	ldrb	r3, [r3, #4]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d015      	beq.n	800e998 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 814d 	beq.w	800ec10 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e97c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	f003 030f 	and.w	r3, r3, #15
 800e986:	2101      	movs	r1, #1
 800e988:	fa01 f303 	lsl.w	r3, r1, r3
 800e98c:	69f9      	ldr	r1, [r7, #28]
 800e98e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e992:	4313      	orrs	r3, r2
 800e994:	634b      	str	r3, [r1, #52]	@ 0x34
 800e996:	e13b      	b.n	800ec10 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d110      	bne.n	800e9ca <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	015a      	lsls	r2, r3, #5
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	69ba      	ldr	r2, [r7, #24]
 800e9b8:	0151      	lsls	r1, r2, #5
 800e9ba:	69fa      	ldr	r2, [r7, #28]
 800e9bc:	440a      	add	r2, r1
 800e9be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9c6:	6013      	str	r3, [r2, #0]
 800e9c8:	e00f      	b.n	800e9ea <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	015a      	lsls	r2, r3, #5
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	69ba      	ldr	r2, [r7, #24]
 800e9da:	0151      	lsls	r1, r2, #5
 800e9dc:	69fa      	ldr	r2, [r7, #28]
 800e9de:	440a      	add	r2, r1
 800e9e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	68d9      	ldr	r1, [r3, #12]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	781a      	ldrb	r2, [r3, #0]
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	b298      	uxth	r0, r3
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f000 f9b8 	bl	800ed74 <USB_WritePacket>
 800ea04:	e104      	b.n	800ec10 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	015a      	lsls	r2, r3, #5
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea12:	691b      	ldr	r3, [r3, #16]
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	0151      	lsls	r1, r2, #5
 800ea18:	69fa      	ldr	r2, [r7, #28]
 800ea1a:	440a      	add	r2, r1
 800ea1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea20:	0cdb      	lsrs	r3, r3, #19
 800ea22:	04db      	lsls	r3, r3, #19
 800ea24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	015a      	lsls	r2, r3, #5
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	69ba      	ldr	r2, [r7, #24]
 800ea36:	0151      	lsls	r1, r2, #5
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	440a      	add	r2, r1
 800ea3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ea44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ea48:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d131      	bne.n	800eab4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	691b      	ldr	r3, [r3, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d003      	beq.n	800ea60 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	689a      	ldr	r2, [r3, #8]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	015a      	lsls	r2, r3, #5
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	4413      	add	r3, r2
 800ea70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea74:	691a      	ldr	r2, [r3, #16]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	6a1b      	ldr	r3, [r3, #32]
 800ea7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea7e:	69b9      	ldr	r1, [r7, #24]
 800ea80:	0148      	lsls	r0, r1, #5
 800ea82:	69f9      	ldr	r1, [r7, #28]
 800ea84:	4401      	add	r1, r0
 800ea86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	015a      	lsls	r2, r3, #5
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	4413      	add	r3, r2
 800ea96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	69ba      	ldr	r2, [r7, #24]
 800ea9e:	0151      	lsls	r1, r2, #5
 800eaa0:	69fa      	ldr	r2, [r7, #28]
 800eaa2:	440a      	add	r2, r1
 800eaa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eaac:	6113      	str	r3, [r2, #16]
 800eaae:	e061      	b.n	800eb74 <USB_EPStartXfer+0x484>
 800eab0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d123      	bne.n	800eb04 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eac8:	691a      	ldr	r2, [r3, #16]
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ead2:	69b9      	ldr	r1, [r7, #24]
 800ead4:	0148      	lsls	r0, r1, #5
 800ead6:	69f9      	ldr	r1, [r7, #28]
 800ead8:	4401      	add	r1, r0
 800eada:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eade:	4313      	orrs	r3, r2
 800eae0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	015a      	lsls	r2, r3, #5
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	4413      	add	r3, r2
 800eaea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	69ba      	ldr	r2, [r7, #24]
 800eaf2:	0151      	lsls	r1, r2, #5
 800eaf4:	69fa      	ldr	r2, [r7, #28]
 800eaf6:	440a      	add	r2, r1
 800eaf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eafc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb00:	6113      	str	r3, [r2, #16]
 800eb02:	e037      	b.n	800eb74 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	691a      	ldr	r2, [r3, #16]
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	1e5a      	subs	r2, r3, #1
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb18:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	8afa      	ldrh	r2, [r7, #22]
 800eb20:	fb03 f202 	mul.w	r2, r3, r2
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	015a      	lsls	r2, r3, #5
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	4413      	add	r3, r2
 800eb30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb34:	691a      	ldr	r2, [r3, #16]
 800eb36:	8afb      	ldrh	r3, [r7, #22]
 800eb38:	04d9      	lsls	r1, r3, #19
 800eb3a:	4b38      	ldr	r3, [pc, #224]	@ (800ec1c <USB_EPStartXfer+0x52c>)
 800eb3c:	400b      	ands	r3, r1
 800eb3e:	69b9      	ldr	r1, [r7, #24]
 800eb40:	0148      	lsls	r0, r1, #5
 800eb42:	69f9      	ldr	r1, [r7, #28]
 800eb44:	4401      	add	r1, r0
 800eb46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	015a      	lsls	r2, r3, #5
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	4413      	add	r3, r2
 800eb56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb5a:	691a      	ldr	r2, [r3, #16]
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	6a1b      	ldr	r3, [r3, #32]
 800eb60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb64:	69b9      	ldr	r1, [r7, #24]
 800eb66:	0148      	lsls	r0, r1, #5
 800eb68:	69f9      	ldr	r1, [r7, #28]
 800eb6a:	4401      	add	r1, r0
 800eb6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb70:	4313      	orrs	r3, r2
 800eb72:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d10d      	bne.n	800eb96 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d009      	beq.n	800eb96 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	68d9      	ldr	r1, [r3, #12]
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	015a      	lsls	r2, r3, #5
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb92:	460a      	mov	r2, r1
 800eb94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	791b      	ldrb	r3, [r3, #4]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d128      	bne.n	800ebf0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d110      	bne.n	800ebd0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	69ba      	ldr	r2, [r7, #24]
 800ebbe:	0151      	lsls	r1, r2, #5
 800ebc0:	69fa      	ldr	r2, [r7, #28]
 800ebc2:	440a      	add	r2, r1
 800ebc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ebcc:	6013      	str	r3, [r2, #0]
 800ebce:	e00f      	b.n	800ebf0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	015a      	lsls	r2, r3, #5
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	69ba      	ldr	r2, [r7, #24]
 800ebe0:	0151      	lsls	r1, r2, #5
 800ebe2:	69fa      	ldr	r2, [r7, #28]
 800ebe4:	440a      	add	r2, r1
 800ebe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	015a      	lsls	r2, r3, #5
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	0151      	lsls	r1, r2, #5
 800ec02:	69fa      	ldr	r2, [r7, #28]
 800ec04:	440a      	add	r2, r1
 800ec06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec0a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ec0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3720      	adds	r7, #32
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	1ff80000 	.word	0x1ff80000

0800ec20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	785b      	ldrb	r3, [r3, #1]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d14a      	bne.n	800ecd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec56:	f040 8086 	bne.w	800ed66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	015a      	lsls	r2, r3, #5
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	4413      	add	r3, r2
 800ec64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	7812      	ldrb	r2, [r2, #0]
 800ec6e:	0151      	lsls	r1, r2, #5
 800ec70:	693a      	ldr	r2, [r7, #16]
 800ec72:	440a      	add	r2, r1
 800ec74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	015a      	lsls	r2, r3, #5
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	4413      	add	r3, r2
 800ec88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	7812      	ldrb	r2, [r2, #0]
 800ec92:	0151      	lsls	r1, r2, #5
 800ec94:	693a      	ldr	r2, [r7, #16]
 800ec96:	440a      	add	r2, r1
 800ec98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eca0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3301      	adds	r3, #1
 800eca6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d902      	bls.n	800ecb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	75fb      	strb	r3, [r7, #23]
          break;
 800ecb6:	e056      	b.n	800ed66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	015a      	lsls	r2, r3, #5
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecd0:	d0e7      	beq.n	800eca2 <USB_EPStopXfer+0x82>
 800ecd2:	e048      	b.n	800ed66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	015a      	lsls	r2, r3, #5
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ece8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecec:	d13b      	bne.n	800ed66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	015a      	lsls	r2, r3, #5
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	7812      	ldrb	r2, [r2, #0]
 800ed02:	0151      	lsls	r1, r2, #5
 800ed04:	693a      	ldr	r2, [r7, #16]
 800ed06:	440a      	add	r2, r1
 800ed08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	015a      	lsls	r2, r3, #5
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	7812      	ldrb	r2, [r2, #0]
 800ed26:	0151      	lsls	r1, r2, #5
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	440a      	add	r2, r1
 800ed2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d902      	bls.n	800ed4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	75fb      	strb	r3, [r7, #23]
          break;
 800ed4a:	e00c      	b.n	800ed66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	015a      	lsls	r2, r3, #5
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	4413      	add	r3, r2
 800ed56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed64:	d0e7      	beq.n	800ed36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	371c      	adds	r7, #28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b089      	sub	sp, #36	@ 0x24
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	4611      	mov	r1, r2
 800ed80:	461a      	mov	r2, r3
 800ed82:	460b      	mov	r3, r1
 800ed84:	71fb      	strb	r3, [r7, #7]
 800ed86:	4613      	mov	r3, r2
 800ed88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d123      	bne.n	800ede2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed9a:	88bb      	ldrh	r3, [r7, #4]
 800ed9c:	3303      	adds	r3, #3
 800ed9e:	089b      	lsrs	r3, r3, #2
 800eda0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800eda2:	2300      	movs	r3, #0
 800eda4:	61bb      	str	r3, [r7, #24]
 800eda6:	e018      	b.n	800edda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eda8:	79fb      	ldrb	r3, [r7, #7]
 800edaa:	031a      	lsls	r2, r3, #12
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edb4:	461a      	mov	r2, r3
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	3301      	adds	r3, #1
 800edc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	3301      	adds	r3, #1
 800edc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	3301      	adds	r3, #1
 800edcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	3301      	adds	r3, #1
 800edd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	3301      	adds	r3, #1
 800edd8:	61bb      	str	r3, [r7, #24]
 800edda:	69ba      	ldr	r2, [r7, #24]
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d3e2      	bcc.n	800eda8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3724      	adds	r7, #36	@ 0x24
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b08b      	sub	sp, #44	@ 0x2c
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ee06:	88fb      	ldrh	r3, [r7, #6]
 800ee08:	089b      	lsrs	r3, r3, #2
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ee0e:	88fb      	ldrh	r3, [r7, #6]
 800ee10:	f003 0303 	and.w	r3, r3, #3
 800ee14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	623b      	str	r3, [r7, #32]
 800ee1a:	e014      	b.n	800ee46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee26:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee30:	3301      	adds	r3, #1
 800ee32:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	3301      	adds	r3, #1
 800ee38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	3301      	adds	r3, #1
 800ee44:	623b      	str	r3, [r7, #32]
 800ee46:	6a3a      	ldr	r2, [r7, #32]
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d3e6      	bcc.n	800ee1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee4e:	8bfb      	ldrh	r3, [r7, #30]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d01e      	beq.n	800ee92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee54:	2300      	movs	r3, #0
 800ee56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee5e:	461a      	mov	r2, r3
 800ee60:	f107 0310 	add.w	r3, r7, #16
 800ee64:	6812      	ldr	r2, [r2, #0]
 800ee66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	00db      	lsls	r3, r3, #3
 800ee70:	fa22 f303 	lsr.w	r3, r2, r3
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee78:	701a      	strb	r2, [r3, #0]
      i++;
 800ee7a:	6a3b      	ldr	r3, [r7, #32]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee82:	3301      	adds	r3, #1
 800ee84:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee86:	8bfb      	ldrh	r3, [r7, #30]
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee8c:	8bfb      	ldrh	r3, [r7, #30]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1ea      	bne.n	800ee68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	372c      	adds	r7, #44	@ 0x2c
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	785b      	ldrb	r3, [r3, #1]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d12c      	bne.n	800ef16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	015a      	lsls	r2, r3, #5
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4413      	add	r3, r2
 800eec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	db12      	blt.n	800eef4 <USB_EPSetStall+0x54>
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00f      	beq.n	800eef4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	015a      	lsls	r2, r3, #5
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	4413      	add	r3, r2
 800eedc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68ba      	ldr	r2, [r7, #8]
 800eee4:	0151      	lsls	r1, r2, #5
 800eee6:	68fa      	ldr	r2, [r7, #12]
 800eee8:	440a      	add	r2, r1
 800eeea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eef2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	015a      	lsls	r2, r3, #5
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	4413      	add	r3, r2
 800eefc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	0151      	lsls	r1, r2, #5
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	440a      	add	r2, r1
 800ef0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef12:	6013      	str	r3, [r2, #0]
 800ef14:	e02b      	b.n	800ef6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	015a      	lsls	r2, r3, #5
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	db12      	blt.n	800ef4e <USB_EPSetStall+0xae>
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00f      	beq.n	800ef4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	015a      	lsls	r2, r3, #5
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	4413      	add	r3, r2
 800ef36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	0151      	lsls	r1, r2, #5
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	440a      	add	r2, r1
 800ef44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	015a      	lsls	r2, r3, #5
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	4413      	add	r3, r2
 800ef56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	0151      	lsls	r1, r2, #5
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	440a      	add	r2, r1
 800ef64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	785b      	ldrb	r3, [r3, #1]
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d128      	bne.n	800efea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	015a      	lsls	r2, r3, #5
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4413      	add	r3, r2
 800efa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	0151      	lsls	r1, r2, #5
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	440a      	add	r2, r1
 800efae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	791b      	ldrb	r3, [r3, #4]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d003      	beq.n	800efc8 <USB_EPClearStall+0x4c>
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	791b      	ldrb	r3, [r3, #4]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d138      	bne.n	800f03a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	0151      	lsls	r1, r2, #5
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	440a      	add	r2, r1
 800efde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	e027      	b.n	800f03a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	015a      	lsls	r2, r3, #5
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	0151      	lsls	r1, r2, #5
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	440a      	add	r2, r1
 800f000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f004:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f008:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	791b      	ldrb	r3, [r3, #4]
 800f00e:	2b03      	cmp	r3, #3
 800f010:	d003      	beq.n	800f01a <USB_EPClearStall+0x9e>
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	791b      	ldrb	r3, [r3, #4]
 800f016:	2b02      	cmp	r3, #2
 800f018:	d10f      	bne.n	800f03a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	015a      	lsls	r2, r3, #5
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	0151      	lsls	r1, r2, #5
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	440a      	add	r2, r1
 800f030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f038:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800f054:	2300      	movs	r3, #0
 800f056:	617b      	str	r3, [r7, #20]
 800f058:	e016      	b.n	800f088 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	015a      	lsls	r2, r3, #5
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	4413      	add	r3, r2
 800f062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f066:	461a      	mov	r2, r3
 800f068:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f06c:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	015a      	lsls	r2, r3, #5
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	4413      	add	r3, r2
 800f076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f07a:	461a      	mov	r2, r3
 800f07c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f080:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	3301      	adds	r3, #1
 800f086:	617b      	str	r3, [r7, #20]
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2b0e      	cmp	r3, #14
 800f08c:	d9e5      	bls.n	800f05a <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f094:	461a      	mov	r2, r3
 800f096:	2300      	movs	r3, #0
 800f098:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff f94c 	bl	800e350 <USB_FlushRxFifo>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <USB_StopDevice+0x7e>
  {
    return ret;
 800f0c2:	7bfb      	ldrb	r3, [r7, #15]
 800f0c4:	e00b      	b.n	800f0de <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f0c6:	2110      	movs	r1, #16
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7ff f90f 	bl	800e2ec <USB_FlushTxFifo>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d001      	beq.n	800f0dc <USB_StopDevice+0x94>
  {
    return ret;
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	e000      	b.n	800f0de <USB_StopDevice+0x96>
  }

  return ret;
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3718      	adds	r7, #24
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f0e6:	b480      	push	{r7}
 800f0e8:	b085      	sub	sp, #20
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f104:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f108:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	78fb      	ldrb	r3, [r7, #3]
 800f114:	011b      	lsls	r3, r3, #4
 800f116:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f11a:	68f9      	ldr	r1, [r7, #12]
 800f11c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f120:	4313      	orrs	r3, r2
 800f122:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3714      	adds	r7, #20
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr

0800f132 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f132:	b480      	push	{r7}
 800f134:	b085      	sub	sp, #20
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f14c:	f023 0303 	bic.w	r3, r3, #3
 800f150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f160:	f023 0302 	bic.w	r3, r3, #2
 800f164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f18e:	f023 0303 	bic.w	r3, r3, #3
 800f192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1a2:	f043 0302 	orr.w	r3, r3, #2
 800f1a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b085      	sub	sp, #20
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	695b      	ldr	r3, [r3, #20]
 800f1c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1ee:	699b      	ldr	r3, [r3, #24]
 800f1f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1f8:	69db      	ldr	r3, [r3, #28]
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	4013      	ands	r3, r2
 800f1fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	0c1b      	lsrs	r3, r3, #16
}
 800f204:	4618      	mov	r0, r3
 800f206:	3714      	adds	r7, #20
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f22c:	69db      	ldr	r3, [r3, #28]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	4013      	ands	r3, r2
 800f232:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	b29b      	uxth	r3, r3
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3714      	adds	r7, #20
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f254:	78fb      	ldrb	r3, [r7, #3]
 800f256:	015a      	lsls	r2, r3, #5
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	4413      	add	r3, r2
 800f25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f26a:	695b      	ldr	r3, [r3, #20]
 800f26c:	68ba      	ldr	r2, [r7, #8]
 800f26e:	4013      	ands	r3, r2
 800f270:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f272:	68bb      	ldr	r3, [r7, #8]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f296:	691b      	ldr	r3, [r3, #16]
 800f298:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2a4:	78fb      	ldrb	r3, [r7, #3]
 800f2a6:	f003 030f 	and.w	r3, r3, #15
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800f2b0:	01db      	lsls	r3, r3, #7
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2ba:	78fb      	ldrb	r3, [r7, #3]
 800f2bc:	015a      	lsls	r2, r3, #5
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	693a      	ldr	r2, [r7, #16]
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2ce:	68bb      	ldr	r3, [r7, #8]
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	371c      	adds	r7, #28
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	f003 0301 	and.w	r3, r3, #1
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f312:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f316:	f023 0307 	bic.w	r3, r3, #7
 800f31a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f32a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f32e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
	...

0800f340 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	460b      	mov	r3, r1
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	333c      	adds	r3, #60	@ 0x3c
 800f356:	3304      	adds	r3, #4
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	4a26      	ldr	r2, [pc, #152]	@ (800f3f8 <USB_EP0_OutStart+0xb8>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d90a      	bls.n	800f37a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f374:	d101      	bne.n	800f37a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	e037      	b.n	800f3ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f380:	461a      	mov	r2, r3
 800f382:	2300      	movs	r3, #0
 800f384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3a8:	f043 0318 	orr.w	r3, r3, #24
 800f3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	697a      	ldr	r2, [r7, #20]
 800f3b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f3c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3c2:	7afb      	ldrb	r3, [r7, #11]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d10f      	bne.n	800f3e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	697a      	ldr	r2, [r7, #20]
 800f3de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f3e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	371c      	adds	r7, #28
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	4f54300a 	.word	0x4f54300a

0800f3fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f404:	2300      	movs	r3, #0
 800f406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	3301      	adds	r3, #1
 800f40c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f414:	d901      	bls.n	800f41a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f416:	2303      	movs	r3, #3
 800f418:	e01b      	b.n	800f452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	691b      	ldr	r3, [r3, #16]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	daf2      	bge.n	800f408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f422:	2300      	movs	r3, #0
 800f424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	f043 0201 	orr.w	r2, r3, #1
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	3301      	adds	r3, #1
 800f436:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f43e:	d901      	bls.n	800f444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f440:	2303      	movs	r3, #3
 800f442:	e006      	b.n	800f452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	f003 0301 	and.w	r3, r3, #1
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d0f0      	beq.n	800f432 <USB_CoreReset+0x36>

  return HAL_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3714      	adds	r7, #20
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
	...

0800f460 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a13      	ldr	r2, [pc, #76]	@ (800f4b8 <HAL_UART_RxCpltCallback+0x58>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d11f      	bne.n	800f4b0 <HAL_UART_RxCpltCallback+0x50>
 800f470:	4b12      	ldr	r3, [pc, #72]	@ (800f4bc <HAL_UART_RxCpltCallback+0x5c>)
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d01b      	beq.n	800f4b0 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f478:	2201      	movs	r2, #1
 800f47a:	4911      	ldr	r1, [pc, #68]	@ (800f4c0 <HAL_UART_RxCpltCallback+0x60>)
 800f47c:	480e      	ldr	r0, [pc, #56]	@ (800f4b8 <HAL_UART_RxCpltCallback+0x58>)
 800f47e:	f7fc ff68 	bl	800c352 <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f482:	4b10      	ldr	r3, [pc, #64]	@ (800f4c4 <HAL_UART_RxCpltCallback+0x64>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d10a      	bne.n	800f4a0 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f48a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4c0 <HAL_UART_RxCpltCallback+0x60>)
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f490:	4b0d      	ldr	r3, [pc, #52]	@ (800f4c8 <HAL_UART_RxCpltCallback+0x68>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	7bfa      	ldrb	r2, [r7, #15]
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f003 f84d 	bl	8012538 <embeddedCliReceiveChar>
 800f49e:	e002      	b.n	800f4a6 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f4cc <HAL_UART_RxCpltCallback+0x6c>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f4a6:	f7f4 fe29 	bl	80040fc <HAL_GetTick>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	4a08      	ldr	r2, [pc, #32]	@ (800f4d0 <HAL_UART_RxCpltCallback+0x70>)
 800f4ae:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f4b0:	bf00      	nop
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	20001a74 	.word	0x20001a74
 800f4bc:	20001b39 	.word	0x20001b39
 800f4c0:	20001b38 	.word	0x20001b38
 800f4c4:	20001b3a 	.word	0x20001b3a
 800f4c8:	20001b2c 	.word	0x20001b2c
 800f4cc:	20001b3b 	.word	0x20001b3b
 800f4d0:	200017c0 	.word	0x200017c0

0800f4d4 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f4e4:	f107 010f 	add.w	r1, r7, #15
 800f4e8:	2364      	movs	r3, #100	@ 0x64
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	4803      	ldr	r0, [pc, #12]	@ (800f4fc <writeCharToCli+0x28>)
 800f4ee:	f7fc fea5 	bl	800c23c <HAL_UART_Transmit>
}
 800f4f2:	bf00      	nop
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	20001a74 	.word	0x20001a74

0800f500 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f500:	b40e      	push	{r1, r2, r3}
 800f502:	b580      	push	{r7, lr}
 800f504:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f508:	af00      	add	r7, sp, #0
 800f50a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f50e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f512:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f514:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f518:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f51c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f520:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f522:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f526:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f52a:	f107 000c 	add.w	r0, r7, #12
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f534:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f538:	f00f fb10 	bl	801eb5c <vsniprintf>
 800f53c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f540:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f544:	2b00      	cmp	r3, #0
 800f546:	da08      	bge.n	800f55a <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f548:	4b0c      	ldr	r3, [pc, #48]	@ (800f57c <cli_printf+0x7c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	221d      	movs	r2, #29
 800f550:	2101      	movs	r1, #1
 800f552:	480b      	ldr	r0, [pc, #44]	@ (800f580 <cli_printf+0x80>)
 800f554:	f00f f9f6 	bl	801e944 <fwrite>
 800f558:	e009      	b.n	800f56e <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f55a:	f107 020c 	add.w	r2, r7, #12
 800f55e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f562:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f566:	4611      	mov	r1, r2
 800f568:	6818      	ldr	r0, [r3, #0]
 800f56a:	f003 f8cb 	bl	8012704 <embeddedCliPrint>
}
 800f56e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f572:	46bd      	mov	sp, r7
 800f574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f578:	b003      	add	sp, #12
 800f57a:	4770      	bx	lr
 800f57c:	20000148 	.word	0x20000148
 800f580:	08022364 	.word	0x08022364

0800f584 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f584:	b580      	push	{r7, lr}
 800f586:	b088      	sub	sp, #32
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f590:	2300      	movs	r3, #0
 800f592:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f594:	f7f4 fdb2 	bl	80040fc <HAL_GetTick>
 800f598:	4603      	mov	r3, r0
 800f59a:	4a5f      	ldr	r2, [pc, #380]	@ (800f718 <receiveString+0x194>)
 800f59c:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f59e:	4b5f      	ldr	r3, [pc, #380]	@ (800f71c <receiveString+0x198>)
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f000 80a0 	beq.w	800f6e8 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f5a8:	4b5d      	ldr	r3, [pc, #372]	@ (800f720 <receiveString+0x19c>)
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	2b0d      	cmp	r3, #13
 800f5ae:	d004      	beq.n	800f5ba <receiveString+0x36>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	69fa      	ldr	r2, [r7, #28]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d164      	bne.n	800f684 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f5ba:	68ba      	ldr	r2, [r7, #8]
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	4413      	add	r3, r2
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f5c4:	4b55      	ldr	r3, [pc, #340]	@ (800f71c <receiveString+0x198>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	61bb      	str	r3, [r7, #24]
 800f5ce:	e052      	b.n	800f676 <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	617b      	str	r3, [r7, #20]
 800f5d4:	e00b      	b.n	800f5ee <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	441a      	add	r2, r3
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	68b9      	ldr	r1, [r7, #8]
 800f5e2:	440b      	add	r3, r1
 800f5e4:	7812      	ldrb	r2, [r2, #0]
 800f5e6:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	617b      	str	r3, [r7, #20]
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1ed      	bne.n	800f5d6 <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	4413      	add	r3, r2
 800f600:	2200      	movs	r2, #0
 800f602:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b60      	cmp	r3, #96	@ 0x60
 800f60e:	d905      	bls.n	800f61c <receiveString+0x98>
 800f610:	69bb      	ldr	r3, [r7, #24]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	4413      	add	r3, r2
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b7a      	cmp	r3, #122	@ 0x7a
 800f61a:	d929      	bls.n	800f670 <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	4413      	add	r3, r2
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b40      	cmp	r3, #64	@ 0x40
 800f626:	d905      	bls.n	800f634 <receiveString+0xb0>
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	68ba      	ldr	r2, [r7, #8]
 800f62c:	4413      	add	r3, r2
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b5a      	cmp	r3, #90	@ 0x5a
 800f632:	d91d      	bls.n	800f670 <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	4413      	add	r3, r2
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b5f      	cmp	r3, #95	@ 0x5f
 800f63e:	d017      	beq.n	800f670 <receiveString+0xec>
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b3a      	cmp	r3, #58	@ 0x3a
 800f64a:	d011      	beq.n	800f670 <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	4413      	add	r3, r2
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	2b2f      	cmp	r3, #47	@ 0x2f
 800f656:	d905      	bls.n	800f664 <receiveString+0xe0>
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	4413      	add	r3, r2
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	2b39      	cmp	r3, #57	@ 0x39
 800f662:	d905      	bls.n	800f670 <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	4413      	add	r3, r2
 800f66a:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1af      	bne.n	800f5d0 <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	3301      	adds	r3, #1
 800f674:	61bb      	str	r3, [r7, #24]
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	4413      	add	r3, r2
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1c0      	bne.n	800f604 <receiveString+0x80>
					}
				}
				break;
 800f682:	e044      	b.n	800f70e <receiveString+0x18a>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f684:	4b26      	ldr	r3, [pc, #152]	@ (800f720 <receiveString+0x19c>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	2b08      	cmp	r3, #8
 800f68a:	d003      	beq.n	800f694 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f68c:	4b24      	ldr	r3, [pc, #144]	@ (800f720 <receiveString+0x19c>)
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	2b7f      	cmp	r3, #127	@ 0x7f
 800f692:	d117      	bne.n	800f6c4 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2108      	movs	r1, #8
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2120      	movs	r1, #32
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2108      	movs	r1, #8
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	4798      	blx	r3
					--index;
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	4413      	add	r3, r2
 800f6be:	2200      	movs	r2, #0
 800f6c0:	701a      	strb	r2, [r3, #0]
 800f6c2:	e00e      	b.n	800f6e2 <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	1c5a      	adds	r2, r3, #1
 800f6c8:	61fa      	str	r2, [r7, #28]
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	4a14      	ldr	r2, [pc, #80]	@ (800f720 <receiveString+0x19c>)
 800f6d0:	7812      	ldrb	r2, [r2, #0]
 800f6d2:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a11      	ldr	r2, [pc, #68]	@ (800f720 <receiveString+0x19c>)
 800f6da:	7812      	ldrb	r2, [r2, #0]
 800f6dc:	4611      	mov	r1, r2
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f71c <receiveString+0x198>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	701a      	strb	r2, [r3, #0]
		}

		//incase no usb then also break it
		if ((HAL_GetTick() - prev_max_wait_time > max_wait_time) || !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800f6e8:	f7f4 fd08 	bl	80040fc <HAL_GetTick>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f718 <receiveString+0x194>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	1ad2      	subs	r2, r2, r3
 800f6f4:	4b0b      	ldr	r3, [pc, #44]	@ (800f724 <receiveString+0x1a0>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d808      	bhi.n	800f70e <receiveString+0x18a>
 800f6fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f700:	4809      	ldr	r0, [pc, #36]	@ (800f728 <receiveString+0x1a4>)
 800f702:	f7f6 fcc7 	bl	8006094 <HAL_GPIO_ReadPin>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d000      	beq.n	800f70e <receiveString+0x18a>
		if (flag_cli) {
 800f70c:	e747      	b.n	800f59e <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
		}

	}
}
 800f70e:	bf00      	nop
 800f710:	3720      	adds	r7, #32
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	20001b30 	.word	0x20001b30
 800f71c:	20001b3b 	.word	0x20001b3b
 800f720:	20001b38 	.word	0x20001b38
 800f724:	2000001c 	.word	0x2000001c
 800f728:	40020000 	.word	0x40020000

0800f72c <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f738:	4903      	ldr	r1, [pc, #12]	@ (800f748 <onClearCLI+0x1c>)
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7ff fee0 	bl	800f500 <cli_printf>
}
 800f740:	bf00      	nop
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	08022384 	.word	0x08022384

0800f74c <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b092      	sub	sp, #72	@ 0x48
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f758:	4b24      	ldr	r3, [pc, #144]	@ (800f7ec <debug_scd4x_PM25+0xa0>)
 800f75a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f75c:	4924      	ldr	r1, [pc, #144]	@ (800f7f0 <debug_scd4x_PM25+0xa4>)
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f7ff fece 	bl	800f500 <cli_printf>

	cli_other = 1;
 800f764:	4b23      	ldr	r3, [pc, #140]	@ (800f7f4 <debug_scd4x_PM25+0xa8>)
 800f766:	2201      	movs	r2, #1
 800f768:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f76a:	4b23      	ldr	r3, [pc, #140]	@ (800f7f8 <debug_scd4x_PM25+0xac>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f770:	f107 0310 	add.w	r3, r7, #16
 800f774:	2232      	movs	r2, #50	@ 0x32
 800f776:	4619      	mov	r1, r3
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff ff03 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f77e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f780:	f7f0 fd8e 	bl	80002a0 <strlen>
 800f784:	4603      	mov	r3, r0
 800f786:	b29a      	uxth	r2, r3
 800f788:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f78c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f78e:	481b      	ldr	r0, [pc, #108]	@ (800f7fc <debug_scd4x_PM25+0xb0>)
 800f790:	f7fc fd54 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f794:	f107 0310 	add.w	r3, r7, #16
 800f798:	2179      	movs	r1, #121	@ 0x79
 800f79a:	4618      	mov	r0, r3
 800f79c:	f00f faa2 	bl	801ece4 <strchr>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d007      	beq.n	800f7b6 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f7a6:	4b16      	ldr	r3, [pc, #88]	@ (800f800 <debug_scd4x_PM25+0xb4>)
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f7ac:	4915      	ldr	r1, [pc, #84]	@ (800f804 <debug_scd4x_PM25+0xb8>)
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f7ff fea6 	bl	800f500 <cli_printf>
 800f7b4:	e00f      	b.n	800f7d6 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f7b6:	f107 0310 	add.w	r3, r7, #16
 800f7ba:	216e      	movs	r1, #110	@ 0x6e
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f00f fa91 	bl	801ece4 <strchr>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d006      	beq.n	800f7d6 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f7c8:	4b0d      	ldr	r3, [pc, #52]	@ (800f800 <debug_scd4x_PM25+0xb4>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f7ce:	490e      	ldr	r1, [pc, #56]	@ (800f808 <debug_scd4x_PM25+0xbc>)
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f7ff fe95 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 800f7d6:	4b08      	ldr	r3, [pc, #32]	@ (800f7f8 <debug_scd4x_PM25+0xac>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f7dc:	4b05      	ldr	r3, [pc, #20]	@ (800f7f4 <debug_scd4x_PM25+0xa8>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	701a      	strb	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	3748      	adds	r7, #72	@ 0x48
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	0802238c 	.word	0x0802238c
 800f7f0:	08022390 	.word	0x08022390
 800f7f4:	20001b3a 	.word	0x20001b3a
 800f7f8:	20001b3b 	.word	0x20001b3b
 800f7fc:	20001a74 	.word	0x20001a74
 800f800:	20001578 	.word	0x20001578
 800f804:	080223c4 	.word	0x080223c4
 800f808:	080223d4 	.word	0x080223d4

0800f80c <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f818:	f7f2 fe26 	bl	8002468 <ver_GetUid>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
 800f820:	4903      	ldr	r1, [pc, #12]	@ (800f830 <DeviceSignature+0x24>)
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f7ff fe6c 	bl	800f500 <cli_printf>
}
 800f828:	bf00      	nop
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	080223e4 	.word	0x080223e4

0800f834 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f834:	b580      	push	{r7, lr}
 800f836:	b092      	sub	sp, #72	@ 0x48
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f840:	4b2d      	ldr	r3, [pc, #180]	@ (800f8f8 <SetID+0xc4>)
 800f842:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f844:	492d      	ldr	r1, [pc, #180]	@ (800f8fc <SetID+0xc8>)
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f7ff fe5a 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f84c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f84e:	f7f0 fd27 	bl	80002a0 <strlen>
 800f852:	4603      	mov	r3, r0
 800f854:	b29a      	uxth	r2, r3
 800f856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f85a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f85c:	4828      	ldr	r0, [pc, #160]	@ (800f900 <SetID+0xcc>)
 800f85e:	f7fc fced 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f862:	4928      	ldr	r1, [pc, #160]	@ (800f904 <SetID+0xd0>)
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	f7ff fe4b 	bl	800f500 <cli_printf>
	cli_other = 1;
 800f86a:	4b27      	ldr	r3, [pc, #156]	@ (800f908 <SetID+0xd4>)
 800f86c:	2201      	movs	r2, #1
 800f86e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f870:	4b26      	ldr	r3, [pc, #152]	@ (800f90c <SetID+0xd8>)
 800f872:	2200      	movs	r2, #0
 800f874:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f876:	f107 0310 	add.w	r3, r7, #16
 800f87a:	2232      	movs	r2, #50	@ 0x32
 800f87c:	4619      	mov	r1, r3
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7ff fe80 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f884:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f886:	f7f0 fd0b 	bl	80002a0 <strlen>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f894:	481a      	ldr	r0, [pc, #104]	@ (800f900 <SetID+0xcc>)
 800f896:	f7fc fcd1 	bl	800c23c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f89a:	f107 0310 	add.w	r3, r7, #16
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f0 fcfe 	bl	80002a0 <strlen>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f8aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8ae:	2b1d      	cmp	r3, #29
 800f8b0:	d814      	bhi.n	800f8dc <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f8b2:	7c3b      	ldrb	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d015      	beq.n	800f8e4 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f8b8:	f107 0310 	add.w	r3, r7, #16
 800f8bc:	4619      	mov	r1, r3
 800f8be:	4814      	ldr	r0, [pc, #80]	@ (800f910 <SetID+0xdc>)
 800f8c0:	f00f fb17 	bl	801eef2 <strcpy>
				set_param_flags();
 800f8c4:	4b13      	ldr	r3, [pc, #76]	@ (800f914 <SetID+0xe0>)
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	701a      	strb	r2, [r3, #0]
 800f8ca:	4b13      	ldr	r3, [pc, #76]	@ (800f918 <SetID+0xe4>)
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f8d0:	4a0f      	ldr	r2, [pc, #60]	@ (800f910 <SetID+0xdc>)
 800f8d2:	4912      	ldr	r1, [pc, #72]	@ (800f91c <SetID+0xe8>)
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f7ff fe13 	bl	800f500 <cli_printf>
 800f8da:	e003      	b.n	800f8e4 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f8dc:	4910      	ldr	r1, [pc, #64]	@ (800f920 <SetID+0xec>)
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f7ff fe0e 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 800f8e4:	4b09      	ldr	r3, [pc, #36]	@ (800f90c <SetID+0xd8>)
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8ea:	4b07      	ldr	r3, [pc, #28]	@ (800f908 <SetID+0xd4>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	701a      	strb	r2, [r3, #0]

}
 800f8f0:	bf00      	nop
 800f8f2:	3748      	adds	r7, #72	@ 0x48
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0802238c 	.word	0x0802238c
 800f8fc:	08022400 	.word	0x08022400
 800f900:	20001a74 	.word	0x20001a74
 800f904:	08022438 	.word	0x08022438
 800f908:	20001b3a 	.word	0x20001b3a
 800f90c:	20001b3b 	.word	0x20001b3b
 800f910:	20001399 	.word	0x20001399
 800f914:	20001579 	.word	0x20001579
 800f918:	2000157a 	.word	0x2000157a
 800f91c:	08022460 	.word	0x08022460
 800f920:	08022474 	.word	0x08022474

0800f924 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f924:	b580      	push	{r7, lr}
 800f926:	b092      	sub	sp, #72	@ 0x48
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f930:	4b2d      	ldr	r3, [pc, #180]	@ (800f9e8 <SetLocation+0xc4>)
 800f932:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f934:	492d      	ldr	r1, [pc, #180]	@ (800f9ec <SetLocation+0xc8>)
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f7ff fde2 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f93c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f93e:	f7f0 fcaf 	bl	80002a0 <strlen>
 800f942:	4603      	mov	r3, r0
 800f944:	b29a      	uxth	r2, r3
 800f946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f94a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f94c:	4828      	ldr	r0, [pc, #160]	@ (800f9f0 <SetLocation+0xcc>)
 800f94e:	f7fc fc75 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f952:	4928      	ldr	r1, [pc, #160]	@ (800f9f4 <SetLocation+0xd0>)
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f7ff fdd3 	bl	800f500 <cli_printf>
	cli_other = 1;
 800f95a:	4b27      	ldr	r3, [pc, #156]	@ (800f9f8 <SetLocation+0xd4>)
 800f95c:	2201      	movs	r2, #1
 800f95e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f960:	4b26      	ldr	r3, [pc, #152]	@ (800f9fc <SetLocation+0xd8>)
 800f962:	2200      	movs	r2, #0
 800f964:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f966:	f107 0310 	add.w	r3, r7, #16
 800f96a:	2232      	movs	r2, #50	@ 0x32
 800f96c:	4619      	mov	r1, r3
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f7ff fe08 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f974:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f976:	f7f0 fc93 	bl	80002a0 <strlen>
 800f97a:	4603      	mov	r3, r0
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f982:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f984:	481a      	ldr	r0, [pc, #104]	@ (800f9f0 <SetLocation+0xcc>)
 800f986:	f7fc fc59 	bl	800c23c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f98a:	f107 0310 	add.w	r3, r7, #16
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f0 fc86 	bl	80002a0 <strlen>
 800f994:	4603      	mov	r3, r0
 800f996:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f99a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f99e:	2b0e      	cmp	r3, #14
 800f9a0:	d814      	bhi.n	800f9cc <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f9a2:	7c3b      	ldrb	r3, [r7, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d015      	beq.n	800f9d4 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f9a8:	f107 0310 	add.w	r3, r7, #16
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4814      	ldr	r0, [pc, #80]	@ (800fa00 <SetLocation+0xdc>)
 800f9b0:	f00f fa9f 	bl	801eef2 <strcpy>
				set_param_flags();
 800f9b4:	4b13      	ldr	r3, [pc, #76]	@ (800fa04 <SetLocation+0xe0>)
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	701a      	strb	r2, [r3, #0]
 800f9ba:	4b13      	ldr	r3, [pc, #76]	@ (800fa08 <SetLocation+0xe4>)
 800f9bc:	2201      	movs	r2, #1
 800f9be:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f9c0:	4a0f      	ldr	r2, [pc, #60]	@ (800fa00 <SetLocation+0xdc>)
 800f9c2:	4912      	ldr	r1, [pc, #72]	@ (800fa0c <SetLocation+0xe8>)
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7ff fd9b 	bl	800f500 <cli_printf>
 800f9ca:	e003      	b.n	800f9d4 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f9cc:	4910      	ldr	r1, [pc, #64]	@ (800fa10 <SetLocation+0xec>)
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff fd96 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 800f9d4:	4b09      	ldr	r3, [pc, #36]	@ (800f9fc <SetLocation+0xd8>)
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f9da:	4b07      	ldr	r3, [pc, #28]	@ (800f9f8 <SetLocation+0xd4>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	701a      	strb	r2, [r3, #0]

}
 800f9e0:	bf00      	nop
 800f9e2:	3748      	adds	r7, #72	@ 0x48
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	0802238c 	.word	0x0802238c
 800f9ec:	08022400 	.word	0x08022400
 800f9f0:	20001a74 	.word	0x20001a74
 800f9f4:	08022484 	.word	0x08022484
 800f9f8:	20001b3a 	.word	0x20001b3a
 800f9fc:	20001b3b 	.word	0x20001b3b
 800fa00:	200013cb 	.word	0x200013cb
 800fa04:	20001579 	.word	0x20001579
 800fa08:	2000157a 	.word	0x2000157a
 800fa0c:	080224b8 	.word	0x080224b8
 800fa10:	080224d0 	.word	0x080224d0

0800fa14 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b092      	sub	sp, #72	@ 0x48
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fa20:	4b2d      	ldr	r3, [pc, #180]	@ (800fad8 <Setgroup+0xc4>)
 800fa22:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fa24:	492d      	ldr	r1, [pc, #180]	@ (800fadc <Setgroup+0xc8>)
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f7ff fd6a 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa2c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa2e:	f7f0 fc37 	bl	80002a0 <strlen>
 800fa32:	4603      	mov	r3, r0
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa3c:	4828      	ldr	r0, [pc, #160]	@ (800fae0 <Setgroup+0xcc>)
 800fa3e:	f7fc fbfd 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800fa42:	4928      	ldr	r1, [pc, #160]	@ (800fae4 <Setgroup+0xd0>)
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff fd5b 	bl	800f500 <cli_printf>
	cli_other = 1;
 800fa4a:	4b27      	ldr	r3, [pc, #156]	@ (800fae8 <Setgroup+0xd4>)
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa50:	4b26      	ldr	r3, [pc, #152]	@ (800faec <Setgroup+0xd8>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fa56:	f107 0310 	add.w	r3, r7, #16
 800fa5a:	2232      	movs	r2, #50	@ 0x32
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff fd90 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa64:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa66:	f7f0 fc1b 	bl	80002a0 <strlen>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa74:	481a      	ldr	r0, [pc, #104]	@ (800fae0 <Setgroup+0xcc>)
 800fa76:	f7fc fbe1 	bl	800c23c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fa7a:	f107 0310 	add.w	r3, r7, #16
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f0 fc0e 	bl	80002a0 <strlen>
 800fa84:	4603      	mov	r3, r0
 800fa86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800fa8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa8e:	2b0e      	cmp	r3, #14
 800fa90:	d814      	bhi.n	800fabc <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800fa92:	7c3b      	ldrb	r3, [r7, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d015      	beq.n	800fac4 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800fa98:	f107 0310 	add.w	r3, r7, #16
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4814      	ldr	r0, [pc, #80]	@ (800faf0 <Setgroup+0xdc>)
 800faa0:	f00f fa27 	bl	801eef2 <strcpy>
				set_param_flags();
 800faa4:	4b13      	ldr	r3, [pc, #76]	@ (800faf4 <Setgroup+0xe0>)
 800faa6:	2201      	movs	r2, #1
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	4b13      	ldr	r3, [pc, #76]	@ (800faf8 <Setgroup+0xe4>)
 800faac:	2201      	movs	r2, #1
 800faae:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800fab0:	4a0f      	ldr	r2, [pc, #60]	@ (800faf0 <Setgroup+0xdc>)
 800fab2:	4912      	ldr	r1, [pc, #72]	@ (800fafc <Setgroup+0xe8>)
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f7ff fd23 	bl	800f500 <cli_printf>
 800faba:	e003      	b.n	800fac4 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800fabc:	4910      	ldr	r1, [pc, #64]	@ (800fb00 <Setgroup+0xec>)
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f7ff fd1e 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 800fac4:	4b09      	ldr	r3, [pc, #36]	@ (800faec <Setgroup+0xd8>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800faca:	4b07      	ldr	r3, [pc, #28]	@ (800fae8 <Setgroup+0xd4>)
 800facc:	2200      	movs	r2, #0
 800face:	701a      	strb	r2, [r3, #0]

}
 800fad0:	bf00      	nop
 800fad2:	3748      	adds	r7, #72	@ 0x48
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	0802238c 	.word	0x0802238c
 800fadc:	08022400 	.word	0x08022400
 800fae0:	20001a74 	.word	0x20001a74
 800fae4:	0802253c 	.word	0x0802253c
 800fae8:	20001b3a 	.word	0x20001b3a
 800faec:	20001b3b 	.word	0x20001b3b
 800faf0:	2000142f 	.word	0x2000142f
 800faf4:	20001579 	.word	0x20001579
 800faf8:	2000157a 	.word	0x2000157a
 800fafc:	0802256c 	.word	0x0802256c
 800fb00:	08022580 	.word	0x08022580

0800fb04 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800fb10:	4a04      	ldr	r2, [pc, #16]	@ (800fb24 <GetID+0x20>)
 800fb12:	4905      	ldr	r1, [pc, #20]	@ (800fb28 <GetID+0x24>)
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7ff fcf3 	bl	800f500 <cli_printf>
}
 800fb1a:	bf00      	nop
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	20001399 	.word	0x20001399
 800fb28:	08022594 	.word	0x08022594

0800fb2c <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800fb38:	4a04      	ldr	r2, [pc, #16]	@ (800fb4c <GetLocation+0x20>)
 800fb3a:	4905      	ldr	r1, [pc, #20]	@ (800fb50 <GetLocation+0x24>)
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f7ff fcdf 	bl	800f500 <cli_printf>

}
 800fb42:	bf00      	nop
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	200013cb 	.word	0x200013cb
 800fb50:	0802259c 	.word	0x0802259c

0800fb54 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800fb60:	4a04      	ldr	r2, [pc, #16]	@ (800fb74 <Getgroup+0x20>)
 800fb62:	4905      	ldr	r1, [pc, #20]	@ (800fb78 <Getgroup+0x24>)
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7ff fccb 	bl	800f500 <cli_printf>

}
 800fb6a:	bf00      	nop
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	2000142f 	.word	0x2000142f
 800fb78:	080225b8 	.word	0x080225b8

0800fb7c <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b09a      	sub	sp, #104	@ 0x68
 800fb80:	af02      	add	r7, sp, #8
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fb88:	4b26      	ldr	r3, [pc, #152]	@ (800fc24 <SetDate+0xa8>)
 800fb8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fb8c:	4926      	ldr	r1, [pc, #152]	@ (800fc28 <SetDate+0xac>)
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f7ff fcb6 	bl	800f500 <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800fb94:	4b25      	ldr	r3, [pc, #148]	@ (800fc2c <SetDate+0xb0>)
 800fb96:	2201      	movs	r2, #1
 800fb98:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fb9a:	4b25      	ldr	r3, [pc, #148]	@ (800fc30 <SetDate+0xb4>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fba0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fba4:	2232      	movs	r2, #50	@ 0x32
 800fba6:	4619      	mov	r1, r3
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f7ff fceb 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fbae:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbb0:	f7f0 fb76 	bl	80002a0 <strlen>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbbc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fbbe:	481d      	ldr	r0, [pc, #116]	@ (800fc34 <SetDate+0xb8>)
 800fbc0:	f7fc fb3c 	bl	800c23c <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fbc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d004      	beq.n	800fbd6 <SetDate+0x5a>
		Set_Date(buffer);
 800fbcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f004 f863 	bl	8013c9c <Set_Date>
	}
	flag_cli = 0;
 800fbd6:	4b16      	ldr	r3, [pc, #88]	@ (800fc30 <SetDate+0xb4>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbdc:	4b13      	ldr	r3, [pc, #76]	@ (800fc2c <SetDate+0xb0>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fbe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	4619      	mov	r1, r3
 800fbea:	4813      	ldr	r0, [pc, #76]	@ (800fc38 <SetDate+0xbc>)
 800fbec:	f7f9 ffa5 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fbf0:	f107 0310 	add.w	r3, r7, #16
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	480f      	ldr	r0, [pc, #60]	@ (800fc38 <SetDate+0xbc>)
 800fbfa:	f7f9 febc 	bl	8009976 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fbfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc02:	461a      	mov	r2, r3
 800fc04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc08:	4619      	mov	r1, r3
			gDate.Year);
 800fc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	460b      	mov	r3, r1
 800fc12:	490a      	ldr	r1, [pc, #40]	@ (800fc3c <SetDate+0xc0>)
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff fc73 	bl	800f500 <cli_printf>

}
 800fc1a:	bf00      	nop
 800fc1c:	3760      	adds	r7, #96	@ 0x60
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	0802238c 	.word	0x0802238c
 800fc28:	080225c4 	.word	0x080225c4
 800fc2c:	20001b3a 	.word	0x20001b3a
 800fc30:	20001b3b 	.word	0x20001b3b
 800fc34:	20001a74 	.word	0x20001a74
 800fc38:	20001898 	.word	0x20001898
 800fc3c:	08022600 	.word	0x08022600

0800fc40 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b09a      	sub	sp, #104	@ 0x68
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fc4c:	4b26      	ldr	r3, [pc, #152]	@ (800fce8 <SetTime+0xa8>)
 800fc4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fc50:	4926      	ldr	r1, [pc, #152]	@ (800fcec <SetTime+0xac>)
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f7ff fc54 	bl	800f500 <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800fc58:	4b25      	ldr	r3, [pc, #148]	@ (800fcf0 <SetTime+0xb0>)
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc5e:	4b25      	ldr	r3, [pc, #148]	@ (800fcf4 <SetTime+0xb4>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc68:	2232      	movs	r2, #50	@ 0x32
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f7ff fc89 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc72:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fc74:	f7f0 fb14 	bl	80002a0 <strlen>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc80:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fc82:	481d      	ldr	r0, [pc, #116]	@ (800fcf8 <SetTime+0xb8>)
 800fc84:	f7fc fada 	bl	800c23c <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fc88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d004      	beq.n	800fc9a <SetTime+0x5a>
		Set_Time(buffer);
 800fc90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc94:	4618      	mov	r0, r3
 800fc96:	f004 f8bf 	bl	8013e18 <Set_Time>
	}
	flag_cli = 0;
 800fc9a:	4b16      	ldr	r3, [pc, #88]	@ (800fcf4 <SetTime+0xb4>)
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fca0:	4b13      	ldr	r3, [pc, #76]	@ (800fcf0 <SetTime+0xb0>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800fca6:	4b15      	ldr	r3, [pc, #84]	@ (800fcfc <SetTime+0xbc>)
 800fca8:	2201      	movs	r2, #1
 800fcaa:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fcac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4812      	ldr	r0, [pc, #72]	@ (800fd00 <SetTime+0xc0>)
 800fcb6:	f7f9 ff40 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fcba:	f107 0310 	add.w	r3, r7, #16
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	480f      	ldr	r0, [pc, #60]	@ (800fd00 <SetTime+0xc0>)
 800fcc4:	f7f9 fe57 	bl	8009976 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcc8:	7c3b      	ldrb	r3, [r7, #16]
 800fcca:	461a      	mov	r2, r3
 800fccc:	7c7b      	ldrb	r3, [r7, #17]
 800fcce:	4619      	mov	r1, r3
			gTime.Seconds);
 800fcd0:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	490b      	ldr	r1, [pc, #44]	@ (800fd04 <SetTime+0xc4>)
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f7ff fc11 	bl	800f500 <cli_printf>

}
 800fcde:	bf00      	nop
 800fce0:	3760      	adds	r7, #96	@ 0x60
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	0802238c 	.word	0x0802238c
 800fcec:	0802261c 	.word	0x0802261c
 800fcf0:	20001b3a 	.word	0x20001b3a
 800fcf4:	20001b3b 	.word	0x20001b3b
 800fcf8:	20001a74 	.word	0x20001a74
 800fcfc:	20000029 	.word	0x20000029
 800fd00:	20001898 	.word	0x20001898
 800fd04:	08022660 	.word	0x08022660

0800fd08 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08c      	sub	sp, #48	@ 0x30
 800fd0c:	af02      	add	r7, sp, #8
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd18:	2200      	movs	r2, #0
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	480f      	ldr	r0, [pc, #60]	@ (800fd5c <GetDate+0x54>)
 800fd1e:	f7f9 ff0c 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd22:	f107 0310 	add.w	r3, r7, #16
 800fd26:	2200      	movs	r2, #0
 800fd28:	4619      	mov	r1, r3
 800fd2a:	480c      	ldr	r0, [pc, #48]	@ (800fd5c <GetDate+0x54>)
 800fd2c:	f7f9 fe23 	bl	8009976 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800fd30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fd34:	461a      	mov	r2, r3
 800fd36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	460b      	mov	r3, r1
 800fd44:	4906      	ldr	r1, [pc, #24]	@ (800fd60 <GetDate+0x58>)
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f7ff fbda 	bl	800f500 <cli_printf>
	HAL_Delay(100);
 800fd4c:	2064      	movs	r0, #100	@ 0x64
 800fd4e:	f7f4 f9e1 	bl	8004114 <HAL_Delay>
}
 800fd52:	bf00      	nop
 800fd54:	3728      	adds	r7, #40	@ 0x28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20001898 	.word	0x20001898
 800fd60:	0802267c 	.word	0x0802267c

0800fd64 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b08c      	sub	sp, #48	@ 0x30
 800fd68:	af02      	add	r7, sp, #8
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd74:	2200      	movs	r2, #0
 800fd76:	4619      	mov	r1, r3
 800fd78:	480d      	ldr	r0, [pc, #52]	@ (800fdb0 <GetTime+0x4c>)
 800fd7a:	f7f9 fede 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd7e:	f107 0310 	add.w	r3, r7, #16
 800fd82:	2200      	movs	r2, #0
 800fd84:	4619      	mov	r1, r3
 800fd86:	480a      	ldr	r0, [pc, #40]	@ (800fdb0 <GetTime+0x4c>)
 800fd88:	f7f9 fdf5 	bl	8009976 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd8c:	7c3b      	ldrb	r3, [r7, #16]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	7c7b      	ldrb	r3, [r7, #17]
 800fd92:	4619      	mov	r1, r3
			gTime.Seconds);
 800fd94:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4906      	ldr	r1, [pc, #24]	@ (800fdb4 <GetTime+0x50>)
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f7ff fbaf 	bl	800f500 <cli_printf>
	HAL_Delay(100);
 800fda2:	2064      	movs	r0, #100	@ 0x64
 800fda4:	f7f4 f9b6 	bl	8004114 <HAL_Delay>
}
 800fda8:	bf00      	nop
 800fdaa:	3728      	adds	r7, #40	@ 0x28
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20001898 	.word	0x20001898
 800fdb4:	0802268c 	.word	0x0802268c

0800fdb8 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b092      	sub	sp, #72	@ 0x48
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fdc4:	4b54      	ldr	r3, [pc, #336]	@ (800ff18 <SetInterval+0x160>)
 800fdc6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fdc8:	4954      	ldr	r1, [pc, #336]	@ (800ff1c <SetInterval+0x164>)
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff fb98 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fdd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fdd2:	f7f0 fa65 	bl	80002a0 <strlen>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fde0:	484f      	ldr	r0, [pc, #316]	@ (800ff20 <SetInterval+0x168>)
 800fde2:	f7fc fa2b 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800fde6:	494f      	ldr	r1, [pc, #316]	@ (800ff24 <SetInterval+0x16c>)
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f7ff fb89 	bl	800f500 <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fdee:	494e      	ldr	r1, [pc, #312]	@ (800ff28 <SetInterval+0x170>)
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f7ff fb85 	bl	800f500 <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800fdf6:	494d      	ldr	r1, [pc, #308]	@ (800ff2c <SetInterval+0x174>)
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f7ff fb81 	bl	800f500 <cli_printf>
	cli_printf(cli,
 800fdfe:	494c      	ldr	r1, [pc, #304]	@ (800ff30 <SetInterval+0x178>)
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f7ff fb7d 	bl	800f500 <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800fe06:	4b4b      	ldr	r3, [pc, #300]	@ (800ff34 <SetInterval+0x17c>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fe0c:	4b4a      	ldr	r3, [pc, #296]	@ (800ff38 <SetInterval+0x180>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fe12:	f107 0310 	add.w	r3, r7, #16
 800fe16:	2232      	movs	r2, #50	@ 0x32
 800fe18:	4619      	mov	r1, r3
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff fbb2 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe20:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe22:	f7f0 fa3d 	bl	80002a0 <strlen>
 800fe26:	4603      	mov	r3, r0
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe30:	483b      	ldr	r0, [pc, #236]	@ (800ff20 <SetInterval+0x168>)
 800fe32:	f7fc fa03 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fe36:	f107 0310 	add.w	r3, r7, #16
 800fe3a:	2131      	movs	r1, #49	@ 0x31
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f00e ff51 	bl	801ece4 <strchr>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d015      	beq.n	800fe74 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800fe48:	4b3c      	ldr	r3, [pc, #240]	@ (800ff3c <SetInterval+0x184>)
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f042 0205 	orr.w	r2, r2, #5
 800fe50:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fe66:	4b36      	ldr	r3, [pc, #216]	@ (800ff40 <SetInterval+0x188>)
 800fe68:	2201      	movs	r2, #1
 800fe6a:	701a      	strb	r2, [r3, #0]
 800fe6c:	4b35      	ldr	r3, [pc, #212]	@ (800ff44 <SetInterval+0x18c>)
 800fe6e:	2201      	movs	r2, #1
 800fe70:	701a      	strb	r2, [r3, #0]
 800fe72:	e03c      	b.n	800feee <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800fe74:	f107 0310 	add.w	r3, r7, #16
 800fe78:	2132      	movs	r1, #50	@ 0x32
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f00e ff32 	bl	801ece4 <strchr>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d015      	beq.n	800feb2 <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800fe86:	4b2d      	ldr	r3, [pc, #180]	@ (800ff3c <SetInterval+0x184>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f042 020f 	orr.w	r2, r2, #15
 800fe8e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fea4:	4b26      	ldr	r3, [pc, #152]	@ (800ff40 <SetInterval+0x188>)
 800fea6:	2201      	movs	r2, #1
 800fea8:	701a      	strb	r2, [r3, #0]
 800feaa:	4b26      	ldr	r3, [pc, #152]	@ (800ff44 <SetInterval+0x18c>)
 800feac:	2201      	movs	r2, #1
 800feae:	701a      	strb	r2, [r3, #0]
 800feb0:	e01d      	b.n	800feee <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800feb2:	f107 0310 	add.w	r3, r7, #16
 800feb6:	2133      	movs	r1, #51	@ 0x33
 800feb8:	4618      	mov	r0, r3
 800feba:	f00e ff13 	bl	801ece4 <strchr>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d014      	beq.n	800feee <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800fec4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff3c <SetInterval+0x184>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800fecc:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fee2:	4b17      	ldr	r3, [pc, #92]	@ (800ff40 <SetInterval+0x188>)
 800fee4:	2201      	movs	r2, #1
 800fee6:	701a      	strb	r2, [r3, #0]
 800fee8:	4b16      	ldr	r3, [pc, #88]	@ (800ff44 <SetInterval+0x18c>)
 800feea:	2201      	movs	r2, #1
 800feec:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800feee:	4b12      	ldr	r3, [pc, #72]	@ (800ff38 <SetInterval+0x180>)
 800fef0:	2200      	movs	r2, #0
 800fef2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fef4:	4b0f      	ldr	r3, [pc, #60]	@ (800ff34 <SetInterval+0x17c>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800fefa:	4b10      	ldr	r3, [pc, #64]	@ (800ff3c <SetInterval+0x184>)
 800fefc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff00:	461a      	mov	r2, r3
 800ff02:	4911      	ldr	r1, [pc, #68]	@ (800ff48 <SetInterval+0x190>)
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f7ff fafb 	bl	800f500 <cli_printf>
	set_alarm_Time = 1;
 800ff0a:	4b10      	ldr	r3, [pc, #64]	@ (800ff4c <SetInterval+0x194>)
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	701a      	strb	r2, [r3, #0]
}
 800ff10:	bf00      	nop
 800ff12:	3748      	adds	r7, #72	@ 0x48
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	0802238c 	.word	0x0802238c
 800ff1c:	08022400 	.word	0x08022400
 800ff20:	20001a74 	.word	0x20001a74
 800ff24:	0802269c 	.word	0x0802269c
 800ff28:	080226b0 	.word	0x080226b0
 800ff2c:	080226c4 	.word	0x080226c4
 800ff30:	080226d8 	.word	0x080226d8
 800ff34:	20001b3a 	.word	0x20001b3a
 800ff38:	20001b3b 	.word	0x20001b3b
 800ff3c:	200012cc 	.word	0x200012cc
 800ff40:	20001579 	.word	0x20001579
 800ff44:	2000157a 	.word	0x2000157a
 800ff48:	08022720 	.word	0x08022720
 800ff4c:	20000029 	.word	0x20000029

0800ff50 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff5c:	4b05      	ldr	r3, [pc, #20]	@ (800ff74 <GetInterval+0x24>)
 800ff5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff62:	461a      	mov	r2, r3
 800ff64:	4904      	ldr	r1, [pc, #16]	@ (800ff78 <GetInterval+0x28>)
 800ff66:	68f8      	ldr	r0, [r7, #12]
 800ff68:	f7ff faca 	bl	800f500 <cli_printf>

}
 800ff6c:	bf00      	nop
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	200012cc 	.word	0x200012cc
 800ff78:	0802273c 	.word	0x0802273c

0800ff7c <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b09a      	sub	sp, #104	@ 0x68
 800ff80:	af02      	add	r7, sp, #8
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800ff88:	4b40      	ldr	r3, [pc, #256]	@ (801008c <SetFilename+0x110>)
 800ff8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800ff8c:	4940      	ldr	r1, [pc, #256]	@ (8010090 <SetFilename+0x114>)
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f7ff fab6 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff94:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ff96:	f7f0 f983 	bl	80002a0 <strlen>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	b29a      	uxth	r2, r3
 800ff9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffa2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ffa4:	483b      	ldr	r0, [pc, #236]	@ (8010094 <SetFilename+0x118>)
 800ffa6:	f7fc f949 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800ffaa:	493b      	ldr	r1, [pc, #236]	@ (8010098 <SetFilename+0x11c>)
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff faa7 	bl	800f500 <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800ffb2:	493a      	ldr	r1, [pc, #232]	@ (801009c <SetFilename+0x120>)
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f7ff faa3 	bl	800f500 <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800ffba:	4b39      	ldr	r3, [pc, #228]	@ (80100a0 <SetFilename+0x124>)
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ffc0:	4b38      	ldr	r3, [pc, #224]	@ (80100a4 <SetFilename+0x128>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800ffc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffca:	2232      	movs	r2, #50	@ 0x32
 800ffcc:	4619      	mov	r1, r3
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7ff fad8 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffd4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ffd6:	f7f0 f963 	bl	80002a0 <strlen>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffe2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ffe4:	482b      	ldr	r0, [pc, #172]	@ (8010094 <SetFilename+0x118>)
 800ffe6:	f7fc f929 	bl	800c23c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800ffea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7f0 f956 	bl	80002a0 <strlen>
 800fff4:	4603      	mov	r3, r0
 800fff6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 800fffa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800fffe:	2b13      	cmp	r3, #19
 8010000:	d836      	bhi.n	8010070 <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 8010002:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010006:	2b00      	cmp	r3, #0
 8010008:	d036      	beq.n	8010078 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 801000a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801000e:	4619      	mov	r1, r3
 8010010:	4825      	ldr	r0, [pc, #148]	@ (80100a8 <SetFilename+0x12c>)
 8010012:	f00e ff6e 	bl	801eef2 <strcpy>
				set_param_flags();
 8010016:	4b25      	ldr	r3, [pc, #148]	@ (80100ac <SetFilename+0x130>)
 8010018:	2201      	movs	r2, #1
 801001a:	701a      	strb	r2, [r3, #0]
 801001c:	4b24      	ldr	r3, [pc, #144]	@ (80100b0 <SetFilename+0x134>)
 801001e:	2201      	movs	r2, #1
 8010020:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 8010022:	4b24      	ldr	r3, [pc, #144]	@ (80100b4 <SetFilename+0x138>)
 8010024:	2201      	movs	r2, #1
 8010026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 801002a:	4a1f      	ldr	r2, [pc, #124]	@ (80100a8 <SetFilename+0x12c>)
 801002c:	4922      	ldr	r1, [pc, #136]	@ (80100b8 <SetFilename+0x13c>)
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f7ff fa66 	bl	800f500 <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010038:	2200      	movs	r2, #0
 801003a:	4619      	mov	r1, r3
 801003c:	481f      	ldr	r0, [pc, #124]	@ (80100bc <SetFilename+0x140>)
 801003e:	f7f9 fd7c 	bl	8009b3a <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8010042:	f107 0310 	add.w	r3, r7, #16
 8010046:	2200      	movs	r2, #0
 8010048:	4619      	mov	r1, r3
 801004a:	481c      	ldr	r0, [pc, #112]	@ (80100bc <SetFilename+0x140>)
 801004c:	f7f9 fc93 	bl	8009976 <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 8010050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010054:	4619      	mov	r1, r3
 8010056:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801005a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801005e:	9201      	str	r2, [sp, #4]
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	460b      	mov	r3, r1
 8010064:	4a10      	ldr	r2, [pc, #64]	@ (80100a8 <SetFilename+0x12c>)
 8010066:	4916      	ldr	r1, [pc, #88]	@ (80100c0 <SetFilename+0x144>)
 8010068:	4816      	ldr	r0, [pc, #88]	@ (80100c4 <SetFilename+0x148>)
 801006a:	f00e fce9 	bl	801ea40 <siprintf>
 801006e:	e003      	b.n	8010078 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 8010070:	4915      	ldr	r1, [pc, #84]	@ (80100c8 <SetFilename+0x14c>)
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f7ff fa44 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 8010078:	4b0a      	ldr	r3, [pc, #40]	@ (80100a4 <SetFilename+0x128>)
 801007a:	2200      	movs	r2, #0
 801007c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801007e:	4b08      	ldr	r3, [pc, #32]	@ (80100a0 <SetFilename+0x124>)
 8010080:	2200      	movs	r2, #0
 8010082:	701a      	strb	r2, [r3, #0]

}
 8010084:	bf00      	nop
 8010086:	3760      	adds	r7, #96	@ 0x60
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	0802238c 	.word	0x0802238c
 8010090:	08022400 	.word	0x08022400
 8010094:	20001a74 	.word	0x20001a74
 8010098:	08022758 	.word	0x08022758
 801009c:	080227cc 	.word	0x080227cc
 80100a0:	20001b3a 	.word	0x20001b3a
 80100a4:	20001b3b 	.word	0x20001b3b
 80100a8:	200012cc 	.word	0x200012cc
 80100ac:	20001579 	.word	0x20001579
 80100b0:	2000157a 	.word	0x2000157a
 80100b4:	20001530 	.word	0x20001530
 80100b8:	0802280c 	.word	0x0802280c
 80100bc:	20001898 	.word	0x20001898
 80100c0:	08022824 	.word	0x08022824
 80100c4:	200014c5 	.word	0x200014c5
 80100c8:	08022838 	.word	0x08022838

080100cc <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 80100d8:	4a04      	ldr	r2, [pc, #16]	@ (80100ec <GetFilename+0x20>)
 80100da:	4905      	ldr	r1, [pc, #20]	@ (80100f0 <GetFilename+0x24>)
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f7ff fa0f 	bl	800f500 <cli_printf>

}
 80100e2:	bf00      	nop
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	200014c5 	.word	0x200014c5
 80100f0:	0802280c 	.word	0x0802280c

080100f4 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b092      	sub	sp, #72	@ 0x48
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 8010100:	4b41      	ldr	r3, [pc, #260]	@ (8010208 <SetFileformat+0x114>)
 8010102:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010104:	4941      	ldr	r1, [pc, #260]	@ (801020c <SetFileformat+0x118>)
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f7ff f9fa 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801010c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801010e:	f7f0 f8c7 	bl	80002a0 <strlen>
 8010112:	4603      	mov	r3, r0
 8010114:	b29a      	uxth	r2, r3
 8010116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801011a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801011c:	483c      	ldr	r0, [pc, #240]	@ (8010210 <SetFileformat+0x11c>)
 801011e:	f7fc f88d 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 8010122:	493c      	ldr	r1, [pc, #240]	@ (8010214 <SetFileformat+0x120>)
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff f9eb 	bl	800f500 <cli_printf>
	cli_printf(cli, "1. (.csv)");
 801012a:	493b      	ldr	r1, [pc, #236]	@ (8010218 <SetFileformat+0x124>)
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f7ff f9e7 	bl	800f500 <cli_printf>
	cli_printf(cli, "2. (.json)");
 8010132:	493a      	ldr	r1, [pc, #232]	@ (801021c <SetFileformat+0x128>)
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f7ff f9e3 	bl	800f500 <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 801013a:	4939      	ldr	r1, [pc, #228]	@ (8010220 <SetFileformat+0x12c>)
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	f7ff f9df 	bl	800f500 <cli_printf>

	cli_other = 1;
 8010142:	4b38      	ldr	r3, [pc, #224]	@ (8010224 <SetFileformat+0x130>)
 8010144:	2201      	movs	r2, #1
 8010146:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010148:	4b37      	ldr	r3, [pc, #220]	@ (8010228 <SetFileformat+0x134>)
 801014a:	2200      	movs	r2, #0
 801014c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801014e:	f107 0310 	add.w	r3, r7, #16
 8010152:	2232      	movs	r2, #50	@ 0x32
 8010154:	4619      	mov	r1, r3
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f7ff fa14 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801015c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801015e:	f7f0 f89f 	bl	80002a0 <strlen>
 8010162:	4603      	mov	r3, r0
 8010164:	b29a      	uxth	r2, r3
 8010166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801016a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801016c:	4828      	ldr	r0, [pc, #160]	@ (8010210 <SetFileformat+0x11c>)
 801016e:	f7fc f865 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 8010172:	f107 0310 	add.w	r3, r7, #16
 8010176:	2131      	movs	r1, #49	@ 0x31
 8010178:	4618      	mov	r0, r3
 801017a:	f00e fdb3 	bl	801ece4 <strchr>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d014      	beq.n	80101ae <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 8010184:	4b29      	ldr	r3, [pc, #164]	@ (801022c <SetFileformat+0x138>)
 8010186:	4a2a      	ldr	r2, [pc, #168]	@ (8010230 <SetFileformat+0x13c>)
 8010188:	6810      	ldr	r0, [r2, #0]
 801018a:	6018      	str	r0, [r3, #0]
 801018c:	7912      	ldrb	r2, [r2, #4]
 801018e:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 8010190:	4b28      	ldr	r3, [pc, #160]	@ (8010234 <SetFileformat+0x140>)
 8010192:	2201      	movs	r2, #1
 8010194:	701a      	strb	r2, [r3, #0]
 8010196:	4b28      	ldr	r3, [pc, #160]	@ (8010238 <SetFileformat+0x144>)
 8010198:	2201      	movs	r2, #1
 801019a:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 801019c:	4b27      	ldr	r3, [pc, #156]	@ (801023c <SetFileformat+0x148>)
 801019e:	2201      	movs	r2, #1
 80101a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 80101a4:	4b25      	ldr	r3, [pc, #148]	@ (801023c <SetFileformat+0x148>)
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80101ac:	e01c      	b.n	80101e8 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 80101ae:	f107 0310 	add.w	r3, r7, #16
 80101b2:	2132      	movs	r1, #50	@ 0x32
 80101b4:	4618      	mov	r0, r3
 80101b6:	f00e fd95 	bl	801ece4 <strchr>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d013      	beq.n	80101e8 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 80101c0:	4b1a      	ldr	r3, [pc, #104]	@ (801022c <SetFileformat+0x138>)
 80101c2:	4a1f      	ldr	r2, [pc, #124]	@ (8010240 <SetFileformat+0x14c>)
 80101c4:	6810      	ldr	r0, [r2, #0]
 80101c6:	6018      	str	r0, [r3, #0]
 80101c8:	8892      	ldrh	r2, [r2, #4]
 80101ca:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 80101cc:	4b19      	ldr	r3, [pc, #100]	@ (8010234 <SetFileformat+0x140>)
 80101ce:	2201      	movs	r2, #1
 80101d0:	701a      	strb	r2, [r3, #0]
 80101d2:	4b19      	ldr	r3, [pc, #100]	@ (8010238 <SetFileformat+0x144>)
 80101d4:	2201      	movs	r2, #1
 80101d6:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101d8:	4b18      	ldr	r3, [pc, #96]	@ (801023c <SetFileformat+0x148>)
 80101da:	2201      	movs	r2, #1
 80101dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 80101e0:	4b16      	ldr	r3, [pc, #88]	@ (801023c <SetFileformat+0x148>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 80101e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010228 <SetFileformat+0x134>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80101ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010224 <SetFileformat+0x130>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 80101f4:	4a0d      	ldr	r2, [pc, #52]	@ (801022c <SetFileformat+0x138>)
 80101f6:	4913      	ldr	r1, [pc, #76]	@ (8010244 <SetFileformat+0x150>)
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7ff f981 	bl	800f500 <cli_printf>

}
 80101fe:	bf00      	nop
 8010200:	3748      	adds	r7, #72	@ 0x48
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	0802238c 	.word	0x0802238c
 801020c:	08022400 	.word	0x08022400
 8010210:	20001a74 	.word	0x20001a74
 8010214:	08022850 	.word	0x08022850
 8010218:	08022874 	.word	0x08022874
 801021c:	08022880 	.word	0x08022880
 8010220:	0802288c 	.word	0x0802288c
 8010224:	20001b3a 	.word	0x20001b3a
 8010228:	20001b3b 	.word	0x20001b3b
 801022c:	20001330 	.word	0x20001330
 8010230:	080228bc 	.word	0x080228bc
 8010234:	20001579 	.word	0x20001579
 8010238:	2000157a 	.word	0x2000157a
 801023c:	20001530 	.word	0x20001530
 8010240:	080228c4 	.word	0x080228c4
 8010244:	080228cc 	.word	0x080228cc

08010248 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010254:	4a04      	ldr	r2, [pc, #16]	@ (8010268 <GetFileformat+0x20>)
 8010256:	4905      	ldr	r1, [pc, #20]	@ (801026c <GetFileformat+0x24>)
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f7ff f951 	bl	800f500 <cli_printf>

}
 801025e:	bf00      	nop
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20001330 	.word	0x20001330
 801026c:	080228cc 	.word	0x080228cc

08010270 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 8010270:	b580      	push	{r7, lr}
 8010272:	b096      	sub	sp, #88	@ 0x58
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 801027c:	4b48      	ldr	r3, [pc, #288]	@ (80103a0 <fanclean+0x130>)
 801027e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010284:	4b47      	ldr	r3, [pc, #284]	@ (80103a4 <fanclean+0x134>)
 8010286:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010288:	2300      	movs	r3, #0
 801028a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 801028e:	4946      	ldr	r1, [pc, #280]	@ (80103a8 <fanclean+0x138>)
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f7ff f935 	bl	800f500 <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 8010296:	4b45      	ldr	r3, [pc, #276]	@ (80103ac <fanclean+0x13c>)
 8010298:	2201      	movs	r2, #1
 801029a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801029c:	4b44      	ldr	r3, [pc, #272]	@ (80103b0 <fanclean+0x140>)
 801029e:	2200      	movs	r2, #0
 80102a0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 80102a2:	f107 0314 	add.w	r3, r7, #20
 80102a6:	2232      	movs	r2, #50	@ 0x32
 80102a8:	4619      	mov	r1, r3
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f7ff f96a 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80102b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80102b2:	f7ef fff5 	bl	80002a0 <strlen>
 80102b6:	4603      	mov	r3, r0
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80102be:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80102c0:	483c      	ldr	r0, [pc, #240]	@ (80103b4 <fanclean+0x144>)
 80102c2:	f7fb ffbb 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 80102c6:	f107 0314 	add.w	r3, r7, #20
 80102ca:	216e      	movs	r1, #110	@ 0x6e
 80102cc:	4618      	mov	r0, r3
 80102ce:	f00e fd09 	bl	801ece4 <strchr>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00f      	beq.n	80102f8 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 80102d8:	4b37      	ldr	r3, [pc, #220]	@ (80103b8 <fanclean+0x148>)
 80102da:	2200      	movs	r2, #0
 80102dc:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 80102e0:	4b36      	ldr	r3, [pc, #216]	@ (80103bc <fanclean+0x14c>)
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 80102e8:	4935      	ldr	r1, [pc, #212]	@ (80103c0 <fanclean+0x150>)
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f7ff f908 	bl	800f500 <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80102f6:	e00f      	b.n	8010318 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 80102f8:	f107 0314 	add.w	r3, r7, #20
 80102fc:	2179      	movs	r1, #121	@ 0x79
 80102fe:	4618      	mov	r0, r3
 8010300:	f00e fcf0 	bl	801ece4 <strchr>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 801030a:	4b2c      	ldr	r3, [pc, #176]	@ (80103bc <fanclean+0x14c>)
 801030c:	2200      	movs	r2, #0
 801030e:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 8010312:	2301      	movs	r3, #1
 8010314:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 8010318:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801031c:	2b01      	cmp	r3, #1
 801031e:	d135      	bne.n	801038c <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010320:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010322:	f7ef ffbd 	bl	80002a0 <strlen>
 8010326:	4603      	mov	r3, r0
 8010328:	b29a      	uxth	r2, r3
 801032a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801032e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010330:	4820      	ldr	r0, [pc, #128]	@ (80103b4 <fanclean+0x144>)
 8010332:	f7fb ff83 	bl	800c23c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 8010336:	4923      	ldr	r1, [pc, #140]	@ (80103c4 <fanclean+0x154>)
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f7ff f8e1 	bl	800f500 <cli_printf>
		while (counter < 8) {
 801033e:	e013      	b.n	8010368 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010340:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010342:	f7ef ffad 	bl	80002a0 <strlen>
 8010346:	4603      	mov	r3, r0
 8010348:	b29a      	uxth	r2, r3
 801034a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801034e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010350:	4818      	ldr	r0, [pc, #96]	@ (80103b4 <fanclean+0x144>)
 8010352:	f7fb ff73 	bl	800c23c <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 8010356:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801035a:	f7f3 fedb 	bl	8004114 <HAL_Delay>
			toggle_blue_led();
 801035e:	f7f0 fead 	bl	80010bc <toggle_blue_led>
			counter++;
 8010362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010364:	3301      	adds	r3, #1
 8010366:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801036a:	2b07      	cmp	r3, #7
 801036c:	dde8      	ble.n	8010340 <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801036e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010370:	f7ef ff96 	bl	80002a0 <strlen>
 8010374:	4603      	mov	r3, r0
 8010376:	b29a      	uxth	r2, r3
 8010378:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801037c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801037e:	480d      	ldr	r0, [pc, #52]	@ (80103b4 <fanclean+0x144>)
 8010380:	f7fb ff5c 	bl	800c23c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 8010384:	4910      	ldr	r1, [pc, #64]	@ (80103c8 <fanclean+0x158>)
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f7ff f8ba 	bl	800f500 <cli_printf>

	}

	flag_cli = 0;
 801038c:	4b08      	ldr	r3, [pc, #32]	@ (80103b0 <fanclean+0x140>)
 801038e:	2200      	movs	r2, #0
 8010390:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010392:	4b06      	ldr	r3, [pc, #24]	@ (80103ac <fanclean+0x13c>)
 8010394:	2200      	movs	r2, #0
 8010396:	701a      	strb	r2, [r3, #0]
}
 8010398:	bf00      	nop
 801039a:	3758      	adds	r7, #88	@ 0x58
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	0802238c 	.word	0x0802238c
 80103a4:	080228e8 	.word	0x080228e8
 80103a8:	080228f4 	.word	0x080228f4
 80103ac:	20001b3a 	.word	0x20001b3a
 80103b0:	20001b3b 	.word	0x20001b3b
 80103b4:	20001a74 	.word	0x20001a74
 80103b8:	200012cc 	.word	0x200012cc
 80103bc:	20001530 	.word	0x20001530
 80103c0:	08022930 	.word	0x08022930
 80103c4:	08022958 	.word	0x08022958
 80103c8:	08022990 	.word	0x08022990

080103cc <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b096      	sub	sp, #88	@ 0x58
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 80103d8:	4b55      	ldr	r3, [pc, #340]	@ (8010530 <co2calibrate+0x164>)
 80103da:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 80103dc:	2300      	movs	r3, #0
 80103de:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80103e0:	4b54      	ldr	r3, [pc, #336]	@ (8010534 <co2calibrate+0x168>)
 80103e2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 80103e4:	2300      	movs	r3, #0
 80103e6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 80103ea:	4b53      	ldr	r3, [pc, #332]	@ (8010538 <co2calibrate+0x16c>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80103f0:	4b52      	ldr	r3, [pc, #328]	@ (801053c <co2calibrate+0x170>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 80103f6:	f107 0310 	add.w	r3, r7, #16
 80103fa:	2232      	movs	r2, #50	@ 0x32
 80103fc:	2100      	movs	r1, #0
 80103fe:	4618      	mov	r0, r3
 8010400:	f00e fc68 	bl	801ecd4 <memset>
	cli_printf(cli,
 8010404:	494e      	ldr	r1, [pc, #312]	@ (8010540 <co2calibrate+0x174>)
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f7ff f87a 	bl	800f500 <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 801040c:	494d      	ldr	r1, [pc, #308]	@ (8010544 <co2calibrate+0x178>)
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff f876 	bl	800f500 <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 8010414:	f107 0310 	add.w	r3, r7, #16
 8010418:	2232      	movs	r2, #50	@ 0x32
 801041a:	4619      	mov	r1, r3
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f7ff f8b1 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010422:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010424:	f7ef ff3c 	bl	80002a0 <strlen>
 8010428:	4603      	mov	r3, r0
 801042a:	b29a      	uxth	r2, r3
 801042c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010430:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010432:	4845      	ldr	r0, [pc, #276]	@ (8010548 <co2calibrate+0x17c>)
 8010434:	f7fb ff02 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010438:	7c3b      	ldrb	r3, [r7, #16]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d01e      	beq.n	801047c <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 801043e:	4b43      	ldr	r3, [pc, #268]	@ (801054c <co2calibrate+0x180>)
 8010440:	2201      	movs	r2, #1
 8010442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 8010446:	f107 0310 	add.w	r3, r7, #16
 801044a:	4618      	mov	r0, r3
 801044c:	f00d f9c0 	bl	801d7d0 <atoi>
 8010450:	4603      	mov	r3, r0
 8010452:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 8010454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010456:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801045a:	4293      	cmp	r3, r2
 801045c:	d803      	bhi.n	8010466 <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 801045e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010460:	b29a      	uxth	r2, r3
 8010462:	4b3a      	ldr	r3, [pc, #232]	@ (801054c <co2calibrate+0x180>)
 8010464:	879a      	strh	r2, [r3, #60]	@ 0x3c
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 8010466:	4b39      	ldr	r3, [pc, #228]	@ (801054c <co2calibrate+0x180>)
 8010468:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
		cli_printf(cli,
 801046a:	461a      	mov	r2, r3
 801046c:	4938      	ldr	r1, [pc, #224]	@ (8010550 <co2calibrate+0x184>)
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f7ff f846 	bl	800f500 <cli_printf>
		do_Calibration = 1;
 8010474:	2301      	movs	r3, #1
 8010476:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 801047a:	e00a      	b.n	8010492 <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 801047c:	4935      	ldr	r1, [pc, #212]	@ (8010554 <co2calibrate+0x188>)
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f7ff f83e 	bl	800f500 <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 8010484:	4b31      	ldr	r3, [pc, #196]	@ (801054c <co2calibrate+0x180>)
 8010486:	2200      	movs	r2, #0
 8010488:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 801048c:	2300      	movs	r3, #0
 801048e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 8010492:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010496:	2b01      	cmp	r3, #1
 8010498:	d13f      	bne.n	801051a <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801049a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801049c:	f7ef ff00 	bl	80002a0 <strlen>
 80104a0:	4603      	mov	r3, r0
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80104aa:	4827      	ldr	r0, [pc, #156]	@ (8010548 <co2calibrate+0x17c>)
 80104ac:	f7fb fec6 	bl	800c23c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 80104b0:	4929      	ldr	r1, [pc, #164]	@ (8010558 <co2calibrate+0x18c>)
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f7ff f824 	bl	800f500 <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 80104b8:	4b24      	ldr	r3, [pc, #144]	@ (801054c <co2calibrate+0x180>)
 80104ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d119      	bne.n	80104f6 <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 80104c2:	4b22      	ldr	r3, [pc, #136]	@ (801054c <co2calibrate+0x180>)
 80104c4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80104c6:	4618      	mov	r0, r3
 80104c8:	f004 f92c 	bl	8014724 <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 80104cc:	e013      	b.n	80104f6 <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80104ce:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80104d0:	f7ef fee6 	bl	80002a0 <strlen>
 80104d4:	4603      	mov	r3, r0
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80104de:	481a      	ldr	r0, [pc, #104]	@ (8010548 <co2calibrate+0x17c>)
 80104e0:	f7fb feac 	bl	800c23c <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 80104e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80104e8:	f7f3 fe14 	bl	8004114 <HAL_Delay>
			toggle_blue_led();
 80104ec:	f7f0 fde6 	bl	80010bc <toggle_blue_led>
			counter++;
 80104f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104f2:	3301      	adds	r3, #1
 80104f4:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 80104f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104f8:	2b07      	cmp	r3, #7
 80104fa:	dde8      	ble.n	80104ce <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80104fc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80104fe:	f7ef fecf 	bl	80002a0 <strlen>
 8010502:	4603      	mov	r3, r0
 8010504:	b29a      	uxth	r2, r3
 8010506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801050a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801050c:	480e      	ldr	r0, [pc, #56]	@ (8010548 <co2calibrate+0x17c>)
 801050e:	f7fb fe95 	bl	800c23c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 8010512:	4912      	ldr	r1, [pc, #72]	@ (801055c <co2calibrate+0x190>)
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f7fe fff3 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 801051a:	4b08      	ldr	r3, [pc, #32]	@ (801053c <co2calibrate+0x170>)
 801051c:	2200      	movs	r2, #0
 801051e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010520:	4b05      	ldr	r3, [pc, #20]	@ (8010538 <co2calibrate+0x16c>)
 8010522:	2200      	movs	r2, #0
 8010524:	701a      	strb	r2, [r3, #0]
}
 8010526:	bf00      	nop
 8010528:	3758      	adds	r7, #88	@ 0x58
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	0802238c 	.word	0x0802238c
 8010534:	080228e8 	.word	0x080228e8
 8010538:	20001b3a 	.word	0x20001b3a
 801053c:	20001b3b 	.word	0x20001b3b
 8010540:	080229a4 	.word	0x080229a4
 8010544:	080229e8 	.word	0x080229e8
 8010548:	20001a74 	.word	0x20001a74
 801054c:	20001530 	.word	0x20001530
 8010550:	08022a3c 	.word	0x08022a3c
 8010554:	08022a8c 	.word	0x08022a8c
 8010558:	08022aac 	.word	0x08022aac
 801055c:	08022ad0 	.word	0x08022ad0

08010560 <statco2calibrate>:


void statco2calibrate(EmbeddedCli *cli, char *args, void *context)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b08a      	sub	sp, #40	@ 0x28
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]

	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_force_recalibration_status(&calib_val);
 801056c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010570:	4618      	mov	r0, r3
 8010572:	f004 f915 	bl	80147a0 <scd30_get_force_recalibration_status>
 8010576:	4603      	mov	r3, r0
 8010578:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 801057a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801057e:	2b00      	cmp	r3, #0
 8010580:	d107      	bne.n	8010592 <statco2calibrate+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 8010582:	f107 0310 	add.w	r3, r7, #16
 8010586:	4a0f      	ldr	r2, [pc, #60]	@ (80105c4 <statco2calibrate+0x64>)
 8010588:	e892 0003 	ldmia.w	r2, {r0, r1}
 801058c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8010590:	e007      	b.n	80105a2 <statco2calibrate+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 8010592:	f107 0310 	add.w	r3, r7, #16
 8010596:	4a0c      	ldr	r2, [pc, #48]	@ (80105c8 <statco2calibrate+0x68>)
 8010598:	e892 0003 	ldmia.w	r2, {r0, r1}
 801059c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80105a0:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80105a2:	f107 0310 	add.w	r3, r7, #16
 80105a6:	461a      	mov	r2, r3
 80105a8:	4908      	ldr	r1, [pc, #32]	@ (80105cc <statco2calibrate+0x6c>)
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f7fe ffa8 	bl	800f500 <cli_printf>
	cli_printf(cli, "Calibration Value: %d",calib_val);
 80105b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105b2:	461a      	mov	r2, r3
 80105b4:	4906      	ldr	r1, [pc, #24]	@ (80105d0 <statco2calibrate+0x70>)
 80105b6:	68f8      	ldr	r0, [r7, #12]
 80105b8:	f7fe ffa2 	bl	800f500 <cli_printf>



}
 80105bc:	bf00      	nop
 80105be:	3728      	adds	r7, #40	@ 0x28
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	08022aec 	.word	0x08022aec
 80105c8:	08022af4 	.word	0x08022af4
 80105cc:	08022afc 	.word	0x08022afc
 80105d0:	08022b14 	.word	0x08022b14

080105d4 <co2_auto_calibration>:


void co2_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b094      	sub	sp, #80	@ 0x50
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]

	uint16_t calib;
	const char *newLine = "\r\n";
 80105e0:	4b28      	ldr	r3, [pc, #160]	@ (8010684 <co2_auto_calibration+0xb0>)
 80105e2:	64bb      	str	r3, [r7, #72]	@ 0x48
		cli_printf(cli, "Enter \"y\" to enable auto calibration!");
 80105e4:	4928      	ldr	r1, [pc, #160]	@ (8010688 <co2_auto_calibration+0xb4>)
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f7fe ff8a 	bl	800f500 <cli_printf>
		cli_printf(cli, "Enter \"n\" to disable auto calibration!");
 80105ec:	4927      	ldr	r1, [pc, #156]	@ (801068c <co2_auto_calibration+0xb8>)
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7fe ff86 	bl	800f500 <cli_printf>



		cli_other = 1;
 80105f4:	4b26      	ldr	r3, [pc, #152]	@ (8010690 <co2_auto_calibration+0xbc>)
 80105f6:	2201      	movs	r2, #1
 80105f8:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 80105fa:	4b26      	ldr	r3, [pc, #152]	@ (8010694 <co2_auto_calibration+0xc0>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli, buffer, sizeof(buffer));
 8010600:	f107 0314 	add.w	r3, r7, #20
 8010604:	2232      	movs	r2, #50	@ 0x32
 8010606:	4619      	mov	r1, r3
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f7fe ffbb 	bl	800f584 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801060e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010610:	f7ef fe46 	bl	80002a0 <strlen>
 8010614:	4603      	mov	r3, r0
 8010616:	b29a      	uxth	r2, r3
 8010618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801061c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801061e:	481e      	ldr	r0, [pc, #120]	@ (8010698 <co2_auto_calibration+0xc4>)
 8010620:	f7fb fe0c 	bl	800c23c <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010624:	f107 0314 	add.w	r3, r7, #20
 8010628:	2179      	movs	r1, #121	@ 0x79
 801062a:	4618      	mov	r0, r3
 801062c:	f00e fb5a 	bl	801ece4 <strchr>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d007      	beq.n	8010646 <co2_auto_calibration+0x72>
			calib = 1;
 8010636:	2301      	movs	r3, #1
 8010638:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

			cli_printf(cli, "Auto calibration enabled");
 801063c:	4917      	ldr	r1, [pc, #92]	@ (801069c <co2_auto_calibration+0xc8>)
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f7fe ff5e 	bl	800f500 <cli_printf>
 8010644:	e00f      	b.n	8010666 <co2_auto_calibration+0x92>
		} else if (strstr(buffer, "n")) {
 8010646:	f107 0314 	add.w	r3, r7, #20
 801064a:	216e      	movs	r1, #110	@ 0x6e
 801064c:	4618      	mov	r0, r3
 801064e:	f00e fb49 	bl	801ece4 <strchr>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d006      	beq.n	8010666 <co2_auto_calibration+0x92>
			calib = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			cli_printf(cli, "Auto calibration disabled");
 801065e:	4910      	ldr	r1, [pc, #64]	@ (80106a0 <co2_auto_calibration+0xcc>)
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f7fe ff4d 	bl	800f500 <cli_printf>
		}

		flag_cli = 0;
 8010666:	4b0b      	ldr	r3, [pc, #44]	@ (8010694 <co2_auto_calibration+0xc0>)
 8010668:	2200      	movs	r2, #0
 801066a:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 801066c:	4b08      	ldr	r3, [pc, #32]	@ (8010690 <co2_auto_calibration+0xbc>)
 801066e:	2200      	movs	r2, #0
 8010670:	701a      	strb	r2, [r3, #0]



	scd30_activate_auto_calibration(calib);
 8010672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010676:	4618      	mov	r0, r3
 8010678:	f003 ffc6 	bl	8014608 <scd30_activate_auto_calibration>
}
 801067c:	bf00      	nop
 801067e:	3750      	adds	r7, #80	@ 0x50
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	0802238c 	.word	0x0802238c
 8010688:	08022b2c 	.word	0x08022b2c
 801068c:	08022b54 	.word	0x08022b54
 8010690:	20001b3a 	.word	0x20001b3a
 8010694:	20001b3b 	.word	0x20001b3b
 8010698:	20001a74 	.word	0x20001a74
 801069c:	08022b7c 	.word	0x08022b7c
 80106a0:	08022b98 	.word	0x08022b98

080106a4 <get_auto_calibration>:


void get_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b08a      	sub	sp, #40	@ 0x28
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_auto_calibration_status(&calib_val);
 80106b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106b4:	4618      	mov	r0, r3
 80106b6:	f003 ffe5 	bl	8014684 <scd30_get_auto_calibration_status>
 80106ba:	4603      	mov	r3, r0
 80106bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 80106be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d107      	bne.n	80106d6 <get_auto_calibration+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 80106c6:	f107 0310 	add.w	r3, r7, #16
 80106ca:	4a0f      	ldr	r2, [pc, #60]	@ (8010708 <get_auto_calibration+0x64>)
 80106cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106d0:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106d4:	e007      	b.n	80106e6 <get_auto_calibration+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80106d6:	f107 0310 	add.w	r3, r7, #16
 80106da:	4a0c      	ldr	r2, [pc, #48]	@ (801070c <get_auto_calibration+0x68>)
 80106dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106e0:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106e4:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80106e6:	f107 0310 	add.w	r3, r7, #16
 80106ea:	461a      	mov	r2, r3
 80106ec:	4908      	ldr	r1, [pc, #32]	@ (8010710 <get_auto_calibration+0x6c>)
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7fe ff06 	bl	800f500 <cli_printf>
	cli_printf(cli, "Auto calibration active status: %d",calib_val);
 80106f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106f6:	461a      	mov	r2, r3
 80106f8:	4906      	ldr	r1, [pc, #24]	@ (8010714 <get_auto_calibration+0x70>)
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7fe ff00 	bl	800f500 <cli_printf>
}
 8010700:	bf00      	nop
 8010702:	3728      	adds	r7, #40	@ 0x28
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	08022aec 	.word	0x08022aec
 801070c:	08022af4 	.word	0x08022af4
 8010710:	08022afc 	.word	0x08022afc
 8010714:	08022bb4 	.word	0x08022bb4

08010718 <set_co2_temp_offset>:

void set_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b096      	sub	sp, #88	@ 0x58
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010724:	4b53      	ldr	r3, [pc, #332]	@ (8010874 <set_co2_temp_offset+0x15c>)
 8010726:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010728:	2300      	movs	r3, #0
 801072a:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 801072c:	4b52      	ldr	r3, [pc, #328]	@ (8010878 <set_co2_temp_offset+0x160>)
 801072e:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010730:	2300      	movs	r3, #0
 8010732:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010736:	4b51      	ldr	r3, [pc, #324]	@ (801087c <set_co2_temp_offset+0x164>)
 8010738:	2201      	movs	r2, #1
 801073a:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 801073c:	4b50      	ldr	r3, [pc, #320]	@ (8010880 <set_co2_temp_offset+0x168>)
 801073e:	2200      	movs	r2, #0
 8010740:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010742:	f107 0310 	add.w	r3, r7, #16
 8010746:	2232      	movs	r2, #50	@ 0x32
 8010748:	2100      	movs	r1, #0
 801074a:	4618      	mov	r0, r3
 801074c:	f00e fac2 	bl	801ecd4 <memset>
		cli_printf(cli,
 8010750:	494c      	ldr	r1, [pc, #304]	@ (8010884 <set_co2_temp_offset+0x16c>)
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f7fe fed4 	bl	800f500 <cli_printf>
				"To calibrate Co2 sensor Temperature offset, please provide value.");
		cli_printf(cli,
 8010758:	494b      	ldr	r1, [pc, #300]	@ (8010888 <set_co2_temp_offset+0x170>)
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f7fe fed0 	bl	800f500 <cli_printf>
				"If temperature offset is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 8010760:	f107 0310 	add.w	r3, r7, #16
 8010764:	2232      	movs	r2, #50	@ 0x32
 8010766:	4619      	mov	r1, r3
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f7fe ff0b 	bl	800f584 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801076e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010770:	f7ef fd96 	bl	80002a0 <strlen>
 8010774:	4603      	mov	r3, r0
 8010776:	b29a      	uxth	r2, r3
 8010778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801077c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801077e:	4843      	ldr	r0, [pc, #268]	@ (801088c <set_co2_temp_offset+0x174>)
 8010780:	f7fb fd5c 	bl	800c23c <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010784:	7c3b      	ldrb	r3, [r7, #16]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01e      	beq.n	80107c8 <set_co2_temp_offset+0xb0>
			_RunTime_Packet.temp_offset = 1;
 801078a:	4b41      	ldr	r3, [pc, #260]	@ (8010890 <set_co2_temp_offset+0x178>)
 801078c:	2201      	movs	r2, #1
 801078e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 8010792:	f107 0310 	add.w	r3, r7, #16
 8010796:	4618      	mov	r0, r3
 8010798:	f00d f81a 	bl	801d7d0 <atoi>
 801079c:	4603      	mov	r3, r0
 801079e:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 80107a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d803      	bhi.n	80107b2 <set_co2_temp_offset+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80107aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	4b38      	ldr	r3, [pc, #224]	@ (8010890 <set_co2_temp_offset+0x178>)
 80107b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor temperature offset is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80107b2:	4b37      	ldr	r3, [pc, #220]	@ (8010890 <set_co2_temp_offset+0x178>)
 80107b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80107b6:	461a      	mov	r2, r3
 80107b8:	4936      	ldr	r1, [pc, #216]	@ (8010894 <set_co2_temp_offset+0x17c>)
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f7fe fea0 	bl	800f500 <cli_printf>

			do_Calibration = 1;
 80107c0:	2301      	movs	r3, #1
 80107c2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80107c6:	e006      	b.n	80107d6 <set_co2_temp_offset+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Temperature Offset aborted.");
 80107c8:	4933      	ldr	r1, [pc, #204]	@ (8010898 <set_co2_temp_offset+0x180>)
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f7fe fe98 	bl	800f500 <cli_printf>
			do_Calibration = 0;
 80107d0:	2300      	movs	r3, #0
 80107d2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80107d6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d13f      	bne.n	801085e <set_co2_temp_offset+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80107de:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80107e0:	f7ef fd5e 	bl	80002a0 <strlen>
 80107e4:	4603      	mov	r3, r0
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80107ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80107ee:	4827      	ldr	r0, [pc, #156]	@ (801088c <set_co2_temp_offset+0x174>)
 80107f0:	f7fb fd24 	bl	800c23c <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating temperature offset, please wait.");
 80107f4:	4929      	ldr	r1, [pc, #164]	@ (801089c <set_co2_temp_offset+0x184>)
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7fe fe82 	bl	800f500 <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 80107fc:	4b24      	ldr	r3, [pc, #144]	@ (8010890 <set_co2_temp_offset+0x178>)
 80107fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010802:	2b00      	cmp	r3, #0
 8010804:	d119      	bne.n	801083a <set_co2_temp_offset+0x122>


				scd30_set_temperature_offset(_RunTime_Packet._tempOffset_co2_concentration);
 8010806:	4b22      	ldr	r3, [pc, #136]	@ (8010890 <set_co2_temp_offset+0x178>)
 8010808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801080a:	4618      	mov	r0, r3
 801080c:	f004 f818 	bl	8014840 <scd30_set_temperature_offset>

			}
			while (counter < 8) {
 8010810:	e013      	b.n	801083a <set_co2_temp_offset+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010812:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010814:	f7ef fd44 	bl	80002a0 <strlen>
 8010818:	4603      	mov	r3, r0
 801081a:	b29a      	uxth	r2, r3
 801081c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010820:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010822:	481a      	ldr	r0, [pc, #104]	@ (801088c <set_co2_temp_offset+0x174>)
 8010824:	f7fb fd0a 	bl	800c23c <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010828:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801082c:	f7f3 fc72 	bl	8004114 <HAL_Delay>
				toggle_blue_led();
 8010830:	f7f0 fc44 	bl	80010bc <toggle_blue_led>
				counter++;
 8010834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010836:	3301      	adds	r3, #1
 8010838:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 801083a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801083c:	2b07      	cmp	r3, #7
 801083e:	dde8      	ble.n	8010812 <set_co2_temp_offset+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010840:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010842:	f7ef fd2d 	bl	80002a0 <strlen>
 8010846:	4603      	mov	r3, r0
 8010848:	b29a      	uxth	r2, r3
 801084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801084e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010850:	480e      	ldr	r0, [pc, #56]	@ (801088c <set_co2_temp_offset+0x174>)
 8010852:	f7fb fcf3 	bl	800c23c <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010856:	4912      	ldr	r1, [pc, #72]	@ (80108a0 <set_co2_temp_offset+0x188>)
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f7fe fe51 	bl	800f500 <cli_printf>
		}

		flag_cli = 0;
 801085e:	4b08      	ldr	r3, [pc, #32]	@ (8010880 <set_co2_temp_offset+0x168>)
 8010860:	2200      	movs	r2, #0
 8010862:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010864:	4b05      	ldr	r3, [pc, #20]	@ (801087c <set_co2_temp_offset+0x164>)
 8010866:	2200      	movs	r2, #0
 8010868:	701a      	strb	r2, [r3, #0]
}
 801086a:	bf00      	nop
 801086c:	3758      	adds	r7, #88	@ 0x58
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	0802238c 	.word	0x0802238c
 8010878:	080228e8 	.word	0x080228e8
 801087c:	20001b3a 	.word	0x20001b3a
 8010880:	20001b3b 	.word	0x20001b3b
 8010884:	08022bd8 	.word	0x08022bd8
 8010888:	08022c1c 	.word	0x08022c1c
 801088c:	20001a74 	.word	0x20001a74
 8010890:	20001530 	.word	0x20001530
 8010894:	08022c60 	.word	0x08022c60
 8010898:	08022ca4 	.word	0x08022ca4
 801089c:	08022ccc 	.word	0x08022ccc
 80108a0:	08022ad0 	.word	0x08022ad0

080108a4 <get_co2_temp_offset>:

void get_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b08a      	sub	sp, #40	@ 0x28
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_temperature_offset(&calib_val);
 80108b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f004 f801 	bl	80148bc <scd30_get_temperature_offset>
 80108ba:	4603      	mov	r3, r0
 80108bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 80108be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d107      	bne.n	80108d6 <get_co2_temp_offset+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 80108c6:	f107 0310 	add.w	r3, r7, #16
 80108ca:	4a0f      	ldr	r2, [pc, #60]	@ (8010908 <get_co2_temp_offset+0x64>)
 80108cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108d0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108d4:	e007      	b.n	80108e6 <get_co2_temp_offset+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 80108d6:	f107 0310 	add.w	r3, r7, #16
 80108da:	4a0c      	ldr	r2, [pc, #48]	@ (801090c <get_co2_temp_offset+0x68>)
 80108dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108e0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108e4:	bf00      	nop
		}
		}

		cli_printf(cli, "Temperature Offset Status: %s",status);
 80108e6:	f107 0310 	add.w	r3, r7, #16
 80108ea:	461a      	mov	r2, r3
 80108ec:	4908      	ldr	r1, [pc, #32]	@ (8010910 <get_co2_temp_offset+0x6c>)
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f7fe fe06 	bl	800f500 <cli_printf>
		cli_printf(cli, "Temperature Offset Value: %d",calib_val);
 80108f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108f6:	461a      	mov	r2, r3
 80108f8:	4906      	ldr	r1, [pc, #24]	@ (8010914 <get_co2_temp_offset+0x70>)
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f7fe fe00 	bl	800f500 <cli_printf>
}
 8010900:	bf00      	nop
 8010902:	3728      	adds	r7, #40	@ 0x28
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	08022aec 	.word	0x08022aec
 801090c:	08022af4 	.word	0x08022af4
 8010910:	08022d00 	.word	0x08022d00
 8010914:	08022d20 	.word	0x08022d20

08010918 <set_co2_altitude_compensation>:

void set_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b096      	sub	sp, #88	@ 0x58
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010924:	4b53      	ldr	r3, [pc, #332]	@ (8010a74 <set_co2_altitude_compensation+0x15c>)
 8010926:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010928:	2300      	movs	r3, #0
 801092a:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 801092c:	4b52      	ldr	r3, [pc, #328]	@ (8010a78 <set_co2_altitude_compensation+0x160>)
 801092e:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010930:	2300      	movs	r3, #0
 8010932:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010936:	4b51      	ldr	r3, [pc, #324]	@ (8010a7c <set_co2_altitude_compensation+0x164>)
 8010938:	2201      	movs	r2, #1
 801093a:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 801093c:	4b50      	ldr	r3, [pc, #320]	@ (8010a80 <set_co2_altitude_compensation+0x168>)
 801093e:	2200      	movs	r2, #0
 8010940:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010942:	f107 0310 	add.w	r3, r7, #16
 8010946:	2232      	movs	r2, #50	@ 0x32
 8010948:	2100      	movs	r1, #0
 801094a:	4618      	mov	r0, r3
 801094c:	f00e f9c2 	bl	801ecd4 <memset>
		cli_printf(cli,
 8010950:	494c      	ldr	r1, [pc, #304]	@ (8010a84 <set_co2_altitude_compensation+0x16c>)
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f7fe fdd4 	bl	800f500 <cli_printf>
				"To calibrate Co2 sensor Altitude compensation, please provide value.");
		cli_printf(cli,
 8010958:	494b      	ldr	r1, [pc, #300]	@ (8010a88 <set_co2_altitude_compensation+0x170>)
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	f7fe fdd0 	bl	800f500 <cli_printf>
				"If Altitude compensation is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 8010960:	f107 0310 	add.w	r3, r7, #16
 8010964:	2232      	movs	r2, #50	@ 0x32
 8010966:	4619      	mov	r1, r3
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f7fe fe0b 	bl	800f584 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801096e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010970:	f7ef fc96 	bl	80002a0 <strlen>
 8010974:	4603      	mov	r3, r0
 8010976:	b29a      	uxth	r2, r3
 8010978:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801097c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801097e:	4843      	ldr	r0, [pc, #268]	@ (8010a8c <set_co2_altitude_compensation+0x174>)
 8010980:	f7fb fc5c 	bl	800c23c <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010984:	7c3b      	ldrb	r3, [r7, #16]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d01e      	beq.n	80109c8 <set_co2_altitude_compensation+0xb0>
			_RunTime_Packet.temp_offset = 1;
 801098a:	4b41      	ldr	r3, [pc, #260]	@ (8010a90 <set_co2_altitude_compensation+0x178>)
 801098c:	2201      	movs	r2, #1
 801098e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 8010992:	f107 0310 	add.w	r3, r7, #16
 8010996:	4618      	mov	r0, r3
 8010998:	f00c ff1a 	bl	801d7d0 <atoi>
 801099c:	4603      	mov	r3, r0
 801099e:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 80109a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d803      	bhi.n	80109b2 <set_co2_altitude_compensation+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80109aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	4b38      	ldr	r3, [pc, #224]	@ (8010a90 <set_co2_altitude_compensation+0x178>)
 80109b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor Altitude compensation is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80109b2:	4b37      	ldr	r3, [pc, #220]	@ (8010a90 <set_co2_altitude_compensation+0x178>)
 80109b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80109b6:	461a      	mov	r2, r3
 80109b8:	4936      	ldr	r1, [pc, #216]	@ (8010a94 <set_co2_altitude_compensation+0x17c>)
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f7fe fda0 	bl	800f500 <cli_printf>

			do_Calibration = 1;
 80109c0:	2301      	movs	r3, #1
 80109c2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80109c6:	e006      	b.n	80109d6 <set_co2_altitude_compensation+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Altitude compensation aborted.");
 80109c8:	4933      	ldr	r1, [pc, #204]	@ (8010a98 <set_co2_altitude_compensation+0x180>)
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f7fe fd98 	bl	800f500 <cli_printf>
			do_Calibration = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80109d6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d13f      	bne.n	8010a5e <set_co2_altitude_compensation+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80109de:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80109e0:	f7ef fc5e 	bl	80002a0 <strlen>
 80109e4:	4603      	mov	r3, r0
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80109ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80109ee:	4827      	ldr	r0, [pc, #156]	@ (8010a8c <set_co2_altitude_compensation+0x174>)
 80109f0:	f7fb fc24 	bl	800c23c <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating Altitude compensation, please wait.");
 80109f4:	4929      	ldr	r1, [pc, #164]	@ (8010a9c <set_co2_altitude_compensation+0x184>)
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f7fe fd82 	bl	800f500 <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 80109fc:	4b24      	ldr	r3, [pc, #144]	@ (8010a90 <set_co2_altitude_compensation+0x178>)
 80109fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d119      	bne.n	8010a3a <set_co2_altitude_compensation+0x122>


				scd30_set_altitude_compensation(_RunTime_Packet._tempOffset_co2_concentration);
 8010a06:	4b22      	ldr	r3, [pc, #136]	@ (8010a90 <set_co2_altitude_compensation+0x178>)
 8010a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f003 fff6 	bl	80149fc <scd30_set_altitude_compensation>

			}
			while (counter < 8) {
 8010a10:	e013      	b.n	8010a3a <set_co2_altitude_compensation+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010a12:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010a14:	f7ef fc44 	bl	80002a0 <strlen>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a20:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010a22:	481a      	ldr	r0, [pc, #104]	@ (8010a8c <set_co2_altitude_compensation+0x174>)
 8010a24:	f7fb fc0a 	bl	800c23c <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010a28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010a2c:	f7f3 fb72 	bl	8004114 <HAL_Delay>
				toggle_blue_led();
 8010a30:	f7f0 fb44 	bl	80010bc <toggle_blue_led>
				counter++;
 8010a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a36:	3301      	adds	r3, #1
 8010a38:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a3c:	2b07      	cmp	r3, #7
 8010a3e:	dde8      	ble.n	8010a12 <set_co2_altitude_compensation+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010a40:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a42:	f7ef fc2d 	bl	80002a0 <strlen>
 8010a46:	4603      	mov	r3, r0
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a4e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a50:	480e      	ldr	r0, [pc, #56]	@ (8010a8c <set_co2_altitude_compensation+0x174>)
 8010a52:	f7fb fbf3 	bl	800c23c <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010a56:	4912      	ldr	r1, [pc, #72]	@ (8010aa0 <set_co2_altitude_compensation+0x188>)
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7fe fd51 	bl	800f500 <cli_printf>
		}

		flag_cli = 0;
 8010a5e:	4b08      	ldr	r3, [pc, #32]	@ (8010a80 <set_co2_altitude_compensation+0x168>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010a64:	4b05      	ldr	r3, [pc, #20]	@ (8010a7c <set_co2_altitude_compensation+0x164>)
 8010a66:	2200      	movs	r2, #0
 8010a68:	701a      	strb	r2, [r3, #0]
}
 8010a6a:	bf00      	nop
 8010a6c:	3758      	adds	r7, #88	@ 0x58
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	0802238c 	.word	0x0802238c
 8010a78:	080228e8 	.word	0x080228e8
 8010a7c:	20001b3a 	.word	0x20001b3a
 8010a80:	20001b3b 	.word	0x20001b3b
 8010a84:	08022d40 	.word	0x08022d40
 8010a88:	08022d88 	.word	0x08022d88
 8010a8c:	20001a74 	.word	0x20001a74
 8010a90:	20001530 	.word	0x20001530
 8010a94:	08022dd0 	.word	0x08022dd0
 8010a98:	08022e14 	.word	0x08022e14
 8010a9c:	08022e40 	.word	0x08022e40
 8010aa0:	08022ad0 	.word	0x08022ad0

08010aa4 <get_co2_altitude_compensation>:

void get_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08a      	sub	sp, #40	@ 0x28
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_altitude_compensation(&calib_val);
 8010ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f003 ff51 	bl	801495c <scd30_get_altitude_compensation>
 8010aba:	4603      	mov	r3, r0
 8010abc:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010abe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d107      	bne.n	8010ad6 <get_co2_altitude_compensation+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 8010ac6:	f107 0310 	add.w	r3, r7, #16
 8010aca:	4a0f      	ldr	r2, [pc, #60]	@ (8010b08 <get_co2_altitude_compensation+0x64>)
 8010acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ad0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010ad4:	e007      	b.n	8010ae6 <get_co2_altitude_compensation+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 8010ad6:	f107 0310 	add.w	r3, r7, #16
 8010ada:	4a0c      	ldr	r2, [pc, #48]	@ (8010b0c <get_co2_altitude_compensation+0x68>)
 8010adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ae0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010ae4:	bf00      	nop
		}
		}

		cli_printf(cli, "Altitude_compensation Status: %s",status);
 8010ae6:	f107 0310 	add.w	r3, r7, #16
 8010aea:	461a      	mov	r2, r3
 8010aec:	4908      	ldr	r1, [pc, #32]	@ (8010b10 <get_co2_altitude_compensation+0x6c>)
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f7fe fd06 	bl	800f500 <cli_printf>
		cli_printf(cli, "Altitude_compensation Value: %d",calib_val);
 8010af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010af6:	461a      	mov	r2, r3
 8010af8:	4906      	ldr	r1, [pc, #24]	@ (8010b14 <get_co2_altitude_compensation+0x70>)
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f7fe fd00 	bl	800f500 <cli_printf>
}
 8010b00:	bf00      	nop
 8010b02:	3728      	adds	r7, #40	@ 0x28
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	08022aec 	.word	0x08022aec
 8010b0c:	08022af4 	.word	0x08022af4
 8010b10:	08022e78 	.word	0x08022e78
 8010b14:	08022e9c 	.word	0x08022e9c

08010b18 <run_co2_calibration_routine>:


void run_co2_calibration_routine(EmbeddedCli *cli, char *args, void *context)
{
 8010b18:	b590      	push	{r4, r7, lr}
 8010b1a:	b0a7      	sub	sp, #156	@ 0x9c
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
	uint32_t maxTime = 120000;
 8010b24:	4bb1      	ldr	r3, [pc, #708]	@ (8010dec <run_co2_calibration_routine+0x2d4>)
 8010b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t prev_maxTime =  HAL_GetTick();
 8010b2a:	f7f3 fae7 	bl	80040fc <HAL_GetTick>
 8010b2e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	uint32_t cur_tick = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const char *newLine = "\r\n";
 8010b38:	4bad      	ldr	r3, [pc, #692]	@ (8010df0 <run_co2_calibration_routine+0x2d8>)
 8010b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t val;
	int counter = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const char *dot = "........";
 8010b44:	4bab      	ldr	r3, [pc, #684]	@ (8010df4 <run_co2_calibration_routine+0x2dc>)
 8010b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
	char progressbar_buf[50] = "ProgressBar: ";
 8010b48:	4aab      	ldr	r2, [pc, #684]	@ (8010df8 <run_co2_calibration_routine+0x2e0>)
 8010b4a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010b4e:	4614      	mov	r4, r2
 8010b50:	6820      	ldr	r0, [r4, #0]
 8010b52:	6861      	ldr	r1, [r4, #4]
 8010b54:	68a2      	ldr	r2, [r4, #8]
 8010b56:	c307      	stmia	r3!, {r0, r1, r2}
 8010b58:	89a2      	ldrh	r2, [r4, #12]
 8010b5a:	801a      	strh	r2, [r3, #0]
 8010b5c:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8010b60:	2224      	movs	r2, #36	@ 0x24
 8010b62:	2100      	movs	r1, #0
 8010b64:	4618      	mov	r0, r3
 8010b66:	f00e f8b5 	bl	801ecd4 <memset>
	uint8_t calib = 0;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t do_Calibration = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	cli_other = 1;
 8010b76:	4ba1      	ldr	r3, [pc, #644]	@ (8010dfc <run_co2_calibration_routine+0x2e4>)
 8010b78:	2201      	movs	r2, #1
 8010b7a:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010b7c:	4ba0      	ldr	r3, [pc, #640]	@ (8010e00 <run_co2_calibration_routine+0x2e8>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010b82:	f107 0310 	add.w	r3, r7, #16
 8010b86:	2232      	movs	r2, #50	@ 0x32
 8010b88:	2100      	movs	r1, #0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f00e f8a2 	bl	801ecd4 <memset>

		     cli_printf(cli,"");
 8010b90:	499c      	ldr	r1, [pc, #624]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f7fe fcb4 	bl	800f500 <cli_printf>
				cli_printf(cli,"It takes about 2-3min to run complete routine. ");
 8010b98:	499b      	ldr	r1, [pc, #620]	@ (8010e08 <run_co2_calibration_routine+0x2f0>)
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	f7fe fcb0 	bl	800f500 <cli_printf>
				cli_printf(cli,"once this routine is activated it cant be canceled. ");
 8010ba0:	499a      	ldr	r1, [pc, #616]	@ (8010e0c <run_co2_calibration_routine+0x2f4>)
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7fe fcac 	bl	800f500 <cli_printf>
				cli_printf(cli,"Do you want to run calibration routine y/n?. ");
 8010ba8:	4999      	ldr	r1, [pc, #612]	@ (8010e10 <run_co2_calibration_routine+0x2f8>)
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f7fe fca8 	bl	800f500 <cli_printf>

		receiveString(cli, buffer, sizeof(buffer));
 8010bb0:	f107 0310 	add.w	r3, r7, #16
 8010bb4:	2232      	movs	r2, #50	@ 0x32
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f7fe fce3 	bl	800f584 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010bbe:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010bc2:	f7ef fb6d 	bl	80002a0 <strlen>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010bce:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010bd2:	4890      	ldr	r0, [pc, #576]	@ (8010e14 <run_co2_calibration_routine+0x2fc>)
 8010bd4:	f7fb fb32 	bl	800c23c <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010bd8:	f107 0310 	add.w	r3, r7, #16
 8010bdc:	2179      	movs	r1, #121	@ 0x79
 8010bde:	4618      	mov	r0, r3
 8010be0:	f00e f880 	bl	801ece4 <strchr>
 8010be4:	4603      	mov	r3, r0
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d007      	beq.n	8010bfa <run_co2_calibration_routine+0xe2>
			calib = 1;
 8010bea:	2301      	movs	r3, #1
 8010bec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

			cli_printf(cli, "Calibration routine running");
 8010bf0:	4989      	ldr	r1, [pc, #548]	@ (8010e18 <run_co2_calibration_routine+0x300>)
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7fe fc84 	bl	800f500 <cli_printf>
 8010bf8:	e00f      	b.n	8010c1a <run_co2_calibration_routine+0x102>
		} else if (strstr(buffer, "n")) {
 8010bfa:	f107 0310 	add.w	r3, r7, #16
 8010bfe:	216e      	movs	r1, #110	@ 0x6e
 8010c00:	4618      	mov	r0, r3
 8010c02:	f00e f86f 	bl	801ece4 <strchr>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d006      	beq.n	8010c1a <run_co2_calibration_routine+0x102>
			calib = 0;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			cli_printf(cli, "Calibration routine aborted");
 8010c12:	4982      	ldr	r1, [pc, #520]	@ (8010e1c <run_co2_calibration_routine+0x304>)
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7fe fc73 	bl	800f500 <cli_printf>
		}


		if(calib)
 8010c1a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f000 8141 	beq.w	8010ea6 <run_co2_calibration_routine+0x38e>
		{
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010c24:	4b7e      	ldr	r3, [pc, #504]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d102      	bne.n	8010c34 <run_co2_calibration_routine+0x11c>
				scd30_start_periodic_measurement(0);
 8010c2e:	2000      	movs	r0, #0
 8010c30:	f003 fb8a 	bl	8014348 <scd30_start_periodic_measurement>
			}
			cli_printf(cli,"");
 8010c34:	4973      	ldr	r1, [pc, #460]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f7fe fc62 	bl	800f500 <cli_printf>
			cli_printf(cli,"GuideLines");
 8010c3c:	4979      	ldr	r1, [pc, #484]	@ (8010e24 <run_co2_calibration_routine+0x30c>)
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f7fe fc5e 	bl	800f500 <cli_printf>
			cli_printf(cli,"");
 8010c44:	496f      	ldr	r1, [pc, #444]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010c46:	68f8      	ldr	r0, [r7, #12]
 8010c48:	f7fe fc5a 	bl	800f500 <cli_printf>
			cli_printf(cli,"1)Donot remove USB, otherwise calibrations will be canceled. ");
 8010c4c:	4976      	ldr	r1, [pc, #472]	@ (8010e28 <run_co2_calibration_routine+0x310>)
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	f7fe fc56 	bl	800f500 <cli_printf>
			cli_printf(cli,"2)Expose the sensor to a controlled environment with a known value of Co2. ");
 8010c54:	4975      	ldr	r1, [pc, #468]	@ (8010e2c <run_co2_calibration_routine+0x314>)
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f7fe fc52 	bl	800f500 <cli_printf>
			cli_printf(cli,"3)After 2min, apply known value of Co2. ");
 8010c5c:	4974      	ldr	r1, [pc, #464]	@ (8010e30 <run_co2_calibration_routine+0x318>)
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f7fe fc4e 	bl	800f500 <cli_printf>
			cli_printf(cli,"4)Calibration routine finished. ");
 8010c64:	4973      	ldr	r1, [pc, #460]	@ (8010e34 <run_co2_calibration_routine+0x31c>)
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f7fe fc4a 	bl	800f500 <cli_printf>
			memset(buffer, '\0', sizeof(buffer));
 8010c6c:	f107 0310 	add.w	r3, r7, #16
 8010c70:	2232      	movs	r2, #50	@ 0x32
 8010c72:	2100      	movs	r1, #0
 8010c74:	4618      	mov	r0, r3
 8010c76:	f00e f82d 	bl	801ecd4 <memset>

			 prev_maxTime =  HAL_GetTick();
 8010c7a:	f7f3 fa3f 	bl	80040fc <HAL_GetTick>
 8010c7e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				cur_tick = HAL_GetTick();
 8010c82:	f7f3 fa3b 	bl	80040fc <HAL_GetTick>
 8010c86:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				cli_printf(cli,"");
 8010c8a:	495e      	ldr	r1, [pc, #376]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f7fe fc37 	bl	800f500 <cli_printf>
				cli_printf(cli,"");
 8010c92:	495c      	ldr	r1, [pc, #368]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7fe fc33 	bl	800f500 <cli_printf>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) progressbar_buf, strlen(progressbar_buf),
 8010c9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7ef fafe 	bl	80002a0 <strlen>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8010cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cb0:	4858      	ldr	r0, [pc, #352]	@ (8010e14 <run_co2_calibration_routine+0x2fc>)
 8010cb2:	f7fb fac3 	bl	800c23c <HAL_UART_Transmit>
									1000);
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010cb6:	e01e      	b.n	8010cf6 <run_co2_calibration_routine+0x1de>

					if ((HAL_GetTick() - cur_tick > 5000)) {
 8010cb8:	f7f3 fa20 	bl	80040fc <HAL_GetTick>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d90a      	bls.n	8010ce2 <run_co2_calibration_routine+0x1ca>


							HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*)"##", 2,
 8010ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	4959      	ldr	r1, [pc, #356]	@ (8010e38 <run_co2_calibration_routine+0x320>)
 8010cd4:	484f      	ldr	r0, [pc, #316]	@ (8010e14 <run_co2_calibration_routine+0x2fc>)
 8010cd6:	f7fb fab1 	bl	800c23c <HAL_UART_Transmit>
									1000);
							cur_tick = HAL_GetTick();
 8010cda:	f7f3 fa0f 	bl	80040fc <HAL_GetTick>
 8010cde:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						}

			        if ((HAL_GetTick() - prev_maxTime > maxTime)) {
 8010ce2:	f7f3 fa0b 	bl	80040fc <HAL_GetTick>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d308      	bcc.n	8010d08 <run_co2_calibration_routine+0x1f0>
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010cf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010cfa:	4850      	ldr	r0, [pc, #320]	@ (8010e3c <run_co2_calibration_routine+0x324>)
 8010cfc:	f7f5 f9ca 	bl	8006094 <HAL_GPIO_ReadPin>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1d8      	bne.n	8010cb8 <run_co2_calibration_routine+0x1a0>
 8010d06:	e000      	b.n	8010d0a <run_co2_calibration_routine+0x1f2>
					//we break the loop if time goes above 5min
					break;
 8010d08:	bf00      	nop
				}

			}

			 cli_printf(cli,"");
 8010d0a:	493e      	ldr	r1, [pc, #248]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f7fe fbf7 	bl	800f500 <cli_printf>
			 cli_printf(cli,"");
 8010d12:	493c      	ldr	r1, [pc, #240]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f7fe fbf3 	bl	800f500 <cli_printf>
			 cli_printf(cli,"");
 8010d1a:	493a      	ldr	r1, [pc, #232]	@ (8010e04 <run_co2_calibration_routine+0x2ec>)
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7fe fbef 	bl	800f500 <cli_printf>
			 cli_printf(cli,"Enter Known Co2 reference value!");
 8010d22:	4947      	ldr	r1, [pc, #284]	@ (8010e40 <run_co2_calibration_routine+0x328>)
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f7fe fbeb 	bl	800f500 <cli_printf>

				receiveString(cli, buffer, sizeof(buffer));
 8010d2a:	f107 0310 	add.w	r3, r7, #16
 8010d2e:	2232      	movs	r2, #50	@ 0x32
 8010d30:	4619      	mov	r1, r3
 8010d32:	68f8      	ldr	r0, [r7, #12]
 8010d34:	f7fe fc26 	bl	800f584 <receiveString>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010d38:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010d3c:	f7ef fab0 	bl	80002a0 <strlen>
 8010d40:	4603      	mov	r3, r0
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d48:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010d4c:	4831      	ldr	r0, [pc, #196]	@ (8010e14 <run_co2_calibration_routine+0x2fc>)
 8010d4e:	f7fb fa75 	bl	800c23c <HAL_UART_Transmit>
						1000);

				if (buffer[0] != '\0') {
 8010d52:	7c3b      	ldrb	r3, [r7, #16]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d01e      	beq.n	8010d96 <run_co2_calibration_routine+0x27e>
					_RunTime_Packet.CO2_calibration = 1;
 8010d58:	4b31      	ldr	r3, [pc, #196]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

					val = atoi(buffer);
 8010d60:	f107 0310 	add.w	r3, r7, #16
 8010d64:	4618      	mov	r0, r3
 8010d66:	f00c fd33 	bl	801d7d0 <atoi>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (val < 65535) {
 8010d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d70:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d803      	bhi.n	8010d80 <run_co2_calibration_routine+0x268>
						_RunTime_Packet._target_co2_concentration = val;
 8010d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	4b28      	ldr	r3, [pc, #160]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010d7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
					}

					cli_printf(cli,
							"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
							_RunTime_Packet._target_co2_concentration);
 8010d80:	4b27      	ldr	r3, [pc, #156]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010d82:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
					cli_printf(cli,
 8010d84:	461a      	mov	r2, r3
 8010d86:	492f      	ldr	r1, [pc, #188]	@ (8010e44 <run_co2_calibration_routine+0x32c>)
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7fe fbb9 	bl	800f500 <cli_printf>
					do_Calibration = 1;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010d94:	e00a      	b.n	8010dac <run_co2_calibration_routine+0x294>
				} else {
					cli_printf(cli, "Co2 sensor Calibration aborted. No value provided");
 8010d96:	492c      	ldr	r1, [pc, #176]	@ (8010e48 <run_co2_calibration_routine+0x330>)
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7fe fbb1 	bl	800f500 <cli_printf>
					_RunTime_Packet.CO2_calibration = 0;
 8010d9e:	4b20      	ldr	r3, [pc, #128]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
					do_Calibration = 0;
 8010da6:	2300      	movs	r3, #0
 8010da8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
				}

				if (do_Calibration == 1) {
 8010dac:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d178      	bne.n	8010ea6 <run_co2_calibration_routine+0x38e>
					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010db4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010db8:	f7ef fa72 	bl	80002a0 <strlen>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010dc4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010dc8:	4812      	ldr	r0, [pc, #72]	@ (8010e14 <run_co2_calibration_routine+0x2fc>)
 8010dca:	f7fb fa37 	bl	800c23c <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Co2 is calibrating, please wait.");
 8010dce:	491f      	ldr	r1, [pc, #124]	@ (8010e4c <run_co2_calibration_routine+0x334>)
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f7fe fb95 	bl	800f500 <cli_printf>
					if (!_RunTime_Packet.scd4x_i2c_error) {
 8010dd6:	4b12      	ldr	r3, [pc, #72]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d14d      	bne.n	8010e7c <run_co2_calibration_routine+0x364>
			#ifdef use_scd40x
						scd4x_perform_forced_recalibration(
								_RunTime_Packet._target_co2_concentration,
								&_RunTime_Packet._frc_correction);
			#elif use_scd30
					scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010de0:	4b0f      	ldr	r3, [pc, #60]	@ (8010e20 <run_co2_calibration_routine+0x308>)
 8010de2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010de4:	4618      	mov	r0, r3
 8010de6:	f003 fc9d 	bl	8014724 <scd30_force_recalibration>
			#endif
					}
					while (counter < 8) {
 8010dea:	e047      	b.n	8010e7c <run_co2_calibration_routine+0x364>
 8010dec:	0001d4c0 	.word	0x0001d4c0
 8010df0:	0802238c 	.word	0x0802238c
 8010df4:	080228e8 	.word	0x080228e8
 8010df8:	080230d4 	.word	0x080230d4
 8010dfc:	20001b3a 	.word	0x20001b3a
 8010e00:	20001b3b 	.word	0x20001b3b
 8010e04:	08022ebc 	.word	0x08022ebc
 8010e08:	08022ec0 	.word	0x08022ec0
 8010e0c:	08022ef0 	.word	0x08022ef0
 8010e10:	08022f28 	.word	0x08022f28
 8010e14:	20001a74 	.word	0x20001a74
 8010e18:	08022f58 	.word	0x08022f58
 8010e1c:	08022f74 	.word	0x08022f74
 8010e20:	20001530 	.word	0x20001530
 8010e24:	08022f90 	.word	0x08022f90
 8010e28:	08022f9c 	.word	0x08022f9c
 8010e2c:	08022fdc 	.word	0x08022fdc
 8010e30:	08023028 	.word	0x08023028
 8010e34:	08023054 	.word	0x08023054
 8010e38:	08023078 	.word	0x08023078
 8010e3c:	40020000 	.word	0x40020000
 8010e40:	0802307c 	.word	0x0802307c
 8010e44:	08022a3c 	.word	0x08022a3c
 8010e48:	080230a0 	.word	0x080230a0
 8010e4c:	08022aac 	.word	0x08022aac
						HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010e50:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8010e52:	f7ef fa25 	bl	80002a0 <strlen>
 8010e56:	4603      	mov	r3, r0
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010e60:	4816      	ldr	r0, [pc, #88]	@ (8010ebc <run_co2_calibration_routine+0x3a4>)
 8010e62:	f7fb f9eb 	bl	800c23c <HAL_UART_Transmit>
								1000);
						HAL_Delay(1000);
 8010e66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010e6a:	f7f3 f953 	bl	8004114 <HAL_Delay>
						toggle_blue_led();
 8010e6e:	f7f0 f925 	bl	80010bc <toggle_blue_led>
						counter++;
 8010e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e76:	3301      	adds	r3, #1
 8010e78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					while (counter < 8) {
 8010e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e80:	2b07      	cmp	r3, #7
 8010e82:	dde5      	ble.n	8010e50 <run_co2_calibration_routine+0x338>
					}

					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010e84:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010e88:	f7ef fa0a 	bl	80002a0 <strlen>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e94:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010e98:	4808      	ldr	r0, [pc, #32]	@ (8010ebc <run_co2_calibration_routine+0x3a4>)
 8010e9a:	f7fb f9cf 	bl	800c23c <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Sensor calibration done.");
 8010e9e:	4908      	ldr	r1, [pc, #32]	@ (8010ec0 <run_co2_calibration_routine+0x3a8>)
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	f7fe fb2d 	bl	800f500 <cli_printf>
		}




		flag_cli = 0;
 8010ea6:	4b07      	ldr	r3, [pc, #28]	@ (8010ec4 <run_co2_calibration_routine+0x3ac>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	701a      	strb	r2, [r3, #0]
			cli_other = 0;
 8010eac:	4b06      	ldr	r3, [pc, #24]	@ (8010ec8 <run_co2_calibration_routine+0x3b0>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	701a      	strb	r2, [r3, #0]

}
 8010eb2:	bf00      	nop
 8010eb4:	379c      	adds	r7, #156	@ 0x9c
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd90      	pop	{r4, r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	20001a74 	.word	0x20001a74
 8010ec0:	08022ad0 	.word	0x08022ad0
 8010ec4:	20001b3b 	.word	0x20001b3b
 8010ec8:	20001b3a 	.word	0x20001b3a

08010ecc <set_co2_samples>:


void set_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b092      	sub	sp, #72	@ 0x48
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010ed8:	4b35      	ldr	r3, [pc, #212]	@ (8010fb0 <set_co2_samples+0xe4>)
 8010eda:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010edc:	4935      	ldr	r1, [pc, #212]	@ (8010fb4 <set_co2_samples+0xe8>)
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f7fe fb0e 	bl	800f500 <cli_printf>
	cli_printf(cli, "Disclaimer: Increase in Samples number also reduces battery life.");
 8010ee4:	4934      	ldr	r1, [pc, #208]	@ (8010fb8 <set_co2_samples+0xec>)
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f7fe fb0a 	bl	800f500 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010eec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010eee:	f7ef f9d7 	bl	80002a0 <strlen>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010efa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010efc:	482f      	ldr	r0, [pc, #188]	@ (8010fbc <set_co2_samples+0xf0>)
 8010efe:	f7fb f99d 	bl	800c23c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter the number of Samples: ");
 8010f02:	492f      	ldr	r1, [pc, #188]	@ (8010fc0 <set_co2_samples+0xf4>)
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f7fe fafb 	bl	800f500 <cli_printf>

	uint16_t val;
	cli_other = 1;
 8010f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8010fc4 <set_co2_samples+0xf8>)
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010f10:	4b2d      	ldr	r3, [pc, #180]	@ (8010fc8 <set_co2_samples+0xfc>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010f16:	f107 0310 	add.w	r3, r7, #16
 8010f1a:	2232      	movs	r2, #50	@ 0x32
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f00d fed8 	bl	801ecd4 <memset>
	receiveString(cli, buffer, sizeof(buffer));
 8010f24:	f107 0310 	add.w	r3, r7, #16
 8010f28:	2232      	movs	r2, #50	@ 0x32
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f7fe fb29 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f34:	f7ef f9b4 	bl	80002a0 <strlen>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f42:	481e      	ldr	r0, [pc, #120]	@ (8010fbc <set_co2_samples+0xf0>)
 8010f44:	f7fb f97a 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010f48:	7c3b      	ldrb	r3, [r7, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d022      	beq.n	8010f94 <set_co2_samples+0xc8>

		val = atoi(buffer);
 8010f4e:	f107 0310 	add.w	r3, r7, #16
 8010f52:	4618      	mov	r0, r3
 8010f54:	f00c fc3c 	bl	801d7d0 <atoi>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			if (val < 65535) {
 8010f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d004      	beq.n	8010f74 <set_co2_samples+0xa8>
				_Flash_Packet.co2_samples = val;
 8010f6a:	4b18      	ldr	r3, [pc, #96]	@ (8010fcc <set_co2_samples+0x100>)
 8010f6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f70:	f8a3 225d 	strh.w	r2, [r3, #605]	@ 0x25d
			}

		cli_printf(cli, "Samples: %d", _Flash_Packet.co2_samples);
 8010f74:	4b15      	ldr	r3, [pc, #84]	@ (8010fcc <set_co2_samples+0x100>)
 8010f76:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	4914      	ldr	r1, [pc, #80]	@ (8010fd0 <set_co2_samples+0x104>)
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f7fe fabd 	bl	800f500 <cli_printf>
		set_param_flags();
 8010f86:	4b13      	ldr	r3, [pc, #76]	@ (8010fd4 <set_co2_samples+0x108>)
 8010f88:	2201      	movs	r2, #1
 8010f8a:	701a      	strb	r2, [r3, #0]
 8010f8c:	4b12      	ldr	r3, [pc, #72]	@ (8010fd8 <set_co2_samples+0x10c>)
 8010f8e:	2201      	movs	r2, #1
 8010f90:	701a      	strb	r2, [r3, #0]
 8010f92:	e003      	b.n	8010f9c <set_co2_samples+0xd0>
	}
	else
	{
		cli_printf(cli, "No Value provided, operation aborted!");
 8010f94:	4911      	ldr	r1, [pc, #68]	@ (8010fdc <set_co2_samples+0x110>)
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f7fe fab2 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 8010f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010fc8 <set_co2_samples+0xfc>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010fa2:	4b08      	ldr	r3, [pc, #32]	@ (8010fc4 <set_co2_samples+0xf8>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	701a      	strb	r2, [r3, #0]

}
 8010fa8:	bf00      	nop
 8010faa:	3748      	adds	r7, #72	@ 0x48
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	0802238c 	.word	0x0802238c
 8010fb4:	08022400 	.word	0x08022400
 8010fb8:	080230e4 	.word	0x080230e4
 8010fbc:	20001a74 	.word	0x20001a74
 8010fc0:	08023128 	.word	0x08023128
 8010fc4:	20001b3a 	.word	0x20001b3a
 8010fc8:	20001b3b 	.word	0x20001b3b
 8010fcc:	200012cc 	.word	0x200012cc
 8010fd0:	08023148 	.word	0x08023148
 8010fd4:	20001579 	.word	0x20001579
 8010fd8:	2000157a 	.word	0x2000157a
 8010fdc:	08023154 	.word	0x08023154

08010fe0 <get_co2_samples>:

void get_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Co2 Samples: %d", _Flash_Packet.co2_samples);
 8010fec:	4b06      	ldr	r3, [pc, #24]	@ (8011008 <get_co2_samples+0x28>)
 8010fee:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	4905      	ldr	r1, [pc, #20]	@ (801100c <get_co2_samples+0x2c>)
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7fe fa81 	bl	800f500 <cli_printf>
}
 8010ffe:	bf00      	nop
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	200012cc 	.word	0x200012cc
 801100c:	0802317c 	.word	0x0802317c

08011010 <SystemRestart>:


void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 8011010:	b580      	push	{r7, lr}
 8011012:	b092      	sub	sp, #72	@ 0x48
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 801101c:	4b22      	ldr	r3, [pc, #136]	@ (80110a8 <SystemRestart+0x98>)
 801101e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 8011020:	4922      	ldr	r1, [pc, #136]	@ (80110ac <SystemRestart+0x9c>)
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f7fe fa6c 	bl	800f500 <cli_printf>

	cli_other = 1;
 8011028:	4b21      	ldr	r3, [pc, #132]	@ (80110b0 <SystemRestart+0xa0>)
 801102a:	2201      	movs	r2, #1
 801102c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801102e:	4b21      	ldr	r3, [pc, #132]	@ (80110b4 <SystemRestart+0xa4>)
 8011030:	2200      	movs	r2, #0
 8011032:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8011034:	f107 0310 	add.w	r3, r7, #16
 8011038:	2232      	movs	r2, #50	@ 0x32
 801103a:	4619      	mov	r1, r3
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f7fe faa1 	bl	800f584 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8011042:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011044:	f7ef f92c 	bl	80002a0 <strlen>
 8011048:	4603      	mov	r3, r0
 801104a:	b29a      	uxth	r2, r3
 801104c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011050:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011052:	4819      	ldr	r0, [pc, #100]	@ (80110b8 <SystemRestart+0xa8>)
 8011054:	f7fb f8f2 	bl	800c23c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 8011058:	f107 0310 	add.w	r3, r7, #16
 801105c:	2179      	movs	r1, #121	@ 0x79
 801105e:	4618      	mov	r0, r3
 8011060:	f00d fe40 	bl	801ece4 <strchr>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d006      	beq.n	8011078 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 801106a:	4914      	ldr	r1, [pc, #80]	@ (80110bc <SystemRestart+0xac>)
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	f7fe fa47 	bl	800f500 <cli_printf>
		HAL_NVIC_SystemReset();
 8011072:	f7f3 fe5e 	bl	8004d32 <HAL_NVIC_SystemReset>
 8011076:	e00c      	b.n	8011092 <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 8011078:	f107 0310 	add.w	r3, r7, #16
 801107c:	216e      	movs	r1, #110	@ 0x6e
 801107e:	4618      	mov	r0, r3
 8011080:	f00d fe30 	bl	801ece4 <strchr>
 8011084:	4603      	mov	r3, r0
 8011086:	2b00      	cmp	r3, #0
 8011088:	d003      	beq.n	8011092 <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 801108a:	490d      	ldr	r1, [pc, #52]	@ (80110c0 <SystemRestart+0xb0>)
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f7fe fa37 	bl	800f500 <cli_printf>
	}

	flag_cli = 0;
 8011092:	4b08      	ldr	r3, [pc, #32]	@ (80110b4 <SystemRestart+0xa4>)
 8011094:	2200      	movs	r2, #0
 8011096:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8011098:	4b05      	ldr	r3, [pc, #20]	@ (80110b0 <SystemRestart+0xa0>)
 801109a:	2200      	movs	r2, #0
 801109c:	701a      	strb	r2, [r3, #0]
}
 801109e:	bf00      	nop
 80110a0:	3748      	adds	r7, #72	@ 0x48
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	0802238c 	.word	0x0802238c
 80110ac:	0802318c 	.word	0x0802318c
 80110b0:	20001b3a 	.word	0x20001b3a
 80110b4:	20001b3b 	.word	0x20001b3b
 80110b8:	20001a74 	.word	0x20001a74
 80110bc:	080231b4 	.word	0x080231b4
 80110c0:	080231d0 	.word	0x080231d0

080110c4 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80110d0:	4b0a      	ldr	r3, [pc, #40]	@ (80110fc <Co2Level+0x38>)
 80110d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 80110da:	f7f0 faf9 	bl	80016d0 <get_scd30_measurement_>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 80110de:	4b07      	ldr	r3, [pc, #28]	@ (80110fc <Co2Level+0x38>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ef fa48 	bl	8000578 <__aeabi_f2d>
 80110e8:	4602      	mov	r2, r0
 80110ea:	460b      	mov	r3, r1
 80110ec:	4904      	ldr	r1, [pc, #16]	@ (8011100 <Co2Level+0x3c>)
 80110ee:	68f8      	ldr	r0, [r7, #12]
 80110f0:	f7fe fa06 	bl	800f500 <cli_printf>
#endif
}
 80110f4:	bf00      	nop
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20001530 	.word	0x20001530
 8011100:	080231e8 	.word	0x080231e8

08011104 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011110:	4b0a      	ldr	r3, [pc, #40]	@ (801113c <TempLevel+0x38>)
 8011112:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 801111a:	f7f0 fad9 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 801111e:	4b07      	ldr	r3, [pc, #28]	@ (801113c <TempLevel+0x38>)
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	4618      	mov	r0, r3
 8011124:	f7ef fa28 	bl	8000578 <__aeabi_f2d>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4904      	ldr	r1, [pc, #16]	@ (8011140 <TempLevel+0x3c>)
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f7fe f9e6 	bl	800f500 <cli_printf>
#endif
}
 8011134:	bf00      	nop
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	20001530 	.word	0x20001530
 8011140:	080231f8 	.word	0x080231f8

08011144 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011150:	4b0a      	ldr	r3, [pc, #40]	@ (801117c <HumidLevel+0x38>)
 8011152:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011156:	2b00      	cmp	r3, #0
 8011158:	d101      	bne.n	801115e <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 801115a:	f7f0 fab9 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 801115e:	4b07      	ldr	r3, [pc, #28]	@ (801117c <HumidLevel+0x38>)
 8011160:	689b      	ldr	r3, [r3, #8]
 8011162:	4618      	mov	r0, r3
 8011164:	f7ef fa08 	bl	8000578 <__aeabi_f2d>
 8011168:	4602      	mov	r2, r0
 801116a:	460b      	mov	r3, r1
 801116c:	4904      	ldr	r1, [pc, #16]	@ (8011180 <HumidLevel+0x3c>)
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f7fe f9c6 	bl	800f500 <cli_printf>
#endif
}
 8011174:	bf00      	nop
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	20001530 	.word	0x20001530
 8011180:	08023214 	.word	0x08023214

08011184 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 8011190:	491f      	ldr	r1, [pc, #124]	@ (8011210 <MotionDetection+0x8c>)
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f7fe f9b4 	bl	800f500 <cli_printf>
	HAL_Delay(2000);
 8011198:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801119c:	f7f2 ffba 	bl	8004114 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 80111a0:	f7f2 ffac 	bl	80040fc <HAL_GetTick>
 80111a4:	4603      	mov	r3, r0
 80111a6:	4a1b      	ldr	r2, [pc, #108]	@ (8011214 <MotionDetection+0x90>)
 80111a8:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 80111aa:	4b1b      	ldr	r3, [pc, #108]	@ (8011218 <MotionDetection+0x94>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111b0:	e01c      	b.n	80111ec <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80111b2:	2101      	movs	r1, #1
 80111b4:	4819      	ldr	r0, [pc, #100]	@ (801121c <MotionDetection+0x98>)
 80111b6:	f7f4 ff6d 	bl	8006094 <HAL_GPIO_ReadPin>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d003      	beq.n	80111c8 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 80111c0:	4b17      	ldr	r3, [pc, #92]	@ (8011220 <MotionDetection+0x9c>)
 80111c2:	2201      	movs	r2, #1
 80111c4:	731a      	strb	r2, [r3, #12]
 80111c6:	e002      	b.n	80111ce <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 80111c8:	4b15      	ldr	r3, [pc, #84]	@ (8011220 <MotionDetection+0x9c>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80111ce:	4b14      	ldr	r3, [pc, #80]	@ (8011220 <MotionDetection+0x9c>)
 80111d0:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d101      	bne.n	80111da <MotionDetection+0x56>
 80111d6:	4b13      	ldr	r3, [pc, #76]	@ (8011224 <MotionDetection+0xa0>)
 80111d8:	e000      	b.n	80111dc <MotionDetection+0x58>
 80111da:	4b13      	ldr	r3, [pc, #76]	@ (8011228 <MotionDetection+0xa4>)
 80111dc:	461a      	mov	r2, r3
 80111de:	4913      	ldr	r1, [pc, #76]	@ (801122c <MotionDetection+0xa8>)
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f7fe f98d 	bl	800f500 <cli_printf>
//	         	}
		HAL_Delay(100);
 80111e6:	2064      	movs	r0, #100	@ 0x64
 80111e8:	f7f2 ff94 	bl	8004114 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111ec:	f7f2 ff86 	bl	80040fc <HAL_GetTick>
 80111f0:	4602      	mov	r2, r0
 80111f2:	4b08      	ldr	r3, [pc, #32]	@ (8011214 <MotionDetection+0x90>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	1ad2      	subs	r2, r2, r3
 80111f8:	4b0d      	ldr	r3, [pc, #52]	@ (8011230 <MotionDetection+0xac>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d3d8      	bcc.n	80111b2 <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 8011200:	490c      	ldr	r1, [pc, #48]	@ (8011234 <MotionDetection+0xb0>)
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	f7fe f97c 	bl	800f500 <cli_printf>

}
 8011208:	bf00      	nop
 801120a:	3710      	adds	r7, #16
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	0802322c 	.word	0x0802322c
 8011214:	20001b34 	.word	0x20001b34
 8011218:	20001b3c 	.word	0x20001b3c
 801121c:	40020000 	.word	0x40020000
 8011220:	20001530 	.word	0x20001530
 8011224:	08023264 	.word	0x08023264
 8011228:	0802326c 	.word	0x0802326c
 801122c:	08023274 	.word	0x08023274
 8011230:	20000020 	.word	0x20000020
 8011234:	08023288 	.word	0x08023288

08011238 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 8011244:	4922      	ldr	r1, [pc, #136]	@ (80112d0 <AirQuality+0x98>)
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f7fe f95a 	bl	800f500 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 801124c:	4b21      	ldr	r3, [pc, #132]	@ (80112d4 <AirQuality+0x9c>)
 801124e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011252:	2b00      	cmp	r3, #0
 8011254:	d104      	bne.n	8011260 <AirQuality+0x28>
 8011256:	4b1f      	ldr	r3, [pc, #124]	@ (80112d4 <AirQuality+0x9c>)
 8011258:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801125c:	2b00      	cmp	r3, #0
 801125e:	d004      	beq.n	801126a <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 8011260:	491d      	ldr	r1, [pc, #116]	@ (80112d8 <AirQuality+0xa0>)
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7fe f94c 	bl	800f500 <cli_printf>
 8011268:	e02e      	b.n	80112c8 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 801126a:	f7f0 faef 	bl	800184c <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 801126e:	4b19      	ldr	r3, [pc, #100]	@ (80112d4 <AirQuality+0x9c>)
 8011270:	691b      	ldr	r3, [r3, #16]
 8011272:	4618      	mov	r0, r3
 8011274:	f7ef f980 	bl	8000578 <__aeabi_f2d>
 8011278:	4602      	mov	r2, r0
 801127a:	460b      	mov	r3, r1
 801127c:	4917      	ldr	r1, [pc, #92]	@ (80112dc <AirQuality+0xa4>)
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7fe f93e 	bl	800f500 <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8011284:	4b13      	ldr	r3, [pc, #76]	@ (80112d4 <AirQuality+0x9c>)
 8011286:	695b      	ldr	r3, [r3, #20]
 8011288:	4618      	mov	r0, r3
 801128a:	f7ef f975 	bl	8000578 <__aeabi_f2d>
 801128e:	4602      	mov	r2, r0
 8011290:	460b      	mov	r3, r1
 8011292:	4913      	ldr	r1, [pc, #76]	@ (80112e0 <AirQuality+0xa8>)
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f7fe f933 	bl	800f500 <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 801129a:	4b0e      	ldr	r3, [pc, #56]	@ (80112d4 <AirQuality+0x9c>)
 801129c:	699b      	ldr	r3, [r3, #24]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7ef f96a 	bl	8000578 <__aeabi_f2d>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	490e      	ldr	r1, [pc, #56]	@ (80112e4 <AirQuality+0xac>)
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7fe f928 	bl	800f500 <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 80112b0:	4b08      	ldr	r3, [pc, #32]	@ (80112d4 <AirQuality+0x9c>)
 80112b2:	69db      	ldr	r3, [r3, #28]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ef f95f 	bl	8000578 <__aeabi_f2d>
 80112ba:	4602      	mov	r2, r0
 80112bc:	460b      	mov	r3, r1
 80112be:	490a      	ldr	r1, [pc, #40]	@ (80112e8 <AirQuality+0xb0>)
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f7fe f91d 	bl	800f500 <cli_printf>
	}

}
 80112c6:	bf00      	nop
 80112c8:	bf00      	nop
 80112ca:	3710      	adds	r7, #16
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	08023298 	.word	0x08023298
 80112d4:	20001530 	.word	0x20001530
 80112d8:	080232b4 	.word	0x080232b4
 80112dc:	080232d4 	.word	0x080232d4
 80112e0:	080232e0 	.word	0x080232e0
 80112e4:	080232f0 	.word	0x080232f0
 80112e8:	08023300 	.word	0x08023300

080112ec <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80112f8:	4808      	ldr	r0, [pc, #32]	@ (801131c <BattVolt+0x30>)
 80112fa:	f002 ff1d 	bl	8014138 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 80112fe:	4b08      	ldr	r3, [pc, #32]	@ (8011320 <BattVolt+0x34>)
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	4618      	mov	r0, r3
 8011304:	f7ef f938 	bl	8000578 <__aeabi_f2d>
 8011308:	4602      	mov	r2, r0
 801130a:	460b      	mov	r3, r1
 801130c:	4905      	ldr	r1, [pc, #20]	@ (8011324 <BattVolt+0x38>)
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f7fe f8f6 	bl	800f500 <cli_printf>

}
 8011314:	bf00      	nop
 8011316:	3710      	adds	r7, #16
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20001550 	.word	0x20001550
 8011320:	20001530 	.word	0x20001530
 8011324:	08023310 	.word	0x08023310

08011328 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8011334:	4903      	ldr	r1, [pc, #12]	@ (8011344 <port+0x1c>)
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	f7fe f8e2 	bl	800f500 <cli_printf>
}
 801133c:	bf00      	nop
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}
 8011344:	08023328 	.word	0x08023328

08011348 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 8011348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801134a:	b0bb      	sub	sp, #236	@ 0xec
 801134c:	af06      	add	r7, sp, #24
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011354:	4bb6      	ldr	r3, [pc, #728]	@ (8011630 <showall+0x2e8>)
 8011356:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801135a:	2b00      	cmp	r3, #0
 801135c:	d104      	bne.n	8011368 <showall+0x20>
 801135e:	4bb4      	ldr	r3, [pc, #720]	@ (8011630 <showall+0x2e8>)
 8011360:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011364:	2b00      	cmp	r3, #0
 8011366:	d006      	beq.n	8011376 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 8011368:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 801136c:	49b1      	ldr	r1, [pc, #708]	@ (8011634 <showall+0x2ec>)
 801136e:	4618      	mov	r0, r3
 8011370:	f00d fb66 	bl	801ea40 <siprintf>
 8011374:	e00d      	b.n	8011392 <showall+0x4a>
	} else {

		get_sps30_measurement();
 8011376:	f7f0 fa69 	bl	800184c <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 801137a:	4bad      	ldr	r3, [pc, #692]	@ (8011630 <showall+0x2e8>)
 801137c:	695b      	ldr	r3, [r3, #20]
 801137e:	4618      	mov	r0, r3
 8011380:	f7ef f8fa 	bl	8000578 <__aeabi_f2d>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 801138c:	49aa      	ldr	r1, [pc, #680]	@ (8011638 <showall+0x2f0>)
 801138e:	f00d fb57 	bl	801ea40 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8011392:	48aa      	ldr	r0, [pc, #680]	@ (801163c <showall+0x2f4>)
 8011394:	f002 fed0 	bl	8014138 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8011398:	2101      	movs	r1, #1
 801139a:	48a9      	ldr	r0, [pc, #676]	@ (8011640 <showall+0x2f8>)
 801139c:	f7f4 fe7a 	bl	8006094 <HAL_GPIO_ReadPin>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 80113a6:	4ba2      	ldr	r3, [pc, #648]	@ (8011630 <showall+0x2e8>)
 80113a8:	2201      	movs	r2, #1
 80113aa:	731a      	strb	r2, [r3, #12]
 80113ac:	e002      	b.n	80113b4 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 80113ae:	4ba0      	ldr	r3, [pc, #640]	@ (8011630 <showall+0x2e8>)
 80113b0:	2200      	movs	r2, #0
 80113b2:	731a      	strb	r2, [r3, #12]
	}

	char co2_Sensor_stat[30] = "ERROR";
 80113b4:	4aa3      	ldr	r2, [pc, #652]	@ (8011644 <showall+0x2fc>)
 80113b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80113ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113be:	6018      	str	r0, [r3, #0]
 80113c0:	3304      	adds	r3, #4
 80113c2:	8019      	strh	r1, [r3, #0]
 80113c4:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]
 80113cc:	605a      	str	r2, [r3, #4]
 80113ce:	609a      	str	r2, [r3, #8]
 80113d0:	60da      	str	r2, [r3, #12]
 80113d2:	611a      	str	r2, [r3, #16]
 80113d4:	615a      	str	r2, [r3, #20]

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80113d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113da:	2205      	movs	r2, #5
 80113dc:	21c2      	movs	r1, #194	@ 0xc2
 80113de:	489a      	ldr	r0, [pc, #616]	@ (8011648 <showall+0x300>)
 80113e0:	f7f5 fb46 	bl	8006a70 <HAL_I2C_IsDeviceReady>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d01b      	beq.n	8011422 <showall+0xda>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80113ea:	4b98      	ldr	r3, [pc, #608]	@ (801164c <showall+0x304>)
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d013      	beq.n	801141a <showall+0xd2>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80113f2:	f107 0314 	add.w	r3, r7, #20
 80113f6:	4996      	ldr	r1, [pc, #600]	@ (8011650 <showall+0x308>)
 80113f8:	4618      	mov	r0, r3
 80113fa:	f00d fb21 	bl	801ea40 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80113fe:	f107 0314 	add.w	r3, r7, #20
 8011402:	4618      	mov	r0, r3
 8011404:	f7ee ff4c 	bl	80002a0 <strlen>
 8011408:	4603      	mov	r3, r0
 801140a:	b29a      	uxth	r2, r3
 801140c:	f107 0114 	add.w	r1, r7, #20
 8011410:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011414:	488f      	ldr	r0, [pc, #572]	@ (8011654 <showall+0x30c>)
 8011416:	f7fa ff11 	bl	800c23c <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 801141a:	4b85      	ldr	r3, [pc, #532]	@ (8011630 <showall+0x2e8>)
 801141c:	2201      	movs	r2, #1
 801141e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011422:	4b83      	ldr	r3, [pc, #524]	@ (8011630 <showall+0x2e8>)
 8011424:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10a      	bne.n	8011442 <showall+0xfa>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	//get_scd30_measurement();
#endif
		strcpy(co2_Sensor_stat,"ACTIVE");
 801142c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011430:	4a89      	ldr	r2, [pc, #548]	@ (8011658 <showall+0x310>)
 8011432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011436:	6018      	str	r0, [r3, #0]
 8011438:	3304      	adds	r3, #4
 801143a:	8019      	strh	r1, [r3, #0]
 801143c:	3302      	adds	r3, #2
 801143e:	0c0a      	lsrs	r2, r1, #16
 8011440:	701a      	strb	r2, [r3, #0]
	}


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 8011442:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011446:	2200      	movs	r2, #0
 8011448:	4619      	mov	r1, r3
 801144a:	4884      	ldr	r0, [pc, #528]	@ (801165c <showall+0x314>)
 801144c:	f7f8 fb75 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011450:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011454:	2200      	movs	r2, #0
 8011456:	4619      	mov	r1, r3
 8011458:	4880      	ldr	r0, [pc, #512]	@ (801165c <showall+0x314>)
 801145a:	f7f8 fa8c 	bl	8009976 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 801145e:	4b80      	ldr	r3, [pc, #512]	@ (8011660 <showall+0x318>)
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d106      	bne.n	8011474 <showall+0x12c>

		sprintf(buff_filewritten, "Data not written yet");
 8011466:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801146a:	497e      	ldr	r1, [pc, #504]	@ (8011664 <showall+0x31c>)
 801146c:	4618      	mov	r0, r3
 801146e:	f00d fae7 	bl	801ea40 <siprintf>
 8011472:	e014      	b.n	801149e <showall+0x156>

	} else if (datawritten == 1) {
 8011474:	4b7a      	ldr	r3, [pc, #488]	@ (8011660 <showall+0x318>)
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	2b01      	cmp	r3, #1
 801147a:	d106      	bne.n	801148a <showall+0x142>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 801147c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011480:	4979      	ldr	r1, [pc, #484]	@ (8011668 <showall+0x320>)
 8011482:	4618      	mov	r0, r3
 8011484:	f00d fadc 	bl	801ea40 <siprintf>
 8011488:	e009      	b.n	801149e <showall+0x156>
	} else if (datawritten == 2) {
 801148a:	4b75      	ldr	r3, [pc, #468]	@ (8011660 <showall+0x318>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	2b02      	cmp	r3, #2
 8011490:	d105      	bne.n	801149e <showall+0x156>

		sprintf(buff_filewritten, " **FAILED** ");
 8011492:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011496:	4975      	ldr	r1, [pc, #468]	@ (801166c <showall+0x324>)
 8011498:	4618      	mov	r0, r3
 801149a:	f00d fad1 	bl	801ea40 <siprintf>
	}
	uint16_t calib_val = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t calib_stat = 0;
 80114a4:	2300      	movs	r3, #0
 80114a6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t temp_offset = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t altitude_comp = 0;
 80114b0:	2300      	movs	r3, #0
 80114b2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	if (!_RunTime_Packet.scd4x_i2c_error) {
 80114b6:	4b5e      	ldr	r3, [pc, #376]	@ (8011630 <showall+0x2e8>)
 80114b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d113      	bne.n	80114e8 <showall+0x1a0>
	scd30_get_force_recalibration_status(&calib_val);
 80114c0:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 80114c4:	4618      	mov	r0, r3
 80114c6:	f003 f96b 	bl	80147a0 <scd30_get_force_recalibration_status>
	scd30_get_auto_calibration_status(&calib_stat);
 80114ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80114ce:	4618      	mov	r0, r3
 80114d0:	f003 f8d8 	bl	8014684 <scd30_get_auto_calibration_status>
	scd30_get_altitude_compensation(&altitude_comp);
 80114d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80114d8:	4618      	mov	r0, r3
 80114da:	f003 fa3f 	bl	801495c <scd30_get_altitude_compensation>
	scd30_get_temperature_offset(&temp_offset);
 80114de:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80114e2:	4618      	mov	r0, r3
 80114e4:	f003 f9ea 	bl	80148bc <scd30_get_temperature_offset>
	}


	cli_printf(cli, "");
 80114e8:	4961      	ldr	r1, [pc, #388]	@ (8011670 <showall+0x328>)
 80114ea:	68f8      	ldr	r0, [r7, #12]
 80114ec:	f7fe f808 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 80114f0:	495f      	ldr	r1, [pc, #380]	@ (8011670 <showall+0x328>)
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f7fe f804 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 80114f8:	495d      	ldr	r1, [pc, #372]	@ (8011670 <showall+0x328>)
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f7fe f800 	bl	800f500 <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 8011500:	f7f0 ffb2 	bl	8002468 <ver_GetUid>
 8011504:	4603      	mov	r3, r0
 8011506:	461a      	mov	r2, r3
 8011508:	495a      	ldr	r1, [pc, #360]	@ (8011674 <showall+0x32c>)
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f7fd fff8 	bl	800f500 <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 8011510:	4a59      	ldr	r2, [pc, #356]	@ (8011678 <showall+0x330>)
 8011512:	495a      	ldr	r1, [pc, #360]	@ (801167c <showall+0x334>)
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f7fd fff3 	bl	800f500 <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 801151a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 801151e:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011520:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011524:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011526:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	460b      	mov	r3, r1
 801152e:	4954      	ldr	r1, [pc, #336]	@ (8011680 <showall+0x338>)
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f7fd ffe5 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 8011536:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 801153a:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 801153c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011540:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 8011542:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	460b      	mov	r3, r1
 801154a:	494e      	ldr	r1, [pc, #312]	@ (8011684 <showall+0x33c>)
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	f7fd ffd7 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 8011552:	4a4d      	ldr	r2, [pc, #308]	@ (8011688 <showall+0x340>)
 8011554:	494d      	ldr	r1, [pc, #308]	@ (801168c <showall+0x344>)
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7fd ffd2 	bl	800f500 <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 801155c:	4a4c      	ldr	r2, [pc, #304]	@ (8011690 <showall+0x348>)
 801155e:	494d      	ldr	r1, [pc, #308]	@ (8011694 <showall+0x34c>)
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f7fd ffcd 	bl	800f500 <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 8011566:	4a4c      	ldr	r2, [pc, #304]	@ (8011698 <showall+0x350>)
 8011568:	494c      	ldr	r1, [pc, #304]	@ (801169c <showall+0x354>)
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7fd ffc8 	bl	800f500 <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8011570:	4a4b      	ldr	r2, [pc, #300]	@ (80116a0 <showall+0x358>)
 8011572:	494c      	ldr	r1, [pc, #304]	@ (80116a4 <showall+0x35c>)
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f7fd ffc3 	bl	800f500 <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 801157a:	4b4b      	ldr	r3, [pc, #300]	@ (80116a8 <showall+0x360>)
 801157c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011580:	461a      	mov	r2, r3
 8011582:	494a      	ldr	r1, [pc, #296]	@ (80116ac <showall+0x364>)
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f7fd ffbb 	bl	800f500 <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2 sensor status| %s                       ",
 801158a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801158e:	461a      	mov	r2, r3
 8011590:	4947      	ldr	r1, [pc, #284]	@ (80116b0 <showall+0x368>)
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f7fd ffb4 	bl	800f500 <cli_printf>
			co2_Sensor_stat);
	cli_printf(cli, " *Calibration Value| %d                       ",
 8011598:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801159c:	461a      	mov	r2, r3
 801159e:	4945      	ldr	r1, [pc, #276]	@ (80116b4 <showall+0x36c>)
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f7fd ffad 	bl	800f500 <cli_printf>
			calib_val);
	cli_printf(cli, " *Auto calibration | %d                       ",
 80115a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80115aa:	461a      	mov	r2, r3
 80115ac:	4942      	ldr	r1, [pc, #264]	@ (80116b8 <showall+0x370>)
 80115ae:	68f8      	ldr	r0, [r7, #12]
 80115b0:	f7fd ffa6 	bl	800f500 <cli_printf>
			calib_stat);
	cli_printf(cli, " *Temp offset      | %d                       ",
 80115b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80115b8:	461a      	mov	r2, r3
 80115ba:	4940      	ldr	r1, [pc, #256]	@ (80116bc <showall+0x374>)
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f7fd ff9f 	bl	800f500 <cli_printf>
			temp_offset);
	cli_printf(cli, " *Altitude Comp    | %d                       ",
 80115c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80115c6:	461a      	mov	r2, r3
 80115c8:	493d      	ldr	r1, [pc, #244]	@ (80116c0 <showall+0x378>)
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7fd ff98 	bl	800f500 <cli_printf>
			altitude_comp);
	cli_printf(cli, " *Co2 Samples      | %d                       ",
			_Flash_Packet.co2_samples);
 80115d0:	4b35      	ldr	r3, [pc, #212]	@ (80116a8 <showall+0x360>)
 80115d2:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80115d6:	b29b      	uxth	r3, r3
	cli_printf(cli, " *Co2 Samples      | %d                       ",
 80115d8:	461a      	mov	r2, r3
 80115da:	493a      	ldr	r1, [pc, #232]	@ (80116c4 <showall+0x37c>)
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f7fd ff8f 	bl	800f500 <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 80115e2:	4b13      	ldr	r3, [pc, #76]	@ (8011630 <showall+0x2e8>)
 80115e4:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ee ffc6 	bl	8000578 <__aeabi_f2d>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	4935      	ldr	r1, [pc, #212]	@ (80116c8 <showall+0x380>)
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f7fd ff84 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 80115f8:	4b0d      	ldr	r3, [pc, #52]	@ (8011630 <showall+0x2e8>)
 80115fa:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ee ffbb 	bl	8000578 <__aeabi_f2d>
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	4931      	ldr	r1, [pc, #196]	@ (80116cc <showall+0x384>)
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7fd ff79 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 801160e:	4b08      	ldr	r3, [pc, #32]	@ (8011630 <showall+0x2e8>)
 8011610:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 8011612:	4618      	mov	r0, r3
 8011614:	f7ee ffb0 	bl	8000578 <__aeabi_f2d>
 8011618:	4602      	mov	r2, r0
 801161a:	460b      	mov	r3, r1
 801161c:	492c      	ldr	r1, [pc, #176]	@ (80116d0 <showall+0x388>)
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7fd ff6e 	bl	800f500 <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8011624:	4b02      	ldr	r3, [pc, #8]	@ (8011630 <showall+0x2e8>)
 8011626:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 8011628:	2b01      	cmp	r3, #1
 801162a:	d155      	bne.n	80116d8 <showall+0x390>
 801162c:	4b29      	ldr	r3, [pc, #164]	@ (80116d4 <showall+0x38c>)
 801162e:	e054      	b.n	80116da <showall+0x392>
 8011630:	20001530 	.word	0x20001530
 8011634:	08023350 	.word	0x08023350
 8011638:	0802335c 	.word	0x0802335c
 801163c:	20001550 	.word	0x20001550
 8011640:	40020000 	.word	0x40020000
 8011644:	08023898 	.word	0x08023898
 8011648:	20001838 	.word	0x20001838
 801164c:	20001578 	.word	0x20001578
 8011650:	08023364 	.word	0x08023364
 8011654:	20001a74 	.word	0x20001a74
 8011658:	0802338c 	.word	0x0802338c
 801165c:	20001898 	.word	0x20001898
 8011660:	20002328 	.word	0x20002328
 8011664:	08023394 	.word	0x08023394
 8011668:	080233ac 	.word	0x080233ac
 801166c:	080233c0 	.word	0x080233c0
 8011670:	08022ebc 	.word	0x08022ebc
 8011674:	080233d0 	.word	0x080233d0
 8011678:	20001399 	.word	0x20001399
 801167c:	08023400 	.word	0x08023400
 8011680:	08023430 	.word	0x08023430
 8011684:	08023460 	.word	0x08023460
 8011688:	200013cb 	.word	0x200013cb
 801168c:	08023490 	.word	0x08023490
 8011690:	200014c5 	.word	0x200014c5
 8011694:	080234c0 	.word	0x080234c0
 8011698:	20001330 	.word	0x20001330
 801169c:	080234f0 	.word	0x080234f0
 80116a0:	2000142f 	.word	0x2000142f
 80116a4:	08023520 	.word	0x08023520
 80116a8:	200012cc 	.word	0x200012cc
 80116ac:	08023550 	.word	0x08023550
 80116b0:	08023584 	.word	0x08023584
 80116b4:	080235b4 	.word	0x080235b4
 80116b8:	080235e4 	.word	0x080235e4
 80116bc:	08023614 	.word	0x08023614
 80116c0:	08023644 	.word	0x08023644
 80116c4:	08023674 	.word	0x08023674
 80116c8:	080236a4 	.word	0x080236a4
 80116cc:	080236d8 	.word	0x080236d8
 80116d0:	0802370c 	.word	0x0802370c
 80116d4:	08023264 	.word	0x08023264
 80116d8:	4b28      	ldr	r3, [pc, #160]	@ (801177c <showall+0x434>)
 80116da:	461a      	mov	r2, r3
 80116dc:	4928      	ldr	r1, [pc, #160]	@ (8011780 <showall+0x438>)
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7fd ff0e 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 80116e4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80116e8:	461a      	mov	r2, r3
 80116ea:	4926      	ldr	r1, [pc, #152]	@ (8011784 <showall+0x43c>)
 80116ec:	68f8      	ldr	r0, [r7, #12]
 80116ee:	f7fd ff07 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 80116f2:	4925      	ldr	r1, [pc, #148]	@ (8011788 <showall+0x440>)
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7fd ff03 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 80116fa:	4b24      	ldr	r3, [pc, #144]	@ (801178c <showall+0x444>)
 80116fc:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 80116fe:	4618      	mov	r0, r3
 8011700:	f7ee ff3a 	bl	8000578 <__aeabi_f2d>
 8011704:	4602      	mov	r2, r0
 8011706:	460b      	mov	r3, r1
 8011708:	4921      	ldr	r1, [pc, #132]	@ (8011790 <showall+0x448>)
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f7fd fef8 	bl	800f500 <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 8011710:	4b20      	ldr	r3, [pc, #128]	@ (8011794 <showall+0x44c>)
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	461d      	mov	r5, r3
 8011716:	4b20      	ldr	r3, [pc, #128]	@ (8011798 <showall+0x450>)
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	461e      	mov	r6, r3
 801171c:	4b1f      	ldr	r3, [pc, #124]	@ (801179c <showall+0x454>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	461a      	mov	r2, r3
 8011722:	4b1f      	ldr	r3, [pc, #124]	@ (80117a0 <showall+0x458>)
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	4619      	mov	r1, r3
 8011728:	4b1e      	ldr	r3, [pc, #120]	@ (80117a4 <showall+0x45c>)
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	4618      	mov	r0, r3
 801172e:	4b1e      	ldr	r3, [pc, #120]	@ (80117a8 <showall+0x460>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	461c      	mov	r4, r3
 8011734:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011738:	9305      	str	r3, [sp, #20]
 801173a:	4b1c      	ldr	r3, [pc, #112]	@ (80117ac <showall+0x464>)
 801173c:	9304      	str	r3, [sp, #16]
 801173e:	9403      	str	r4, [sp, #12]
 8011740:	9002      	str	r0, [sp, #8]
 8011742:	9101      	str	r1, [sp, #4]
 8011744:	9200      	str	r2, [sp, #0]
 8011746:	4633      	mov	r3, r6
 8011748:	462a      	mov	r2, r5
 801174a:	4919      	ldr	r1, [pc, #100]	@ (80117b0 <showall+0x468>)
 801174c:	68f8      	ldr	r0, [r7, #12]
 801174e:	f7fd fed7 	bl	800f500 <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 8011752:	4a18      	ldr	r2, [pc, #96]	@ (80117b4 <showall+0x46c>)
 8011754:	4918      	ldr	r1, [pc, #96]	@ (80117b8 <showall+0x470>)
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7fd fed2 	bl	800f500 <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 801175c:	4917      	ldr	r1, [pc, #92]	@ (80117bc <showall+0x474>)
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	f7fd fece 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 8011764:	4915      	ldr	r1, [pc, #84]	@ (80117bc <showall+0x474>)
 8011766:	68f8      	ldr	r0, [r7, #12]
 8011768:	f7fd feca 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 801176c:	4913      	ldr	r1, [pc, #76]	@ (80117bc <showall+0x474>)
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7fd fec6 	bl	800f500 <cli_printf>
}
 8011774:	bf00      	nop
 8011776:	37d4      	adds	r7, #212	@ 0xd4
 8011778:	46bd      	mov	sp, r7
 801177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801177c:	0802326c 	.word	0x0802326c
 8011780:	08023740 	.word	0x08023740
 8011784:	08023770 	.word	0x08023770
 8011788:	080237a0 	.word	0x080237a0
 801178c:	20001530 	.word	0x20001530
 8011790:	080237d0 	.word	0x080237d0
 8011794:	20002322 	.word	0x20002322
 8011798:	20002323 	.word	0x20002323
 801179c:	20002324 	.word	0x20002324
 80117a0:	20002325 	.word	0x20002325
 80117a4:	20002326 	.word	0x20002326
 80117a8:	20002327 	.word	0x20002327
 80117ac:	200014c5 	.word	0x200014c5
 80117b0:	08023800 	.word	0x08023800
 80117b4:	2000002c 	.word	0x2000002c
 80117b8:	08023868 	.word	0x08023868
 80117bc:	08022ebc 	.word	0x08022ebc

080117c0 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80117cc:	4911      	ldr	r1, [pc, #68]	@ (8011814 <systemversion+0x54>)
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7fd fe96 	bl	800f500 <cli_printf>
		cli_printf(cli, "");
 80117d4:	490f      	ldr	r1, [pc, #60]	@ (8011814 <systemversion+0x54>)
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7fd fe92 	bl	800f500 <cli_printf>
		cli_printf(cli, "");
 80117dc:	490d      	ldr	r1, [pc, #52]	@ (8011814 <systemversion+0x54>)
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7fd fe8e 	bl	800f500 <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 80117e4:	490c      	ldr	r1, [pc, #48]	@ (8011818 <systemversion+0x58>)
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f7fd fe8a 	bl	800f500 <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 80117ec:	490b      	ldr	r1, [pc, #44]	@ (801181c <systemversion+0x5c>)
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f7fd fe86 	bl	800f500 <cli_printf>

		cli_printf(cli, "");
 80117f4:	4907      	ldr	r1, [pc, #28]	@ (8011814 <systemversion+0x54>)
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f7fd fe82 	bl	800f500 <cli_printf>
			cli_printf(cli, "");
 80117fc:	4905      	ldr	r1, [pc, #20]	@ (8011814 <systemversion+0x54>)
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7fd fe7e 	bl	800f500 <cli_printf>
			cli_printf(cli, "");
 8011804:	4903      	ldr	r1, [pc, #12]	@ (8011814 <systemversion+0x54>)
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7fd fe7a 	bl	800f500 <cli_printf>

}
 801180c:	bf00      	nop
 801180e:	3710      	adds	r7, #16
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	08022ebc 	.word	0x08022ebc
 8011818:	080238b8 	.word	0x080238b8
 801181c:	080238f0 	.word	0x080238f0

08011820 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 801182c:	4917      	ldr	r1, [pc, #92]	@ (801188c <aboutDev+0x6c>)
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f7fd fe66 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 8011834:	4915      	ldr	r1, [pc, #84]	@ (801188c <aboutDev+0x6c>)
 8011836:	68f8      	ldr	r0, [r7, #12]
 8011838:	f7fd fe62 	bl	800f500 <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 801183c:	4914      	ldr	r1, [pc, #80]	@ (8011890 <aboutDev+0x70>)
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7fd fe5e 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 8011844:	4911      	ldr	r1, [pc, #68]	@ (801188c <aboutDev+0x6c>)
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f7fd fe5a 	bl	800f500 <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 801184c:	4911      	ldr	r1, [pc, #68]	@ (8011894 <aboutDev+0x74>)
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7fd fe56 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 8011854:	490d      	ldr	r1, [pc, #52]	@ (801188c <aboutDev+0x6c>)
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f7fd fe52 	bl	800f500 <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 801185c:	490e      	ldr	r1, [pc, #56]	@ (8011898 <aboutDev+0x78>)
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	f7fd fe4e 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 8011864:	4909      	ldr	r1, [pc, #36]	@ (801188c <aboutDev+0x6c>)
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	f7fd fe4a 	bl	800f500 <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 801186c:	490b      	ldr	r1, [pc, #44]	@ (801189c <aboutDev+0x7c>)
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f7fd fe46 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 8011874:	4905      	ldr	r1, [pc, #20]	@ (801188c <aboutDev+0x6c>)
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7fd fe42 	bl	800f500 <cli_printf>
	cli_printf(cli, "");
 801187c:	4903      	ldr	r1, [pc, #12]	@ (801188c <aboutDev+0x6c>)
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7fd fe3e 	bl	800f500 <cli_printf>
}
 8011884:	bf00      	nop
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	08022ebc 	.word	0x08022ebc
 8011890:	08023928 	.word	0x08023928
 8011894:	08023950 	.word	0x08023950
 8011898:	08023978 	.word	0x08023978
 801189c:	0802398c 	.word	0x0802398c

080118a0 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80118a0:	b5b0      	push	{r4, r5, r7, lr}
 80118a2:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80118a6:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80118a8:	f000 fe3b 	bl	8012522 <embeddedCliNewDefault>
 80118ac:	4603      	mov	r3, r0
 80118ae:	4aa9      	ldr	r2, [pc, #676]	@ (8011b54 <initializeEmbeddedCli+0x2b4>)
 80118b0:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80118b2:	4ba9      	ldr	r3, [pc, #676]	@ (8011b58 <initializeEmbeddedCli+0x2b8>)
 80118b4:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 80118b8:	461d      	mov	r5, r3
 80118ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118be:	682b      	ldr	r3, [r5, #0]
 80118c0:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80118c2:	4ba6      	ldr	r3, [pc, #664]	@ (8011b5c <initializeEmbeddedCli+0x2bc>)
 80118c4:	f507 7448 	add.w	r4, r7, #800	@ 0x320
 80118c8:	461d      	mov	r5, r3
 80118ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118ce:	682b      	ldr	r3, [r5, #0]
 80118d0:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80118d2:	4ba3      	ldr	r3, [pc, #652]	@ (8011b60 <initializeEmbeddedCli+0x2c0>)
 80118d4:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 80118d8:	461d      	mov	r5, r3
 80118da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118de:	682b      	ldr	r3, [r5, #0]
 80118e0:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80118e2:	4ba0      	ldr	r3, [pc, #640]	@ (8011b64 <initializeEmbeddedCli+0x2c4>)
 80118e4:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 80118e8:	461d      	mov	r5, r3
 80118ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118ee:	682b      	ldr	r3, [r5, #0]
 80118f0:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 80118f2:	4b9d      	ldr	r3, [pc, #628]	@ (8011b68 <initializeEmbeddedCli+0x2c8>)
 80118f4:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 80118f8:	461d      	mov	r5, r3
 80118fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118fe:	682b      	ldr	r3, [r5, #0]
 8011900:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 8011902:	4b9a      	ldr	r3, [pc, #616]	@ (8011b6c <initializeEmbeddedCli+0x2cc>)
 8011904:	f507 7434 	add.w	r4, r7, #720	@ 0x2d0
 8011908:	461d      	mov	r5, r3
 801190a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801190c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801190e:	682b      	ldr	r3, [r5, #0]
 8011910:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 8011912:	4b97      	ldr	r3, [pc, #604]	@ (8011b70 <initializeEmbeddedCli+0x2d0>)
 8011914:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 8011918:	461d      	mov	r5, r3
 801191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801191e:	682b      	ldr	r3, [r5, #0]
 8011920:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 8011922:	4b94      	ldr	r3, [pc, #592]	@ (8011b74 <initializeEmbeddedCli+0x2d4>)
 8011924:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 8011928:	461d      	mov	r5, r3
 801192a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801192c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801192e:	682b      	ldr	r3, [r5, #0]
 8011930:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 8011932:	4b91      	ldr	r3, [pc, #580]	@ (8011b78 <initializeEmbeddedCli+0x2d8>)
 8011934:	f507 7425 	add.w	r4, r7, #660	@ 0x294
 8011938:	461d      	mov	r5, r3
 801193a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801193c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801193e:	682b      	ldr	r3, [r5, #0]
 8011940:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 8011942:	4b8e      	ldr	r3, [pc, #568]	@ (8011b7c <initializeEmbeddedCli+0x2dc>)
 8011944:	f507 7420 	add.w	r4, r7, #640	@ 0x280
 8011948:	461d      	mov	r5, r3
 801194a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801194c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801194e:	682b      	ldr	r3, [r5, #0]
 8011950:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 8011952:	4b8b      	ldr	r3, [pc, #556]	@ (8011b80 <initializeEmbeddedCli+0x2e0>)
 8011954:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 8011958:	461d      	mov	r5, r3
 801195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801195e:	682b      	ldr	r3, [r5, #0]
 8011960:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 8011962:	4b88      	ldr	r3, [pc, #544]	@ (8011b84 <initializeEmbeddedCli+0x2e4>)
 8011964:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8011968:	461d      	mov	r5, r3
 801196a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801196c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801196e:	682b      	ldr	r3, [r5, #0]
 8011970:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 8011972:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801197a:	4a83      	ldr	r2, [pc, #524]	@ (8011b88 <initializeEmbeddedCli+0x2e8>)
 801197c:	461c      	mov	r4, r3
 801197e:	4615      	mov	r5, r2
 8011980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011984:	682b      	ldr	r3, [r5, #0]
 8011986:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8011988:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801198c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011990:	4a7e      	ldr	r2, [pc, #504]	@ (8011b8c <initializeEmbeddedCli+0x2ec>)
 8011992:	461c      	mov	r4, r3
 8011994:	4615      	mov	r5, r2
 8011996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801199a:	682b      	ldr	r3, [r5, #0]
 801199c:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 801199e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80119a6:	4a7a      	ldr	r2, [pc, #488]	@ (8011b90 <initializeEmbeddedCli+0x2f0>)
 80119a8:	461c      	mov	r4, r3
 80119aa:	4615      	mov	r5, r2
 80119ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119b0:	682b      	ldr	r3, [r5, #0]
 80119b2:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80119b4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80119bc:	4a75      	ldr	r2, [pc, #468]	@ (8011b94 <initializeEmbeddedCli+0x2f4>)
 80119be:	461c      	mov	r4, r3
 80119c0:	4615      	mov	r5, r2
 80119c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119c6:	682b      	ldr	r3, [r5, #0]
 80119c8:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80119ca:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80119d2:	4a71      	ldr	r2, [pc, #452]	@ (8011b98 <initializeEmbeddedCli+0x2f8>)
 80119d4:	461c      	mov	r4, r3
 80119d6:	4615      	mov	r5, r2
 80119d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119dc:	682b      	ldr	r3, [r5, #0]
 80119de:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80119e0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80119e8:	4a6c      	ldr	r2, [pc, #432]	@ (8011b9c <initializeEmbeddedCli+0x2fc>)
 80119ea:	461c      	mov	r4, r3
 80119ec:	4615      	mov	r5, r2
 80119ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119f2:	682b      	ldr	r3, [r5, #0]
 80119f4:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 80119f6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119fa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80119fe:	4a68      	ldr	r2, [pc, #416]	@ (8011ba0 <initializeEmbeddedCli+0x300>)
 8011a00:	461c      	mov	r4, r3
 8011a02:	4615      	mov	r5, r2
 8011a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a08:	682b      	ldr	r3, [r5, #0]
 8011a0a:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8011a0c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a10:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011a14:	4a63      	ldr	r2, [pc, #396]	@ (8011ba4 <initializeEmbeddedCli+0x304>)
 8011a16:	461c      	mov	r4, r3
 8011a18:	4615      	mov	r5, r2
 8011a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a1e:	682b      	ldr	r3, [r5, #0]
 8011a20:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-force-calibration", .help =
 8011a22:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a26:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8011ba8 <initializeEmbeddedCli+0x308>)
 8011a2c:	461c      	mov	r4, r3
 8011a2e:	4615      	mov	r5, r2
 8011a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a34:	682b      	ldr	r3, [r5, #0]
 8011a36:	6023      	str	r3, [r4, #0]
			"Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding getCo2_Calibration = { .name = "get-co2-force-calibration-status", .help =
 8011a38:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a3c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011a40:	4a5a      	ldr	r2, [pc, #360]	@ (8011bac <initializeEmbeddedCli+0x30c>)
 8011a42:	461c      	mov	r4, r3
 8011a44:	4615      	mov	r5, r2
 8011a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a4a:	682b      	ldr	r3, [r5, #0]
 8011a4c:	6023      	str	r3, [r4, #0]
			"Get status of Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = statco2calibrate };


	CliCommandBinding Co2_AutoCalibration = { .name = "co2-auto-calibration", .help =
 8011a4e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a52:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011a56:	4a56      	ldr	r2, [pc, #344]	@ (8011bb0 <initializeEmbeddedCli+0x310>)
 8011a58:	461c      	mov	r4, r3
 8011a5a:	4615      	mov	r5, r2
 8011a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a60:	682b      	ldr	r3, [r5, #0]
 8011a62:	6023      	str	r3, [r4, #0]
			"Enable/Disable auto calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2_auto_calibration };


	CliCommandBinding getCo2_AutoCalibration = { .name = "get-co2-auto-calibration", .help =
 8011a64:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a68:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011a6c:	4a51      	ldr	r2, [pc, #324]	@ (8011bb4 <initializeEmbeddedCli+0x314>)
 8011a6e:	461c      	mov	r4, r3
 8011a70:	4615      	mov	r5, r2
 8011a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a76:	682b      	ldr	r3, [r5, #0]
 8011a78:	6023      	str	r3, [r4, #0]
			"Get Co2 sensor auto calibration status ", .tokenizeArgs = true, .context = NULL,
			.binding = get_auto_calibration };

	CliCommandBinding Co2_Tempoffset = { .name = "set-co2-temp-offset", .help =
 8011a7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a7e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011a82:	4a4d      	ldr	r2, [pc, #308]	@ (8011bb8 <initializeEmbeddedCli+0x318>)
 8011a84:	461c      	mov	r4, r3
 8011a86:	4615      	mov	r5, r2
 8011a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a8c:	682b      	ldr	r3, [r5, #0]
 8011a8e:	6023      	str	r3, [r4, #0]
			"Set temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_temp_offset };

	CliCommandBinding getCo2_Tempoffset = { .name = "get-co2-temp-offset", .help =
 8011a90:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a94:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011a98:	4a48      	ldr	r2, [pc, #288]	@ (8011bbc <initializeEmbeddedCli+0x31c>)
 8011a9a:	461c      	mov	r4, r3
 8011a9c:	4615      	mov	r5, r2
 8011a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aa2:	682b      	ldr	r3, [r5, #0]
 8011aa4:	6023      	str	r3, [r4, #0]
			"Get temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_temp_offset };

	CliCommandBinding Co2_altitudecompsentation = { .name = "set-co2-altitude-comp", .help =
 8011aa6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aaa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011aae:	4a44      	ldr	r2, [pc, #272]	@ (8011bc0 <initializeEmbeddedCli+0x320>)
 8011ab0:	461c      	mov	r4, r3
 8011ab2:	4615      	mov	r5, r2
 8011ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	6023      	str	r3, [r4, #0]
			"Set altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_altitude_compensation };

	CliCommandBinding getCo2_altitudecompsentation = { .name = "get-co2-altitude-comp", .help =
 8011abc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ac0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011ac4:	4a3f      	ldr	r2, [pc, #252]	@ (8011bc4 <initializeEmbeddedCli+0x324>)
 8011ac6:	461c      	mov	r4, r3
 8011ac8:	4615      	mov	r5, r2
 8011aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ace:	682b      	ldr	r3, [r5, #0]
 8011ad0:	6023      	str	r3, [r4, #0]
			"Get altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_altitude_compensation };

	CliCommandBinding Co2_Calibration_program = { .name = "run-co2-calib-prog", .help =
 8011ad2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ad6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011ada:	4a3b      	ldr	r2, [pc, #236]	@ (8011bc8 <initializeEmbeddedCli+0x328>)
 8011adc:	461c      	mov	r4, r3
 8011ade:	4615      	mov	r5, r2
 8011ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ae4:	682b      	ldr	r3, [r5, #0]
 8011ae6:	6023      	str	r3, [r4, #0]
			"Run Co2 sensor calibration program", .tokenizeArgs = true, .context = NULL,
			.binding = run_co2_calibration_routine };

	CliCommandBinding set_Co2_samples= { .name = "set-co2-samples", .help =
 8011ae8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aec:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011af0:	4a36      	ldr	r2, [pc, #216]	@ (8011bcc <initializeEmbeddedCli+0x32c>)
 8011af2:	461c      	mov	r4, r3
 8011af4:	4615      	mov	r5, r2
 8011af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011afa:	682b      	ldr	r3, [r5, #0]
 8011afc:	6023      	str	r3, [r4, #0]
			"Set how much samples you want Co2 sensor to take", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_samples };

	CliCommandBinding get_Co2_samples= { .name = "get-co2-samples", .help =
 8011afe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b02:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8011b06:	4a32      	ldr	r2, [pc, #200]	@ (8011bd0 <initializeEmbeddedCli+0x330>)
 8011b08:	461c      	mov	r4, r3
 8011b0a:	4615      	mov	r5, r2
 8011b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b10:	682b      	ldr	r3, [r5, #0]
 8011b12:	6023      	str	r3, [r4, #0]
			"Get Co2 samples", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_samples };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8011b14:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b18:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8011b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8011bd4 <initializeEmbeddedCli+0x334>)
 8011b1e:	461c      	mov	r4, r3
 8011b20:	4615      	mov	r5, r2
 8011b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b26:	682b      	ldr	r3, [r5, #0]
 8011b28:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8011b2a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b2e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8011b32:	4a29      	ldr	r2, [pc, #164]	@ (8011bd8 <initializeEmbeddedCli+0x338>)
 8011b34:	461c      	mov	r4, r3
 8011b36:	4615      	mov	r5, r2
 8011b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b3c:	682b      	ldr	r3, [r5, #0]
 8011b3e:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8011b40:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b44:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011b48:	4a24      	ldr	r2, [pc, #144]	@ (8011bdc <initializeEmbeddedCli+0x33c>)
 8011b4a:	461c      	mov	r4, r3
 8011b4c:	4615      	mov	r5, r2
 8011b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b52:	e045      	b.n	8011be0 <initializeEmbeddedCli+0x340>
 8011b54:	20001b2c 	.word	0x20001b2c
 8011b58:	080239c4 	.word	0x080239c4
 8011b5c:	08023a18 	.word	0x08023a18
 8011b60:	08023a80 	.word	0x08023a80
 8011b64:	08023ac0 	.word	0x08023ac0
 8011b68:	08023b20 	.word	0x08023b20
 8011b6c:	08023b70 	.word	0x08023b70
 8011b70:	08023b94 	.word	0x08023b94
 8011b74:	08023bc8 	.word	0x08023bc8
 8011b78:	08023bf4 	.word	0x08023bf4
 8011b7c:	08023c28 	.word	0x08023c28
 8011b80:	08023c54 	.word	0x08023c54
 8011b84:	08023c88 	.word	0x08023c88
 8011b88:	08023cbc 	.word	0x08023cbc
 8011b8c:	08023d08 	.word	0x08023d08
 8011b90:	08023d40 	.word	0x08023d40
 8011b94:	08023da4 	.word	0x08023da4
 8011b98:	08023dd8 	.word	0x08023dd8
 8011b9c:	08023e14 	.word	0x08023e14
 8011ba0:	08023e48 	.word	0x08023e48
 8011ba4:	08023e88 	.word	0x08023e88
 8011ba8:	08023ed4 	.word	0x08023ed4
 8011bac:	08023f3c 	.word	0x08023f3c
 8011bb0:	08023f98 	.word	0x08023f98
 8011bb4:	08023ff0 	.word	0x08023ff0
 8011bb8:	08024040 	.word	0x08024040
 8011bbc:	08024090 	.word	0x08024090
 8011bc0:	080240e4 	.word	0x080240e4
 8011bc4:	08024138 	.word	0x08024138
 8011bc8:	08024184 	.word	0x08024184
 8011bcc:	080241dc 	.word	0x080241dc
 8011bd0:	08024210 	.word	0x08024210
 8011bd4:	08024248 	.word	0x08024248
 8011bd8:	0802427c 	.word	0x0802427c
 8011bdc:	080242c4 	.word	0x080242c4
 8011be0:	682b      	ldr	r3, [r5, #0]
 8011be2:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8011be4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011be8:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011bec:	4acb      	ldr	r2, [pc, #812]	@ (8011f1c <initializeEmbeddedCli+0x67c>)
 8011bee:	461c      	mov	r4, r3
 8011bf0:	4615      	mov	r5, r2
 8011bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bf6:	682b      	ldr	r3, [r5, #0]
 8011bf8:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8011bfa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bfe:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8011c02:	4ac7      	ldr	r2, [pc, #796]	@ (8011f20 <initializeEmbeddedCli+0x680>)
 8011c04:	461c      	mov	r4, r3
 8011c06:	4615      	mov	r5, r2
 8011c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8011c10:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c14:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8011c18:	4ac2      	ldr	r2, [pc, #776]	@ (8011f24 <initializeEmbeddedCli+0x684>)
 8011c1a:	461c      	mov	r4, r3
 8011c1c:	4615      	mov	r5, r2
 8011c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c22:	682b      	ldr	r3, [r5, #0]
 8011c24:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8011c26:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c2a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8011c2e:	4abe      	ldr	r2, [pc, #760]	@ (8011f28 <initializeEmbeddedCli+0x688>)
 8011c30:	461c      	mov	r4, r3
 8011c32:	4615      	mov	r5, r2
 8011c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8011c3c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c40:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8011c44:	4ab9      	ldr	r2, [pc, #740]	@ (8011f2c <initializeEmbeddedCli+0x68c>)
 8011c46:	461c      	mov	r4, r3
 8011c48:	4615      	mov	r5, r2
 8011c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8011c52:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c56:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8011c5a:	4ab5      	ldr	r2, [pc, #724]	@ (8011f30 <initializeEmbeddedCli+0x690>)
 8011c5c:	461c      	mov	r4, r3
 8011c5e:	4615      	mov	r5, r2
 8011c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c64:	682b      	ldr	r3, [r5, #0]
 8011c66:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8011c68:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c6c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8011c70:	4ab0      	ldr	r2, [pc, #704]	@ (8011f34 <initializeEmbeddedCli+0x694>)
 8011c72:	461c      	mov	r4, r3
 8011c74:	4615      	mov	r5, r2
 8011c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c7a:	682b      	ldr	r3, [r5, #0]
 8011c7c:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8011c7e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c82:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8011c86:	4aac      	ldr	r2, [pc, #688]	@ (8011f38 <initializeEmbeddedCli+0x698>)
 8011c88:	461c      	mov	r4, r3
 8011c8a:	4615      	mov	r5, r2
 8011c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c90:	682b      	ldr	r3, [r5, #0]
 8011c92:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8011c94:	4ba9      	ldr	r3, [pc, #676]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011c96:	681c      	ldr	r4, [r3, #0]
 8011c98:	466a      	mov	r2, sp
 8011c9a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8011c9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ca2:	e882 0003 	stmia.w	r2, {r0, r1}
 8011ca6:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8011caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cac:	4620      	mov	r0, r4
 8011cae:	f000 fcf6 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8011cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011cb4:	681c      	ldr	r4, [r3, #0]
 8011cb6:	466a      	mov	r2, sp
 8011cb8:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8011cbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cc4:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8011cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f000 fce7 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8011cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011cd2:	681c      	ldr	r4, [r3, #0]
 8011cd4:	466a      	mov	r2, sp
 8011cd6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8011cda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cde:	e882 0003 	stmia.w	r2, {r0, r1}
 8011ce2:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8011ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f000 fcd8 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8011cee:	4b93      	ldr	r3, [pc, #588]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011cf0:	681c      	ldr	r4, [r3, #0]
 8011cf2:	466a      	mov	r2, sp
 8011cf4:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8011cf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cfc:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d00:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8011d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d06:	4620      	mov	r0, r4
 8011d08:	f000 fcc9 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8011d0c:	4b8b      	ldr	r3, [pc, #556]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011d0e:	681c      	ldr	r4, [r3, #0]
 8011d10:	466a      	mov	r2, sp
 8011d12:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8011d16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d1a:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d1e:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 8011d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 fcba 	bl	801269e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8011d2a:	4b84      	ldr	r3, [pc, #528]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011d2c:	681c      	ldr	r4, [r3, #0]
 8011d2e:	466a      	mov	r2, sp
 8011d30:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8011d34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d38:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d3c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8011d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 fcab 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8011d48:	4b7c      	ldr	r3, [pc, #496]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011d4a:	681c      	ldr	r4, [r3, #0]
 8011d4c:	466a      	mov	r2, sp
 8011d4e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8011d52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d56:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d5a:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8011d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 fc9c 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8011d66:	4b75      	ldr	r3, [pc, #468]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011d68:	681c      	ldr	r4, [r3, #0]
 8011d6a:	466a      	mov	r2, sp
 8011d6c:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8011d70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d74:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d78:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8011d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f000 fc8d 	bl	801269e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8011d84:	4b6d      	ldr	r3, [pc, #436]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011d86:	681c      	ldr	r4, [r3, #0]
 8011d88:	466a      	mov	r2, sp
 8011d8a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8011d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d92:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d96:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8011d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f000 fc7e 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8011da2:	4b66      	ldr	r3, [pc, #408]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011da4:	681c      	ldr	r4, [r3, #0]
 8011da6:	466a      	mov	r2, sp
 8011da8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8011dac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011db0:	e882 0003 	stmia.w	r2, {r0, r1}
 8011db4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8011db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f000 fc6f 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8011dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011dc2:	681c      	ldr	r4, [r3, #0]
 8011dc4:	466a      	mov	r2, sp
 8011dc6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8011dca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dce:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dd2:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8011dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f000 fc60 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8011dde:	4b57      	ldr	r3, [pc, #348]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011de0:	681c      	ldr	r4, [r3, #0]
 8011de2:	466a      	mov	r2, sp
 8011de4:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8011de8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dec:	e882 0003 	stmia.w	r2, {r0, r1}
 8011df0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8011df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 fc51 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8011dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011dfe:	681c      	ldr	r4, [r3, #0]
 8011e00:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e08:	466d      	mov	r5, sp
 8011e0a:	f103 020c 	add.w	r2, r3, #12
 8011e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e12:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f000 fc40 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8011e1e:	4b47      	ldr	r3, [pc, #284]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011e20:	681c      	ldr	r4, [r3, #0]
 8011e22:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011e2a:	466d      	mov	r5, sp
 8011e2c:	f103 020c 	add.w	r2, r3, #12
 8011e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e34:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f000 fc2f 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8011e40:	4b3e      	ldr	r3, [pc, #248]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011e42:	681c      	ldr	r4, [r3, #0]
 8011e44:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e4c:	466d      	mov	r5, sp
 8011e4e:	f103 020c 	add.w	r2, r3, #12
 8011e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 fc1e 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8011e62:	4b36      	ldr	r3, [pc, #216]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011e64:	681c      	ldr	r4, [r3, #0]
 8011e66:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e6a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011e6e:	466d      	mov	r5, sp
 8011e70:	f103 020c 	add.w	r2, r3, #12
 8011e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f000 fc0d 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8011e84:	4b2d      	ldr	r3, [pc, #180]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011e86:	681c      	ldr	r4, [r3, #0]
 8011e88:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e8c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011e90:	466d      	mov	r5, sp
 8011e92:	f103 020c 	add.w	r2, r3, #12
 8011e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f000 fbfc 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8011ea6:	4b25      	ldr	r3, [pc, #148]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011ea8:	681c      	ldr	r4, [r3, #0]
 8011eaa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011eae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011eb2:	466d      	mov	r5, sp
 8011eb4:	f103 020c 	add.w	r2, r3, #12
 8011eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	f000 fbeb 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8011ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011eca:	681c      	ldr	r4, [r3, #0]
 8011ecc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ed0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011ed4:	466d      	mov	r5, sp
 8011ed6:	f103 020c 	add.w	r2, r3, #12
 8011eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f000 fbda 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8011eea:	4b14      	ldr	r3, [pc, #80]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011eec:	681c      	ldr	r4, [r3, #0]
 8011eee:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ef2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011ef6:	466d      	mov	r5, sp
 8011ef8:	f103 020c 	add.w	r2, r3, #12
 8011efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f00:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f06:	4620      	mov	r0, r4
 8011f08:	f000 fbc9 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8011f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8011f3c <initializeEmbeddedCli+0x69c>)
 8011f0e:	681c      	ldr	r4, [r3, #0]
 8011f10:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f14:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011f18:	e012      	b.n	8011f40 <initializeEmbeddedCli+0x6a0>
 8011f1a:	bf00      	nop
 8011f1c:	0802430c 	.word	0x0802430c
 8011f20:	08024354 	.word	0x08024354
 8011f24:	0802438c 	.word	0x0802438c
 8011f28:	080243f0 	.word	0x080243f0
 8011f2c:	0802441c 	.word	0x0802441c
 8011f30:	08024454 	.word	0x08024454
 8011f34:	08024498 	.word	0x08024498
 8011f38:	080244d0 	.word	0x080244d0
 8011f3c:	20001b2c 	.word	0x20001b2c
 8011f40:	466d      	mov	r5, sp
 8011f42:	f103 020c 	add.w	r2, r3, #12
 8011f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f50:	4620      	mov	r0, r4
 8011f52:	f000 fba4 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Calibration);
 8011f56:	4bba      	ldr	r3, [pc, #744]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8011f58:	681c      	ldr	r4, [r3, #0]
 8011f5a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f5e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011f62:	466d      	mov	r5, sp
 8011f64:	f103 020c 	add.w	r2, r3, #12
 8011f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f72:	4620      	mov	r0, r4
 8011f74:	f000 fb93 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_AutoCalibration);
 8011f78:	4bb1      	ldr	r3, [pc, #708]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8011f7a:	681c      	ldr	r4, [r3, #0]
 8011f7c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f80:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011f84:	466d      	mov	r5, sp
 8011f86:	f103 020c 	add.w	r2, r3, #12
 8011f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f94:	4620      	mov	r0, r4
 8011f96:	f000 fb82 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_AutoCalibration);
 8011f9a:	4ba9      	ldr	r3, [pc, #676]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8011f9c:	681c      	ldr	r4, [r3, #0]
 8011f9e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fa2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011fa6:	466d      	mov	r5, sp
 8011fa8:	f103 020c 	add.w	r2, r3, #12
 8011fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 fb71 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Tempoffset);
 8011fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8011fbe:	681c      	ldr	r4, [r3, #0]
 8011fc0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fc4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011fc8:	466d      	mov	r5, sp
 8011fca:	f103 020c 	add.w	r2, r3, #12
 8011fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 fb60 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Tempoffset);
 8011fde:	4b98      	ldr	r3, [pc, #608]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8011fe0:	681c      	ldr	r4, [r3, #0]
 8011fe2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fe6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011fea:	466d      	mov	r5, sp
 8011fec:	f103 020c 	add.w	r2, r3, #12
 8011ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ff4:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f000 fb4f 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_altitudecompsentation);
 8012000:	4b8f      	ldr	r3, [pc, #572]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012002:	681c      	ldr	r4, [r3, #0]
 8012004:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012008:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801200c:	466d      	mov	r5, sp
 801200e:	f103 020c 	add.w	r2, r3, #12
 8012012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012016:	e885 0003 	stmia.w	r5, {r0, r1}
 801201a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801201c:	4620      	mov	r0, r4
 801201e:	f000 fb3e 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_altitudecompsentation);
 8012022:	4b87      	ldr	r3, [pc, #540]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012024:	681c      	ldr	r4, [r3, #0]
 8012026:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801202a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801202e:	466d      	mov	r5, sp
 8012030:	f103 020c 	add.w	r2, r3, #12
 8012034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012038:	e885 0003 	stmia.w	r5, {r0, r1}
 801203c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801203e:	4620      	mov	r0, r4
 8012040:	f000 fb2d 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration_program);
 8012044:	4b7e      	ldr	r3, [pc, #504]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012046:	681c      	ldr	r4, [r3, #0]
 8012048:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801204c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8012050:	466d      	mov	r5, sp
 8012052:	f103 020c 	add.w	r2, r3, #12
 8012056:	e892 0003 	ldmia.w	r2, {r0, r1}
 801205a:	e885 0003 	stmia.w	r5, {r0, r1}
 801205e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012060:	4620      	mov	r0, r4
 8012062:	f000 fb1c 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, set_Co2_samples);
 8012066:	4b76      	ldr	r3, [pc, #472]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012068:	681c      	ldr	r4, [r3, #0]
 801206a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801206e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8012072:	466d      	mov	r5, sp
 8012074:	f103 020c 	add.w	r2, r3, #12
 8012078:	e892 0003 	ldmia.w	r2, {r0, r1}
 801207c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012082:	4620      	mov	r0, r4
 8012084:	f000 fb0b 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, get_Co2_samples);
 8012088:	4b6d      	ldr	r3, [pc, #436]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 801208a:	681c      	ldr	r4, [r3, #0]
 801208c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012090:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8012094:	466d      	mov	r5, sp
 8012096:	f103 020c 	add.w	r2, r3, #12
 801209a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801209e:	e885 0003 	stmia.w	r5, {r0, r1}
 80120a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120a4:	4620      	mov	r0, r4
 80120a6:	f000 fafa 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 80120aa:	4b65      	ldr	r3, [pc, #404]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 80120ac:	681c      	ldr	r4, [r3, #0]
 80120ae:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120b2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80120b6:	466d      	mov	r5, sp
 80120b8:	f103 020c 	add.w	r2, r3, #12
 80120bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80120c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120c6:	4620      	mov	r0, r4
 80120c8:	f000 fae9 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 80120cc:	4b5c      	ldr	r3, [pc, #368]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 80120ce:	681c      	ldr	r4, [r3, #0]
 80120d0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120d4:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80120d8:	466d      	mov	r5, sp
 80120da:	f103 020c 	add.w	r2, r3, #12
 80120de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80120e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120e8:	4620      	mov	r0, r4
 80120ea:	f000 fad8 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 80120ee:	4b54      	ldr	r3, [pc, #336]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 80120f0:	681c      	ldr	r4, [r3, #0]
 80120f2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120f6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80120fa:	466d      	mov	r5, sp
 80120fc:	f103 020c 	add.w	r2, r3, #12
 8012100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012104:	e885 0003 	stmia.w	r5, {r0, r1}
 8012108:	cb0e      	ldmia	r3, {r1, r2, r3}
 801210a:	4620      	mov	r0, r4
 801210c:	f000 fac7 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8012110:	4b4b      	ldr	r3, [pc, #300]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012112:	681c      	ldr	r4, [r3, #0]
 8012114:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012118:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 801211c:	466d      	mov	r5, sp
 801211e:	f103 020c 	add.w	r2, r3, #12
 8012122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012126:	e885 0003 	stmia.w	r5, {r0, r1}
 801212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fab6 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8012132:	4b43      	ldr	r3, [pc, #268]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012134:	681c      	ldr	r4, [r3, #0]
 8012136:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801213a:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 801213e:	466d      	mov	r5, sp
 8012140:	f103 020c 	add.w	r2, r3, #12
 8012144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012148:	e885 0003 	stmia.w	r5, {r0, r1}
 801214c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801214e:	4620      	mov	r0, r4
 8012150:	f000 faa5 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8012154:	4b3a      	ldr	r3, [pc, #232]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012156:	681c      	ldr	r4, [r3, #0]
 8012158:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801215c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8012160:	466d      	mov	r5, sp
 8012162:	f103 020c 	add.w	r2, r3, #12
 8012166:	e892 0003 	ldmia.w	r2, {r0, r1}
 801216a:	e885 0003 	stmia.w	r5, {r0, r1}
 801216e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012170:	4620      	mov	r0, r4
 8012172:	f000 fa94 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8012176:	4b32      	ldr	r3, [pc, #200]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012178:	681c      	ldr	r4, [r3, #0]
 801217a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801217e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8012182:	466d      	mov	r5, sp
 8012184:	f103 020c 	add.w	r2, r3, #12
 8012188:	e892 0003 	ldmia.w	r2, {r0, r1}
 801218c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012192:	4620      	mov	r0, r4
 8012194:	f000 fa83 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8012198:	4b29      	ldr	r3, [pc, #164]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 801219a:	681c      	ldr	r4, [r3, #0]
 801219c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121a0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80121a4:	466d      	mov	r5, sp
 80121a6:	f103 020c 	add.w	r2, r3, #12
 80121aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80121b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121b4:	4620      	mov	r0, r4
 80121b6:	f000 fa72 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 80121ba:	4b21      	ldr	r3, [pc, #132]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 80121bc:	681c      	ldr	r4, [r3, #0]
 80121be:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121c2:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80121c6:	466d      	mov	r5, sp
 80121c8:	f103 020c 	add.w	r2, r3, #12
 80121cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80121d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121d6:	4620      	mov	r0, r4
 80121d8:	f000 fa61 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 80121dc:	4b18      	ldr	r3, [pc, #96]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 80121de:	681c      	ldr	r4, [r3, #0]
 80121e0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121e4:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80121e8:	466d      	mov	r5, sp
 80121ea:	f103 020c 	add.w	r2, r3, #12
 80121ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80121f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121f8:	4620      	mov	r0, r4
 80121fa:	f000 fa50 	bl	801269e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 80121fe:	4b10      	ldr	r3, [pc, #64]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012200:	681c      	ldr	r4, [r3, #0]
 8012202:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012206:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 801220a:	466d      	mov	r5, sp
 801220c:	f103 020c 	add.w	r2, r3, #12
 8012210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012214:	e885 0003 	stmia.w	r5, {r0, r1}
 8012218:	cb0e      	ldmia	r3, {r1, r2, r3}
 801221a:	4620      	mov	r0, r4
 801221c:	f000 fa3f 	bl	801269e <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8012220:	4b07      	ldr	r3, [pc, #28]	@ (8012240 <initializeEmbeddedCli+0x9a0>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	4a07      	ldr	r2, [pc, #28]	@ (8012244 <initializeEmbeddedCli+0x9a4>)
 8012226:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8012228:	4b07      	ldr	r3, [pc, #28]	@ (8012248 <initializeEmbeddedCli+0x9a8>)
 801222a:	2201      	movs	r2, #1
 801222c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801222e:	4b07      	ldr	r3, [pc, #28]	@ (801224c <initializeEmbeddedCli+0x9ac>)
 8012230:	2200      	movs	r2, #0
 8012232:	701a      	strb	r2, [r3, #0]
}
 8012234:	bf00      	nop
 8012236:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 801223a:	46bd      	mov	sp, r7
 801223c:	bdb0      	pop	{r4, r5, r7, pc}
 801223e:	bf00      	nop
 8012240:	20001b2c 	.word	0x20001b2c
 8012244:	0800f4d5 	.word	0x0800f4d5
 8012248:	20001b39 	.word	0x20001b39
 801224c:	20001b3a 	.word	0x20001b3a

08012250 <console_process>:

void console_process(void) {
 8012250:	b580      	push	{r7, lr}
 8012252:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8012254:	4b03      	ldr	r3, [pc, #12]	@ (8012264 <console_process+0x14>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	4618      	mov	r0, r3
 801225a:	f000 f990 	bl	801257e <embeddedCliProcess>
}
 801225e:	bf00      	nop
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	20001b2c 	.word	0x20001b2c

08012268 <console_uart_deinit>:

void console_uart_deinit() {
 8012268:	b580      	push	{r7, lr}
 801226a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 801226c:	4803      	ldr	r0, [pc, #12]	@ (801227c <console_uart_deinit+0x14>)
 801226e:	f7f9 ffb3 	bl	800c1d8 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8012272:	4802      	ldr	r0, [pc, #8]	@ (801227c <console_uart_deinit+0x14>)
 8012274:	f7f1 fd1a 	bl	8003cac <HAL_UART_MspDeInit>
}
 8012278:	bf00      	nop
 801227a:	bd80      	pop	{r7, pc}
 801227c:	20001a74 	.word	0x20001a74

08012280 <console_uart_init>:
void console_uart_init() {
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012284:	4815      	ldr	r0, [pc, #84]	@ (80122dc <console_uart_init+0x5c>)
 8012286:	f7f9 ffa7 	bl	800c1d8 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 801228a:	4b14      	ldr	r3, [pc, #80]	@ (80122dc <console_uart_init+0x5c>)
 801228c:	4a14      	ldr	r2, [pc, #80]	@ (80122e0 <console_uart_init+0x60>)
 801228e:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8012290:	4b12      	ldr	r3, [pc, #72]	@ (80122dc <console_uart_init+0x5c>)
 8012292:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012296:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012298:	4b10      	ldr	r3, [pc, #64]	@ (80122dc <console_uart_init+0x5c>)
 801229a:	2200      	movs	r2, #0
 801229c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 801229e:	4b0f      	ldr	r3, [pc, #60]	@ (80122dc <console_uart_init+0x5c>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80122a4:	4b0d      	ldr	r3, [pc, #52]	@ (80122dc <console_uart_init+0x5c>)
 80122a6:	2200      	movs	r2, #0
 80122a8:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80122aa:	4b0c      	ldr	r3, [pc, #48]	@ (80122dc <console_uart_init+0x5c>)
 80122ac:	220c      	movs	r2, #12
 80122ae:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80122b0:	4b0a      	ldr	r3, [pc, #40]	@ (80122dc <console_uart_init+0x5c>)
 80122b2:	2200      	movs	r2, #0
 80122b4:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80122b6:	4b09      	ldr	r3, [pc, #36]	@ (80122dc <console_uart_init+0x5c>)
 80122b8:	2200      	movs	r2, #0
 80122ba:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80122bc:	4807      	ldr	r0, [pc, #28]	@ (80122dc <console_uart_init+0x5c>)
 80122be:	f7f9 ff3b 	bl	800c138 <HAL_UART_Init>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d001      	beq.n	80122cc <console_uart_init+0x4c>
		Error_Handler();
 80122c8:	f7f1 f9ce 	bl	8003668 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80122cc:	2201      	movs	r2, #1
 80122ce:	4905      	ldr	r1, [pc, #20]	@ (80122e4 <console_uart_init+0x64>)
 80122d0:	4802      	ldr	r0, [pc, #8]	@ (80122dc <console_uart_init+0x5c>)
 80122d2:	f7fa f83e 	bl	800c352 <HAL_UART_Receive_IT>
}
 80122d6:	bf00      	nop
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	20001a74 	.word	0x20001a74
 80122e0:	40011000 	.word	0x40011000
 80122e4:	20001b38 	.word	0x20001b38

080122e8 <console_init>:

void console_init(void) {
 80122e8:	b580      	push	{r7, lr}
 80122ea:	af00      	add	r7, sp, #0
	console_uart_init();
 80122ec:	f7ff ffc8 	bl	8012280 <console_uart_init>
	initializeEmbeddedCli();
 80122f0:	f7ff fad6 	bl	80118a0 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80122f4:	2201      	movs	r2, #1
 80122f6:	4903      	ldr	r1, [pc, #12]	@ (8012304 <console_init+0x1c>)
 80122f8:	4803      	ldr	r0, [pc, #12]	@ (8012308 <console_init+0x20>)
 80122fa:	f7fa f82a 	bl	800c352 <HAL_UART_Receive_IT>
}
 80122fe:	bf00      	nop
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	20001b38 	.word	0x20001b38
 8012308:	20001a74 	.word	0x20001a74

0801230c <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 801230c:	b480      	push	{r7}
 801230e:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8012310:	4b0e      	ldr	r3, [pc, #56]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 8012312:	2240      	movs	r2, #64	@ 0x40
 8012314:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8012316:	4b0d      	ldr	r3, [pc, #52]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 8012318:	2240      	movs	r2, #64	@ 0x40
 801231a:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 801231c:	4b0b      	ldr	r3, [pc, #44]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 801231e:	2280      	movs	r2, #128	@ 0x80
 8012320:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8012322:	4b0a      	ldr	r3, [pc, #40]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 8012324:	2200      	movs	r2, #0
 8012326:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8012328:	4b08      	ldr	r3, [pc, #32]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 801232a:	2200      	movs	r2, #0
 801232c:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 70;
 801232e:	4b07      	ldr	r3, [pc, #28]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 8012330:	2246      	movs	r2, #70	@ 0x46
 8012332:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8012334:	4b05      	ldr	r3, [pc, #20]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 8012336:	2201      	movs	r2, #1
 8012338:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 801233a:	4b04      	ldr	r3, [pc, #16]	@ (801234c <embeddedCliDefaultConfig+0x40>)
 801233c:	4a04      	ldr	r2, [pc, #16]	@ (8012350 <embeddedCliDefaultConfig+0x44>)
 801233e:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8012340:	4b02      	ldr	r3, [pc, #8]	@ (801234c <embeddedCliDefaultConfig+0x40>)
}
 8012342:	4618      	mov	r0, r3
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	20001b40 	.word	0x20001b40
 8012350:	080244e8 	.word	0x080244e8

08012354 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	895b      	ldrh	r3, [r3, #10]
 8012360:	2201      	movs	r2, #1
 8012362:	4413      	add	r3, r2
 8012364:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	889b      	ldrh	r3, [r3, #4]
 801236a:	3303      	adds	r3, #3
 801236c:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	88db      	ldrh	r3, [r3, #6]
 8012372:	3303      	adds	r3, #3
 8012374:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8012376:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	891b      	ldrh	r3, [r3, #8]
 801237c:	3303      	adds	r3, #3
 801237e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012380:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8012382:	89fa      	ldrh	r2, [r7, #14]
 8012384:	4613      	mov	r3, r2
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4413      	add	r3, r2
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	3303      	adds	r3, #3
 801238e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8012390:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8012392:	89fb      	ldrh	r3, [r7, #14]
 8012394:	3303      	adds	r3, #3
 8012396:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8012398:	4413      	add	r3, r2
 801239a:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 801239c:	b29b      	uxth	r3, r3
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	b29b      	uxth	r3, r3
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3714      	adds	r7, #20
 80123a6:	46bd      	mov	sp, r7
 80123a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ac:	4770      	bx	lr

080123ae <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b088      	sub	sp, #32
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80123b6:	2300      	movs	r3, #0
 80123b8:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	895b      	ldrh	r3, [r3, #10]
 80123be:	2201      	movs	r2, #1
 80123c0:	4413      	add	r3, r2
 80123c2:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f7ff ffc5 	bl	8012354 <embeddedCliRequiredSize>
 80123ca:	4603      	mov	r3, r0
 80123cc:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 80123ce:	2300      	movs	r3, #0
 80123d0:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d10f      	bne.n	80123fa <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 80123da:	6938      	ldr	r0, [r7, #16]
 80123dc:	f00b f9fc 	bl	801d7d8 <malloc>
 80123e0:	4603      	mov	r3, r0
 80123e2:	461a      	mov	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d101      	bne.n	80123f4 <embeddedCliNew+0x46>
            return NULL;
 80123f0:	2300      	movs	r3, #0
 80123f2:	e092      	b.n	801251a <embeddedCliNew+0x16c>
        allocated = true;
 80123f4:	2301      	movs	r3, #1
 80123f6:	77fb      	strb	r3, [r7, #31]
 80123f8:	e007      	b.n	801240a <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	8a1b      	ldrh	r3, [r3, #16]
 80123fe:	461a      	mov	r2, r3
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	4293      	cmp	r3, r2
 8012404:	d901      	bls.n	801240a <embeddedCliNew+0x5c>
        return NULL;
 8012406:	2300      	movs	r3, #0
 8012408:	e087      	b.n	801251a <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8012410:	693a      	ldr	r2, [r7, #16]
 8012412:	2100      	movs	r1, #0
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f00c fc5d 	bl	801ecd4 <memset>

    cli = (EmbeddedCli *) buf;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3310      	adds	r3, #16
 8012422:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8012424:	69bb      	ldr	r3, [r7, #24]
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	3334      	adds	r3, #52	@ 0x34
 801242e:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	68fa      	ldr	r2, [r7, #12]
 801243a:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	889b      	ldrh	r3, [r3, #4]
 8012440:	3303      	adds	r3, #3
 8012442:	f023 0303 	bic.w	r3, r3, #3
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	4413      	add	r3, r2
 801244a:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	68fa      	ldr	r2, [r7, #12]
 8012450:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	88db      	ldrh	r3, [r3, #6]
 8012456:	3303      	adds	r3, #3
 8012458:	f023 0303 	bic.w	r3, r3, #3
 801245c:	68fa      	ldr	r2, [r7, #12]
 801245e:	4413      	add	r3, r2
 8012460:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	68fa      	ldr	r2, [r7, #12]
 8012466:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8012468:	8afa      	ldrh	r2, [r7, #22]
 801246a:	4613      	mov	r3, r2
 801246c:	009b      	lsls	r3, r3, #2
 801246e:	4413      	add	r3, r2
 8012470:	009b      	lsls	r3, r3, #2
 8012472:	3303      	adds	r3, #3
 8012474:	f023 0303 	bic.w	r3, r3, #3
 8012478:	68fa      	ldr	r2, [r7, #12]
 801247a:	4413      	add	r3, r2
 801247c:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	68fa      	ldr	r2, [r7, #12]
 8012482:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8012484:	8afb      	ldrh	r3, [r7, #22]
 8012486:	3303      	adds	r3, #3
 8012488:	f023 0303 	bic.w	r3, r3, #3
 801248c:	68fa      	ldr	r2, [r7, #12]
 801248e:	4413      	add	r3, r2
 8012490:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	68fa      	ldr	r2, [r7, #12]
 8012496:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	891a      	ldrh	r2, [r3, #8]
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80124a0:	7ffb      	ldrb	r3, [r7, #31]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d008      	beq.n	80124b8 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124ac:	f043 0304 	orr.w	r3, r3, #4
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	7c9b      	ldrb	r3, [r3, #18]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d008      	beq.n	80124d2 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124c6:	f043 0320 	orr.w	r3, r3, #32
 80124ca:	b2da      	uxtb	r2, r3
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	889a      	ldrh	r2, [r3, #4]
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2200      	movs	r2, #0
 80124de:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	2200      	movs	r2, #0
 80124e4:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	88da      	ldrh	r2, [r3, #6]
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	2200      	movs	r2, #0
 80124f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	895b      	ldrh	r3, [r3, #10]
 80124f8:	2201      	movs	r2, #1
 80124fa:	4413      	add	r3, r2
 80124fc:	b29a      	uxth	r2, r3
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	2200      	movs	r2, #0
 8012506:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8012512:	69b8      	ldr	r0, [r7, #24]
 8012514:	f000 fc5e 	bl	8012dd4 <initInternalBindings>

    return cli;
 8012518:	69bb      	ldr	r3, [r7, #24]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3720      	adds	r7, #32
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8012522:	b580      	push	{r7, lr}
 8012524:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 8012526:	f7ff fef1 	bl	801230c <embeddedCliDefaultConfig>
 801252a:	4603      	mov	r3, r0
 801252c:	4618      	mov	r0, r3
 801252e:	f7ff ff3e 	bl	80123ae <embeddedCliNew>
 8012532:	4603      	mov	r3, r0
}
 8012534:	4618      	mov	r0, r3
 8012536:	bd80      	pop	{r7, pc}

08012538 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	460b      	mov	r3, r1
 8012542:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	3310      	adds	r3, #16
 801254e:	78fa      	ldrb	r2, [r7, #3]
 8012550:	4611      	mov	r1, r2
 8012552:	4618      	mov	r0, r3
 8012554:	f001 f865 	bl	8013622 <fifoBufPush>
 8012558:	4603      	mov	r3, r0
 801255a:	f083 0301 	eor.w	r3, r3, #1
 801255e:	b2db      	uxtb	r3, r3
 8012560:	2b00      	cmp	r3, #0
 8012562:	d008      	beq.n	8012576 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801256a:	f043 0301 	orr.w	r3, r3, #1
 801256e:	b2da      	uxtb	r2, r3
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8012576:	bf00      	nop
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 801257e:	b580      	push	{r7, lr}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	f000 8083 	beq.w	8012696 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801259c:	f003 0302 	and.w	r3, r3, #2
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d155      	bne.n	8012650 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125aa:	f043 0302 	orr.w	r3, r3, #2
 80125ae:	b2da      	uxtb	r2, r3
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4619      	mov	r1, r3
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f000 ff8f 	bl	80134e0 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 80125c2:	e045      	b.n	8012650 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	3310      	adds	r3, #16
 80125c8:	4618      	mov	r0, r3
 80125ca:	f001 f802 	bl	80135d2 <fifoBufPop>
 80125ce:	4603      	mov	r3, r0
 80125d0:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125d8:	f003 0308 	and.w	r3, r3, #8
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d005      	beq.n	80125ec <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80125e0:	7afb      	ldrb	r3, [r7, #11]
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 fa17 	bl	8012a18 <onEscapedInput>
 80125ea:	e02a      	b.n	8012642 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80125f2:	2b1b      	cmp	r3, #27
 80125f4:	d10c      	bne.n	8012610 <embeddedCliProcess+0x92>
 80125f6:	7afb      	ldrb	r3, [r7, #11]
 80125f8:	2b5b      	cmp	r3, #91	@ 0x5b
 80125fa:	d109      	bne.n	8012610 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012602:	f043 0308 	orr.w	r3, r3, #8
 8012606:	b2da      	uxtb	r2, r3
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 801260e:	e018      	b.n	8012642 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8012610:	7afb      	ldrb	r3, [r7, #11]
 8012612:	4618      	mov	r0, r3
 8012614:	f000 ff85 	bl	8013522 <isControlChar>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d005      	beq.n	801262a <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 801261e:	7afb      	ldrb	r3, [r7, #11]
 8012620:	4619      	mov	r1, r3
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f000 fa54 	bl	8012ad0 <onControlInput>
 8012628:	e00b      	b.n	8012642 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 801262a:	7afb      	ldrb	r3, [r7, #11]
 801262c:	4618      	mov	r0, r3
 801262e:	f000 ff98 	bl	8013562 <isDisplayableChar>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d004      	beq.n	8012642 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8012638:	7afb      	ldrb	r3, [r7, #11]
 801263a:	4619      	mov	r1, r3
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fa17 	bl	8012a70 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 fe35 	bl	80132b2 <printLiveAutocompletion>

        impl->lastChar = c;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	7afa      	ldrb	r2, [r7, #11]
 801264c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	3310      	adds	r3, #16
 8012654:	4618      	mov	r0, r3
 8012656:	f000 ff9b 	bl	8013590 <fifoBufAvailable>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1b1      	bne.n	80125c4 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012666:	f003 0301 	and.w	r3, r3, #1
 801266a:	2b00      	cmp	r3, #0
 801266c:	d014      	beq.n	8012698 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2200      	movs	r2, #0
 8012672:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	69db      	ldr	r3, [r3, #28]
 8012678:	68fa      	ldr	r2, [r7, #12]
 801267a:	8c12      	ldrh	r2, [r2, #32]
 801267c:	4413      	add	r3, r2
 801267e:	2200      	movs	r2, #0
 8012680:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012688:	f023 0301 	bic.w	r3, r3, #1
 801268c:	b2da      	uxtb	r2, r3
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012694:	e000      	b.n	8012698 <embeddedCliProcess+0x11a>
        return;
 8012696:	bf00      	nop
    }
}
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 801269e:	b084      	sub	sp, #16
 80126a0:	b4b0      	push	{r4, r5, r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80126ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80126be:	429a      	cmp	r2, r3
 80126c0:	d101      	bne.n	80126c6 <embeddedCliAddBinding+0x28>
        return false;
 80126c2:	2300      	movs	r3, #0
 80126c4:	e017      	b.n	80126f6 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80126ce:	4619      	mov	r1, r3
 80126d0:	460b      	mov	r3, r1
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	440b      	add	r3, r1
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	461d      	mov	r5, r3
 80126dc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80126e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80126e4:	6823      	ldr	r3, [r4, #0]
 80126e6:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80126ec:	3301      	adds	r3, #1
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 80126f4:	2301      	movs	r3, #1
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3714      	adds	r7, #20
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bcb0      	pop	{r4, r5, r7}
 80126fe:	b004      	add	sp, #16
 8012700:	4770      	bx	lr
	...

08012704 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d031      	beq.n	801277a <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012722:	f003 0310 	and.w	r3, r3, #16
 8012726:	2b00      	cmp	r3, #0
 8012728:	d102      	bne.n	8012730 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 fea6 	bl	801347c <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8012730:	6839      	ldr	r1, [r7, #0]
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 fed4 	bl	80134e0 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8012738:	4b12      	ldr	r3, [pc, #72]	@ (8012784 <embeddedCliPrint+0x80>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	4619      	mov	r1, r3
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fece 	bl	80134e0 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801274a:	f003 0310 	and.w	r3, r3, #16
 801274e:	2b00      	cmp	r3, #0
 8012750:	d114      	bne.n	801277c <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4619      	mov	r1, r3
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 fec1 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	69db      	ldr	r3, [r3, #28]
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 febb 	bl	80134e0 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	8c1a      	ldrh	r2, [r3, #32]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fd9d 	bl	80132b2 <printLiveAutocompletion>
 8012778:	e000      	b.n	801277c <embeddedCliPrint+0x78>
        return;
 801277a:	bf00      	nop
    }
}
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	20000024 	.word	0x20000024

08012788 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8012788:	b580      	push	{r7, lr}
 801278a:	b088      	sub	sp, #32
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d066      	beq.n	8012864 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8012796:	4b35      	ldr	r3, [pc, #212]	@ (801286c <embeddedCliTokenizeArgs+0xe4>)
 8012798:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 801279a:	2300      	movs	r3, #0
 801279c:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 801279e:	2300      	movs	r3, #0
 80127a0:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80127a2:	2300      	movs	r3, #0
 80127a4:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80127a6:	2300      	movs	r3, #0
 80127a8:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80127aa:	e047      	b.n	801283c <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	3301      	adds	r3, #1
 80127b0:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80127b2:	7fbb      	ldrb	r3, [r7, #30]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d002      	beq.n	80127be <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80127b8:	2300      	movs	r3, #0
 80127ba:	77bb      	strb	r3, [r7, #30]
 80127bc:	e029      	b.n	8012812 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 80127be:	7cfb      	ldrb	r3, [r7, #19]
 80127c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80127c2:	d102      	bne.n	80127ca <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 80127c4:	2301      	movs	r3, #1
 80127c6:	77bb      	strb	r3, [r7, #30]
            continue;
 80127c8:	e038      	b.n	801283c <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 80127ca:	7cfb      	ldrb	r3, [r7, #19]
 80127cc:	2b22      	cmp	r3, #34	@ 0x22
 80127ce:	d110      	bne.n	80127f2 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80127d0:	7ffb      	ldrb	r3, [r7, #31]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	bf14      	ite	ne
 80127d6:	2301      	movne	r3, #1
 80127d8:	2300      	moveq	r3, #0
 80127da:	b2db      	uxtb	r3, r3
 80127dc:	f083 0301 	eor.w	r3, r3, #1
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	77fb      	strb	r3, [r7, #31]
 80127e4:	7ffb      	ldrb	r3, [r7, #31]
 80127e6:	f003 0301 	and.w	r3, r3, #1
 80127ea:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 80127ec:	2300      	movs	r3, #0
 80127ee:	74fb      	strb	r3, [r7, #19]
 80127f0:	e00f      	b.n	8012812 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 80127f2:	7ffb      	ldrb	r3, [r7, #31]
 80127f4:	f083 0301 	eor.w	r3, r3, #1
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d009      	beq.n	8012812 <embeddedCliTokenizeArgs+0x8a>
 80127fe:	7cfb      	ldrb	r3, [r7, #19]
 8012800:	4619      	mov	r1, r3
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f00c fa6e 	bl	801ece4 <strchr>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d001      	beq.n	8012812 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 801280e:	2300      	movs	r3, #0
 8012810:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8012812:	7cfb      	ldrb	r3, [r7, #19]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d109      	bne.n	801282c <embeddedCliTokenizeArgs+0xa4>
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	2b00      	cmp	r3, #0
 801281c:	dd0e      	ble.n	801283c <embeddedCliTokenizeArgs+0xb4>
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	3b01      	subs	r3, #1
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	4413      	add	r3, r2
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 801282c:	69bb      	ldr	r3, [r7, #24]
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	4413      	add	r3, r2
 8012832:	7cfa      	ldrb	r2, [r7, #19]
 8012834:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	3301      	adds	r3, #1
 801283a:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	4413      	add	r3, r2
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	74fb      	strb	r3, [r7, #19]
 8012846:	7cfb      	ldrb	r3, [r7, #19]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d1af      	bne.n	80127ac <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	4413      	add	r3, r2
 8012852:	2200      	movs	r2, #0
 8012854:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	3301      	adds	r3, #1
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	4413      	add	r3, r2
 801285e:	2200      	movs	r2, #0
 8012860:	701a      	strb	r2, [r3, #0]
 8012862:	e000      	b.n	8012866 <embeddedCliTokenizeArgs+0xde>
        return;
 8012864:	bf00      	nop
}
 8012866:	3720      	adds	r7, #32
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	080244ec 	.word	0x080244ec

08012870 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	460b      	mov	r3, r1
 801287a:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 801287c:	887b      	ldrh	r3, [r7, #2]
 801287e:	4619      	mov	r1, r3
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 ffd5 	bl	8013830 <getTokenPosition>
 8012886:	4603      	mov	r3, r0
 8012888:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801288a:	89fb      	ldrh	r3, [r7, #14]
 801288c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012890:	4293      	cmp	r3, r2
 8012892:	d003      	beq.n	801289c <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8012894:	89fb      	ldrh	r3, [r7, #14]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	4413      	add	r3, r2
 801289a:	e000      	b.n	801289e <embeddedCliGetToken+0x2e>
    else
        return NULL;
 801289c:	2300      	movs	r3, #0
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b084      	sub	sp, #16
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	460b      	mov	r3, r1
 80128b0:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80128b2:	887b      	ldrh	r3, [r7, #2]
 80128b4:	4619      	mov	r1, r3
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 ffba 	bl	8013830 <getTokenPosition>
 80128bc:	4603      	mov	r3, r0
 80128be:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80128c0:	89fb      	ldrh	r3, [r7, #14]
 80128c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d003      	beq.n	80128d2 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 80128ca:	89fb      	ldrh	r3, [r7, #14]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	4413      	add	r3, r2
 80128d0:	e000      	b.n	80128d4 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80128d2:	2300      	movs	r3, #0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3710      	adds	r7, #16
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80128dc:	b480      	push	{r7}
 80128de:	b085      	sub	sp, #20
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d003      	beq.n	80128f2 <embeddedCliGetTokenCount+0x16>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d101      	bne.n	80128f6 <embeddedCliGetTokenCount+0x1a>
        return 0;
 80128f2:	2300      	movs	r3, #0
 80128f4:	e019      	b.n	801292a <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 80128f6:	2300      	movs	r3, #0
 80128f8:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 80128fa:	2301      	movs	r3, #1
 80128fc:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	4413      	add	r3, r2
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d109      	bne.n	801291e <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	3301      	adds	r3, #1
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	4413      	add	r3, r2
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d006      	beq.n	8012926 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8012918:	897b      	ldrh	r3, [r7, #10]
 801291a:	3301      	adds	r3, #1
 801291c:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	3301      	adds	r3, #1
 8012922:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8012924:	e7eb      	b.n	80128fe <embeddedCliGetTokenCount+0x22>
                break;
 8012926:	bf00      	nop
    }

    return tokenCount;
 8012928:	897b      	ldrh	r3, [r7, #10]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3714      	adds	r7, #20
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr
	...

08012938 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8012938:	b580      	push	{r7, lr}
 801293a:	b086      	sub	sp, #24
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	460b      	mov	r3, r1
 8012942:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	899b      	ldrh	r3, [r3, #12]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d05c      	beq.n	8012a0c <navigateHistory+0xd4>
 8012952:	78fb      	ldrb	r3, [r7, #3]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d005      	beq.n	8012964 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	895a      	ldrh	r2, [r3, #10]
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	899b      	ldrh	r3, [r3, #12]
 8012960:	429a      	cmp	r2, r3
 8012962:	d053      	beq.n	8012a0c <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8012964:	78fb      	ldrb	r3, [r7, #3]
 8012966:	f083 0301 	eor.w	r3, r3, #1
 801296a:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 801296c:	2b00      	cmp	r3, #0
 801296e:	d003      	beq.n	8012978 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	895b      	ldrh	r3, [r3, #10]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d049      	beq.n	8012a0c <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 fd7f 	bl	801347c <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	4619      	mov	r1, r3
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f000 fdab 	bl	80134e0 <writeToOutput>

    if (navigateUp)
 801298a:	78fb      	ldrb	r3, [r7, #3]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d006      	beq.n	801299e <navigateHistory+0x66>
        ++impl->history.current;
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	895b      	ldrh	r3, [r3, #10]
 8012994:	3301      	adds	r3, #1
 8012996:	b29a      	uxth	r2, r3
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	815a      	strh	r2, [r3, #10]
 801299c:	e005      	b.n	80129aa <navigateHistory+0x72>
    else
        --impl->history.current;
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	895b      	ldrh	r3, [r3, #10]
 80129a2:	3b01      	subs	r3, #1
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	1d1a      	adds	r2, r3, #4
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	895b      	ldrh	r3, [r3, #10]
 80129b2:	4619      	mov	r1, r3
 80129b4:	4610      	mov	r0, r2
 80129b6:	f000 fec2 	bl	801373e <historyGet>
 80129ba:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d101      	bne.n	80129c6 <navigateHistory+0x8e>
        item = "";
 80129c2:	4b14      	ldr	r3, [pc, #80]	@ (8012a14 <navigateHistory+0xdc>)
 80129c4:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 80129c6:	6978      	ldr	r0, [r7, #20]
 80129c8:	f7ed fc6a 	bl	80002a0 <strlen>
 80129cc:	4603      	mov	r3, r0
 80129ce:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	69db      	ldr	r3, [r3, #28]
 80129d4:	89fa      	ldrh	r2, [r7, #14]
 80129d6:	6979      	ldr	r1, [r7, #20]
 80129d8:	4618      	mov	r0, r3
 80129da:	f00c fa92 	bl	801ef02 <memcpy>
    impl->cmdBuffer[len] = '\0';
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	69da      	ldr	r2, [r3, #28]
 80129e2:	89fb      	ldrh	r3, [r7, #14]
 80129e4:	4413      	add	r3, r2
 80129e6:	2200      	movs	r2, #0
 80129e8:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	89fa      	ldrh	r2, [r7, #14]
 80129ee:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	69db      	ldr	r3, [r3, #28]
 80129f4:	4619      	mov	r1, r3
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 fd72 	bl	80134e0 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	8c1a      	ldrh	r2, [r3, #32]
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 fc54 	bl	80132b2 <printLiveAutocompletion>
 8012a0a:	e000      	b.n	8012a0e <navigateHistory+0xd6>
        return;
 8012a0c:	bf00      	nop
}
 8012a0e:	3718      	adds	r7, #24
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	080244f0 	.word	0x080244f0

08012a18 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b084      	sub	sp, #16
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	460b      	mov	r3, r1
 8012a22:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8012a2a:	78fb      	ldrb	r3, [r7, #3]
 8012a2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8012a2e:	d91b      	bls.n	8012a68 <onEscapedInput+0x50>
 8012a30:	78fb      	ldrb	r3, [r7, #3]
 8012a32:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a34:	d818      	bhi.n	8012a68 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012a3c:	f023 0308 	bic.w	r3, r3, #8
 8012a40:	b2da      	uxtb	r2, r3
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8012a48:	78fb      	ldrb	r3, [r7, #3]
 8012a4a:	2b41      	cmp	r3, #65	@ 0x41
 8012a4c:	d002      	beq.n	8012a54 <onEscapedInput+0x3c>
 8012a4e:	78fb      	ldrb	r3, [r7, #3]
 8012a50:	2b42      	cmp	r3, #66	@ 0x42
 8012a52:	d109      	bne.n	8012a68 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8012a54:	78fb      	ldrb	r3, [r7, #3]
 8012a56:	2b41      	cmp	r3, #65	@ 0x41
 8012a58:	bf0c      	ite	eq
 8012a5a:	2301      	moveq	r3, #1
 8012a5c:	2300      	movne	r3, #0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	4619      	mov	r1, r3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7ff ff68 	bl	8012938 <navigateHistory>
        }
    }
}
 8012a68:	bf00      	nop
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	460b      	mov	r3, r1
 8012a7a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	8c1b      	ldrh	r3, [r3, #32]
 8012a86:	3302      	adds	r3, #2
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	da1a      	bge.n	8012ac6 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	69db      	ldr	r3, [r3, #28]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	8c12      	ldrh	r2, [r2, #32]
 8012a98:	4413      	add	r3, r2
 8012a9a:	78fa      	ldrb	r2, [r7, #3]
 8012a9c:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	8c1b      	ldrh	r3, [r3, #32]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	69db      	ldr	r3, [r3, #28]
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	8c12      	ldrh	r2, [r2, #32]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	78fa      	ldrb	r2, [r7, #3]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	4798      	blx	r3
 8012ac4:	e000      	b.n	8012ac8 <onCharInput+0x58>
        return;
 8012ac6:	bf00      	nop
}
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
	...

08012ad0 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	460b      	mov	r3, r1
 8012ada:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012ae8:	2b0d      	cmp	r3, #13
 8012aea:	d102      	bne.n	8012af2 <onControlInput+0x22>
 8012aec:	78fb      	ldrb	r3, [r7, #3]
 8012aee:	2b0a      	cmp	r3, #10
 8012af0:	d062      	beq.n	8012bb8 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012af8:	2b0a      	cmp	r3, #10
 8012afa:	d102      	bne.n	8012b02 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8012afc:	78fb      	ldrb	r3, [r7, #3]
 8012afe:	2b0d      	cmp	r3, #13
 8012b00:	d05a      	beq.n	8012bb8 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8012b02:	78fb      	ldrb	r3, [r7, #3]
 8012b04:	2b0d      	cmp	r3, #13
 8012b06:	d002      	beq.n	8012b0e <onControlInput+0x3e>
 8012b08:	78fb      	ldrb	r3, [r7, #3]
 8012b0a:	2b0a      	cmp	r3, #10
 8012b0c:	d126      	bne.n	8012b5c <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fc2a 	bl	8013368 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8012b14:	4b2a      	ldr	r3, [pc, #168]	@ (8012bc0 <onControlInput+0xf0>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 fce0 	bl	80134e0 <writeToOutput>

        if (impl->cmdSize > 0)
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	8c1b      	ldrh	r3, [r3, #32]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d002      	beq.n	8012b2e <onControlInput+0x5e>
            parseCommand(cli);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f000 f84b 	bl	8012bc4 <parseCommand>
        impl->cmdSize = 0;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	69db      	ldr	r3, [r3, #28]
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	8c12      	ldrh	r2, [r2, #32]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	2200      	movs	r2, #0
 8012b40:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2200      	movs	r2, #0
 8012b46:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	4619      	mov	r1, r3
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 fcc3 	bl	80134e0 <writeToOutput>
 8012b5a:	e02e      	b.n	8012bba <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8012b5c:	78fb      	ldrb	r3, [r7, #3]
 8012b5e:	2b08      	cmp	r3, #8
 8012b60:	d002      	beq.n	8012b68 <onControlInput+0x98>
 8012b62:	78fb      	ldrb	r3, [r7, #3]
 8012b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b66:	d120      	bne.n	8012baa <onControlInput+0xda>
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	8c1b      	ldrh	r3, [r3, #32]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d01c      	beq.n	8012baa <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2108      	movs	r1, #8
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2120      	movs	r1, #32
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2108      	movs	r1, #8
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	8c1b      	ldrh	r3, [r3, #32]
 8012b92:	3b01      	subs	r3, #1
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	69db      	ldr	r3, [r3, #28]
 8012b9e:	68fa      	ldr	r2, [r7, #12]
 8012ba0:	8c12      	ldrh	r2, [r2, #32]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	701a      	strb	r2, [r3, #0]
 8012ba8:	e007      	b.n	8012bba <onControlInput+0xea>
    } else if (c == '\t') {
 8012baa:	78fb      	ldrb	r3, [r7, #3]
 8012bac:	2b09      	cmp	r3, #9
 8012bae:	d104      	bne.n	8012bba <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f000 fbd9 	bl	8013368 <onAutocompleteRequest>
 8012bb6:	e000      	b.n	8012bba <onControlInput+0xea>
        return;
 8012bb8:	bf00      	nop
    }

}
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	20000024 	.word	0x20000024

08012bc4 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8012bc4:	b590      	push	{r4, r7, lr}
 8012bc6:	b08f      	sub	sp, #60	@ 0x3c
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8012bd8:	2300      	movs	r3, #0
 8012bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bdc:	e00d      	b.n	8012bfa <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8012bde:	69bb      	ldr	r3, [r7, #24]
 8012be0:	69da      	ldr	r2, [r3, #28]
 8012be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be4:	4413      	add	r3, r2
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b20      	cmp	r3, #32
 8012bea:	d003      	beq.n	8012bf4 <parseCommand+0x30>
            isEmpty = false;
 8012bec:	2300      	movs	r3, #0
 8012bee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8012bf2:	e008      	b.n	8012c06 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	8c1b      	ldrh	r3, [r3, #32]
 8012bfe:	461a      	mov	r2, r3
 8012c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c02:	4293      	cmp	r3, r2
 8012c04:	dbeb      	blt.n	8012bde <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8012c06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f040 80dc 	bne.w	8012dc8 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	69db      	ldr	r3, [r3, #28]
 8012c18:	4619      	mov	r1, r3
 8012c1a:	4610      	mov	r0, r2
 8012c1c:	f000 fd2b 	bl	8013676 <historyPut>

    char *cmdName = NULL;
 8012c20:	2300      	movs	r3, #0
 8012c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8012c24:	2300      	movs	r3, #0
 8012c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c2e:	2300      	movs	r3, #0
 8012c30:	623b      	str	r3, [r7, #32]
 8012c32:	e030      	b.n	8012c96 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	69da      	ldr	r2, [r3, #28]
 8012c38:	6a3b      	ldr	r3, [r7, #32]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
 8012c42:	2b20      	cmp	r3, #32
 8012c44:	d10f      	bne.n	8012c66 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8012c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d105      	bne.n	8012c58 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	69da      	ldr	r2, [r3, #28]
 8012c50:	6a3b      	ldr	r3, [r7, #32]
 8012c52:	4413      	add	r3, r2
 8012c54:	2200      	movs	r2, #0
 8012c56:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8012c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d018      	beq.n	8012c90 <parseCommand+0xcc>
                nameFinished = true;
 8012c5e:	2301      	movs	r3, #1
 8012c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c64:	e014      	b.n	8012c90 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8012c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d105      	bne.n	8012c78 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8012c6c:	69bb      	ldr	r3, [r7, #24]
 8012c6e:	69da      	ldr	r2, [r3, #28]
 8012c70:	6a3b      	ldr	r3, [r7, #32]
 8012c72:	4413      	add	r3, r2
 8012c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c76:	e00b      	b.n	8012c90 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8012c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d108      	bne.n	8012c90 <parseCommand+0xcc>
 8012c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	69da      	ldr	r2, [r3, #28]
 8012c8a:	6a3b      	ldr	r3, [r7, #32]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c90:	6a3b      	ldr	r3, [r7, #32]
 8012c92:	3301      	adds	r3, #1
 8012c94:	623b      	str	r3, [r7, #32]
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	8c1b      	ldrh	r3, [r3, #32]
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	6a3b      	ldr	r3, [r7, #32]
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	dbc8      	blt.n	8012c34 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	69da      	ldr	r2, [r3, #28]
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	8c1b      	ldrh	r3, [r3, #32]
 8012caa:	3301      	adds	r3, #1
 8012cac:	4413      	add	r3, r2
 8012cae:	2200      	movs	r2, #0
 8012cb0:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8012cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f000 8089 	beq.w	8012dcc <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012cba:	2300      	movs	r3, #0
 8012cbc:	61fb      	str	r3, [r7, #28]
 8012cbe:	e054      	b.n	8012d6a <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cc4:	69fa      	ldr	r2, [r7, #28]
 8012cc6:	4613      	mov	r3, r2
 8012cc8:	009b      	lsls	r3, r3, #2
 8012cca:	4413      	add	r3, r2
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	440b      	add	r3, r1
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cd6:	f7ed fa83 	bl	80001e0 <strcmp>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d141      	bne.n	8012d64 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012ce4:	69fa      	ldr	r2, [r7, #28]
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	4413      	add	r3, r2
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	440b      	add	r3, r1
 8012cf0:	691b      	ldr	r3, [r3, #16]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d040      	beq.n	8012d78 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cfa:	69fa      	ldr	r2, [r7, #28]
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	4413      	add	r3, r2
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	440b      	add	r3, r1
 8012d06:	7a1b      	ldrb	r3, [r3, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8012d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d0e:	f7ff fd3b 	bl	8012788 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d18:	f043 0310 	orr.w	r3, r3, #16
 8012d1c:	b2da      	uxtb	r2, r3
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d28:	69fa      	ldr	r2, [r7, #28]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	4413      	add	r3, r2
 8012d30:	009b      	lsls	r3, r3, #2
 8012d32:	440b      	add	r3, r1
 8012d34:	691c      	ldr	r4, [r3, #16]
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d3a:	69fa      	ldr	r2, [r7, #28]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	4413      	add	r3, r2
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	440b      	add	r3, r1
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d56:	f023 0310 	bic.w	r3, r3, #16
 8012d5a:	b2da      	uxtb	r2, r3
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8012d62:	e034      	b.n	8012dce <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	3301      	adds	r3, #1
 8012d68:	61fb      	str	r3, [r7, #28]
 8012d6a:	69bb      	ldr	r3, [r7, #24]
 8012d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d6e:	461a      	mov	r2, r3
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	4293      	cmp	r3, r2
 8012d74:	dba4      	blt.n	8012cc0 <parseCommand+0xfc>
 8012d76:	e000      	b.n	8012d7a <parseCommand+0x1b6>
                break;
 8012d78:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d01d      	beq.n	8012dbe <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8012d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d84:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8012d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d88:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d90:	f043 0310 	orr.w	r3, r3, #16
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	69bb      	ldr	r3, [r7, #24]
 8012d98:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	f107 020c 	add.w	r2, r7, #12
 8012da4:	4611      	mov	r1, r2
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012db0:	f023 0310 	bic.w	r3, r3, #16
 8012db4:	b2da      	uxtb	r2, r3
 8012db6:	69bb      	ldr	r3, [r7, #24]
 8012db8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012dbc:	e007      	b.n	8012dce <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8012dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 f997 	bl	80130f4 <onUnknownCommand>
 8012dc6:	e002      	b.n	8012dce <parseCommand+0x20a>
        return;
 8012dc8:	bf00      	nop
 8012dca:	e000      	b.n	8012dce <parseCommand+0x20a>
        return;
 8012dcc:	bf00      	nop
    }
}
 8012dce:	373c      	adds	r7, #60	@ 0x3c
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd90      	pop	{r4, r7, pc}

08012dd4 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8012dd4:	b5b0      	push	{r4, r5, r7, lr}
 8012dd6:	b08a      	sub	sp, #40	@ 0x28
 8012dd8:	af02      	add	r7, sp, #8
 8012dda:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8012ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8012e10 <initInternalBindings+0x3c>)
 8012dde:	f107 040c 	add.w	r4, r7, #12
 8012de2:	461d      	mov	r5, r3
 8012de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012de8:	682b      	ldr	r3, [r5, #0]
 8012dea:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8012dec:	466a      	mov	r2, sp
 8012dee:	f107 0318 	add.w	r3, r7, #24
 8012df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012df6:	e882 0003 	stmia.w	r2, {r0, r1}
 8012dfa:	f107 030c 	add.w	r3, r7, #12
 8012dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f7ff fc4c 	bl	801269e <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8012e06:	bf00      	nop
 8012e08:	3720      	adds	r7, #32
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	08024514 	.word	0x08024514

08012e14 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b08c      	sub	sp, #48	@ 0x30
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d10a      	bne.n	8012e44 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8012e2e:	49a5      	ldr	r1, [pc, #660]	@ (80130c4 <onHelp+0x2b0>)
 8012e30:	68f8      	ldr	r0, [r7, #12]
 8012e32:	f000 fb55 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e36:	4ba4      	ldr	r3, [pc, #656]	@ (80130c8 <onHelp+0x2b4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	f000 fb4f 	bl	80134e0 <writeToOutput>
        return;
 8012e42:	e13b      	b.n	80130bc <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8012e44:	4ba1      	ldr	r3, [pc, #644]	@ (80130cc <onHelp+0x2b8>)
 8012e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d03d      	beq.n	8012eca <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8012e4e:	4b9f      	ldr	r3, [pc, #636]	@ (80130cc <onHelp+0x2b8>)
 8012e50:	2200      	movs	r2, #0
 8012e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8012e56:	4b9c      	ldr	r3, [pc, #624]	@ (80130c8 <onHelp+0x2b4>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	68f8      	ldr	r0, [r7, #12]
 8012e5e:	f000 fb3f 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e62:	4b99      	ldr	r3, [pc, #612]	@ (80130c8 <onHelp+0x2b4>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4619      	mov	r1, r3
 8012e68:	68f8      	ldr	r0, [r7, #12]
 8012e6a:	f000 fb39 	bl	80134e0 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8012e6e:	4998      	ldr	r1, [pc, #608]	@ (80130d0 <onHelp+0x2bc>)
 8012e70:	68f8      	ldr	r0, [r7, #12]
 8012e72:	f000 fb35 	bl	80134e0 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012e76:	4b94      	ldr	r3, [pc, #592]	@ (80130c8 <onHelp+0x2b4>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 fb2f 	bl	80134e0 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8012e82:	4994      	ldr	r1, [pc, #592]	@ (80130d4 <onHelp+0x2c0>)
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f000 fb2b 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80130c8 <onHelp+0x2b4>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4619      	mov	r1, r3
 8012e90:	68f8      	ldr	r0, [r7, #12]
 8012e92:	f000 fb25 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8012e96:	4990      	ldr	r1, [pc, #576]	@ (80130d8 <onHelp+0x2c4>)
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f000 fb21 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80130c8 <onHelp+0x2b4>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f000 fb1b 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8012eaa:	498c      	ldr	r1, [pc, #560]	@ (80130dc <onHelp+0x2c8>)
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f000 fb17 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012eb2:	4b85      	ldr	r3, [pc, #532]	@ (80130c8 <onHelp+0x2b4>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f000 fb11 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ebe:	4b82      	ldr	r3, [pc, #520]	@ (80130c8 <onHelp+0x2b4>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f000 fb0b 	bl	80134e0 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8012eca:	68b8      	ldr	r0, [r7, #8]
 8012ecc:	f7ff fd06 	bl	80128dc <embeddedCliGetTokenCount>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8012ed4:	8b7b      	ldrh	r3, [r7, #26]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d176      	bne.n	8012fc8 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012eda:	2300      	movs	r3, #0
 8012edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ede:	e03c      	b.n	8012f5a <onHelp+0x146>
            writeToOutput(cli, " * ");
 8012ee0:	497f      	ldr	r1, [pc, #508]	@ (80130e0 <onHelp+0x2cc>)
 8012ee2:	68f8      	ldr	r0, [r7, #12]
 8012ee4:	f000 fafc 	bl	80134e0 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8012ee8:	69fb      	ldr	r3, [r7, #28]
 8012eea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012eee:	4613      	mov	r3, r2
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	4413      	add	r3, r2
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	440b      	add	r3, r1
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4619      	mov	r1, r3
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f000 faef 	bl	80134e0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012f02:	4b71      	ldr	r3, [pc, #452]	@ (80130c8 <onHelp+0x2b4>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4619      	mov	r1, r3
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 fae9 	bl	80134e0 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f14:	4613      	mov	r3, r2
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	4413      	add	r3, r2
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	440b      	add	r3, r1
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d017      	beq.n	8012f54 <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2109      	movs	r1, #9
 8012f2a:	68f8      	ldr	r0, [r7, #12]
 8012f2c:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f34:	4613      	mov	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	4413      	add	r3, r2
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	440b      	add	r3, r1
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	4619      	mov	r1, r3
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f000 facc 	bl	80134e0 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8012f48:	4b5f      	ldr	r3, [pc, #380]	@ (80130c8 <onHelp+0x2b4>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	68f8      	ldr	r0, [r7, #12]
 8012f50:	f000 fac6 	bl	80134e0 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f56:	3301      	adds	r3, #1
 8012f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012f5e:	461a      	mov	r2, r3
 8012f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f62:	4293      	cmp	r3, r2
 8012f64:	dbbc      	blt.n	8012ee0 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8012f66:	4b58      	ldr	r3, [pc, #352]	@ (80130c8 <onHelp+0x2b4>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f000 fab7 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f72:	4b55      	ldr	r3, [pc, #340]	@ (80130c8 <onHelp+0x2b4>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4619      	mov	r1, r3
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 fab1 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f7e:	4b52      	ldr	r3, [pc, #328]	@ (80130c8 <onHelp+0x2b4>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4619      	mov	r1, r3
 8012f84:	68f8      	ldr	r0, [r7, #12]
 8012f86:	f000 faab 	bl	80134e0 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8012f8a:	4956      	ldr	r1, [pc, #344]	@ (80130e4 <onHelp+0x2d0>)
 8012f8c:	68f8      	ldr	r0, [r7, #12]
 8012f8e:	f000 faa7 	bl	80134e0 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012f92:	4b4d      	ldr	r3, [pc, #308]	@ (80130c8 <onHelp+0x2b4>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4619      	mov	r1, r3
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f000 faa1 	bl	80134e0 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8012f9e:	4952      	ldr	r1, [pc, #328]	@ (80130e8 <onHelp+0x2d4>)
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f000 fa9d 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fa6:	4b48      	ldr	r3, [pc, #288]	@ (80130c8 <onHelp+0x2b4>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4619      	mov	r1, r3
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f000 fa97 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8012fb2:	494e      	ldr	r1, [pc, #312]	@ (80130ec <onHelp+0x2d8>)
 8012fb4:	68f8      	ldr	r0, [r7, #12]
 8012fb6:	f000 fa93 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fba:	4b43      	ldr	r3, [pc, #268]	@ (80130c8 <onHelp+0x2b4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f000 fa8d 	bl	80134e0 <writeToOutput>
 8012fc6:	e079      	b.n	80130bc <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8012fc8:	8b7b      	ldrh	r3, [r7, #26]
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d16c      	bne.n	80130a8 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8012fd2:	2101      	movs	r1, #1
 8012fd4:	68b8      	ldr	r0, [r7, #8]
 8012fd6:	f7ff fc4b 	bl	8012870 <embeddedCliGetToken>
 8012fda:	6178      	str	r0, [r7, #20]
        bool found = false;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	623b      	str	r3, [r7, #32]
 8012fe6:	e020      	b.n	801302a <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012fec:	6a3a      	ldr	r2, [r7, #32]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	009b      	lsls	r3, r3, #2
 8012ff2:	4413      	add	r3, r2
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	440b      	add	r3, r1
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	6979      	ldr	r1, [r7, #20]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ed f8ef 	bl	80001e0 <strcmp>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10d      	bne.n	8013024 <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801300c:	6a3a      	ldr	r2, [r7, #32]
 801300e:	4613      	mov	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	4413      	add	r3, r2
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	440b      	add	r3, r1
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 801301c:	2301      	movs	r3, #1
 801301e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8013022:	e008      	b.n	8013036 <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8013024:	6a3b      	ldr	r3, [r7, #32]
 8013026:	3301      	adds	r3, #1
 8013028:	623b      	str	r3, [r7, #32]
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801302e:	461a      	mov	r2, r3
 8013030:	6a3b      	ldr	r3, [r7, #32]
 8013032:	4293      	cmp	r3, r2
 8013034:	dbd8      	blt.n	8012fe8 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 8013036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801303a:	2b00      	cmp	r3, #0
 801303c:	d020      	beq.n	8013080 <onHelp+0x26c>
 801303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013040:	2b00      	cmp	r3, #0
 8013042:	d01d      	beq.n	8013080 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 8013044:	4926      	ldr	r1, [pc, #152]	@ (80130e0 <onHelp+0x2cc>)
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f000 fa4a 	bl	80134e0 <writeToOutput>
            writeToOutput(cli, cmdName);
 801304c:	6979      	ldr	r1, [r7, #20]
 801304e:	68f8      	ldr	r0, [r7, #12]
 8013050:	f000 fa46 	bl	80134e0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013054:	4b1c      	ldr	r3, [pc, #112]	@ (80130c8 <onHelp+0x2b4>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4619      	mov	r1, r3
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	f000 fa40 	bl	80134e0 <writeToOutput>
            cli->writeChar(cli, '\t');
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2109      	movs	r1, #9
 8013066:	68f8      	ldr	r0, [r7, #12]
 8013068:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 801306a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f000 fa37 	bl	80134e0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013072:	4b15      	ldr	r3, [pc, #84]	@ (80130c8 <onHelp+0x2b4>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4619      	mov	r1, r3
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 fa31 	bl	80134e0 <writeToOutput>
 801307e:	e01d      	b.n	80130bc <onHelp+0x2a8>
        } else if (found) {
 8013080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013084:	2b00      	cmp	r3, #0
 8013086:	d00a      	beq.n	801309e <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 8013088:	490e      	ldr	r1, [pc, #56]	@ (80130c4 <onHelp+0x2b0>)
 801308a:	68f8      	ldr	r0, [r7, #12]
 801308c:	f000 fa28 	bl	80134e0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013090:	4b0d      	ldr	r3, [pc, #52]	@ (80130c8 <onHelp+0x2b4>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4619      	mov	r1, r3
 8013096:	68f8      	ldr	r0, [r7, #12]
 8013098:	f000 fa22 	bl	80134e0 <writeToOutput>
 801309c:	e00e      	b.n	80130bc <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 801309e:	6979      	ldr	r1, [r7, #20]
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f000 f827 	bl	80130f4 <onUnknownCommand>
 80130a6:	e009      	b.n	80130bc <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80130a8:	4911      	ldr	r1, [pc, #68]	@ (80130f0 <onHelp+0x2dc>)
 80130aa:	68f8      	ldr	r0, [r7, #12]
 80130ac:	f000 fa18 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80130b0:	4b05      	ldr	r3, [pc, #20]	@ (80130c8 <onHelp+0x2b4>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4619      	mov	r1, r3
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f000 fa12 	bl	80134e0 <writeToOutput>
    }
}
 80130bc:	3730      	adds	r7, #48	@ 0x30
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	08024528 	.word	0x08024528
 80130c8:	20000024 	.word	0x20000024
 80130cc:	20001530 	.word	0x20001530
 80130d0:	08024540 	.word	0x08024540
 80130d4:	08024568 	.word	0x08024568
 80130d8:	08024590 	.word	0x08024590
 80130dc:	080245a4 	.word	0x080245a4
 80130e0:	080245c0 	.word	0x080245c0
 80130e4:	080245c4 	.word	0x080245c4
 80130e8:	080245e4 	.word	0x080245e4
 80130ec:	08024608 	.word	0x08024608
 80130f0:	0802461c 	.word	0x0802461c

080130f4 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 80130fe:	490b      	ldr	r1, [pc, #44]	@ (801312c <onUnknownCommand+0x38>)
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f000 f9ed 	bl	80134e0 <writeToOutput>
    writeToOutput(cli, name);
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 f9e9 	bl	80134e0 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 801310e:	4908      	ldr	r1, [pc, #32]	@ (8013130 <onUnknownCommand+0x3c>)
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 f9e5 	bl	80134e0 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8013116:	4b07      	ldr	r3, [pc, #28]	@ (8013134 <onUnknownCommand+0x40>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4619      	mov	r1, r3
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 f9df 	bl	80134e0 <writeToOutput>
}
 8013122:	bf00      	nop
 8013124:	3708      	adds	r7, #8
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	0802464c 	.word	0x0802464c
 8013130:	08024660 	.word	0x08024660
 8013134:	20000024 	.word	0x20000024

08013138 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8013138:	b580      	push	{r7, lr}
 801313a:	b08e      	sub	sp, #56	@ 0x38
 801313c:	af00      	add	r7, sp, #0
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8013144:	2300      	movs	r3, #0
 8013146:	613b      	str	r3, [r7, #16]
 8013148:	2300      	movs	r3, #0
 801314a:	82bb      	strh	r3, [r7, #20]
 801314c:	2300      	movs	r3, #0
 801314e:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f7ed f8a5 	bl	80002a0 <strlen>
 8013156:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	68db      	ldr	r3, [r3, #12]
 801315c:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 801315e:	6a3b      	ldr	r3, [r7, #32]
 8013160:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <getAutocompletedCommand+0x34>
 8013166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013168:	2b00      	cmp	r3, #0
 801316a:	d108      	bne.n	801317e <getAutocompletedCommand+0x46>
        return cmd;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	461a      	mov	r2, r3
 8013170:	f107 0310 	add.w	r3, r7, #16
 8013174:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013178:	e882 0003 	stmia.w	r2, {r0, r1}
 801317c:	e095      	b.n	80132aa <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 801317e:	2300      	movs	r3, #0
 8013180:	637b      	str	r3, [r7, #52]	@ 0x34
 8013182:	e083      	b.n	801328c <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801318a:	4613      	mov	r3, r2
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	4413      	add	r3, r2
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	440b      	add	r3, r1
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8013198:	69f8      	ldr	r0, [r7, #28]
 801319a:	f7ed f881 	bl	80002a0 <strlen>
 801319e:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80131a0:	6a3b      	ldr	r3, [r7, #32]
 80131a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80131a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131a6:	4413      	add	r3, r2
 80131a8:	781a      	ldrb	r2, [r3, #0]
 80131aa:	6a3b      	ldr	r3, [r7, #32]
 80131ac:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80131ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131b0:	440b      	add	r3, r1
 80131b2:	f022 0201 	bic.w	r2, r2, #1
 80131b6:	b2d2      	uxtb	r2, r2
 80131b8:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80131ba:	69ba      	ldr	r2, [r7, #24]
 80131bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131be:	429a      	cmp	r2, r3
 80131c0:	d35e      	bcc.n	8013280 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80131c2:	2301      	movs	r3, #1
 80131c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80131c8:	2300      	movs	r3, #0
 80131ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131cc:	e010      	b.n	80131f0 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d2:	4413      	add	r3, r2
 80131d4:	781a      	ldrb	r2, [r3, #0]
 80131d6:	69f9      	ldr	r1, [r7, #28]
 80131d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131da:	440b      	add	r3, r1
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d003      	beq.n	80131ea <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80131e2:	2300      	movs	r3, #0
 80131e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80131e8:	e006      	b.n	80131f8 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80131ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ec:	3301      	adds	r3, #1
 80131ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80131f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d3ea      	bcc.n	80131ce <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 80131f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80131fc:	f083 0301 	eor.w	r3, r3, #1
 8013200:	b2db      	uxtb	r3, r3
 8013202:	2b00      	cmp	r3, #0
 8013204:	d13e      	bne.n	8013284 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8013206:	6a3b      	ldr	r3, [r7, #32]
 8013208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801320a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801320c:	4413      	add	r3, r2
 801320e:	781a      	ldrb	r2, [r3, #0]
 8013210:	6a3b      	ldr	r3, [r7, #32]
 8013212:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013216:	440b      	add	r3, r1
 8013218:	f042 0201 	orr.w	r2, r2, #1
 801321c:	b2d2      	uxtb	r2, r2
 801321e:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8013220:	8afb      	ldrh	r3, [r7, #22]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d004      	beq.n	8013230 <getAutocompletedCommand+0xf8>
 8013226:	8abb      	ldrh	r3, [r7, #20]
 8013228:	461a      	mov	r2, r3
 801322a:	69bb      	ldr	r3, [r7, #24]
 801322c:	4293      	cmp	r3, r2
 801322e:	d202      	bcs.n	8013236 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8013230:	69bb      	ldr	r3, [r7, #24]
 8013232:	b29b      	uxth	r3, r3
 8013234:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8013236:	8afb      	ldrh	r3, [r7, #22]
 8013238:	3301      	adds	r3, #1
 801323a:	b29b      	uxth	r3, r3
 801323c:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 801323e:	8afb      	ldrh	r3, [r7, #22]
 8013240:	2b01      	cmp	r3, #1
 8013242:	d102      	bne.n	801324a <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8013244:	69fb      	ldr	r3, [r7, #28]
 8013246:	613b      	str	r3, [r7, #16]
            continue;
 8013248:	e01d      	b.n	8013286 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 801324a:	6a3b      	ldr	r3, [r7, #32]
 801324c:	8c1b      	ldrh	r3, [r3, #32]
 801324e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013250:	e010      	b.n	8013274 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8013252:	693a      	ldr	r2, [r7, #16]
 8013254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013256:	4413      	add	r3, r2
 8013258:	781a      	ldrb	r2, [r3, #0]
 801325a:	69f9      	ldr	r1, [r7, #28]
 801325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325e:	440b      	add	r3, r1
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	429a      	cmp	r2, r3
 8013264:	d003      	beq.n	801326e <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8013266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013268:	b29b      	uxth	r3, r3
 801326a:	82bb      	strh	r3, [r7, #20]
                break;
 801326c:	e00b      	b.n	8013286 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 801326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013270:	3301      	adds	r3, #1
 8013272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013274:	8abb      	ldrh	r3, [r7, #20]
 8013276:	461a      	mov	r2, r3
 8013278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801327a:	4293      	cmp	r3, r2
 801327c:	d3e9      	bcc.n	8013252 <getAutocompletedCommand+0x11a>
 801327e:	e002      	b.n	8013286 <getAutocompletedCommand+0x14e>
            continue;
 8013280:	bf00      	nop
 8013282:	e000      	b.n	8013286 <getAutocompletedCommand+0x14e>
            continue;
 8013284:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013288:	3301      	adds	r3, #1
 801328a:	637b      	str	r3, [r7, #52]	@ 0x34
 801328c:	6a3b      	ldr	r3, [r7, #32]
 801328e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013290:	461a      	mov	r2, r3
 8013292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013294:	4293      	cmp	r3, r2
 8013296:	f6ff af75 	blt.w	8013184 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	461a      	mov	r2, r3
 801329e:	f107 0310 	add.w	r3, r7, #16
 80132a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80132a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	3738      	adds	r7, #56	@ 0x38
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b088      	sub	sp, #32
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80132c6:	f003 0320 	and.w	r3, r3, #32
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d048      	beq.n	8013360 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	69da      	ldr	r2, [r3, #28]
 80132d2:	f107 030c 	add.w	r3, r7, #12
 80132d6:	6879      	ldr	r1, [r7, #4]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7ff ff2d 	bl	8013138 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 80132de:	8a7b      	ldrh	r3, [r7, #18]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d102      	bne.n	80132ea <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	8c1b      	ldrh	r3, [r3, #32]
 80132e8:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	8c1b      	ldrh	r3, [r3, #32]
 80132ee:	61fb      	str	r3, [r7, #28]
 80132f0:	e00b      	b.n	801330a <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	68f9      	ldr	r1, [r7, #12]
 80132f8:	69fa      	ldr	r2, [r7, #28]
 80132fa:	440a      	add	r2, r1
 80132fc:	7812      	ldrb	r2, [r2, #0]
 80132fe:	4611      	mov	r1, r2
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	3301      	adds	r3, #1
 8013308:	61fb      	str	r3, [r7, #28]
 801330a:	8a3b      	ldrh	r3, [r7, #16]
 801330c:	461a      	mov	r2, r3
 801330e:	69fb      	ldr	r3, [r7, #28]
 8013310:	4293      	cmp	r3, r2
 8013312:	d3ee      	bcc.n	80132f2 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8013314:	8a3b      	ldrh	r3, [r7, #16]
 8013316:	61bb      	str	r3, [r7, #24]
 8013318:	e007      	b.n	801332a <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2120      	movs	r1, #32
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8013324:	69bb      	ldr	r3, [r7, #24]
 8013326:	3301      	adds	r3, #1
 8013328:	61bb      	str	r3, [r7, #24]
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801332e:	461a      	mov	r2, r3
 8013330:	69bb      	ldr	r3, [r7, #24]
 8013332:	4293      	cmp	r3, r2
 8013334:	d3f1      	bcc.n	801331a <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8013336:	8a3a      	ldrh	r2, [r7, #16]
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	210d      	movs	r1, #13
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4619      	mov	r1, r3
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f000 f8c7 	bl	80134e0 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	69db      	ldr	r3, [r3, #28]
 8013356:	4619      	mov	r1, r3
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f000 f8c1 	bl	80134e0 <writeToOutput>
 801335e:	e000      	b.n	8013362 <printLiveAutocompletion+0xb0>
        return;
 8013360:	bf00      	nop
}
 8013362:	3720      	adds	r7, #32
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8013368:	b580      	push	{r7, lr}
 801336a:	b088      	sub	sp, #32
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	68db      	ldr	r3, [r3, #12]
 8013374:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	69da      	ldr	r2, [r3, #28]
 801337a:	f107 030c 	add.w	r3, r7, #12
 801337e:	6879      	ldr	r1, [r7, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff fed9 	bl	8013138 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8013386:	8a7b      	ldrh	r3, [r7, #18]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d071      	beq.n	8013470 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 801338c:	8a7b      	ldrh	r3, [r7, #18]
 801338e:	2b01      	cmp	r3, #1
 8013390:	d004      	beq.n	801339c <onAutocompleteRequest+0x34>
 8013392:	8a3a      	ldrh	r2, [r7, #16]
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	8c1b      	ldrh	r3, [r3, #32]
 8013398:	429a      	cmp	r2, r3
 801339a:	d92a      	bls.n	80133f2 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	68f9      	ldr	r1, [r7, #12]
 80133a2:	8a3a      	ldrh	r2, [r7, #16]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f00b fdac 	bl	801ef02 <memcpy>
        if (cmd.candidateCount == 1) {
 80133aa:	8a7b      	ldrh	r3, [r7, #18]
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d109      	bne.n	80133c4 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	69db      	ldr	r3, [r3, #28]
 80133b4:	8a3a      	ldrh	r2, [r7, #16]
 80133b6:	4413      	add	r3, r2
 80133b8:	2220      	movs	r2, #32
 80133ba:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 80133bc:	8a3b      	ldrh	r3, [r7, #16]
 80133be:	3301      	adds	r3, #1
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	69db      	ldr	r3, [r3, #28]
 80133c8:	8a3a      	ldrh	r2, [r7, #16]
 80133ca:	4413      	add	r3, r2
 80133cc:	2200      	movs	r2, #0
 80133ce:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	69db      	ldr	r3, [r3, #28]
 80133d4:	69ba      	ldr	r2, [r7, #24]
 80133d6:	8c12      	ldrh	r2, [r2, #32]
 80133d8:	4413      	add	r3, r2
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f000 f87f 	bl	80134e0 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80133e2:	8a3a      	ldrh	r2, [r7, #16]
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	8c1a      	ldrh	r2, [r3, #32]
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 80133f0:	e03f      	b.n	8013472 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f000 f842 	bl	801347c <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80133f8:	2300      	movs	r3, #0
 80133fa:	61fb      	str	r3, [r7, #28]
 80133fc:	e021      	b.n	8013442 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013402:	69fb      	ldr	r3, [r7, #28]
 8013404:	4413      	add	r3, r2
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	f003 0301 	and.w	r3, r3, #1
 801340c:	2b00      	cmp	r3, #0
 801340e:	d014      	beq.n	801343a <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013414:	69fa      	ldr	r2, [r7, #28]
 8013416:	4613      	mov	r3, r2
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	4413      	add	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	440b      	add	r3, r1
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8013424:	6979      	ldr	r1, [r7, #20]
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 f85a 	bl	80134e0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 801342c:	4b12      	ldr	r3, [pc, #72]	@ (8013478 <onAutocompleteRequest+0x110>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4619      	mov	r1, r3
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f000 f854 	bl	80134e0 <writeToOutput>
 8013438:	e000      	b.n	801343c <onAutocompleteRequest+0xd4>
            continue;
 801343a:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	3301      	adds	r3, #1
 8013440:	61fb      	str	r3, [r7, #28]
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013446:	461a      	mov	r2, r3
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	4293      	cmp	r3, r2
 801344c:	dbd7      	blt.n	80133fe <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 801344e:	69bb      	ldr	r3, [r7, #24]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	4619      	mov	r1, r3
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 f843 	bl	80134e0 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	69db      	ldr	r3, [r3, #28]
 801345e:	4619      	mov	r1, r3
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f000 f83d 	bl	80134e0 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	8c1a      	ldrh	r2, [r3, #32]
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801346e:	e000      	b.n	8013472 <onAutocompleteRequest+0x10a>
        return;
 8013470:	bf00      	nop
}
 8013472:	3720      	adds	r7, #32
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	20000024 	.word	0x20000024

0801347c <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 801347c:	b590      	push	{r4, r7, lr}
 801347e:	b087      	sub	sp, #28
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801348e:	461c      	mov	r4, r3
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	4618      	mov	r0, r3
 8013496:	f7ec ff03 	bl	80002a0 <strlen>
 801349a:	4603      	mov	r3, r0
 801349c:	4423      	add	r3, r4
 801349e:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	210d      	movs	r1, #13
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80134aa:	2300      	movs	r3, #0
 80134ac:	617b      	str	r3, [r7, #20]
 80134ae:	e007      	b.n	80134c0 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	2120      	movs	r1, #32
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	3301      	adds	r3, #1
 80134be:	617b      	str	r3, [r7, #20]
 80134c0:	697a      	ldr	r2, [r7, #20]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d3f3      	bcc.n	80134b0 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	210d      	movs	r1, #13
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	4798      	blx	r3
    impl->inputLineLength = 0;
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	2200      	movs	r2, #0
 80134d6:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 80134d8:	bf00      	nop
 80134da:	371c      	adds	r7, #28
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd90      	pop	{r4, r7, pc}

080134e0 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80134ea:	6838      	ldr	r0, [r7, #0]
 80134ec:	f7ec fed8 	bl	80002a0 <strlen>
 80134f0:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80134f2:	2300      	movs	r3, #0
 80134f4:	60fb      	str	r3, [r7, #12]
 80134f6:	e00b      	b.n	8013510 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	6839      	ldr	r1, [r7, #0]
 80134fe:	68fa      	ldr	r2, [r7, #12]
 8013500:	440a      	add	r2, r1
 8013502:	7812      	ldrb	r2, [r2, #0]
 8013504:	4611      	mov	r1, r2
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3301      	adds	r3, #1
 801350e:	60fb      	str	r3, [r7, #12]
 8013510:	68fa      	ldr	r2, [r7, #12]
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	429a      	cmp	r2, r3
 8013516:	d3ef      	bcc.n	80134f8 <writeToOutput+0x18>
    }
}
 8013518:	bf00      	nop
 801351a:	bf00      	nop
 801351c:	3710      	adds	r7, #16
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <isControlChar>:

static bool isControlChar(char c) {
 8013522:	b480      	push	{r7}
 8013524:	b083      	sub	sp, #12
 8013526:	af00      	add	r7, sp, #0
 8013528:	4603      	mov	r3, r0
 801352a:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 801352c:	79fb      	ldrb	r3, [r7, #7]
 801352e:	2b0d      	cmp	r3, #13
 8013530:	d00b      	beq.n	801354a <isControlChar+0x28>
 8013532:	79fb      	ldrb	r3, [r7, #7]
 8013534:	2b0a      	cmp	r3, #10
 8013536:	d008      	beq.n	801354a <isControlChar+0x28>
 8013538:	79fb      	ldrb	r3, [r7, #7]
 801353a:	2b08      	cmp	r3, #8
 801353c:	d005      	beq.n	801354a <isControlChar+0x28>
 801353e:	79fb      	ldrb	r3, [r7, #7]
 8013540:	2b09      	cmp	r3, #9
 8013542:	d002      	beq.n	801354a <isControlChar+0x28>
 8013544:	79fb      	ldrb	r3, [r7, #7]
 8013546:	2b7f      	cmp	r3, #127	@ 0x7f
 8013548:	d101      	bne.n	801354e <isControlChar+0x2c>
 801354a:	2301      	movs	r3, #1
 801354c:	e000      	b.n	8013550 <isControlChar+0x2e>
 801354e:	2300      	movs	r3, #0
 8013550:	f003 0301 	and.w	r3, r3, #1
 8013554:	b2db      	uxtb	r3, r3
}
 8013556:	4618      	mov	r0, r3
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	4603      	mov	r3, r0
 801356a:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 801356c:	79fb      	ldrb	r3, [r7, #7]
 801356e:	2b1f      	cmp	r3, #31
 8013570:	d904      	bls.n	801357c <isDisplayableChar+0x1a>
 8013572:	79fb      	ldrb	r3, [r7, #7]
 8013574:	2b7e      	cmp	r3, #126	@ 0x7e
 8013576:	d801      	bhi.n	801357c <isDisplayableChar+0x1a>
 8013578:	2301      	movs	r3, #1
 801357a:	e000      	b.n	801357e <isDisplayableChar+0x1c>
 801357c:	2300      	movs	r3, #0
 801357e:	f003 0301 	and.w	r3, r3, #1
 8013582:	b2db      	uxtb	r3, r3
}
 8013584:	4618      	mov	r0, r3
 8013586:	370c      	adds	r7, #12
 8013588:	46bd      	mov	sp, r7
 801358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358e:	4770      	bx	lr

08013590 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	88da      	ldrh	r2, [r3, #6]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	889b      	ldrh	r3, [r3, #4]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d306      	bcc.n	80135b2 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	88da      	ldrh	r2, [r3, #6]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	889b      	ldrh	r3, [r3, #4]
 80135ac:	1ad3      	subs	r3, r2, r3
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	e009      	b.n	80135c6 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	891a      	ldrh	r2, [r3, #8]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	889b      	ldrh	r3, [r3, #4]
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	88db      	ldrh	r3, [r3, #6]
 80135c2:	4413      	add	r3, r2
 80135c4:	b29b      	uxth	r3, r3
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	370c      	adds	r7, #12
 80135ca:	46bd      	mov	sp, r7
 80135cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d0:	4770      	bx	lr

080135d2 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80135d2:	b480      	push	{r7}
 80135d4:	b085      	sub	sp, #20
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80135da:	2300      	movs	r3, #0
 80135dc:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	889a      	ldrh	r2, [r3, #4]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	88db      	ldrh	r3, [r3, #6]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d014      	beq.n	8013614 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	8892      	ldrh	r2, [r2, #4]
 80135f2:	4413      	add	r3, r2
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	889b      	ldrh	r3, [r3, #4]
 80135fc:	3301      	adds	r3, #1
 80135fe:	b29b      	uxth	r3, r3
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	8912      	ldrh	r2, [r2, #8]
 8013604:	fbb3 f1f2 	udiv	r1, r3, r2
 8013608:	fb01 f202 	mul.w	r2, r1, r2
 801360c:	1a9b      	subs	r3, r3, r2
 801360e:	b29a      	uxth	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8013614:	7bfb      	ldrb	r3, [r7, #15]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3714      	adds	r7, #20
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr

08013622 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8013622:	b480      	push	{r7}
 8013624:	b085      	sub	sp, #20
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
 801362a:	460b      	mov	r3, r1
 801362c:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	88db      	ldrh	r3, [r3, #6]
 8013632:	3301      	adds	r3, #1
 8013634:	b29b      	uxth	r3, r3
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	8912      	ldrh	r2, [r2, #8]
 801363a:	fbb3 f1f2 	udiv	r1, r3, r2
 801363e:	fb01 f202 	mul.w	r2, r1, r2
 8013642:	1a9b      	subs	r3, r3, r2
 8013644:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	889b      	ldrh	r3, [r3, #4]
 801364a:	89fa      	ldrh	r2, [r7, #14]
 801364c:	429a      	cmp	r2, r3
 801364e:	d00b      	beq.n	8013668 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	88d2      	ldrh	r2, [r2, #6]
 8013658:	4413      	add	r3, r2
 801365a:	78fa      	ldrb	r2, [r7, #3]
 801365c:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	89fa      	ldrh	r2, [r7, #14]
 8013662:	80da      	strh	r2, [r3, #6]
        return true;
 8013664:	2301      	movs	r3, #1
 8013666:	e000      	b.n	801366a <fifoBufPush+0x48>
    }
    return false;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3714      	adds	r7, #20
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr

08013676 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8013676:	b580      	push	{r7, lr}
 8013678:	b088      	sub	sp, #32
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
 801367e:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013680:	6838      	ldr	r0, [r7, #0]
 8013682:	f7ec fe0d 	bl	80002a0 <strlen>
 8013686:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	889b      	ldrh	r3, [r3, #4]
 801368c:	461a      	mov	r2, r3
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	3301      	adds	r3, #1
 8013692:	429a      	cmp	r2, r3
 8013694:	d201      	bcs.n	801369a <historyPut+0x24>
        return false;
 8013696:	2300      	movs	r3, #0
 8013698:	e04d      	b.n	8013736 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 801369a:	6839      	ldr	r1, [r7, #0]
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 f86a 	bl	8013776 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80136a2:	e024      	b.n	80136ee <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	891b      	ldrh	r3, [r3, #8]
 80136a8:	4619      	mov	r1, r3
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f000 f847 	bl	801373e <historyGet>
 80136b0:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80136b2:	6978      	ldr	r0, [r7, #20]
 80136b4:	f7ec fdf4 	bl	80002a0 <strlen>
 80136b8:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	1ad3      	subs	r3, r2, r3
 80136c2:	461a      	mov	r2, r3
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	4413      	add	r3, r2
 80136c8:	3301      	adds	r3, #1
 80136ca:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	889b      	ldrh	r3, [r3, #4]
 80136d0:	461a      	mov	r2, r3
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	1ad3      	subs	r3, r2, r3
 80136d6:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	3301      	adds	r3, #1
 80136dc:	68fa      	ldr	r2, [r7, #12]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d20a      	bcs.n	80136f8 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	891b      	ldrh	r3, [r3, #8]
 80136e6:	3b01      	subs	r3, #1
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	891b      	ldrh	r3, [r3, #8]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d1d6      	bne.n	80136a4 <historyPut+0x2e>
 80136f6:	e000      	b.n	80136fa <historyPut+0x84>
            break;
 80136f8:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	891b      	ldrh	r3, [r3, #8]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00a      	beq.n	8013718 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	69bb      	ldr	r3, [r7, #24]
 8013708:	3301      	adds	r3, #1
 801370a:	18d0      	adds	r0, r2, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	69fa      	ldr	r2, [r7, #28]
 8013712:	4619      	mov	r1, r3
 8013714:	f00b fac4 	bl	801eca0 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6818      	ldr	r0, [r3, #0]
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	3301      	adds	r3, #1
 8013720:	461a      	mov	r2, r3
 8013722:	6839      	ldr	r1, [r7, #0]
 8013724:	f00b fbed 	bl	801ef02 <memcpy>
    ++history->itemsCount;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	891b      	ldrh	r3, [r3, #8]
 801372c:	3301      	adds	r3, #1
 801372e:	b29a      	uxth	r2, r3
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	811a      	strh	r2, [r3, #8]

    return true;
 8013734:	2301      	movs	r3, #1
}
 8013736:	4618      	mov	r0, r3
 8013738:	3720      	adds	r7, #32
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 801374a:	887b      	ldrh	r3, [r7, #2]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d004      	beq.n	801375a <historyGet+0x1c>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	891b      	ldrh	r3, [r3, #8]
 8013754:	887a      	ldrh	r2, [r7, #2]
 8013756:	429a      	cmp	r2, r3
 8013758:	d901      	bls.n	801375e <historyGet+0x20>
        return NULL;
 801375a:	2300      	movs	r3, #0
 801375c:	e007      	b.n	801376e <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	887a      	ldrh	r2, [r7, #2]
 8013764:	4611      	mov	r1, r2
 8013766:	4618      	mov	r0, r3
 8013768:	f7ff f882 	bl	8012870 <embeddedCliGetToken>
 801376c:	4603      	mov	r3, r0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3708      	adds	r7, #8
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}

08013776 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8013776:	b580      	push	{r7, lr}
 8013778:	b086      	sub	sp, #24
 801377a:	af00      	add	r7, sp, #0
 801377c:	6078      	str	r0, [r7, #4]
 801377e:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d04c      	beq.n	8013820 <historyRemove+0xaa>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	891b      	ldrh	r3, [r3, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d048      	beq.n	8013820 <historyRemove+0xaa>
        return;
    char *item = NULL;
 801378e:	2300      	movs	r3, #0
 8013790:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8013792:	2301      	movs	r3, #1
 8013794:	827b      	strh	r3, [r7, #18]
 8013796:	e013      	b.n	80137c0 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	8a7a      	ldrh	r2, [r7, #18]
 801379e:	4611      	mov	r1, r2
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7ff f880 	bl	80128a6 <embeddedCliGetTokenVariable>
 80137a6:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80137a8:	6839      	ldr	r1, [r7, #0]
 80137aa:	6978      	ldr	r0, [r7, #20]
 80137ac:	f7ec fd18 	bl	80001e0 <strcmp>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00a      	beq.n	80137cc <historyRemove+0x56>
            break;
        }
        item = NULL;
 80137b6:	2300      	movs	r3, #0
 80137b8:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80137ba:	8a7b      	ldrh	r3, [r7, #18]
 80137bc:	3301      	adds	r3, #1
 80137be:	827b      	strh	r3, [r7, #18]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	891b      	ldrh	r3, [r3, #8]
 80137c4:	8a7a      	ldrh	r2, [r7, #18]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d9e6      	bls.n	8013798 <historyRemove+0x22>
 80137ca:	e000      	b.n	80137ce <historyRemove+0x58>
            break;
 80137cc:	bf00      	nop
    }
    if (item == NULL)
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d027      	beq.n	8013824 <historyRemove+0xae>
        return;

    --history->itemsCount;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	891b      	ldrh	r3, [r3, #8]
 80137d8:	3b01      	subs	r3, #1
 80137da:	b29a      	uxth	r2, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80137e0:	8a7a      	ldrh	r2, [r7, #18]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	891b      	ldrh	r3, [r3, #8]
 80137e6:	3301      	adds	r3, #1
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d01d      	beq.n	8013828 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 80137ec:	6978      	ldr	r0, [r7, #20]
 80137ee:	f7ec fd57 	bl	80002a0 <strlen>
 80137f2:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	889b      	ldrh	r3, [r3, #4]
 80137f8:	4619      	mov	r1, r3
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	3301      	adds	r3, #1
 80137fe:	697a      	ldr	r2, [r7, #20]
 8013800:	441a      	add	r2, r3
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	1ad3      	subs	r3, r2, r3
 8013808:	1acb      	subs	r3, r1, r3
 801380a:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	3301      	adds	r3, #1
 8013810:	697a      	ldr	r2, [r7, #20]
 8013812:	4413      	add	r3, r2
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	4619      	mov	r1, r3
 8013818:	6978      	ldr	r0, [r7, #20]
 801381a:	f00b fa41 	bl	801eca0 <memmove>
 801381e:	e004      	b.n	801382a <historyRemove+0xb4>
        return;
 8013820:	bf00      	nop
 8013822:	e002      	b.n	801382a <historyRemove+0xb4>
        return;
 8013824:	bf00      	nop
 8013826:	e000      	b.n	801382a <historyRemove+0xb4>
        return;
 8013828:	bf00      	nop
}
 801382a:	3718      	adds	r7, #24
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	460b      	mov	r3, r1
 801383a:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d002      	beq.n	8013848 <getTokenPosition+0x18>
 8013842:	887b      	ldrh	r3, [r7, #2]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d102      	bne.n	801384e <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8013848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801384c:	e028      	b.n	80138a0 <getTokenPosition+0x70>
    uint16_t i = 0;
 801384e:	2300      	movs	r3, #0
 8013850:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8013852:	2301      	movs	r3, #1
 8013854:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8013856:	89ba      	ldrh	r2, [r7, #12]
 8013858:	887b      	ldrh	r3, [r7, #2]
 801385a:	429a      	cmp	r2, r3
 801385c:	d013      	beq.n	8013886 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 801385e:	89fb      	ldrh	r3, [r7, #14]
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	4413      	add	r3, r2
 8013864:	781b      	ldrb	r3, [r3, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d109      	bne.n	801387e <getTokenPosition+0x4e>
            ++tokenCount;
 801386a:	89bb      	ldrh	r3, [r7, #12]
 801386c:	3301      	adds	r3, #1
 801386e:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8013870:	89fb      	ldrh	r3, [r7, #14]
 8013872:	3301      	adds	r3, #1
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	4413      	add	r3, r2
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d005      	beq.n	801388a <getTokenPosition+0x5a>
                break;
        }

        ++i;
 801387e:	89fb      	ldrh	r3, [r7, #14]
 8013880:	3301      	adds	r3, #1
 8013882:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8013884:	e7e7      	b.n	8013856 <getTokenPosition+0x26>
            break;
 8013886:	bf00      	nop
 8013888:	e000      	b.n	801388c <getTokenPosition+0x5c>
                break;
 801388a:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 801388c:	89fb      	ldrh	r3, [r7, #14]
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	4413      	add	r3, r2
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d001      	beq.n	801389c <getTokenPosition+0x6c>
        return i;
 8013898:	89fb      	ldrh	r3, [r7, #14]
 801389a:	e001      	b.n	80138a0 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 801389c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3714      	adds	r7, #20
 80138a4:	46bd      	mov	sp, r7
 80138a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138aa:	4770      	bx	lr

080138ac <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80138b0:	4904      	ldr	r1, [pc, #16]	@ (80138c4 <MX_FATFS_Init+0x18>)
 80138b2:	4805      	ldr	r0, [pc, #20]	@ (80138c8 <MX_FATFS_Init+0x1c>)
 80138b4:	f008 facc 	bl	801be50 <FATFS_LinkDriver>
 80138b8:	4603      	mov	r3, r0
 80138ba:	461a      	mov	r2, r3
 80138bc:	4b03      	ldr	r3, [pc, #12]	@ (80138cc <MX_FATFS_Init+0x20>)
 80138be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80138c0:	bf00      	nop
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	20001b58 	.word	0x20001b58
 80138c8:	08024fb4 	.word	0x08024fb4
 80138cc:	20001b54 	.word	0x20001b54

080138d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80138d0:	b480      	push	{r7}
 80138d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80138d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr

080138e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80138e6:	2300      	movs	r3, #0
 80138e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80138ea:	f000 f86b 	bl	80139c4 <BSP_SD_IsDetected>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d001      	beq.n	80138f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80138f4:	2301      	movs	r3, #1
 80138f6:	e005      	b.n	8013904 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80138f8:	4804      	ldr	r0, [pc, #16]	@ (801390c <BSP_SD_Init+0x2c>)
 80138fa:	f7f6 fbf1 	bl	800a0e0 <HAL_SD_Init>
 80138fe:	4603      	mov	r3, r0
 8013900:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8013902:	79fb      	ldrb	r3, [r7, #7]
}
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	200018b8 	.word	0x200018b8

08013910 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b088      	sub	sp, #32
 8013914:	af02      	add	r7, sp, #8
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	607a      	str	r2, [r7, #4]
 801391c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801391e:	2300      	movs	r3, #0
 8013920:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	9300      	str	r3, [sp, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	68ba      	ldr	r2, [r7, #8]
 801392a:	68f9      	ldr	r1, [r7, #12]
 801392c:	4806      	ldr	r0, [pc, #24]	@ (8013948 <BSP_SD_ReadBlocks+0x38>)
 801392e:	f7f6 fc87 	bl	800a240 <HAL_SD_ReadBlocks>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d001      	beq.n	801393c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013938:	2301      	movs	r3, #1
 801393a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801393c:	7dfb      	ldrb	r3, [r7, #23]
}
 801393e:	4618      	mov	r0, r3
 8013940:	3718      	adds	r7, #24
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	200018b8 	.word	0x200018b8

0801394c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b088      	sub	sp, #32
 8013950:	af02      	add	r7, sp, #8
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
 8013958:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801395a:	2300      	movs	r3, #0
 801395c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	9300      	str	r3, [sp, #0]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	68f9      	ldr	r1, [r7, #12]
 8013968:	4806      	ldr	r0, [pc, #24]	@ (8013984 <BSP_SD_WriteBlocks+0x38>)
 801396a:	f7f6 fe4f 	bl	800a60c <HAL_SD_WriteBlocks>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013974:	2301      	movs	r3, #1
 8013976:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013978:	7dfb      	ldrb	r3, [r7, #23]
}
 801397a:	4618      	mov	r0, r3
 801397c:	3718      	adds	r7, #24
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	200018b8 	.word	0x200018b8

08013988 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801398c:	4805      	ldr	r0, [pc, #20]	@ (80139a4 <BSP_SD_GetCardState+0x1c>)
 801398e:	f7f7 f99b 	bl	800acc8 <HAL_SD_GetCardState>
 8013992:	4603      	mov	r3, r0
 8013994:	2b04      	cmp	r3, #4
 8013996:	bf14      	ite	ne
 8013998:	2301      	movne	r3, #1
 801399a:	2300      	moveq	r3, #0
 801399c:	b2db      	uxtb	r3, r3
}
 801399e:	4618      	mov	r0, r3
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	200018b8 	.word	0x200018b8

080139a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80139b0:	6879      	ldr	r1, [r7, #4]
 80139b2:	4803      	ldr	r0, [pc, #12]	@ (80139c0 <BSP_SD_GetCardInfo+0x18>)
 80139b4:	f7f7 f95c 	bl	800ac70 <HAL_SD_GetCardInfo>
}
 80139b8:	bf00      	nop
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	200018b8 	.word	0x200018b8

080139c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80139ca:	2301      	movs	r3, #1
 80139cc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80139ce:	79fb      	ldrb	r3, [r7, #7]
 80139d0:	b2db      	uxtb	r3, r3
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	370c      	adds	r7, #12
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr
	...

080139e0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	4603      	mov	r3, r0
 80139e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80139ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013a18 <SD_CheckStatus+0x38>)
 80139ec:	2201      	movs	r2, #1
 80139ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80139f0:	f7ff ffca 	bl	8013988 <BSP_SD_GetCardState>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d107      	bne.n	8013a0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80139fa:	4b07      	ldr	r3, [pc, #28]	@ (8013a18 <SD_CheckStatus+0x38>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f023 0301 	bic.w	r3, r3, #1
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	4b04      	ldr	r3, [pc, #16]	@ (8013a18 <SD_CheckStatus+0x38>)
 8013a08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013a0a:	4b03      	ldr	r3, [pc, #12]	@ (8013a18 <SD_CheckStatus+0x38>)
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	b2db      	uxtb	r3, r3
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	20000028 	.word	0x20000028

08013a1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	4603      	mov	r3, r0
 8013a24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013a26:	4b0b      	ldr	r3, [pc, #44]	@ (8013a54 <SD_initialize+0x38>)
 8013a28:	2201      	movs	r2, #1
 8013a2a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013a2c:	f7ff ff58 	bl	80138e0 <BSP_SD_Init>
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d107      	bne.n	8013a46 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013a36:	79fb      	ldrb	r3, [r7, #7]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff ffd1 	bl	80139e0 <SD_CheckStatus>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	461a      	mov	r2, r3
 8013a42:	4b04      	ldr	r3, [pc, #16]	@ (8013a54 <SD_initialize+0x38>)
 8013a44:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013a46:	4b03      	ldr	r3, [pc, #12]	@ (8013a54 <SD_initialize+0x38>)
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	b2db      	uxtb	r3, r3
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	20000028 	.word	0x20000028

08013a58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	4603      	mov	r3, r0
 8013a60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013a62:	79fb      	ldrb	r3, [r7, #7]
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7ff ffbb 	bl	80139e0 <SD_CheckStatus>
 8013a6a:	4603      	mov	r3, r0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b086      	sub	sp, #24
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60b9      	str	r1, [r7, #8]
 8013a7c:	607a      	str	r2, [r7, #4]
 8013a7e:	603b      	str	r3, [r7, #0]
 8013a80:	4603      	mov	r3, r0
 8013a82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013a84:	2301      	movs	r3, #1
 8013a86:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013a88:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8c:	683a      	ldr	r2, [r7, #0]
 8013a8e:	6879      	ldr	r1, [r7, #4]
 8013a90:	68b8      	ldr	r0, [r7, #8]
 8013a92:	f7ff ff3d 	bl	8013910 <BSP_SD_ReadBlocks>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d107      	bne.n	8013aac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013a9c:	bf00      	nop
 8013a9e:	f7ff ff73 	bl	8013988 <BSP_SD_GetCardState>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1fa      	bne.n	8013a9e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3718      	adds	r7, #24
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b086      	sub	sp, #24
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	603b      	str	r3, [r7, #0]
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013aca:	f04f 33ff 	mov.w	r3, #4294967295
 8013ace:	683a      	ldr	r2, [r7, #0]
 8013ad0:	6879      	ldr	r1, [r7, #4]
 8013ad2:	68b8      	ldr	r0, [r7, #8]
 8013ad4:	f7ff ff3a 	bl	801394c <BSP_SD_WriteBlocks>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d107      	bne.n	8013aee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013ade:	bf00      	nop
 8013ae0:	f7ff ff52 	bl	8013988 <BSP_SD_GetCardState>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d1fa      	bne.n	8013ae0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013aea:	2300      	movs	r3, #0
 8013aec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3718      	adds	r7, #24
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b08c      	sub	sp, #48	@ 0x30
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	4603      	mov	r3, r0
 8013b00:	603a      	str	r2, [r7, #0]
 8013b02:	71fb      	strb	r3, [r7, #7]
 8013b04:	460b      	mov	r3, r1
 8013b06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013b0e:	4b25      	ldr	r3, [pc, #148]	@ (8013ba4 <SD_ioctl+0xac>)
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	f003 0301 	and.w	r3, r3, #1
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d001      	beq.n	8013b20 <SD_ioctl+0x28>
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	e03c      	b.n	8013b9a <SD_ioctl+0xa2>

  switch (cmd)
 8013b20:	79bb      	ldrb	r3, [r7, #6]
 8013b22:	2b03      	cmp	r3, #3
 8013b24:	d834      	bhi.n	8013b90 <SD_ioctl+0x98>
 8013b26:	a201      	add	r2, pc, #4	@ (adr r2, 8013b2c <SD_ioctl+0x34>)
 8013b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b2c:	08013b3d 	.word	0x08013b3d
 8013b30:	08013b45 	.word	0x08013b45
 8013b34:	08013b5d 	.word	0x08013b5d
 8013b38:	08013b77 	.word	0x08013b77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b42:	e028      	b.n	8013b96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b44:	f107 030c 	add.w	r3, r7, #12
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7ff ff2d 	bl	80139a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b54:	2300      	movs	r3, #0
 8013b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b5a:	e01c      	b.n	8013b96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b5c:	f107 030c 	add.w	r3, r7, #12
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7ff ff21 	bl	80139a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b68:	b29a      	uxth	r2, r3
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b74:	e00f      	b.n	8013b96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b76:	f107 030c 	add.w	r3, r7, #12
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ff ff14 	bl	80139a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b82:	0a5a      	lsrs	r2, r3, #9
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b8e:	e002      	b.n	8013b96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013b90:	2304      	movs	r3, #4
 8013b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3730      	adds	r7, #48	@ 0x30
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	20000028 	.word	0x20000028

08013ba8 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8013ba8:	b480      	push	{r7}
 8013baa:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8013bac:	4b03      	ldr	r3, [pc, #12]	@ (8013bbc <RtcInt+0x14>)
 8013bae:	2201      	movs	r2, #1
 8013bb0:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8013bb2:	bf00      	nop
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr
 8013bbc:	20000029 	.word	0x20000029

08013bc0 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8013bc4:	4b06      	ldr	r3, [pc, #24]	@ (8013be0 <Rtc_Alarm_watchdog_disable+0x20>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	689a      	ldr	r2, [r3, #8]
 8013bca:	4b05      	ldr	r3, [pc, #20]	@ (8013be0 <Rtc_Alarm_watchdog_disable+0x20>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013bd2:	609a      	str	r2, [r3, #8]
}
 8013bd4:	bf00      	nop
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bdc:	4770      	bx	lr
 8013bde:	bf00      	nop
 8013be0:	20001898 	.word	0x20001898

08013be4 <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b092      	sub	sp, #72	@ 0x48
 8013be8:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013bea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013bee:	2200      	movs	r2, #0
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4828      	ldr	r0, [pc, #160]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013bf4:	f7f5 febf 	bl	8009976 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4824      	ldr	r0, [pc, #144]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013c02:	f7f5 ff9a 	bl	8009b3a <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 8013c06:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013c0a:	3319      	adds	r3, #25
 8013c0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 8013c10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c14:	2b3b      	cmp	r3, #59	@ 0x3b
 8013c16:	d902      	bls.n	8013c1e <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 8013c1e:	1d3b      	adds	r3, r7, #4
 8013c20:	2228      	movs	r2, #40	@ 0x28
 8013c22:	2100      	movs	r1, #0
 8013c24:	4618      	mov	r0, r3
 8013c26:	f00b f855 	bl	801ecd4 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8013c32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013c42:	2300      	movs	r3, #0
 8013c44:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013c46:	4b14      	ldr	r3, [pc, #80]	@ (8013c98 <Rtc_Alarm_watchdog+0xb4>)
 8013c48:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013c52:	2301      	movs	r3, #1
 8013c54:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8013c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013c5e:	1d3b      	adds	r3, r7, #4
 8013c60:	2200      	movs	r2, #0
 8013c62:	4619      	mov	r1, r3
 8013c64:	480b      	ldr	r0, [pc, #44]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013c66:	f7f5 ffb7 	bl	8009bd8 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8013c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	689a      	ldr	r2, [r3, #8]
 8013c70:	4b08      	ldr	r3, [pc, #32]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013c78:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8013c7a:	4b06      	ldr	r3, [pc, #24]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	b2da      	uxtb	r2, r3
 8013c82:	4b04      	ldr	r3, [pc, #16]	@ (8013c94 <Rtc_Alarm_watchdog+0xb0>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8013c8a:	60da      	str	r2, [r3, #12]

}
 8013c8c:	bf00      	nop
 8013c8e:	3748      	adds	r7, #72	@ 0x48
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	20001898 	.word	0x20001898
 8013c98:	80808000 	.word	0x80808000

08013c9c <Set_Date>:

void Set_Date(char *Datebuffer) {
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b088      	sub	sp, #32
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8013ca4:	f107 030c 	add.w	r3, r7, #12
 8013ca8:	4619      	mov	r1, r3
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f000 f8e4 	bl	8013e78 <Parse_Date>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8013cb4:	7ffb      	ldrb	r3, [r7, #31]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d10c      	bne.n	8013cd4 <Set_Date+0x38>
		sDate.Date = date[0];
 8013cba:	7b3b      	ldrb	r3, [r7, #12]
 8013cbc:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8013cbe:	7b7b      	ldrb	r3, [r7, #13]
 8013cc0:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8013cc2:	7bbb      	ldrb	r3, [r7, #14]
 8013cc4:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013cc6:	f107 0318 	add.w	r3, r7, #24
 8013cca:	2200      	movs	r2, #0
 8013ccc:	4619      	mov	r1, r3
 8013cce:	4805      	ldr	r0, [pc, #20]	@ (8013ce4 <Set_Date+0x48>)
 8013cd0:	f7f5 feaf 	bl	8009a32 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8013cd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013cd8:	f7f0 fa1c 	bl	8004114 <HAL_Delay>
}
 8013cdc:	bf00      	nop
 8013cde:	3720      	adds	r7, #32
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	20001898 	.word	0x20001898

08013ce8 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b094      	sub	sp, #80	@ 0x50
 8013cec:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 8013cee:	4b44      	ldr	r3, [pc, #272]	@ (8013e00 <Rtc_set_alarm+0x118>)
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d07f      	beq.n	8013df6 <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013cfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d00:	2200      	movs	r2, #0
 8013d02:	4619      	mov	r1, r3
 8013d04:	483f      	ldr	r0, [pc, #252]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013d06:	f7f5 fe36 	bl	8009976 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d0e:	2200      	movs	r2, #0
 8013d10:	4619      	mov	r1, r3
 8013d12:	483c      	ldr	r0, [pc, #240]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013d14:	f7f5 ff11 	bl	8009b3a <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8013d18:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8013e08 <Rtc_set_alarm+0x120>)
 8013d20:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	4413      	add	r3, r2
 8013d28:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 8013d2c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013d30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8013d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d38:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d3a:	d917      	bls.n	8013d6c <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8013d3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d40:	4a31      	ldr	r2, [pc, #196]	@ (8013e08 <Rtc_set_alarm+0x120>)
 8013d42:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8013d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d4a:	fb01 f202 	mul.w	r2, r1, r2
 8013d4e:	1a9b      	subs	r3, r3, r2
 8013d50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8013d54:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013d58:	3301      	adds	r3, #1
 8013d5a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8013d5e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013d62:	2b17      	cmp	r3, #23
 8013d64:	d902      	bls.n	8013d6c <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8013d6c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013d70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d74:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8013d78:	9100      	str	r1, [sp, #0]
 8013d7a:	4924      	ldr	r1, [pc, #144]	@ (8013e0c <Rtc_set_alarm+0x124>)
 8013d7c:	4824      	ldr	r0, [pc, #144]	@ (8013e10 <Rtc_set_alarm+0x128>)
 8013d7e:	f00a fe5f 	bl	801ea40 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8013d82:	1d3b      	adds	r3, r7, #4
 8013d84:	2228      	movs	r2, #40	@ 0x28
 8013d86:	2100      	movs	r1, #0
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f00a ffa3 	bl	801ecd4 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8013d92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013d9e:	2300      	movs	r3, #0
 8013da0:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013da2:	2300      	movs	r3, #0
 8013da4:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013da6:	2300      	movs	r3, #0
 8013da8:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013daa:	4b1a      	ldr	r3, [pc, #104]	@ (8013e14 <Rtc_set_alarm+0x12c>)
 8013dac:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013dae:	2300      	movs	r3, #0
 8013db0:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013db2:	2300      	movs	r3, #0
 8013db4:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013db6:	2301      	movs	r3, #1
 8013db8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8013dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013dc2:	1d3b      	adds	r3, r7, #4
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	480e      	ldr	r0, [pc, #56]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013dca:	f7f5 ff05 	bl	8009bd8 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8013dce:	4b0d      	ldr	r3, [pc, #52]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	689a      	ldr	r2, [r3, #8]
 8013dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013ddc:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8013dde:	4b09      	ldr	r3, [pc, #36]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	b2da      	uxtb	r2, r3
 8013de6:	4b07      	ldr	r3, [pc, #28]	@ (8013e04 <Rtc_set_alarm+0x11c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8013dee:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8013df0:	4b03      	ldr	r3, [pc, #12]	@ (8013e00 <Rtc_set_alarm+0x118>)
 8013df2:	2200      	movs	r2, #0
 8013df4:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8013df6:	bf00      	nop
 8013df8:	3748      	adds	r7, #72	@ 0x48
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	20000029 	.word	0x20000029
 8013e04:	20001898 	.word	0x20001898
 8013e08:	200012cc 	.word	0x200012cc
 8013e0c:	08024694 	.word	0x08024694
 8013e10:	2000002c 	.word	0x2000002c
 8013e14:	80800080 	.word	0x80800080

08013e18 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b08c      	sub	sp, #48	@ 0x30
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8013e20:	f107 030c 	add.w	r3, r7, #12
 8013e24:	4619      	mov	r1, r3
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 f890 	bl	8013f4c <Parse_Time>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8013e32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d113      	bne.n	8013e62 <Set_Time+0x4a>
		sTime.Hours = time[0];
 8013e3a:	7b3b      	ldrb	r3, [r7, #12]
 8013e3c:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8013e3e:	7b7b      	ldrb	r3, [r7, #13]
 8013e40:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8013e42:	7bbb      	ldrb	r3, [r7, #14]
 8013e44:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013e46:	2300      	movs	r3, #0
 8013e48:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8013e4e:	f107 0318 	add.w	r3, r7, #24
 8013e52:	2200      	movs	r2, #0
 8013e54:	4619      	mov	r1, r3
 8013e56:	4807      	ldr	r0, [pc, #28]	@ (8013e74 <Set_Time+0x5c>)
 8013e58:	f7f5 fcf3 	bl	8009842 <HAL_RTC_SetTime>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8013e62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013e66:	f7f0 f955 	bl	8004114 <HAL_Delay>

}
 8013e6a:	bf00      	nop
 8013e6c:	3730      	adds	r7, #48	@ 0x30
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	bf00      	nop
 8013e74:	20001898 	.word	0x20001898

08013e78 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013e82:	2300      	movs	r3, #0
 8013e84:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8013e86:	2300      	movs	r3, #0
 8013e88:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8013e8a:	492e      	ldr	r1, [pc, #184]	@ (8013f44 <Parse_Date+0xcc>)
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f00a ff37 	bl	801ed00 <strtok>
 8013e92:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d14b      	bne.n	8013f32 <Parse_Date+0xba>
		{
			return 1;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e04d      	b.n	8013f3a <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8013e9e:	68b8      	ldr	r0, [r7, #8]
 8013ea0:	f009 fc96 	bl	801d7d0 <atoi>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8013ea8:	89fb      	ldrh	r3, [r7, #14]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d10a      	bne.n	8013ec4 <Parse_Date+0x4c>
 8013eae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013eb2:	2b1f      	cmp	r3, #31
 8013eb4:	dc03      	bgt.n	8013ebe <Parse_Date+0x46>
 8013eb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	dc02      	bgt.n	8013ec4 <Parse_Date+0x4c>
			{
				val= 1;
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	81bb      	strh	r3, [r7, #12]
 8013ec2:	e028      	b.n	8013f16 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8013ec4:	89fb      	ldrh	r3, [r7, #14]
 8013ec6:	2b01      	cmp	r3, #1
 8013ec8:	d10a      	bne.n	8013ee0 <Parse_Date+0x68>
 8013eca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ece:	2b0c      	cmp	r3, #12
 8013ed0:	dc03      	bgt.n	8013eda <Parse_Date+0x62>
 8013ed2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	dc02      	bgt.n	8013ee0 <Parse_Date+0x68>
			{
				val= 1;
 8013eda:	2301      	movs	r3, #1
 8013edc:	81bb      	strh	r3, [r7, #12]
 8013ede:	e01a      	b.n	8013f16 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8013ee0:	89fb      	ldrh	r3, [r7, #14]
 8013ee2:	2b02      	cmp	r3, #2
 8013ee4:	d112      	bne.n	8013f0c <Parse_Date+0x94>
 8013ee6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013eea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013eee:	dd0d      	ble.n	8013f0c <Parse_Date+0x94>
			{
				val=val%100;
 8013ef0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ef4:	4a14      	ldr	r2, [pc, #80]	@ (8013f48 <Parse_Date+0xd0>)
 8013ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8013efa:	1151      	asrs	r1, r2, #5
 8013efc:	17da      	asrs	r2, r3, #31
 8013efe:	1a8a      	subs	r2, r1, r2
 8013f00:	2164      	movs	r1, #100	@ 0x64
 8013f02:	fb01 f202 	mul.w	r2, r1, r2
 8013f06:	1a9b      	subs	r3, r3, r2
 8013f08:	81bb      	strh	r3, [r7, #12]
 8013f0a:	e004      	b.n	8013f16 <Parse_Date+0x9e>
			}
			else if(i > 2)
 8013f0c:	89fb      	ldrh	r3, [r7, #14]
 8013f0e:	2b02      	cmp	r3, #2
 8013f10:	d901      	bls.n	8013f16 <Parse_Date+0x9e>
			{
				return 1;
 8013f12:	2301      	movs	r3, #1
 8013f14:	e011      	b.n	8013f3a <Parse_Date+0xc2>
			}


		   date[i] =val;
 8013f16:	89fb      	ldrh	r3, [r7, #14]
 8013f18:	683a      	ldr	r2, [r7, #0]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	89ba      	ldrh	r2, [r7, #12]
 8013f1e:	b2d2      	uxtb	r2, r2
 8013f20:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8013f22:	4908      	ldr	r1, [pc, #32]	@ (8013f44 <Parse_Date+0xcc>)
 8013f24:	2000      	movs	r0, #0
 8013f26:	f00a feeb 	bl	801ed00 <strtok>
 8013f2a:	60b8      	str	r0, [r7, #8]
		i++;
 8013f2c:	89fb      	ldrh	r3, [r7, #14]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d1b2      	bne.n	8013e9e <Parse_Date+0x26>
	}

	}

	return 0;
 8013f38:	2300      	movs	r3, #0

}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3710      	adds	r7, #16
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	080246a4 	.word	0x080246a4
 8013f48:	51eb851f 	.word	0x51eb851f

08013f4c <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b084      	sub	sp, #16
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013f56:	2300      	movs	r3, #0
 8013f58:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8013f5e:	492a      	ldr	r1, [pc, #168]	@ (8014008 <Parse_Time+0xbc>)
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f00a fecd 	bl	801ed00 <strtok>
 8013f66:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d143      	bne.n	8013ff6 <Parse_Time+0xaa>
			{
				return 1;
 8013f6e:	2301      	movs	r3, #1
 8013f70:	e045      	b.n	8013ffe <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8013f72:	68b8      	ldr	r0, [r7, #8]
 8013f74:	f009 fc2c 	bl	801d7d0 <atoi>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8013f7c:	89fb      	ldrh	r3, [r7, #14]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d10a      	bne.n	8013f98 <Parse_Time+0x4c>
 8013f82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f86:	2b18      	cmp	r3, #24
 8013f88:	dc03      	bgt.n	8013f92 <Parse_Time+0x46>
 8013f8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	da02      	bge.n	8013f98 <Parse_Time+0x4c>
				{
					val= 24;
 8013f92:	2318      	movs	r3, #24
 8013f94:	81bb      	strh	r3, [r7, #12]
 8013f96:	e020      	b.n	8013fda <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8013f98:	89fb      	ldrh	r3, [r7, #14]
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d10a      	bne.n	8013fb4 <Parse_Time+0x68>
 8013f9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fa2:	2b3b      	cmp	r3, #59	@ 0x3b
 8013fa4:	dc03      	bgt.n	8013fae <Parse_Time+0x62>
 8013fa6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	da02      	bge.n	8013fb4 <Parse_Time+0x68>
				{
					val= 59;
 8013fae:	233b      	movs	r3, #59	@ 0x3b
 8013fb0:	81bb      	strh	r3, [r7, #12]
 8013fb2:	e012      	b.n	8013fda <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8013fb4:	89fb      	ldrh	r3, [r7, #14]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d10a      	bne.n	8013fd0 <Parse_Time+0x84>
 8013fba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8013fc0:	dc03      	bgt.n	8013fca <Parse_Time+0x7e>
 8013fc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	da02      	bge.n	8013fd0 <Parse_Time+0x84>
				{
					val=59;
 8013fca:	233b      	movs	r3, #59	@ 0x3b
 8013fcc:	81bb      	strh	r3, [r7, #12]
 8013fce:	e004      	b.n	8013fda <Parse_Time+0x8e>
				}
				else if(i > 2)
 8013fd0:	89fb      	ldrh	r3, [r7, #14]
 8013fd2:	2b02      	cmp	r3, #2
 8013fd4:	d901      	bls.n	8013fda <Parse_Time+0x8e>
				{
					return 1;
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	e011      	b.n	8013ffe <Parse_Time+0xb2>
				}


				time[i] =val;
 8013fda:	89fb      	ldrh	r3, [r7, #14]
 8013fdc:	683a      	ldr	r2, [r7, #0]
 8013fde:	4413      	add	r3, r2
 8013fe0:	89ba      	ldrh	r2, [r7, #12]
 8013fe2:	b2d2      	uxtb	r2, r2
 8013fe4:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8013fe6:	4908      	ldr	r1, [pc, #32]	@ (8014008 <Parse_Time+0xbc>)
 8013fe8:	2000      	movs	r0, #0
 8013fea:	f00a fe89 	bl	801ed00 <strtok>
 8013fee:	60b8      	str	r0, [r7, #8]
			i++;
 8013ff0:	89fb      	ldrh	r3, [r7, #14]
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1ba      	bne.n	8013f72 <Parse_Time+0x26>
		}

		}

		return 0;
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3710      	adds	r7, #16
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	080246a4 	.word	0x080246a4

0801400c <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 801400c:	b480      	push	{r7}
 801400e:	b083      	sub	sp, #12
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	460b      	mov	r3, r1
 8014016:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8014018:	78fb      	ldrb	r3, [r7, #3]
 801401a:	091b      	lsrs	r3, r3, #4
 801401c:	b2db      	uxtb	r3, r3
 801401e:	4619      	mov	r1, r3
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	1c5a      	adds	r2, r3, #1
 8014024:	607a      	str	r2, [r7, #4]
 8014026:	4a08      	ldr	r2, [pc, #32]	@ (8014048 <CharToHexasc+0x3c>)
 8014028:	5c52      	ldrb	r2, [r2, r1]
 801402a:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 801402c:	78fb      	ldrb	r3, [r7, #3]
 801402e:	f003 030f 	and.w	r3, r3, #15
 8014032:	4a05      	ldr	r2, [pc, #20]	@ (8014048 <CharToHexasc+0x3c>)
 8014034:	5cd2      	ldrb	r2, [r2, r3]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	701a      	strb	r2, [r3, #0]
}
 801403a:	bf00      	nop
 801403c:	370c      	adds	r7, #12
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr
 8014046:	bf00      	nop
 8014048:	08024fc8 	.word	0x08024fc8

0801404c <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b088      	sub	sp, #32
 8014050:	af00      	add	r7, sp, #0
	adc_Disable();
 8014052:	4830      	ldr	r0, [pc, #192]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 8014054:	f7f0 f909 	bl	800426a <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8014058:	f107 0314 	add.w	r3, r7, #20
 801405c:	2200      	movs	r2, #0
 801405e:	601a      	str	r2, [r3, #0]
 8014060:	605a      	str	r2, [r3, #4]
 8014062:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8014064:	4b2b      	ldr	r3, [pc, #172]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 8014066:	4a2c      	ldr	r2, [pc, #176]	@ (8014118 <adc_InitOneShotMode+0xcc>)
 8014068:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801406a:	4b2a      	ldr	r3, [pc, #168]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 801406c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014070:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014072:	4b28      	ldr	r3, [pc, #160]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 8014074:	2200      	movs	r2, #0
 8014076:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8014078:	4b26      	ldr	r3, [pc, #152]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 801407a:	2200      	movs	r2, #0
 801407c:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 801407e:	4b25      	ldr	r3, [pc, #148]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 8014080:	2200      	movs	r2, #0
 8014082:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014084:	4b23      	ldr	r3, [pc, #140]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 8014086:	2200      	movs	r2, #0
 8014088:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801408c:	4b21      	ldr	r3, [pc, #132]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 801408e:	2200      	movs	r2, #0
 8014090:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8014092:	4b20      	ldr	r3, [pc, #128]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 8014094:	4a21      	ldr	r2, [pc, #132]	@ (801411c <adc_InitOneShotMode+0xd0>)
 8014096:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014098:	4b1e      	ldr	r3, [pc, #120]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 801409a:	2200      	movs	r2, #0
 801409c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 801409e:	4b1d      	ldr	r3, [pc, #116]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 80140a0:	2201      	movs	r2, #1
 80140a2:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80140a4:	4b1b      	ldr	r3, [pc, #108]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 80140a6:	2200      	movs	r2, #0
 80140a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80140ac:	4b19      	ldr	r3, [pc, #100]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 80140ae:	2201      	movs	r2, #1
 80140b0:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80140b2:	4818      	ldr	r0, [pc, #96]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 80140b4:	f7f0 f896 	bl	80041e4 <HAL_ADC_Init>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d001      	beq.n	80140c2 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 80140be:	f7ef fad3 	bl	8003668 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80140c2:	2300      	movs	r3, #0
 80140c4:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80140c6:	f107 0314 	add.w	r3, r7, #20
 80140ca:	4619      	mov	r1, r3
 80140cc:	4811      	ldr	r0, [pc, #68]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 80140ce:	f7f0 fc9d 	bl	8004a0c <HAL_ADCEx_MultiModeConfigChannel>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d001      	beq.n	80140dc <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 80140d8:	f7ef fac6 	bl	8003668 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 80140dc:	1d3b      	adds	r3, r7, #4
 80140de:	2200      	movs	r2, #0
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	605a      	str	r2, [r3, #4]
 80140e4:	609a      	str	r2, [r3, #8]
 80140e6:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 80140e8:	230a      	movs	r3, #10
 80140ea:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 80140ec:	2301      	movs	r3, #1
 80140ee:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80140f0:	2302      	movs	r3, #2
 80140f2:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 80140f4:	2300      	movs	r3, #0
 80140f6:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80140f8:	1d3b      	adds	r3, r7, #4
 80140fa:	4619      	mov	r1, r3
 80140fc:	4805      	ldr	r0, [pc, #20]	@ (8014114 <adc_InitOneShotMode+0xc8>)
 80140fe:	f7f0 fa67 	bl	80045d0 <HAL_ADC_ConfigChannel>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d001      	beq.n	801410c <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8014108:	f7ef faae 	bl	8003668 <Error_Handler>
		  }



}
 801410c:	bf00      	nop
 801410e:	3720      	adds	r7, #32
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	200017f0 	.word	0x200017f0
 8014118:	40012000 	.word	0x40012000
 801411c:	0f000001 	.word	0x0f000001

08014120 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8014120:	b580      	push	{r7, lr}
 8014122:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8014124:	4802      	ldr	r0, [pc, #8]	@ (8014130 <adc_Getval+0x10>)
 8014126:	f7f0 fa45 	bl	80045b4 <HAL_ADC_GetValue>
 801412a:	4603      	mov	r3, r0

}
 801412c:	4618      	mov	r0, r3
 801412e:	bd80      	pop	{r7, pc}
 8014130:	200017f0 	.word	0x200017f0
 8014134:	00000000 	.word	0x00000000

08014138 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8014140:	f7ff ff84 	bl	801404c <adc_InitOneShotMode>
	HAL_Delay(1);
 8014144:	2001      	movs	r0, #1
 8014146:	f7ef ffe5 	bl	8004114 <HAL_Delay>
	adc_Start();
 801414a:	4847      	ldr	r0, [pc, #284]	@ (8014268 <adc_Measure+0x130>)
 801414c:	f7f0 f8c0 	bl	80042d0 <HAL_ADC_Start>
	HAL_Delay(1);
 8014150:	2001      	movs	r0, #1
 8014152:	f7ef ffdf 	bl	8004114 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014156:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801415a:	4843      	ldr	r0, [pc, #268]	@ (8014268 <adc_Measure+0x130>)
 801415c:	f7f0 f99f 	bl	800449e <HAL_ADC_PollForConversion>
 8014160:	4603      	mov	r3, r0
 8014162:	2b00      	cmp	r3, #0
 8014164:	d01d      	beq.n	80141a2 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8014166:	2001      	movs	r0, #1
 8014168:	f7ef ffd4 	bl	8004114 <HAL_Delay>
		   adc_Start();
 801416c:	483e      	ldr	r0, [pc, #248]	@ (8014268 <adc_Measure+0x130>)
 801416e:	f7f0 f8af 	bl	80042d0 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014172:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014176:	483c      	ldr	r0, [pc, #240]	@ (8014268 <adc_Measure+0x130>)
 8014178:	f7f0 f991 	bl	800449e <HAL_ADC_PollForConversion>
 801417c:	4603      	mov	r3, r0
 801417e:	2b00      	cmp	r3, #0
 8014180:	d00f      	beq.n	80141a2 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8014182:	2001      	movs	r0, #1
 8014184:	f7ef ffc6 	bl	8004114 <HAL_Delay>
				adc_Start();
 8014188:	4837      	ldr	r0, [pc, #220]	@ (8014268 <adc_Measure+0x130>)
 801418a:	f7f0 f8a1 	bl	80042d0 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801418e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014192:	4835      	ldr	r0, [pc, #212]	@ (8014268 <adc_Measure+0x130>)
 8014194:	f7f0 f983 	bl	800449e <HAL_ADC_PollForConversion>
 8014198:	4603      	mov	r3, r0
 801419a:	2b00      	cmp	r3, #0
 801419c:	d001      	beq.n	80141a2 <adc_Measure+0x6a>
				{
					return 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	e05a      	b.n	8014258 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80141a2:	4831      	ldr	r0, [pc, #196]	@ (8014268 <adc_Measure+0x130>)
 80141a4:	f7f0 f948 	bl	8004438 <HAL_ADC_Stop>

	val = adc_Getval();
 80141a8:	f7ff ffba 	bl	8014120 <adc_Getval>
 80141ac:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 80141ae:	2001      	movs	r0, #1
 80141b0:	f7ef ffb0 	bl	8004114 <HAL_Delay>
	adc_Start();
 80141b4:	482c      	ldr	r0, [pc, #176]	@ (8014268 <adc_Measure+0x130>)
 80141b6:	f7f0 f88b 	bl	80042d0 <HAL_ADC_Start>
	HAL_Delay(1);
 80141ba:	2001      	movs	r0, #1
 80141bc:	f7ef ffaa 	bl	8004114 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141c4:	4828      	ldr	r0, [pc, #160]	@ (8014268 <adc_Measure+0x130>)
 80141c6:	f7f0 f96a 	bl	800449e <HAL_ADC_PollForConversion>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d01d      	beq.n	801420c <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 80141d0:	2001      	movs	r0, #1
 80141d2:	f7ef ff9f 	bl	8004114 <HAL_Delay>
		   adc_Start();
 80141d6:	4824      	ldr	r0, [pc, #144]	@ (8014268 <adc_Measure+0x130>)
 80141d8:	f7f0 f87a 	bl	80042d0 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141e0:	4821      	ldr	r0, [pc, #132]	@ (8014268 <adc_Measure+0x130>)
 80141e2:	f7f0 f95c 	bl	800449e <HAL_ADC_PollForConversion>
 80141e6:	4603      	mov	r3, r0
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d00f      	beq.n	801420c <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 80141ec:	2001      	movs	r0, #1
 80141ee:	f7ef ff91 	bl	8004114 <HAL_Delay>
				adc_Start();
 80141f2:	481d      	ldr	r0, [pc, #116]	@ (8014268 <adc_Measure+0x130>)
 80141f4:	f7f0 f86c 	bl	80042d0 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141fc:	481a      	ldr	r0, [pc, #104]	@ (8014268 <adc_Measure+0x130>)
 80141fe:	f7f0 f94e 	bl	800449e <HAL_ADC_PollForConversion>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d001      	beq.n	801420c <adc_Measure+0xd4>
				{
					return 0;
 8014208:	2300      	movs	r3, #0
 801420a:	e025      	b.n	8014258 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 801420c:	4816      	ldr	r0, [pc, #88]	@ (8014268 <adc_Measure+0x130>)
 801420e:	f7f0 f913 	bl	8004438 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8014212:	f7ff ff85 	bl	8014120 <adc_Getval>
 8014216:	4602      	mov	r2, r0
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	4413      	add	r3, r2
 801421c:	085b      	lsrs	r3, r3, #1
 801421e:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	ee07 3a90 	vmov	s15, r3
 8014226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801422a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801426c <adc_Measure+0x134>
 801422e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014232:	ee17 0a90 	vmov	r0, s15
 8014236:	f7ec f99f 	bl	8000578 <__aeabi_f2d>
 801423a:	a309      	add	r3, pc, #36	@ (adr r3, 8014260 <adc_Measure+0x128>)
 801423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014240:	f7ec f9f2 	bl	8000628 <__aeabi_dmul>
 8014244:	4602      	mov	r2, r0
 8014246:	460b      	mov	r3, r1
 8014248:	4610      	mov	r0, r2
 801424a:	4619      	mov	r1, r3
 801424c:	f7ec fce4 	bl	8000c18 <__aeabi_d2f>
 8014250:	4602      	mov	r2, r0
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	601a      	str	r2, [r3, #0]


	return 1;
 8014256:	2301      	movs	r3, #1


}
 8014258:	4618      	mov	r0, r3
 801425a:	3710      	adds	r7, #16
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	851eb852 	.word	0x851eb852
 8014264:	3ff451eb 	.word	0x3ff451eb
 8014268:	200017f0 	.word	0x200017f0
 801426c:	3a533333 	.word	0x3a533333

08014270 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8014270:	b480      	push	{r7}
 8014272:	b083      	sub	sp, #12
 8014274:	af00      	add	r7, sp, #0
 8014276:	4603      	mov	r3, r0
 8014278:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 801427a:	4a04      	ldr	r2, [pc, #16]	@ (801428c <init_driver+0x1c>)
 801427c:	79fb      	ldrb	r3, [r7, #7]
 801427e:	7013      	strb	r3, [r2, #0]
}
 8014280:	bf00      	nop
 8014282:	370c      	adds	r7, #12
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr
 801428c:	20001b5c 	.word	0x20001b5c

08014290 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 8014296:	2300      	movs	r3, #0
 8014298:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 801429a:	2300      	movs	r3, #0
 801429c:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 801429e:	1d3b      	adds	r3, r7, #4
 80142a0:	4618      	mov	r0, r3
 80142a2:	f000 f8f5 	bl	8014490 <scd30_get_data_ready>
 80142a6:	4603      	mov	r3, r0
 80142a8:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 80142aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d01c      	beq.n	80142ec <scd30_await_data_ready+0x5c>
        return local_error;
 80142b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142b6:	e01e      	b.n	80142f6 <scd30_await_data_ready+0x66>
    }
    while (data_ready == 0) {
    	if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 80142b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80142bc:	4810      	ldr	r0, [pc, #64]	@ (8014300 <scd30_await_data_ready+0x70>)
 80142be:	f7f1 fee9 	bl	8006094 <HAL_GPIO_ReadPin>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d102      	bne.n	80142ce <scd30_await_data_ready+0x3e>
    			{
        sensirion_hal_sleep_us(100000);
 80142c8:	480e      	ldr	r0, [pc, #56]	@ (8014304 <scd30_await_data_ready+0x74>)
 80142ca:	f000 feb5 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    			}
        local_error = scd30_get_data_ready(&data_ready);
 80142ce:	1d3b      	adds	r3, r7, #4
 80142d0:	4618      	mov	r0, r3
 80142d2:	f000 f8dd 	bl	8014490 <scd30_get_data_ready>
 80142d6:	4603      	mov	r3, r0
 80142d8:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 80142da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d002      	beq.n	80142e8 <scd30_await_data_ready+0x58>
            return local_error;
 80142e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142e6:	e006      	b.n	80142f6 <scd30_await_data_ready+0x66>
        }

        run_console_from_scd30();
 80142e8:	f7ee f90c 	bl	8002504 <run_console_from_scd30>
    while (data_ready == 0) {
 80142ec:	88bb      	ldrh	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d0e2      	beq.n	80142b8 <scd30_await_data_ready+0x28>
    }
    return local_error;
 80142f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	40020000 	.word	0x40020000
 8014304:	000186a0 	.word	0x000186a0

08014308 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8014308:	b580      	push	{r7, lr}
 801430a:	b086      	sub	sp, #24
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 8014314:	2300      	movs	r3, #0
 8014316:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 8014318:	f7ff ffba 	bl	8014290 <scd30_await_data_ready>
 801431c:	4603      	mov	r3, r0
 801431e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d002      	beq.n	801432e <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 8014328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801432c:	e008      	b.n	8014340 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	68b9      	ldr	r1, [r7, #8]
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	f000 f8fc 	bl	8014530 <scd30_read_measurement_data>
 8014338:	4603      	mov	r3, r0
 801433a:	82fb      	strh	r3, [r7, #22]
    return local_error;
 801433c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 8014348:	b580      	push	{r7, lr}
 801434a:	b086      	sub	sp, #24
 801434c:	af00      	add	r7, sp, #0
 801434e:	4603      	mov	r3, r0
 8014350:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014352:	2300      	movs	r3, #0
 8014354:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014356:	2300      	movs	r3, #0
 8014358:	60fb      	str	r3, [r7, #12]
 801435a:	2300      	movs	r3, #0
 801435c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801435e:	2300      	movs	r3, #0
 8014360:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 8014362:	8ab9      	ldrh	r1, [r7, #20]
 8014364:	f107 030c 	add.w	r3, r7, #12
 8014368:	2210      	movs	r2, #16
 801436a:	4618      	mov	r0, r3
 801436c:	f000 fd25 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014370:	4603      	mov	r3, r0
 8014372:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8014374:	88fa      	ldrh	r2, [r7, #6]
 8014376:	8ab9      	ldrh	r1, [r7, #20]
 8014378:	f107 030c 	add.w	r3, r7, #12
 801437c:	4618      	mov	r0, r3
 801437e:	f000 fd3f 	bl	8014e00 <sensirion_i2c_add_uint16_t_to_buffer>
 8014382:	4603      	mov	r3, r0
 8014384:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014386:	4b0b      	ldr	r3, [pc, #44]	@ (80143b4 <scd30_start_periodic_measurement+0x6c>)
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	8aba      	ldrh	r2, [r7, #20]
 801438c:	f107 010c 	add.w	r1, r7, #12
 8014390:	4618      	mov	r0, r3
 8014392:	f000 fd65 	bl	8014e60 <sensirion_i2c_write_data>
 8014396:	4603      	mov	r3, r0
 8014398:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 801439a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d002      	beq.n	80143a8 <scd30_start_periodic_measurement+0x60>
        return local_error;
 80143a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143a6:	e001      	b.n	80143ac <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 80143a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3718      	adds	r7, #24
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	20001b5c 	.word	0x20001b5c

080143b8 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80143be:	2300      	movs	r3, #0
 80143c0:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 80143c2:	2300      	movs	r3, #0
 80143c4:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 80143c6:	2300      	movs	r3, #0
 80143c8:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 80143ca:	88b9      	ldrh	r1, [r7, #4]
 80143cc:	463b      	mov	r3, r7
 80143ce:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80143d2:	4618      	mov	r0, r3
 80143d4:	f000 fcf1 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 80143d8:	4603      	mov	r3, r0
 80143da:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80143dc:	4b0c      	ldr	r3, [pc, #48]	@ (8014410 <scd30_stop_periodic_measurement+0x58>)
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	88ba      	ldrh	r2, [r7, #4]
 80143e2:	4639      	mov	r1, r7
 80143e4:	4618      	mov	r0, r3
 80143e6:	f000 fd3b 	bl	8014e60 <sensirion_i2c_write_data>
 80143ea:	4603      	mov	r3, r0
 80143ec:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 80143ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d002      	beq.n	80143fc <scd30_stop_periodic_measurement+0x44>
        return local_error;
 80143f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143fa:	e005      	b.n	8014408 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80143fc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014400:	f000 fe1a 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014408:	4618      	mov	r0, r3
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	20001b5c 	.word	0x20001b5c

08014414 <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval) {
 8014414:	b580      	push	{r7, lr}
 8014416:	b086      	sub	sp, #24
 8014418:	af00      	add	r7, sp, #0
 801441a:	4603      	mov	r3, r0
 801441c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801441e:	2300      	movs	r3, #0
 8014420:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014422:	2300      	movs	r3, #0
 8014424:	60fb      	str	r3, [r7, #12]
 8014426:	2300      	movs	r3, #0
 8014428:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801442a:	2300      	movs	r3, #0
 801442c:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x4600);
 801442e:	8ab9      	ldrh	r1, [r7, #20]
 8014430:	f107 030c 	add.w	r3, r7, #12
 8014434:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8014438:	4618      	mov	r0, r3
 801443a:	f000 fcbe 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 801443e:	4603      	mov	r3, r0
 8014440:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 8014442:	88fa      	ldrh	r2, [r7, #6]
 8014444:	8ab9      	ldrh	r1, [r7, #20]
 8014446:	f107 030c 	add.w	r3, r7, #12
 801444a:	4618      	mov	r0, r3
 801444c:	f000 fcd8 	bl	8014e00 <sensirion_i2c_add_uint16_t_to_buffer>
 8014450:	4603      	mov	r3, r0
 8014452:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, interval);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014454:	4b0d      	ldr	r3, [pc, #52]	@ (801448c <scd30_set_measurement_interval+0x78>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	8aba      	ldrh	r2, [r7, #20]
 801445a:	f107 010c 	add.w	r1, r7, #12
 801445e:	4618      	mov	r0, r3
 8014460:	f000 fcfe 	bl	8014e60 <sensirion_i2c_write_data>
 8014464:	4603      	mov	r3, r0
 8014466:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d002      	beq.n	8014476 <scd30_set_measurement_interval+0x62>
        return local_error;
 8014470:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014474:	e005      	b.n	8014482 <scd30_set_measurement_interval+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014476:	f242 7010 	movw	r0, #10000	@ 0x2710
 801447a:	f000 fddd 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801447e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014482:	4618      	mov	r0, r3
 8014484:	3718      	adds	r7, #24
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	20001b5c 	.word	0x20001b5c

08014490 <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 8014490:	b580      	push	{r7, lr}
 8014492:	b084      	sub	sp, #16
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014498:	2300      	movs	r3, #0
 801449a:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 801449c:	4b22      	ldr	r3, [pc, #136]	@ (8014528 <scd30_get_data_ready+0x98>)
 801449e:	881b      	ldrh	r3, [r3, #0]
 80144a0:	813b      	strh	r3, [r7, #8]
 80144a2:	2300      	movs	r3, #0
 80144a4:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 80144aa:	89b9      	ldrh	r1, [r7, #12]
 80144ac:	f107 0308 	add.w	r3, r7, #8
 80144b0:	f240 2202 	movw	r2, #514	@ 0x202
 80144b4:	4618      	mov	r0, r3
 80144b6:	f000 fc80 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 80144ba:	4603      	mov	r3, r0
 80144bc:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80144be:	4b1b      	ldr	r3, [pc, #108]	@ (801452c <scd30_get_data_ready+0x9c>)
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	89ba      	ldrh	r2, [r7, #12]
 80144c4:	f107 0108 	add.w	r1, r7, #8
 80144c8:	4618      	mov	r0, r3
 80144ca:	f000 fcc9 	bl	8014e60 <sensirion_i2c_write_data>
 80144ce:	4603      	mov	r3, r0
 80144d0:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80144d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d002      	beq.n	80144e0 <scd30_get_data_ready+0x50>
        return local_error;
 80144da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144de:	e01f      	b.n	8014520 <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80144e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80144e4:	f000 fda8 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80144e8:	4b10      	ldr	r3, [pc, #64]	@ (801452c <scd30_get_data_ready+0x9c>)
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	f107 0108 	add.w	r1, r7, #8
 80144f0:	2202      	movs	r2, #2
 80144f2:	4618      	mov	r0, r3
 80144f4:	f000 fcc7 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 80144f8:	4603      	mov	r3, r0
 80144fa:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80144fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d002      	beq.n	801450a <scd30_get_data_ready+0x7a>
        return local_error;
 8014504:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014508:	e00a      	b.n	8014520 <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801450a:	f107 0308 	add.w	r3, r7, #8
 801450e:	4618      	mov	r0, r3
 8014510:	f000 fbc1 	bl	8014c96 <sensirion_common_bytes_to_uint16_t>
 8014514:	4603      	mov	r3, r0
 8014516:	461a      	mov	r2, r3
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	801a      	strh	r2, [r3, #0]
    return local_error;
 801451c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3710      	adds	r7, #16
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	080246a8 	.word	0x080246a8
 801452c:	20001b5c 	.word	0x20001b5c

08014530 <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 8014530:	b580      	push	{r7, lr}
 8014532:	b08a      	sub	sp, #40	@ 0x28
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 801453c:	2300      	movs	r3, #0
 801453e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 8014540:	2300      	movs	r3, #0
 8014542:	613b      	str	r3, [r7, #16]
 8014544:	f107 0314 	add.w	r3, r7, #20
 8014548:	2200      	movs	r2, #0
 801454a:	601a      	str	r2, [r3, #0]
 801454c:	605a      	str	r2, [r3, #4]
 801454e:	609a      	str	r2, [r3, #8]
 8014550:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 8014552:	2300      	movs	r3, #0
 8014554:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 8014556:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8014558:	f107 0310 	add.w	r3, r7, #16
 801455c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8014560:	4618      	mov	r0, r3
 8014562:	f000 fc2a 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014566:	4603      	mov	r3, r0
 8014568:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801456a:	4b26      	ldr	r3, [pc, #152]	@ (8014604 <scd30_read_measurement_data+0xd4>)
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014570:	f107 0110 	add.w	r1, r7, #16
 8014574:	4618      	mov	r0, r3
 8014576:	f000 fc73 	bl	8014e60 <sensirion_i2c_write_data>
 801457a:	4603      	mov	r3, r0
 801457c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 801457e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014582:	2b00      	cmp	r3, #0
 8014584:	d002      	beq.n	801458c <scd30_read_measurement_data+0x5c>
        return local_error;
 8014586:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801458a:	e036      	b.n	80145fa <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801458c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014590:	f000 fd52 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 8014594:	4b1b      	ldr	r3, [pc, #108]	@ (8014604 <scd30_read_measurement_data+0xd4>)
 8014596:	781b      	ldrb	r3, [r3, #0]
 8014598:	f107 0110 	add.w	r1, r7, #16
 801459c:	220c      	movs	r2, #12
 801459e:	4618      	mov	r0, r3
 80145a0:	f000 fc71 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 80145a4:	4603      	mov	r3, r0
 80145a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80145a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d002      	beq.n	80145b6 <scd30_read_measurement_data+0x86>
        return local_error;
 80145b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145b4:	e021      	b.n	80145fa <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 80145b6:	f107 0310 	add.w	r3, r7, #16
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 fb9b 	bl	8014cf6 <sensirion_common_bytes_to_float>
 80145c0:	eef0 7a40 	vmov.f32	s15, s0
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 80145ca:	f107 0310 	add.w	r3, r7, #16
 80145ce:	3304      	adds	r3, #4
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 fb90 	bl	8014cf6 <sensirion_common_bytes_to_float>
 80145d6:	eef0 7a40 	vmov.f32	s15, s0
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 80145e0:	f107 0310 	add.w	r3, r7, #16
 80145e4:	3308      	adds	r3, #8
 80145e6:	4618      	mov	r0, r3
 80145e8:	f000 fb85 	bl	8014cf6 <sensirion_common_bytes_to_float>
 80145ec:	eef0 7a40 	vmov.f32	s15, s0
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 80145f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3728      	adds	r7, #40	@ 0x28
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	20001b5c 	.word	0x20001b5c

08014608 <scd30_activate_auto_calibration>:

int16_t scd30_activate_auto_calibration(uint16_t do_activate) {
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014612:	2300      	movs	r3, #0
 8014614:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014616:	2300      	movs	r3, #0
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	2300      	movs	r3, #0
 801461c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801461e:	2300      	movs	r3, #0
 8014620:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 8014622:	8ab9      	ldrh	r1, [r7, #20]
 8014624:	f107 030c 	add.w	r3, r7, #12
 8014628:	f245 3206 	movw	r2, #21254	@ 0x5306
 801462c:	4618      	mov	r0, r3
 801462e:	f000 fbc4 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014632:	4603      	mov	r3, r0
 8014634:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8014636:	88fa      	ldrh	r2, [r7, #6]
 8014638:	8ab9      	ldrh	r1, [r7, #20]
 801463a:	f107 030c 	add.w	r3, r7, #12
 801463e:	4618      	mov	r0, r3
 8014640:	f000 fbde 	bl	8014e00 <sensirion_i2c_add_uint16_t_to_buffer>
 8014644:	4603      	mov	r3, r0
 8014646:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, do_activate);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014648:	4b0d      	ldr	r3, [pc, #52]	@ (8014680 <scd30_activate_auto_calibration+0x78>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	8aba      	ldrh	r2, [r7, #20]
 801464e:	f107 010c 	add.w	r1, r7, #12
 8014652:	4618      	mov	r0, r3
 8014654:	f000 fc04 	bl	8014e60 <sensirion_i2c_write_data>
 8014658:	4603      	mov	r3, r0
 801465a:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 801465c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d002      	beq.n	801466a <scd30_activate_auto_calibration+0x62>
        return local_error;
 8014664:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014668:	e005      	b.n	8014676 <scd30_activate_auto_calibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801466a:	f242 7010 	movw	r0, #10000	@ 0x2710
 801466e:	f000 fce3 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014672:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014676:	4618      	mov	r0, r3
 8014678:	3718      	adds	r7, #24
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	20001b5c 	.word	0x20001b5c

08014684 <scd30_get_auto_calibration_status>:

int16_t scd30_get_auto_calibration_status(uint16_t* is_active) {
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 801468c:	2300      	movs	r3, #0
 801468e:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014690:	4b22      	ldr	r3, [pc, #136]	@ (801471c <scd30_get_auto_calibration_status+0x98>)
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	813b      	strh	r3, [r7, #8]
 8014696:	2300      	movs	r3, #0
 8014698:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801469a:	2300      	movs	r3, #0
 801469c:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 801469e:	89b9      	ldrh	r1, [r7, #12]
 80146a0:	f107 0308 	add.w	r3, r7, #8
 80146a4:	f245 3206 	movw	r2, #21254	@ 0x5306
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 fb86 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 80146ae:	4603      	mov	r3, r0
 80146b0:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80146b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014720 <scd30_get_auto_calibration_status+0x9c>)
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	89ba      	ldrh	r2, [r7, #12]
 80146b8:	f107 0108 	add.w	r1, r7, #8
 80146bc:	4618      	mov	r0, r3
 80146be:	f000 fbcf 	bl	8014e60 <sensirion_i2c_write_data>
 80146c2:	4603      	mov	r3, r0
 80146c4:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80146c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d002      	beq.n	80146d4 <scd30_get_auto_calibration_status+0x50>
        return local_error;
 80146ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146d2:	e01f      	b.n	8014714 <scd30_get_auto_calibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80146d4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80146d8:	f000 fcae 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80146dc:	4b10      	ldr	r3, [pc, #64]	@ (8014720 <scd30_get_auto_calibration_status+0x9c>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	f107 0108 	add.w	r1, r7, #8
 80146e4:	2202      	movs	r2, #2
 80146e6:	4618      	mov	r0, r3
 80146e8:	f000 fbcd 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 80146ec:	4603      	mov	r3, r0
 80146ee:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80146f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d002      	beq.n	80146fe <scd30_get_auto_calibration_status+0x7a>
        return local_error;
 80146f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146fc:	e00a      	b.n	8014714 <scd30_get_auto_calibration_status+0x90>
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80146fe:	f107 0308 	add.w	r3, r7, #8
 8014702:	4618      	mov	r0, r3
 8014704:	f000 fac7 	bl	8014c96 <sensirion_common_bytes_to_uint16_t>
 8014708:	4603      	mov	r3, r0
 801470a:	461a      	mov	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014710:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014714:	4618      	mov	r0, r3
 8014716:	3710      	adds	r7, #16
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	080246a8 	.word	0x080246a8
 8014720:	20001b5c 	.word	0x20001b5c

08014724 <scd30_force_recalibration>:

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	4603      	mov	r3, r0
 801472c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801472e:	2300      	movs	r3, #0
 8014730:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014732:	2300      	movs	r3, #0
 8014734:	60fb      	str	r3, [r7, #12]
 8014736:	2300      	movs	r3, #0
 8014738:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801473a:	2300      	movs	r3, #0
 801473c:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 801473e:	8ab9      	ldrh	r1, [r7, #20]
 8014740:	f107 030c 	add.w	r3, r7, #12
 8014744:	f245 2204 	movw	r2, #20996	@ 0x5204
 8014748:	4618      	mov	r0, r3
 801474a:	f000 fb36 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 801474e:	4603      	mov	r3, r0
 8014750:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8014752:	88fa      	ldrh	r2, [r7, #6]
 8014754:	8ab9      	ldrh	r1, [r7, #20]
 8014756:	f107 030c 	add.w	r3, r7, #12
 801475a:	4618      	mov	r0, r3
 801475c:	f000 fb50 	bl	8014e00 <sensirion_i2c_add_uint16_t_to_buffer>
 8014760:	4603      	mov	r3, r0
 8014762:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014764:	4b0d      	ldr	r3, [pc, #52]	@ (801479c <scd30_force_recalibration+0x78>)
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	8aba      	ldrh	r2, [r7, #20]
 801476a:	f107 010c 	add.w	r1, r7, #12
 801476e:	4618      	mov	r0, r3
 8014770:	f000 fb76 	bl	8014e60 <sensirion_i2c_write_data>
 8014774:	4603      	mov	r3, r0
 8014776:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <scd30_force_recalibration+0x62>
        return local_error;
 8014780:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014784:	e005      	b.n	8014792 <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014786:	f242 7010 	movw	r0, #10000	@ 0x2710
 801478a:	f000 fc55 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801478e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3718      	adds	r7, #24
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	20001b5c 	.word	0x20001b5c

080147a0 <scd30_get_force_recalibration_status>:

int16_t scd30_get_force_recalibration_status(uint16_t* co2_ref_concentration) {
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80147a8:	2300      	movs	r3, #0
 80147aa:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80147ac:	4b22      	ldr	r3, [pc, #136]	@ (8014838 <scd30_get_force_recalibration_status+0x98>)
 80147ae:	881b      	ldrh	r3, [r3, #0]
 80147b0:	813b      	strh	r3, [r7, #8]
 80147b2:	2300      	movs	r3, #0
 80147b4:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 80147ba:	89b9      	ldrh	r1, [r7, #12]
 80147bc:	f107 0308 	add.w	r3, r7, #8
 80147c0:	f245 2204 	movw	r2, #20996	@ 0x5204
 80147c4:	4618      	mov	r0, r3
 80147c6:	f000 faf8 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 80147ca:	4603      	mov	r3, r0
 80147cc:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80147ce:	4b1b      	ldr	r3, [pc, #108]	@ (801483c <scd30_get_force_recalibration_status+0x9c>)
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	89ba      	ldrh	r2, [r7, #12]
 80147d4:	f107 0108 	add.w	r1, r7, #8
 80147d8:	4618      	mov	r0, r3
 80147da:	f000 fb41 	bl	8014e60 <sensirion_i2c_write_data>
 80147de:	4603      	mov	r3, r0
 80147e0:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80147e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d002      	beq.n	80147f0 <scd30_get_force_recalibration_status+0x50>
        return local_error;
 80147ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80147ee:	e01f      	b.n	8014830 <scd30_get_force_recalibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80147f0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80147f4:	f000 fc20 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80147f8:	4b10      	ldr	r3, [pc, #64]	@ (801483c <scd30_get_force_recalibration_status+0x9c>)
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	f107 0108 	add.w	r1, r7, #8
 8014800:	2202      	movs	r2, #2
 8014802:	4618      	mov	r0, r3
 8014804:	f000 fb3f 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 8014808:	4603      	mov	r3, r0
 801480a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801480c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d002      	beq.n	801481a <scd30_get_force_recalibration_status+0x7a>
        return local_error;
 8014814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014818:	e00a      	b.n	8014830 <scd30_get_force_recalibration_status+0x90>
    }
    *co2_ref_concentration =
        sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801481a:	f107 0308 	add.w	r3, r7, #8
 801481e:	4618      	mov	r0, r3
 8014820:	f000 fa39 	bl	8014c96 <sensirion_common_bytes_to_uint16_t>
 8014824:	4603      	mov	r3, r0
 8014826:	461a      	mov	r2, r3
    *co2_ref_concentration =
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	801a      	strh	r2, [r3, #0]
    return local_error;
 801482c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014830:	4618      	mov	r0, r3
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	080246a8 	.word	0x080246a8
 801483c:	20001b5c 	.word	0x20001b5c

08014840 <scd30_set_temperature_offset>:

int16_t scd30_set_temperature_offset(uint16_t temperature_offset) {
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	4603      	mov	r3, r0
 8014848:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801484a:	2300      	movs	r3, #0
 801484c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801484e:	2300      	movs	r3, #0
 8014850:	60fb      	str	r3, [r7, #12]
 8014852:	2300      	movs	r3, #0
 8014854:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 801485a:	8ab9      	ldrh	r1, [r7, #20]
 801485c:	f107 030c 	add.w	r3, r7, #12
 8014860:	f245 4203 	movw	r2, #21507	@ 0x5403
 8014864:	4618      	mov	r0, r3
 8014866:	f000 faa8 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 801486a:	4603      	mov	r3, r0
 801486c:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801486e:	88fa      	ldrh	r2, [r7, #6]
 8014870:	8ab9      	ldrh	r1, [r7, #20]
 8014872:	f107 030c 	add.w	r3, r7, #12
 8014876:	4618      	mov	r0, r3
 8014878:	f000 fac2 	bl	8014e00 <sensirion_i2c_add_uint16_t_to_buffer>
 801487c:	4603      	mov	r3, r0
 801487e:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, temperature_offset);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014880:	4b0d      	ldr	r3, [pc, #52]	@ (80148b8 <scd30_set_temperature_offset+0x78>)
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	8aba      	ldrh	r2, [r7, #20]
 8014886:	f107 010c 	add.w	r1, r7, #12
 801488a:	4618      	mov	r0, r3
 801488c:	f000 fae8 	bl	8014e60 <sensirion_i2c_write_data>
 8014890:	4603      	mov	r3, r0
 8014892:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014894:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d002      	beq.n	80148a2 <scd30_set_temperature_offset+0x62>
        return local_error;
 801489c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148a0:	e005      	b.n	80148ae <scd30_set_temperature_offset+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80148a2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80148a6:	f000 fbc7 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80148aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3718      	adds	r7, #24
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	20001b5c 	.word	0x20001b5c

080148bc <scd30_get_temperature_offset>:

int16_t scd30_get_temperature_offset(uint16_t* temperature_offset) {
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80148c4:	2300      	movs	r3, #0
 80148c6:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80148c8:	4b22      	ldr	r3, [pc, #136]	@ (8014954 <scd30_get_temperature_offset+0x98>)
 80148ca:	881b      	ldrh	r3, [r3, #0]
 80148cc:	813b      	strh	r3, [r7, #8]
 80148ce:	2300      	movs	r3, #0
 80148d0:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80148d2:	2300      	movs	r3, #0
 80148d4:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 80148d6:	89b9      	ldrh	r1, [r7, #12]
 80148d8:	f107 0308 	add.w	r3, r7, #8
 80148dc:	f245 4203 	movw	r2, #21507	@ 0x5403
 80148e0:	4618      	mov	r0, r3
 80148e2:	f000 fa6a 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 80148e6:	4603      	mov	r3, r0
 80148e8:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80148ea:	4b1b      	ldr	r3, [pc, #108]	@ (8014958 <scd30_get_temperature_offset+0x9c>)
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	89ba      	ldrh	r2, [r7, #12]
 80148f0:	f107 0108 	add.w	r1, r7, #8
 80148f4:	4618      	mov	r0, r3
 80148f6:	f000 fab3 	bl	8014e60 <sensirion_i2c_write_data>
 80148fa:	4603      	mov	r3, r0
 80148fc:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80148fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d002      	beq.n	801490c <scd30_get_temperature_offset+0x50>
        return local_error;
 8014906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801490a:	e01f      	b.n	801494c <scd30_get_temperature_offset+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801490c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014910:	f000 fb92 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014914:	4b10      	ldr	r3, [pc, #64]	@ (8014958 <scd30_get_temperature_offset+0x9c>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	f107 0108 	add.w	r1, r7, #8
 801491c:	2202      	movs	r2, #2
 801491e:	4618      	mov	r0, r3
 8014920:	f000 fab1 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 8014924:	4603      	mov	r3, r0
 8014926:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d002      	beq.n	8014936 <scd30_get_temperature_offset+0x7a>
        return local_error;
 8014930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014934:	e00a      	b.n	801494c <scd30_get_temperature_offset+0x90>
    }
    *temperature_offset = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014936:	f107 0308 	add.w	r3, r7, #8
 801493a:	4618      	mov	r0, r3
 801493c:	f000 f9ab 	bl	8014c96 <sensirion_common_bytes_to_uint16_t>
 8014940:	4603      	mov	r3, r0
 8014942:	461a      	mov	r2, r3
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801494c:	4618      	mov	r0, r3
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	080246a8 	.word	0x080246a8
 8014958:	20001b5c 	.word	0x20001b5c

0801495c <scd30_get_altitude_compensation>:

int16_t scd30_get_altitude_compensation(uint16_t* altitude) {
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014964:	2300      	movs	r3, #0
 8014966:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014968:	4b22      	ldr	r3, [pc, #136]	@ (80149f4 <scd30_get_altitude_compensation+0x98>)
 801496a:	881b      	ldrh	r3, [r3, #0]
 801496c:	813b      	strh	r3, [r7, #8]
 801496e:	2300      	movs	r3, #0
 8014970:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014972:	2300      	movs	r3, #0
 8014974:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014976:	89b9      	ldrh	r1, [r7, #12]
 8014978:	f107 0308 	add.w	r3, r7, #8
 801497c:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014980:	4618      	mov	r0, r3
 8014982:	f000 fa1a 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014986:	4603      	mov	r3, r0
 8014988:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801498a:	4b1b      	ldr	r3, [pc, #108]	@ (80149f8 <scd30_get_altitude_compensation+0x9c>)
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	89ba      	ldrh	r2, [r7, #12]
 8014990:	f107 0108 	add.w	r1, r7, #8
 8014994:	4618      	mov	r0, r3
 8014996:	f000 fa63 	bl	8014e60 <sensirion_i2c_write_data>
 801499a:	4603      	mov	r3, r0
 801499c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801499e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d002      	beq.n	80149ac <scd30_get_altitude_compensation+0x50>
        return local_error;
 80149a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149aa:	e01f      	b.n	80149ec <scd30_get_altitude_compensation+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80149ac:	f242 7010 	movw	r0, #10000	@ 0x2710
 80149b0:	f000 fb42 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80149b4:	4b10      	ldr	r3, [pc, #64]	@ (80149f8 <scd30_get_altitude_compensation+0x9c>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	f107 0108 	add.w	r1, r7, #8
 80149bc:	2202      	movs	r2, #2
 80149be:	4618      	mov	r0, r3
 80149c0:	f000 fa61 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 80149c4:	4603      	mov	r3, r0
 80149c6:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80149c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d002      	beq.n	80149d6 <scd30_get_altitude_compensation+0x7a>
        return local_error;
 80149d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149d4:	e00a      	b.n	80149ec <scd30_get_altitude_compensation+0x90>
    }
    *altitude = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80149d6:	f107 0308 	add.w	r3, r7, #8
 80149da:	4618      	mov	r0, r3
 80149dc:	f000 f95b 	bl	8014c96 <sensirion_common_bytes_to_uint16_t>
 80149e0:	4603      	mov	r3, r0
 80149e2:	461a      	mov	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	801a      	strh	r2, [r3, #0]
    return local_error;
 80149e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3710      	adds	r7, #16
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	080246a8 	.word	0x080246a8
 80149f8:	20001b5c 	.word	0x20001b5c

080149fc <scd30_set_altitude_compensation>:

int16_t scd30_set_altitude_compensation(uint16_t altitude) {
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	4603      	mov	r3, r0
 8014a04:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014a06:	2300      	movs	r3, #0
 8014a08:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	60fb      	str	r3, [r7, #12]
 8014a0e:	2300      	movs	r3, #0
 8014a10:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014a12:	2300      	movs	r3, #0
 8014a14:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014a16:	8ab9      	ldrh	r1, [r7, #20]
 8014a18:	f107 030c 	add.w	r3, r7, #12
 8014a1c:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014a20:	4618      	mov	r0, r3
 8014a22:	f000 f9ca 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014a26:	4603      	mov	r3, r0
 8014a28:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 8014a2a:	88fa      	ldrh	r2, [r7, #6]
 8014a2c:	8ab9      	ldrh	r1, [r7, #20]
 8014a2e:	f107 030c 	add.w	r3, r7, #12
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 f9e4 	bl	8014e00 <sensirion_i2c_add_uint16_t_to_buffer>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, altitude);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8014a74 <scd30_set_altitude_compensation+0x78>)
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	8aba      	ldrh	r2, [r7, #20]
 8014a42:	f107 010c 	add.w	r1, r7, #12
 8014a46:	4618      	mov	r0, r3
 8014a48:	f000 fa0a 	bl	8014e60 <sensirion_i2c_write_data>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014a50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d002      	beq.n	8014a5e <scd30_set_altitude_compensation+0x62>
        return local_error;
 8014a58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a5c:	e005      	b.n	8014a6a <scd30_set_altitude_compensation+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014a5e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014a62:	f000 fae9 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014a66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3718      	adds	r7, #24
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
 8014a72:	bf00      	nop
 8014a74:	20001b5c 	.word	0x20001b5c

08014a78 <scd30_read_firmware_version>:

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8014a82:	2300      	movs	r3, #0
 8014a84:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014a86:	4b21      	ldr	r3, [pc, #132]	@ (8014b0c <scd30_read_firmware_version+0x94>)
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	813b      	strh	r3, [r7, #8]
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014a90:	2300      	movs	r3, #0
 8014a92:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 8014a94:	89b9      	ldrh	r1, [r7, #12]
 8014a96:	f107 0308 	add.w	r3, r7, #8
 8014a9a:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f000 f98b 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014aa8:	4b19      	ldr	r3, [pc, #100]	@ (8014b10 <scd30_read_firmware_version+0x98>)
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	89ba      	ldrh	r2, [r7, #12]
 8014aae:	f107 0108 	add.w	r1, r7, #8
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 f9d4 	bl	8014e60 <sensirion_i2c_write_data>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d002      	beq.n	8014aca <scd30_read_firmware_version+0x52>
        return local_error;
 8014ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ac8:	e01c      	b.n	8014b04 <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014aca:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014ace:	f000 fab3 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8014b10 <scd30_read_firmware_version+0x98>)
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	f107 0108 	add.w	r1, r7, #8
 8014ada:	2202      	movs	r2, #2
 8014adc:	4618      	mov	r0, r3
 8014ade:	f000 f9d2 	bl	8014e86 <sensirion_i2c_read_data_inplace>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d002      	beq.n	8014af4 <scd30_read_firmware_version+0x7c>
        return local_error;
 8014aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014af2:	e007      	b.n	8014b04 <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8014af4:	7a3a      	ldrb	r2, [r7, #8]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8014afa:	7a7a      	ldrb	r2, [r7, #9]
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	701a      	strb	r2, [r3, #0]
    return local_error;
 8014b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	080246a8 	.word	0x080246a8
 8014b10:	20001b5c 	.word	0x20001b5c

08014b14 <scd30_soft_reset>:

int16_t scd30_soft_reset() {
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014b1e:	2300      	movs	r3, #0
 8014b20:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014b22:	2300      	movs	r3, #0
 8014b24:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd304);
 8014b26:	88b9      	ldrh	r1, [r7, #4]
 8014b28:	463b      	mov	r3, r7
 8014b2a:	f24d 3204 	movw	r2, #54020	@ 0xd304
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 f943 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014b34:	4603      	mov	r3, r0
 8014b36:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014b38:	4b0c      	ldr	r3, [pc, #48]	@ (8014b6c <scd30_soft_reset+0x58>)
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	88ba      	ldrh	r2, [r7, #4]
 8014b3e:	4639      	mov	r1, r7
 8014b40:	4618      	mov	r0, r3
 8014b42:	f000 f98d 	bl	8014e60 <sensirion_i2c_write_data>
 8014b46:	4603      	mov	r3, r0
 8014b48:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d002      	beq.n	8014b58 <scd30_soft_reset+0x44>
        return local_error;
 8014b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b56:	e004      	b.n	8014b62 <scd30_soft_reset+0x4e>
    }
    sensirion_i2c_hal_sleep_usec(2000 * 1000);
 8014b58:	4805      	ldr	r0, [pc, #20]	@ (8014b70 <scd30_soft_reset+0x5c>)
 8014b5a:	f000 fa6d 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	20001b5c 	.word	0x20001b5c
 8014b70:	001e8480 	.word	0x001e8480

08014b74 <scd4x_stop_periodic_measurement>:
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
    return NO_ERROR;
}

int16_t scd4x_stop_periodic_measurement() {
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8014b7e:	88f9      	ldrh	r1, [r7, #6]
 8014b80:	463b      	mov	r3, r7
 8014b82:	f643 7286 	movw	r2, #16262	@ 0x3f86
 8014b86:	4618      	mov	r0, r3
 8014b88:	f000 f917 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014b90:	88fa      	ldrh	r2, [r7, #6]
 8014b92:	463b      	mov	r3, r7
 8014b94:	4619      	mov	r1, r3
 8014b96:	2062      	movs	r0, #98	@ 0x62
 8014b98:	f000 f962 	bl	8014e60 <sensirion_i2c_write_data>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014ba0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d002      	beq.n	8014bae <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8014ba8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bac:	e003      	b.n	8014bb6 <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8014bae:	4804      	ldr	r0, [pc, #16]	@ (8014bc0 <scd4x_stop_periodic_measurement+0x4c>)
 8014bb0:	f000 fa42 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014bb4:	2300      	movs	r3, #0
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3708      	adds	r7, #8
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	0007a120 	.word	0x0007a120

08014bc4 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8014bce:	88f9      	ldrh	r1, [r7, #6]
 8014bd0:	463b      	mov	r3, r7
 8014bd2:	f243 6246 	movw	r2, #13894	@ 0x3646
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f000 f8ef 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014be0:	88fa      	ldrh	r2, [r7, #6]
 8014be2:	463b      	mov	r3, r7
 8014be4:	4619      	mov	r1, r3
 8014be6:	2062      	movs	r0, #98	@ 0x62
 8014be8:	f000 f93a 	bl	8014e60 <sensirion_i2c_write_data>
 8014bec:	4603      	mov	r3, r0
 8014bee:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014bf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d002      	beq.n	8014bfe <scd4x_reinit+0x3a>
        return error;
 8014bf8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bfc:	e004      	b.n	8014c08 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8014bfe:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c02:	f000 fa19 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c06:	2300      	movs	r3, #0
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c16:	2300      	movs	r3, #0
 8014c18:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8014c1a:	88f9      	ldrh	r1, [r7, #6]
 8014c1c:	463b      	mov	r3, r7
 8014c1e:	f243 62e0 	movw	r2, #14048	@ 0x36e0
 8014c22:	4618      	mov	r0, r3
 8014c24:	f000 f8c9 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c2c:	88fa      	ldrh	r2, [r7, #6]
 8014c2e:	463b      	mov	r3, r7
 8014c30:	4619      	mov	r1, r3
 8014c32:	2062      	movs	r0, #98	@ 0x62
 8014c34:	f000 f914 	bl	8014e60 <sensirion_i2c_write_data>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d002      	beq.n	8014c4a <scd4x_power_down+0x3a>
        return error;
 8014c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c48:	e004      	b.n	8014c54 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8014c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014c4e:	f000 f9f3 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c52:	2300      	movs	r3, #0
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8014c66:	88f9      	ldrh	r1, [r7, #6]
 8014c68:	1d3b      	adds	r3, r7, #4
 8014c6a:	f243 62f6 	movw	r2, #14070	@ 0x36f6
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f000 f8a3 	bl	8014dba <sensirion_i2c_add_command_to_buffer>
 8014c74:	4603      	mov	r3, r0
 8014c76:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c78:	88fa      	ldrh	r2, [r7, #6]
 8014c7a:	1d3b      	adds	r3, r7, #4
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	2062      	movs	r0, #98	@ 0x62
 8014c80:	f000 f8ee 	bl	8014e60 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8014c84:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c88:	f000 f9d6 	bl	8015038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c8c:	2300      	movs	r3, #0
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8014c96:	b480      	push	{r7}
 8014c98:	b083      	sub	sp, #12
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	021b      	lsls	r3, r3, #8
 8014ca4:	b21a      	sxth	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	3301      	adds	r3, #1
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	b21b      	sxth	r3, r3
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	b21b      	sxth	r3, r3
 8014cb2:	b29b      	uxth	r3, r3
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	370c      	adds	r7, #12
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	061a      	lsls	r2, r3, #24
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	041b      	lsls	r3, r3, #16
 8014cd6:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	3302      	adds	r3, #2
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014ce0:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	3203      	adds	r2, #3
 8014ce6:	7812      	ldrb	r2, [r2, #0]
 8014ce8:	4313      	orrs	r3, r2
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	370c      	adds	r7, #12
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr

08014cf6 <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	b084      	sub	sp, #16
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7ff ffde 	bl	8014cc0 <sensirion_common_bytes_to_uint32_t>
 8014d04:	4603      	mov	r3, r0
 8014d06:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	ee07 3a90 	vmov	s15, r3
}
 8014d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8014d12:	3710      	adds	r7, #16
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8014d18:	b480      	push	{r7}
 8014d1a:	b085      	sub	sp, #20
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	460b      	mov	r3, r1
 8014d22:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8014d24:	23ff      	movs	r3, #255	@ 0xff
 8014d26:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d28:	2300      	movs	r3, #0
 8014d2a:	81fb      	strh	r3, [r7, #14]
 8014d2c:	e021      	b.n	8014d72 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8014d2e:	89fb      	ldrh	r3, [r7, #14]
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	4413      	add	r3, r2
 8014d34:	781a      	ldrb	r2, [r3, #0]
 8014d36:	7b7b      	ldrb	r3, [r7, #13]
 8014d38:	4053      	eors	r3, r2
 8014d3a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014d3c:	2308      	movs	r3, #8
 8014d3e:	733b      	strb	r3, [r7, #12]
 8014d40:	e011      	b.n	8014d66 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8014d42:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	da07      	bge.n	8014d5a <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8014d4a:	7b7b      	ldrb	r3, [r7, #13]
 8014d4c:	005b      	lsls	r3, r3, #1
 8014d4e:	b25b      	sxtb	r3, r3
 8014d50:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8014d54:	b25b      	sxtb	r3, r3
 8014d56:	737b      	strb	r3, [r7, #13]
 8014d58:	e002      	b.n	8014d60 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8014d5a:	7b7b      	ldrb	r3, [r7, #13]
 8014d5c:	005b      	lsls	r3, r3, #1
 8014d5e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014d60:	7b3b      	ldrb	r3, [r7, #12]
 8014d62:	3b01      	subs	r3, #1
 8014d64:	733b      	strb	r3, [r7, #12]
 8014d66:	7b3b      	ldrb	r3, [r7, #12]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d1ea      	bne.n	8014d42 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d6c:	89fb      	ldrh	r3, [r7, #14]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	81fb      	strh	r3, [r7, #14]
 8014d72:	89fa      	ldrh	r2, [r7, #14]
 8014d74:	887b      	ldrh	r3, [r7, #2]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d3d9      	bcc.n	8014d2e <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8014d7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3714      	adds	r7, #20
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr

08014d88 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	460b      	mov	r3, r1
 8014d92:	807b      	strh	r3, [r7, #2]
 8014d94:	4613      	mov	r3, r2
 8014d96:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8014d98:	887b      	ldrh	r3, [r7, #2]
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f7ff ffbb 	bl	8014d18 <sensirion_i2c_generate_crc>
 8014da2:	4603      	mov	r3, r0
 8014da4:	461a      	mov	r2, r3
 8014da6:	787b      	ldrb	r3, [r7, #1]
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d001      	beq.n	8014db0 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8014dac:	2301      	movs	r3, #1
 8014dae:	e000      	b.n	8014db2 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8014db0:	2300      	movs	r3, #0
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3708      	adds	r7, #8
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}

08014dba <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8014dba:	b480      	push	{r7}
 8014dbc:	b083      	sub	sp, #12
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	807b      	strh	r3, [r7, #2]
 8014dc6:	4613      	mov	r3, r2
 8014dc8:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8014dca:	883b      	ldrh	r3, [r7, #0]
 8014dcc:	0a1b      	lsrs	r3, r3, #8
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	887b      	ldrh	r3, [r7, #2]
 8014dd2:	1c59      	adds	r1, r3, #1
 8014dd4:	8079      	strh	r1, [r7, #2]
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	440b      	add	r3, r1
 8014ddc:	b2d2      	uxtb	r2, r2
 8014dde:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8014de0:	887b      	ldrh	r3, [r7, #2]
 8014de2:	1c5a      	adds	r2, r3, #1
 8014de4:	807a      	strh	r2, [r7, #2]
 8014de6:	461a      	mov	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	4413      	add	r3, r2
 8014dec:	883a      	ldrh	r2, [r7, #0]
 8014dee:	b2d2      	uxtb	r2, r2
 8014df0:	701a      	strb	r2, [r3, #0]
    return offset;
 8014df2:	887b      	ldrh	r3, [r7, #2]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8014e00:	b590      	push	{r4, r7, lr}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	460b      	mov	r3, r1
 8014e0a:	807b      	strh	r3, [r7, #2]
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8014e10:	883b      	ldrh	r3, [r7, #0]
 8014e12:	0a1b      	lsrs	r3, r3, #8
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	887b      	ldrh	r3, [r7, #2]
 8014e18:	1c59      	adds	r1, r3, #1
 8014e1a:	8079      	strh	r1, [r7, #2]
 8014e1c:	4619      	mov	r1, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	440b      	add	r3, r1
 8014e22:	b2d2      	uxtb	r2, r2
 8014e24:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8014e26:	887b      	ldrh	r3, [r7, #2]
 8014e28:	1c5a      	adds	r2, r3, #1
 8014e2a:	807a      	strh	r2, [r7, #2]
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	4413      	add	r3, r2
 8014e32:	883a      	ldrh	r2, [r7, #0]
 8014e34:	b2d2      	uxtb	r2, r2
 8014e36:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8014e38:	887b      	ldrh	r3, [r7, #2]
 8014e3a:	3b02      	subs	r3, #2
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8014e40:	887b      	ldrh	r3, [r7, #2]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	18d4      	adds	r4, r2, r3
 8014e46:	2102      	movs	r1, #2
 8014e48:	f7ff ff66 	bl	8014d18 <sensirion_i2c_generate_crc>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	7023      	strb	r3, [r4, #0]
    offset++;
 8014e50:	887b      	ldrh	r3, [r7, #2]
 8014e52:	3301      	adds	r3, #1
 8014e54:	807b      	strh	r3, [r7, #2]

    return offset;
 8014e56:	887b      	ldrh	r3, [r7, #2]
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	370c      	adds	r7, #12
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd90      	pop	{r4, r7, pc}

08014e60 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	4603      	mov	r3, r0
 8014e68:	6039      	str	r1, [r7, #0]
 8014e6a:	71fb      	strb	r3, [r7, #7]
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8014e70:	88ba      	ldrh	r2, [r7, #4]
 8014e72:	79fb      	ldrb	r3, [r7, #7]
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	4618      	mov	r0, r3
 8014e78:	f000 f8c2 	bl	8015000 <sensirion_i2c_hal_write>
 8014e7c:	4603      	mov	r3, r0
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b084      	sub	sp, #16
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	6039      	str	r1, [r7, #0]
 8014e90:	71fb      	strb	r3, [r7, #7]
 8014e92:	4613      	mov	r3, r2
 8014e94:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8014e96:	88bb      	ldrh	r3, [r7, #4]
 8014e98:	085b      	lsrs	r3, r3, #1
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	0052      	lsls	r2, r2, #1
 8014ea0:	4413      	add	r3, r2
 8014ea2:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8014ea4:	88bb      	ldrh	r3, [r7, #4]
 8014ea6:	f003 0301 	and.w	r3, r3, #1
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d001      	beq.n	8014eb4 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8014eb0:	2304      	movs	r3, #4
 8014eb2:	e047      	b.n	8014f44 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8014eb4:	897a      	ldrh	r2, [r7, #10]
 8014eb6:	79fb      	ldrb	r3, [r7, #7]
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f000 f884 	bl	8014fc8 <sensirion_i2c_hal_read>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	813b      	strh	r3, [r7, #8]
    if (error) {
 8014ec4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d002      	beq.n	8014ed2 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8014ecc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ed0:	e038      	b.n	8014f44 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	81fb      	strh	r3, [r7, #14]
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	81bb      	strh	r3, [r7, #12]
 8014eda:	e02e      	b.n	8014f3a <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014edc:	89fb      	ldrh	r3, [r7, #14]
 8014ede:	683a      	ldr	r2, [r7, #0]
 8014ee0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8014ee2:	89fb      	ldrh	r3, [r7, #14]
 8014ee4:	3302      	adds	r3, #2
 8014ee6:	683a      	ldr	r2, [r7, #0]
 8014ee8:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	461a      	mov	r2, r3
 8014eee:	2102      	movs	r1, #2
 8014ef0:	f7ff ff4a 	bl	8014d88 <sensirion_i2c_check_crc>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	813b      	strh	r3, [r7, #8]
        if (error) {
 8014ef8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d002      	beq.n	8014f06 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8014f00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f04:	e01e      	b.n	8014f44 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8014f06:	89fb      	ldrh	r3, [r7, #14]
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	441a      	add	r2, r3
 8014f0c:	89bb      	ldrh	r3, [r7, #12]
 8014f0e:	1c59      	adds	r1, r3, #1
 8014f10:	81b9      	strh	r1, [r7, #12]
 8014f12:	4619      	mov	r1, r3
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	440b      	add	r3, r1
 8014f18:	7812      	ldrb	r2, [r2, #0]
 8014f1a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8014f1c:	89fb      	ldrh	r3, [r7, #14]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	683a      	ldr	r2, [r7, #0]
 8014f22:	441a      	add	r2, r3
 8014f24:	89bb      	ldrh	r3, [r7, #12]
 8014f26:	1c59      	adds	r1, r3, #1
 8014f28:	81b9      	strh	r1, [r7, #12]
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	440b      	add	r3, r1
 8014f30:	7812      	ldrb	r2, [r2, #0]
 8014f32:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014f34:	89fb      	ldrh	r3, [r7, #14]
 8014f36:	3303      	adds	r3, #3
 8014f38:	81fb      	strh	r3, [r7, #14]
 8014f3a:	89fa      	ldrh	r2, [r7, #14]
 8014f3c:	897b      	ldrh	r3, [r7, #10]
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d3cc      	bcc.n	8014edc <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8014f42:	2300      	movs	r3, #0
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8014f50:	4814      	ldr	r0, [pc, #80]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f52:	f7f1 fa2d 	bl	80063b0 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8014f56:	4b13      	ldr	r3, [pc, #76]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f58:	4a13      	ldr	r2, [pc, #76]	@ (8014fa8 <sensirion_i2c_hal_init+0x5c>)
 8014f5a:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8014f5c:	4b11      	ldr	r3, [pc, #68]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f5e:	4a13      	ldr	r2, [pc, #76]	@ (8014fac <sensirion_i2c_hal_init+0x60>)
 8014f60:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014f62:	4b10      	ldr	r3, [pc, #64]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f64:	2200      	movs	r2, #0
 8014f66:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8014f68:	4b0e      	ldr	r3, [pc, #56]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014f74:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014f76:	4b0b      	ldr	r3, [pc, #44]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f78:	2200      	movs	r2, #0
 8014f7a:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8014f7c:	4b09      	ldr	r3, [pc, #36]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f7e:	2200      	movs	r2, #0
 8014f80:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014f82:	4b08      	ldr	r3, [pc, #32]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f84:	2200      	movs	r2, #0
 8014f86:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014f88:	4b06      	ldr	r3, [pc, #24]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014f8e:	4805      	ldr	r0, [pc, #20]	@ (8014fa4 <sensirion_i2c_hal_init+0x58>)
 8014f90:	f7f1 f8ca 	bl	8006128 <HAL_I2C_Init>
 8014f94:	4603      	mov	r3, r0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d001      	beq.n	8014f9e <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8014f9a:	f7ee fb65 	bl	8003668 <Error_Handler>
	  }
}
 8014f9e:	bf00      	nop
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20001838 	.word	0x20001838
 8014fa8:	40005400 	.word	0x40005400
 8014fac:	000186a0 	.word	0x000186a0

08014fb0 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8014fb4:	4803      	ldr	r0, [pc, #12]	@ (8014fc4 <sensirion_i2c_hal_free+0x14>)
 8014fb6:	f7f1 f9fb 	bl	80063b0 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8014fba:	4802      	ldr	r0, [pc, #8]	@ (8014fc4 <sensirion_i2c_hal_free+0x14>)
 8014fbc:	f7ee fc2e 	bl	800381c <HAL_I2C_MspDeInit>
}
 8014fc0:	bf00      	nop
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	20001838 	.word	0x20001838

08014fc8 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af02      	add	r7, sp, #8
 8014fce:	4603      	mov	r3, r0
 8014fd0:	6039      	str	r1, [r7, #0]
 8014fd2:	71fb      	strb	r3, [r7, #7]
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8014fd8:	79fb      	ldrb	r3, [r7, #7]
 8014fda:	b29b      	uxth	r3, r3
 8014fdc:	005b      	lsls	r3, r3, #1
 8014fde:	b299      	uxth	r1, r3
 8014fe0:	88bb      	ldrh	r3, [r7, #4]
 8014fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8014fe6:	9200      	str	r2, [sp, #0]
 8014fe8:	683a      	ldr	r2, [r7, #0]
 8014fea:	4804      	ldr	r0, [pc, #16]	@ (8014ffc <sensirion_i2c_hal_read+0x34>)
 8014fec:	f7f1 fb0e 	bl	800660c <HAL_I2C_Master_Receive>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	20001838 	.word	0x20001838

08015000 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af02      	add	r7, sp, #8
 8015006:	4603      	mov	r3, r0
 8015008:	6039      	str	r1, [r7, #0]
 801500a:	71fb      	strb	r3, [r7, #7]
 801500c:	4613      	mov	r3, r2
 801500e:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 8015010:	79fb      	ldrb	r3, [r7, #7]
 8015012:	b29b      	uxth	r3, r3
 8015014:	005b      	lsls	r3, r3, #1
 8015016:	b299      	uxth	r1, r3
 8015018:	88bb      	ldrh	r3, [r7, #4]
 801501a:	f04f 32ff 	mov.w	r2, #4294967295
 801501e:	9200      	str	r2, [sp, #0]
 8015020:	683a      	ldr	r2, [r7, #0]
 8015022:	4804      	ldr	r0, [pc, #16]	@ (8015034 <sensirion_i2c_hal_write+0x34>)
 8015024:	f7f1 f9f4 	bl	8006410 <HAL_I2C_Master_Transmit>
 8015028:	4603      	mov	r3, r0
 801502a:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 801502c:	4618      	mov	r0, r3
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	20001838 	.word	0x20001838

08015038 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	4a0d      	ldr	r2, [pc, #52]	@ (8015078 <sensirion_i2c_hal_sleep_usec+0x40>)
 8015044:	fba2 2303 	umull	r2, r3, r2, r3
 8015048:	099b      	lsrs	r3, r3, #6
 801504a:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 801504c:	687a      	ldr	r2, [r7, #4]
 801504e:	4b0a      	ldr	r3, [pc, #40]	@ (8015078 <sensirion_i2c_hal_sleep_usec+0x40>)
 8015050:	fba3 1302 	umull	r1, r3, r3, r2
 8015054:	099b      	lsrs	r3, r3, #6
 8015056:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801505a:	fb01 f303 	mul.w	r3, r1, r3
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	2b00      	cmp	r3, #0
 8015062:	d002      	beq.n	801506a <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	3301      	adds	r3, #1
 8015068:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f7ef f852 	bl	8004114 <HAL_Delay>
}
 8015070:	bf00      	nop
 8015072:	3710      	adds	r7, #16
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	10624dd3 	.word	0x10624dd3

0801507c <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 801507c:	b480      	push	{r7}
 801507e:	b083      	sub	sp, #12
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	061a      	lsls	r2, r3, #24
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	3301      	adds	r3, #1
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	041b      	lsls	r3, r3, #16
 8015092:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	3302      	adds	r3, #2
 8015098:	781b      	ldrb	r3, [r3, #0]
 801509a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801509c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	3203      	adds	r2, #3
 80150a2:	7812      	ldrb	r2, [r2, #0]
 80150a4:	4313      	orrs	r3, r2
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	370c      	adds	r7, #12
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr

080150b2 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b084      	sub	sp, #16
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7ff ffde 	bl	801507c <sensirion_bytes_to_uint32_t>
 80150c0:	4603      	mov	r3, r0
 80150c2:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	ee07 3a90 	vmov	s15, r3
}
 80150ca:	eeb0 0a67 	vmov.f32	s0, s15
 80150ce:	3710      	adds	r7, #16
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	4603      	mov	r3, r0
 80150dc:	603a      	str	r2, [r7, #0]
 80150de:	71fb      	strb	r3, [r7, #7]
 80150e0:	460b      	mov	r3, r1
 80150e2:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 80150e4:	79fa      	ldrb	r2, [r7, #7]
 80150e6:	79bb      	ldrb	r3, [r7, #6]
 80150e8:	4413      	add	r3, r2
 80150ea:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 80150ec:	e006      	b.n	80150fc <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	1c5a      	adds	r2, r3, #1
 80150f2:	603a      	str	r2, [r7, #0]
 80150f4:	781a      	ldrb	r2, [r3, #0]
 80150f6:	79fb      	ldrb	r3, [r7, #7]
 80150f8:	4413      	add	r3, r2
 80150fa:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 80150fc:	79bb      	ldrb	r3, [r7, #6]
 80150fe:	1e5a      	subs	r2, r3, #1
 8015100:	71ba      	strb	r2, [r7, #6]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d1f3      	bne.n	80150ee <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	43db      	mvns	r3, r3
 801510a:	b2db      	uxtb	r3, r3
}
 801510c:	4618      	mov	r0, r3
 801510e:	370c      	adds	r7, #12
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr

08015118 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8015118:	b480      	push	{r7}
 801511a:	b087      	sub	sp, #28
 801511c:	af00      	add	r7, sp, #0
 801511e:	4603      	mov	r3, r0
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	607a      	str	r2, [r7, #4]
 8015124:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 8015126:	2300      	movs	r3, #0
 8015128:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 801512a:	e026      	b.n	801517a <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	1c5a      	adds	r2, r3, #1
 8015130:	60ba      	str	r2, [r7, #8]
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	757b      	strb	r3, [r7, #21]
        switch (c) {
 8015136:	7d7b      	ldrb	r3, [r7, #21]
 8015138:	2b7e      	cmp	r3, #126	@ 0x7e
 801513a:	dc16      	bgt.n	801516a <sensirion_shdlc_stuff_data+0x52>
 801513c:	2b7d      	cmp	r3, #125	@ 0x7d
 801513e:	da03      	bge.n	8015148 <sensirion_shdlc_stuff_data+0x30>
 8015140:	2b11      	cmp	r3, #17
 8015142:	d001      	beq.n	8015148 <sensirion_shdlc_stuff_data+0x30>
 8015144:	2b13      	cmp	r3, #19
 8015146:	d110      	bne.n	801516a <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	1c5a      	adds	r2, r3, #1
 801514c:	607a      	str	r2, [r7, #4]
 801514e:	227d      	movs	r2, #125	@ 0x7d
 8015150:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	1c5a      	adds	r2, r3, #1
 8015156:	607a      	str	r2, [r7, #4]
 8015158:	7d7a      	ldrb	r2, [r7, #21]
 801515a:	f082 0220 	eor.w	r2, r2, #32
 801515e:	b2d2      	uxtb	r2, r2
 8015160:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8015162:	8afb      	ldrh	r3, [r7, #22]
 8015164:	3302      	adds	r3, #2
 8015166:	82fb      	strh	r3, [r7, #22]
                break;
 8015168:	e007      	b.n	801517a <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	1c5a      	adds	r2, r3, #1
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	7d7a      	ldrb	r2, [r7, #21]
 8015172:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8015174:	8afb      	ldrh	r3, [r7, #22]
 8015176:	3301      	adds	r3, #1
 8015178:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 801517a:	7bfb      	ldrb	r3, [r7, #15]
 801517c:	1e5a      	subs	r2, r3, #1
 801517e:	73fa      	strb	r2, [r7, #15]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d1d3      	bne.n	801512c <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8015184:	8afb      	ldrh	r3, [r7, #22]
}
 8015186:	4618      	mov	r0, r3
 8015188:	371c      	adds	r7, #28
 801518a:	46bd      	mov	sp, r7
 801518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015190:	4770      	bx	lr

08015192 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8015192:	b480      	push	{r7}
 8015194:	b083      	sub	sp, #12
 8015196:	af00      	add	r7, sp, #0
 8015198:	4603      	mov	r3, r0
 801519a:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 801519c:	79fb      	ldrb	r3, [r7, #7]
 801519e:	2b7d      	cmp	r3, #125	@ 0x7d
 80151a0:	bf0c      	ite	eq
 80151a2:	2301      	moveq	r3, #1
 80151a4:	2300      	movne	r3, #0
 80151a6:	b2db      	uxtb	r3, r3
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	370c      	adds	r7, #12
 80151ac:	46bd      	mov	sp, r7
 80151ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b2:	4770      	bx	lr

080151b4 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	4603      	mov	r3, r0
 80151bc:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 80151be:	79fb      	ldrb	r3, [r7, #7]
 80151c0:	2b5e      	cmp	r3, #94	@ 0x5e
 80151c2:	d010      	beq.n	80151e6 <sensirion_shdlc_unstuff_byte+0x32>
 80151c4:	2b5e      	cmp	r3, #94	@ 0x5e
 80151c6:	dc10      	bgt.n	80151ea <sensirion_shdlc_unstuff_byte+0x36>
 80151c8:	2b5d      	cmp	r3, #93	@ 0x5d
 80151ca:	d00a      	beq.n	80151e2 <sensirion_shdlc_unstuff_byte+0x2e>
 80151cc:	2b5d      	cmp	r3, #93	@ 0x5d
 80151ce:	dc0c      	bgt.n	80151ea <sensirion_shdlc_unstuff_byte+0x36>
 80151d0:	2b31      	cmp	r3, #49	@ 0x31
 80151d2:	d002      	beq.n	80151da <sensirion_shdlc_unstuff_byte+0x26>
 80151d4:	2b33      	cmp	r3, #51	@ 0x33
 80151d6:	d002      	beq.n	80151de <sensirion_shdlc_unstuff_byte+0x2a>
 80151d8:	e007      	b.n	80151ea <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 80151da:	2311      	movs	r3, #17
 80151dc:	e006      	b.n	80151ec <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 80151de:	2313      	movs	r3, #19
 80151e0:	e004      	b.n	80151ec <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 80151e2:	237d      	movs	r3, #125	@ 0x7d
 80151e4:	e002      	b.n	80151ec <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 80151e6:	237e      	movs	r3, #126	@ 0x7e
 80151e8:	e000      	b.n	80151ec <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 80151ea:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80151ec:	4618      	mov	r0, r3
 80151ee:	370c      	adds	r7, #12
 80151f0:	46bd      	mov	sp, r7
 80151f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f6:	4770      	bx	lr

080151f8 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	603b      	str	r3, [r7, #0]
 8015200:	4603      	mov	r3, r0
 8015202:	71fb      	strb	r3, [r7, #7]
 8015204:	460b      	mov	r3, r1
 8015206:	71bb      	strb	r3, [r7, #6]
 8015208:	4613      	mov	r3, r2
 801520a:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 801520c:	797a      	ldrb	r2, [r7, #5]
 801520e:	79b9      	ldrb	r1, [r7, #6]
 8015210:	79f8      	ldrb	r0, [r7, #7]
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	f000 f818 	bl	8015248 <sensirion_shdlc_tx>
 8015218:	4603      	mov	r3, r0
 801521a:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 801521c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d002      	beq.n	801522a <sensirion_shdlc_xcv+0x32>
        return ret;
 8015224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015228:	e00a      	b.n	8015240 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 801522a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 801522e:	f000 fb07 	bl	8015840 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 8015232:	7e3b      	ldrb	r3, [r7, #24]
 8015234:	6a3a      	ldr	r2, [r7, #32]
 8015236:	69f9      	ldr	r1, [r7, #28]
 8015238:	4618      	mov	r0, r3
 801523a:	f000 f8d7 	bl	80153ec <sensirion_shdlc_rx>
 801523e:	4603      	mov	r3, r0
}
 8015240:	4618      	mov	r0, r3
 8015242:	3710      	adds	r7, #16
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8015248:	b590      	push	{r4, r7, lr}
 801524a:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 801524e:	af00      	add	r7, sp, #0
 8015250:	4604      	mov	r4, r0
 8015252:	4608      	mov	r0, r1
 8015254:	4611      	mov	r1, r2
 8015256:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 801525a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 801525e:	6013      	str	r3, [r2, #0]
 8015260:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015264:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8015268:	4622      	mov	r2, r4
 801526a:	701a      	strb	r2, [r3, #0]
 801526c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015270:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8015274:	4602      	mov	r2, r0
 8015276:	701a      	strb	r2, [r3, #0]
 8015278:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801527c:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8015280:	460a      	mov	r2, r1
 8015282:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8015284:	2300      	movs	r3, #0
 8015286:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 801528a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801528e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8015292:	781a      	ldrb	r2, [r3, #0]
 8015294:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015298:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 801529c:	781b      	ldrb	r3, [r3, #0]
 801529e:	4413      	add	r3, r2
 80152a0:	b2d8      	uxtb	r0, r3
 80152a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152a6:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80152aa:	7819      	ldrb	r1, [r3, #0]
 80152ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152b0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	f7ff ff0d 	bl	80150d4 <sensirion_shdlc_crc>
 80152ba:	4603      	mov	r3, r0
 80152bc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 80152c0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152c4:	1c5a      	adds	r2, r3, #1
 80152c6:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 80152ca:	461a      	mov	r2, r3
 80152cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152d0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80152d4:	217e      	movs	r1, #126	@ 0x7e
 80152d6:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 80152d8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152dc:	f107 0208 	add.w	r2, r7, #8
 80152e0:	441a      	add	r2, r3
 80152e2:	1dfb      	adds	r3, r7, #7
 80152e4:	4619      	mov	r1, r3
 80152e6:	2001      	movs	r0, #1
 80152e8:	f7ff ff16 	bl	8015118 <sensirion_shdlc_stuff_data>
 80152ec:	4603      	mov	r3, r0
 80152ee:	461a      	mov	r2, r3
 80152f0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152f4:	4413      	add	r3, r2
 80152f6:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 80152fa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152fe:	f107 0208 	add.w	r2, r7, #8
 8015302:	441a      	add	r2, r3
 8015304:	1dbb      	adds	r3, r7, #6
 8015306:	4619      	mov	r1, r3
 8015308:	2001      	movs	r0, #1
 801530a:	f7ff ff05 	bl	8015118 <sensirion_shdlc_stuff_data>
 801530e:	4603      	mov	r3, r0
 8015310:	461a      	mov	r2, r3
 8015312:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015316:	4413      	add	r3, r2
 8015318:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 801531c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015320:	f107 0208 	add.w	r2, r7, #8
 8015324:	441a      	add	r2, r3
 8015326:	1d7b      	adds	r3, r7, #5
 8015328:	4619      	mov	r1, r3
 801532a:	2001      	movs	r0, #1
 801532c:	f7ff fef4 	bl	8015118 <sensirion_shdlc_stuff_data>
 8015330:	4603      	mov	r3, r0
 8015332:	461a      	mov	r2, r3
 8015334:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015338:	4413      	add	r3, r2
 801533a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 801533e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015342:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8015346:	7818      	ldrb	r0, [r3, #0]
 8015348:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801534c:	f107 0208 	add.w	r2, r7, #8
 8015350:	441a      	add	r2, r3
 8015352:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015356:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801535a:	6819      	ldr	r1, [r3, #0]
 801535c:	f7ff fedc 	bl	8015118 <sensirion_shdlc_stuff_data>
 8015360:	4603      	mov	r3, r0
 8015362:	461a      	mov	r2, r3
 8015364:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015368:	4413      	add	r3, r2
 801536a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 801536e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015372:	f107 0208 	add.w	r2, r7, #8
 8015376:	441a      	add	r2, r3
 8015378:	f207 2313 	addw	r3, r7, #531	@ 0x213
 801537c:	4619      	mov	r1, r3
 801537e:	2001      	movs	r0, #1
 8015380:	f7ff feca 	bl	8015118 <sensirion_shdlc_stuff_data>
 8015384:	4603      	mov	r3, r0
 8015386:	461a      	mov	r2, r3
 8015388:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801538c:	4413      	add	r3, r2
 801538e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8015392:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015396:	1c5a      	adds	r2, r3, #1
 8015398:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 801539c:	461a      	mov	r2, r3
 801539e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153a2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80153a6:	217e      	movs	r1, #126	@ 0x7e
 80153a8:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 80153aa:	f107 0208 	add.w	r2, r7, #8
 80153ae:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153b2:	4611      	mov	r1, r2
 80153b4:	4618      	mov	r0, r3
 80153b6:	f000 f9db 	bl	8015770 <sensirion_uart_tx>
 80153ba:	4603      	mov	r3, r0
 80153bc:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 80153c0:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	da02      	bge.n	80153ce <sensirion_shdlc_tx+0x186>
        return ret;
 80153c8:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80153cc:	e009      	b.n	80153e2 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 80153ce:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 80153d2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d002      	beq.n	80153e0 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 80153da:	f06f 0305 	mvn.w	r3, #5
 80153de:	e000      	b.n	80153e2 <sensirion_shdlc_tx+0x19a>
    return 0;
 80153e0:	2300      	movs	r3, #0
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd90      	pop	{r4, r7, pc}

080153ec <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 80153ec:	b590      	push	{r4, r7, lr}
 80153ee:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80153f8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80153fc:	6019      	str	r1, [r3, #0]
 80153fe:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015402:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015406:	601a      	str	r2, [r3, #0]
 8015408:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801540c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015410:	4602      	mov	r2, r0
 8015412:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8015414:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015418:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8015422:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015426:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	3306      	adds	r3, #6
 801542e:	b29b      	uxth	r3, r3
 8015430:	005b      	lsls	r3, r3, #1
 8015432:	b29b      	uxth	r3, r3
 8015434:	f107 0210 	add.w	r2, r7, #16
 8015438:	4611      	mov	r1, r2
 801543a:	4618      	mov	r0, r3
 801543c:	f000 f9d2 	bl	80157e4 <sensirion_uart_rx>
 8015440:	4603      	mov	r3, r0
 8015442:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8015446:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801544a:	2b00      	cmp	r3, #0
 801544c:	dd03      	ble.n	8015456 <sensirion_shdlc_rx+0x6a>
 801544e:	4ba0      	ldr	r3, [pc, #640]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	2b7e      	cmp	r3, #126	@ 0x7e
 8015454:	d002      	beq.n	801545c <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8015456:	f06f 0301 	mvn.w	r3, #1
 801545a:	e133      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 801545c:	2300      	movs	r3, #0
 801545e:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015462:	2301      	movs	r3, #1
 8015464:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015468:	2300      	movs	r3, #0
 801546a:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 801546e:	e03a      	b.n	80154e6 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8015470:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015474:	2b00      	cmp	r3, #0
 8015476:	d015      	beq.n	80154a4 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8015478:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801547c:	4a94      	ldr	r2, [pc, #592]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 801547e:	5cd2      	ldrb	r2, [r2, r3]
 8015480:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015484:	1c59      	adds	r1, r3, #1
 8015486:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 801548a:	4619      	mov	r1, r3
 801548c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8015490:	185c      	adds	r4, r3, r1
 8015492:	4610      	mov	r0, r2
 8015494:	f7ff fe8e 	bl	80151b4 <sensirion_shdlc_unstuff_byte>
 8015498:	4603      	mov	r3, r0
 801549a:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 801549c:	2300      	movs	r3, #0
 801549e:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154a2:	e01b      	b.n	80154dc <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80154a4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154a8:	4a89      	ldr	r2, [pc, #548]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 80154aa:	5cd3      	ldrb	r3, [r2, r3]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff fe70 	bl	8015192 <sensirion_shdlc_check_unstuff>
 80154b2:	4603      	mov	r3, r0
 80154b4:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 80154b8:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d10d      	bne.n	80154dc <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 80154c0:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80154c4:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154c8:	1c59      	adds	r1, r3, #1
 80154ca:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154ce:	4619      	mov	r1, r3
 80154d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80154d4:	440b      	add	r3, r1
 80154d6:	497e      	ldr	r1, [pc, #504]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 80154d8:	5c8a      	ldrb	r2, [r1, r2]
 80154da:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80154dc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154e0:	3301      	adds	r3, #1
 80154e2:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80154e6:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154ea:	2b03      	cmp	r3, #3
 80154ec:	d806      	bhi.n	80154fc <sensirion_shdlc_rx+0x110>
 80154ee:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80154f2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80154f6:	3b02      	subs	r3, #2
 80154f8:	429a      	cmp	r2, r3
 80154fa:	dbb9      	blt.n	8015470 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 80154fc:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015500:	2b04      	cmp	r3, #4
 8015502:	d103      	bne.n	801550c <sensirion_shdlc_rx+0x120>
 8015504:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015508:	2b00      	cmp	r3, #0
 801550a:	d002      	beq.n	8015512 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801550c:	f06f 0304 	mvn.w	r3, #4
 8015510:	e0d8      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8015512:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015516:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	78db      	ldrb	r3, [r3, #3]
 801551e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8015522:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8015526:	7812      	ldrb	r2, [r2, #0]
 8015528:	429a      	cmp	r2, r3
 801552a:	d202      	bcs.n	8015532 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 801552c:	f06f 0306 	mvn.w	r3, #6
 8015530:	e0c8      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8015532:	2300      	movs	r3, #0
 8015534:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015538:	2300      	movs	r3, #0
 801553a:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 801553e:	e040      	b.n	80155c2 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8015540:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015544:	2b00      	cmp	r3, #0
 8015546:	d018      	beq.n	801557a <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8015548:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801554c:	4a60      	ldr	r2, [pc, #384]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 801554e:	5cd2      	ldrb	r2, [r2, r3]
 8015550:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015554:	1c59      	adds	r1, r3, #1
 8015556:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 801555a:	4619      	mov	r1, r3
 801555c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015560:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	185c      	adds	r4, r3, r1
 8015568:	4610      	mov	r0, r2
 801556a:	f7ff fe23 	bl	80151b4 <sensirion_shdlc_unstuff_byte>
 801556e:	4603      	mov	r3, r0
 8015570:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015578:	e01e      	b.n	80155b8 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 801557a:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801557e:	4a54      	ldr	r2, [pc, #336]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 8015580:	5cd3      	ldrb	r3, [r2, r3]
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff fe05 	bl	8015192 <sensirion_shdlc_check_unstuff>
 8015588:	4603      	mov	r3, r0
 801558a:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 801558e:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015592:	2b00      	cmp	r3, #0
 8015594:	d110      	bne.n	80155b8 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8015596:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801559a:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801559e:	1c59      	adds	r1, r3, #1
 80155a0:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80155a4:	4619      	mov	r1, r3
 80155a6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155aa:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	440b      	add	r3, r1
 80155b2:	4947      	ldr	r1, [pc, #284]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 80155b4:	5c8a      	ldrb	r2, [r1, r2]
 80155b6:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80155b8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155bc:	3301      	adds	r3, #1
 80155be:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80155c2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	78db      	ldrb	r3, [r3, #3]
 80155ce:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d206      	bcs.n	80155e4 <sensirion_shdlc_rx+0x1f8>
 80155d6:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80155da:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80155de:	3b02      	subs	r3, #2
 80155e0:	429a      	cmp	r2, r3
 80155e2:	dbad      	blt.n	8015540 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 80155e4:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d002      	beq.n	80155f2 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80155ec:	f06f 0304 	mvn.w	r3, #4
 80155f0:	e068      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 80155f2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	78db      	ldrb	r3, [r3, #3]
 80155fe:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8015602:	429a      	cmp	r2, r3
 8015604:	d202      	bcs.n	801560c <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015606:	f06f 0304 	mvn.w	r3, #4
 801560a:	e05b      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 801560c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015610:	1c5a      	adds	r2, r3, #1
 8015612:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8015616:	461a      	mov	r2, r3
 8015618:	4b2d      	ldr	r3, [pc, #180]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 801561a:	5c9b      	ldrb	r3, [r3, r2]
 801561c:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8015620:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8015624:	4618      	mov	r0, r3
 8015626:	f7ff fdb4 	bl	8015192 <sensirion_shdlc_check_unstuff>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d00d      	beq.n	801564c <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8015630:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015634:	1c5a      	adds	r2, r3, #1
 8015636:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 801563a:	461a      	mov	r2, r3
 801563c:	4b24      	ldr	r3, [pc, #144]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 801563e:	5c9b      	ldrb	r3, [r3, r2]
 8015640:	4618      	mov	r0, r3
 8015642:	f7ff fdb7 	bl	80151b4 <sensirion_shdlc_unstuff_byte>
 8015646:	4603      	mov	r3, r0
 8015648:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 801564c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015650:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	781a      	ldrb	r2, [r3, #0]
 8015658:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801565c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	785b      	ldrb	r3, [r3, #1]
 8015664:	4413      	add	r3, r2
 8015666:	b2da      	uxtb	r2, r3
 8015668:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801566c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	789b      	ldrb	r3, [r3, #2]
 8015674:	4413      	add	r3, r2
 8015676:	b2d8      	uxtb	r0, r3
 8015678:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801567c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	78d9      	ldrb	r1, [r3, #3]
 8015684:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015688:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801568c:	681a      	ldr	r2, [r3, #0]
 801568e:	f7ff fd21 	bl	80150d4 <sensirion_shdlc_crc>
 8015692:	4603      	mov	r3, r0
 8015694:	461a      	mov	r2, r3
 8015696:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 801569a:	4293      	cmp	r3, r2
 801569c:	d002      	beq.n	80156a4 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 801569e:	f06f 0303 	mvn.w	r3, #3
 80156a2:	e00f      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 80156a4:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80156a8:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80156ac:	429a      	cmp	r2, r3
 80156ae:	da05      	bge.n	80156bc <sensirion_shdlc_rx+0x2d0>
 80156b0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80156b4:	4a06      	ldr	r2, [pc, #24]	@ (80156d0 <sensirion_shdlc_rx+0x2e4>)
 80156b6:	5cd3      	ldrb	r3, [r2, r3]
 80156b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80156ba:	d002      	beq.n	80156c2 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 80156bc:	f06f 0302 	mvn.w	r3, #2
 80156c0:	e000      	b.n	80156c4 <sensirion_shdlc_rx+0x2d8>

    return 0;
 80156c2:	2300      	movs	r3, #0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd90      	pop	{r4, r7, pc}
 80156ce:	bf00      	nop
 80156d0:	2000158c 	.word	0x2000158c

080156d4 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 80156d8:	4819      	ldr	r0, [pc, #100]	@ (8015740 <sensirion_uart_open+0x6c>)
 80156da:	f7f6 fd7d 	bl	800c1d8 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 80156de:	4b18      	ldr	r3, [pc, #96]	@ (8015740 <sensirion_uart_open+0x6c>)
 80156e0:	4a18      	ldr	r2, [pc, #96]	@ (8015744 <sensirion_uart_open+0x70>)
 80156e2:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80156e4:	4b16      	ldr	r3, [pc, #88]	@ (8015740 <sensirion_uart_open+0x6c>)
 80156e6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80156ea:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80156ec:	4b14      	ldr	r3, [pc, #80]	@ (8015740 <sensirion_uart_open+0x6c>)
 80156ee:	2200      	movs	r2, #0
 80156f0:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80156f2:	4b13      	ldr	r3, [pc, #76]	@ (8015740 <sensirion_uart_open+0x6c>)
 80156f4:	2200      	movs	r2, #0
 80156f6:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 80156f8:	4b11      	ldr	r3, [pc, #68]	@ (8015740 <sensirion_uart_open+0x6c>)
 80156fa:	2200      	movs	r2, #0
 80156fc:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 80156fe:	4b10      	ldr	r3, [pc, #64]	@ (8015740 <sensirion_uart_open+0x6c>)
 8015700:	220c      	movs	r2, #12
 8015702:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015704:	4b0e      	ldr	r3, [pc, #56]	@ (8015740 <sensirion_uart_open+0x6c>)
 8015706:	2200      	movs	r2, #0
 8015708:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801570a:	4b0d      	ldr	r3, [pc, #52]	@ (8015740 <sensirion_uart_open+0x6c>)
 801570c:	2200      	movs	r2, #0
 801570e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8015710:	480b      	ldr	r0, [pc, #44]	@ (8015740 <sensirion_uart_open+0x6c>)
 8015712:	f7f6 fd11 	bl	800c138 <HAL_UART_Init>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d001      	beq.n	8015720 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 801571c:	f7ed ffa4 	bl	8003668 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8015720:	f240 220a 	movw	r2, #522	@ 0x20a
 8015724:	4908      	ldr	r1, [pc, #32]	@ (8015748 <sensirion_uart_open+0x74>)
 8015726:	4806      	ldr	r0, [pc, #24]	@ (8015740 <sensirion_uart_open+0x6c>)
 8015728:	f7f6 fe38 	bl	800c39c <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 801572c:	4b07      	ldr	r3, [pc, #28]	@ (801574c <sensirion_uart_open+0x78>)
 801572e:	2200      	movs	r2, #0
 8015730:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8015732:	4b07      	ldr	r3, [pc, #28]	@ (8015750 <sensirion_uart_open+0x7c>)
 8015734:	2200      	movs	r2, #0
 8015736:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8015738:	2300      	movs	r3, #0
}
 801573a:	4618      	mov	r0, r3
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	20001abc 	.word	0x20001abc
 8015744:	40004400 	.word	0x40004400
 8015748:	2000158c 	.word	0x2000158c
 801574c:	20001b5e 	.word	0x20001b5e
 8015750:	20001b60 	.word	0x20001b60

08015754 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8015754:	b580      	push	{r7, lr}
 8015756:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8015758:	4804      	ldr	r0, [pc, #16]	@ (801576c <sensirion_uart_close+0x18>)
 801575a:	f7f6 fd3d 	bl	800c1d8 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 801575e:	4803      	ldr	r0, [pc, #12]	@ (801576c <sensirion_uart_close+0x18>)
 8015760:	f7ee faa4 	bl	8003cac <HAL_UART_MspDeInit>
    return 0;
 8015764:	2300      	movs	r3, #0
}
 8015766:	4618      	mov	r0, r3
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	20001abc 	.word	0x20001abc

08015770 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	4603      	mov	r3, r0
 8015778:	6039      	str	r1, [r7, #0]
 801577a:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 801577c:	88fa      	ldrh	r2, [r7, #6]
 801577e:	f04f 33ff 	mov.w	r3, #4294967295
 8015782:	6839      	ldr	r1, [r7, #0]
 8015784:	4807      	ldr	r0, [pc, #28]	@ (80157a4 <sensirion_uart_tx+0x34>)
 8015786:	f7f6 fd59 	bl	800c23c <HAL_UART_Transmit>
 801578a:	4603      	mov	r3, r0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d102      	bne.n	8015796 <sensirion_uart_tx+0x26>
		{
			return data_len;
 8015790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015794:	e001      	b.n	801579a <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8015796:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 801579a:	4618      	mov	r0, r3
 801579c:	3708      	adds	r7, #8
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
 80157a2:	bf00      	nop
 80157a4:	20001abc 	.word	0x20001abc

080157a8 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	460b      	mov	r3, r1
 80157b2:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 80157b4:	4a07      	ldr	r2, [pc, #28]	@ (80157d4 <HAL_UARTEx_RxEventCallback+0x2c>)
 80157b6:	887b      	ldrh	r3, [r7, #2]
 80157b8:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 80157ba:	4b07      	ldr	r3, [pc, #28]	@ (80157d8 <HAL_UARTEx_RxEventCallback+0x30>)
 80157bc:	2201      	movs	r2, #1
 80157be:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 80157c0:	f240 220a 	movw	r2, #522	@ 0x20a
 80157c4:	4905      	ldr	r1, [pc, #20]	@ (80157dc <HAL_UARTEx_RxEventCallback+0x34>)
 80157c6:	4806      	ldr	r0, [pc, #24]	@ (80157e0 <HAL_UARTEx_RxEventCallback+0x38>)
 80157c8:	f7f6 fde8 	bl	800c39c <HAL_UARTEx_ReceiveToIdle_IT>
}
 80157cc:	bf00      	nop
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	20001b5e 	.word	0x20001b5e
 80157d8:	20001b62 	.word	0x20001b62
 80157dc:	2000158c 	.word	0x2000158c
 80157e0:	20001abc 	.word	0x20001abc

080157e4 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	4603      	mov	r3, r0
 80157ec:	6039      	str	r1, [r7, #0]
 80157ee:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 80157f0:	2300      	movs	r3, #0
 80157f2:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 80157f4:	e005      	b.n	8015802 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	3301      	adds	r3, #1
 80157fa:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 80157fc:	200a      	movs	r0, #10
 80157fe:	f7ee fc89 	bl	8004114 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8015802:	4b0b      	ldr	r3, [pc, #44]	@ (8015830 <sensirion_uart_rx+0x4c>)
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d102      	bne.n	8015810 <sensirion_uart_rx+0x2c>
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2b02      	cmp	r3, #2
 801580e:	d9f2      	bls.n	80157f6 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8015810:	4b07      	ldr	r3, [pc, #28]	@ (8015830 <sensirion_uart_rx+0x4c>)
 8015812:	2200      	movs	r2, #0
 8015814:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8015816:	4b07      	ldr	r3, [pc, #28]	@ (8015834 <sensirion_uart_rx+0x50>)
 8015818:	2200      	movs	r2, #0
 801581a:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 801581c:	4b06      	ldr	r3, [pc, #24]	@ (8015838 <sensirion_uart_rx+0x54>)
 801581e:	2200      	movs	r2, #0
 8015820:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8015822:	4b06      	ldr	r3, [pc, #24]	@ (801583c <sensirion_uart_rx+0x58>)
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	b21b      	sxth	r3, r3
	//return i;
}
 8015828:	4618      	mov	r0, r3
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	20001b62 	.word	0x20001b62
 8015834:	20001b64 	.word	0x20001b64
 8015838:	20001b60 	.word	0x20001b60
 801583c:	20001b5e 	.word	0x20001b5e

08015840 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	4a06      	ldr	r2, [pc, #24]	@ (8015864 <sensirion_sleep_usec+0x24>)
 801584c:	fba2 2303 	umull	r2, r3, r2, r3
 8015850:	099b      	lsrs	r3, r3, #6
 8015852:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f7ee fc5d 	bl	8004114 <HAL_Delay>
}
 801585a:	bf00      	nop
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	10624dd3 	.word	0x10624dd3

08015868 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8015868:	b580      	push	{r7, lr}
 801586a:	b08a      	sub	sp, #40	@ 0x28
 801586c:	af04      	add	r7, sp, #16
 801586e:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8015870:	2303      	movs	r3, #3
 8015872:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8015874:	f107 020c 	add.w	r2, r7, #12
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	9302      	str	r3, [sp, #8]
 801587c:	f107 0310 	add.w	r3, r7, #16
 8015880:	9301      	str	r3, [sp, #4]
 8015882:	2320      	movs	r3, #32
 8015884:	9300      	str	r3, [sp, #0]
 8015886:	4613      	mov	r3, r2
 8015888:	2201      	movs	r2, #1
 801588a:	21d0      	movs	r1, #208	@ 0xd0
 801588c:	2000      	movs	r0, #0
 801588e:	f7ff fcb3 	bl	80151f8 <sensirion_shdlc_xcv>
 8015892:	4603      	mov	r3, r0
 8015894:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8015896:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801589a:	2b00      	cmp	r3, #0
 801589c:	da02      	bge.n	80158a4 <sps30_get_serial+0x3c>
        return ret;
 801589e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158a2:	e009      	b.n	80158b8 <sps30_get_serial+0x50>

    if (header.state)
 80158a4:	7cbb      	ldrb	r3, [r7, #18]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d005      	beq.n	80158b6 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 80158aa:	7cbb      	ldrb	r3, [r7, #18]
 80158ac:	b21b      	sxth	r3, r3
 80158ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80158b2:	b21b      	sxth	r3, r3
 80158b4:	e000      	b.n	80158b8 <sps30_get_serial+0x50>

    return 0;
 80158b6:	2300      	movs	r3, #0
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3718      	adds	r7, #24
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 80158c6:	f240 3301 	movw	r3, #769	@ 0x301
 80158ca:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 80158cc:	463a      	mov	r2, r7
 80158ce:	2300      	movs	r3, #0
 80158d0:	9302      	str	r3, [sp, #8]
 80158d2:	1d3b      	adds	r3, r7, #4
 80158d4:	9301      	str	r3, [sp, #4]
 80158d6:	2300      	movs	r3, #0
 80158d8:	9300      	str	r3, [sp, #0]
 80158da:	4613      	mov	r3, r2
 80158dc:	2202      	movs	r2, #2
 80158de:	2100      	movs	r1, #0
 80158e0:	2000      	movs	r0, #0
 80158e2:	f7ff fc89 	bl	80151f8 <sensirion_shdlc_xcv>
 80158e6:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3708      	adds	r7, #8
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b086      	sub	sp, #24
 80158f4:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 80158f6:	2300      	movs	r3, #0
 80158f8:	9302      	str	r3, [sp, #8]
 80158fa:	1d3b      	adds	r3, r7, #4
 80158fc:	9301      	str	r3, [sp, #4]
 80158fe:	2300      	movs	r3, #0
 8015900:	9300      	str	r3, [sp, #0]
 8015902:	2300      	movs	r3, #0
 8015904:	2200      	movs	r2, #0
 8015906:	2101      	movs	r1, #1
 8015908:	2000      	movs	r0, #0
 801590a:	f7ff fc75 	bl	80151f8 <sensirion_shdlc_xcv>
 801590e:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015910:	4618      	mov	r0, r3
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8015918:	b580      	push	{r7, lr}
 801591a:	b092      	sub	sp, #72	@ 0x48
 801591c:	af04      	add	r7, sp, #16
 801591e:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8015920:	f107 0308 	add.w	r3, r7, #8
 8015924:	9302      	str	r3, [sp, #8]
 8015926:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801592a:	9301      	str	r3, [sp, #4]
 801592c:	2328      	movs	r3, #40	@ 0x28
 801592e:	9300      	str	r3, [sp, #0]
 8015930:	2300      	movs	r3, #0
 8015932:	2200      	movs	r2, #0
 8015934:	2103      	movs	r1, #3
 8015936:	2000      	movs	r0, #0
 8015938:	f7ff fc5e 	bl	80151f8 <sensirion_shdlc_xcv>
 801593c:	4603      	mov	r3, r0
 801593e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8015940:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015944:	2b00      	cmp	r3, #0
 8015946:	d002      	beq.n	801594e <sps30_read_measurement+0x36>
        return error;
 8015948:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 801594c:	e07f      	b.n	8015a4e <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 801594e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015952:	2b28      	cmp	r3, #40	@ 0x28
 8015954:	d002      	beq.n	801595c <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015956:	f04f 33ff 	mov.w	r3, #4294967295
 801595a:	e078      	b.n	8015a4e <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 801595c:	f107 0308 	add.w	r3, r7, #8
 8015960:	4618      	mov	r0, r3
 8015962:	f7ff fba6 	bl	80150b2 <sensirion_bytes_to_float>
 8015966:	eef0 7a40 	vmov.f32	s15, s0
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8015970:	f107 0308 	add.w	r3, r7, #8
 8015974:	3304      	adds	r3, #4
 8015976:	4618      	mov	r0, r3
 8015978:	f7ff fb9b 	bl	80150b2 <sensirion_bytes_to_float>
 801597c:	eef0 7a40 	vmov.f32	s15, s0
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8015986:	f107 0308 	add.w	r3, r7, #8
 801598a:	3308      	adds	r3, #8
 801598c:	4618      	mov	r0, r3
 801598e:	f7ff fb90 	bl	80150b2 <sensirion_bytes_to_float>
 8015992:	eef0 7a40 	vmov.f32	s15, s0
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 801599c:	f107 0308 	add.w	r3, r7, #8
 80159a0:	330c      	adds	r3, #12
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7ff fb85 	bl	80150b2 <sensirion_bytes_to_float>
 80159a8:	eef0 7a40 	vmov.f32	s15, s0
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 80159b2:	f107 0308 	add.w	r3, r7, #8
 80159b6:	3310      	adds	r3, #16
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7ff fb7a 	bl	80150b2 <sensirion_bytes_to_float>
 80159be:	eef0 7a40 	vmov.f32	s15, s0
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 80159c8:	f107 0308 	add.w	r3, r7, #8
 80159cc:	3314      	adds	r3, #20
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7ff fb6f 	bl	80150b2 <sensirion_bytes_to_float>
 80159d4:	eef0 7a40 	vmov.f32	s15, s0
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 80159de:	f107 0308 	add.w	r3, r7, #8
 80159e2:	3318      	adds	r3, #24
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7ff fb64 	bl	80150b2 <sensirion_bytes_to_float>
 80159ea:	eef0 7a40 	vmov.f32	s15, s0
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 80159f4:	f107 0308 	add.w	r3, r7, #8
 80159f8:	331c      	adds	r3, #28
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7ff fb59 	bl	80150b2 <sensirion_bytes_to_float>
 8015a00:	eef0 7a40 	vmov.f32	s15, s0
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8015a0a:	f107 0308 	add.w	r3, r7, #8
 8015a0e:	3320      	adds	r3, #32
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7ff fb4e 	bl	80150b2 <sensirion_bytes_to_float>
 8015a16:	eef0 7a40 	vmov.f32	s15, s0
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8015a20:	f107 0308 	add.w	r3, r7, #8
 8015a24:	3324      	adds	r3, #36	@ 0x24
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7ff fb43 	bl	80150b2 <sensirion_bytes_to_float>
 8015a2c:	eef0 7a40 	vmov.f32	s15, s0
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 8015a36:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d006      	beq.n	8015a4c <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8015a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a42:	b21b      	sxth	r3, r3
 8015a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a48:	b21b      	sxth	r3, r3
 8015a4a:	e000      	b.n	8015a4e <sps30_read_measurement+0x136>
    }

    return 0;
 8015a4c:	2300      	movs	r3, #0
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3738      	adds	r7, #56	@ 0x38
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}

08015a56 <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8015a56:	b580      	push	{r7, lr}
 8015a58:	b086      	sub	sp, #24
 8015a5a:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	9302      	str	r3, [sp, #8]
 8015a60:	1d3b      	adds	r3, r7, #4
 8015a62:	9301      	str	r3, [sp, #4]
 8015a64:	2300      	movs	r3, #0
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	2300      	movs	r3, #0
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	2156      	movs	r1, #86	@ 0x56
 8015a6e:	2000      	movs	r0, #0
 8015a70:	f7ff fbc2 	bl	80151f8 <sensirion_shdlc_xcv>
 8015a74:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3708      	adds	r7, #8
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}

08015a7e <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8015a7e:	b580      	push	{r7, lr}
 8015a80:	b08a      	sub	sp, #40	@ 0x28
 8015a82:	af04      	add	r7, sp, #16
 8015a84:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8015a86:	f107 0308 	add.w	r3, r7, #8
 8015a8a:	9302      	str	r3, [sp, #8]
 8015a8c:	f107 0310 	add.w	r3, r7, #16
 8015a90:	9301      	str	r3, [sp, #4]
 8015a92:	2307      	movs	r3, #7
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	2300      	movs	r3, #0
 8015a98:	2200      	movs	r2, #0
 8015a9a:	21d1      	movs	r1, #209	@ 0xd1
 8015a9c:	2000      	movs	r0, #0
 8015a9e:	f7ff fbab 	bl	80151f8 <sensirion_shdlc_xcv>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8015aa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d002      	beq.n	8015ab4 <sps30_read_version+0x36>
        return error;
 8015aae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ab2:	e01f      	b.n	8015af4 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8015ab4:	7cfb      	ldrb	r3, [r7, #19]
 8015ab6:	2b07      	cmp	r3, #7
 8015ab8:	d002      	beq.n	8015ac0 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015aba:	f04f 33ff 	mov.w	r3, #4294967295
 8015abe:	e019      	b.n	8015af4 <sps30_read_version+0x76>
    }

    if (header.state) {
 8015ac0:	7cbb      	ldrb	r3, [r7, #18]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d005      	beq.n	8015ad2 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8015ac6:	7cbb      	ldrb	r3, [r7, #18]
 8015ac8:	b21b      	sxth	r3, r3
 8015aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015ace:	b21b      	sxth	r3, r3
 8015ad0:	e010      	b.n	8015af4 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8015ad2:	7a3a      	ldrb	r2, [r7, #8]
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8015ad8:	7a7a      	ldrb	r2, [r7, #9]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8015ade:	7afa      	ldrb	r2, [r7, #11]
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8015ae4:	7b7a      	ldrb	r2, [r7, #13]
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8015aea:	7bba      	ldrb	r2, [r7, #14]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	711a      	strb	r2, [r3, #4]

    return error;
 8015af0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3718      	adds	r7, #24
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b084      	sub	sp, #16
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	460b      	mov	r3, r1
 8015b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015b08:	f640 0074 	movw	r0, #2164	@ 0x874
 8015b0c:	f007 fe1c 	bl	801d748 <USBD_static_malloc>
 8015b10:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d109      	bne.n	8015b2c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	32b0      	adds	r2, #176	@ 0xb0
 8015b22:	2100      	movs	r1, #0
 8015b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015b28:	2302      	movs	r3, #2
 8015b2a:	e06e      	b.n	8015c0a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	32b0      	adds	r2, #176	@ 0xb0
 8015b36:	68f9      	ldr	r1, [r7, #12]
 8015b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	32b0      	adds	r2, #176	@ 0xb0
 8015b46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	7c1b      	ldrb	r3, [r3, #16]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d12b      	bne.n	8015bb0 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015b58:	4b2e      	ldr	r3, [pc, #184]	@ (8015c14 <USBD_MSC_Init+0x118>)
 8015b5a:	7819      	ldrb	r1, [r3, #0]
 8015b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b60:	2202      	movs	r2, #2
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f007 fcad 	bl	801d4c2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015b68:	4b2a      	ldr	r3, [pc, #168]	@ (8015c14 <USBD_MSC_Init+0x118>)
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	f003 020f 	and.w	r2, r3, #15
 8015b70:	6879      	ldr	r1, [r7, #4]
 8015b72:	4613      	mov	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	4413      	add	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	440b      	add	r3, r1
 8015b7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b80:	2201      	movs	r2, #1
 8015b82:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015b84:	4b24      	ldr	r3, [pc, #144]	@ (8015c18 <USBD_MSC_Init+0x11c>)
 8015b86:	7819      	ldrb	r1, [r3, #0]
 8015b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b8c:	2202      	movs	r2, #2
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f007 fc97 	bl	801d4c2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015b94:	4b20      	ldr	r3, [pc, #128]	@ (8015c18 <USBD_MSC_Init+0x11c>)
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	f003 020f 	and.w	r2, r3, #15
 8015b9c:	6879      	ldr	r1, [r7, #4]
 8015b9e:	4613      	mov	r3, r2
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	4413      	add	r3, r2
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	440b      	add	r3, r1
 8015ba8:	3324      	adds	r3, #36	@ 0x24
 8015baa:	2201      	movs	r2, #1
 8015bac:	801a      	strh	r2, [r3, #0]
 8015bae:	e028      	b.n	8015c02 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bb0:	4b18      	ldr	r3, [pc, #96]	@ (8015c14 <USBD_MSC_Init+0x118>)
 8015bb2:	7819      	ldrb	r1, [r3, #0]
 8015bb4:	2340      	movs	r3, #64	@ 0x40
 8015bb6:	2202      	movs	r2, #2
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f007 fc82 	bl	801d4c2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015bbe:	4b15      	ldr	r3, [pc, #84]	@ (8015c14 <USBD_MSC_Init+0x118>)
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	f003 020f 	and.w	r2, r3, #15
 8015bc6:	6879      	ldr	r1, [r7, #4]
 8015bc8:	4613      	mov	r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	4413      	add	r3, r2
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	440b      	add	r3, r1
 8015bd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bda:	4b0f      	ldr	r3, [pc, #60]	@ (8015c18 <USBD_MSC_Init+0x11c>)
 8015bdc:	7819      	ldrb	r1, [r3, #0]
 8015bde:	2340      	movs	r3, #64	@ 0x40
 8015be0:	2202      	movs	r2, #2
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f007 fc6d 	bl	801d4c2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015be8:	4b0b      	ldr	r3, [pc, #44]	@ (8015c18 <USBD_MSC_Init+0x11c>)
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	f003 020f 	and.w	r2, r3, #15
 8015bf0:	6879      	ldr	r1, [r7, #4]
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	4413      	add	r3, r2
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	440b      	add	r3, r1
 8015bfc:	3324      	adds	r3, #36	@ 0x24
 8015bfe:	2201      	movs	r2, #1
 8015c00:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f000 fa2c 	bl	8016060 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015c08:	2300      	movs	r3, #0
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3710      	adds	r7, #16
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	200000af 	.word	0x200000af
 8015c18:	200000ae 	.word	0x200000ae

08015c1c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b082      	sub	sp, #8
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	460b      	mov	r3, r1
 8015c26:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8015c28:	4b26      	ldr	r3, [pc, #152]	@ (8015cc4 <USBD_MSC_DeInit+0xa8>)
 8015c2a:	781b      	ldrb	r3, [r3, #0]
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f007 fc6d 	bl	801d50e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8015c34:	4b23      	ldr	r3, [pc, #140]	@ (8015cc4 <USBD_MSC_DeInit+0xa8>)
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	f003 020f 	and.w	r2, r3, #15
 8015c3c:	6879      	ldr	r1, [r7, #4]
 8015c3e:	4613      	mov	r3, r2
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	4413      	add	r3, r2
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	440b      	add	r3, r1
 8015c48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8015c50:	4b1d      	ldr	r3, [pc, #116]	@ (8015cc8 <USBD_MSC_DeInit+0xac>)
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	4619      	mov	r1, r3
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f007 fc59 	bl	801d50e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8015c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8015cc8 <USBD_MSC_DeInit+0xac>)
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	f003 020f 	and.w	r2, r3, #15
 8015c64:	6879      	ldr	r1, [r7, #4]
 8015c66:	4613      	mov	r3, r2
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	4413      	add	r3, r2
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	440b      	add	r3, r1
 8015c70:	3324      	adds	r3, #36	@ 0x24
 8015c72:	2200      	movs	r2, #0
 8015c74:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	32b0      	adds	r2, #176	@ 0xb0
 8015c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d018      	beq.n	8015cba <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f000 fa67 	bl	801615c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	32b0      	adds	r2, #176	@ 0xb0
 8015c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f007 fd61 	bl	801d764 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	32b0      	adds	r2, #176	@ 0xb0
 8015cac:	2100      	movs	r1, #0
 8015cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015cba:	2300      	movs	r3, #0
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3708      	adds	r7, #8
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	200000af 	.word	0x200000af
 8015cc8:	200000ae 	.word	0x200000ae

08015ccc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b086      	sub	sp, #24
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	32b0      	adds	r2, #176	@ 0xb0
 8015ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015cea:	2300      	movs	r3, #0
 8015cec:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d101      	bne.n	8015cf8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015cf4:	2303      	movs	r3, #3
 8015cf6:	e0e1      	b.n	8015ebc <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d053      	beq.n	8015dac <USBD_MSC_Setup+0xe0>
 8015d04:	2b20      	cmp	r3, #32
 8015d06:	f040 80d1 	bne.w	8015eac <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	785b      	ldrb	r3, [r3, #1]
 8015d0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8015d10:	d002      	beq.n	8015d18 <USBD_MSC_Setup+0x4c>
 8015d12:	2bff      	cmp	r3, #255	@ 0xff
 8015d14:	d02a      	beq.n	8015d6c <USBD_MSC_Setup+0xa0>
 8015d16:	e041      	b.n	8015d9c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	885b      	ldrh	r3, [r3, #2]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d11e      	bne.n	8015d5e <USBD_MSC_Setup+0x92>
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	88db      	ldrh	r3, [r3, #6]
 8015d24:	2b01      	cmp	r3, #1
 8015d26:	d11a      	bne.n	8015d5e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	da15      	bge.n	8015d5e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d38:	687a      	ldr	r2, [r7, #4]
 8015d3a:	33b0      	adds	r3, #176	@ 0xb0
 8015d3c:	009b      	lsls	r3, r3, #2
 8015d3e:	4413      	add	r3, r2
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	699b      	ldr	r3, [r3, #24]
 8015d44:	4798      	blx	r3
 8015d46:	4603      	mov	r3, r0
 8015d48:	461a      	mov	r2, r3
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	2201      	movs	r2, #1
 8015d52:	4619      	mov	r1, r3
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f003 f979 	bl	801904c <USBD_CtlSendData>
 8015d5a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d5c:	e025      	b.n	8015daa <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015d5e:	6839      	ldr	r1, [r7, #0]
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f003 f902 	bl	8018f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8015d66:	2303      	movs	r3, #3
 8015d68:	75fb      	strb	r3, [r7, #23]
          break;
 8015d6a:	e01e      	b.n	8015daa <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	885b      	ldrh	r3, [r3, #2]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d10c      	bne.n	8015d8e <USBD_MSC_Setup+0xc2>
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	88db      	ldrh	r3, [r3, #6]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d108      	bne.n	8015d8e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	db03      	blt.n	8015d8e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f000 f9b4 	bl	80160f4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d8c:	e00d      	b.n	8015daa <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015d8e:	6839      	ldr	r1, [r7, #0]
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f003 f8ea 	bl	8018f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8015d96:	2303      	movs	r3, #3
 8015d98:	75fb      	strb	r3, [r7, #23]
          break;
 8015d9a:	e006      	b.n	8015daa <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8015d9c:	6839      	ldr	r1, [r7, #0]
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f003 f8e3 	bl	8018f6a <USBD_CtlError>
          ret = USBD_FAIL;
 8015da4:	2303      	movs	r3, #3
 8015da6:	75fb      	strb	r3, [r7, #23]
          break;
 8015da8:	bf00      	nop
      }
      break;
 8015daa:	e086      	b.n	8015eba <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	785b      	ldrb	r3, [r3, #1]
 8015db0:	2b0b      	cmp	r3, #11
 8015db2:	d872      	bhi.n	8015e9a <USBD_MSC_Setup+0x1ce>
 8015db4:	a201      	add	r2, pc, #4	@ (adr r2, 8015dbc <USBD_MSC_Setup+0xf0>)
 8015db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dba:	bf00      	nop
 8015dbc:	08015ded 	.word	0x08015ded
 8015dc0:	08015e69 	.word	0x08015e69
 8015dc4:	08015e9b 	.word	0x08015e9b
 8015dc8:	08015e9b 	.word	0x08015e9b
 8015dcc:	08015e9b 	.word	0x08015e9b
 8015dd0:	08015e9b 	.word	0x08015e9b
 8015dd4:	08015e9b 	.word	0x08015e9b
 8015dd8:	08015e9b 	.word	0x08015e9b
 8015ddc:	08015e9b 	.word	0x08015e9b
 8015de0:	08015e9b 	.word	0x08015e9b
 8015de4:	08015e17 	.word	0x08015e17
 8015de8:	08015e41 	.word	0x08015e41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	2b03      	cmp	r3, #3
 8015df6:	d107      	bne.n	8015e08 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015df8:	f107 030e 	add.w	r3, r7, #14
 8015dfc:	2202      	movs	r2, #2
 8015dfe:	4619      	mov	r1, r3
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f003 f923 	bl	801904c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e06:	e050      	b.n	8015eaa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e08:	6839      	ldr	r1, [r7, #0]
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f003 f8ad 	bl	8018f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8015e10:	2303      	movs	r3, #3
 8015e12:	75fb      	strb	r3, [r7, #23]
          break;
 8015e14:	e049      	b.n	8015eaa <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e1c:	b2db      	uxtb	r3, r3
 8015e1e:	2b03      	cmp	r3, #3
 8015e20:	d107      	bne.n	8015e32 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	3304      	adds	r3, #4
 8015e26:	2201      	movs	r2, #1
 8015e28:	4619      	mov	r1, r3
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f003 f90e 	bl	801904c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e30:	e03b      	b.n	8015eaa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e32:	6839      	ldr	r1, [r7, #0]
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f003 f898 	bl	8018f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8015e3a:	2303      	movs	r3, #3
 8015e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8015e3e:	e034      	b.n	8015eaa <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	2b03      	cmp	r3, #3
 8015e4a:	d106      	bne.n	8015e5a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	885b      	ldrh	r3, [r3, #2]
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	461a      	mov	r2, r3
 8015e54:	693b      	ldr	r3, [r7, #16]
 8015e56:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e58:	e027      	b.n	8015eaa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e5a:	6839      	ldr	r1, [r7, #0]
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f003 f884 	bl	8018f6a <USBD_CtlError>
            ret = USBD_FAIL;
 8015e62:	2303      	movs	r3, #3
 8015e64:	75fb      	strb	r3, [r7, #23]
          break;
 8015e66:	e020      	b.n	8015eaa <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	2b03      	cmp	r3, #3
 8015e72:	d119      	bne.n	8015ea8 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	885b      	ldrh	r3, [r3, #2]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d115      	bne.n	8015ea8 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	889b      	ldrh	r3, [r3, #4]
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	4619      	mov	r1, r3
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f007 fb61 	bl	801d54c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	889b      	ldrh	r3, [r3, #4]
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	4619      	mov	r1, r3
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f000 fb2e 	bl	80164f4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8015e98:	e006      	b.n	8015ea8 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8015e9a:	6839      	ldr	r1, [r7, #0]
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f003 f864 	bl	8018f6a <USBD_CtlError>
          ret = USBD_FAIL;
 8015ea2:	2303      	movs	r3, #3
 8015ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8015ea6:	e000      	b.n	8015eaa <USBD_MSC_Setup+0x1de>
          break;
 8015ea8:	bf00      	nop
      }
      break;
 8015eaa:	e006      	b.n	8015eba <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8015eac:	6839      	ldr	r1, [r7, #0]
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f003 f85b 	bl	8018f6a <USBD_CtlError>
      ret = USBD_FAIL;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8015eb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8015eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3718      	adds	r7, #24
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	460b      	mov	r3, r1
 8015ece:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015ed0:	78fb      	ldrb	r3, [r7, #3]
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f000 f959 	bl	801618c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015eda:	2300      	movs	r3, #0
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3708      	adds	r7, #8
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
 8015eec:	460b      	mov	r3, r1
 8015eee:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015ef0:	78fb      	ldrb	r3, [r7, #3]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f000 f983 	bl	8016200 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015efa:	2300      	movs	r3, #0
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3708      	adds	r7, #8
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f0c:	2181      	movs	r1, #129	@ 0x81
 8015f0e:	4812      	ldr	r0, [pc, #72]	@ (8015f58 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f10:	f002 f9f5 	bl	80182fe <USBD_GetEpDesc>
 8015f14:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f16:	2101      	movs	r1, #1
 8015f18:	480f      	ldr	r0, [pc, #60]	@ (8015f58 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f1a:	f002 f9f0 	bl	80182fe <USBD_GetEpDesc>
 8015f1e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d006      	beq.n	8015f34 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	711a      	strb	r2, [r3, #4]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	f042 0202 	orr.w	r2, r2, #2
 8015f32:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d006      	beq.n	8015f48 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	711a      	strb	r2, [r3, #4]
 8015f40:	2200      	movs	r2, #0
 8015f42:	f042 0202 	orr.w	r2, r2, #2
 8015f46:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2220      	movs	r2, #32
 8015f4c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015f4e:	4b02      	ldr	r3, [pc, #8]	@ (8015f58 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3710      	adds	r7, #16
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	20000084 	.word	0x20000084

08015f5c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f64:	2181      	movs	r1, #129	@ 0x81
 8015f66:	4812      	ldr	r0, [pc, #72]	@ (8015fb0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015f68:	f002 f9c9 	bl	80182fe <USBD_GetEpDesc>
 8015f6c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f6e:	2101      	movs	r1, #1
 8015f70:	480f      	ldr	r0, [pc, #60]	@ (8015fb0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015f72:	f002 f9c4 	bl	80182fe <USBD_GetEpDesc>
 8015f76:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d006      	beq.n	8015f8c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	2200      	movs	r2, #0
 8015f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f86:	711a      	strb	r2, [r3, #4]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d006      	beq.n	8015fa0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	2200      	movs	r2, #0
 8015f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f9a:	711a      	strb	r2, [r3, #4]
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2220      	movs	r2, #32
 8015fa4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015fa6:	4b02      	ldr	r3, [pc, #8]	@ (8015fb0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3710      	adds	r7, #16
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}
 8015fb0:	20000084 	.word	0x20000084

08015fb4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015fbc:	2181      	movs	r1, #129	@ 0x81
 8015fbe:	4812      	ldr	r0, [pc, #72]	@ (8016008 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015fc0:	f002 f99d 	bl	80182fe <USBD_GetEpDesc>
 8015fc4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015fc6:	2101      	movs	r1, #1
 8015fc8:	480f      	ldr	r0, [pc, #60]	@ (8016008 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015fca:	f002 f998 	bl	80182fe <USBD_GetEpDesc>
 8015fce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d006      	beq.n	8015fe4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fde:	711a      	strb	r2, [r3, #4]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d006      	beq.n	8015ff8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	2200      	movs	r2, #0
 8015fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ff2:	711a      	strb	r2, [r3, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2220      	movs	r2, #32
 8015ffc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015ffe:	4b02      	ldr	r3, [pc, #8]	@ (8016008 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8016000:	4618      	mov	r0, r3
 8016002:	3710      	adds	r7, #16
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	20000084 	.word	0x20000084

0801600c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	220a      	movs	r2, #10
 8016018:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801601a:	4b03      	ldr	r3, [pc, #12]	@ (8016028 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801601c:	4618      	mov	r0, r3
 801601e:	370c      	adds	r7, #12
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	200000a4 	.word	0x200000a4

0801602c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801602c:	b480      	push	{r7}
 801602e:	b083      	sub	sp, #12
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d101      	bne.n	8016040 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801603c:	2303      	movs	r3, #3
 801603e:	e009      	b.n	8016054 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	33b0      	adds	r3, #176	@ 0xb0
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	4413      	add	r3, r2
 801604e:	683a      	ldr	r2, [r7, #0]
 8016050:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016052:	2300      	movs	r3, #0
}
 8016054:	4618      	mov	r0, r3
 8016056:	370c      	adds	r7, #12
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	32b0      	adds	r2, #176	@ 0xb0
 8016072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016076:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d032      	beq.n	80160e4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2200      	movs	r2, #0
 8016082:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2200      	movs	r2, #0
 8016088:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2200      	movs	r2, #0
 801608e:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	2200      	movs	r2, #0
 8016096:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2200      	movs	r2, #0
 801609e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	33b0      	adds	r3, #176	@ 0xb0
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	4413      	add	r3, r2
 80160b0:	685b      	ldr	r3, [r3, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2000      	movs	r0, #0
 80160b6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80160b8:	4b0c      	ldr	r3, [pc, #48]	@ (80160ec <MSC_BOT_Init+0x8c>)
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	4619      	mov	r1, r3
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f007 fa44 	bl	801d54c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80160c4:	4b0a      	ldr	r3, [pc, #40]	@ (80160f0 <MSC_BOT_Init+0x90>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	4619      	mov	r1, r3
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f007 fa3e 	bl	801d54c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80160d0:	4b06      	ldr	r3, [pc, #24]	@ (80160ec <MSC_BOT_Init+0x8c>)
 80160d2:	7819      	ldrb	r1, [r3, #0]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80160da:	231f      	movs	r3, #31
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f007 fafe 	bl	801d6de <USBD_LL_PrepareReceive>
 80160e2:	e000      	b.n	80160e6 <MSC_BOT_Init+0x86>
    return;
 80160e4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	200000af 	.word	0x200000af
 80160f0:	200000ae 	.word	0x200000ae

080160f4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b084      	sub	sp, #16
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	32b0      	adds	r2, #176	@ 0xb0
 8016106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801610a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d01b      	beq.n	801614a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2200      	movs	r2, #0
 8016116:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2201      	movs	r2, #1
 801611c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801611e:	4b0d      	ldr	r3, [pc, #52]	@ (8016154 <MSC_BOT_Reset+0x60>)
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	4619      	mov	r1, r3
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f007 fa4f 	bl	801d5c8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801612a:	4b0b      	ldr	r3, [pc, #44]	@ (8016158 <MSC_BOT_Reset+0x64>)
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	4619      	mov	r1, r3
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f007 fa49 	bl	801d5c8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8016136:	4b08      	ldr	r3, [pc, #32]	@ (8016158 <MSC_BOT_Reset+0x64>)
 8016138:	7819      	ldrb	r1, [r3, #0]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016140:	231f      	movs	r3, #31
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f007 facb 	bl	801d6de <USBD_LL_PrepareReceive>
 8016148:	e000      	b.n	801614c <MSC_BOT_Reset+0x58>
    return;
 801614a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801614c:	3710      	adds	r7, #16
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	200000ae 	.word	0x200000ae
 8016158:	200000af 	.word	0x200000af

0801615c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801615c:	b480      	push	{r7}
 801615e:	b085      	sub	sp, #20
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	32b0      	adds	r2, #176	@ 0xb0
 801616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016172:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d002      	beq.n	8016180 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	2200      	movs	r2, #0
 801617e:	721a      	strb	r2, [r3, #8]
  }
}
 8016180:	bf00      	nop
 8016182:	3714      	adds	r7, #20
 8016184:	46bd      	mov	sp, r7
 8016186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618a:	4770      	bx	lr

0801618c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	460b      	mov	r3, r1
 8016196:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	32b0      	adds	r2, #176	@ 0xb0
 80161a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d020      	beq.n	80161f0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	7a1b      	ldrb	r3, [r3, #8]
 80161b2:	2b02      	cmp	r3, #2
 80161b4:	d005      	beq.n	80161c2 <MSC_BOT_DataIn+0x36>
 80161b6:	2b02      	cmp	r3, #2
 80161b8:	db1c      	blt.n	80161f4 <MSC_BOT_DataIn+0x68>
 80161ba:	3b03      	subs	r3, #3
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d819      	bhi.n	80161f4 <MSC_BOT_DataIn+0x68>
 80161c0:	e011      	b.n	80161e6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80161ce:	461a      	mov	r2, r3
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f9c9 	bl	8016568 <SCSI_ProcessCmd>
 80161d6:	4603      	mov	r3, r0
 80161d8:	2b00      	cmp	r3, #0
 80161da:	da0d      	bge.n	80161f8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80161dc:	2101      	movs	r1, #1
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 f90c 	bl	80163fc <MSC_BOT_SendCSW>
      }
      break;
 80161e4:	e008      	b.n	80161f8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80161e6:	2100      	movs	r1, #0
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 f907 	bl	80163fc <MSC_BOT_SendCSW>
      break;
 80161ee:	e004      	b.n	80161fa <MSC_BOT_DataIn+0x6e>
    return;
 80161f0:	bf00      	nop
 80161f2:	e002      	b.n	80161fa <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80161f4:	bf00      	nop
 80161f6:	e000      	b.n	80161fa <MSC_BOT_DataIn+0x6e>
      break;
 80161f8:	bf00      	nop
  }
}
 80161fa:	3710      	adds	r7, #16
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}

08016200 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	460b      	mov	r3, r1
 801620a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	32b0      	adds	r2, #176	@ 0xb0
 8016216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801621a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d01c      	beq.n	801625c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	7a1b      	ldrb	r3, [r3, #8]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d002      	beq.n	8016230 <MSC_BOT_DataOut+0x30>
 801622a:	2b01      	cmp	r3, #1
 801622c:	d004      	beq.n	8016238 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801622e:	e018      	b.n	8016262 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 f819 	bl	8016268 <MSC_BOT_CBW_Decode>
      break;
 8016236:	e014      	b.n	8016262 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016244:	461a      	mov	r2, r3
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f000 f98e 	bl	8016568 <SCSI_ProcessCmd>
 801624c:	4603      	mov	r3, r0
 801624e:	2b00      	cmp	r3, #0
 8016250:	da06      	bge.n	8016260 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016252:	2101      	movs	r1, #1
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 f8d1 	bl	80163fc <MSC_BOT_SendCSW>
      break;
 801625a:	e001      	b.n	8016260 <MSC_BOT_DataOut+0x60>
    return;
 801625c:	bf00      	nop
 801625e:	e000      	b.n	8016262 <MSC_BOT_DataOut+0x62>
      break;
 8016260:	bf00      	nop
  }
}
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b084      	sub	sp, #16
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	32b0      	adds	r2, #176	@ 0xb0
 801627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801627e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d079      	beq.n	801637a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801629e:	4b3a      	ldr	r3, [pc, #232]	@ (8016388 <MSC_BOT_CBW_Decode+0x120>)
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	4619      	mov	r1, r3
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f007 fa3b 	bl	801d720 <USBD_LL_GetRxDataSize>
 80162aa:	4603      	mov	r3, r0
 80162ac:	2b1f      	cmp	r3, #31
 80162ae:	d114      	bne.n	80162da <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80162b6:	4a35      	ldr	r2, [pc, #212]	@ (801638c <MSC_BOT_CBW_Decode+0x124>)
 80162b8:	4293      	cmp	r3, r2
 80162ba:	d10e      	bne.n	80162da <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162c2:	2b01      	cmp	r3, #1
 80162c4:	d809      	bhi.n	80162da <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d004      	beq.n	80162da <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162d6:	2b10      	cmp	r3, #16
 80162d8:	d90e      	bls.n	80162f8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80162e0:	2320      	movs	r3, #32
 80162e2:	2205      	movs	r2, #5
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f000 fe57 	bl	8016f98 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	2202      	movs	r2, #2
 80162ee:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f000 f8bd 	bl	8016470 <MSC_BOT_Abort>
 80162f6:	e043      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016304:	461a      	mov	r2, r3
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 f92e 	bl	8016568 <SCSI_ProcessCmd>
 801630c:	4603      	mov	r3, r0
 801630e:	2b00      	cmp	r3, #0
 8016310:	da0c      	bge.n	801632c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	7a1b      	ldrb	r3, [r3, #8]
 8016316:	2b05      	cmp	r3, #5
 8016318:	d104      	bne.n	8016324 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801631a:	2101      	movs	r1, #1
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 f86d 	bl	80163fc <MSC_BOT_SendCSW>
 8016322:	e02d      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	f000 f8a3 	bl	8016470 <MSC_BOT_Abort>
 801632a:	e029      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	7a1b      	ldrb	r3, [r3, #8]
 8016330:	2b02      	cmp	r3, #2
 8016332:	d024      	beq.n	801637e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016338:	2b01      	cmp	r3, #1
 801633a:	d020      	beq.n	801637e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016340:	2b03      	cmp	r3, #3
 8016342:	d01c      	beq.n	801637e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d009      	beq.n	8016360 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f103 0110 	add.w	r1, r3, #16
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	68db      	ldr	r3, [r3, #12]
 8016356:	461a      	mov	r2, r3
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f000 f819 	bl	8016390 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801635e:	e00f      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	68db      	ldr	r3, [r3, #12]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d104      	bne.n	8016372 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016368:	2100      	movs	r1, #0
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 f846 	bl	80163fc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8016370:	e006      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f000 f87c 	bl	8016470 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8016378:	e002      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
    return;
 801637a:	bf00      	nop
 801637c:	e000      	b.n	8016380 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 801637e:	bf00      	nop
    }
  }
}
 8016380:	3710      	adds	r7, #16
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	200000af 	.word	0x200000af
 801638c:	43425355 	.word	0x43425355

08016390 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b086      	sub	sp, #24
 8016394:	af00      	add	r7, sp, #0
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	60b9      	str	r1, [r7, #8]
 801639a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	32b0      	adds	r2, #176	@ 0xb0
 80163a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163aa:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d01e      	beq.n	80163f0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80163b8:	687a      	ldr	r2, [r7, #4]
 80163ba:	4293      	cmp	r3, r2
 80163bc:	bf28      	it	cs
 80163be:	4613      	movcs	r3, r2
 80163c0:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	1ad2      	subs	r2, r2, r3
 80163cc:	697b      	ldr	r3, [r7, #20]
 80163ce:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	2200      	movs	r2, #0
 80163d6:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	2204      	movs	r2, #4
 80163de:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80163e0:	4b05      	ldr	r3, [pc, #20]	@ (80163f8 <MSC_BOT_SendData+0x68>)
 80163e2:	7819      	ldrb	r1, [r3, #0]
 80163e4:	693b      	ldr	r3, [r7, #16]
 80163e6:	68ba      	ldr	r2, [r7, #8]
 80163e8:	68f8      	ldr	r0, [r7, #12]
 80163ea:	f007 f957 	bl	801d69c <USBD_LL_Transmit>
 80163ee:	e000      	b.n	80163f2 <MSC_BOT_SendData+0x62>
    return;
 80163f0:	bf00      	nop
}
 80163f2:	3718      	adds	r7, #24
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	200000ae 	.word	0x200000ae

080163fc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	460b      	mov	r3, r1
 8016406:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	32b0      	adds	r2, #176	@ 0xb0
 8016412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016416:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d01d      	beq.n	801645a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	4a10      	ldr	r2, [pc, #64]	@ (8016464 <MSC_BOT_SendCSW+0x68>)
 8016422:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	78fa      	ldrb	r2, [r7, #3]
 801642a:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2200      	movs	r2, #0
 8016432:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8016434:	4b0c      	ldr	r3, [pc, #48]	@ (8016468 <MSC_BOT_SendCSW+0x6c>)
 8016436:	7819      	ldrb	r1, [r3, #0]
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 801643e:	230d      	movs	r3, #13
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f007 f92b 	bl	801d69c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8016446:	4b09      	ldr	r3, [pc, #36]	@ (801646c <MSC_BOT_SendCSW+0x70>)
 8016448:	7819      	ldrb	r1, [r3, #0]
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016450:	231f      	movs	r3, #31
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f007 f943 	bl	801d6de <USBD_LL_PrepareReceive>
 8016458:	e000      	b.n	801645c <MSC_BOT_SendCSW+0x60>
    return;
 801645a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801645c:	3710      	adds	r7, #16
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}
 8016462:	bf00      	nop
 8016464:	53425355 	.word	0x53425355
 8016468:	200000ae 	.word	0x200000ae
 801646c:	200000af 	.word	0x200000af

08016470 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	32b0      	adds	r2, #176	@ 0xb0
 8016482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016486:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d02a      	beq.n	80164e4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8016494:	2b00      	cmp	r3, #0
 8016496:	d10e      	bne.n	80164b6 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d009      	beq.n	80164b6 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d105      	bne.n	80164b6 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164aa:	4b10      	ldr	r3, [pc, #64]	@ (80164ec <MSC_BOT_Abort+0x7c>)
 80164ac:	781b      	ldrb	r3, [r3, #0]
 80164ae:	4619      	mov	r1, r3
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f007 f86a 	bl	801d58a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80164b6:	4b0e      	ldr	r3, [pc, #56]	@ (80164f0 <MSC_BOT_Abort+0x80>)
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	4619      	mov	r1, r3
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f007 f864 	bl	801d58a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	7a5b      	ldrb	r3, [r3, #9]
 80164c6:	2b02      	cmp	r3, #2
 80164c8:	d10d      	bne.n	80164e6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80164ca:	4b09      	ldr	r3, [pc, #36]	@ (80164f0 <MSC_BOT_Abort+0x80>)
 80164cc:	781b      	ldrb	r3, [r3, #0]
 80164ce:	4619      	mov	r1, r3
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f007 f85a 	bl	801d58a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164d6:	4b05      	ldr	r3, [pc, #20]	@ (80164ec <MSC_BOT_Abort+0x7c>)
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	4619      	mov	r1, r3
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f007 f854 	bl	801d58a <USBD_LL_StallEP>
 80164e2:	e000      	b.n	80164e6 <MSC_BOT_Abort+0x76>
    return;
 80164e4:	bf00      	nop
  }
}
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	200000af 	.word	0x200000af
 80164f0:	200000ae 	.word	0x200000ae

080164f4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b084      	sub	sp, #16
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	460b      	mov	r3, r1
 80164fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	32b0      	adds	r2, #176	@ 0xb0
 801650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801650e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d01d      	beq.n	8016552 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	7a5b      	ldrb	r3, [r3, #9]
 801651a:	2b02      	cmp	r3, #2
 801651c:	d10c      	bne.n	8016538 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801651e:	4b10      	ldr	r3, [pc, #64]	@ (8016560 <MSC_BOT_CplClrFeature+0x6c>)
 8016520:	781b      	ldrb	r3, [r3, #0]
 8016522:	4619      	mov	r1, r3
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f007 f830 	bl	801d58a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801652a:	4b0e      	ldr	r3, [pc, #56]	@ (8016564 <MSC_BOT_CplClrFeature+0x70>)
 801652c:	781b      	ldrb	r3, [r3, #0]
 801652e:	4619      	mov	r1, r3
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f007 f82a 	bl	801d58a <USBD_LL_StallEP>
 8016536:	e00f      	b.n	8016558 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8016538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801653c:	2b00      	cmp	r3, #0
 801653e:	da0a      	bge.n	8016556 <MSC_BOT_CplClrFeature+0x62>
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	7a5b      	ldrb	r3, [r3, #9]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d006      	beq.n	8016556 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016548:	2101      	movs	r1, #1
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7ff ff56 	bl	80163fc <MSC_BOT_SendCSW>
 8016550:	e002      	b.n	8016558 <MSC_BOT_CplClrFeature+0x64>
    return;
 8016552:	bf00      	nop
 8016554:	e000      	b.n	8016558 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8016556:	bf00      	nop
  }
}
 8016558:	3710      	adds	r7, #16
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}
 801655e:	bf00      	nop
 8016560:	200000ae 	.word	0x200000ae
 8016564:	200000af 	.word	0x200000af

08016568 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b086      	sub	sp, #24
 801656c:	af00      	add	r7, sp, #0
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	460b      	mov	r3, r1
 8016572:	607a      	str	r2, [r7, #4]
 8016574:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	32b0      	adds	r2, #176	@ 0xb0
 8016580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016584:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d102      	bne.n	8016592 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 801658c:	f04f 33ff 	mov.w	r3, #4294967295
 8016590:	e168      	b.n	8016864 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	2baa      	cmp	r3, #170	@ 0xaa
 8016598:	f000 8144 	beq.w	8016824 <SCSI_ProcessCmd+0x2bc>
 801659c:	2baa      	cmp	r3, #170	@ 0xaa
 801659e:	f300 8153 	bgt.w	8016848 <SCSI_ProcessCmd+0x2e0>
 80165a2:	2ba8      	cmp	r3, #168	@ 0xa8
 80165a4:	f000 812c 	beq.w	8016800 <SCSI_ProcessCmd+0x298>
 80165a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80165aa:	f300 814d 	bgt.w	8016848 <SCSI_ProcessCmd+0x2e0>
 80165ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80165b0:	f300 80c0 	bgt.w	8016734 <SCSI_ProcessCmd+0x1cc>
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	f2c0 8147 	blt.w	8016848 <SCSI_ProcessCmd+0x2e0>
 80165ba:	2b5a      	cmp	r3, #90	@ 0x5a
 80165bc:	f200 8144 	bhi.w	8016848 <SCSI_ProcessCmd+0x2e0>
 80165c0:	a201      	add	r2, pc, #4	@ (adr r2, 80165c8 <SCSI_ProcessCmd+0x60>)
 80165c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165c6:	bf00      	nop
 80165c8:	0801673b 	.word	0x0801673b
 80165cc:	08016849 	.word	0x08016849
 80165d0:	08016849 	.word	0x08016849
 80165d4:	0801674d 	.word	0x0801674d
 80165d8:	08016849 	.word	0x08016849
 80165dc:	08016849 	.word	0x08016849
 80165e0:	08016849 	.word	0x08016849
 80165e4:	08016849 	.word	0x08016849
 80165e8:	08016849 	.word	0x08016849
 80165ec:	08016849 	.word	0x08016849
 80165f0:	08016849 	.word	0x08016849
 80165f4:	08016849 	.word	0x08016849
 80165f8:	08016849 	.word	0x08016849
 80165fc:	08016849 	.word	0x08016849
 8016600:	08016849 	.word	0x08016849
 8016604:	08016849 	.word	0x08016849
 8016608:	08016849 	.word	0x08016849
 801660c:	08016849 	.word	0x08016849
 8016610:	0801675f 	.word	0x0801675f
 8016614:	08016849 	.word	0x08016849
 8016618:	08016849 	.word	0x08016849
 801661c:	08016849 	.word	0x08016849
 8016620:	08016849 	.word	0x08016849
 8016624:	08016849 	.word	0x08016849
 8016628:	08016849 	.word	0x08016849
 801662c:	08016849 	.word	0x08016849
 8016630:	08016795 	.word	0x08016795
 8016634:	08016771 	.word	0x08016771
 8016638:	08016849 	.word	0x08016849
 801663c:	08016849 	.word	0x08016849
 8016640:	08016783 	.word	0x08016783
 8016644:	08016849 	.word	0x08016849
 8016648:	08016849 	.word	0x08016849
 801664c:	08016849 	.word	0x08016849
 8016650:	08016849 	.word	0x08016849
 8016654:	080167b9 	.word	0x080167b9
 8016658:	08016849 	.word	0x08016849
 801665c:	080167cb 	.word	0x080167cb
 8016660:	08016849 	.word	0x08016849
 8016664:	08016849 	.word	0x08016849
 8016668:	080167ef 	.word	0x080167ef
 801666c:	08016849 	.word	0x08016849
 8016670:	08016813 	.word	0x08016813
 8016674:	08016849 	.word	0x08016849
 8016678:	08016849 	.word	0x08016849
 801667c:	08016849 	.word	0x08016849
 8016680:	08016849 	.word	0x08016849
 8016684:	08016837 	.word	0x08016837
 8016688:	08016849 	.word	0x08016849
 801668c:	08016849 	.word	0x08016849
 8016690:	08016849 	.word	0x08016849
 8016694:	08016849 	.word	0x08016849
 8016698:	08016849 	.word	0x08016849
 801669c:	08016849 	.word	0x08016849
 80166a0:	08016849 	.word	0x08016849
 80166a4:	08016849 	.word	0x08016849
 80166a8:	08016849 	.word	0x08016849
 80166ac:	08016849 	.word	0x08016849
 80166b0:	08016849 	.word	0x08016849
 80166b4:	08016849 	.word	0x08016849
 80166b8:	08016849 	.word	0x08016849
 80166bc:	08016849 	.word	0x08016849
 80166c0:	08016849 	.word	0x08016849
 80166c4:	08016849 	.word	0x08016849
 80166c8:	08016849 	.word	0x08016849
 80166cc:	08016849 	.word	0x08016849
 80166d0:	08016849 	.word	0x08016849
 80166d4:	08016849 	.word	0x08016849
 80166d8:	08016849 	.word	0x08016849
 80166dc:	08016849 	.word	0x08016849
 80166e0:	08016849 	.word	0x08016849
 80166e4:	08016849 	.word	0x08016849
 80166e8:	08016849 	.word	0x08016849
 80166ec:	08016849 	.word	0x08016849
 80166f0:	08016849 	.word	0x08016849
 80166f4:	08016849 	.word	0x08016849
 80166f8:	08016849 	.word	0x08016849
 80166fc:	08016849 	.word	0x08016849
 8016700:	08016849 	.word	0x08016849
 8016704:	08016849 	.word	0x08016849
 8016708:	08016849 	.word	0x08016849
 801670c:	08016849 	.word	0x08016849
 8016710:	08016849 	.word	0x08016849
 8016714:	08016849 	.word	0x08016849
 8016718:	08016849 	.word	0x08016849
 801671c:	08016849 	.word	0x08016849
 8016720:	08016849 	.word	0x08016849
 8016724:	08016849 	.word	0x08016849
 8016728:	08016849 	.word	0x08016849
 801672c:	08016849 	.word	0x08016849
 8016730:	080167a7 	.word	0x080167a7
 8016734:	2b9e      	cmp	r3, #158	@ 0x9e
 8016736:	d051      	beq.n	80167dc <SCSI_ProcessCmd+0x274>
 8016738:	e086      	b.n	8016848 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801673a:	7afb      	ldrb	r3, [r7, #11]
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	4619      	mov	r1, r3
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f000 f893 	bl	801686c <SCSI_TestUnitReady>
 8016746:	4603      	mov	r3, r0
 8016748:	75fb      	strb	r3, [r7, #23]
      break;
 801674a:	e089      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801674c:	7afb      	ldrb	r3, [r7, #11]
 801674e:	687a      	ldr	r2, [r7, #4]
 8016750:	4619      	mov	r1, r3
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f000 fb9a 	bl	8016e8c <SCSI_RequestSense>
 8016758:	4603      	mov	r3, r0
 801675a:	75fb      	strb	r3, [r7, #23]
      break;
 801675c:	e080      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801675e:	7afb      	ldrb	r3, [r7, #11]
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	4619      	mov	r1, r3
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	f000 f8db 	bl	8016920 <SCSI_Inquiry>
 801676a:	4603      	mov	r3, r0
 801676c:	75fb      	strb	r3, [r7, #23]
      break;
 801676e:	e077      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8016770:	7afb      	ldrb	r3, [r7, #11]
 8016772:	687a      	ldr	r2, [r7, #4]
 8016774:	4619      	mov	r1, r3
 8016776:	68f8      	ldr	r0, [r7, #12]
 8016778:	f000 fc5c 	bl	8017034 <SCSI_StartStopUnit>
 801677c:	4603      	mov	r3, r0
 801677e:	75fb      	strb	r3, [r7, #23]
      break;
 8016780:	e06e      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8016782:	7afb      	ldrb	r3, [r7, #11]
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	4619      	mov	r1, r3
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	f000 fca8 	bl	80170de <SCSI_AllowPreventRemovable>
 801678e:	4603      	mov	r3, r0
 8016790:	75fb      	strb	r3, [r7, #23]
      break;
 8016792:	e065      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8016794:	7afb      	ldrb	r3, [r7, #11]
 8016796:	687a      	ldr	r2, [r7, #4]
 8016798:	4619      	mov	r1, r3
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f000 faea 	bl	8016d74 <SCSI_ModeSense6>
 80167a0:	4603      	mov	r3, r0
 80167a2:	75fb      	strb	r3, [r7, #23]
      break;
 80167a4:	e05c      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80167a6:	7afb      	ldrb	r3, [r7, #11]
 80167a8:	687a      	ldr	r2, [r7, #4]
 80167aa:	4619      	mov	r1, r3
 80167ac:	68f8      	ldr	r0, [r7, #12]
 80167ae:	f000 fb27 	bl	8016e00 <SCSI_ModeSense10>
 80167b2:	4603      	mov	r3, r0
 80167b4:	75fb      	strb	r3, [r7, #23]
      break;
 80167b6:	e053      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80167b8:	7afb      	ldrb	r3, [r7, #11]
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	4619      	mov	r1, r3
 80167be:	68f8      	ldr	r0, [r7, #12]
 80167c0:	f000 fa5c 	bl	8016c7c <SCSI_ReadFormatCapacity>
 80167c4:	4603      	mov	r3, r0
 80167c6:	75fb      	strb	r3, [r7, #23]
      break;
 80167c8:	e04a      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80167ca:	7afb      	ldrb	r3, [r7, #11]
 80167cc:	687a      	ldr	r2, [r7, #4]
 80167ce:	4619      	mov	r1, r3
 80167d0:	68f8      	ldr	r0, [r7, #12]
 80167d2:	f000 f921 	bl	8016a18 <SCSI_ReadCapacity10>
 80167d6:	4603      	mov	r3, r0
 80167d8:	75fb      	strb	r3, [r7, #23]
      break;
 80167da:	e041      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80167dc:	7afb      	ldrb	r3, [r7, #11]
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	4619      	mov	r1, r3
 80167e2:	68f8      	ldr	r0, [r7, #12]
 80167e4:	f000 f996 	bl	8016b14 <SCSI_ReadCapacity16>
 80167e8:	4603      	mov	r3, r0
 80167ea:	75fb      	strb	r3, [r7, #23]
      break;
 80167ec:	e038      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80167ee:	7afb      	ldrb	r3, [r7, #11]
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	4619      	mov	r1, r3
 80167f4:	68f8      	ldr	r0, [r7, #12]
 80167f6:	f000 fc9f 	bl	8017138 <SCSI_Read10>
 80167fa:	4603      	mov	r3, r0
 80167fc:	75fb      	strb	r3, [r7, #23]
      break;
 80167fe:	e02f      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8016800:	7afb      	ldrb	r3, [r7, #11]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	4619      	mov	r1, r3
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f000 fd40 	bl	801728c <SCSI_Read12>
 801680c:	4603      	mov	r3, r0
 801680e:	75fb      	strb	r3, [r7, #23]
      break;
 8016810:	e026      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8016812:	7afb      	ldrb	r3, [r7, #11]
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	4619      	mov	r1, r3
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f000 fdeb 	bl	80173f4 <SCSI_Write10>
 801681e:	4603      	mov	r3, r0
 8016820:	75fb      	strb	r3, [r7, #23]
      break;
 8016822:	e01d      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8016824:	7afb      	ldrb	r3, [r7, #11]
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	4619      	mov	r1, r3
 801682a:	68f8      	ldr	r0, [r7, #12]
 801682c:	f000 feb8 	bl	80175a0 <SCSI_Write12>
 8016830:	4603      	mov	r3, r0
 8016832:	75fb      	strb	r3, [r7, #23]
      break;
 8016834:	e014      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8016836:	7afb      	ldrb	r3, [r7, #11]
 8016838:	687a      	ldr	r2, [r7, #4]
 801683a:	4619      	mov	r1, r3
 801683c:	68f8      	ldr	r0, [r7, #12]
 801683e:	f000 ff95 	bl	801776c <SCSI_Verify10>
 8016842:	4603      	mov	r3, r0
 8016844:	75fb      	strb	r3, [r7, #23]
      break;
 8016846:	e00b      	b.n	8016860 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8016848:	7af9      	ldrb	r1, [r7, #11]
 801684a:	2320      	movs	r3, #32
 801684c:	2205      	movs	r2, #5
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f000 fba2 	bl	8016f98 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	2202      	movs	r2, #2
 8016858:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801685a:	23ff      	movs	r3, #255	@ 0xff
 801685c:	75fb      	strb	r3, [r7, #23]
      break;
 801685e:	bf00      	nop
  }

  return ret;
 8016860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016864:	4618      	mov	r0, r3
 8016866:	3718      	adds	r7, #24
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b086      	sub	sp, #24
 8016870:	af00      	add	r7, sp, #0
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	460b      	mov	r3, r1
 8016876:	607a      	str	r2, [r7, #4]
 8016878:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	32b0      	adds	r2, #176	@ 0xb0
 8016884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016888:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d102      	bne.n	8016896 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8016890:	f04f 33ff 	mov.w	r3, #4294967295
 8016894:	e03f      	b.n	8016916 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801689c:	2b00      	cmp	r3, #0
 801689e:	d00a      	beq.n	80168b6 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80168a6:	2320      	movs	r3, #32
 80168a8:	2205      	movs	r2, #5
 80168aa:	68f8      	ldr	r0, [r7, #12]
 80168ac:	f000 fb74 	bl	8016f98 <SCSI_SenseCode>

    return -1;
 80168b0:	f04f 33ff 	mov.w	r3, #4294967295
 80168b4:	e02f      	b.n	8016916 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80168b6:	697b      	ldr	r3, [r7, #20]
 80168b8:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80168bc:	2b02      	cmp	r3, #2
 80168be:	d10b      	bne.n	80168d8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80168c0:	7af9      	ldrb	r1, [r7, #11]
 80168c2:	233a      	movs	r3, #58	@ 0x3a
 80168c4:	2202      	movs	r2, #2
 80168c6:	68f8      	ldr	r0, [r7, #12]
 80168c8:	f000 fb66 	bl	8016f98 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	2205      	movs	r2, #5
 80168d0:	721a      	strb	r2, [r3, #8]
    return -1;
 80168d2:	f04f 33ff 	mov.w	r3, #4294967295
 80168d6:	e01e      	b.n	8016916 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	33b0      	adds	r3, #176	@ 0xb0
 80168e2:	009b      	lsls	r3, r3, #2
 80168e4:	4413      	add	r3, r2
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	689b      	ldr	r3, [r3, #8]
 80168ea:	7afa      	ldrb	r2, [r7, #11]
 80168ec:	4610      	mov	r0, r2
 80168ee:	4798      	blx	r3
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d00b      	beq.n	801690e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80168f6:	7af9      	ldrb	r1, [r7, #11]
 80168f8:	233a      	movs	r3, #58	@ 0x3a
 80168fa:	2202      	movs	r2, #2
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f000 fb4b 	bl	8016f98 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	2205      	movs	r2, #5
 8016906:	721a      	strb	r2, [r3, #8]

    return -1;
 8016908:	f04f 33ff 	mov.w	r3, #4294967295
 801690c:	e003      	b.n	8016916 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	2200      	movs	r2, #0
 8016912:	60da      	str	r2, [r3, #12]

  return 0;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3718      	adds	r7, #24
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b088      	sub	sp, #32
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	460b      	mov	r3, r1
 801692a:	607a      	str	r2, [r7, #4]
 801692c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	32b0      	adds	r2, #176	@ 0xb0
 8016938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801693c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801693e:	69bb      	ldr	r3, [r7, #24]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d102      	bne.n	801694a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8016944:	f04f 33ff 	mov.w	r3, #4294967295
 8016948:	e05e      	b.n	8016a08 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801694a:	69bb      	ldr	r3, [r7, #24]
 801694c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016950:	2b00      	cmp	r3, #0
 8016952:	d10a      	bne.n	801696a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801695a:	2320      	movs	r3, #32
 801695c:	2205      	movs	r2, #5
 801695e:	68f8      	ldr	r0, [r7, #12]
 8016960:	f000 fb1a 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 8016964:	f04f 33ff 	mov.w	r3, #4294967295
 8016968:	e04e      	b.n	8016a08 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	3301      	adds	r3, #1
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	f003 0301 	and.w	r3, r3, #1
 8016974:	2b00      	cmp	r3, #0
 8016976:	d020      	beq.n	80169ba <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	3302      	adds	r3, #2
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d105      	bne.n	801698e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8016982:	2206      	movs	r2, #6
 8016984:	4922      	ldr	r1, [pc, #136]	@ (8016a10 <SCSI_Inquiry+0xf0>)
 8016986:	69b8      	ldr	r0, [r7, #24]
 8016988:	f001 f876 	bl	8017a78 <SCSI_UpdateBotData>
 801698c:	e03b      	b.n	8016a06 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	3302      	adds	r3, #2
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	2b80      	cmp	r3, #128	@ 0x80
 8016996:	d105      	bne.n	80169a4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8016998:	2208      	movs	r2, #8
 801699a:	491e      	ldr	r1, [pc, #120]	@ (8016a14 <SCSI_Inquiry+0xf4>)
 801699c:	69b8      	ldr	r0, [r7, #24]
 801699e:	f001 f86b 	bl	8017a78 <SCSI_UpdateBotData>
 80169a2:	e030      	b.n	8016a06 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80169a4:	69bb      	ldr	r3, [r7, #24]
 80169a6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80169aa:	2324      	movs	r3, #36	@ 0x24
 80169ac:	2205      	movs	r2, #5
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	f000 faf2 	bl	8016f98 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80169b4:	f04f 33ff 	mov.w	r3, #4294967295
 80169b8:	e026      	b.n	8016a08 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80169c0:	68fa      	ldr	r2, [r7, #12]
 80169c2:	33b0      	adds	r3, #176	@ 0xb0
 80169c4:	009b      	lsls	r3, r3, #2
 80169c6:	4413      	add	r3, r2
 80169c8:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80169ca:	69d9      	ldr	r1, [r3, #28]
 80169cc:	7afa      	ldrb	r2, [r7, #11]
 80169ce:	4613      	mov	r3, r2
 80169d0:	00db      	lsls	r3, r3, #3
 80169d2:	4413      	add	r3, r2
 80169d4:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80169d6:	440b      	add	r3, r1
 80169d8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	3304      	adds	r3, #4
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	3305      	adds	r3, #5
 80169e2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	3304      	adds	r3, #4
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	461a      	mov	r2, r3
 80169ec:	8bfb      	ldrh	r3, [r7, #30]
 80169ee:	4293      	cmp	r3, r2
 80169f0:	d303      	bcc.n	80169fa <SCSI_Inquiry+0xda>
    {
      len = params[4];
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	3304      	adds	r3, #4
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80169fa:	8bfb      	ldrh	r3, [r7, #30]
 80169fc:	461a      	mov	r2, r3
 80169fe:	6979      	ldr	r1, [r7, #20]
 8016a00:	69b8      	ldr	r0, [r7, #24]
 8016a02:	f001 f839 	bl	8017a78 <SCSI_UpdateBotData>
  }

  return 0;
 8016a06:	2300      	movs	r3, #0
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3720      	adds	r7, #32
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	200000b0 	.word	0x200000b0
 8016a14:	200000b8 	.word	0x200000b8

08016a18 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b086      	sub	sp, #24
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	460b      	mov	r3, r1
 8016a22:	607a      	str	r2, [r7, #4]
 8016a24:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	32b0      	adds	r2, #176	@ 0xb0
 8016a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d102      	bne.n	8016a42 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8016a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a40:	e064      	b.n	8016b0c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a48:	68fa      	ldr	r2, [r7, #12]
 8016a4a:	33b0      	adds	r3, #176	@ 0xb0
 8016a4c:	009b      	lsls	r3, r3, #2
 8016a4e:	4413      	add	r3, r2
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	697a      	ldr	r2, [r7, #20]
 8016a56:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016a5a:	697a      	ldr	r2, [r7, #20]
 8016a5c:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016a60:	7af8      	ldrb	r0, [r7, #11]
 8016a62:	4798      	blx	r3
 8016a64:	4603      	mov	r3, r0
 8016a66:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d104      	bne.n	8016a7a <SCSI_ReadCapacity10+0x62>
 8016a70:	697b      	ldr	r3, [r7, #20]
 8016a72:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016a76:	2b02      	cmp	r3, #2
 8016a78:	d108      	bne.n	8016a8c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016a7a:	7af9      	ldrb	r1, [r7, #11]
 8016a7c:	233a      	movs	r3, #58	@ 0x3a
 8016a7e:	2202      	movs	r2, #2
 8016a80:	68f8      	ldr	r0, [r7, #12]
 8016a82:	f000 fa89 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 8016a86:	f04f 33ff 	mov.w	r3, #4294967295
 8016a8a:	e03f      	b.n	8016b0c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016a92:	3b01      	subs	r3, #1
 8016a94:	0e1b      	lsrs	r3, r3, #24
 8016a96:	b2da      	uxtb	r2, r3
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aa2:	3b01      	subs	r3, #1
 8016aa4:	0c1b      	lsrs	r3, r3, #16
 8016aa6:	b2da      	uxtb	r2, r3
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016ab2:	3b01      	subs	r3, #1
 8016ab4:	0a1b      	lsrs	r3, r3, #8
 8016ab6:	b2da      	uxtb	r2, r3
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	b2da      	uxtb	r2, r3
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016ad2:	161b      	asrs	r3, r3, #24
 8016ad4:	b2da      	uxtb	r2, r3
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016ae0:	141b      	asrs	r3, r3, #16
 8016ae2:	b2da      	uxtb	r2, r3
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016aee:	0a1b      	lsrs	r3, r3, #8
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	b2da      	uxtb	r2, r3
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016afe:	b2da      	uxtb	r2, r3
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	2208      	movs	r2, #8
 8016b08:	60da      	str	r2, [r3, #12]

  return 0;
 8016b0a:	2300      	movs	r3, #0

}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3718      	adds	r7, #24
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b088      	sub	sp, #32
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	607a      	str	r2, [r7, #4]
 8016b20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	32b0      	adds	r2, #176	@ 0xb0
 8016b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b30:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016b32:	69bb      	ldr	r3, [r7, #24]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d102      	bne.n	8016b3e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8016b38:	f04f 33ff 	mov.w	r3, #4294967295
 8016b3c:	e09a      	b.n	8016c74 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016b44:	68fa      	ldr	r2, [r7, #12]
 8016b46:	33b0      	adds	r3, #176	@ 0xb0
 8016b48:	009b      	lsls	r3, r3, #2
 8016b4a:	4413      	add	r3, r2
 8016b4c:	685b      	ldr	r3, [r3, #4]
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	69ba      	ldr	r2, [r7, #24]
 8016b52:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016b56:	69ba      	ldr	r2, [r7, #24]
 8016b58:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016b5c:	7af8      	ldrb	r0, [r7, #11]
 8016b5e:	4798      	blx	r3
 8016b60:	4603      	mov	r3, r0
 8016b62:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d104      	bne.n	8016b76 <SCSI_ReadCapacity16+0x62>
 8016b6c:	69bb      	ldr	r3, [r7, #24]
 8016b6e:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016b72:	2b02      	cmp	r3, #2
 8016b74:	d108      	bne.n	8016b88 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016b76:	7af9      	ldrb	r1, [r7, #11]
 8016b78:	233a      	movs	r3, #58	@ 0x3a
 8016b7a:	2202      	movs	r2, #2
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	f000 fa0b 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 8016b82:	f04f 33ff 	mov.w	r3, #4294967295
 8016b86:	e075      	b.n	8016c74 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	330a      	adds	r3, #10
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	330b      	adds	r3, #11
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016b98:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	330c      	adds	r3, #12
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016ba2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	320d      	adds	r2, #13
 8016ba8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016baa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bac:	69bb      	ldr	r3, [r7, #24]
 8016bae:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	61fb      	str	r3, [r7, #28]
 8016bb4:	e008      	b.n	8016bc8 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8016bb6:	69ba      	ldr	r2, [r7, #24]
 8016bb8:	69fb      	ldr	r3, [r7, #28]
 8016bba:	4413      	add	r3, r2
 8016bbc:	3310      	adds	r3, #16
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	3301      	adds	r3, #1
 8016bc6:	61fb      	str	r3, [r7, #28]
 8016bc8:	69bb      	ldr	r3, [r7, #24]
 8016bca:	68db      	ldr	r3, [r3, #12]
 8016bcc:	69fa      	ldr	r2, [r7, #28]
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	d3f1      	bcc.n	8016bb6 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016bd8:	3b01      	subs	r3, #1
 8016bda:	0e1b      	lsrs	r3, r3, #24
 8016bdc:	b2da      	uxtb	r2, r3
 8016bde:	69bb      	ldr	r3, [r7, #24]
 8016be0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016be2:	69bb      	ldr	r3, [r7, #24]
 8016be4:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016be8:	3b01      	subs	r3, #1
 8016bea:	0c1b      	lsrs	r3, r3, #16
 8016bec:	b2da      	uxtb	r2, r3
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016bf2:	69bb      	ldr	r3, [r7, #24]
 8016bf4:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016bf8:	3b01      	subs	r3, #1
 8016bfa:	0a1b      	lsrs	r3, r3, #8
 8016bfc:	b2da      	uxtb	r2, r3
 8016bfe:	69bb      	ldr	r3, [r7, #24]
 8016c00:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016c02:	69bb      	ldr	r3, [r7, #24]
 8016c04:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c08:	b2db      	uxtb	r3, r3
 8016c0a:	3b01      	subs	r3, #1
 8016c0c:	b2da      	uxtb	r2, r3
 8016c0e:	69bb      	ldr	r3, [r7, #24]
 8016c10:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016c12:	69bb      	ldr	r3, [r7, #24]
 8016c14:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c18:	161b      	asrs	r3, r3, #24
 8016c1a:	b2da      	uxtb	r2, r3
 8016c1c:	69bb      	ldr	r3, [r7, #24]
 8016c1e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c26:	141b      	asrs	r3, r3, #16
 8016c28:	b2da      	uxtb	r2, r3
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016c2e:	69bb      	ldr	r3, [r7, #24]
 8016c30:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c34:	0a1b      	lsrs	r3, r3, #8
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	b2da      	uxtb	r2, r3
 8016c3a:	69bb      	ldr	r3, [r7, #24]
 8016c3c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016c3e:	69bb      	ldr	r3, [r7, #24]
 8016c40:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c44:	b2da      	uxtb	r2, r3
 8016c46:	69bb      	ldr	r3, [r7, #24]
 8016c48:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	330a      	adds	r3, #10
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	330b      	adds	r3, #11
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	330c      	adds	r3, #12
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016c64:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016c66:	687a      	ldr	r2, [r7, #4]
 8016c68:	320d      	adds	r2, #13
 8016c6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016c6c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c6e:	69bb      	ldr	r3, [r7, #24]
 8016c70:	60da      	str	r2, [r3, #12]

  return 0;
 8016c72:	2300      	movs	r3, #0
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3720      	adds	r7, #32
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b088      	sub	sp, #32
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	60f8      	str	r0, [r7, #12]
 8016c84:	460b      	mov	r3, r1
 8016c86:	607a      	str	r2, [r7, #4]
 8016c88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	32b0      	adds	r2, #176	@ 0xb0
 8016c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c98:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016c9a:	69bb      	ldr	r3, [r7, #24]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d102      	bne.n	8016ca6 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8016ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ca4:	e061      	b.n	8016d6a <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cac:	68fa      	ldr	r2, [r7, #12]
 8016cae:	33b0      	adds	r3, #176	@ 0xb0
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	4413      	add	r3, r2
 8016cb4:	685b      	ldr	r3, [r3, #4]
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	f107 0214 	add.w	r2, r7, #20
 8016cbc:	f107 0110 	add.w	r1, r7, #16
 8016cc0:	7af8      	ldrb	r0, [r7, #11]
 8016cc2:	4798      	blx	r3
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d104      	bne.n	8016cda <SCSI_ReadFormatCapacity+0x5e>
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016cd6:	2b02      	cmp	r3, #2
 8016cd8:	d108      	bne.n	8016cec <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016cda:	7af9      	ldrb	r1, [r7, #11]
 8016cdc:	233a      	movs	r3, #58	@ 0x3a
 8016cde:	2202      	movs	r2, #2
 8016ce0:	68f8      	ldr	r0, [r7, #12]
 8016ce2:	f000 f959 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 8016ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8016cea:	e03e      	b.n	8016d6a <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8016cec:	2300      	movs	r3, #0
 8016cee:	83fb      	strh	r3, [r7, #30]
 8016cf0:	e007      	b.n	8016d02 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8016cf2:	8bfb      	ldrh	r3, [r7, #30]
 8016cf4:	69ba      	ldr	r2, [r7, #24]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016cfc:	8bfb      	ldrh	r3, [r7, #30]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	83fb      	strh	r3, [r7, #30]
 8016d02:	8bfb      	ldrh	r3, [r7, #30]
 8016d04:	2b0b      	cmp	r3, #11
 8016d06:	d9f4      	bls.n	8016cf2 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8016d08:	69bb      	ldr	r3, [r7, #24]
 8016d0a:	2208      	movs	r2, #8
 8016d0c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	3b01      	subs	r3, #1
 8016d12:	0e1b      	lsrs	r3, r3, #24
 8016d14:	b2da      	uxtb	r2, r3
 8016d16:	69bb      	ldr	r3, [r7, #24]
 8016d18:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	0c1b      	lsrs	r3, r3, #16
 8016d20:	b2da      	uxtb	r2, r3
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	0a1b      	lsrs	r3, r3, #8
 8016d2c:	b2da      	uxtb	r2, r3
 8016d2e:	69bb      	ldr	r3, [r7, #24]
 8016d30:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	b2db      	uxtb	r3, r3
 8016d36:	3b01      	subs	r3, #1
 8016d38:	b2da      	uxtb	r2, r3
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016d3e:	69bb      	ldr	r3, [r7, #24]
 8016d40:	2202      	movs	r2, #2
 8016d42:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016d44:	8abb      	ldrh	r3, [r7, #20]
 8016d46:	141b      	asrs	r3, r3, #16
 8016d48:	b2da      	uxtb	r2, r3
 8016d4a:	69bb      	ldr	r3, [r7, #24]
 8016d4c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016d4e:	8abb      	ldrh	r3, [r7, #20]
 8016d50:	0a1b      	lsrs	r3, r3, #8
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	b2da      	uxtb	r2, r3
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016d5a:	8abb      	ldrh	r3, [r7, #20]
 8016d5c:	b2da      	uxtb	r2, r3
 8016d5e:	69bb      	ldr	r3, [r7, #24]
 8016d60:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	220c      	movs	r2, #12
 8016d66:	60da      	str	r2, [r3, #12]

  return 0;
 8016d68:	2300      	movs	r3, #0
}
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	3720      	adds	r7, #32
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}
	...

08016d74 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b086      	sub	sp, #24
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	60f8      	str	r0, [r7, #12]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	607a      	str	r2, [r7, #4]
 8016d80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	32b0      	adds	r2, #176	@ 0xb0
 8016d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d90:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016d92:	2304      	movs	r3, #4
 8016d94:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d102      	bne.n	8016da2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8016d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016da0:	e027      	b.n	8016df2 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016da8:	68fa      	ldr	r2, [r7, #12]
 8016daa:	33b0      	adds	r3, #176	@ 0xb0
 8016dac:	009b      	lsls	r3, r3, #2
 8016dae:	4413      	add	r3, r2
 8016db0:	685b      	ldr	r3, [r3, #4]
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	7afa      	ldrb	r2, [r7, #11]
 8016db6:	4610      	mov	r0, r2
 8016db8:	4798      	blx	r3
 8016dba:	4603      	mov	r3, r0
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d006      	beq.n	8016dce <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8016dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8016dfc <SCSI_ModeSense6+0x88>)
 8016dc2:	789b      	ldrb	r3, [r3, #2]
 8016dc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016dc8:	b2da      	uxtb	r2, r3
 8016dca:	4b0c      	ldr	r3, [pc, #48]	@ (8016dfc <SCSI_ModeSense6+0x88>)
 8016dcc:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	3304      	adds	r3, #4
 8016dd2:	781b      	ldrb	r3, [r3, #0]
 8016dd4:	461a      	mov	r2, r3
 8016dd6:	8afb      	ldrh	r3, [r7, #22]
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	d303      	bcc.n	8016de4 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	3304      	adds	r3, #4
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016de4:	8afb      	ldrh	r3, [r7, #22]
 8016de6:	461a      	mov	r2, r3
 8016de8:	4904      	ldr	r1, [pc, #16]	@ (8016dfc <SCSI_ModeSense6+0x88>)
 8016dea:	6938      	ldr	r0, [r7, #16]
 8016dec:	f000 fe44 	bl	8017a78 <SCSI_UpdateBotData>

  return 0;
 8016df0:	2300      	movs	r3, #0
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3718      	adds	r7, #24
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	200000c0 	.word	0x200000c0

08016e00 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b086      	sub	sp, #24
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	460b      	mov	r3, r1
 8016e0a:	607a      	str	r2, [r7, #4]
 8016e0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	32b0      	adds	r2, #176	@ 0xb0
 8016e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e1c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016e1e:	2308      	movs	r3, #8
 8016e20:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016e22:	693b      	ldr	r3, [r7, #16]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d102      	bne.n	8016e2e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8016e28:	f04f 33ff 	mov.w	r3, #4294967295
 8016e2c:	e027      	b.n	8016e7e <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e34:	68fa      	ldr	r2, [r7, #12]
 8016e36:	33b0      	adds	r3, #176	@ 0xb0
 8016e38:	009b      	lsls	r3, r3, #2
 8016e3a:	4413      	add	r3, r2
 8016e3c:	685b      	ldr	r3, [r3, #4]
 8016e3e:	68db      	ldr	r3, [r3, #12]
 8016e40:	7afa      	ldrb	r2, [r7, #11]
 8016e42:	4610      	mov	r0, r2
 8016e44:	4798      	blx	r3
 8016e46:	4603      	mov	r3, r0
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d006      	beq.n	8016e5a <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8016e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8016e88 <SCSI_ModeSense10+0x88>)
 8016e4e:	78db      	ldrb	r3, [r3, #3]
 8016e50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016e54:	b2da      	uxtb	r2, r3
 8016e56:	4b0c      	ldr	r3, [pc, #48]	@ (8016e88 <SCSI_ModeSense10+0x88>)
 8016e58:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	3308      	adds	r3, #8
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	461a      	mov	r2, r3
 8016e62:	8afb      	ldrh	r3, [r7, #22]
 8016e64:	4293      	cmp	r3, r2
 8016e66:	d303      	bcc.n	8016e70 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	3308      	adds	r3, #8
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016e70:	8afb      	ldrh	r3, [r7, #22]
 8016e72:	461a      	mov	r2, r3
 8016e74:	4904      	ldr	r1, [pc, #16]	@ (8016e88 <SCSI_ModeSense10+0x88>)
 8016e76:	6938      	ldr	r0, [r7, #16]
 8016e78:	f000 fdfe 	bl	8017a78 <SCSI_UpdateBotData>

  return 0;
 8016e7c:	2300      	movs	r3, #0
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3718      	adds	r7, #24
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	200000c4 	.word	0x200000c4

08016e8c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	460b      	mov	r3, r1
 8016e96:	607a      	str	r2, [r7, #4]
 8016e98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	32b0      	adds	r2, #176	@ 0xb0
 8016ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ea8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d102      	bne.n	8016eb6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8016eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb4:	e06c      	b.n	8016f90 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d10a      	bne.n	8016ed6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016ec6:	2320      	movs	r3, #32
 8016ec8:	2205      	movs	r2, #5
 8016eca:	68f8      	ldr	r0, [r7, #12]
 8016ecc:	f000 f864 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 8016ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed4:	e05c      	b.n	8016f90 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	75fb      	strb	r3, [r7, #23]
 8016eda:	e007      	b.n	8016eec <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8016edc:	7dfb      	ldrb	r3, [r7, #23]
 8016ede:	693a      	ldr	r2, [r7, #16]
 8016ee0:	4413      	add	r3, r2
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016ee6:	7dfb      	ldrb	r3, [r7, #23]
 8016ee8:	3301      	adds	r3, #1
 8016eea:	75fb      	strb	r3, [r7, #23]
 8016eec:	7dfb      	ldrb	r3, [r7, #23]
 8016eee:	2b11      	cmp	r3, #17
 8016ef0:	d9f4      	bls.n	8016edc <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	2270      	movs	r2, #112	@ 0x70
 8016ef6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	220c      	movs	r2, #12
 8016efc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8016f04:	693b      	ldr	r3, [r7, #16]
 8016f06:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d031      	beq.n	8016f72 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f14:	461a      	mov	r2, r3
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016f1c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016f20:	693b      	ldr	r3, [r7, #16]
 8016f22:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f2a:	693a      	ldr	r2, [r7, #16]
 8016f2c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f30:	00db      	lsls	r3, r3, #3
 8016f32:	4413      	add	r3, r2
 8016f34:	791a      	ldrb	r2, [r3, #4]
 8016f36:	693b      	ldr	r3, [r7, #16]
 8016f38:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016f3a:	693b      	ldr	r3, [r7, #16]
 8016f3c:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f40:	693a      	ldr	r2, [r7, #16]
 8016f42:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f46:	00db      	lsls	r3, r3, #3
 8016f48:	4413      	add	r3, r2
 8016f4a:	795a      	ldrb	r2, [r3, #5]
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f56:	3301      	adds	r3, #1
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f66:	2b04      	cmp	r3, #4
 8016f68:	d103      	bne.n	8016f72 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	2212      	movs	r2, #18
 8016f76:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	3304      	adds	r3, #4
 8016f7c:	781b      	ldrb	r3, [r3, #0]
 8016f7e:	2b12      	cmp	r3, #18
 8016f80:	d805      	bhi.n	8016f8e <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	3304      	adds	r3, #4
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016f8e:	2300      	movs	r3, #0
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3718      	adds	r7, #24
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	4608      	mov	r0, r1
 8016fa2:	4611      	mov	r1, r2
 8016fa4:	461a      	mov	r2, r3
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	70fb      	strb	r3, [r7, #3]
 8016faa:	460b      	mov	r3, r1
 8016fac:	70bb      	strb	r3, [r7, #2]
 8016fae:	4613      	mov	r3, r2
 8016fb0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	32b0      	adds	r2, #176	@ 0xb0
 8016fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fc0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d02f      	beq.n	8017028 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016fce:	461a      	mov	r2, r3
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016fd6:	78b9      	ldrb	r1, [r7, #2]
 8016fd8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016fe2:	68fa      	ldr	r2, [r7, #12]
 8016fe4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016fe8:	00db      	lsls	r3, r3, #3
 8016fea:	4413      	add	r3, r2
 8016fec:	787a      	ldrb	r2, [r7, #1]
 8016fee:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016ff6:	68fa      	ldr	r2, [r7, #12]
 8016ff8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	4413      	add	r3, r2
 8017000:	2200      	movs	r2, #0
 8017002:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801700a:	3301      	adds	r3, #1
 801700c:	b2da      	uxtb	r2, r3
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801701a:	2b04      	cmp	r3, #4
 801701c:	d105      	bne.n	801702a <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	2200      	movs	r2, #0
 8017022:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 8017026:	e000      	b.n	801702a <SCSI_SenseCode+0x92>
    return;
 8017028:	bf00      	nop
  }
}
 801702a:	3714      	adds	r7, #20
 801702c:	46bd      	mov	sp, r7
 801702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017032:	4770      	bx	lr

08017034 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b086      	sub	sp, #24
 8017038:	af00      	add	r7, sp, #0
 801703a:	60f8      	str	r0, [r7, #12]
 801703c:	460b      	mov	r3, r1
 801703e:	607a      	str	r2, [r7, #4]
 8017040:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	32b0      	adds	r2, #176	@ 0xb0
 801704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017050:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d102      	bne.n	801705e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8017058:	f04f 33ff 	mov.w	r3, #4294967295
 801705c:	e03b      	b.n	80170d6 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017064:	2b01      	cmp	r3, #1
 8017066:	d10f      	bne.n	8017088 <SCSI_StartStopUnit+0x54>
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	3304      	adds	r3, #4
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	f003 0303 	and.w	r3, r3, #3
 8017072:	2b02      	cmp	r3, #2
 8017074:	d108      	bne.n	8017088 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8017076:	7af9      	ldrb	r1, [r7, #11]
 8017078:	2324      	movs	r3, #36	@ 0x24
 801707a:	2205      	movs	r2, #5
 801707c:	68f8      	ldr	r0, [r7, #12]
 801707e:	f7ff ff8b 	bl	8016f98 <SCSI_SenseCode>

    return -1;
 8017082:	f04f 33ff 	mov.w	r3, #4294967295
 8017086:	e026      	b.n	80170d6 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	3304      	adds	r3, #4
 801708c:	781b      	ldrb	r3, [r3, #0]
 801708e:	f003 0303 	and.w	r3, r3, #3
 8017092:	2b01      	cmp	r3, #1
 8017094:	d104      	bne.n	80170a0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	2200      	movs	r2, #0
 801709a:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801709e:	e016      	b.n	80170ce <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	3304      	adds	r3, #4
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	f003 0303 	and.w	r3, r3, #3
 80170aa:	2b02      	cmp	r3, #2
 80170ac:	d104      	bne.n	80170b8 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	2202      	movs	r2, #2
 80170b2:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80170b6:	e00a      	b.n	80170ce <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	3304      	adds	r3, #4
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	f003 0303 	and.w	r3, r3, #3
 80170c2:	2b03      	cmp	r3, #3
 80170c4:	d103      	bne.n	80170ce <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	2200      	movs	r2, #0
 80170ca:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	2200      	movs	r2, #0
 80170d2:	60da      	str	r2, [r3, #12]

  return 0;
 80170d4:	2300      	movs	r3, #0
}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3718      	adds	r7, #24
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}

080170de <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80170de:	b480      	push	{r7}
 80170e0:	b087      	sub	sp, #28
 80170e2:	af00      	add	r7, sp, #0
 80170e4:	60f8      	str	r0, [r7, #12]
 80170e6:	460b      	mov	r3, r1
 80170e8:	607a      	str	r2, [r7, #4]
 80170ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	32b0      	adds	r2, #176	@ 0xb0
 80170f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170fa:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80170fc:	697b      	ldr	r3, [r7, #20]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d102      	bne.n	8017108 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8017102:	f04f 33ff 	mov.w	r3, #4294967295
 8017106:	e011      	b.n	801712c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	3304      	adds	r3, #4
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d104      	bne.n	801711c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	2200      	movs	r2, #0
 8017116:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801711a:	e003      	b.n	8017124 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	2201      	movs	r2, #1
 8017120:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	2200      	movs	r2, #0
 8017128:	60da      	str	r2, [r3, #12]

  return 0;
 801712a:	2300      	movs	r3, #0
}
 801712c:	4618      	mov	r0, r3
 801712e:	371c      	adds	r7, #28
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b086      	sub	sp, #24
 801713c:	af00      	add	r7, sp, #0
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	460b      	mov	r3, r1
 8017142:	607a      	str	r2, [r7, #4]
 8017144:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	32b0      	adds	r2, #176	@ 0xb0
 8017150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017154:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d102      	bne.n	8017162 <SCSI_Read10+0x2a>
  {
    return -1;
 801715c:	f04f 33ff 	mov.w	r3, #4294967295
 8017160:	e090      	b.n	8017284 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	7a1b      	ldrb	r3, [r3, #8]
 8017166:	2b00      	cmp	r3, #0
 8017168:	f040 8082 	bne.w	8017270 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801716c:	697b      	ldr	r3, [r7, #20]
 801716e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017172:	b25b      	sxtb	r3, r3
 8017174:	2b00      	cmp	r3, #0
 8017176:	db0a      	blt.n	801718e <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801717e:	2320      	movs	r3, #32
 8017180:	2205      	movs	r2, #5
 8017182:	68f8      	ldr	r0, [r7, #12]
 8017184:	f7ff ff08 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017188:	f04f 33ff 	mov.w	r3, #4294967295
 801718c:	e07a      	b.n	8017284 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017194:	2b02      	cmp	r3, #2
 8017196:	d108      	bne.n	80171aa <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017198:	7af9      	ldrb	r1, [r7, #11]
 801719a:	233a      	movs	r3, #58	@ 0x3a
 801719c:	2202      	movs	r2, #2
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f7ff fefa 	bl	8016f98 <SCSI_SenseCode>

      return -1;
 80171a4:	f04f 33ff 	mov.w	r3, #4294967295
 80171a8:	e06c      	b.n	8017284 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80171b0:	68fa      	ldr	r2, [r7, #12]
 80171b2:	33b0      	adds	r3, #176	@ 0xb0
 80171b4:	009b      	lsls	r3, r3, #2
 80171b6:	4413      	add	r3, r2
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	689b      	ldr	r3, [r3, #8]
 80171bc:	7afa      	ldrb	r2, [r7, #11]
 80171be:	4610      	mov	r0, r2
 80171c0:	4798      	blx	r3
 80171c2:	4603      	mov	r3, r0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d008      	beq.n	80171da <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171c8:	7af9      	ldrb	r1, [r7, #11]
 80171ca:	233a      	movs	r3, #58	@ 0x3a
 80171cc:	2202      	movs	r2, #2
 80171ce:	68f8      	ldr	r0, [r7, #12]
 80171d0:	f7ff fee2 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 80171d4:	f04f 33ff 	mov.w	r3, #4294967295
 80171d8:	e054      	b.n	8017284 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	3302      	adds	r3, #2
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	3303      	adds	r3, #3
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80171ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	3304      	adds	r3, #4
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80171f4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	3205      	adds	r2, #5
 80171fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80171fc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80171fe:	697b      	ldr	r3, [r7, #20]
 8017200:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	3307      	adds	r3, #7
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	021b      	lsls	r3, r3, #8
 801720c:	687a      	ldr	r2, [r7, #4]
 801720e:	3208      	adds	r2, #8
 8017210:	7812      	ldrb	r2, [r2, #0]
 8017212:	431a      	orrs	r2, r3
 8017214:	697b      	ldr	r3, [r7, #20]
 8017216:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017226:	7af9      	ldrb	r1, [r7, #11]
 8017228:	68f8      	ldr	r0, [r7, #12]
 801722a:	f000 fadc 	bl	80177e6 <SCSI_CheckAddressRange>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	da02      	bge.n	801723a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017234:	f04f 33ff 	mov.w	r3, #4294967295
 8017238:	e024      	b.n	8017284 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017246:	6979      	ldr	r1, [r7, #20]
 8017248:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 801724c:	fb01 f303 	mul.w	r3, r1, r3
 8017250:	429a      	cmp	r2, r3
 8017252:	d00a      	beq.n	801726a <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801725a:	2320      	movs	r3, #32
 801725c:	2205      	movs	r2, #5
 801725e:	68f8      	ldr	r0, [r7, #12]
 8017260:	f7ff fe9a 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017264:	f04f 33ff 	mov.w	r3, #4294967295
 8017268:	e00c      	b.n	8017284 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801726a:	697b      	ldr	r3, [r7, #20]
 801726c:	2202      	movs	r2, #2
 801726e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017276:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8017278:	7afb      	ldrb	r3, [r7, #11]
 801727a:	4619      	mov	r1, r3
 801727c:	68f8      	ldr	r0, [r7, #12]
 801727e:	f000 fadf 	bl	8017840 <SCSI_ProcessRead>
 8017282:	4603      	mov	r3, r0
}
 8017284:	4618      	mov	r0, r3
 8017286:	3718      	adds	r7, #24
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}

0801728c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	460b      	mov	r3, r1
 8017296:	607a      	str	r2, [r7, #4]
 8017298:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	32b0      	adds	r2, #176	@ 0xb0
 80172a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172a8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d102      	bne.n	80172b6 <SCSI_Read12+0x2a>
  {
    return -1;
 80172b0:	f04f 33ff 	mov.w	r3, #4294967295
 80172b4:	e09a      	b.n	80173ec <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80172b6:	697b      	ldr	r3, [r7, #20]
 80172b8:	7a1b      	ldrb	r3, [r3, #8]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	f040 808c 	bne.w	80173d8 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80172c6:	b25b      	sxtb	r3, r3
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	db0a      	blt.n	80172e2 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80172d2:	2320      	movs	r3, #32
 80172d4:	2205      	movs	r2, #5
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f7ff fe5e 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 80172dc:	f04f 33ff 	mov.w	r3, #4294967295
 80172e0:	e084      	b.n	80173ec <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80172e2:	697b      	ldr	r3, [r7, #20]
 80172e4:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80172e8:	2b02      	cmp	r3, #2
 80172ea:	d108      	bne.n	80172fe <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80172ec:	7af9      	ldrb	r1, [r7, #11]
 80172ee:	233a      	movs	r3, #58	@ 0x3a
 80172f0:	2202      	movs	r2, #2
 80172f2:	68f8      	ldr	r0, [r7, #12]
 80172f4:	f7ff fe50 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 80172f8:	f04f 33ff 	mov.w	r3, #4294967295
 80172fc:	e076      	b.n	80173ec <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017304:	68fa      	ldr	r2, [r7, #12]
 8017306:	33b0      	adds	r3, #176	@ 0xb0
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	4413      	add	r3, r2
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	689b      	ldr	r3, [r3, #8]
 8017310:	7afa      	ldrb	r2, [r7, #11]
 8017312:	4610      	mov	r0, r2
 8017314:	4798      	blx	r3
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	d008      	beq.n	801732e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801731c:	7af9      	ldrb	r1, [r7, #11]
 801731e:	233a      	movs	r3, #58	@ 0x3a
 8017320:	2202      	movs	r2, #2
 8017322:	68f8      	ldr	r0, [r7, #12]
 8017324:	f7ff fe38 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017328:	f04f 33ff 	mov.w	r3, #4294967295
 801732c:	e05e      	b.n	80173ec <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	3302      	adds	r3, #2
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	3303      	adds	r3, #3
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801733e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	3304      	adds	r3, #4
 8017344:	781b      	ldrb	r3, [r3, #0]
 8017346:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017348:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801734a:	687a      	ldr	r2, [r7, #4]
 801734c:	3205      	adds	r2, #5
 801734e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017350:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	3306      	adds	r3, #6
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	3307      	adds	r3, #7
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017368:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	3308      	adds	r3, #8
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8017372:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	3209      	adds	r2, #9
 8017378:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801737a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801738e:	7af9      	ldrb	r1, [r7, #11]
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	f000 fa28 	bl	80177e6 <SCSI_CheckAddressRange>
 8017396:	4603      	mov	r3, r0
 8017398:	2b00      	cmp	r3, #0
 801739a:	da02      	bge.n	80173a2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801739c:	f04f 33ff 	mov.w	r3, #4294967295
 80173a0:	e024      	b.n	80173ec <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173ae:	6979      	ldr	r1, [r7, #20]
 80173b0:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80173b4:	fb01 f303 	mul.w	r3, r1, r3
 80173b8:	429a      	cmp	r2, r3
 80173ba:	d00a      	beq.n	80173d2 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80173c2:	2320      	movs	r3, #32
 80173c4:	2205      	movs	r2, #5
 80173c6:	68f8      	ldr	r0, [r7, #12]
 80173c8:	f7ff fde6 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 80173cc:	f04f 33ff 	mov.w	r3, #4294967295
 80173d0:	e00c      	b.n	80173ec <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80173d2:	697b      	ldr	r3, [r7, #20]
 80173d4:	2202      	movs	r2, #2
 80173d6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80173de:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80173e0:	7afb      	ldrb	r3, [r7, #11]
 80173e2:	4619      	mov	r1, r3
 80173e4:	68f8      	ldr	r0, [r7, #12]
 80173e6:	f000 fa2b 	bl	8017840 <SCSI_ProcessRead>
 80173ea:	4603      	mov	r3, r0
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3718      	adds	r7, #24
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}

080173f4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b086      	sub	sp, #24
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	60f8      	str	r0, [r7, #12]
 80173fc:	460b      	mov	r3, r1
 80173fe:	607a      	str	r2, [r7, #4]
 8017400:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	32b0      	adds	r2, #176	@ 0xb0
 801740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017410:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d102      	bne.n	801741e <SCSI_Write10+0x2a>
  {
    return -1;
 8017418:	f04f 33ff 	mov.w	r3, #4294967295
 801741c:	e0ba      	b.n	8017594 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	7a1b      	ldrb	r3, [r3, #8]
 8017422:	2b00      	cmp	r3, #0
 8017424:	f040 80b0 	bne.w	8017588 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801742e:	2b00      	cmp	r3, #0
 8017430:	d10a      	bne.n	8017448 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017432:	697b      	ldr	r3, [r7, #20]
 8017434:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017438:	2320      	movs	r3, #32
 801743a:	2205      	movs	r2, #5
 801743c:	68f8      	ldr	r0, [r7, #12]
 801743e:	f7ff fdab 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017442:	f04f 33ff 	mov.w	r3, #4294967295
 8017446:	e0a5      	b.n	8017594 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017448:	697b      	ldr	r3, [r7, #20]
 801744a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801744e:	b25b      	sxtb	r3, r3
 8017450:	2b00      	cmp	r3, #0
 8017452:	da0a      	bge.n	801746a <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801745a:	2320      	movs	r3, #32
 801745c:	2205      	movs	r2, #5
 801745e:	68f8      	ldr	r0, [r7, #12]
 8017460:	f7ff fd9a 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017464:	f04f 33ff 	mov.w	r3, #4294967295
 8017468:	e094      	b.n	8017594 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017470:	68fa      	ldr	r2, [r7, #12]
 8017472:	33b0      	adds	r3, #176	@ 0xb0
 8017474:	009b      	lsls	r3, r3, #2
 8017476:	4413      	add	r3, r2
 8017478:	685b      	ldr	r3, [r3, #4]
 801747a:	689b      	ldr	r3, [r3, #8]
 801747c:	7afa      	ldrb	r2, [r7, #11]
 801747e:	4610      	mov	r0, r2
 8017480:	4798      	blx	r3
 8017482:	4603      	mov	r3, r0
 8017484:	2b00      	cmp	r3, #0
 8017486:	d008      	beq.n	801749a <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017488:	7af9      	ldrb	r1, [r7, #11]
 801748a:	233a      	movs	r3, #58	@ 0x3a
 801748c:	2202      	movs	r2, #2
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	f7ff fd82 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017494:	f04f 33ff 	mov.w	r3, #4294967295
 8017498:	e07c      	b.n	8017594 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80174a0:	68fa      	ldr	r2, [r7, #12]
 80174a2:	33b0      	adds	r3, #176	@ 0xb0
 80174a4:	009b      	lsls	r3, r3, #2
 80174a6:	4413      	add	r3, r2
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	7afa      	ldrb	r2, [r7, #11]
 80174ae:	4610      	mov	r0, r2
 80174b0:	4798      	blx	r3
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d008      	beq.n	80174ca <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80174b8:	7af9      	ldrb	r1, [r7, #11]
 80174ba:	2327      	movs	r3, #39	@ 0x27
 80174bc:	2202      	movs	r2, #2
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	f7ff fd6a 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 80174c4:	f04f 33ff 	mov.w	r3, #4294967295
 80174c8:	e064      	b.n	8017594 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	3302      	adds	r3, #2
 80174ce:	781b      	ldrb	r3, [r3, #0]
 80174d0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	3303      	adds	r3, #3
 80174d6:	781b      	ldrb	r3, [r3, #0]
 80174d8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80174da:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	3304      	adds	r3, #4
 80174e0:	781b      	ldrb	r3, [r3, #0]
 80174e2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80174e4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80174e6:	687a      	ldr	r2, [r7, #4]
 80174e8:	3205      	adds	r2, #5
 80174ea:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80174ec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	3307      	adds	r3, #7
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	3208      	adds	r2, #8
 8017500:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017502:	431a      	orrs	r2, r3
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801750a:	697b      	ldr	r3, [r7, #20]
 801750c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017516:	7af9      	ldrb	r1, [r7, #11]
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	f000 f964 	bl	80177e6 <SCSI_CheckAddressRange>
 801751e:	4603      	mov	r3, r0
 8017520:	2b00      	cmp	r3, #0
 8017522:	da02      	bge.n	801752a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017524:	f04f 33ff 	mov.w	r3, #4294967295
 8017528:	e034      	b.n	8017594 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017530:	697a      	ldr	r2, [r7, #20]
 8017532:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017536:	fb02 f303 	mul.w	r3, r2, r3
 801753a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801753c:	697b      	ldr	r3, [r7, #20]
 801753e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017542:	693a      	ldr	r2, [r7, #16]
 8017544:	429a      	cmp	r2, r3
 8017546:	d00a      	beq.n	801755e <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017548:	697b      	ldr	r3, [r7, #20]
 801754a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801754e:	2320      	movs	r3, #32
 8017550:	2205      	movs	r2, #5
 8017552:	68f8      	ldr	r0, [r7, #12]
 8017554:	f7ff fd20 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017558:	f04f 33ff 	mov.w	r3, #4294967295
 801755c:	e01a      	b.n	8017594 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017564:	bf28      	it	cs
 8017566:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 801756a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	2201      	movs	r2, #1
 8017570:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017572:	4b0a      	ldr	r3, [pc, #40]	@ (801759c <SCSI_Write10+0x1a8>)
 8017574:	7819      	ldrb	r1, [r3, #0]
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	f103 0210 	add.w	r2, r3, #16
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	68f8      	ldr	r0, [r7, #12]
 8017580:	f006 f8ad 	bl	801d6de <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8017584:	2300      	movs	r3, #0
 8017586:	e005      	b.n	8017594 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8017588:	7afb      	ldrb	r3, [r7, #11]
 801758a:	4619      	mov	r1, r3
 801758c:	68f8      	ldr	r0, [r7, #12]
 801758e:	f000 f9dd 	bl	801794c <SCSI_ProcessWrite>
 8017592:	4603      	mov	r3, r0
}
 8017594:	4618      	mov	r0, r3
 8017596:	3718      	adds	r7, #24
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}
 801759c:	200000af 	.word	0x200000af

080175a0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b086      	sub	sp, #24
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	460b      	mov	r3, r1
 80175aa:	607a      	str	r2, [r7, #4]
 80175ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	32b0      	adds	r2, #176	@ 0xb0
 80175b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175bc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80175be:	697b      	ldr	r3, [r7, #20]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d102      	bne.n	80175ca <SCSI_Write12+0x2a>
  {
    return -1;
 80175c4:	f04f 33ff 	mov.w	r3, #4294967295
 80175c8:	e0ca      	b.n	8017760 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	7a1b      	ldrb	r3, [r3, #8]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	f040 80c0 	bne.w	8017754 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80175d4:	697b      	ldr	r3, [r7, #20]
 80175d6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d10a      	bne.n	80175f4 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80175e4:	2320      	movs	r3, #32
 80175e6:	2205      	movs	r2, #5
 80175e8:	68f8      	ldr	r0, [r7, #12]
 80175ea:	f7ff fcd5 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 80175ee:	f04f 33ff 	mov.w	r3, #4294967295
 80175f2:	e0b5      	b.n	8017760 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80175fa:	b25b      	sxtb	r3, r3
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	da0a      	bge.n	8017616 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017606:	2320      	movs	r3, #32
 8017608:	2205      	movs	r2, #5
 801760a:	68f8      	ldr	r0, [r7, #12]
 801760c:	f7ff fcc4 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017610:	f04f 33ff 	mov.w	r3, #4294967295
 8017614:	e0a4      	b.n	8017760 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801761c:	68fa      	ldr	r2, [r7, #12]
 801761e:	33b0      	adds	r3, #176	@ 0xb0
 8017620:	009b      	lsls	r3, r3, #2
 8017622:	4413      	add	r3, r2
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	689b      	ldr	r3, [r3, #8]
 8017628:	7afa      	ldrb	r2, [r7, #11]
 801762a:	4610      	mov	r0, r2
 801762c:	4798      	blx	r3
 801762e:	4603      	mov	r3, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	d00b      	beq.n	801764c <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017634:	7af9      	ldrb	r1, [r7, #11]
 8017636:	233a      	movs	r3, #58	@ 0x3a
 8017638:	2202      	movs	r2, #2
 801763a:	68f8      	ldr	r0, [r7, #12]
 801763c:	f7ff fcac 	bl	8016f98 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	2205      	movs	r2, #5
 8017644:	721a      	strb	r2, [r3, #8]
      return -1;
 8017646:	f04f 33ff 	mov.w	r3, #4294967295
 801764a:	e089      	b.n	8017760 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017652:	68fa      	ldr	r2, [r7, #12]
 8017654:	33b0      	adds	r3, #176	@ 0xb0
 8017656:	009b      	lsls	r3, r3, #2
 8017658:	4413      	add	r3, r2
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	68db      	ldr	r3, [r3, #12]
 801765e:	7afa      	ldrb	r2, [r7, #11]
 8017660:	4610      	mov	r0, r2
 8017662:	4798      	blx	r3
 8017664:	4603      	mov	r3, r0
 8017666:	2b00      	cmp	r3, #0
 8017668:	d00b      	beq.n	8017682 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801766a:	7af9      	ldrb	r1, [r7, #11]
 801766c:	2327      	movs	r3, #39	@ 0x27
 801766e:	2202      	movs	r2, #2
 8017670:	68f8      	ldr	r0, [r7, #12]
 8017672:	f7ff fc91 	bl	8016f98 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	2205      	movs	r2, #5
 801767a:	721a      	strb	r2, [r3, #8]
      return -1;
 801767c:	f04f 33ff 	mov.w	r3, #4294967295
 8017680:	e06e      	b.n	8017760 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	3302      	adds	r3, #2
 8017686:	781b      	ldrb	r3, [r3, #0]
 8017688:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	3303      	adds	r3, #3
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017692:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	3304      	adds	r3, #4
 8017698:	781b      	ldrb	r3, [r3, #0]
 801769a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801769c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801769e:	687a      	ldr	r2, [r7, #4]
 80176a0:	3205      	adds	r2, #5
 80176a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80176a4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176a6:	697b      	ldr	r3, [r7, #20]
 80176a8:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	3306      	adds	r3, #6
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	3307      	adds	r3, #7
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176bc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	3308      	adds	r3, #8
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80176c6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	3209      	adds	r2, #9
 80176cc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80176ce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80176d6:	697b      	ldr	r3, [r7, #20]
 80176d8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80176dc:	697b      	ldr	r3, [r7, #20]
 80176de:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80176e2:	7af9      	ldrb	r1, [r7, #11]
 80176e4:	68f8      	ldr	r0, [r7, #12]
 80176e6:	f000 f87e 	bl	80177e6 <SCSI_CheckAddressRange>
 80176ea:	4603      	mov	r3, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	da02      	bge.n	80176f6 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80176f0:	f04f 33ff 	mov.w	r3, #4294967295
 80176f4:	e034      	b.n	8017760 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80176f6:	697b      	ldr	r3, [r7, #20]
 80176f8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80176fc:	697a      	ldr	r2, [r7, #20]
 80176fe:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017702:	fb02 f303 	mul.w	r3, r2, r3
 8017706:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017708:	697b      	ldr	r3, [r7, #20]
 801770a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801770e:	693a      	ldr	r2, [r7, #16]
 8017710:	429a      	cmp	r2, r3
 8017712:	d00a      	beq.n	801772a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017714:	697b      	ldr	r3, [r7, #20]
 8017716:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801771a:	2320      	movs	r3, #32
 801771c:	2205      	movs	r2, #5
 801771e:	68f8      	ldr	r0, [r7, #12]
 8017720:	f7ff fc3a 	bl	8016f98 <SCSI_SenseCode>
      return -1;
 8017724:	f04f 33ff 	mov.w	r3, #4294967295
 8017728:	e01a      	b.n	8017760 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017730:	bf28      	it	cs
 8017732:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017736:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017738:	697b      	ldr	r3, [r7, #20]
 801773a:	2201      	movs	r2, #1
 801773c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801773e:	4b0a      	ldr	r3, [pc, #40]	@ (8017768 <SCSI_Write12+0x1c8>)
 8017740:	7819      	ldrb	r1, [r3, #0]
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	f103 0210 	add.w	r2, r3, #16
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f005 ffc7 	bl	801d6de <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8017750:	2300      	movs	r3, #0
 8017752:	e005      	b.n	8017760 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8017754:	7afb      	ldrb	r3, [r7, #11]
 8017756:	4619      	mov	r1, r3
 8017758:	68f8      	ldr	r0, [r7, #12]
 801775a:	f000 f8f7 	bl	801794c <SCSI_ProcessWrite>
 801775e:	4603      	mov	r3, r0
}
 8017760:	4618      	mov	r0, r3
 8017762:	3718      	adds	r7, #24
 8017764:	46bd      	mov	sp, r7
 8017766:	bd80      	pop	{r7, pc}
 8017768:	200000af 	.word	0x200000af

0801776c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b086      	sub	sp, #24
 8017770:	af00      	add	r7, sp, #0
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	460b      	mov	r3, r1
 8017776:	607a      	str	r2, [r7, #4]
 8017778:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	32b0      	adds	r2, #176	@ 0xb0
 8017784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017788:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d102      	bne.n	8017796 <SCSI_Verify10+0x2a>
  {
    return -1;
 8017790:	f04f 33ff 	mov.w	r3, #4294967295
 8017794:	e023      	b.n	80177de <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	3301      	adds	r3, #1
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	f003 0302 	and.w	r3, r3, #2
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d008      	beq.n	80177b6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80177a4:	7af9      	ldrb	r1, [r7, #11]
 80177a6:	2324      	movs	r3, #36	@ 0x24
 80177a8:	2205      	movs	r2, #5
 80177aa:	68f8      	ldr	r0, [r7, #12]
 80177ac:	f7ff fbf4 	bl	8016f98 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80177b0:	f04f 33ff 	mov.w	r3, #4294967295
 80177b4:	e013      	b.n	80177de <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80177bc:	697b      	ldr	r3, [r7, #20]
 80177be:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80177c2:	7af9      	ldrb	r1, [r7, #11]
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f000 f80e 	bl	80177e6 <SCSI_CheckAddressRange>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	da02      	bge.n	80177d6 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80177d0:	f04f 33ff 	mov.w	r3, #4294967295
 80177d4:	e003      	b.n	80177de <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	2200      	movs	r2, #0
 80177da:	60da      	str	r2, [r3, #12]

  return 0;
 80177dc:	2300      	movs	r3, #0
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3718      	adds	r7, #24
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b086      	sub	sp, #24
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	60f8      	str	r0, [r7, #12]
 80177ee:	607a      	str	r2, [r7, #4]
 80177f0:	603b      	str	r3, [r7, #0]
 80177f2:	460b      	mov	r3, r1
 80177f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	32b0      	adds	r2, #176	@ 0xb0
 8017800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017804:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d102      	bne.n	8017812 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 801780c:	f04f 33ff 	mov.w	r3, #4294967295
 8017810:	e011      	b.n	8017836 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	441a      	add	r2, r3
 8017818:	697b      	ldr	r3, [r7, #20]
 801781a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801781e:	429a      	cmp	r2, r3
 8017820:	d908      	bls.n	8017834 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8017822:	7af9      	ldrb	r1, [r7, #11]
 8017824:	2321      	movs	r3, #33	@ 0x21
 8017826:	2205      	movs	r2, #5
 8017828:	68f8      	ldr	r0, [r7, #12]
 801782a:	f7ff fbb5 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 801782e:	f04f 33ff 	mov.w	r3, #4294967295
 8017832:	e000      	b.n	8017836 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8017834:	2300      	movs	r3, #0
}
 8017836:	4618      	mov	r0, r3
 8017838:	3718      	adds	r7, #24
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
	...

08017840 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017840:	b590      	push	{r4, r7, lr}
 8017842:	b085      	sub	sp, #20
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	460b      	mov	r3, r1
 801784a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	32b0      	adds	r2, #176	@ 0xb0
 8017856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801785a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d102      	bne.n	8017868 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8017862:	f04f 33ff 	mov.w	r3, #4294967295
 8017866:	e06a      	b.n	801793e <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801786e:	68fa      	ldr	r2, [r7, #12]
 8017870:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017874:	fb02 f303 	mul.w	r3, r2, r3
 8017878:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017880:	bf28      	it	cs
 8017882:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017886:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	33b0      	adds	r3, #176	@ 0xb0
 8017892:	009b      	lsls	r3, r3, #2
 8017894:	4413      	add	r3, r2
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	691c      	ldr	r4, [r3, #16]
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	f103 0110 	add.w	r1, r3, #16
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80178ac:	4618      	mov	r0, r3
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178b4:	b29b      	uxth	r3, r3
 80178b6:	78f8      	ldrb	r0, [r7, #3]
 80178b8:	47a0      	blx	r4
 80178ba:	4603      	mov	r3, r0
 80178bc:	2b00      	cmp	r3, #0
 80178be:	da08      	bge.n	80178d2 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80178c0:	78f9      	ldrb	r1, [r7, #3]
 80178c2:	2311      	movs	r3, #17
 80178c4:	2204      	movs	r2, #4
 80178c6:	6878      	ldr	r0, [r7, #4]
 80178c8:	f7ff fb66 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 80178cc:	f04f 33ff 	mov.w	r3, #4294967295
 80178d0:	e035      	b.n	801793e <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80178d2:	4b1d      	ldr	r3, [pc, #116]	@ (8017948 <SCSI_ProcessRead+0x108>)
 80178d4:	7819      	ldrb	r1, [r3, #0]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f103 0210 	add.w	r2, r3, #16
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f005 fedc 	bl	801d69c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80178f0:	4619      	mov	r1, r3
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80178f8:	441a      	add	r2, r3
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801790c:	4619      	mov	r1, r3
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	fbb3 f3f1 	udiv	r3, r3, r1
 8017914:	1ad2      	subs	r2, r2, r3
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	1ad2      	subs	r2, r2, r3
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017932:	2b00      	cmp	r3, #0
 8017934:	d102      	bne.n	801793c <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	2203      	movs	r2, #3
 801793a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801793c:	2300      	movs	r3, #0
}
 801793e:	4618      	mov	r0, r3
 8017940:	3714      	adds	r7, #20
 8017942:	46bd      	mov	sp, r7
 8017944:	bd90      	pop	{r4, r7, pc}
 8017946:	bf00      	nop
 8017948:	200000ae 	.word	0x200000ae

0801794c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801794c:	b590      	push	{r4, r7, lr}
 801794e:	b085      	sub	sp, #20
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	460b      	mov	r3, r1
 8017956:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	32b0      	adds	r2, #176	@ 0xb0
 8017962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017966:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d102      	bne.n	8017974 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 801796e:	f04f 33ff 	mov.w	r3, #4294967295
 8017972:	e07a      	b.n	8017a6a <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801797a:	68fa      	ldr	r2, [r7, #12]
 801797c:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017980:	fb02 f303 	mul.w	r3, r2, r3
 8017984:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801798c:	bf28      	it	cs
 801798e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017992:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	33b0      	adds	r3, #176	@ 0xb0
 801799e:	009b      	lsls	r3, r3, #2
 80179a0:	4413      	add	r3, r2
 80179a2:	685b      	ldr	r3, [r3, #4]
 80179a4:	695c      	ldr	r4, [r3, #20]
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	f103 0110 	add.w	r1, r3, #16
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80179b8:	4618      	mov	r0, r3
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179c0:	b29b      	uxth	r3, r3
 80179c2:	78f8      	ldrb	r0, [r7, #3]
 80179c4:	47a0      	blx	r4
 80179c6:	4603      	mov	r3, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	da08      	bge.n	80179de <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80179cc:	78f9      	ldrb	r1, [r7, #3]
 80179ce:	2303      	movs	r3, #3
 80179d0:	2204      	movs	r2, #4
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	f7ff fae0 	bl	8016f98 <SCSI_SenseCode>
    return -1;
 80179d8:	f04f 33ff 	mov.w	r3, #4294967295
 80179dc:	e045      	b.n	8017a6a <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80179ea:	4619      	mov	r1, r3
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80179f2:	441a      	add	r2, r3
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a06:	4619      	mov	r1, r3
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a0e:	1ad2      	subs	r2, r2, r3
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	1ad2      	subs	r2, r2, r3
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d104      	bne.n	8017a3a <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017a30:	2100      	movs	r1, #0
 8017a32:	6878      	ldr	r0, [r7, #4]
 8017a34:	f7fe fce2 	bl	80163fc <MSC_BOT_SendCSW>
 8017a38:	e016      	b.n	8017a68 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a40:	68fa      	ldr	r2, [r7, #12]
 8017a42:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017a46:	fb02 f303 	mul.w	r3, r2, r3
 8017a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017a4e:	bf28      	it	cs
 8017a50:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017a54:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017a56:	4b07      	ldr	r3, [pc, #28]	@ (8017a74 <SCSI_ProcessWrite+0x128>)
 8017a58:	7819      	ldrb	r1, [r3, #0]
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	f103 0210 	add.w	r2, r3, #16
 8017a60:	68bb      	ldr	r3, [r7, #8]
 8017a62:	6878      	ldr	r0, [r7, #4]
 8017a64:	f005 fe3b 	bl	801d6de <USBD_LL_PrepareReceive>
  }

  return 0;
 8017a68:	2300      	movs	r3, #0
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3714      	adds	r7, #20
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd90      	pop	{r4, r7, pc}
 8017a72:	bf00      	nop
 8017a74:	200000af 	.word	0x200000af

08017a78 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8017a78:	b480      	push	{r7}
 8017a7a:	b087      	sub	sp, #28
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	60f8      	str	r0, [r7, #12]
 8017a80:	60b9      	str	r1, [r7, #8]
 8017a82:	4613      	mov	r3, r2
 8017a84:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8017a86:	88fb      	ldrh	r3, [r7, #6]
 8017a88:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d102      	bne.n	8017a96 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8017a90:	f04f 33ff 	mov.w	r3, #4294967295
 8017a94:	e013      	b.n	8017abe <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8017a96:	8afa      	ldrh	r2, [r7, #22]
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017a9c:	e00b      	b.n	8017ab6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8017a9e:	8afb      	ldrh	r3, [r7, #22]
 8017aa0:	3b01      	subs	r3, #1
 8017aa2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8017aa4:	8afb      	ldrh	r3, [r7, #22]
 8017aa6:	68ba      	ldr	r2, [r7, #8]
 8017aa8:	441a      	add	r2, r3
 8017aaa:	8afb      	ldrh	r3, [r7, #22]
 8017aac:	7811      	ldrb	r1, [r2, #0]
 8017aae:	68fa      	ldr	r2, [r7, #12]
 8017ab0:	4413      	add	r3, r2
 8017ab2:	460a      	mov	r2, r1
 8017ab4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8017ab6:	8afb      	ldrh	r3, [r7, #22]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d1f0      	bne.n	8017a9e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8017abc:	2300      	movs	r3, #0
}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	371c      	adds	r7, #28
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017aca:	b580      	push	{r7, lr}
 8017acc:	b086      	sub	sp, #24
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	60f8      	str	r0, [r7, #12]
 8017ad2:	60b9      	str	r1, [r7, #8]
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d101      	bne.n	8017ae2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017ade:	2303      	movs	r3, #3
 8017ae0:	e01f      	b.n	8017b22 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	2200      	movs	r2, #0
 8017aee:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	2200      	movs	r2, #0
 8017af6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017afa:	68bb      	ldr	r3, [r7, #8]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d003      	beq.n	8017b08 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	68ba      	ldr	r2, [r7, #8]
 8017b04:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	2201      	movs	r2, #1
 8017b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	79fa      	ldrb	r2, [r7, #7]
 8017b14:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017b16:	68f8      	ldr	r0, [r7, #12]
 8017b18:	f005 fc36 	bl	801d388 <USBD_LL_Init>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	3718      	adds	r7, #24
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}

08017b2a <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017b2a:	b580      	push	{r7, lr}
 8017b2c:	b084      	sub	sp, #16
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	f005 fcaa 	bl	801d48c <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d009      	beq.n	8017b5e <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	687a      	ldr	r2, [r7, #4]
 8017b54:	6852      	ldr	r2, [r2, #4]
 8017b56:	b2d2      	uxtb	r2, r2
 8017b58:	4611      	mov	r1, r2
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2200      	movs	r2, #0
 8017b62:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2200      	movs	r2, #0
 8017b6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2200      	movs	r2, #0
 8017b72:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f005 fc52 	bl	801d420 <USBD_LL_DeInit>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	73fb      	strb	r3, [r7, #15]

  return ret;
 8017b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3710      	adds	r7, #16
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}

08017b8a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	b084      	sub	sp, #16
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	6078      	str	r0, [r7, #4]
 8017b92:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017b94:	2300      	movs	r3, #0
 8017b96:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d101      	bne.n	8017ba2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017b9e:	2303      	movs	r3, #3
 8017ba0:	e025      	b.n	8017bee <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	683a      	ldr	r2, [r7, #0]
 8017ba6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	32ae      	adds	r2, #174	@ 0xae
 8017bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d00f      	beq.n	8017bde <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	32ae      	adds	r2, #174	@ 0xae
 8017bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bce:	f107 020e 	add.w	r2, r7, #14
 8017bd2:	4610      	mov	r0, r2
 8017bd4:	4798      	blx	r3
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017be4:	1c5a      	adds	r2, r3, #1
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017bec:	2300      	movs	r3, #0
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3710      	adds	r7, #16
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b082      	sub	sp, #8
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f005 fc29 	bl	801d456 <USBD_LL_Start>
 8017c04:	4603      	mov	r3, r0
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3708      	adds	r7, #8
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}

08017c0e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017c0e:	b580      	push	{r7, lr}
 8017c10:	b082      	sub	sp, #8
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f005 fc38 	bl	801d48c <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d009      	beq.n	8017c3a <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	6852      	ldr	r2, [r2, #4]
 8017c32:	b2d2      	uxtb	r2, r2
 8017c34:	4611      	mov	r1, r2
 8017c36:	6878      	ldr	r0, [r7, #4]
 8017c38:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8017c3a:	2300      	movs	r3, #0
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017c44:	b480      	push	{r7}
 8017c46:	b083      	sub	sp, #12
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017c4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017c4e:	4618      	mov	r0, r3
 8017c50:	370c      	adds	r7, #12
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr

08017c5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b084      	sub	sp, #16
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
 8017c62:	460b      	mov	r3, r1
 8017c64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c66:	2300      	movs	r3, #0
 8017c68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d009      	beq.n	8017c88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	78fa      	ldrb	r2, [r7, #3]
 8017c7e:	4611      	mov	r1, r2
 8017c80:	6878      	ldr	r0, [r7, #4]
 8017c82:	4798      	blx	r3
 8017c84:	4603      	mov	r3, r0
 8017c86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3710      	adds	r7, #16
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b084      	sub	sp, #16
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	6078      	str	r0, [r7, #4]
 8017c9a:	460b      	mov	r3, r1
 8017c9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ca8:	685b      	ldr	r3, [r3, #4]
 8017caa:	78fa      	ldrb	r2, [r7, #3]
 8017cac:	4611      	mov	r1, r2
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	4798      	blx	r3
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d001      	beq.n	8017cbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017cb8:	2303      	movs	r3, #3
 8017cba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3710      	adds	r7, #16
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}

08017cc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017cc6:	b580      	push	{r7, lr}
 8017cc8:	b084      	sub	sp, #16
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	6078      	str	r0, [r7, #4]
 8017cce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017cd6:	6839      	ldr	r1, [r7, #0]
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f001 f90c 	bl	8018ef6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017cec:	461a      	mov	r2, r3
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017cfa:	f003 031f 	and.w	r3, r3, #31
 8017cfe:	2b02      	cmp	r3, #2
 8017d00:	d01a      	beq.n	8017d38 <USBD_LL_SetupStage+0x72>
 8017d02:	2b02      	cmp	r3, #2
 8017d04:	d822      	bhi.n	8017d4c <USBD_LL_SetupStage+0x86>
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d002      	beq.n	8017d10 <USBD_LL_SetupStage+0x4a>
 8017d0a:	2b01      	cmp	r3, #1
 8017d0c:	d00a      	beq.n	8017d24 <USBD_LL_SetupStage+0x5e>
 8017d0e:	e01d      	b.n	8017d4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d16:	4619      	mov	r1, r3
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f000 fb63 	bl	80183e4 <USBD_StdDevReq>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	73fb      	strb	r3, [r7, #15]
      break;
 8017d22:	e020      	b.n	8017d66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f000 fbcb 	bl	80184c8 <USBD_StdItfReq>
 8017d32:	4603      	mov	r3, r0
 8017d34:	73fb      	strb	r3, [r7, #15]
      break;
 8017d36:	e016      	b.n	8017d66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d3e:	4619      	mov	r1, r3
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f000 fc2d 	bl	80185a0 <USBD_StdEPReq>
 8017d46:	4603      	mov	r3, r0
 8017d48:	73fb      	strb	r3, [r7, #15]
      break;
 8017d4a:	e00c      	b.n	8017d66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d52:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	4619      	mov	r1, r3
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f005 fc15 	bl	801d58a <USBD_LL_StallEP>
 8017d60:	4603      	mov	r3, r0
 8017d62:	73fb      	strb	r3, [r7, #15]
      break;
 8017d64:	bf00      	nop
  }

  return ret;
 8017d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d68:	4618      	mov	r0, r3
 8017d6a:	3710      	adds	r7, #16
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}

08017d70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b086      	sub	sp, #24
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	60f8      	str	r0, [r7, #12]
 8017d78:	460b      	mov	r3, r1
 8017d7a:	607a      	str	r2, [r7, #4]
 8017d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017d82:	7afb      	ldrb	r3, [r7, #11]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d16e      	bne.n	8017e66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017d8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017d96:	2b03      	cmp	r3, #3
 8017d98:	f040 8098 	bne.w	8017ecc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	689a      	ldr	r2, [r3, #8]
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	68db      	ldr	r3, [r3, #12]
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d913      	bls.n	8017dd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017da8:	693b      	ldr	r3, [r7, #16]
 8017daa:	689a      	ldr	r2, [r3, #8]
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	1ad2      	subs	r2, r2, r3
 8017db2:	693b      	ldr	r3, [r7, #16]
 8017db4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017db6:	693b      	ldr	r3, [r7, #16]
 8017db8:	68da      	ldr	r2, [r3, #12]
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	689b      	ldr	r3, [r3, #8]
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	bf28      	it	cs
 8017dc2:	4613      	movcs	r3, r2
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	6879      	ldr	r1, [r7, #4]
 8017dc8:	68f8      	ldr	r0, [r7, #12]
 8017dca:	f001 f96b 	bl	80190a4 <USBD_CtlContinueRx>
 8017dce:	e07d      	b.n	8017ecc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017dd6:	f003 031f 	and.w	r3, r3, #31
 8017dda:	2b02      	cmp	r3, #2
 8017ddc:	d014      	beq.n	8017e08 <USBD_LL_DataOutStage+0x98>
 8017dde:	2b02      	cmp	r3, #2
 8017de0:	d81d      	bhi.n	8017e1e <USBD_LL_DataOutStage+0xae>
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d002      	beq.n	8017dec <USBD_LL_DataOutStage+0x7c>
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d003      	beq.n	8017df2 <USBD_LL_DataOutStage+0x82>
 8017dea:	e018      	b.n	8017e1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017dec:	2300      	movs	r3, #0
 8017dee:	75bb      	strb	r3, [r7, #22]
            break;
 8017df0:	e018      	b.n	8017e24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017df8:	b2db      	uxtb	r3, r3
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	68f8      	ldr	r0, [r7, #12]
 8017dfe:	f000 fa64 	bl	80182ca <USBD_CoreFindIF>
 8017e02:	4603      	mov	r3, r0
 8017e04:	75bb      	strb	r3, [r7, #22]
            break;
 8017e06:	e00d      	b.n	8017e24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	4619      	mov	r1, r3
 8017e12:	68f8      	ldr	r0, [r7, #12]
 8017e14:	f000 fa66 	bl	80182e4 <USBD_CoreFindEP>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	75bb      	strb	r3, [r7, #22]
            break;
 8017e1c:	e002      	b.n	8017e24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	75bb      	strb	r3, [r7, #22]
            break;
 8017e22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017e24:	7dbb      	ldrb	r3, [r7, #22]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d119      	bne.n	8017e5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	2b03      	cmp	r3, #3
 8017e34:	d113      	bne.n	8017e5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017e36:	7dba      	ldrb	r2, [r7, #22]
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	32ae      	adds	r2, #174	@ 0xae
 8017e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e40:	691b      	ldr	r3, [r3, #16]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d00b      	beq.n	8017e5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017e46:	7dba      	ldrb	r2, [r7, #22]
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017e4e:	7dba      	ldrb	r2, [r7, #22]
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	32ae      	adds	r2, #174	@ 0xae
 8017e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e58:	691b      	ldr	r3, [r3, #16]
 8017e5a:	68f8      	ldr	r0, [r7, #12]
 8017e5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017e5e:	68f8      	ldr	r0, [r7, #12]
 8017e60:	f001 f931 	bl	80190c6 <USBD_CtlSendStatus>
 8017e64:	e032      	b.n	8017ecc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017e66:	7afb      	ldrb	r3, [r7, #11]
 8017e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	4619      	mov	r1, r3
 8017e70:	68f8      	ldr	r0, [r7, #12]
 8017e72:	f000 fa37 	bl	80182e4 <USBD_CoreFindEP>
 8017e76:	4603      	mov	r3, r0
 8017e78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017e7a:	7dbb      	ldrb	r3, [r7, #22]
 8017e7c:	2bff      	cmp	r3, #255	@ 0xff
 8017e7e:	d025      	beq.n	8017ecc <USBD_LL_DataOutStage+0x15c>
 8017e80:	7dbb      	ldrb	r3, [r7, #22]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d122      	bne.n	8017ecc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e8c:	b2db      	uxtb	r3, r3
 8017e8e:	2b03      	cmp	r3, #3
 8017e90:	d117      	bne.n	8017ec2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017e92:	7dba      	ldrb	r2, [r7, #22]
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	32ae      	adds	r2, #174	@ 0xae
 8017e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e9c:	699b      	ldr	r3, [r3, #24]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d00f      	beq.n	8017ec2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017ea2:	7dba      	ldrb	r2, [r7, #22]
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017eaa:	7dba      	ldrb	r2, [r7, #22]
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	32ae      	adds	r2, #174	@ 0xae
 8017eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017eb4:	699b      	ldr	r3, [r3, #24]
 8017eb6:	7afa      	ldrb	r2, [r7, #11]
 8017eb8:	4611      	mov	r1, r2
 8017eba:	68f8      	ldr	r0, [r7, #12]
 8017ebc:	4798      	blx	r3
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017ec2:	7dfb      	ldrb	r3, [r7, #23]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d001      	beq.n	8017ecc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017ec8:	7dfb      	ldrb	r3, [r7, #23]
 8017eca:	e000      	b.n	8017ece <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017ecc:	2300      	movs	r3, #0
}
 8017ece:	4618      	mov	r0, r3
 8017ed0:	3718      	adds	r7, #24
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}

08017ed6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b086      	sub	sp, #24
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	60f8      	str	r0, [r7, #12]
 8017ede:	460b      	mov	r3, r1
 8017ee0:	607a      	str	r2, [r7, #4]
 8017ee2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017ee4:	7afb      	ldrb	r3, [r7, #11]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d16f      	bne.n	8017fca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	3314      	adds	r3, #20
 8017eee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017ef6:	2b02      	cmp	r3, #2
 8017ef8:	d15a      	bne.n	8017fb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	689a      	ldr	r2, [r3, #8]
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d914      	bls.n	8017f30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	689a      	ldr	r2, [r3, #8]
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	68db      	ldr	r3, [r3, #12]
 8017f0e:	1ad2      	subs	r2, r2, r3
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	689b      	ldr	r3, [r3, #8]
 8017f18:	461a      	mov	r2, r3
 8017f1a:	6879      	ldr	r1, [r7, #4]
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	f001 f8b0 	bl	8019082 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f22:	2300      	movs	r3, #0
 8017f24:	2200      	movs	r2, #0
 8017f26:	2100      	movs	r1, #0
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f005 fbd8 	bl	801d6de <USBD_LL_PrepareReceive>
 8017f2e:	e03f      	b.n	8017fb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	68da      	ldr	r2, [r3, #12]
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	689b      	ldr	r3, [r3, #8]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d11c      	bne.n	8017f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	685a      	ldr	r2, [r3, #4]
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d316      	bcc.n	8017f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	685a      	ldr	r2, [r3, #4]
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017f52:	429a      	cmp	r2, r3
 8017f54:	d20f      	bcs.n	8017f76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017f56:	2200      	movs	r2, #0
 8017f58:	2100      	movs	r1, #0
 8017f5a:	68f8      	ldr	r0, [r7, #12]
 8017f5c:	f001 f891 	bl	8019082 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	2200      	movs	r2, #0
 8017f64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f68:	2300      	movs	r3, #0
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	2100      	movs	r1, #0
 8017f6e:	68f8      	ldr	r0, [r7, #12]
 8017f70:	f005 fbb5 	bl	801d6de <USBD_LL_PrepareReceive>
 8017f74:	e01c      	b.n	8017fb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	2b03      	cmp	r3, #3
 8017f80:	d10f      	bne.n	8017fa2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017f88:	68db      	ldr	r3, [r3, #12]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d009      	beq.n	8017fa2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2200      	movs	r2, #0
 8017f92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	68f8      	ldr	r0, [r7, #12]
 8017fa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017fa2:	2180      	movs	r1, #128	@ 0x80
 8017fa4:	68f8      	ldr	r0, [r7, #12]
 8017fa6:	f005 faf0 	bl	801d58a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017faa:	68f8      	ldr	r0, [r7, #12]
 8017fac:	f001 f89e 	bl	80190ec <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d03a      	beq.n	8018030 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017fba:	68f8      	ldr	r0, [r7, #12]
 8017fbc:	f7ff fe42 	bl	8017c44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017fc8:	e032      	b.n	8018030 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017fca:	7afb      	ldrb	r3, [r7, #11]
 8017fcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	4619      	mov	r1, r3
 8017fd4:	68f8      	ldr	r0, [r7, #12]
 8017fd6:	f000 f985 	bl	80182e4 <USBD_CoreFindEP>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017fde:	7dfb      	ldrb	r3, [r7, #23]
 8017fe0:	2bff      	cmp	r3, #255	@ 0xff
 8017fe2:	d025      	beq.n	8018030 <USBD_LL_DataInStage+0x15a>
 8017fe4:	7dfb      	ldrb	r3, [r7, #23]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d122      	bne.n	8018030 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	2b03      	cmp	r3, #3
 8017ff4:	d11c      	bne.n	8018030 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8017ff6:	7dfa      	ldrb	r2, [r7, #23]
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	32ae      	adds	r2, #174	@ 0xae
 8017ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018000:	695b      	ldr	r3, [r3, #20]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d014      	beq.n	8018030 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018006:	7dfa      	ldrb	r2, [r7, #23]
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801800e:	7dfa      	ldrb	r2, [r7, #23]
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	32ae      	adds	r2, #174	@ 0xae
 8018014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018018:	695b      	ldr	r3, [r3, #20]
 801801a:	7afa      	ldrb	r2, [r7, #11]
 801801c:	4611      	mov	r1, r2
 801801e:	68f8      	ldr	r0, [r7, #12]
 8018020:	4798      	blx	r3
 8018022:	4603      	mov	r3, r0
 8018024:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018026:	7dbb      	ldrb	r3, [r7, #22]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d001      	beq.n	8018030 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801802c:	7dbb      	ldrb	r3, [r7, #22]
 801802e:	e000      	b.n	8018032 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018030:	2300      	movs	r3, #0
}
 8018032:	4618      	mov	r0, r3
 8018034:	3718      	adds	r7, #24
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}

0801803a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801803a:	b580      	push	{r7, lr}
 801803c:	b084      	sub	sp, #16
 801803e:	af00      	add	r7, sp, #0
 8018040:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018042:	2300      	movs	r3, #0
 8018044:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	2201      	movs	r2, #1
 801804a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	2200      	movs	r2, #0
 8018052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	2200      	movs	r2, #0
 801805a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2200      	movs	r2, #0
 8018060:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2200      	movs	r2, #0
 8018068:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018072:	2b00      	cmp	r3, #0
 8018074:	d014      	beq.n	80180a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d00e      	beq.n	80180a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	687a      	ldr	r2, [r7, #4]
 801808c:	6852      	ldr	r2, [r2, #4]
 801808e:	b2d2      	uxtb	r2, r2
 8018090:	4611      	mov	r1, r2
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	4798      	blx	r3
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d001      	beq.n	80180a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801809c:	2303      	movs	r3, #3
 801809e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180a0:	2340      	movs	r3, #64	@ 0x40
 80180a2:	2200      	movs	r2, #0
 80180a4:	2100      	movs	r1, #0
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	f005 fa0b 	bl	801d4c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2201      	movs	r2, #1
 80180b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	2240      	movs	r2, #64	@ 0x40
 80180b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180bc:	2340      	movs	r3, #64	@ 0x40
 80180be:	2200      	movs	r2, #0
 80180c0:	2180      	movs	r1, #128	@ 0x80
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f005 f9fd 	bl	801d4c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2201      	movs	r2, #1
 80180cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	2240      	movs	r2, #64	@ 0x40
 80180d2:	621a      	str	r2, [r3, #32]

  return ret;
 80180d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3710      	adds	r7, #16
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}

080180de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80180de:	b480      	push	{r7}
 80180e0:	b083      	sub	sp, #12
 80180e2:	af00      	add	r7, sp, #0
 80180e4:	6078      	str	r0, [r7, #4]
 80180e6:	460b      	mov	r3, r1
 80180e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	78fa      	ldrb	r2, [r7, #3]
 80180ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80180f0:	2300      	movs	r3, #0
}
 80180f2:	4618      	mov	r0, r3
 80180f4:	370c      	adds	r7, #12
 80180f6:	46bd      	mov	sp, r7
 80180f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fc:	4770      	bx	lr

080180fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80180fe:	b480      	push	{r7}
 8018100:	b083      	sub	sp, #12
 8018102:	af00      	add	r7, sp, #0
 8018104:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801810c:	b2db      	uxtb	r3, r3
 801810e:	2b04      	cmp	r3, #4
 8018110:	d006      	beq.n	8018120 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018118:	b2da      	uxtb	r2, r3
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2204      	movs	r2, #4
 8018124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018128:	2300      	movs	r3, #0
}
 801812a:	4618      	mov	r0, r3
 801812c:	370c      	adds	r7, #12
 801812e:	46bd      	mov	sp, r7
 8018130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018134:	4770      	bx	lr

08018136 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018136:	b480      	push	{r7}
 8018138:	b083      	sub	sp, #12
 801813a:	af00      	add	r7, sp, #0
 801813c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018144:	b2db      	uxtb	r3, r3
 8018146:	2b04      	cmp	r3, #4
 8018148:	d106      	bne.n	8018158 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018150:	b2da      	uxtb	r2, r3
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8018158:	2300      	movs	r3, #0
}
 801815a:	4618      	mov	r0, r3
 801815c:	370c      	adds	r7, #12
 801815e:	46bd      	mov	sp, r7
 8018160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018164:	4770      	bx	lr

08018166 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018166:	b580      	push	{r7, lr}
 8018168:	b082      	sub	sp, #8
 801816a:	af00      	add	r7, sp, #0
 801816c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018174:	b2db      	uxtb	r3, r3
 8018176:	2b03      	cmp	r3, #3
 8018178:	d110      	bne.n	801819c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018180:	2b00      	cmp	r3, #0
 8018182:	d00b      	beq.n	801819c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801818a:	69db      	ldr	r3, [r3, #28]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d005      	beq.n	801819c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018196:	69db      	ldr	r3, [r3, #28]
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801819c:	2300      	movs	r3, #0
}
 801819e:	4618      	mov	r0, r3
 80181a0:	3708      	adds	r7, #8
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b082      	sub	sp, #8
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
 80181ae:	460b      	mov	r3, r1
 80181b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	32ae      	adds	r2, #174	@ 0xae
 80181bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d101      	bne.n	80181c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80181c4:	2303      	movs	r3, #3
 80181c6:	e01c      	b.n	8018202 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181ce:	b2db      	uxtb	r3, r3
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	d115      	bne.n	8018200 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	32ae      	adds	r2, #174	@ 0xae
 80181de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181e2:	6a1b      	ldr	r3, [r3, #32]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d00b      	beq.n	8018200 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	32ae      	adds	r2, #174	@ 0xae
 80181f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181f6:	6a1b      	ldr	r3, [r3, #32]
 80181f8:	78fa      	ldrb	r2, [r7, #3]
 80181fa:	4611      	mov	r1, r2
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018200:	2300      	movs	r3, #0
}
 8018202:	4618      	mov	r0, r3
 8018204:	3708      	adds	r7, #8
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}

0801820a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801820a:	b580      	push	{r7, lr}
 801820c:	b082      	sub	sp, #8
 801820e:	af00      	add	r7, sp, #0
 8018210:	6078      	str	r0, [r7, #4]
 8018212:	460b      	mov	r3, r1
 8018214:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	32ae      	adds	r2, #174	@ 0xae
 8018220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d101      	bne.n	801822c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018228:	2303      	movs	r3, #3
 801822a:	e01c      	b.n	8018266 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018232:	b2db      	uxtb	r3, r3
 8018234:	2b03      	cmp	r3, #3
 8018236:	d115      	bne.n	8018264 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	32ae      	adds	r2, #174	@ 0xae
 8018242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018248:	2b00      	cmp	r3, #0
 801824a:	d00b      	beq.n	8018264 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	32ae      	adds	r2, #174	@ 0xae
 8018256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801825c:	78fa      	ldrb	r2, [r7, #3]
 801825e:	4611      	mov	r1, r2
 8018260:	6878      	ldr	r0, [r7, #4]
 8018262:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018264:	2300      	movs	r3, #0
}
 8018266:	4618      	mov	r0, r3
 8018268:	3708      	adds	r7, #8
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801826e:	b480      	push	{r7}
 8018270:	b083      	sub	sp, #12
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018276:	2300      	movs	r3, #0
}
 8018278:	4618      	mov	r0, r3
 801827a:	370c      	adds	r7, #12
 801827c:	46bd      	mov	sp, r7
 801827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018282:	4770      	bx	lr

08018284 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b084      	sub	sp, #16
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801828c:	2300      	movs	r3, #0
 801828e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	2201      	movs	r2, #1
 8018294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d00e      	beq.n	80182c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	6852      	ldr	r2, [r2, #4]
 80182ae:	b2d2      	uxtb	r2, r2
 80182b0:	4611      	mov	r1, r2
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	4798      	blx	r3
 80182b6:	4603      	mov	r3, r0
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d001      	beq.n	80182c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80182bc:	2303      	movs	r3, #3
 80182be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80182c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80182c2:	4618      	mov	r0, r3
 80182c4:	3710      	adds	r7, #16
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}

080182ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80182ca:	b480      	push	{r7}
 80182cc:	b083      	sub	sp, #12
 80182ce:	af00      	add	r7, sp, #0
 80182d0:	6078      	str	r0, [r7, #4]
 80182d2:	460b      	mov	r3, r1
 80182d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80182d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80182d8:	4618      	mov	r0, r3
 80182da:	370c      	adds	r7, #12
 80182dc:	46bd      	mov	sp, r7
 80182de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e2:	4770      	bx	lr

080182e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80182e4:	b480      	push	{r7}
 80182e6:	b083      	sub	sp, #12
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	460b      	mov	r3, r1
 80182ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80182f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	370c      	adds	r7, #12
 80182f6:	46bd      	mov	sp, r7
 80182f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fc:	4770      	bx	lr

080182fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80182fe:	b580      	push	{r7, lr}
 8018300:	b086      	sub	sp, #24
 8018302:	af00      	add	r7, sp, #0
 8018304:	6078      	str	r0, [r7, #4]
 8018306:	460b      	mov	r3, r1
 8018308:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018312:	2300      	movs	r3, #0
 8018314:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	885b      	ldrh	r3, [r3, #2]
 801831a:	b29b      	uxth	r3, r3
 801831c:	68fa      	ldr	r2, [r7, #12]
 801831e:	7812      	ldrb	r2, [r2, #0]
 8018320:	4293      	cmp	r3, r2
 8018322:	d91f      	bls.n	8018364 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801832a:	e013      	b.n	8018354 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801832c:	f107 030a 	add.w	r3, r7, #10
 8018330:	4619      	mov	r1, r3
 8018332:	6978      	ldr	r0, [r7, #20]
 8018334:	f000 f81b 	bl	801836e <USBD_GetNextDesc>
 8018338:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801833a:	697b      	ldr	r3, [r7, #20]
 801833c:	785b      	ldrb	r3, [r3, #1]
 801833e:	2b05      	cmp	r3, #5
 8018340:	d108      	bne.n	8018354 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018346:	693b      	ldr	r3, [r7, #16]
 8018348:	789b      	ldrb	r3, [r3, #2]
 801834a:	78fa      	ldrb	r2, [r7, #3]
 801834c:	429a      	cmp	r2, r3
 801834e:	d008      	beq.n	8018362 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018350:	2300      	movs	r3, #0
 8018352:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	885b      	ldrh	r3, [r3, #2]
 8018358:	b29a      	uxth	r2, r3
 801835a:	897b      	ldrh	r3, [r7, #10]
 801835c:	429a      	cmp	r2, r3
 801835e:	d8e5      	bhi.n	801832c <USBD_GetEpDesc+0x2e>
 8018360:	e000      	b.n	8018364 <USBD_GetEpDesc+0x66>
          break;
 8018362:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018364:	693b      	ldr	r3, [r7, #16]
}
 8018366:	4618      	mov	r0, r3
 8018368:	3718      	adds	r7, #24
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}

0801836e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801836e:	b480      	push	{r7}
 8018370:	b085      	sub	sp, #20
 8018372:	af00      	add	r7, sp, #0
 8018374:	6078      	str	r0, [r7, #4]
 8018376:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	881b      	ldrh	r3, [r3, #0]
 8018380:	68fa      	ldr	r2, [r7, #12]
 8018382:	7812      	ldrb	r2, [r2, #0]
 8018384:	4413      	add	r3, r2
 8018386:	b29a      	uxth	r2, r3
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	461a      	mov	r2, r3
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	4413      	add	r3, r2
 8018396:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018398:	68fb      	ldr	r3, [r7, #12]
}
 801839a:	4618      	mov	r0, r3
 801839c:	3714      	adds	r7, #20
 801839e:	46bd      	mov	sp, r7
 80183a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a4:	4770      	bx	lr

080183a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80183a6:	b480      	push	{r7}
 80183a8:	b087      	sub	sp, #28
 80183aa:	af00      	add	r7, sp, #0
 80183ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	3301      	adds	r3, #1
 80183bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80183be:	697b      	ldr	r3, [r7, #20]
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80183c4:	8a3b      	ldrh	r3, [r7, #16]
 80183c6:	021b      	lsls	r3, r3, #8
 80183c8:	b21a      	sxth	r2, r3
 80183ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80183ce:	4313      	orrs	r3, r2
 80183d0:	b21b      	sxth	r3, r3
 80183d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80183d4:	89fb      	ldrh	r3, [r7, #14]
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	371c      	adds	r7, #28
 80183da:	46bd      	mov	sp, r7
 80183dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e0:	4770      	bx	lr
	...

080183e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b084      	sub	sp, #16
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
 80183ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80183ee:	2300      	movs	r3, #0
 80183f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80183fa:	2b40      	cmp	r3, #64	@ 0x40
 80183fc:	d005      	beq.n	801840a <USBD_StdDevReq+0x26>
 80183fe:	2b40      	cmp	r3, #64	@ 0x40
 8018400:	d857      	bhi.n	80184b2 <USBD_StdDevReq+0xce>
 8018402:	2b00      	cmp	r3, #0
 8018404:	d00f      	beq.n	8018426 <USBD_StdDevReq+0x42>
 8018406:	2b20      	cmp	r3, #32
 8018408:	d153      	bne.n	80184b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	32ae      	adds	r2, #174	@ 0xae
 8018414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018418:	689b      	ldr	r3, [r3, #8]
 801841a:	6839      	ldr	r1, [r7, #0]
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	4798      	blx	r3
 8018420:	4603      	mov	r3, r0
 8018422:	73fb      	strb	r3, [r7, #15]
      break;
 8018424:	e04a      	b.n	80184bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	785b      	ldrb	r3, [r3, #1]
 801842a:	2b09      	cmp	r3, #9
 801842c:	d83b      	bhi.n	80184a6 <USBD_StdDevReq+0xc2>
 801842e:	a201      	add	r2, pc, #4	@ (adr r2, 8018434 <USBD_StdDevReq+0x50>)
 8018430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018434:	08018489 	.word	0x08018489
 8018438:	0801849d 	.word	0x0801849d
 801843c:	080184a7 	.word	0x080184a7
 8018440:	08018493 	.word	0x08018493
 8018444:	080184a7 	.word	0x080184a7
 8018448:	08018467 	.word	0x08018467
 801844c:	0801845d 	.word	0x0801845d
 8018450:	080184a7 	.word	0x080184a7
 8018454:	0801847f 	.word	0x0801847f
 8018458:	08018471 	.word	0x08018471
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801845c:	6839      	ldr	r1, [r7, #0]
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f000 fa3c 	bl	80188dc <USBD_GetDescriptor>
          break;
 8018464:	e024      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018466:	6839      	ldr	r1, [r7, #0]
 8018468:	6878      	ldr	r0, [r7, #4]
 801846a:	f000 fba1 	bl	8018bb0 <USBD_SetAddress>
          break;
 801846e:	e01f      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018470:	6839      	ldr	r1, [r7, #0]
 8018472:	6878      	ldr	r0, [r7, #4]
 8018474:	f000 fbe0 	bl	8018c38 <USBD_SetConfig>
 8018478:	4603      	mov	r3, r0
 801847a:	73fb      	strb	r3, [r7, #15]
          break;
 801847c:	e018      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801847e:	6839      	ldr	r1, [r7, #0]
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f000 fc83 	bl	8018d8c <USBD_GetConfig>
          break;
 8018486:	e013      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018488:	6839      	ldr	r1, [r7, #0]
 801848a:	6878      	ldr	r0, [r7, #4]
 801848c:	f000 fcb4 	bl	8018df8 <USBD_GetStatus>
          break;
 8018490:	e00e      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018492:	6839      	ldr	r1, [r7, #0]
 8018494:	6878      	ldr	r0, [r7, #4]
 8018496:	f000 fce3 	bl	8018e60 <USBD_SetFeature>
          break;
 801849a:	e009      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801849c:	6839      	ldr	r1, [r7, #0]
 801849e:	6878      	ldr	r0, [r7, #4]
 80184a0:	f000 fd07 	bl	8018eb2 <USBD_ClrFeature>
          break;
 80184a4:	e004      	b.n	80184b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80184a6:	6839      	ldr	r1, [r7, #0]
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f000 fd5e 	bl	8018f6a <USBD_CtlError>
          break;
 80184ae:	bf00      	nop
      }
      break;
 80184b0:	e004      	b.n	80184bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80184b2:	6839      	ldr	r1, [r7, #0]
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f000 fd58 	bl	8018f6a <USBD_CtlError>
      break;
 80184ba:	bf00      	nop
  }

  return ret;
 80184bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3710      	adds	r7, #16
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop

080184c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b084      	sub	sp, #16
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
 80184d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80184d2:	2300      	movs	r3, #0
 80184d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	781b      	ldrb	r3, [r3, #0]
 80184da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80184de:	2b40      	cmp	r3, #64	@ 0x40
 80184e0:	d005      	beq.n	80184ee <USBD_StdItfReq+0x26>
 80184e2:	2b40      	cmp	r3, #64	@ 0x40
 80184e4:	d852      	bhi.n	801858c <USBD_StdItfReq+0xc4>
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d001      	beq.n	80184ee <USBD_StdItfReq+0x26>
 80184ea:	2b20      	cmp	r3, #32
 80184ec:	d14e      	bne.n	801858c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80184f4:	b2db      	uxtb	r3, r3
 80184f6:	3b01      	subs	r3, #1
 80184f8:	2b02      	cmp	r3, #2
 80184fa:	d840      	bhi.n	801857e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	889b      	ldrh	r3, [r3, #4]
 8018500:	b2db      	uxtb	r3, r3
 8018502:	2b01      	cmp	r3, #1
 8018504:	d836      	bhi.n	8018574 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	889b      	ldrh	r3, [r3, #4]
 801850a:	b2db      	uxtb	r3, r3
 801850c:	4619      	mov	r1, r3
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f7ff fedb 	bl	80182ca <USBD_CoreFindIF>
 8018514:	4603      	mov	r3, r0
 8018516:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018518:	7bbb      	ldrb	r3, [r7, #14]
 801851a:	2bff      	cmp	r3, #255	@ 0xff
 801851c:	d01d      	beq.n	801855a <USBD_StdItfReq+0x92>
 801851e:	7bbb      	ldrb	r3, [r7, #14]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d11a      	bne.n	801855a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018524:	7bba      	ldrb	r2, [r7, #14]
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	32ae      	adds	r2, #174	@ 0xae
 801852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801852e:	689b      	ldr	r3, [r3, #8]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d00f      	beq.n	8018554 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018534:	7bba      	ldrb	r2, [r7, #14]
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801853c:	7bba      	ldrb	r2, [r7, #14]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	32ae      	adds	r2, #174	@ 0xae
 8018542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018546:	689b      	ldr	r3, [r3, #8]
 8018548:	6839      	ldr	r1, [r7, #0]
 801854a:	6878      	ldr	r0, [r7, #4]
 801854c:	4798      	blx	r3
 801854e:	4603      	mov	r3, r0
 8018550:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018552:	e004      	b.n	801855e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8018554:	2303      	movs	r3, #3
 8018556:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018558:	e001      	b.n	801855e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801855a:	2303      	movs	r3, #3
 801855c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	88db      	ldrh	r3, [r3, #6]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d110      	bne.n	8018588 <USBD_StdItfReq+0xc0>
 8018566:	7bfb      	ldrb	r3, [r7, #15]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d10d      	bne.n	8018588 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f000 fdaa 	bl	80190c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018572:	e009      	b.n	8018588 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8018574:	6839      	ldr	r1, [r7, #0]
 8018576:	6878      	ldr	r0, [r7, #4]
 8018578:	f000 fcf7 	bl	8018f6a <USBD_CtlError>
          break;
 801857c:	e004      	b.n	8018588 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801857e:	6839      	ldr	r1, [r7, #0]
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f000 fcf2 	bl	8018f6a <USBD_CtlError>
          break;
 8018586:	e000      	b.n	801858a <USBD_StdItfReq+0xc2>
          break;
 8018588:	bf00      	nop
      }
      break;
 801858a:	e004      	b.n	8018596 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801858c:	6839      	ldr	r1, [r7, #0]
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f000 fceb 	bl	8018f6a <USBD_CtlError>
      break;
 8018594:	bf00      	nop
  }

  return ret;
 8018596:	7bfb      	ldrb	r3, [r7, #15]
}
 8018598:	4618      	mov	r0, r3
 801859a:	3710      	adds	r7, #16
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b084      	sub	sp, #16
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80185aa:	2300      	movs	r3, #0
 80185ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	889b      	ldrh	r3, [r3, #4]
 80185b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	781b      	ldrb	r3, [r3, #0]
 80185b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80185bc:	2b40      	cmp	r3, #64	@ 0x40
 80185be:	d007      	beq.n	80185d0 <USBD_StdEPReq+0x30>
 80185c0:	2b40      	cmp	r3, #64	@ 0x40
 80185c2:	f200 817f 	bhi.w	80188c4 <USBD_StdEPReq+0x324>
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d02a      	beq.n	8018620 <USBD_StdEPReq+0x80>
 80185ca:	2b20      	cmp	r3, #32
 80185cc:	f040 817a 	bne.w	80188c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80185d0:	7bbb      	ldrb	r3, [r7, #14]
 80185d2:	4619      	mov	r1, r3
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f7ff fe85 	bl	80182e4 <USBD_CoreFindEP>
 80185da:	4603      	mov	r3, r0
 80185dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80185de:	7b7b      	ldrb	r3, [r7, #13]
 80185e0:	2bff      	cmp	r3, #255	@ 0xff
 80185e2:	f000 8174 	beq.w	80188ce <USBD_StdEPReq+0x32e>
 80185e6:	7b7b      	ldrb	r3, [r7, #13]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f040 8170 	bne.w	80188ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80185ee:	7b7a      	ldrb	r2, [r7, #13]
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80185f6:	7b7a      	ldrb	r2, [r7, #13]
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	32ae      	adds	r2, #174	@ 0xae
 80185fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018600:	689b      	ldr	r3, [r3, #8]
 8018602:	2b00      	cmp	r3, #0
 8018604:	f000 8163 	beq.w	80188ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018608:	7b7a      	ldrb	r2, [r7, #13]
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	32ae      	adds	r2, #174	@ 0xae
 801860e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018612:	689b      	ldr	r3, [r3, #8]
 8018614:	6839      	ldr	r1, [r7, #0]
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	4798      	blx	r3
 801861a:	4603      	mov	r3, r0
 801861c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801861e:	e156      	b.n	80188ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	785b      	ldrb	r3, [r3, #1]
 8018624:	2b03      	cmp	r3, #3
 8018626:	d008      	beq.n	801863a <USBD_StdEPReq+0x9a>
 8018628:	2b03      	cmp	r3, #3
 801862a:	f300 8145 	bgt.w	80188b8 <USBD_StdEPReq+0x318>
 801862e:	2b00      	cmp	r3, #0
 8018630:	f000 809b 	beq.w	801876a <USBD_StdEPReq+0x1ca>
 8018634:	2b01      	cmp	r3, #1
 8018636:	d03c      	beq.n	80186b2 <USBD_StdEPReq+0x112>
 8018638:	e13e      	b.n	80188b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018640:	b2db      	uxtb	r3, r3
 8018642:	2b02      	cmp	r3, #2
 8018644:	d002      	beq.n	801864c <USBD_StdEPReq+0xac>
 8018646:	2b03      	cmp	r3, #3
 8018648:	d016      	beq.n	8018678 <USBD_StdEPReq+0xd8>
 801864a:	e02c      	b.n	80186a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801864c:	7bbb      	ldrb	r3, [r7, #14]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d00d      	beq.n	801866e <USBD_StdEPReq+0xce>
 8018652:	7bbb      	ldrb	r3, [r7, #14]
 8018654:	2b80      	cmp	r3, #128	@ 0x80
 8018656:	d00a      	beq.n	801866e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018658:	7bbb      	ldrb	r3, [r7, #14]
 801865a:	4619      	mov	r1, r3
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f004 ff94 	bl	801d58a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018662:	2180      	movs	r1, #128	@ 0x80
 8018664:	6878      	ldr	r0, [r7, #4]
 8018666:	f004 ff90 	bl	801d58a <USBD_LL_StallEP>
 801866a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801866c:	e020      	b.n	80186b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801866e:	6839      	ldr	r1, [r7, #0]
 8018670:	6878      	ldr	r0, [r7, #4]
 8018672:	f000 fc7a 	bl	8018f6a <USBD_CtlError>
              break;
 8018676:	e01b      	b.n	80186b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	885b      	ldrh	r3, [r3, #2]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d10e      	bne.n	801869e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018680:	7bbb      	ldrb	r3, [r7, #14]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d00b      	beq.n	801869e <USBD_StdEPReq+0xfe>
 8018686:	7bbb      	ldrb	r3, [r7, #14]
 8018688:	2b80      	cmp	r3, #128	@ 0x80
 801868a:	d008      	beq.n	801869e <USBD_StdEPReq+0xfe>
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	88db      	ldrh	r3, [r3, #6]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d104      	bne.n	801869e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8018694:	7bbb      	ldrb	r3, [r7, #14]
 8018696:	4619      	mov	r1, r3
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f004 ff76 	bl	801d58a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f000 fd11 	bl	80190c6 <USBD_CtlSendStatus>

              break;
 80186a4:	e004      	b.n	80186b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80186a6:	6839      	ldr	r1, [r7, #0]
 80186a8:	6878      	ldr	r0, [r7, #4]
 80186aa:	f000 fc5e 	bl	8018f6a <USBD_CtlError>
              break;
 80186ae:	bf00      	nop
          }
          break;
 80186b0:	e107      	b.n	80188c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	2b02      	cmp	r3, #2
 80186bc:	d002      	beq.n	80186c4 <USBD_StdEPReq+0x124>
 80186be:	2b03      	cmp	r3, #3
 80186c0:	d016      	beq.n	80186f0 <USBD_StdEPReq+0x150>
 80186c2:	e04b      	b.n	801875c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80186c4:	7bbb      	ldrb	r3, [r7, #14]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d00d      	beq.n	80186e6 <USBD_StdEPReq+0x146>
 80186ca:	7bbb      	ldrb	r3, [r7, #14]
 80186cc:	2b80      	cmp	r3, #128	@ 0x80
 80186ce:	d00a      	beq.n	80186e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80186d0:	7bbb      	ldrb	r3, [r7, #14]
 80186d2:	4619      	mov	r1, r3
 80186d4:	6878      	ldr	r0, [r7, #4]
 80186d6:	f004 ff58 	bl	801d58a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80186da:	2180      	movs	r1, #128	@ 0x80
 80186dc:	6878      	ldr	r0, [r7, #4]
 80186de:	f004 ff54 	bl	801d58a <USBD_LL_StallEP>
 80186e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80186e4:	e040      	b.n	8018768 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80186e6:	6839      	ldr	r1, [r7, #0]
 80186e8:	6878      	ldr	r0, [r7, #4]
 80186ea:	f000 fc3e 	bl	8018f6a <USBD_CtlError>
              break;
 80186ee:	e03b      	b.n	8018768 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	885b      	ldrh	r3, [r3, #2]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d136      	bne.n	8018766 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80186f8:	7bbb      	ldrb	r3, [r7, #14]
 80186fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d004      	beq.n	801870c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018702:	7bbb      	ldrb	r3, [r7, #14]
 8018704:	4619      	mov	r1, r3
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f004 ff5e 	bl	801d5c8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f000 fcda 	bl	80190c6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8018712:	7bbb      	ldrb	r3, [r7, #14]
 8018714:	4619      	mov	r1, r3
 8018716:	6878      	ldr	r0, [r7, #4]
 8018718:	f7ff fde4 	bl	80182e4 <USBD_CoreFindEP>
 801871c:	4603      	mov	r3, r0
 801871e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018720:	7b7b      	ldrb	r3, [r7, #13]
 8018722:	2bff      	cmp	r3, #255	@ 0xff
 8018724:	d01f      	beq.n	8018766 <USBD_StdEPReq+0x1c6>
 8018726:	7b7b      	ldrb	r3, [r7, #13]
 8018728:	2b00      	cmp	r3, #0
 801872a:	d11c      	bne.n	8018766 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801872c:	7b7a      	ldrb	r2, [r7, #13]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8018734:	7b7a      	ldrb	r2, [r7, #13]
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	32ae      	adds	r2, #174	@ 0xae
 801873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801873e:	689b      	ldr	r3, [r3, #8]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d010      	beq.n	8018766 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018744:	7b7a      	ldrb	r2, [r7, #13]
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	32ae      	adds	r2, #174	@ 0xae
 801874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801874e:	689b      	ldr	r3, [r3, #8]
 8018750:	6839      	ldr	r1, [r7, #0]
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	4798      	blx	r3
 8018756:	4603      	mov	r3, r0
 8018758:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801875a:	e004      	b.n	8018766 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801875c:	6839      	ldr	r1, [r7, #0]
 801875e:	6878      	ldr	r0, [r7, #4]
 8018760:	f000 fc03 	bl	8018f6a <USBD_CtlError>
              break;
 8018764:	e000      	b.n	8018768 <USBD_StdEPReq+0x1c8>
              break;
 8018766:	bf00      	nop
          }
          break;
 8018768:	e0ab      	b.n	80188c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018770:	b2db      	uxtb	r3, r3
 8018772:	2b02      	cmp	r3, #2
 8018774:	d002      	beq.n	801877c <USBD_StdEPReq+0x1dc>
 8018776:	2b03      	cmp	r3, #3
 8018778:	d032      	beq.n	80187e0 <USBD_StdEPReq+0x240>
 801877a:	e097      	b.n	80188ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801877c:	7bbb      	ldrb	r3, [r7, #14]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d007      	beq.n	8018792 <USBD_StdEPReq+0x1f2>
 8018782:	7bbb      	ldrb	r3, [r7, #14]
 8018784:	2b80      	cmp	r3, #128	@ 0x80
 8018786:	d004      	beq.n	8018792 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8018788:	6839      	ldr	r1, [r7, #0]
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	f000 fbed 	bl	8018f6a <USBD_CtlError>
                break;
 8018790:	e091      	b.n	80188b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018796:	2b00      	cmp	r3, #0
 8018798:	da0b      	bge.n	80187b2 <USBD_StdEPReq+0x212>
 801879a:	7bbb      	ldrb	r3, [r7, #14]
 801879c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187a0:	4613      	mov	r3, r2
 80187a2:	009b      	lsls	r3, r3, #2
 80187a4:	4413      	add	r3, r2
 80187a6:	009b      	lsls	r3, r3, #2
 80187a8:	3310      	adds	r3, #16
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	4413      	add	r3, r2
 80187ae:	3304      	adds	r3, #4
 80187b0:	e00b      	b.n	80187ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80187b2:	7bbb      	ldrb	r3, [r7, #14]
 80187b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187b8:	4613      	mov	r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	4413      	add	r3, r2
 80187be:	009b      	lsls	r3, r3, #2
 80187c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80187c4:	687a      	ldr	r2, [r7, #4]
 80187c6:	4413      	add	r3, r2
 80187c8:	3304      	adds	r3, #4
 80187ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	2200      	movs	r2, #0
 80187d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	2202      	movs	r2, #2
 80187d6:	4619      	mov	r1, r3
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f000 fc37 	bl	801904c <USBD_CtlSendData>
              break;
 80187de:	e06a      	b.n	80188b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80187e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	da11      	bge.n	801880c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80187e8:	7bbb      	ldrb	r3, [r7, #14]
 80187ea:	f003 020f 	and.w	r2, r3, #15
 80187ee:	6879      	ldr	r1, [r7, #4]
 80187f0:	4613      	mov	r3, r2
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	4413      	add	r3, r2
 80187f6:	009b      	lsls	r3, r3, #2
 80187f8:	440b      	add	r3, r1
 80187fa:	3324      	adds	r3, #36	@ 0x24
 80187fc:	881b      	ldrh	r3, [r3, #0]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d117      	bne.n	8018832 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018802:	6839      	ldr	r1, [r7, #0]
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f000 fbb0 	bl	8018f6a <USBD_CtlError>
                  break;
 801880a:	e054      	b.n	80188b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801880c:	7bbb      	ldrb	r3, [r7, #14]
 801880e:	f003 020f 	and.w	r2, r3, #15
 8018812:	6879      	ldr	r1, [r7, #4]
 8018814:	4613      	mov	r3, r2
 8018816:	009b      	lsls	r3, r3, #2
 8018818:	4413      	add	r3, r2
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	440b      	add	r3, r1
 801881e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018822:	881b      	ldrh	r3, [r3, #0]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d104      	bne.n	8018832 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018828:	6839      	ldr	r1, [r7, #0]
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f000 fb9d 	bl	8018f6a <USBD_CtlError>
                  break;
 8018830:	e041      	b.n	80188b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018836:	2b00      	cmp	r3, #0
 8018838:	da0b      	bge.n	8018852 <USBD_StdEPReq+0x2b2>
 801883a:	7bbb      	ldrb	r3, [r7, #14]
 801883c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018840:	4613      	mov	r3, r2
 8018842:	009b      	lsls	r3, r3, #2
 8018844:	4413      	add	r3, r2
 8018846:	009b      	lsls	r3, r3, #2
 8018848:	3310      	adds	r3, #16
 801884a:	687a      	ldr	r2, [r7, #4]
 801884c:	4413      	add	r3, r2
 801884e:	3304      	adds	r3, #4
 8018850:	e00b      	b.n	801886a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018852:	7bbb      	ldrb	r3, [r7, #14]
 8018854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018858:	4613      	mov	r3, r2
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	4413      	add	r3, r2
 801885e:	009b      	lsls	r3, r3, #2
 8018860:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018864:	687a      	ldr	r2, [r7, #4]
 8018866:	4413      	add	r3, r2
 8018868:	3304      	adds	r3, #4
 801886a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801886c:	7bbb      	ldrb	r3, [r7, #14]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d002      	beq.n	8018878 <USBD_StdEPReq+0x2d8>
 8018872:	7bbb      	ldrb	r3, [r7, #14]
 8018874:	2b80      	cmp	r3, #128	@ 0x80
 8018876:	d103      	bne.n	8018880 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	2200      	movs	r2, #0
 801887c:	601a      	str	r2, [r3, #0]
 801887e:	e00e      	b.n	801889e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018880:	7bbb      	ldrb	r3, [r7, #14]
 8018882:	4619      	mov	r1, r3
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f004 febe 	bl	801d606 <USBD_LL_IsStallEP>
 801888a:	4603      	mov	r3, r0
 801888c:	2b00      	cmp	r3, #0
 801888e:	d003      	beq.n	8018898 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	2201      	movs	r2, #1
 8018894:	601a      	str	r2, [r3, #0]
 8018896:	e002      	b.n	801889e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8018898:	68bb      	ldr	r3, [r7, #8]
 801889a:	2200      	movs	r2, #0
 801889c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801889e:	68bb      	ldr	r3, [r7, #8]
 80188a0:	2202      	movs	r2, #2
 80188a2:	4619      	mov	r1, r3
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f000 fbd1 	bl	801904c <USBD_CtlSendData>
              break;
 80188aa:	e004      	b.n	80188b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80188ac:	6839      	ldr	r1, [r7, #0]
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	f000 fb5b 	bl	8018f6a <USBD_CtlError>
              break;
 80188b4:	bf00      	nop
          }
          break;
 80188b6:	e004      	b.n	80188c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80188b8:	6839      	ldr	r1, [r7, #0]
 80188ba:	6878      	ldr	r0, [r7, #4]
 80188bc:	f000 fb55 	bl	8018f6a <USBD_CtlError>
          break;
 80188c0:	bf00      	nop
      }
      break;
 80188c2:	e005      	b.n	80188d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80188c4:	6839      	ldr	r1, [r7, #0]
 80188c6:	6878      	ldr	r0, [r7, #4]
 80188c8:	f000 fb4f 	bl	8018f6a <USBD_CtlError>
      break;
 80188cc:	e000      	b.n	80188d0 <USBD_StdEPReq+0x330>
      break;
 80188ce:	bf00      	nop
  }

  return ret;
 80188d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80188d2:	4618      	mov	r0, r3
 80188d4:	3710      	adds	r7, #16
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}
	...

080188dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b084      	sub	sp, #16
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
 80188e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80188e6:	2300      	movs	r3, #0
 80188e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80188ea:	2300      	movs	r3, #0
 80188ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80188ee:	2300      	movs	r3, #0
 80188f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80188f2:	683b      	ldr	r3, [r7, #0]
 80188f4:	885b      	ldrh	r3, [r3, #2]
 80188f6:	0a1b      	lsrs	r3, r3, #8
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	3b01      	subs	r3, #1
 80188fc:	2b06      	cmp	r3, #6
 80188fe:	f200 8128 	bhi.w	8018b52 <USBD_GetDescriptor+0x276>
 8018902:	a201      	add	r2, pc, #4	@ (adr r2, 8018908 <USBD_GetDescriptor+0x2c>)
 8018904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018908:	08018925 	.word	0x08018925
 801890c:	0801893d 	.word	0x0801893d
 8018910:	0801897d 	.word	0x0801897d
 8018914:	08018b53 	.word	0x08018b53
 8018918:	08018b53 	.word	0x08018b53
 801891c:	08018af3 	.word	0x08018af3
 8018920:	08018b1f 	.word	0x08018b1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	687a      	ldr	r2, [r7, #4]
 801892e:	7c12      	ldrb	r2, [r2, #16]
 8018930:	f107 0108 	add.w	r1, r7, #8
 8018934:	4610      	mov	r0, r2
 8018936:	4798      	blx	r3
 8018938:	60f8      	str	r0, [r7, #12]
      break;
 801893a:	e112      	b.n	8018b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	7c1b      	ldrb	r3, [r3, #16]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d10d      	bne.n	8018960 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801894c:	f107 0208 	add.w	r2, r7, #8
 8018950:	4610      	mov	r0, r2
 8018952:	4798      	blx	r3
 8018954:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	3301      	adds	r3, #1
 801895a:	2202      	movs	r2, #2
 801895c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801895e:	e100      	b.n	8018b62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018968:	f107 0208 	add.w	r2, r7, #8
 801896c:	4610      	mov	r0, r2
 801896e:	4798      	blx	r3
 8018970:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	3301      	adds	r3, #1
 8018976:	2202      	movs	r2, #2
 8018978:	701a      	strb	r2, [r3, #0]
      break;
 801897a:	e0f2      	b.n	8018b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	885b      	ldrh	r3, [r3, #2]
 8018980:	b2db      	uxtb	r3, r3
 8018982:	2b05      	cmp	r3, #5
 8018984:	f200 80ac 	bhi.w	8018ae0 <USBD_GetDescriptor+0x204>
 8018988:	a201      	add	r2, pc, #4	@ (adr r2, 8018990 <USBD_GetDescriptor+0xb4>)
 801898a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801898e:	bf00      	nop
 8018990:	080189a9 	.word	0x080189a9
 8018994:	080189dd 	.word	0x080189dd
 8018998:	08018a11 	.word	0x08018a11
 801899c:	08018a45 	.word	0x08018a45
 80189a0:	08018a79 	.word	0x08018a79
 80189a4:	08018aad 	.word	0x08018aad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d00b      	beq.n	80189cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	687a      	ldr	r2, [r7, #4]
 80189be:	7c12      	ldrb	r2, [r2, #16]
 80189c0:	f107 0108 	add.w	r1, r7, #8
 80189c4:	4610      	mov	r0, r2
 80189c6:	4798      	blx	r3
 80189c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189ca:	e091      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80189cc:	6839      	ldr	r1, [r7, #0]
 80189ce:	6878      	ldr	r0, [r7, #4]
 80189d0:	f000 facb 	bl	8018f6a <USBD_CtlError>
            err++;
 80189d4:	7afb      	ldrb	r3, [r7, #11]
 80189d6:	3301      	adds	r3, #1
 80189d8:	72fb      	strb	r3, [r7, #11]
          break;
 80189da:	e089      	b.n	8018af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189e2:	689b      	ldr	r3, [r3, #8]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d00b      	beq.n	8018a00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189ee:	689b      	ldr	r3, [r3, #8]
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	7c12      	ldrb	r2, [r2, #16]
 80189f4:	f107 0108 	add.w	r1, r7, #8
 80189f8:	4610      	mov	r0, r2
 80189fa:	4798      	blx	r3
 80189fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189fe:	e077      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a00:	6839      	ldr	r1, [r7, #0]
 8018a02:	6878      	ldr	r0, [r7, #4]
 8018a04:	f000 fab1 	bl	8018f6a <USBD_CtlError>
            err++;
 8018a08:	7afb      	ldrb	r3, [r7, #11]
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a0e:	e06f      	b.n	8018af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a16:	68db      	ldr	r3, [r3, #12]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d00b      	beq.n	8018a34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a22:	68db      	ldr	r3, [r3, #12]
 8018a24:	687a      	ldr	r2, [r7, #4]
 8018a26:	7c12      	ldrb	r2, [r2, #16]
 8018a28:	f107 0108 	add.w	r1, r7, #8
 8018a2c:	4610      	mov	r0, r2
 8018a2e:	4798      	blx	r3
 8018a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a32:	e05d      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a34:	6839      	ldr	r1, [r7, #0]
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	f000 fa97 	bl	8018f6a <USBD_CtlError>
            err++;
 8018a3c:	7afb      	ldrb	r3, [r7, #11]
 8018a3e:	3301      	adds	r3, #1
 8018a40:	72fb      	strb	r3, [r7, #11]
          break;
 8018a42:	e055      	b.n	8018af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a4a:	691b      	ldr	r3, [r3, #16]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d00b      	beq.n	8018a68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a56:	691b      	ldr	r3, [r3, #16]
 8018a58:	687a      	ldr	r2, [r7, #4]
 8018a5a:	7c12      	ldrb	r2, [r2, #16]
 8018a5c:	f107 0108 	add.w	r1, r7, #8
 8018a60:	4610      	mov	r0, r2
 8018a62:	4798      	blx	r3
 8018a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a66:	e043      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a68:	6839      	ldr	r1, [r7, #0]
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f000 fa7d 	bl	8018f6a <USBD_CtlError>
            err++;
 8018a70:	7afb      	ldrb	r3, [r7, #11]
 8018a72:	3301      	adds	r3, #1
 8018a74:	72fb      	strb	r3, [r7, #11]
          break;
 8018a76:	e03b      	b.n	8018af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a7e:	695b      	ldr	r3, [r3, #20]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d00b      	beq.n	8018a9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a8a:	695b      	ldr	r3, [r3, #20]
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	7c12      	ldrb	r2, [r2, #16]
 8018a90:	f107 0108 	add.w	r1, r7, #8
 8018a94:	4610      	mov	r0, r2
 8018a96:	4798      	blx	r3
 8018a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a9a:	e029      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a9c:	6839      	ldr	r1, [r7, #0]
 8018a9e:	6878      	ldr	r0, [r7, #4]
 8018aa0:	f000 fa63 	bl	8018f6a <USBD_CtlError>
            err++;
 8018aa4:	7afb      	ldrb	r3, [r7, #11]
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8018aaa:	e021      	b.n	8018af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ab2:	699b      	ldr	r3, [r3, #24]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d00b      	beq.n	8018ad0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018abe:	699b      	ldr	r3, [r3, #24]
 8018ac0:	687a      	ldr	r2, [r7, #4]
 8018ac2:	7c12      	ldrb	r2, [r2, #16]
 8018ac4:	f107 0108 	add.w	r1, r7, #8
 8018ac8:	4610      	mov	r0, r2
 8018aca:	4798      	blx	r3
 8018acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ace:	e00f      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018ad0:	6839      	ldr	r1, [r7, #0]
 8018ad2:	6878      	ldr	r0, [r7, #4]
 8018ad4:	f000 fa49 	bl	8018f6a <USBD_CtlError>
            err++;
 8018ad8:	7afb      	ldrb	r3, [r7, #11]
 8018ada:	3301      	adds	r3, #1
 8018adc:	72fb      	strb	r3, [r7, #11]
          break;
 8018ade:	e007      	b.n	8018af0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018ae0:	6839      	ldr	r1, [r7, #0]
 8018ae2:	6878      	ldr	r0, [r7, #4]
 8018ae4:	f000 fa41 	bl	8018f6a <USBD_CtlError>
          err++;
 8018ae8:	7afb      	ldrb	r3, [r7, #11]
 8018aea:	3301      	adds	r3, #1
 8018aec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018aee:	bf00      	nop
      }
      break;
 8018af0:	e037      	b.n	8018b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	7c1b      	ldrb	r3, [r3, #16]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d109      	bne.n	8018b0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b02:	f107 0208 	add.w	r2, r7, #8
 8018b06:	4610      	mov	r0, r2
 8018b08:	4798      	blx	r3
 8018b0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b0c:	e029      	b.n	8018b62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b0e:	6839      	ldr	r1, [r7, #0]
 8018b10:	6878      	ldr	r0, [r7, #4]
 8018b12:	f000 fa2a 	bl	8018f6a <USBD_CtlError>
        err++;
 8018b16:	7afb      	ldrb	r3, [r7, #11]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8018b1c:	e021      	b.n	8018b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	7c1b      	ldrb	r3, [r3, #16]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d10d      	bne.n	8018b42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b2e:	f107 0208 	add.w	r2, r7, #8
 8018b32:	4610      	mov	r0, r2
 8018b34:	4798      	blx	r3
 8018b36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	2207      	movs	r2, #7
 8018b3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b40:	e00f      	b.n	8018b62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b42:	6839      	ldr	r1, [r7, #0]
 8018b44:	6878      	ldr	r0, [r7, #4]
 8018b46:	f000 fa10 	bl	8018f6a <USBD_CtlError>
        err++;
 8018b4a:	7afb      	ldrb	r3, [r7, #11]
 8018b4c:	3301      	adds	r3, #1
 8018b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8018b50:	e007      	b.n	8018b62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018b52:	6839      	ldr	r1, [r7, #0]
 8018b54:	6878      	ldr	r0, [r7, #4]
 8018b56:	f000 fa08 	bl	8018f6a <USBD_CtlError>
      err++;
 8018b5a:	7afb      	ldrb	r3, [r7, #11]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	72fb      	strb	r3, [r7, #11]
      break;
 8018b60:	bf00      	nop
  }

  if (err != 0U)
 8018b62:	7afb      	ldrb	r3, [r7, #11]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d11e      	bne.n	8018ba6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018b68:	683b      	ldr	r3, [r7, #0]
 8018b6a:	88db      	ldrh	r3, [r3, #6]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d016      	beq.n	8018b9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018b70:	893b      	ldrh	r3, [r7, #8]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d00e      	beq.n	8018b94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	88da      	ldrh	r2, [r3, #6]
 8018b7a:	893b      	ldrh	r3, [r7, #8]
 8018b7c:	4293      	cmp	r3, r2
 8018b7e:	bf28      	it	cs
 8018b80:	4613      	movcs	r3, r2
 8018b82:	b29b      	uxth	r3, r3
 8018b84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018b86:	893b      	ldrh	r3, [r7, #8]
 8018b88:	461a      	mov	r2, r3
 8018b8a:	68f9      	ldr	r1, [r7, #12]
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f000 fa5d 	bl	801904c <USBD_CtlSendData>
 8018b92:	e009      	b.n	8018ba8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018b94:	6839      	ldr	r1, [r7, #0]
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f000 f9e7 	bl	8018f6a <USBD_CtlError>
 8018b9c:	e004      	b.n	8018ba8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f000 fa91 	bl	80190c6 <USBD_CtlSendStatus>
 8018ba4:	e000      	b.n	8018ba8 <USBD_GetDescriptor+0x2cc>
    return;
 8018ba6:	bf00      	nop
  }
}
 8018ba8:	3710      	adds	r7, #16
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bd80      	pop	{r7, pc}
 8018bae:	bf00      	nop

08018bb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b084      	sub	sp, #16
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
 8018bb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	889b      	ldrh	r3, [r3, #4]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d131      	bne.n	8018c26 <USBD_SetAddress+0x76>
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	88db      	ldrh	r3, [r3, #6]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d12d      	bne.n	8018c26 <USBD_SetAddress+0x76>
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	885b      	ldrh	r3, [r3, #2]
 8018bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8018bd0:	d829      	bhi.n	8018c26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	885b      	ldrh	r3, [r3, #2]
 8018bd6:	b2db      	uxtb	r3, r3
 8018bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018bdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	2b03      	cmp	r3, #3
 8018be8:	d104      	bne.n	8018bf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018bea:	6839      	ldr	r1, [r7, #0]
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	f000 f9bc 	bl	8018f6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018bf2:	e01d      	b.n	8018c30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	7bfa      	ldrb	r2, [r7, #15]
 8018bf8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018bfc:	7bfb      	ldrb	r3, [r7, #15]
 8018bfe:	4619      	mov	r1, r3
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f004 fd2c 	bl	801d65e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	f000 fa5d 	bl	80190c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018c0c:	7bfb      	ldrb	r3, [r7, #15]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d004      	beq.n	8018c1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	2202      	movs	r2, #2
 8018c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c1a:	e009      	b.n	8018c30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2201      	movs	r2, #1
 8018c20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c24:	e004      	b.n	8018c30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018c26:	6839      	ldr	r1, [r7, #0]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f000 f99e 	bl	8018f6a <USBD_CtlError>
  }
}
 8018c2e:	bf00      	nop
 8018c30:	bf00      	nop
 8018c32:	3710      	adds	r7, #16
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}

08018c38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b084      	sub	sp, #16
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
 8018c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018c42:	2300      	movs	r3, #0
 8018c44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	885b      	ldrh	r3, [r3, #2]
 8018c4a:	b2da      	uxtb	r2, r3
 8018c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018c4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018c50:	4b4d      	ldr	r3, [pc, #308]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d905      	bls.n	8018c64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018c58:	6839      	ldr	r1, [r7, #0]
 8018c5a:	6878      	ldr	r0, [r7, #4]
 8018c5c:	f000 f985 	bl	8018f6a <USBD_CtlError>
    return USBD_FAIL;
 8018c60:	2303      	movs	r3, #3
 8018c62:	e08c      	b.n	8018d7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018c6a:	b2db      	uxtb	r3, r3
 8018c6c:	2b02      	cmp	r3, #2
 8018c6e:	d002      	beq.n	8018c76 <USBD_SetConfig+0x3e>
 8018c70:	2b03      	cmp	r3, #3
 8018c72:	d029      	beq.n	8018cc8 <USBD_SetConfig+0x90>
 8018c74:	e075      	b.n	8018d62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018c76:	4b44      	ldr	r3, [pc, #272]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d020      	beq.n	8018cc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018c7e:	4b42      	ldr	r3, [pc, #264]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	461a      	mov	r2, r3
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018c88:	4b3f      	ldr	r3, [pc, #252]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f7fe ffe3 	bl	8017c5a <USBD_SetClassConfig>
 8018c94:	4603      	mov	r3, r0
 8018c96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018c98:	7bfb      	ldrb	r3, [r7, #15]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d008      	beq.n	8018cb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018c9e:	6839      	ldr	r1, [r7, #0]
 8018ca0:	6878      	ldr	r0, [r7, #4]
 8018ca2:	f000 f962 	bl	8018f6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2202      	movs	r2, #2
 8018caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018cae:	e065      	b.n	8018d7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f000 fa08 	bl	80190c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	2203      	movs	r2, #3
 8018cba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018cbe:	e05d      	b.n	8018d7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018cc0:	6878      	ldr	r0, [r7, #4]
 8018cc2:	f000 fa00 	bl	80190c6 <USBD_CtlSendStatus>
      break;
 8018cc6:	e059      	b.n	8018d7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d112      	bne.n	8018cf6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2202      	movs	r2, #2
 8018cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018cda:	781b      	ldrb	r3, [r3, #0]
 8018cdc:	461a      	mov	r2, r3
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018ce2:	4b29      	ldr	r3, [pc, #164]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018ce4:	781b      	ldrb	r3, [r3, #0]
 8018ce6:	4619      	mov	r1, r3
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f7fe ffd2 	bl	8017c92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f000 f9e9 	bl	80190c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018cf4:	e042      	b.n	8018d7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018cf6:	4b24      	ldr	r3, [pc, #144]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	685b      	ldr	r3, [r3, #4]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	d02a      	beq.n	8018d5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	685b      	ldr	r3, [r3, #4]
 8018d08:	b2db      	uxtb	r3, r3
 8018d0a:	4619      	mov	r1, r3
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f7fe ffc0 	bl	8017c92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018d12:	4b1d      	ldr	r3, [pc, #116]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	461a      	mov	r2, r3
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018d1e:	781b      	ldrb	r3, [r3, #0]
 8018d20:	4619      	mov	r1, r3
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f7fe ff99 	bl	8017c5a <USBD_SetClassConfig>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018d2c:	7bfb      	ldrb	r3, [r7, #15]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d00f      	beq.n	8018d52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018d32:	6839      	ldr	r1, [r7, #0]
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f000 f918 	bl	8018f6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	b2db      	uxtb	r3, r3
 8018d40:	4619      	mov	r1, r3
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	f7fe ffa5 	bl	8017c92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2202      	movs	r2, #2
 8018d4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018d50:	e014      	b.n	8018d7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f000 f9b7 	bl	80190c6 <USBD_CtlSendStatus>
      break;
 8018d58:	e010      	b.n	8018d7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f000 f9b3 	bl	80190c6 <USBD_CtlSendStatus>
      break;
 8018d60:	e00c      	b.n	8018d7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018d62:	6839      	ldr	r1, [r7, #0]
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	f000 f900 	bl	8018f6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018d6a:	4b07      	ldr	r3, [pc, #28]	@ (8018d88 <USBD_SetConfig+0x150>)
 8018d6c:	781b      	ldrb	r3, [r3, #0]
 8018d6e:	4619      	mov	r1, r3
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f7fe ff8e 	bl	8017c92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018d76:	2303      	movs	r3, #3
 8018d78:	73fb      	strb	r3, [r7, #15]
      break;
 8018d7a:	bf00      	nop
  }

  return ret;
 8018d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d7e:	4618      	mov	r0, r3
 8018d80:	3710      	adds	r7, #16
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}
 8018d86:	bf00      	nop
 8018d88:	20001b66 	.word	0x20001b66

08018d8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b082      	sub	sp, #8
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	88db      	ldrh	r3, [r3, #6]
 8018d9a:	2b01      	cmp	r3, #1
 8018d9c:	d004      	beq.n	8018da8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018d9e:	6839      	ldr	r1, [r7, #0]
 8018da0:	6878      	ldr	r0, [r7, #4]
 8018da2:	f000 f8e2 	bl	8018f6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018da6:	e023      	b.n	8018df0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	2b02      	cmp	r3, #2
 8018db2:	dc02      	bgt.n	8018dba <USBD_GetConfig+0x2e>
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	dc03      	bgt.n	8018dc0 <USBD_GetConfig+0x34>
 8018db8:	e015      	b.n	8018de6 <USBD_GetConfig+0x5a>
 8018dba:	2b03      	cmp	r3, #3
 8018dbc:	d00b      	beq.n	8018dd6 <USBD_GetConfig+0x4a>
 8018dbe:	e012      	b.n	8018de6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	3308      	adds	r3, #8
 8018dca:	2201      	movs	r2, #1
 8018dcc:	4619      	mov	r1, r3
 8018dce:	6878      	ldr	r0, [r7, #4]
 8018dd0:	f000 f93c 	bl	801904c <USBD_CtlSendData>
        break;
 8018dd4:	e00c      	b.n	8018df0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	3304      	adds	r3, #4
 8018dda:	2201      	movs	r2, #1
 8018ddc:	4619      	mov	r1, r3
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f000 f934 	bl	801904c <USBD_CtlSendData>
        break;
 8018de4:	e004      	b.n	8018df0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018de6:	6839      	ldr	r1, [r7, #0]
 8018de8:	6878      	ldr	r0, [r7, #4]
 8018dea:	f000 f8be 	bl	8018f6a <USBD_CtlError>
        break;
 8018dee:	bf00      	nop
}
 8018df0:	bf00      	nop
 8018df2:	3708      	adds	r7, #8
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}

08018df8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b082      	sub	sp, #8
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
 8018e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e08:	b2db      	uxtb	r3, r3
 8018e0a:	3b01      	subs	r3, #1
 8018e0c:	2b02      	cmp	r3, #2
 8018e0e:	d81e      	bhi.n	8018e4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	88db      	ldrh	r3, [r3, #6]
 8018e14:	2b02      	cmp	r3, #2
 8018e16:	d004      	beq.n	8018e22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018e18:	6839      	ldr	r1, [r7, #0]
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 f8a5 	bl	8018f6a <USBD_CtlError>
        break;
 8018e20:	e01a      	b.n	8018e58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2201      	movs	r2, #1
 8018e26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d005      	beq.n	8018e3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	68db      	ldr	r3, [r3, #12]
 8018e36:	f043 0202 	orr.w	r2, r3, #2
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	330c      	adds	r3, #12
 8018e42:	2202      	movs	r2, #2
 8018e44:	4619      	mov	r1, r3
 8018e46:	6878      	ldr	r0, [r7, #4]
 8018e48:	f000 f900 	bl	801904c <USBD_CtlSendData>
      break;
 8018e4c:	e004      	b.n	8018e58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018e4e:	6839      	ldr	r1, [r7, #0]
 8018e50:	6878      	ldr	r0, [r7, #4]
 8018e52:	f000 f88a 	bl	8018f6a <USBD_CtlError>
      break;
 8018e56:	bf00      	nop
  }
}
 8018e58:	bf00      	nop
 8018e5a:	3708      	adds	r7, #8
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b082      	sub	sp, #8
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
 8018e68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e6a:	683b      	ldr	r3, [r7, #0]
 8018e6c:	885b      	ldrh	r3, [r3, #2]
 8018e6e:	2b01      	cmp	r3, #1
 8018e70:	d107      	bne.n	8018e82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	2201      	movs	r2, #1
 8018e76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	f000 f923 	bl	80190c6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018e80:	e013      	b.n	8018eaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018e82:	683b      	ldr	r3, [r7, #0]
 8018e84:	885b      	ldrh	r3, [r3, #2]
 8018e86:	2b02      	cmp	r3, #2
 8018e88:	d10b      	bne.n	8018ea2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	889b      	ldrh	r3, [r3, #4]
 8018e8e:	0a1b      	lsrs	r3, r3, #8
 8018e90:	b29b      	uxth	r3, r3
 8018e92:	b2da      	uxtb	r2, r3
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018e9a:	6878      	ldr	r0, [r7, #4]
 8018e9c:	f000 f913 	bl	80190c6 <USBD_CtlSendStatus>
}
 8018ea0:	e003      	b.n	8018eaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018ea2:	6839      	ldr	r1, [r7, #0]
 8018ea4:	6878      	ldr	r0, [r7, #4]
 8018ea6:	f000 f860 	bl	8018f6a <USBD_CtlError>
}
 8018eaa:	bf00      	nop
 8018eac:	3708      	adds	r7, #8
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}

08018eb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eb2:	b580      	push	{r7, lr}
 8018eb4:	b082      	sub	sp, #8
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	6078      	str	r0, [r7, #4]
 8018eba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	3b01      	subs	r3, #1
 8018ec6:	2b02      	cmp	r3, #2
 8018ec8:	d80b      	bhi.n	8018ee2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018eca:	683b      	ldr	r3, [r7, #0]
 8018ecc:	885b      	ldrh	r3, [r3, #2]
 8018ece:	2b01      	cmp	r3, #1
 8018ed0:	d10c      	bne.n	8018eec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f000 f8f3 	bl	80190c6 <USBD_CtlSendStatus>
      }
      break;
 8018ee0:	e004      	b.n	8018eec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018ee2:	6839      	ldr	r1, [r7, #0]
 8018ee4:	6878      	ldr	r0, [r7, #4]
 8018ee6:	f000 f840 	bl	8018f6a <USBD_CtlError>
      break;
 8018eea:	e000      	b.n	8018eee <USBD_ClrFeature+0x3c>
      break;
 8018eec:	bf00      	nop
  }
}
 8018eee:	bf00      	nop
 8018ef0:	3708      	adds	r7, #8
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}

08018ef6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018ef6:	b580      	push	{r7, lr}
 8018ef8:	b084      	sub	sp, #16
 8018efa:	af00      	add	r7, sp, #0
 8018efc:	6078      	str	r0, [r7, #4]
 8018efe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	781a      	ldrb	r2, [r3, #0]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	3301      	adds	r3, #1
 8018f10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	781a      	ldrb	r2, [r3, #0]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018f20:	68f8      	ldr	r0, [r7, #12]
 8018f22:	f7ff fa40 	bl	80183a6 <SWAPBYTE>
 8018f26:	4603      	mov	r3, r0
 8018f28:	461a      	mov	r2, r3
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	3301      	adds	r3, #1
 8018f32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	3301      	adds	r3, #1
 8018f38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018f3a:	68f8      	ldr	r0, [r7, #12]
 8018f3c:	f7ff fa33 	bl	80183a6 <SWAPBYTE>
 8018f40:	4603      	mov	r3, r0
 8018f42:	461a      	mov	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	3301      	adds	r3, #1
 8018f52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018f54:	68f8      	ldr	r0, [r7, #12]
 8018f56:	f7ff fa26 	bl	80183a6 <SWAPBYTE>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	461a      	mov	r2, r3
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	80da      	strh	r2, [r3, #6]
}
 8018f62:	bf00      	nop
 8018f64:	3710      	adds	r7, #16
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}

08018f6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f6a:	b580      	push	{r7, lr}
 8018f6c:	b082      	sub	sp, #8
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
 8018f72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018f74:	2180      	movs	r1, #128	@ 0x80
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f004 fb07 	bl	801d58a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018f7c:	2100      	movs	r1, #0
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f004 fb03 	bl	801d58a <USBD_LL_StallEP>
}
 8018f84:	bf00      	nop
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	60b9      	str	r1, [r7, #8]
 8018f96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d036      	beq.n	8019010 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018fa6:	6938      	ldr	r0, [r7, #16]
 8018fa8:	f000 f836 	bl	8019018 <USBD_GetLen>
 8018fac:	4603      	mov	r3, r0
 8018fae:	3301      	adds	r3, #1
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	005b      	lsls	r3, r3, #1
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018fba:	7dfb      	ldrb	r3, [r7, #23]
 8018fbc:	68ba      	ldr	r2, [r7, #8]
 8018fbe:	4413      	add	r3, r2
 8018fc0:	687a      	ldr	r2, [r7, #4]
 8018fc2:	7812      	ldrb	r2, [r2, #0]
 8018fc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8018fc6:	7dfb      	ldrb	r3, [r7, #23]
 8018fc8:	3301      	adds	r3, #1
 8018fca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018fcc:	7dfb      	ldrb	r3, [r7, #23]
 8018fce:	68ba      	ldr	r2, [r7, #8]
 8018fd0:	4413      	add	r3, r2
 8018fd2:	2203      	movs	r2, #3
 8018fd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8018fd6:	7dfb      	ldrb	r3, [r7, #23]
 8018fd8:	3301      	adds	r3, #1
 8018fda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018fdc:	e013      	b.n	8019006 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018fde:	7dfb      	ldrb	r3, [r7, #23]
 8018fe0:	68ba      	ldr	r2, [r7, #8]
 8018fe2:	4413      	add	r3, r2
 8018fe4:	693a      	ldr	r2, [r7, #16]
 8018fe6:	7812      	ldrb	r2, [r2, #0]
 8018fe8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	3301      	adds	r3, #1
 8018fee:	613b      	str	r3, [r7, #16]
    idx++;
 8018ff0:	7dfb      	ldrb	r3, [r7, #23]
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018ff6:	7dfb      	ldrb	r3, [r7, #23]
 8018ff8:	68ba      	ldr	r2, [r7, #8]
 8018ffa:	4413      	add	r3, r2
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	701a      	strb	r2, [r3, #0]
    idx++;
 8019000:	7dfb      	ldrb	r3, [r7, #23]
 8019002:	3301      	adds	r3, #1
 8019004:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019006:	693b      	ldr	r3, [r7, #16]
 8019008:	781b      	ldrb	r3, [r3, #0]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d1e7      	bne.n	8018fde <USBD_GetString+0x52>
 801900e:	e000      	b.n	8019012 <USBD_GetString+0x86>
    return;
 8019010:	bf00      	nop
  }
}
 8019012:	3718      	adds	r7, #24
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}

08019018 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019018:	b480      	push	{r7}
 801901a:	b085      	sub	sp, #20
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019020:	2300      	movs	r3, #0
 8019022:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019028:	e005      	b.n	8019036 <USBD_GetLen+0x1e>
  {
    len++;
 801902a:	7bfb      	ldrb	r3, [r7, #15]
 801902c:	3301      	adds	r3, #1
 801902e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	3301      	adds	r3, #1
 8019034:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d1f5      	bne.n	801902a <USBD_GetLen+0x12>
  }

  return len;
 801903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019040:	4618      	mov	r0, r3
 8019042:	3714      	adds	r7, #20
 8019044:	46bd      	mov	sp, r7
 8019046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904a:	4770      	bx	lr

0801904c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b084      	sub	sp, #16
 8019050:	af00      	add	r7, sp, #0
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	2202      	movs	r2, #2
 801905c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	687a      	ldr	r2, [r7, #4]
 801906a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	68ba      	ldr	r2, [r7, #8]
 8019070:	2100      	movs	r1, #0
 8019072:	68f8      	ldr	r0, [r7, #12]
 8019074:	f004 fb12 	bl	801d69c <USBD_LL_Transmit>

  return USBD_OK;
 8019078:	2300      	movs	r3, #0
}
 801907a:	4618      	mov	r0, r3
 801907c:	3710      	adds	r7, #16
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}

08019082 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019082:	b580      	push	{r7, lr}
 8019084:	b084      	sub	sp, #16
 8019086:	af00      	add	r7, sp, #0
 8019088:	60f8      	str	r0, [r7, #12]
 801908a:	60b9      	str	r1, [r7, #8]
 801908c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	68ba      	ldr	r2, [r7, #8]
 8019092:	2100      	movs	r1, #0
 8019094:	68f8      	ldr	r0, [r7, #12]
 8019096:	f004 fb01 	bl	801d69c <USBD_LL_Transmit>

  return USBD_OK;
 801909a:	2300      	movs	r3, #0
}
 801909c:	4618      	mov	r0, r3
 801909e:	3710      	adds	r7, #16
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b084      	sub	sp, #16
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	60b9      	str	r1, [r7, #8]
 80190ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	68ba      	ldr	r2, [r7, #8]
 80190b4:	2100      	movs	r1, #0
 80190b6:	68f8      	ldr	r0, [r7, #12]
 80190b8:	f004 fb11 	bl	801d6de <USBD_LL_PrepareReceive>

  return USBD_OK;
 80190bc:	2300      	movs	r3, #0
}
 80190be:	4618      	mov	r0, r3
 80190c0:	3710      	adds	r7, #16
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}

080190c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80190c6:	b580      	push	{r7, lr}
 80190c8:	b082      	sub	sp, #8
 80190ca:	af00      	add	r7, sp, #0
 80190cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2204      	movs	r2, #4
 80190d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80190d6:	2300      	movs	r3, #0
 80190d8:	2200      	movs	r2, #0
 80190da:	2100      	movs	r1, #0
 80190dc:	6878      	ldr	r0, [r7, #4]
 80190de:	f004 fadd 	bl	801d69c <USBD_LL_Transmit>

  return USBD_OK;
 80190e2:	2300      	movs	r3, #0
}
 80190e4:	4618      	mov	r0, r3
 80190e6:	3708      	adds	r7, #8
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}

080190ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b082      	sub	sp, #8
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2205      	movs	r2, #5
 80190f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80190fc:	2300      	movs	r3, #0
 80190fe:	2200      	movs	r2, #0
 8019100:	2100      	movs	r1, #0
 8019102:	6878      	ldr	r0, [r7, #4]
 8019104:	f004 faeb 	bl	801d6de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019108:	2300      	movs	r3, #0
}
 801910a:	4618      	mov	r0, r3
 801910c:	3708      	adds	r7, #8
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
	...

08019114 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b084      	sub	sp, #16
 8019118:	af00      	add	r7, sp, #0
 801911a:	4603      	mov	r3, r0
 801911c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	4a08      	ldr	r2, [pc, #32]	@ (8019144 <disk_status+0x30>)
 8019122:	009b      	lsls	r3, r3, #2
 8019124:	4413      	add	r3, r2
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	685b      	ldr	r3, [r3, #4]
 801912a:	79fa      	ldrb	r2, [r7, #7]
 801912c:	4905      	ldr	r1, [pc, #20]	@ (8019144 <disk_status+0x30>)
 801912e:	440a      	add	r2, r1
 8019130:	7a12      	ldrb	r2, [r2, #8]
 8019132:	4610      	mov	r0, r2
 8019134:	4798      	blx	r3
 8019136:	4603      	mov	r3, r0
 8019138:	73fb      	strb	r3, [r7, #15]
  return stat;
 801913a:	7bfb      	ldrb	r3, [r7, #15]
}
 801913c:	4618      	mov	r0, r3
 801913e:	3710      	adds	r7, #16
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}
 8019144:	20001d90 	.word	0x20001d90

08019148 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b084      	sub	sp, #16
 801914c:	af00      	add	r7, sp, #0
 801914e:	4603      	mov	r3, r0
 8019150:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8019152:	2300      	movs	r3, #0
 8019154:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8019156:	79fb      	ldrb	r3, [r7, #7]
 8019158:	4a0e      	ldr	r2, [pc, #56]	@ (8019194 <disk_initialize+0x4c>)
 801915a:	5cd3      	ldrb	r3, [r2, r3]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d114      	bne.n	801918a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019160:	79fb      	ldrb	r3, [r7, #7]
 8019162:	4a0c      	ldr	r2, [pc, #48]	@ (8019194 <disk_initialize+0x4c>)
 8019164:	009b      	lsls	r3, r3, #2
 8019166:	4413      	add	r3, r2
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	79fa      	ldrb	r2, [r7, #7]
 801916e:	4909      	ldr	r1, [pc, #36]	@ (8019194 <disk_initialize+0x4c>)
 8019170:	440a      	add	r2, r1
 8019172:	7a12      	ldrb	r2, [r2, #8]
 8019174:	4610      	mov	r0, r2
 8019176:	4798      	blx	r3
 8019178:	4603      	mov	r3, r0
 801917a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801917c:	7bfb      	ldrb	r3, [r7, #15]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d103      	bne.n	801918a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8019182:	79fb      	ldrb	r3, [r7, #7]
 8019184:	4a03      	ldr	r2, [pc, #12]	@ (8019194 <disk_initialize+0x4c>)
 8019186:	2101      	movs	r1, #1
 8019188:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801918a:	7bfb      	ldrb	r3, [r7, #15]
}
 801918c:	4618      	mov	r0, r3
 801918e:	3710      	adds	r7, #16
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}
 8019194:	20001d90 	.word	0x20001d90

08019198 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8019198:	b590      	push	{r4, r7, lr}
 801919a:	b087      	sub	sp, #28
 801919c:	af00      	add	r7, sp, #0
 801919e:	60b9      	str	r1, [r7, #8]
 80191a0:	607a      	str	r2, [r7, #4]
 80191a2:	603b      	str	r3, [r7, #0]
 80191a4:	4603      	mov	r3, r0
 80191a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80191a8:	7bfb      	ldrb	r3, [r7, #15]
 80191aa:	4a0a      	ldr	r2, [pc, #40]	@ (80191d4 <disk_read+0x3c>)
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	4413      	add	r3, r2
 80191b0:	685b      	ldr	r3, [r3, #4]
 80191b2:	689c      	ldr	r4, [r3, #8]
 80191b4:	7bfb      	ldrb	r3, [r7, #15]
 80191b6:	4a07      	ldr	r2, [pc, #28]	@ (80191d4 <disk_read+0x3c>)
 80191b8:	4413      	add	r3, r2
 80191ba:	7a18      	ldrb	r0, [r3, #8]
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	68b9      	ldr	r1, [r7, #8]
 80191c2:	47a0      	blx	r4
 80191c4:	4603      	mov	r3, r0
 80191c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80191c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	371c      	adds	r7, #28
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd90      	pop	{r4, r7, pc}
 80191d2:	bf00      	nop
 80191d4:	20001d90 	.word	0x20001d90

080191d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80191d8:	b590      	push	{r4, r7, lr}
 80191da:	b087      	sub	sp, #28
 80191dc:	af00      	add	r7, sp, #0
 80191de:	60b9      	str	r1, [r7, #8]
 80191e0:	607a      	str	r2, [r7, #4]
 80191e2:	603b      	str	r3, [r7, #0]
 80191e4:	4603      	mov	r3, r0
 80191e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80191e8:	7bfb      	ldrb	r3, [r7, #15]
 80191ea:	4a0a      	ldr	r2, [pc, #40]	@ (8019214 <disk_write+0x3c>)
 80191ec:	009b      	lsls	r3, r3, #2
 80191ee:	4413      	add	r3, r2
 80191f0:	685b      	ldr	r3, [r3, #4]
 80191f2:	68dc      	ldr	r4, [r3, #12]
 80191f4:	7bfb      	ldrb	r3, [r7, #15]
 80191f6:	4a07      	ldr	r2, [pc, #28]	@ (8019214 <disk_write+0x3c>)
 80191f8:	4413      	add	r3, r2
 80191fa:	7a18      	ldrb	r0, [r3, #8]
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	687a      	ldr	r2, [r7, #4]
 8019200:	68b9      	ldr	r1, [r7, #8]
 8019202:	47a0      	blx	r4
 8019204:	4603      	mov	r3, r0
 8019206:	75fb      	strb	r3, [r7, #23]
  return res;
 8019208:	7dfb      	ldrb	r3, [r7, #23]
}
 801920a:	4618      	mov	r0, r3
 801920c:	371c      	adds	r7, #28
 801920e:	46bd      	mov	sp, r7
 8019210:	bd90      	pop	{r4, r7, pc}
 8019212:	bf00      	nop
 8019214:	20001d90 	.word	0x20001d90

08019218 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	4603      	mov	r3, r0
 8019220:	603a      	str	r2, [r7, #0]
 8019222:	71fb      	strb	r3, [r7, #7]
 8019224:	460b      	mov	r3, r1
 8019226:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8019228:	79fb      	ldrb	r3, [r7, #7]
 801922a:	4a09      	ldr	r2, [pc, #36]	@ (8019250 <disk_ioctl+0x38>)
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	4413      	add	r3, r2
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	691b      	ldr	r3, [r3, #16]
 8019234:	79fa      	ldrb	r2, [r7, #7]
 8019236:	4906      	ldr	r1, [pc, #24]	@ (8019250 <disk_ioctl+0x38>)
 8019238:	440a      	add	r2, r1
 801923a:	7a10      	ldrb	r0, [r2, #8]
 801923c:	79b9      	ldrb	r1, [r7, #6]
 801923e:	683a      	ldr	r2, [r7, #0]
 8019240:	4798      	blx	r3
 8019242:	4603      	mov	r3, r0
 8019244:	73fb      	strb	r3, [r7, #15]
  return res;
 8019246:	7bfb      	ldrb	r3, [r7, #15]
}
 8019248:	4618      	mov	r0, r3
 801924a:	3710      	adds	r7, #16
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}
 8019250:	20001d90 	.word	0x20001d90

08019254 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8019254:	b480      	push	{r7}
 8019256:	b085      	sub	sp, #20
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	3301      	adds	r3, #1
 8019260:	781b      	ldrb	r3, [r3, #0]
 8019262:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8019264:	89fb      	ldrh	r3, [r7, #14]
 8019266:	021b      	lsls	r3, r3, #8
 8019268:	b21a      	sxth	r2, r3
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	b21b      	sxth	r3, r3
 8019270:	4313      	orrs	r3, r2
 8019272:	b21b      	sxth	r3, r3
 8019274:	81fb      	strh	r3, [r7, #14]
	return rv;
 8019276:	89fb      	ldrh	r3, [r7, #14]
}
 8019278:	4618      	mov	r0, r3
 801927a:	3714      	adds	r7, #20
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8019284:	b480      	push	{r7}
 8019286:	b085      	sub	sp, #20
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	3303      	adds	r3, #3
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	021b      	lsls	r3, r3, #8
 8019298:	687a      	ldr	r2, [r7, #4]
 801929a:	3202      	adds	r2, #2
 801929c:	7812      	ldrb	r2, [r2, #0]
 801929e:	4313      	orrs	r3, r2
 80192a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	021b      	lsls	r3, r3, #8
 80192a6:	687a      	ldr	r2, [r7, #4]
 80192a8:	3201      	adds	r2, #1
 80192aa:	7812      	ldrb	r2, [r2, #0]
 80192ac:	4313      	orrs	r3, r2
 80192ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	021b      	lsls	r3, r3, #8
 80192b4:	687a      	ldr	r2, [r7, #4]
 80192b6:	7812      	ldrb	r2, [r2, #0]
 80192b8:	4313      	orrs	r3, r2
 80192ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80192bc:	68fb      	ldr	r3, [r7, #12]
}
 80192be:	4618      	mov	r0, r3
 80192c0:	3714      	adds	r7, #20
 80192c2:	46bd      	mov	sp, r7
 80192c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c8:	4770      	bx	lr

080192ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80192ca:	b480      	push	{r7}
 80192cc:	b083      	sub	sp, #12
 80192ce:	af00      	add	r7, sp, #0
 80192d0:	6078      	str	r0, [r7, #4]
 80192d2:	460b      	mov	r3, r1
 80192d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	1c5a      	adds	r2, r3, #1
 80192da:	607a      	str	r2, [r7, #4]
 80192dc:	887a      	ldrh	r2, [r7, #2]
 80192de:	b2d2      	uxtb	r2, r2
 80192e0:	701a      	strb	r2, [r3, #0]
 80192e2:	887b      	ldrh	r3, [r7, #2]
 80192e4:	0a1b      	lsrs	r3, r3, #8
 80192e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	1c5a      	adds	r2, r3, #1
 80192ec:	607a      	str	r2, [r7, #4]
 80192ee:	887a      	ldrh	r2, [r7, #2]
 80192f0:	b2d2      	uxtb	r2, r2
 80192f2:	701a      	strb	r2, [r3, #0]
}
 80192f4:	bf00      	nop
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr

08019300 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8019300:	b480      	push	{r7}
 8019302:	b083      	sub	sp, #12
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
 8019308:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	1c5a      	adds	r2, r3, #1
 801930e:	607a      	str	r2, [r7, #4]
 8019310:	683a      	ldr	r2, [r7, #0]
 8019312:	b2d2      	uxtb	r2, r2
 8019314:	701a      	strb	r2, [r3, #0]
 8019316:	683b      	ldr	r3, [r7, #0]
 8019318:	0a1b      	lsrs	r3, r3, #8
 801931a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	1c5a      	adds	r2, r3, #1
 8019320:	607a      	str	r2, [r7, #4]
 8019322:	683a      	ldr	r2, [r7, #0]
 8019324:	b2d2      	uxtb	r2, r2
 8019326:	701a      	strb	r2, [r3, #0]
 8019328:	683b      	ldr	r3, [r7, #0]
 801932a:	0a1b      	lsrs	r3, r3, #8
 801932c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	1c5a      	adds	r2, r3, #1
 8019332:	607a      	str	r2, [r7, #4]
 8019334:	683a      	ldr	r2, [r7, #0]
 8019336:	b2d2      	uxtb	r2, r2
 8019338:	701a      	strb	r2, [r3, #0]
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	0a1b      	lsrs	r3, r3, #8
 801933e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	1c5a      	adds	r2, r3, #1
 8019344:	607a      	str	r2, [r7, #4]
 8019346:	683a      	ldr	r2, [r7, #0]
 8019348:	b2d2      	uxtb	r2, r2
 801934a:	701a      	strb	r2, [r3, #0]
}
 801934c:	bf00      	nop
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8019358:	b480      	push	{r7}
 801935a:	b087      	sub	sp, #28
 801935c:	af00      	add	r7, sp, #0
 801935e:	60f8      	str	r0, [r7, #12]
 8019360:	60b9      	str	r1, [r7, #8]
 8019362:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8019368:	68bb      	ldr	r3, [r7, #8]
 801936a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d00d      	beq.n	801938e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8019372:	693a      	ldr	r2, [r7, #16]
 8019374:	1c53      	adds	r3, r2, #1
 8019376:	613b      	str	r3, [r7, #16]
 8019378:	697b      	ldr	r3, [r7, #20]
 801937a:	1c59      	adds	r1, r3, #1
 801937c:	6179      	str	r1, [r7, #20]
 801937e:	7812      	ldrb	r2, [r2, #0]
 8019380:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	3b01      	subs	r3, #1
 8019386:	607b      	str	r3, [r7, #4]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d1f1      	bne.n	8019372 <mem_cpy+0x1a>
	}
}
 801938e:	bf00      	nop
 8019390:	371c      	adds	r7, #28
 8019392:	46bd      	mov	sp, r7
 8019394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019398:	4770      	bx	lr

0801939a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801939a:	b480      	push	{r7}
 801939c:	b087      	sub	sp, #28
 801939e:	af00      	add	r7, sp, #0
 80193a0:	60f8      	str	r0, [r7, #12]
 80193a2:	60b9      	str	r1, [r7, #8]
 80193a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80193aa:	697b      	ldr	r3, [r7, #20]
 80193ac:	1c5a      	adds	r2, r3, #1
 80193ae:	617a      	str	r2, [r7, #20]
 80193b0:	68ba      	ldr	r2, [r7, #8]
 80193b2:	b2d2      	uxtb	r2, r2
 80193b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	3b01      	subs	r3, #1
 80193ba:	607b      	str	r3, [r7, #4]
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d1f3      	bne.n	80193aa <mem_set+0x10>
}
 80193c2:	bf00      	nop
 80193c4:	bf00      	nop
 80193c6:	371c      	adds	r7, #28
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr

080193d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80193d0:	b480      	push	{r7}
 80193d2:	b089      	sub	sp, #36	@ 0x24
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	60f8      	str	r0, [r7, #12]
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	61fb      	str	r3, [r7, #28]
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80193e4:	2300      	movs	r3, #0
 80193e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80193e8:	69fb      	ldr	r3, [r7, #28]
 80193ea:	1c5a      	adds	r2, r3, #1
 80193ec:	61fa      	str	r2, [r7, #28]
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	4619      	mov	r1, r3
 80193f2:	69bb      	ldr	r3, [r7, #24]
 80193f4:	1c5a      	adds	r2, r3, #1
 80193f6:	61ba      	str	r2, [r7, #24]
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	1acb      	subs	r3, r1, r3
 80193fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	3b01      	subs	r3, #1
 8019402:	607b      	str	r3, [r7, #4]
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d002      	beq.n	8019410 <mem_cmp+0x40>
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d0eb      	beq.n	80193e8 <mem_cmp+0x18>

	return r;
 8019410:	697b      	ldr	r3, [r7, #20]
}
 8019412:	4618      	mov	r0, r3
 8019414:	3724      	adds	r7, #36	@ 0x24
 8019416:	46bd      	mov	sp, r7
 8019418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941c:	4770      	bx	lr

0801941e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801941e:	b480      	push	{r7}
 8019420:	b083      	sub	sp, #12
 8019422:	af00      	add	r7, sp, #0
 8019424:	6078      	str	r0, [r7, #4]
 8019426:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8019428:	e002      	b.n	8019430 <chk_chr+0x12>
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	3301      	adds	r3, #1
 801942e:	607b      	str	r3, [r7, #4]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d005      	beq.n	8019444 <chk_chr+0x26>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	461a      	mov	r2, r3
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	4293      	cmp	r3, r2
 8019442:	d1f2      	bne.n	801942a <chk_chr+0xc>
	return *str;
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	781b      	ldrb	r3, [r3, #0]
}
 8019448:	4618      	mov	r0, r3
 801944a:	370c      	adds	r7, #12
 801944c:	46bd      	mov	sp, r7
 801944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019452:	4770      	bx	lr

08019454 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019454:	b480      	push	{r7}
 8019456:	b085      	sub	sp, #20
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801945e:	2300      	movs	r3, #0
 8019460:	60bb      	str	r3, [r7, #8]
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	60fb      	str	r3, [r7, #12]
 8019466:	e029      	b.n	80194bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8019468:	4a27      	ldr	r2, [pc, #156]	@ (8019508 <chk_lock+0xb4>)
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	011b      	lsls	r3, r3, #4
 801946e:	4413      	add	r3, r2
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d01d      	beq.n	80194b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019476:	4a24      	ldr	r2, [pc, #144]	@ (8019508 <chk_lock+0xb4>)
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	011b      	lsls	r3, r3, #4
 801947c:	4413      	add	r3, r2
 801947e:	681a      	ldr	r2, [r3, #0]
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	429a      	cmp	r2, r3
 8019486:	d116      	bne.n	80194b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8019488:	4a1f      	ldr	r2, [pc, #124]	@ (8019508 <chk_lock+0xb4>)
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	011b      	lsls	r3, r3, #4
 801948e:	4413      	add	r3, r2
 8019490:	3304      	adds	r3, #4
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019498:	429a      	cmp	r2, r3
 801949a:	d10c      	bne.n	80194b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801949c:	4a1a      	ldr	r2, [pc, #104]	@ (8019508 <chk_lock+0xb4>)
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	011b      	lsls	r3, r3, #4
 80194a2:	4413      	add	r3, r2
 80194a4:	3308      	adds	r3, #8
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d102      	bne.n	80194b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194b0:	e007      	b.n	80194c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80194b2:	2301      	movs	r3, #1
 80194b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	3301      	adds	r3, #1
 80194ba:	60fb      	str	r3, [r7, #12]
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	2b01      	cmp	r3, #1
 80194c0:	d9d2      	bls.n	8019468 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	2b02      	cmp	r3, #2
 80194c6:	d109      	bne.n	80194dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d102      	bne.n	80194d4 <chk_lock+0x80>
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	2b02      	cmp	r3, #2
 80194d2:	d101      	bne.n	80194d8 <chk_lock+0x84>
 80194d4:	2300      	movs	r3, #0
 80194d6:	e010      	b.n	80194fa <chk_lock+0xa6>
 80194d8:	2312      	movs	r3, #18
 80194da:	e00e      	b.n	80194fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d108      	bne.n	80194f4 <chk_lock+0xa0>
 80194e2:	4a09      	ldr	r2, [pc, #36]	@ (8019508 <chk_lock+0xb4>)
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	011b      	lsls	r3, r3, #4
 80194e8:	4413      	add	r3, r2
 80194ea:	330c      	adds	r3, #12
 80194ec:	881b      	ldrh	r3, [r3, #0]
 80194ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80194f2:	d101      	bne.n	80194f8 <chk_lock+0xa4>
 80194f4:	2310      	movs	r3, #16
 80194f6:	e000      	b.n	80194fa <chk_lock+0xa6>
 80194f8:	2300      	movs	r3, #0
}
 80194fa:	4618      	mov	r0, r3
 80194fc:	3714      	adds	r7, #20
 80194fe:	46bd      	mov	sp, r7
 8019500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019504:	4770      	bx	lr
 8019506:	bf00      	nop
 8019508:	20001b70 	.word	0x20001b70

0801950c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801950c:	b480      	push	{r7}
 801950e:	b083      	sub	sp, #12
 8019510:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019512:	2300      	movs	r3, #0
 8019514:	607b      	str	r3, [r7, #4]
 8019516:	e002      	b.n	801951e <enq_lock+0x12>
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	3301      	adds	r3, #1
 801951c:	607b      	str	r3, [r7, #4]
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2b01      	cmp	r3, #1
 8019522:	d806      	bhi.n	8019532 <enq_lock+0x26>
 8019524:	4a09      	ldr	r2, [pc, #36]	@ (801954c <enq_lock+0x40>)
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	011b      	lsls	r3, r3, #4
 801952a:	4413      	add	r3, r2
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d1f2      	bne.n	8019518 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2b02      	cmp	r3, #2
 8019536:	bf14      	ite	ne
 8019538:	2301      	movne	r3, #1
 801953a:	2300      	moveq	r3, #0
 801953c:	b2db      	uxtb	r3, r3
}
 801953e:	4618      	mov	r0, r3
 8019540:	370c      	adds	r7, #12
 8019542:	46bd      	mov	sp, r7
 8019544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019548:	4770      	bx	lr
 801954a:	bf00      	nop
 801954c:	20001b70 	.word	0x20001b70

08019550 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019550:	b480      	push	{r7}
 8019552:	b085      	sub	sp, #20
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
 8019558:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801955a:	2300      	movs	r3, #0
 801955c:	60fb      	str	r3, [r7, #12]
 801955e:	e01f      	b.n	80195a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8019560:	4a41      	ldr	r2, [pc, #260]	@ (8019668 <inc_lock+0x118>)
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	011b      	lsls	r3, r3, #4
 8019566:	4413      	add	r3, r2
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	429a      	cmp	r2, r3
 8019570:	d113      	bne.n	801959a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8019572:	4a3d      	ldr	r2, [pc, #244]	@ (8019668 <inc_lock+0x118>)
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	011b      	lsls	r3, r3, #4
 8019578:	4413      	add	r3, r2
 801957a:	3304      	adds	r3, #4
 801957c:	681a      	ldr	r2, [r3, #0]
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8019582:	429a      	cmp	r2, r3
 8019584:	d109      	bne.n	801959a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8019586:	4a38      	ldr	r2, [pc, #224]	@ (8019668 <inc_lock+0x118>)
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	011b      	lsls	r3, r3, #4
 801958c:	4413      	add	r3, r2
 801958e:	3308      	adds	r3, #8
 8019590:	681a      	ldr	r2, [r3, #0]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8019596:	429a      	cmp	r2, r3
 8019598:	d006      	beq.n	80195a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	3301      	adds	r3, #1
 801959e:	60fb      	str	r3, [r7, #12]
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	2b01      	cmp	r3, #1
 80195a4:	d9dc      	bls.n	8019560 <inc_lock+0x10>
 80195a6:	e000      	b.n	80195aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80195a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	2b02      	cmp	r3, #2
 80195ae:	d132      	bne.n	8019616 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80195b0:	2300      	movs	r3, #0
 80195b2:	60fb      	str	r3, [r7, #12]
 80195b4:	e002      	b.n	80195bc <inc_lock+0x6c>
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	3301      	adds	r3, #1
 80195ba:	60fb      	str	r3, [r7, #12]
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	2b01      	cmp	r3, #1
 80195c0:	d806      	bhi.n	80195d0 <inc_lock+0x80>
 80195c2:	4a29      	ldr	r2, [pc, #164]	@ (8019668 <inc_lock+0x118>)
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	011b      	lsls	r3, r3, #4
 80195c8:	4413      	add	r3, r2
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1f2      	bne.n	80195b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	2b02      	cmp	r3, #2
 80195d4:	d101      	bne.n	80195da <inc_lock+0x8a>
 80195d6:	2300      	movs	r3, #0
 80195d8:	e040      	b.n	801965c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681a      	ldr	r2, [r3, #0]
 80195de:	4922      	ldr	r1, [pc, #136]	@ (8019668 <inc_lock+0x118>)
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	011b      	lsls	r3, r3, #4
 80195e4:	440b      	add	r3, r1
 80195e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	689a      	ldr	r2, [r3, #8]
 80195ec:	491e      	ldr	r1, [pc, #120]	@ (8019668 <inc_lock+0x118>)
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	011b      	lsls	r3, r3, #4
 80195f2:	440b      	add	r3, r1
 80195f4:	3304      	adds	r3, #4
 80195f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	695a      	ldr	r2, [r3, #20]
 80195fc:	491a      	ldr	r1, [pc, #104]	@ (8019668 <inc_lock+0x118>)
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	011b      	lsls	r3, r3, #4
 8019602:	440b      	add	r3, r1
 8019604:	3308      	adds	r3, #8
 8019606:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019608:	4a17      	ldr	r2, [pc, #92]	@ (8019668 <inc_lock+0x118>)
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	011b      	lsls	r3, r3, #4
 801960e:	4413      	add	r3, r2
 8019610:	330c      	adds	r3, #12
 8019612:	2200      	movs	r2, #0
 8019614:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d009      	beq.n	8019630 <inc_lock+0xe0>
 801961c:	4a12      	ldr	r2, [pc, #72]	@ (8019668 <inc_lock+0x118>)
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	011b      	lsls	r3, r3, #4
 8019622:	4413      	add	r3, r2
 8019624:	330c      	adds	r3, #12
 8019626:	881b      	ldrh	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d001      	beq.n	8019630 <inc_lock+0xe0>
 801962c:	2300      	movs	r3, #0
 801962e:	e015      	b.n	801965c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d108      	bne.n	8019648 <inc_lock+0xf8>
 8019636:	4a0c      	ldr	r2, [pc, #48]	@ (8019668 <inc_lock+0x118>)
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	011b      	lsls	r3, r3, #4
 801963c:	4413      	add	r3, r2
 801963e:	330c      	adds	r3, #12
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	3301      	adds	r3, #1
 8019644:	b29a      	uxth	r2, r3
 8019646:	e001      	b.n	801964c <inc_lock+0xfc>
 8019648:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801964c:	4906      	ldr	r1, [pc, #24]	@ (8019668 <inc_lock+0x118>)
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	011b      	lsls	r3, r3, #4
 8019652:	440b      	add	r3, r1
 8019654:	330c      	adds	r3, #12
 8019656:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	3301      	adds	r3, #1
}
 801965c:	4618      	mov	r0, r3
 801965e:	3714      	adds	r7, #20
 8019660:	46bd      	mov	sp, r7
 8019662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019666:	4770      	bx	lr
 8019668:	20001b70 	.word	0x20001b70

0801966c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801966c:	b480      	push	{r7}
 801966e:	b085      	sub	sp, #20
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	3b01      	subs	r3, #1
 8019678:	607b      	str	r3, [r7, #4]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2b01      	cmp	r3, #1
 801967e:	d825      	bhi.n	80196cc <dec_lock+0x60>
		n = Files[i].ctr;
 8019680:	4a17      	ldr	r2, [pc, #92]	@ (80196e0 <dec_lock+0x74>)
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	011b      	lsls	r3, r3, #4
 8019686:	4413      	add	r3, r2
 8019688:	330c      	adds	r3, #12
 801968a:	881b      	ldrh	r3, [r3, #0]
 801968c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801968e:	89fb      	ldrh	r3, [r7, #14]
 8019690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019694:	d101      	bne.n	801969a <dec_lock+0x2e>
 8019696:	2300      	movs	r3, #0
 8019698:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801969a:	89fb      	ldrh	r3, [r7, #14]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d002      	beq.n	80196a6 <dec_lock+0x3a>
 80196a0:	89fb      	ldrh	r3, [r7, #14]
 80196a2:	3b01      	subs	r3, #1
 80196a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80196a6:	4a0e      	ldr	r2, [pc, #56]	@ (80196e0 <dec_lock+0x74>)
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	011b      	lsls	r3, r3, #4
 80196ac:	4413      	add	r3, r2
 80196ae:	330c      	adds	r3, #12
 80196b0:	89fa      	ldrh	r2, [r7, #14]
 80196b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80196b4:	89fb      	ldrh	r3, [r7, #14]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d105      	bne.n	80196c6 <dec_lock+0x5a>
 80196ba:	4a09      	ldr	r2, [pc, #36]	@ (80196e0 <dec_lock+0x74>)
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	011b      	lsls	r3, r3, #4
 80196c0:	4413      	add	r3, r2
 80196c2:	2200      	movs	r2, #0
 80196c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80196c6:	2300      	movs	r3, #0
 80196c8:	737b      	strb	r3, [r7, #13]
 80196ca:	e001      	b.n	80196d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80196cc:	2302      	movs	r3, #2
 80196ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80196d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80196d2:	4618      	mov	r0, r3
 80196d4:	3714      	adds	r7, #20
 80196d6:	46bd      	mov	sp, r7
 80196d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196dc:	4770      	bx	lr
 80196de:	bf00      	nop
 80196e0:	20001b70 	.word	0x20001b70

080196e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80196e4:	b480      	push	{r7}
 80196e6:	b085      	sub	sp, #20
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80196ec:	2300      	movs	r3, #0
 80196ee:	60fb      	str	r3, [r7, #12]
 80196f0:	e010      	b.n	8019714 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80196f2:	4a0d      	ldr	r2, [pc, #52]	@ (8019728 <clear_lock+0x44>)
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	011b      	lsls	r3, r3, #4
 80196f8:	4413      	add	r3, r2
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	687a      	ldr	r2, [r7, #4]
 80196fe:	429a      	cmp	r2, r3
 8019700:	d105      	bne.n	801970e <clear_lock+0x2a>
 8019702:	4a09      	ldr	r2, [pc, #36]	@ (8019728 <clear_lock+0x44>)
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	011b      	lsls	r3, r3, #4
 8019708:	4413      	add	r3, r2
 801970a:	2200      	movs	r2, #0
 801970c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	3301      	adds	r3, #1
 8019712:	60fb      	str	r3, [r7, #12]
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	2b01      	cmp	r3, #1
 8019718:	d9eb      	bls.n	80196f2 <clear_lock+0xe>
	}
}
 801971a:	bf00      	nop
 801971c:	bf00      	nop
 801971e:	3714      	adds	r7, #20
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr
 8019728:	20001b70 	.word	0x20001b70

0801972c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b086      	sub	sp, #24
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8019734:	2300      	movs	r3, #0
 8019736:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	78db      	ldrb	r3, [r3, #3]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d034      	beq.n	80197aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019744:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	7858      	ldrb	r0, [r3, #1]
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019750:	2301      	movs	r3, #1
 8019752:	697a      	ldr	r2, [r7, #20]
 8019754:	f7ff fd40 	bl	80191d8 <disk_write>
 8019758:	4603      	mov	r3, r0
 801975a:	2b00      	cmp	r3, #0
 801975c:	d002      	beq.n	8019764 <sync_window+0x38>
			res = FR_DISK_ERR;
 801975e:	2301      	movs	r3, #1
 8019760:	73fb      	strb	r3, [r7, #15]
 8019762:	e022      	b.n	80197aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2200      	movs	r2, #0
 8019768:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801976e:	697a      	ldr	r2, [r7, #20]
 8019770:	1ad2      	subs	r2, r2, r3
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	69db      	ldr	r3, [r3, #28]
 8019776:	429a      	cmp	r2, r3
 8019778:	d217      	bcs.n	80197aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	789b      	ldrb	r3, [r3, #2]
 801977e:	613b      	str	r3, [r7, #16]
 8019780:	e010      	b.n	80197a4 <sync_window+0x78>
					wsect += fs->fsize;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	69db      	ldr	r3, [r3, #28]
 8019786:	697a      	ldr	r2, [r7, #20]
 8019788:	4413      	add	r3, r2
 801978a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	7858      	ldrb	r0, [r3, #1]
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019796:	2301      	movs	r3, #1
 8019798:	697a      	ldr	r2, [r7, #20]
 801979a:	f7ff fd1d 	bl	80191d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	3b01      	subs	r3, #1
 80197a2:	613b      	str	r3, [r7, #16]
 80197a4:	693b      	ldr	r3, [r7, #16]
 80197a6:	2b01      	cmp	r3, #1
 80197a8:	d8eb      	bhi.n	8019782 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80197aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80197ac:	4618      	mov	r0, r3
 80197ae:	3718      	adds	r7, #24
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}

080197b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
 80197bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80197be:	2300      	movs	r3, #0
 80197c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197c6:	683a      	ldr	r2, [r7, #0]
 80197c8:	429a      	cmp	r2, r3
 80197ca:	d01b      	beq.n	8019804 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f7ff ffad 	bl	801972c <sync_window>
 80197d2:	4603      	mov	r3, r0
 80197d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80197d6:	7bfb      	ldrb	r3, [r7, #15]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d113      	bne.n	8019804 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	7858      	ldrb	r0, [r3, #1]
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197e6:	2301      	movs	r3, #1
 80197e8:	683a      	ldr	r2, [r7, #0]
 80197ea:	f7ff fcd5 	bl	8019198 <disk_read>
 80197ee:	4603      	mov	r3, r0
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d004      	beq.n	80197fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80197f4:	f04f 33ff 	mov.w	r3, #4294967295
 80197f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80197fa:	2301      	movs	r3, #1
 80197fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	683a      	ldr	r2, [r7, #0]
 8019802:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8019804:	7bfb      	ldrb	r3, [r7, #15]
}
 8019806:	4618      	mov	r0, r3
 8019808:	3710      	adds	r7, #16
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
	...

08019810 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b084      	sub	sp, #16
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f7ff ff87 	bl	801972c <sync_window>
 801981e:	4603      	mov	r3, r0
 8019820:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019822:	7bfb      	ldrb	r3, [r7, #15]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d158      	bne.n	80198da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	781b      	ldrb	r3, [r3, #0]
 801982c:	2b03      	cmp	r3, #3
 801982e:	d148      	bne.n	80198c2 <sync_fs+0xb2>
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	791b      	ldrb	r3, [r3, #4]
 8019834:	2b01      	cmp	r3, #1
 8019836:	d144      	bne.n	80198c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	3334      	adds	r3, #52	@ 0x34
 801983c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019840:	2100      	movs	r1, #0
 8019842:	4618      	mov	r0, r3
 8019844:	f7ff fda9 	bl	801939a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	3334      	adds	r3, #52	@ 0x34
 801984c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019850:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8019854:	4618      	mov	r0, r3
 8019856:	f7ff fd38 	bl	80192ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	3334      	adds	r3, #52	@ 0x34
 801985e:	4921      	ldr	r1, [pc, #132]	@ (80198e4 <sync_fs+0xd4>)
 8019860:	4618      	mov	r0, r3
 8019862:	f7ff fd4d 	bl	8019300 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	3334      	adds	r3, #52	@ 0x34
 801986a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801986e:	491e      	ldr	r1, [pc, #120]	@ (80198e8 <sync_fs+0xd8>)
 8019870:	4618      	mov	r0, r3
 8019872:	f7ff fd45 	bl	8019300 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	3334      	adds	r3, #52	@ 0x34
 801987a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	695b      	ldr	r3, [r3, #20]
 8019882:	4619      	mov	r1, r3
 8019884:	4610      	mov	r0, r2
 8019886:	f7ff fd3b 	bl	8019300 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	3334      	adds	r3, #52	@ 0x34
 801988e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	691b      	ldr	r3, [r3, #16]
 8019896:	4619      	mov	r1, r3
 8019898:	4610      	mov	r0, r2
 801989a:	f7ff fd31 	bl	8019300 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	6a1b      	ldr	r3, [r3, #32]
 80198a2:	1c5a      	adds	r2, r3, #1
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	7858      	ldrb	r0, [r3, #1]
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80198b6:	2301      	movs	r3, #1
 80198b8:	f7ff fc8e 	bl	80191d8 <disk_write>
			fs->fsi_flag = 0;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2200      	movs	r2, #0
 80198c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	785b      	ldrb	r3, [r3, #1]
 80198c6:	2200      	movs	r2, #0
 80198c8:	2100      	movs	r1, #0
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7ff fca4 	bl	8019218 <disk_ioctl>
 80198d0:	4603      	mov	r3, r0
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d001      	beq.n	80198da <sync_fs+0xca>
 80198d6:	2301      	movs	r3, #1
 80198d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80198da:	7bfb      	ldrb	r3, [r7, #15]
}
 80198dc:	4618      	mov	r0, r3
 80198de:	3710      	adds	r7, #16
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}
 80198e4:	41615252 	.word	0x41615252
 80198e8:	61417272 	.word	0x61417272

080198ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80198ec:	b480      	push	{r7}
 80198ee:	b083      	sub	sp, #12
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	3b02      	subs	r3, #2
 80198fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	699b      	ldr	r3, [r3, #24]
 8019900:	3b02      	subs	r3, #2
 8019902:	683a      	ldr	r2, [r7, #0]
 8019904:	429a      	cmp	r2, r3
 8019906:	d301      	bcc.n	801990c <clust2sect+0x20>
 8019908:	2300      	movs	r3, #0
 801990a:	e008      	b.n	801991e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	895b      	ldrh	r3, [r3, #10]
 8019910:	461a      	mov	r2, r3
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	fb03 f202 	mul.w	r2, r3, r2
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801991c:	4413      	add	r3, r2
}
 801991e:	4618      	mov	r0, r3
 8019920:	370c      	adds	r7, #12
 8019922:	46bd      	mov	sp, r7
 8019924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019928:	4770      	bx	lr

0801992a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801992a:	b580      	push	{r7, lr}
 801992c:	b086      	sub	sp, #24
 801992e:	af00      	add	r7, sp, #0
 8019930:	6078      	str	r0, [r7, #4]
 8019932:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	2b01      	cmp	r3, #1
 801993e:	d904      	bls.n	801994a <get_fat+0x20>
 8019940:	693b      	ldr	r3, [r7, #16]
 8019942:	699b      	ldr	r3, [r3, #24]
 8019944:	683a      	ldr	r2, [r7, #0]
 8019946:	429a      	cmp	r2, r3
 8019948:	d302      	bcc.n	8019950 <get_fat+0x26>
		val = 1;	/* Internal error */
 801994a:	2301      	movs	r3, #1
 801994c:	617b      	str	r3, [r7, #20]
 801994e:	e08e      	b.n	8019a6e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019950:	f04f 33ff 	mov.w	r3, #4294967295
 8019954:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8019956:	693b      	ldr	r3, [r7, #16]
 8019958:	781b      	ldrb	r3, [r3, #0]
 801995a:	2b03      	cmp	r3, #3
 801995c:	d061      	beq.n	8019a22 <get_fat+0xf8>
 801995e:	2b03      	cmp	r3, #3
 8019960:	dc7b      	bgt.n	8019a5a <get_fat+0x130>
 8019962:	2b01      	cmp	r3, #1
 8019964:	d002      	beq.n	801996c <get_fat+0x42>
 8019966:	2b02      	cmp	r3, #2
 8019968:	d041      	beq.n	80199ee <get_fat+0xc4>
 801996a:	e076      	b.n	8019a5a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801996c:	683b      	ldr	r3, [r7, #0]
 801996e:	60fb      	str	r3, [r7, #12]
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	085b      	lsrs	r3, r3, #1
 8019974:	68fa      	ldr	r2, [r7, #12]
 8019976:	4413      	add	r3, r2
 8019978:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801997a:	693b      	ldr	r3, [r7, #16]
 801997c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	0a5b      	lsrs	r3, r3, #9
 8019982:	4413      	add	r3, r2
 8019984:	4619      	mov	r1, r3
 8019986:	6938      	ldr	r0, [r7, #16]
 8019988:	f7ff ff14 	bl	80197b4 <move_window>
 801998c:	4603      	mov	r3, r0
 801998e:	2b00      	cmp	r3, #0
 8019990:	d166      	bne.n	8019a60 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	1c5a      	adds	r2, r3, #1
 8019996:	60fa      	str	r2, [r7, #12]
 8019998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801999c:	693a      	ldr	r2, [r7, #16]
 801999e:	4413      	add	r3, r2
 80199a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	0a5b      	lsrs	r3, r3, #9
 80199ae:	4413      	add	r3, r2
 80199b0:	4619      	mov	r1, r3
 80199b2:	6938      	ldr	r0, [r7, #16]
 80199b4:	f7ff fefe 	bl	80197b4 <move_window>
 80199b8:	4603      	mov	r3, r0
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d152      	bne.n	8019a64 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199c4:	693a      	ldr	r2, [r7, #16]
 80199c6:	4413      	add	r3, r2
 80199c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199cc:	021b      	lsls	r3, r3, #8
 80199ce:	68ba      	ldr	r2, [r7, #8]
 80199d0:	4313      	orrs	r3, r2
 80199d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	f003 0301 	and.w	r3, r3, #1
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d002      	beq.n	80199e4 <get_fat+0xba>
 80199de:	68bb      	ldr	r3, [r7, #8]
 80199e0:	091b      	lsrs	r3, r3, #4
 80199e2:	e002      	b.n	80199ea <get_fat+0xc0>
 80199e4:	68bb      	ldr	r3, [r7, #8]
 80199e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80199ea:	617b      	str	r3, [r7, #20]
			break;
 80199ec:	e03f      	b.n	8019a6e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80199ee:	693b      	ldr	r3, [r7, #16]
 80199f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	0a1b      	lsrs	r3, r3, #8
 80199f6:	4413      	add	r3, r2
 80199f8:	4619      	mov	r1, r3
 80199fa:	6938      	ldr	r0, [r7, #16]
 80199fc:	f7ff feda 	bl	80197b4 <move_window>
 8019a00:	4603      	mov	r3, r0
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d130      	bne.n	8019a68 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019a06:	693b      	ldr	r3, [r7, #16]
 8019a08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	005b      	lsls	r3, r3, #1
 8019a10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019a14:	4413      	add	r3, r2
 8019a16:	4618      	mov	r0, r3
 8019a18:	f7ff fc1c 	bl	8019254 <ld_word>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	617b      	str	r3, [r7, #20]
			break;
 8019a20:	e025      	b.n	8019a6e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a22:	693b      	ldr	r3, [r7, #16]
 8019a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	09db      	lsrs	r3, r3, #7
 8019a2a:	4413      	add	r3, r2
 8019a2c:	4619      	mov	r1, r3
 8019a2e:	6938      	ldr	r0, [r7, #16]
 8019a30:	f7ff fec0 	bl	80197b4 <move_window>
 8019a34:	4603      	mov	r3, r0
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d118      	bne.n	8019a6c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	009b      	lsls	r3, r3, #2
 8019a44:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019a48:	4413      	add	r3, r2
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7ff fc1a 	bl	8019284 <ld_dword>
 8019a50:	4603      	mov	r3, r0
 8019a52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8019a56:	617b      	str	r3, [r7, #20]
			break;
 8019a58:	e009      	b.n	8019a6e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	617b      	str	r3, [r7, #20]
 8019a5e:	e006      	b.n	8019a6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a60:	bf00      	nop
 8019a62:	e004      	b.n	8019a6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a64:	bf00      	nop
 8019a66:	e002      	b.n	8019a6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a68:	bf00      	nop
 8019a6a:	e000      	b.n	8019a6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a6c:	bf00      	nop
		}
	}

	return val;
 8019a6e:	697b      	ldr	r3, [r7, #20]
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	3718      	adds	r7, #24
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd80      	pop	{r7, pc}

08019a78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019a78:	b590      	push	{r4, r7, lr}
 8019a7a:	b089      	sub	sp, #36	@ 0x24
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	60f8      	str	r0, [r7, #12]
 8019a80:	60b9      	str	r1, [r7, #8]
 8019a82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019a84:	2302      	movs	r3, #2
 8019a86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	f240 80d9 	bls.w	8019c42 <put_fat+0x1ca>
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	699b      	ldr	r3, [r3, #24]
 8019a94:	68ba      	ldr	r2, [r7, #8]
 8019a96:	429a      	cmp	r2, r3
 8019a98:	f080 80d3 	bcs.w	8019c42 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	781b      	ldrb	r3, [r3, #0]
 8019aa0:	2b03      	cmp	r3, #3
 8019aa2:	f000 8096 	beq.w	8019bd2 <put_fat+0x15a>
 8019aa6:	2b03      	cmp	r3, #3
 8019aa8:	f300 80cb 	bgt.w	8019c42 <put_fat+0x1ca>
 8019aac:	2b01      	cmp	r3, #1
 8019aae:	d002      	beq.n	8019ab6 <put_fat+0x3e>
 8019ab0:	2b02      	cmp	r3, #2
 8019ab2:	d06e      	beq.n	8019b92 <put_fat+0x11a>
 8019ab4:	e0c5      	b.n	8019c42 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	61bb      	str	r3, [r7, #24]
 8019aba:	69bb      	ldr	r3, [r7, #24]
 8019abc:	085b      	lsrs	r3, r3, #1
 8019abe:	69ba      	ldr	r2, [r7, #24]
 8019ac0:	4413      	add	r3, r2
 8019ac2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019ac8:	69bb      	ldr	r3, [r7, #24]
 8019aca:	0a5b      	lsrs	r3, r3, #9
 8019acc:	4413      	add	r3, r2
 8019ace:	4619      	mov	r1, r3
 8019ad0:	68f8      	ldr	r0, [r7, #12]
 8019ad2:	f7ff fe6f 	bl	80197b4 <move_window>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019ada:	7ffb      	ldrb	r3, [r7, #31]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	f040 80a9 	bne.w	8019c34 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019ae8:	69bb      	ldr	r3, [r7, #24]
 8019aea:	1c59      	adds	r1, r3, #1
 8019aec:	61b9      	str	r1, [r7, #24]
 8019aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019af2:	4413      	add	r3, r2
 8019af4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019af6:	68bb      	ldr	r3, [r7, #8]
 8019af8:	f003 0301 	and.w	r3, r3, #1
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d00d      	beq.n	8019b1c <put_fat+0xa4>
 8019b00:	697b      	ldr	r3, [r7, #20]
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	b25b      	sxtb	r3, r3
 8019b06:	f003 030f 	and.w	r3, r3, #15
 8019b0a:	b25a      	sxtb	r2, r3
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	011b      	lsls	r3, r3, #4
 8019b12:	b25b      	sxtb	r3, r3
 8019b14:	4313      	orrs	r3, r2
 8019b16:	b25b      	sxtb	r3, r3
 8019b18:	b2db      	uxtb	r3, r3
 8019b1a:	e001      	b.n	8019b20 <put_fat+0xa8>
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	b2db      	uxtb	r3, r3
 8019b20:	697a      	ldr	r2, [r7, #20]
 8019b22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	2201      	movs	r2, #1
 8019b28:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b2e:	69bb      	ldr	r3, [r7, #24]
 8019b30:	0a5b      	lsrs	r3, r3, #9
 8019b32:	4413      	add	r3, r2
 8019b34:	4619      	mov	r1, r3
 8019b36:	68f8      	ldr	r0, [r7, #12]
 8019b38:	f7ff fe3c 	bl	80197b4 <move_window>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b40:	7ffb      	ldrb	r3, [r7, #31]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d178      	bne.n	8019c38 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b4c:	69bb      	ldr	r3, [r7, #24]
 8019b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b52:	4413      	add	r3, r2
 8019b54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	f003 0301 	and.w	r3, r3, #1
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d003      	beq.n	8019b68 <put_fat+0xf0>
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	091b      	lsrs	r3, r3, #4
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	e00e      	b.n	8019b86 <put_fat+0x10e>
 8019b68:	697b      	ldr	r3, [r7, #20]
 8019b6a:	781b      	ldrb	r3, [r3, #0]
 8019b6c:	b25b      	sxtb	r3, r3
 8019b6e:	f023 030f 	bic.w	r3, r3, #15
 8019b72:	b25a      	sxtb	r2, r3
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	0a1b      	lsrs	r3, r3, #8
 8019b78:	b25b      	sxtb	r3, r3
 8019b7a:	f003 030f 	and.w	r3, r3, #15
 8019b7e:	b25b      	sxtb	r3, r3
 8019b80:	4313      	orrs	r3, r2
 8019b82:	b25b      	sxtb	r3, r3
 8019b84:	b2db      	uxtb	r3, r3
 8019b86:	697a      	ldr	r2, [r7, #20]
 8019b88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	2201      	movs	r2, #1
 8019b8e:	70da      	strb	r2, [r3, #3]
			break;
 8019b90:	e057      	b.n	8019c42 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	0a1b      	lsrs	r3, r3, #8
 8019b9a:	4413      	add	r3, r2
 8019b9c:	4619      	mov	r1, r3
 8019b9e:	68f8      	ldr	r0, [r7, #12]
 8019ba0:	f7ff fe08 	bl	80197b4 <move_window>
 8019ba4:	4603      	mov	r3, r0
 8019ba6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019ba8:	7ffb      	ldrb	r3, [r7, #31]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d146      	bne.n	8019c3c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	005b      	lsls	r3, r3, #1
 8019bb8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019bbc:	4413      	add	r3, r2
 8019bbe:	687a      	ldr	r2, [r7, #4]
 8019bc0:	b292      	uxth	r2, r2
 8019bc2:	4611      	mov	r1, r2
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	f7ff fb80 	bl	80192ca <st_word>
			fs->wflag = 1;
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	2201      	movs	r2, #1
 8019bce:	70da      	strb	r2, [r3, #3]
			break;
 8019bd0:	e037      	b.n	8019c42 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	09db      	lsrs	r3, r3, #7
 8019bda:	4413      	add	r3, r2
 8019bdc:	4619      	mov	r1, r3
 8019bde:	68f8      	ldr	r0, [r7, #12]
 8019be0:	f7ff fde8 	bl	80197b4 <move_window>
 8019be4:	4603      	mov	r3, r0
 8019be6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019be8:	7ffb      	ldrb	r3, [r7, #31]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d128      	bne.n	8019c40 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	009b      	lsls	r3, r3, #2
 8019bfe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c02:	4413      	add	r3, r2
 8019c04:	4618      	mov	r0, r3
 8019c06:	f7ff fb3d 	bl	8019284 <ld_dword>
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8019c10:	4323      	orrs	r3, r4
 8019c12:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c1a:	68bb      	ldr	r3, [r7, #8]
 8019c1c:	009b      	lsls	r3, r3, #2
 8019c1e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c22:	4413      	add	r3, r2
 8019c24:	6879      	ldr	r1, [r7, #4]
 8019c26:	4618      	mov	r0, r3
 8019c28:	f7ff fb6a 	bl	8019300 <st_dword>
			fs->wflag = 1;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2201      	movs	r2, #1
 8019c30:	70da      	strb	r2, [r3, #3]
			break;
 8019c32:	e006      	b.n	8019c42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c34:	bf00      	nop
 8019c36:	e004      	b.n	8019c42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c38:	bf00      	nop
 8019c3a:	e002      	b.n	8019c42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c3c:	bf00      	nop
 8019c3e:	e000      	b.n	8019c42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c40:	bf00      	nop
		}
	}
	return res;
 8019c42:	7ffb      	ldrb	r3, [r7, #31]
}
 8019c44:	4618      	mov	r0, r3
 8019c46:	3724      	adds	r7, #36	@ 0x24
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd90      	pop	{r4, r7, pc}

08019c4c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019c4c:	b580      	push	{r7, lr}
 8019c4e:	b088      	sub	sp, #32
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	60f8      	str	r0, [r7, #12]
 8019c54:	60b9      	str	r1, [r7, #8]
 8019c56:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019c58:	2300      	movs	r3, #0
 8019c5a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019c62:	68bb      	ldr	r3, [r7, #8]
 8019c64:	2b01      	cmp	r3, #1
 8019c66:	d904      	bls.n	8019c72 <remove_chain+0x26>
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	699b      	ldr	r3, [r3, #24]
 8019c6c:	68ba      	ldr	r2, [r7, #8]
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d301      	bcc.n	8019c76 <remove_chain+0x2a>
 8019c72:	2302      	movs	r3, #2
 8019c74:	e04b      	b.n	8019d0e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d00c      	beq.n	8019c96 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c80:	6879      	ldr	r1, [r7, #4]
 8019c82:	69b8      	ldr	r0, [r7, #24]
 8019c84:	f7ff fef8 	bl	8019a78 <put_fat>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019c8c:	7ffb      	ldrb	r3, [r7, #31]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d001      	beq.n	8019c96 <remove_chain+0x4a>
 8019c92:	7ffb      	ldrb	r3, [r7, #31]
 8019c94:	e03b      	b.n	8019d0e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019c96:	68b9      	ldr	r1, [r7, #8]
 8019c98:	68f8      	ldr	r0, [r7, #12]
 8019c9a:	f7ff fe46 	bl	801992a <get_fat>
 8019c9e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d031      	beq.n	8019d0a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	2b01      	cmp	r3, #1
 8019caa:	d101      	bne.n	8019cb0 <remove_chain+0x64>
 8019cac:	2302      	movs	r3, #2
 8019cae:	e02e      	b.n	8019d0e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019cb0:	697b      	ldr	r3, [r7, #20]
 8019cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cb6:	d101      	bne.n	8019cbc <remove_chain+0x70>
 8019cb8:	2301      	movs	r3, #1
 8019cba:	e028      	b.n	8019d0e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	68b9      	ldr	r1, [r7, #8]
 8019cc0:	69b8      	ldr	r0, [r7, #24]
 8019cc2:	f7ff fed9 	bl	8019a78 <put_fat>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019cca:	7ffb      	ldrb	r3, [r7, #31]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d001      	beq.n	8019cd4 <remove_chain+0x88>
 8019cd0:	7ffb      	ldrb	r3, [r7, #31]
 8019cd2:	e01c      	b.n	8019d0e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019cd4:	69bb      	ldr	r3, [r7, #24]
 8019cd6:	695a      	ldr	r2, [r3, #20]
 8019cd8:	69bb      	ldr	r3, [r7, #24]
 8019cda:	699b      	ldr	r3, [r3, #24]
 8019cdc:	3b02      	subs	r3, #2
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d20b      	bcs.n	8019cfa <remove_chain+0xae>
			fs->free_clst++;
 8019ce2:	69bb      	ldr	r3, [r7, #24]
 8019ce4:	695b      	ldr	r3, [r3, #20]
 8019ce6:	1c5a      	adds	r2, r3, #1
 8019ce8:	69bb      	ldr	r3, [r7, #24]
 8019cea:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019cec:	69bb      	ldr	r3, [r7, #24]
 8019cee:	791b      	ldrb	r3, [r3, #4]
 8019cf0:	f043 0301 	orr.w	r3, r3, #1
 8019cf4:	b2da      	uxtb	r2, r3
 8019cf6:	69bb      	ldr	r3, [r7, #24]
 8019cf8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019cfa:	697b      	ldr	r3, [r7, #20]
 8019cfc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	699b      	ldr	r3, [r3, #24]
 8019d02:	68ba      	ldr	r2, [r7, #8]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d3c6      	bcc.n	8019c96 <remove_chain+0x4a>
 8019d08:	e000      	b.n	8019d0c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019d0a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019d0c:	2300      	movs	r3, #0
}
 8019d0e:	4618      	mov	r0, r3
 8019d10:	3720      	adds	r7, #32
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}

08019d16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019d16:	b580      	push	{r7, lr}
 8019d18:	b088      	sub	sp, #32
 8019d1a:	af00      	add	r7, sp, #0
 8019d1c:	6078      	str	r0, [r7, #4]
 8019d1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d10d      	bne.n	8019d48 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019d2c:	693b      	ldr	r3, [r7, #16]
 8019d2e:	691b      	ldr	r3, [r3, #16]
 8019d30:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019d32:	69bb      	ldr	r3, [r7, #24]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d004      	beq.n	8019d42 <create_chain+0x2c>
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	699b      	ldr	r3, [r3, #24]
 8019d3c:	69ba      	ldr	r2, [r7, #24]
 8019d3e:	429a      	cmp	r2, r3
 8019d40:	d31b      	bcc.n	8019d7a <create_chain+0x64>
 8019d42:	2301      	movs	r3, #1
 8019d44:	61bb      	str	r3, [r7, #24]
 8019d46:	e018      	b.n	8019d7a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019d48:	6839      	ldr	r1, [r7, #0]
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	f7ff fded 	bl	801992a <get_fat>
 8019d50:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	2b01      	cmp	r3, #1
 8019d56:	d801      	bhi.n	8019d5c <create_chain+0x46>
 8019d58:	2301      	movs	r3, #1
 8019d5a:	e070      	b.n	8019e3e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d62:	d101      	bne.n	8019d68 <create_chain+0x52>
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	e06a      	b.n	8019e3e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019d68:	693b      	ldr	r3, [r7, #16]
 8019d6a:	699b      	ldr	r3, [r3, #24]
 8019d6c:	68fa      	ldr	r2, [r7, #12]
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d201      	bcs.n	8019d76 <create_chain+0x60>
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	e063      	b.n	8019e3e <create_chain+0x128>
		scl = clst;
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019d7a:	69bb      	ldr	r3, [r7, #24]
 8019d7c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019d7e:	69fb      	ldr	r3, [r7, #28]
 8019d80:	3301      	adds	r3, #1
 8019d82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019d84:	693b      	ldr	r3, [r7, #16]
 8019d86:	699b      	ldr	r3, [r3, #24]
 8019d88:	69fa      	ldr	r2, [r7, #28]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d307      	bcc.n	8019d9e <create_chain+0x88>
				ncl = 2;
 8019d8e:	2302      	movs	r3, #2
 8019d90:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019d92:	69fa      	ldr	r2, [r7, #28]
 8019d94:	69bb      	ldr	r3, [r7, #24]
 8019d96:	429a      	cmp	r2, r3
 8019d98:	d901      	bls.n	8019d9e <create_chain+0x88>
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	e04f      	b.n	8019e3e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019d9e:	69f9      	ldr	r1, [r7, #28]
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f7ff fdc2 	bl	801992a <get_fat>
 8019da6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d00e      	beq.n	8019dcc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	2b01      	cmp	r3, #1
 8019db2:	d003      	beq.n	8019dbc <create_chain+0xa6>
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019dba:	d101      	bne.n	8019dc0 <create_chain+0xaa>
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	e03e      	b.n	8019e3e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019dc0:	69fa      	ldr	r2, [r7, #28]
 8019dc2:	69bb      	ldr	r3, [r7, #24]
 8019dc4:	429a      	cmp	r2, r3
 8019dc6:	d1da      	bne.n	8019d7e <create_chain+0x68>
 8019dc8:	2300      	movs	r3, #0
 8019dca:	e038      	b.n	8019e3e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019dcc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019dce:	f04f 32ff 	mov.w	r2, #4294967295
 8019dd2:	69f9      	ldr	r1, [r7, #28]
 8019dd4:	6938      	ldr	r0, [r7, #16]
 8019dd6:	f7ff fe4f 	bl	8019a78 <put_fat>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019dde:	7dfb      	ldrb	r3, [r7, #23]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d109      	bne.n	8019df8 <create_chain+0xe2>
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d006      	beq.n	8019df8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019dea:	69fa      	ldr	r2, [r7, #28]
 8019dec:	6839      	ldr	r1, [r7, #0]
 8019dee:	6938      	ldr	r0, [r7, #16]
 8019df0:	f7ff fe42 	bl	8019a78 <put_fat>
 8019df4:	4603      	mov	r3, r0
 8019df6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019df8:	7dfb      	ldrb	r3, [r7, #23]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d116      	bne.n	8019e2c <create_chain+0x116>
		fs->last_clst = ncl;
 8019dfe:	693b      	ldr	r3, [r7, #16]
 8019e00:	69fa      	ldr	r2, [r7, #28]
 8019e02:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019e04:	693b      	ldr	r3, [r7, #16]
 8019e06:	695a      	ldr	r2, [r3, #20]
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	699b      	ldr	r3, [r3, #24]
 8019e0c:	3b02      	subs	r3, #2
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	d804      	bhi.n	8019e1c <create_chain+0x106>
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	695b      	ldr	r3, [r3, #20]
 8019e16:	1e5a      	subs	r2, r3, #1
 8019e18:	693b      	ldr	r3, [r7, #16]
 8019e1a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	791b      	ldrb	r3, [r3, #4]
 8019e20:	f043 0301 	orr.w	r3, r3, #1
 8019e24:	b2da      	uxtb	r2, r3
 8019e26:	693b      	ldr	r3, [r7, #16]
 8019e28:	711a      	strb	r2, [r3, #4]
 8019e2a:	e007      	b.n	8019e3c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019e2c:	7dfb      	ldrb	r3, [r7, #23]
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d102      	bne.n	8019e38 <create_chain+0x122>
 8019e32:	f04f 33ff 	mov.w	r3, #4294967295
 8019e36:	e000      	b.n	8019e3a <create_chain+0x124>
 8019e38:	2301      	movs	r3, #1
 8019e3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019e3c:	69fb      	ldr	r3, [r7, #28]
}
 8019e3e:	4618      	mov	r0, r3
 8019e40:	3720      	adds	r7, #32
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}

08019e46 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019e46:	b480      	push	{r7}
 8019e48:	b087      	sub	sp, #28
 8019e4a:	af00      	add	r7, sp, #0
 8019e4c:	6078      	str	r0, [r7, #4]
 8019e4e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e5a:	3304      	adds	r3, #4
 8019e5c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	0a5b      	lsrs	r3, r3, #9
 8019e62:	68fa      	ldr	r2, [r7, #12]
 8019e64:	8952      	ldrh	r2, [r2, #10]
 8019e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e6a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019e6c:	693b      	ldr	r3, [r7, #16]
 8019e6e:	1d1a      	adds	r2, r3, #4
 8019e70:	613a      	str	r2, [r7, #16]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d101      	bne.n	8019e80 <clmt_clust+0x3a>
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	e010      	b.n	8019ea2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8019e80:	697a      	ldr	r2, [r7, #20]
 8019e82:	68bb      	ldr	r3, [r7, #8]
 8019e84:	429a      	cmp	r2, r3
 8019e86:	d307      	bcc.n	8019e98 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019e88:	697a      	ldr	r2, [r7, #20]
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	1ad3      	subs	r3, r2, r3
 8019e8e:	617b      	str	r3, [r7, #20]
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	3304      	adds	r3, #4
 8019e94:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019e96:	e7e9      	b.n	8019e6c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019e98:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019e9a:	693b      	ldr	r3, [r7, #16]
 8019e9c:	681a      	ldr	r2, [r3, #0]
 8019e9e:	697b      	ldr	r3, [r7, #20]
 8019ea0:	4413      	add	r3, r2
}
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	371c      	adds	r7, #28
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eac:	4770      	bx	lr

08019eae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8019eae:	b580      	push	{r7, lr}
 8019eb0:	b086      	sub	sp, #24
 8019eb2:	af00      	add	r7, sp, #0
 8019eb4:	6078      	str	r0, [r7, #4]
 8019eb6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8019ebe:	683b      	ldr	r3, [r7, #0]
 8019ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019ec4:	d204      	bcs.n	8019ed0 <dir_sdi+0x22>
 8019ec6:	683b      	ldr	r3, [r7, #0]
 8019ec8:	f003 031f 	and.w	r3, r3, #31
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d001      	beq.n	8019ed4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8019ed0:	2302      	movs	r3, #2
 8019ed2:	e063      	b.n	8019f9c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	683a      	ldr	r2, [r7, #0]
 8019ed8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	689b      	ldr	r3, [r3, #8]
 8019ede:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019ee0:	697b      	ldr	r3, [r7, #20]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d106      	bne.n	8019ef4 <dir_sdi+0x46>
 8019ee6:	693b      	ldr	r3, [r7, #16]
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	2b02      	cmp	r3, #2
 8019eec:	d902      	bls.n	8019ef4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8019eee:	693b      	ldr	r3, [r7, #16]
 8019ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ef2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019ef4:	697b      	ldr	r3, [r7, #20]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d10c      	bne.n	8019f14 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	095b      	lsrs	r3, r3, #5
 8019efe:	693a      	ldr	r2, [r7, #16]
 8019f00:	8912      	ldrh	r2, [r2, #8]
 8019f02:	4293      	cmp	r3, r2
 8019f04:	d301      	bcc.n	8019f0a <dir_sdi+0x5c>
 8019f06:	2302      	movs	r3, #2
 8019f08:	e048      	b.n	8019f9c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019f0a:	693b      	ldr	r3, [r7, #16]
 8019f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	61da      	str	r2, [r3, #28]
 8019f12:	e029      	b.n	8019f68 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019f14:	693b      	ldr	r3, [r7, #16]
 8019f16:	895b      	ldrh	r3, [r3, #10]
 8019f18:	025b      	lsls	r3, r3, #9
 8019f1a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f1c:	e019      	b.n	8019f52 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	6979      	ldr	r1, [r7, #20]
 8019f22:	4618      	mov	r0, r3
 8019f24:	f7ff fd01 	bl	801992a <get_fat>
 8019f28:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f30:	d101      	bne.n	8019f36 <dir_sdi+0x88>
 8019f32:	2301      	movs	r3, #1
 8019f34:	e032      	b.n	8019f9c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	2b01      	cmp	r3, #1
 8019f3a:	d904      	bls.n	8019f46 <dir_sdi+0x98>
 8019f3c:	693b      	ldr	r3, [r7, #16]
 8019f3e:	699b      	ldr	r3, [r3, #24]
 8019f40:	697a      	ldr	r2, [r7, #20]
 8019f42:	429a      	cmp	r2, r3
 8019f44:	d301      	bcc.n	8019f4a <dir_sdi+0x9c>
 8019f46:	2302      	movs	r3, #2
 8019f48:	e028      	b.n	8019f9c <dir_sdi+0xee>
			ofs -= csz;
 8019f4a:	683a      	ldr	r2, [r7, #0]
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	1ad3      	subs	r3, r2, r3
 8019f50:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f52:	683a      	ldr	r2, [r7, #0]
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	429a      	cmp	r2, r3
 8019f58:	d2e1      	bcs.n	8019f1e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8019f5a:	6979      	ldr	r1, [r7, #20]
 8019f5c:	6938      	ldr	r0, [r7, #16]
 8019f5e:	f7ff fcc5 	bl	80198ec <clust2sect>
 8019f62:	4602      	mov	r2, r0
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	697a      	ldr	r2, [r7, #20]
 8019f6c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	69db      	ldr	r3, [r3, #28]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d101      	bne.n	8019f7a <dir_sdi+0xcc>
 8019f76:	2302      	movs	r3, #2
 8019f78:	e010      	b.n	8019f9c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	69da      	ldr	r2, [r3, #28]
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	0a5b      	lsrs	r3, r3, #9
 8019f82:	441a      	add	r2, r3
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019f94:	441a      	add	r2, r3
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019f9a:	2300      	movs	r3, #0
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	3718      	adds	r7, #24
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}

08019fa4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019fa4:	b580      	push	{r7, lr}
 8019fa6:	b086      	sub	sp, #24
 8019fa8:	af00      	add	r7, sp, #0
 8019faa:	6078      	str	r0, [r7, #4]
 8019fac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	695b      	ldr	r3, [r3, #20]
 8019fb8:	3320      	adds	r3, #32
 8019fba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	69db      	ldr	r3, [r3, #28]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d003      	beq.n	8019fcc <dir_next+0x28>
 8019fc4:	68bb      	ldr	r3, [r7, #8]
 8019fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019fca:	d301      	bcc.n	8019fd0 <dir_next+0x2c>
 8019fcc:	2304      	movs	r3, #4
 8019fce:	e0aa      	b.n	801a126 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019fd0:	68bb      	ldr	r3, [r7, #8]
 8019fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	f040 8098 	bne.w	801a10c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	69db      	ldr	r3, [r3, #28]
 8019fe0:	1c5a      	adds	r2, r3, #1
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	699b      	ldr	r3, [r3, #24]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d10b      	bne.n	801a006 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8019fee:	68bb      	ldr	r3, [r7, #8]
 8019ff0:	095b      	lsrs	r3, r3, #5
 8019ff2:	68fa      	ldr	r2, [r7, #12]
 8019ff4:	8912      	ldrh	r2, [r2, #8]
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	f0c0 8088 	bcc.w	801a10c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	2200      	movs	r2, #0
 801a000:	61da      	str	r2, [r3, #28]
 801a002:	2304      	movs	r3, #4
 801a004:	e08f      	b.n	801a126 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	0a5b      	lsrs	r3, r3, #9
 801a00a:	68fa      	ldr	r2, [r7, #12]
 801a00c:	8952      	ldrh	r2, [r2, #10]
 801a00e:	3a01      	subs	r2, #1
 801a010:	4013      	ands	r3, r2
 801a012:	2b00      	cmp	r3, #0
 801a014:	d17a      	bne.n	801a10c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a016:	687a      	ldr	r2, [r7, #4]
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	699b      	ldr	r3, [r3, #24]
 801a01c:	4619      	mov	r1, r3
 801a01e:	4610      	mov	r0, r2
 801a020:	f7ff fc83 	bl	801992a <get_fat>
 801a024:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	2b01      	cmp	r3, #1
 801a02a:	d801      	bhi.n	801a030 <dir_next+0x8c>
 801a02c:	2302      	movs	r3, #2
 801a02e:	e07a      	b.n	801a126 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a030:	697b      	ldr	r3, [r7, #20]
 801a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a036:	d101      	bne.n	801a03c <dir_next+0x98>
 801a038:	2301      	movs	r3, #1
 801a03a:	e074      	b.n	801a126 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	699b      	ldr	r3, [r3, #24]
 801a040:	697a      	ldr	r2, [r7, #20]
 801a042:	429a      	cmp	r2, r3
 801a044:	d358      	bcc.n	801a0f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d104      	bne.n	801a056 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	2200      	movs	r2, #0
 801a050:	61da      	str	r2, [r3, #28]
 801a052:	2304      	movs	r3, #4
 801a054:	e067      	b.n	801a126 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a056:	687a      	ldr	r2, [r7, #4]
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	699b      	ldr	r3, [r3, #24]
 801a05c:	4619      	mov	r1, r3
 801a05e:	4610      	mov	r0, r2
 801a060:	f7ff fe59 	bl	8019d16 <create_chain>
 801a064:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a066:	697b      	ldr	r3, [r7, #20]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d101      	bne.n	801a070 <dir_next+0xcc>
 801a06c:	2307      	movs	r3, #7
 801a06e:	e05a      	b.n	801a126 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a070:	697b      	ldr	r3, [r7, #20]
 801a072:	2b01      	cmp	r3, #1
 801a074:	d101      	bne.n	801a07a <dir_next+0xd6>
 801a076:	2302      	movs	r3, #2
 801a078:	e055      	b.n	801a126 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a07a:	697b      	ldr	r3, [r7, #20]
 801a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a080:	d101      	bne.n	801a086 <dir_next+0xe2>
 801a082:	2301      	movs	r3, #1
 801a084:	e04f      	b.n	801a126 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a086:	68f8      	ldr	r0, [r7, #12]
 801a088:	f7ff fb50 	bl	801972c <sync_window>
 801a08c:	4603      	mov	r3, r0
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d001      	beq.n	801a096 <dir_next+0xf2>
 801a092:	2301      	movs	r3, #1
 801a094:	e047      	b.n	801a126 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	3334      	adds	r3, #52	@ 0x34
 801a09a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a09e:	2100      	movs	r1, #0
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f7ff f97a 	bl	801939a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	613b      	str	r3, [r7, #16]
 801a0aa:	6979      	ldr	r1, [r7, #20]
 801a0ac:	68f8      	ldr	r0, [r7, #12]
 801a0ae:	f7ff fc1d 	bl	80198ec <clust2sect>
 801a0b2:	4602      	mov	r2, r0
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	631a      	str	r2, [r3, #48]	@ 0x30
 801a0b8:	e012      	b.n	801a0e0 <dir_next+0x13c>
						fs->wflag = 1;
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	2201      	movs	r2, #1
 801a0be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a0c0:	68f8      	ldr	r0, [r7, #12]
 801a0c2:	f7ff fb33 	bl	801972c <sync_window>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d001      	beq.n	801a0d0 <dir_next+0x12c>
 801a0cc:	2301      	movs	r3, #1
 801a0ce:	e02a      	b.n	801a126 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0d0:	693b      	ldr	r3, [r7, #16]
 801a0d2:	3301      	adds	r3, #1
 801a0d4:	613b      	str	r3, [r7, #16]
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0da:	1c5a      	adds	r2, r3, #1
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	631a      	str	r2, [r3, #48]	@ 0x30
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	895b      	ldrh	r3, [r3, #10]
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	4293      	cmp	r3, r2
 801a0ea:	d3e6      	bcc.n	801a0ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	1ad2      	subs	r2, r2, r3
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	697a      	ldr	r2, [r7, #20]
 801a0fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a0fe:	6979      	ldr	r1, [r7, #20]
 801a100:	68f8      	ldr	r0, [r7, #12]
 801a102:	f7ff fbf3 	bl	80198ec <clust2sect>
 801a106:	4602      	mov	r2, r0
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	68ba      	ldr	r2, [r7, #8]
 801a110:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801a118:	68bb      	ldr	r3, [r7, #8]
 801a11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a11e:	441a      	add	r2, r3
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a124:	2300      	movs	r3, #0
}
 801a126:	4618      	mov	r0, r3
 801a128:	3718      	adds	r7, #24
 801a12a:	46bd      	mov	sp, r7
 801a12c:	bd80      	pop	{r7, pc}

0801a12e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a12e:	b580      	push	{r7, lr}
 801a130:	b086      	sub	sp, #24
 801a132:	af00      	add	r7, sp, #0
 801a134:	6078      	str	r0, [r7, #4]
 801a136:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a13e:	2100      	movs	r1, #0
 801a140:	6878      	ldr	r0, [r7, #4]
 801a142:	f7ff feb4 	bl	8019eae <dir_sdi>
 801a146:	4603      	mov	r3, r0
 801a148:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a14a:	7dfb      	ldrb	r3, [r7, #23]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d12b      	bne.n	801a1a8 <dir_alloc+0x7a>
		n = 0;
 801a150:	2300      	movs	r3, #0
 801a152:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	69db      	ldr	r3, [r3, #28]
 801a158:	4619      	mov	r1, r3
 801a15a:	68f8      	ldr	r0, [r7, #12]
 801a15c:	f7ff fb2a 	bl	80197b4 <move_window>
 801a160:	4603      	mov	r3, r0
 801a162:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a164:	7dfb      	ldrb	r3, [r7, #23]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d11d      	bne.n	801a1a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6a1b      	ldr	r3, [r3, #32]
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2be5      	cmp	r3, #229	@ 0xe5
 801a172:	d004      	beq.n	801a17e <dir_alloc+0x50>
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6a1b      	ldr	r3, [r3, #32]
 801a178:	781b      	ldrb	r3, [r3, #0]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d107      	bne.n	801a18e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a17e:	693b      	ldr	r3, [r7, #16]
 801a180:	3301      	adds	r3, #1
 801a182:	613b      	str	r3, [r7, #16]
 801a184:	693a      	ldr	r2, [r7, #16]
 801a186:	683b      	ldr	r3, [r7, #0]
 801a188:	429a      	cmp	r2, r3
 801a18a:	d102      	bne.n	801a192 <dir_alloc+0x64>
 801a18c:	e00c      	b.n	801a1a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a18e:	2300      	movs	r3, #0
 801a190:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a192:	2101      	movs	r1, #1
 801a194:	6878      	ldr	r0, [r7, #4]
 801a196:	f7ff ff05 	bl	8019fa4 <dir_next>
 801a19a:	4603      	mov	r3, r0
 801a19c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a19e:	7dfb      	ldrb	r3, [r7, #23]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d0d7      	beq.n	801a154 <dir_alloc+0x26>
 801a1a4:	e000      	b.n	801a1a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a1a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a1a8:	7dfb      	ldrb	r3, [r7, #23]
 801a1aa:	2b04      	cmp	r3, #4
 801a1ac:	d101      	bne.n	801a1b2 <dir_alloc+0x84>
 801a1ae:	2307      	movs	r3, #7
 801a1b0:	75fb      	strb	r3, [r7, #23]
	return res;
 801a1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	3718      	adds	r7, #24
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}

0801a1bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b084      	sub	sp, #16
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	331a      	adds	r3, #26
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7ff f842 	bl	8019254 <ld_word>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	781b      	ldrb	r3, [r3, #0]
 801a1d8:	2b03      	cmp	r3, #3
 801a1da:	d109      	bne.n	801a1f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	3314      	adds	r3, #20
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7ff f837 	bl	8019254 <ld_word>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	041b      	lsls	r3, r3, #16
 801a1ea:	68fa      	ldr	r2, [r7, #12]
 801a1ec:	4313      	orrs	r3, r2
 801a1ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a1f0:	68fb      	ldr	r3, [r7, #12]
}
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	3710      	adds	r7, #16
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	bd80      	pop	{r7, pc}

0801a1fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a1fa:	b580      	push	{r7, lr}
 801a1fc:	b084      	sub	sp, #16
 801a1fe:	af00      	add	r7, sp, #0
 801a200:	60f8      	str	r0, [r7, #12]
 801a202:	60b9      	str	r1, [r7, #8]
 801a204:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	331a      	adds	r3, #26
 801a20a:	687a      	ldr	r2, [r7, #4]
 801a20c:	b292      	uxth	r2, r2
 801a20e:	4611      	mov	r1, r2
 801a210:	4618      	mov	r0, r3
 801a212:	f7ff f85a 	bl	80192ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	781b      	ldrb	r3, [r3, #0]
 801a21a:	2b03      	cmp	r3, #3
 801a21c:	d109      	bne.n	801a232 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a21e:	68bb      	ldr	r3, [r7, #8]
 801a220:	f103 0214 	add.w	r2, r3, #20
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	0c1b      	lsrs	r3, r3, #16
 801a228:	b29b      	uxth	r3, r3
 801a22a:	4619      	mov	r1, r3
 801a22c:	4610      	mov	r0, r2
 801a22e:	f7ff f84c 	bl	80192ca <st_word>
	}
}
 801a232:	bf00      	nop
 801a234:	3710      	adds	r7, #16
 801a236:	46bd      	mov	sp, r7
 801a238:	bd80      	pop	{r7, pc}
	...

0801a23c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a23c:	b590      	push	{r4, r7, lr}
 801a23e:	b087      	sub	sp, #28
 801a240:	af00      	add	r7, sp, #0
 801a242:	6078      	str	r0, [r7, #4]
 801a244:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a246:	683b      	ldr	r3, [r7, #0]
 801a248:	331a      	adds	r3, #26
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7ff f802 	bl	8019254 <ld_word>
 801a250:	4603      	mov	r3, r0
 801a252:	2b00      	cmp	r3, #0
 801a254:	d001      	beq.n	801a25a <cmp_lfn+0x1e>
 801a256:	2300      	movs	r3, #0
 801a258:	e059      	b.n	801a30e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	781b      	ldrb	r3, [r3, #0]
 801a25e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a262:	1e5a      	subs	r2, r3, #1
 801a264:	4613      	mov	r3, r2
 801a266:	005b      	lsls	r3, r3, #1
 801a268:	4413      	add	r3, r2
 801a26a:	009b      	lsls	r3, r3, #2
 801a26c:	4413      	add	r3, r2
 801a26e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a270:	2301      	movs	r3, #1
 801a272:	81fb      	strh	r3, [r7, #14]
 801a274:	2300      	movs	r3, #0
 801a276:	613b      	str	r3, [r7, #16]
 801a278:	e033      	b.n	801a2e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a27a:	4a27      	ldr	r2, [pc, #156]	@ (801a318 <cmp_lfn+0xdc>)
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	4413      	add	r3, r2
 801a280:	781b      	ldrb	r3, [r3, #0]
 801a282:	461a      	mov	r2, r3
 801a284:	683b      	ldr	r3, [r7, #0]
 801a286:	4413      	add	r3, r2
 801a288:	4618      	mov	r0, r3
 801a28a:	f7fe ffe3 	bl	8019254 <ld_word>
 801a28e:	4603      	mov	r3, r0
 801a290:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a292:	89fb      	ldrh	r3, [r7, #14]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d01a      	beq.n	801a2ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a298:	697b      	ldr	r3, [r7, #20]
 801a29a:	2bfe      	cmp	r3, #254	@ 0xfe
 801a29c:	d812      	bhi.n	801a2c4 <cmp_lfn+0x88>
 801a29e:	89bb      	ldrh	r3, [r7, #12]
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	f001 fe21 	bl	801bee8 <ff_wtoupper>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	461c      	mov	r4, r3
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	1c5a      	adds	r2, r3, #1
 801a2ae:	617a      	str	r2, [r7, #20]
 801a2b0:	005b      	lsls	r3, r3, #1
 801a2b2:	687a      	ldr	r2, [r7, #4]
 801a2b4:	4413      	add	r3, r2
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	f001 fe15 	bl	801bee8 <ff_wtoupper>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	429c      	cmp	r4, r3
 801a2c2:	d001      	beq.n	801a2c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	e022      	b.n	801a30e <cmp_lfn+0xd2>
			}
			wc = uc;
 801a2c8:	89bb      	ldrh	r3, [r7, #12]
 801a2ca:	81fb      	strh	r3, [r7, #14]
 801a2cc:	e006      	b.n	801a2dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a2ce:	89bb      	ldrh	r3, [r7, #12]
 801a2d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	d001      	beq.n	801a2dc <cmp_lfn+0xa0>
 801a2d8:	2300      	movs	r3, #0
 801a2da:	e018      	b.n	801a30e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a2dc:	693b      	ldr	r3, [r7, #16]
 801a2de:	3301      	adds	r3, #1
 801a2e0:	613b      	str	r3, [r7, #16]
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	2b0c      	cmp	r3, #12
 801a2e6:	d9c8      	bls.n	801a27a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a2e8:	683b      	ldr	r3, [r7, #0]
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d00b      	beq.n	801a30c <cmp_lfn+0xd0>
 801a2f4:	89fb      	ldrh	r3, [r7, #14]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d008      	beq.n	801a30c <cmp_lfn+0xd0>
 801a2fa:	697b      	ldr	r3, [r7, #20]
 801a2fc:	005b      	lsls	r3, r3, #1
 801a2fe:	687a      	ldr	r2, [r7, #4]
 801a300:	4413      	add	r3, r2
 801a302:	881b      	ldrh	r3, [r3, #0]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d001      	beq.n	801a30c <cmp_lfn+0xd0>
 801a308:	2300      	movs	r3, #0
 801a30a:	e000      	b.n	801a30e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a30c:	2301      	movs	r3, #1
}
 801a30e:	4618      	mov	r0, r3
 801a310:	371c      	adds	r7, #28
 801a312:	46bd      	mov	sp, r7
 801a314:	bd90      	pop	{r4, r7, pc}
 801a316:	bf00      	nop
 801a318:	08025058 	.word	0x08025058

0801a31c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b088      	sub	sp, #32
 801a320:	af00      	add	r7, sp, #0
 801a322:	60f8      	str	r0, [r7, #12]
 801a324:	60b9      	str	r1, [r7, #8]
 801a326:	4611      	mov	r1, r2
 801a328:	461a      	mov	r2, r3
 801a32a:	460b      	mov	r3, r1
 801a32c:	71fb      	strb	r3, [r7, #7]
 801a32e:	4613      	mov	r3, r2
 801a330:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a332:	68bb      	ldr	r3, [r7, #8]
 801a334:	330d      	adds	r3, #13
 801a336:	79ba      	ldrb	r2, [r7, #6]
 801a338:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a33a:	68bb      	ldr	r3, [r7, #8]
 801a33c:	330b      	adds	r3, #11
 801a33e:	220f      	movs	r2, #15
 801a340:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a342:	68bb      	ldr	r3, [r7, #8]
 801a344:	330c      	adds	r3, #12
 801a346:	2200      	movs	r2, #0
 801a348:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a34a:	68bb      	ldr	r3, [r7, #8]
 801a34c:	331a      	adds	r3, #26
 801a34e:	2100      	movs	r1, #0
 801a350:	4618      	mov	r0, r3
 801a352:	f7fe ffba 	bl	80192ca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a356:	79fb      	ldrb	r3, [r7, #7]
 801a358:	1e5a      	subs	r2, r3, #1
 801a35a:	4613      	mov	r3, r2
 801a35c:	005b      	lsls	r3, r3, #1
 801a35e:	4413      	add	r3, r2
 801a360:	009b      	lsls	r3, r3, #2
 801a362:	4413      	add	r3, r2
 801a364:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a366:	2300      	movs	r3, #0
 801a368:	82fb      	strh	r3, [r7, #22]
 801a36a:	2300      	movs	r3, #0
 801a36c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a36e:	8afb      	ldrh	r3, [r7, #22]
 801a370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a374:	4293      	cmp	r3, r2
 801a376:	d007      	beq.n	801a388 <put_lfn+0x6c>
 801a378:	69fb      	ldr	r3, [r7, #28]
 801a37a:	1c5a      	adds	r2, r3, #1
 801a37c:	61fa      	str	r2, [r7, #28]
 801a37e:	005b      	lsls	r3, r3, #1
 801a380:	68fa      	ldr	r2, [r7, #12]
 801a382:	4413      	add	r3, r2
 801a384:	881b      	ldrh	r3, [r3, #0]
 801a386:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a388:	4a17      	ldr	r2, [pc, #92]	@ (801a3e8 <put_lfn+0xcc>)
 801a38a:	69bb      	ldr	r3, [r7, #24]
 801a38c:	4413      	add	r3, r2
 801a38e:	781b      	ldrb	r3, [r3, #0]
 801a390:	461a      	mov	r2, r3
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	4413      	add	r3, r2
 801a396:	8afa      	ldrh	r2, [r7, #22]
 801a398:	4611      	mov	r1, r2
 801a39a:	4618      	mov	r0, r3
 801a39c:	f7fe ff95 	bl	80192ca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a3a0:	8afb      	ldrh	r3, [r7, #22]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d102      	bne.n	801a3ac <put_lfn+0x90>
 801a3a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a3ac:	69bb      	ldr	r3, [r7, #24]
 801a3ae:	3301      	adds	r3, #1
 801a3b0:	61bb      	str	r3, [r7, #24]
 801a3b2:	69bb      	ldr	r3, [r7, #24]
 801a3b4:	2b0c      	cmp	r3, #12
 801a3b6:	d9da      	bls.n	801a36e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a3b8:	8afb      	ldrh	r3, [r7, #22]
 801a3ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3be:	4293      	cmp	r3, r2
 801a3c0:	d006      	beq.n	801a3d0 <put_lfn+0xb4>
 801a3c2:	69fb      	ldr	r3, [r7, #28]
 801a3c4:	005b      	lsls	r3, r3, #1
 801a3c6:	68fa      	ldr	r2, [r7, #12]
 801a3c8:	4413      	add	r3, r2
 801a3ca:	881b      	ldrh	r3, [r3, #0]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d103      	bne.n	801a3d8 <put_lfn+0xbc>
 801a3d0:	79fb      	ldrb	r3, [r7, #7]
 801a3d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a3d8:	68bb      	ldr	r3, [r7, #8]
 801a3da:	79fa      	ldrb	r2, [r7, #7]
 801a3dc:	701a      	strb	r2, [r3, #0]
}
 801a3de:	bf00      	nop
 801a3e0:	3720      	adds	r7, #32
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	08025058 	.word	0x08025058

0801a3ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b08c      	sub	sp, #48	@ 0x30
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	60f8      	str	r0, [r7, #12]
 801a3f4:	60b9      	str	r1, [r7, #8]
 801a3f6:	607a      	str	r2, [r7, #4]
 801a3f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a3fa:	220b      	movs	r2, #11
 801a3fc:	68b9      	ldr	r1, [r7, #8]
 801a3fe:	68f8      	ldr	r0, [r7, #12]
 801a400:	f7fe ffaa 	bl	8019358 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a404:	683b      	ldr	r3, [r7, #0]
 801a406:	2b05      	cmp	r3, #5
 801a408:	d92b      	bls.n	801a462 <gen_numname+0x76>
		sr = seq;
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a40e:	e022      	b.n	801a456 <gen_numname+0x6a>
			wc = *lfn++;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	1c9a      	adds	r2, r3, #2
 801a414:	607a      	str	r2, [r7, #4]
 801a416:	881b      	ldrh	r3, [r3, #0]
 801a418:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801a41a:	2300      	movs	r3, #0
 801a41c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a41e:	e017      	b.n	801a450 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a420:	69fb      	ldr	r3, [r7, #28]
 801a422:	005a      	lsls	r2, r3, #1
 801a424:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a426:	f003 0301 	and.w	r3, r3, #1
 801a42a:	4413      	add	r3, r2
 801a42c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a42e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a430:	085b      	lsrs	r3, r3, #1
 801a432:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a434:	69fb      	ldr	r3, [r7, #28]
 801a436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d005      	beq.n	801a44a <gen_numname+0x5e>
 801a43e:	69fb      	ldr	r3, [r7, #28]
 801a440:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801a444:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801a448:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a44c:	3301      	adds	r3, #1
 801a44e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a452:	2b0f      	cmp	r3, #15
 801a454:	d9e4      	bls.n	801a420 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	881b      	ldrh	r3, [r3, #0]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d1d8      	bne.n	801a410 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a45e:	69fb      	ldr	r3, [r7, #28]
 801a460:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a462:	2307      	movs	r3, #7
 801a464:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a466:	683b      	ldr	r3, [r7, #0]
 801a468:	b2db      	uxtb	r3, r3
 801a46a:	f003 030f 	and.w	r3, r3, #15
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	3330      	adds	r3, #48	@ 0x30
 801a472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801a476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a47a:	2b39      	cmp	r3, #57	@ 0x39
 801a47c:	d904      	bls.n	801a488 <gen_numname+0x9c>
 801a47e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a482:	3307      	adds	r3, #7
 801a484:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a48a:	1e5a      	subs	r2, r3, #1
 801a48c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a48e:	3330      	adds	r3, #48	@ 0x30
 801a490:	443b      	add	r3, r7
 801a492:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a496:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a49a:	683b      	ldr	r3, [r7, #0]
 801a49c:	091b      	lsrs	r3, r3, #4
 801a49e:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d1df      	bne.n	801a466 <gen_numname+0x7a>
	ns[i] = '~';
 801a4a6:	f107 0214 	add.w	r2, r7, #20
 801a4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ac:	4413      	add	r3, r2
 801a4ae:	227e      	movs	r2, #126	@ 0x7e
 801a4b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4b6:	e002      	b.n	801a4be <gen_numname+0xd2>
 801a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ba:	3301      	adds	r3, #1
 801a4bc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	d205      	bcs.n	801a4d2 <gen_numname+0xe6>
 801a4c6:	68fa      	ldr	r2, [r7, #12]
 801a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ca:	4413      	add	r3, r2
 801a4cc:	781b      	ldrb	r3, [r3, #0]
 801a4ce:	2b20      	cmp	r3, #32
 801a4d0:	d1f2      	bne.n	801a4b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4d4:	2b07      	cmp	r3, #7
 801a4d6:	d807      	bhi.n	801a4e8 <gen_numname+0xfc>
 801a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4da:	1c5a      	adds	r2, r3, #1
 801a4dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a4de:	3330      	adds	r3, #48	@ 0x30
 801a4e0:	443b      	add	r3, r7
 801a4e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a4e6:	e000      	b.n	801a4ea <gen_numname+0xfe>
 801a4e8:	2120      	movs	r1, #32
 801a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ec:	1c5a      	adds	r2, r3, #1
 801a4ee:	627a      	str	r2, [r7, #36]	@ 0x24
 801a4f0:	68fa      	ldr	r2, [r7, #12]
 801a4f2:	4413      	add	r3, r2
 801a4f4:	460a      	mov	r2, r1
 801a4f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4fa:	2b07      	cmp	r3, #7
 801a4fc:	d9e9      	bls.n	801a4d2 <gen_numname+0xe6>
}
 801a4fe:	bf00      	nop
 801a500:	bf00      	nop
 801a502:	3730      	adds	r7, #48	@ 0x30
 801a504:	46bd      	mov	sp, r7
 801a506:	bd80      	pop	{r7, pc}

0801a508 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a508:	b480      	push	{r7}
 801a50a:	b085      	sub	sp, #20
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a510:	2300      	movs	r3, #0
 801a512:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a514:	230b      	movs	r3, #11
 801a516:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a518:	7bfb      	ldrb	r3, [r7, #15]
 801a51a:	b2da      	uxtb	r2, r3
 801a51c:	0852      	lsrs	r2, r2, #1
 801a51e:	01db      	lsls	r3, r3, #7
 801a520:	4313      	orrs	r3, r2
 801a522:	b2da      	uxtb	r2, r3
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	1c59      	adds	r1, r3, #1
 801a528:	6079      	str	r1, [r7, #4]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	4413      	add	r3, r2
 801a52e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a530:	68bb      	ldr	r3, [r7, #8]
 801a532:	3b01      	subs	r3, #1
 801a534:	60bb      	str	r3, [r7, #8]
 801a536:	68bb      	ldr	r3, [r7, #8]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d1ed      	bne.n	801a518 <sum_sfn+0x10>
	return sum;
 801a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a53e:	4618      	mov	r0, r3
 801a540:	3714      	adds	r7, #20
 801a542:	46bd      	mov	sp, r7
 801a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a548:	4770      	bx	lr

0801a54a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a54a:	b580      	push	{r7, lr}
 801a54c:	b086      	sub	sp, #24
 801a54e:	af00      	add	r7, sp, #0
 801a550:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a558:	2100      	movs	r1, #0
 801a55a:	6878      	ldr	r0, [r7, #4]
 801a55c:	f7ff fca7 	bl	8019eae <dir_sdi>
 801a560:	4603      	mov	r3, r0
 801a562:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a564:	7dfb      	ldrb	r3, [r7, #23]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d001      	beq.n	801a56e <dir_find+0x24>
 801a56a:	7dfb      	ldrb	r3, [r7, #23]
 801a56c:	e0a9      	b.n	801a6c2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a56e:	23ff      	movs	r3, #255	@ 0xff
 801a570:	753b      	strb	r3, [r7, #20]
 801a572:	7d3b      	ldrb	r3, [r7, #20]
 801a574:	757b      	strb	r3, [r7, #21]
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	f04f 32ff 	mov.w	r2, #4294967295
 801a57c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	69db      	ldr	r3, [r3, #28]
 801a582:	4619      	mov	r1, r3
 801a584:	6938      	ldr	r0, [r7, #16]
 801a586:	f7ff f915 	bl	80197b4 <move_window>
 801a58a:	4603      	mov	r3, r0
 801a58c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a58e:	7dfb      	ldrb	r3, [r7, #23]
 801a590:	2b00      	cmp	r3, #0
 801a592:	f040 8090 	bne.w	801a6b6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	6a1b      	ldr	r3, [r3, #32]
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a59e:	7dbb      	ldrb	r3, [r7, #22]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d102      	bne.n	801a5aa <dir_find+0x60>
 801a5a4:	2304      	movs	r3, #4
 801a5a6:	75fb      	strb	r3, [r7, #23]
 801a5a8:	e08a      	b.n	801a6c0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	6a1b      	ldr	r3, [r3, #32]
 801a5ae:	330b      	adds	r3, #11
 801a5b0:	781b      	ldrb	r3, [r3, #0]
 801a5b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a5b6:	73fb      	strb	r3, [r7, #15]
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	7bfa      	ldrb	r2, [r7, #15]
 801a5bc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a5be:	7dbb      	ldrb	r3, [r7, #22]
 801a5c0:	2be5      	cmp	r3, #229	@ 0xe5
 801a5c2:	d007      	beq.n	801a5d4 <dir_find+0x8a>
 801a5c4:	7bfb      	ldrb	r3, [r7, #15]
 801a5c6:	f003 0308 	and.w	r3, r3, #8
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d009      	beq.n	801a5e2 <dir_find+0x98>
 801a5ce:	7bfb      	ldrb	r3, [r7, #15]
 801a5d0:	2b0f      	cmp	r3, #15
 801a5d2:	d006      	beq.n	801a5e2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a5d4:	23ff      	movs	r3, #255	@ 0xff
 801a5d6:	757b      	strb	r3, [r7, #21]
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	f04f 32ff 	mov.w	r2, #4294967295
 801a5de:	631a      	str	r2, [r3, #48]	@ 0x30
 801a5e0:	e05e      	b.n	801a6a0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a5e2:	7bfb      	ldrb	r3, [r7, #15]
 801a5e4:	2b0f      	cmp	r3, #15
 801a5e6:	d136      	bne.n	801a656 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a5ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d154      	bne.n	801a6a0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a5f6:	7dbb      	ldrb	r3, [r7, #22]
 801a5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d00d      	beq.n	801a61c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	6a1b      	ldr	r3, [r3, #32]
 801a604:	7b5b      	ldrb	r3, [r3, #13]
 801a606:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a608:	7dbb      	ldrb	r3, [r7, #22]
 801a60a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a60e:	75bb      	strb	r3, [r7, #22]
 801a610:	7dbb      	ldrb	r3, [r7, #22]
 801a612:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	695a      	ldr	r2, [r3, #20]
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a61c:	7dba      	ldrb	r2, [r7, #22]
 801a61e:	7d7b      	ldrb	r3, [r7, #21]
 801a620:	429a      	cmp	r2, r3
 801a622:	d115      	bne.n	801a650 <dir_find+0x106>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	6a1b      	ldr	r3, [r3, #32]
 801a628:	330d      	adds	r3, #13
 801a62a:	781b      	ldrb	r3, [r3, #0]
 801a62c:	7d3a      	ldrb	r2, [r7, #20]
 801a62e:	429a      	cmp	r2, r3
 801a630:	d10e      	bne.n	801a650 <dir_find+0x106>
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	68da      	ldr	r2, [r3, #12]
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	6a1b      	ldr	r3, [r3, #32]
 801a63a:	4619      	mov	r1, r3
 801a63c:	4610      	mov	r0, r2
 801a63e:	f7ff fdfd 	bl	801a23c <cmp_lfn>
 801a642:	4603      	mov	r3, r0
 801a644:	2b00      	cmp	r3, #0
 801a646:	d003      	beq.n	801a650 <dir_find+0x106>
 801a648:	7d7b      	ldrb	r3, [r7, #21]
 801a64a:	3b01      	subs	r3, #1
 801a64c:	b2db      	uxtb	r3, r3
 801a64e:	e000      	b.n	801a652 <dir_find+0x108>
 801a650:	23ff      	movs	r3, #255	@ 0xff
 801a652:	757b      	strb	r3, [r7, #21]
 801a654:	e024      	b.n	801a6a0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a656:	7d7b      	ldrb	r3, [r7, #21]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d109      	bne.n	801a670 <dir_find+0x126>
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	6a1b      	ldr	r3, [r3, #32]
 801a660:	4618      	mov	r0, r3
 801a662:	f7ff ff51 	bl	801a508 <sum_sfn>
 801a666:	4603      	mov	r3, r0
 801a668:	461a      	mov	r2, r3
 801a66a:	7d3b      	ldrb	r3, [r7, #20]
 801a66c:	4293      	cmp	r3, r2
 801a66e:	d024      	beq.n	801a6ba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a676:	f003 0301 	and.w	r3, r3, #1
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d10a      	bne.n	801a694 <dir_find+0x14a>
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	6a18      	ldr	r0, [r3, #32]
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	3324      	adds	r3, #36	@ 0x24
 801a686:	220b      	movs	r2, #11
 801a688:	4619      	mov	r1, r3
 801a68a:	f7fe fea1 	bl	80193d0 <mem_cmp>
 801a68e:	4603      	mov	r3, r0
 801a690:	2b00      	cmp	r3, #0
 801a692:	d014      	beq.n	801a6be <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a694:	23ff      	movs	r3, #255	@ 0xff
 801a696:	757b      	strb	r3, [r7, #21]
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	f04f 32ff 	mov.w	r2, #4294967295
 801a69e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a6a0:	2100      	movs	r1, #0
 801a6a2:	6878      	ldr	r0, [r7, #4]
 801a6a4:	f7ff fc7e 	bl	8019fa4 <dir_next>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a6ac:	7dfb      	ldrb	r3, [r7, #23]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	f43f af65 	beq.w	801a57e <dir_find+0x34>
 801a6b4:	e004      	b.n	801a6c0 <dir_find+0x176>
		if (res != FR_OK) break;
 801a6b6:	bf00      	nop
 801a6b8:	e002      	b.n	801a6c0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a6ba:	bf00      	nop
 801a6bc:	e000      	b.n	801a6c0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a6be:	bf00      	nop

	return res;
 801a6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	3718      	adds	r7, #24
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	bd80      	pop	{r7, pc}
	...

0801a6cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b08c      	sub	sp, #48	@ 0x30
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a6e0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d001      	beq.n	801a6ec <dir_register+0x20>
 801a6e8:	2306      	movs	r3, #6
 801a6ea:	e0e0      	b.n	801a8ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a6ec:	2300      	movs	r3, #0
 801a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6f0:	e002      	b.n	801a6f8 <dir_register+0x2c>
 801a6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6f4:	3301      	adds	r3, #1
 801a6f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6f8:	69fb      	ldr	r3, [r7, #28]
 801a6fa:	68da      	ldr	r2, [r3, #12]
 801a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6fe:	005b      	lsls	r3, r3, #1
 801a700:	4413      	add	r3, r2
 801a702:	881b      	ldrh	r3, [r3, #0]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d1f4      	bne.n	801a6f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a70e:	f107 030c 	add.w	r3, r7, #12
 801a712:	220c      	movs	r2, #12
 801a714:	4618      	mov	r0, r3
 801a716:	f7fe fe1f 	bl	8019358 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a71a:	7dfb      	ldrb	r3, [r7, #23]
 801a71c:	f003 0301 	and.w	r3, r3, #1
 801a720:	2b00      	cmp	r3, #0
 801a722:	d032      	beq.n	801a78a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	2240      	movs	r2, #64	@ 0x40
 801a728:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801a72c:	2301      	movs	r3, #1
 801a72e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a730:	e016      	b.n	801a760 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801a738:	69fb      	ldr	r3, [r7, #28]
 801a73a:	68da      	ldr	r2, [r3, #12]
 801a73c:	f107 010c 	add.w	r1, r7, #12
 801a740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a742:	f7ff fe53 	bl	801a3ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f7ff feff 	bl	801a54a <dir_find>
 801a74c:	4603      	mov	r3, r0
 801a74e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801a752:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a756:	2b00      	cmp	r3, #0
 801a758:	d106      	bne.n	801a768 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a75c:	3301      	adds	r3, #1
 801a75e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a762:	2b63      	cmp	r3, #99	@ 0x63
 801a764:	d9e5      	bls.n	801a732 <dir_register+0x66>
 801a766:	e000      	b.n	801a76a <dir_register+0x9e>
			if (res != FR_OK) break;
 801a768:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a76c:	2b64      	cmp	r3, #100	@ 0x64
 801a76e:	d101      	bne.n	801a774 <dir_register+0xa8>
 801a770:	2307      	movs	r3, #7
 801a772:	e09c      	b.n	801a8ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a774:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a778:	2b04      	cmp	r3, #4
 801a77a:	d002      	beq.n	801a782 <dir_register+0xb6>
 801a77c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a780:	e095      	b.n	801a8ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a782:	7dfa      	ldrb	r2, [r7, #23]
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a78a:	7dfb      	ldrb	r3, [r7, #23]
 801a78c:	f003 0302 	and.w	r3, r3, #2
 801a790:	2b00      	cmp	r3, #0
 801a792:	d007      	beq.n	801a7a4 <dir_register+0xd8>
 801a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a796:	330c      	adds	r3, #12
 801a798:	4a47      	ldr	r2, [pc, #284]	@ (801a8b8 <dir_register+0x1ec>)
 801a79a:	fba2 2303 	umull	r2, r3, r2, r3
 801a79e:	089b      	lsrs	r3, r3, #2
 801a7a0:	3301      	adds	r3, #1
 801a7a2:	e000      	b.n	801a7a6 <dir_register+0xda>
 801a7a4:	2301      	movs	r3, #1
 801a7a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a7a8:	6a39      	ldr	r1, [r7, #32]
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f7ff fcbf 	bl	801a12e <dir_alloc>
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d148      	bne.n	801a850 <dir_register+0x184>
 801a7be:	6a3b      	ldr	r3, [r7, #32]
 801a7c0:	3b01      	subs	r3, #1
 801a7c2:	623b      	str	r3, [r7, #32]
 801a7c4:	6a3b      	ldr	r3, [r7, #32]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d042      	beq.n	801a850 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	695a      	ldr	r2, [r3, #20]
 801a7ce:	6a3b      	ldr	r3, [r7, #32]
 801a7d0:	015b      	lsls	r3, r3, #5
 801a7d2:	1ad3      	subs	r3, r2, r3
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	f7ff fb69 	bl	8019eae <dir_sdi>
 801a7dc:	4603      	mov	r3, r0
 801a7de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a7e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d132      	bne.n	801a850 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	3324      	adds	r3, #36	@ 0x24
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f7ff fe8a 	bl	801a508 <sum_sfn>
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	69db      	ldr	r3, [r3, #28]
 801a7fc:	4619      	mov	r1, r3
 801a7fe:	69f8      	ldr	r0, [r7, #28]
 801a800:	f7fe ffd8 	bl	80197b4 <move_window>
 801a804:	4603      	mov	r3, r0
 801a806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801a80a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d11d      	bne.n	801a84e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a812:	69fb      	ldr	r3, [r7, #28]
 801a814:	68d8      	ldr	r0, [r3, #12]
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	6a19      	ldr	r1, [r3, #32]
 801a81a:	6a3b      	ldr	r3, [r7, #32]
 801a81c:	b2da      	uxtb	r2, r3
 801a81e:	7efb      	ldrb	r3, [r7, #27]
 801a820:	f7ff fd7c 	bl	801a31c <put_lfn>
				fs->wflag = 1;
 801a824:	69fb      	ldr	r3, [r7, #28]
 801a826:	2201      	movs	r2, #1
 801a828:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a82a:	2100      	movs	r1, #0
 801a82c:	6878      	ldr	r0, [r7, #4]
 801a82e:	f7ff fbb9 	bl	8019fa4 <dir_next>
 801a832:	4603      	mov	r3, r0
 801a834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801a838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d107      	bne.n	801a850 <dir_register+0x184>
 801a840:	6a3b      	ldr	r3, [r7, #32]
 801a842:	3b01      	subs	r3, #1
 801a844:	623b      	str	r3, [r7, #32]
 801a846:	6a3b      	ldr	r3, [r7, #32]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d1d5      	bne.n	801a7f8 <dir_register+0x12c>
 801a84c:	e000      	b.n	801a850 <dir_register+0x184>
				if (res != FR_OK) break;
 801a84e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a854:	2b00      	cmp	r3, #0
 801a856:	d128      	bne.n	801a8aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	69db      	ldr	r3, [r3, #28]
 801a85c:	4619      	mov	r1, r3
 801a85e:	69f8      	ldr	r0, [r7, #28]
 801a860:	f7fe ffa8 	bl	80197b4 <move_window>
 801a864:	4603      	mov	r3, r0
 801a866:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a86a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d11b      	bne.n	801a8aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6a1b      	ldr	r3, [r3, #32]
 801a876:	2220      	movs	r2, #32
 801a878:	2100      	movs	r1, #0
 801a87a:	4618      	mov	r0, r3
 801a87c:	f7fe fd8d 	bl	801939a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	6a18      	ldr	r0, [r3, #32]
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	3324      	adds	r3, #36	@ 0x24
 801a888:	220b      	movs	r2, #11
 801a88a:	4619      	mov	r1, r3
 801a88c:	f7fe fd64 	bl	8019358 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	6a1b      	ldr	r3, [r3, #32]
 801a89a:	330c      	adds	r3, #12
 801a89c:	f002 0218 	and.w	r2, r2, #24
 801a8a0:	b2d2      	uxtb	r2, r2
 801a8a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a8a4:	69fb      	ldr	r3, [r7, #28]
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a8aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3730      	adds	r7, #48	@ 0x30
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
 801a8b6:	bf00      	nop
 801a8b8:	4ec4ec4f 	.word	0x4ec4ec4f

0801a8bc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b088      	sub	sp, #32
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
 801a8c4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801a8cc:	683b      	ldr	r3, [r7, #0]
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	69db      	ldr	r3, [r3, #28]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	f000 80ca 	beq.w	801aa70 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8e4:	d032      	beq.n	801a94c <get_fileinfo+0x90>
			i = j = 0;
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	61bb      	str	r3, [r7, #24]
 801a8ea:	69bb      	ldr	r3, [r7, #24]
 801a8ec:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a8ee:	e01b      	b.n	801a928 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801a8f0:	89fb      	ldrh	r3, [r7, #14]
 801a8f2:	2100      	movs	r1, #0
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f001 fabb 	bl	801be70 <ff_convert>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801a8fe:	89fb      	ldrh	r3, [r7, #14]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d102      	bne.n	801a90a <get_fileinfo+0x4e>
 801a904:	2300      	movs	r3, #0
 801a906:	61fb      	str	r3, [r7, #28]
 801a908:	e01a      	b.n	801a940 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	2bfe      	cmp	r3, #254	@ 0xfe
 801a90e:	d902      	bls.n	801a916 <get_fileinfo+0x5a>
 801a910:	2300      	movs	r3, #0
 801a912:	61fb      	str	r3, [r7, #28]
 801a914:	e014      	b.n	801a940 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801a916:	69fb      	ldr	r3, [r7, #28]
 801a918:	1c5a      	adds	r2, r3, #1
 801a91a:	61fa      	str	r2, [r7, #28]
 801a91c:	89fa      	ldrh	r2, [r7, #14]
 801a91e:	b2d1      	uxtb	r1, r2
 801a920:	683a      	ldr	r2, [r7, #0]
 801a922:	4413      	add	r3, r2
 801a924:	460a      	mov	r2, r1
 801a926:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a928:	693b      	ldr	r3, [r7, #16]
 801a92a:	68da      	ldr	r2, [r3, #12]
 801a92c:	69bb      	ldr	r3, [r7, #24]
 801a92e:	1c59      	adds	r1, r3, #1
 801a930:	61b9      	str	r1, [r7, #24]
 801a932:	005b      	lsls	r3, r3, #1
 801a934:	4413      	add	r3, r2
 801a936:	881b      	ldrh	r3, [r3, #0]
 801a938:	81fb      	strh	r3, [r7, #14]
 801a93a:	89fb      	ldrh	r3, [r7, #14]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d1d7      	bne.n	801a8f0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801a940:	683a      	ldr	r2, [r7, #0]
 801a942:	69fb      	ldr	r3, [r7, #28]
 801a944:	4413      	add	r3, r2
 801a946:	3316      	adds	r3, #22
 801a948:	2200      	movs	r2, #0
 801a94a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801a94c:	2300      	movs	r3, #0
 801a94e:	61bb      	str	r3, [r7, #24]
 801a950:	69bb      	ldr	r3, [r7, #24]
 801a952:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801a954:	683a      	ldr	r2, [r7, #0]
 801a956:	69fb      	ldr	r3, [r7, #28]
 801a958:	4413      	add	r3, r2
 801a95a:	3316      	adds	r3, #22
 801a95c:	781b      	ldrb	r3, [r3, #0]
 801a95e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801a960:	e04d      	b.n	801a9fe <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	6a1a      	ldr	r2, [r3, #32]
 801a966:	69fb      	ldr	r3, [r7, #28]
 801a968:	1c59      	adds	r1, r3, #1
 801a96a:	61f9      	str	r1, [r7, #28]
 801a96c:	4413      	add	r3, r2
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801a972:	7dfb      	ldrb	r3, [r7, #23]
 801a974:	2b20      	cmp	r3, #32
 801a976:	d041      	beq.n	801a9fc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801a978:	7dfb      	ldrb	r3, [r7, #23]
 801a97a:	2b05      	cmp	r3, #5
 801a97c:	d101      	bne.n	801a982 <get_fileinfo+0xc6>
 801a97e:	23e5      	movs	r3, #229	@ 0xe5
 801a980:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801a982:	69fb      	ldr	r3, [r7, #28]
 801a984:	2b09      	cmp	r3, #9
 801a986:	d10f      	bne.n	801a9a8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801a988:	89bb      	ldrh	r3, [r7, #12]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d105      	bne.n	801a99a <get_fileinfo+0xde>
 801a98e:	683a      	ldr	r2, [r7, #0]
 801a990:	69bb      	ldr	r3, [r7, #24]
 801a992:	4413      	add	r3, r2
 801a994:	3316      	adds	r3, #22
 801a996:	222e      	movs	r2, #46	@ 0x2e
 801a998:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801a99a:	69bb      	ldr	r3, [r7, #24]
 801a99c:	1c5a      	adds	r2, r3, #1
 801a99e:	61ba      	str	r2, [r7, #24]
 801a9a0:	683a      	ldr	r2, [r7, #0]
 801a9a2:	4413      	add	r3, r2
 801a9a4:	222e      	movs	r2, #46	@ 0x2e
 801a9a6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801a9a8:	683a      	ldr	r2, [r7, #0]
 801a9aa:	69bb      	ldr	r3, [r7, #24]
 801a9ac:	4413      	add	r3, r2
 801a9ae:	3309      	adds	r3, #9
 801a9b0:	7dfa      	ldrb	r2, [r7, #23]
 801a9b2:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801a9b4:	89bb      	ldrh	r3, [r7, #12]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d11c      	bne.n	801a9f4 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801a9ba:	7dfb      	ldrb	r3, [r7, #23]
 801a9bc:	2b40      	cmp	r3, #64	@ 0x40
 801a9be:	d913      	bls.n	801a9e8 <get_fileinfo+0x12c>
 801a9c0:	7dfb      	ldrb	r3, [r7, #23]
 801a9c2:	2b5a      	cmp	r3, #90	@ 0x5a
 801a9c4:	d810      	bhi.n	801a9e8 <get_fileinfo+0x12c>
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	6a1b      	ldr	r3, [r3, #32]
 801a9ca:	330c      	adds	r3, #12
 801a9cc:	781b      	ldrb	r3, [r3, #0]
 801a9ce:	461a      	mov	r2, r3
 801a9d0:	69fb      	ldr	r3, [r7, #28]
 801a9d2:	2b08      	cmp	r3, #8
 801a9d4:	d901      	bls.n	801a9da <get_fileinfo+0x11e>
 801a9d6:	2310      	movs	r3, #16
 801a9d8:	e000      	b.n	801a9dc <get_fileinfo+0x120>
 801a9da:	2308      	movs	r3, #8
 801a9dc:	4013      	ands	r3, r2
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d002      	beq.n	801a9e8 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801a9e2:	7dfb      	ldrb	r3, [r7, #23]
 801a9e4:	3320      	adds	r3, #32
 801a9e6:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801a9e8:	683a      	ldr	r2, [r7, #0]
 801a9ea:	69bb      	ldr	r3, [r7, #24]
 801a9ec:	4413      	add	r3, r2
 801a9ee:	3316      	adds	r3, #22
 801a9f0:	7dfa      	ldrb	r2, [r7, #23]
 801a9f2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801a9f4:	69bb      	ldr	r3, [r7, #24]
 801a9f6:	3301      	adds	r3, #1
 801a9f8:	61bb      	str	r3, [r7, #24]
 801a9fa:	e000      	b.n	801a9fe <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801a9fc:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801a9fe:	69fb      	ldr	r3, [r7, #28]
 801aa00:	2b0a      	cmp	r3, #10
 801aa02:	d9ae      	bls.n	801a962 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801aa04:	89bb      	ldrh	r3, [r7, #12]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d10d      	bne.n	801aa26 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801aa0a:	683a      	ldr	r2, [r7, #0]
 801aa0c:	69bb      	ldr	r3, [r7, #24]
 801aa0e:	4413      	add	r3, r2
 801aa10:	3316      	adds	r3, #22
 801aa12:	2200      	movs	r2, #0
 801aa14:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	6a1b      	ldr	r3, [r3, #32]
 801aa1a:	330c      	adds	r3, #12
 801aa1c:	781b      	ldrb	r3, [r3, #0]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d101      	bne.n	801aa26 <get_fileinfo+0x16a>
 801aa22:	2300      	movs	r3, #0
 801aa24:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801aa26:	683a      	ldr	r2, [r7, #0]
 801aa28:	69bb      	ldr	r3, [r7, #24]
 801aa2a:	4413      	add	r3, r2
 801aa2c:	3309      	adds	r3, #9
 801aa2e:	2200      	movs	r2, #0
 801aa30:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	6a1b      	ldr	r3, [r3, #32]
 801aa36:	7ada      	ldrb	r2, [r3, #11]
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6a1b      	ldr	r3, [r3, #32]
 801aa40:	331c      	adds	r3, #28
 801aa42:	4618      	mov	r0, r3
 801aa44:	f7fe fc1e 	bl	8019284 <ld_dword>
 801aa48:	4602      	mov	r2, r0
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6a1b      	ldr	r3, [r3, #32]
 801aa52:	3316      	adds	r3, #22
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7fe fc15 	bl	8019284 <ld_dword>
 801aa5a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	b29a      	uxth	r2, r3
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	80da      	strh	r2, [r3, #6]
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	0c1b      	lsrs	r3, r3, #16
 801aa68:	b29a      	uxth	r2, r3
 801aa6a:	683b      	ldr	r3, [r7, #0]
 801aa6c:	809a      	strh	r2, [r3, #4]
 801aa6e:	e000      	b.n	801aa72 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801aa70:	bf00      	nop
}
 801aa72:	3720      	adds	r7, #32
 801aa74:	46bd      	mov	sp, r7
 801aa76:	bd80      	pop	{r7, pc}

0801aa78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b08a      	sub	sp, #40	@ 0x28
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	613b      	str	r3, [r7, #16]
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	68db      	ldr	r3, [r3, #12]
 801aa8e:	60fb      	str	r3, [r7, #12]
 801aa90:	2300      	movs	r3, #0
 801aa92:	617b      	str	r3, [r7, #20]
 801aa94:	697b      	ldr	r3, [r7, #20]
 801aa96:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801aa98:	69bb      	ldr	r3, [r7, #24]
 801aa9a:	1c5a      	adds	r2, r3, #1
 801aa9c:	61ba      	str	r2, [r7, #24]
 801aa9e:	693a      	ldr	r2, [r7, #16]
 801aaa0:	4413      	add	r3, r2
 801aaa2:	781b      	ldrb	r3, [r3, #0]
 801aaa4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801aaa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aaa8:	2b1f      	cmp	r3, #31
 801aaaa:	d940      	bls.n	801ab2e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801aaac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aaae:	2b2f      	cmp	r3, #47	@ 0x2f
 801aab0:	d006      	beq.n	801aac0 <create_name+0x48>
 801aab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aab4:	2b5c      	cmp	r3, #92	@ 0x5c
 801aab6:	d110      	bne.n	801aada <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801aab8:	e002      	b.n	801aac0 <create_name+0x48>
 801aaba:	69bb      	ldr	r3, [r7, #24]
 801aabc:	3301      	adds	r3, #1
 801aabe:	61bb      	str	r3, [r7, #24]
 801aac0:	693a      	ldr	r2, [r7, #16]
 801aac2:	69bb      	ldr	r3, [r7, #24]
 801aac4:	4413      	add	r3, r2
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	2b2f      	cmp	r3, #47	@ 0x2f
 801aaca:	d0f6      	beq.n	801aaba <create_name+0x42>
 801aacc:	693a      	ldr	r2, [r7, #16]
 801aace:	69bb      	ldr	r3, [r7, #24]
 801aad0:	4413      	add	r3, r2
 801aad2:	781b      	ldrb	r3, [r3, #0]
 801aad4:	2b5c      	cmp	r3, #92	@ 0x5c
 801aad6:	d0f0      	beq.n	801aaba <create_name+0x42>
			break;
 801aad8:	e02a      	b.n	801ab30 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801aada:	697b      	ldr	r3, [r7, #20]
 801aadc:	2bfe      	cmp	r3, #254	@ 0xfe
 801aade:	d901      	bls.n	801aae4 <create_name+0x6c>
 801aae0:	2306      	movs	r3, #6
 801aae2:	e17d      	b.n	801ade0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801aae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801aaea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aaec:	2101      	movs	r1, #1
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f001 f9be 	bl	801be70 <ff_convert>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801aaf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d101      	bne.n	801ab02 <create_name+0x8a>
 801aafe:	2306      	movs	r3, #6
 801ab00:	e16e      	b.n	801ade0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ab02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab04:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab06:	d809      	bhi.n	801ab1c <create_name+0xa4>
 801ab08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab0a:	4619      	mov	r1, r3
 801ab0c:	488d      	ldr	r0, [pc, #564]	@ (801ad44 <create_name+0x2cc>)
 801ab0e:	f7fe fc86 	bl	801941e <chk_chr>
 801ab12:	4603      	mov	r3, r0
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d001      	beq.n	801ab1c <create_name+0xa4>
 801ab18:	2306      	movs	r3, #6
 801ab1a:	e161      	b.n	801ade0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ab1c:	697b      	ldr	r3, [r7, #20]
 801ab1e:	1c5a      	adds	r2, r3, #1
 801ab20:	617a      	str	r2, [r7, #20]
 801ab22:	005b      	lsls	r3, r3, #1
 801ab24:	68fa      	ldr	r2, [r7, #12]
 801ab26:	4413      	add	r3, r2
 801ab28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ab2a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ab2c:	e7b4      	b.n	801aa98 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ab2e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ab30:	693a      	ldr	r2, [r7, #16]
 801ab32:	69bb      	ldr	r3, [r7, #24]
 801ab34:	441a      	add	r2, r3
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ab3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab3c:	2b1f      	cmp	r3, #31
 801ab3e:	d801      	bhi.n	801ab44 <create_name+0xcc>
 801ab40:	2304      	movs	r3, #4
 801ab42:	e000      	b.n	801ab46 <create_name+0xce>
 801ab44:	2300      	movs	r3, #0
 801ab46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab4a:	e011      	b.n	801ab70 <create_name+0xf8>
		w = lfn[di - 1];
 801ab4c:	697b      	ldr	r3, [r7, #20]
 801ab4e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ab52:	3b01      	subs	r3, #1
 801ab54:	005b      	lsls	r3, r3, #1
 801ab56:	68fa      	ldr	r2, [r7, #12]
 801ab58:	4413      	add	r3, r2
 801ab5a:	881b      	ldrh	r3, [r3, #0]
 801ab5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801ab5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab60:	2b20      	cmp	r3, #32
 801ab62:	d002      	beq.n	801ab6a <create_name+0xf2>
 801ab64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab66:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab68:	d106      	bne.n	801ab78 <create_name+0x100>
		di--;
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	3b01      	subs	r3, #1
 801ab6e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab70:	697b      	ldr	r3, [r7, #20]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d1ea      	bne.n	801ab4c <create_name+0xd4>
 801ab76:	e000      	b.n	801ab7a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801ab78:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801ab7a:	697b      	ldr	r3, [r7, #20]
 801ab7c:	005b      	lsls	r3, r3, #1
 801ab7e:	68fa      	ldr	r2, [r7, #12]
 801ab80:	4413      	add	r3, r2
 801ab82:	2200      	movs	r2, #0
 801ab84:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d101      	bne.n	801ab90 <create_name+0x118>
 801ab8c:	2306      	movs	r3, #6
 801ab8e:	e127      	b.n	801ade0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	3324      	adds	r3, #36	@ 0x24
 801ab94:	220b      	movs	r2, #11
 801ab96:	2120      	movs	r1, #32
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f7fe fbfe 	bl	801939a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ab9e:	2300      	movs	r3, #0
 801aba0:	61bb      	str	r3, [r7, #24]
 801aba2:	e002      	b.n	801abaa <create_name+0x132>
 801aba4:	69bb      	ldr	r3, [r7, #24]
 801aba6:	3301      	adds	r3, #1
 801aba8:	61bb      	str	r3, [r7, #24]
 801abaa:	69bb      	ldr	r3, [r7, #24]
 801abac:	005b      	lsls	r3, r3, #1
 801abae:	68fa      	ldr	r2, [r7, #12]
 801abb0:	4413      	add	r3, r2
 801abb2:	881b      	ldrh	r3, [r3, #0]
 801abb4:	2b20      	cmp	r3, #32
 801abb6:	d0f5      	beq.n	801aba4 <create_name+0x12c>
 801abb8:	69bb      	ldr	r3, [r7, #24]
 801abba:	005b      	lsls	r3, r3, #1
 801abbc:	68fa      	ldr	r2, [r7, #12]
 801abbe:	4413      	add	r3, r2
 801abc0:	881b      	ldrh	r3, [r3, #0]
 801abc2:	2b2e      	cmp	r3, #46	@ 0x2e
 801abc4:	d0ee      	beq.n	801aba4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801abc6:	69bb      	ldr	r3, [r7, #24]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d009      	beq.n	801abe0 <create_name+0x168>
 801abcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abd0:	f043 0303 	orr.w	r3, r3, #3
 801abd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801abd8:	e002      	b.n	801abe0 <create_name+0x168>
 801abda:	697b      	ldr	r3, [r7, #20]
 801abdc:	3b01      	subs	r3, #1
 801abde:	617b      	str	r3, [r7, #20]
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d009      	beq.n	801abfa <create_name+0x182>
 801abe6:	697b      	ldr	r3, [r7, #20]
 801abe8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801abec:	3b01      	subs	r3, #1
 801abee:	005b      	lsls	r3, r3, #1
 801abf0:	68fa      	ldr	r2, [r7, #12]
 801abf2:	4413      	add	r3, r2
 801abf4:	881b      	ldrh	r3, [r3, #0]
 801abf6:	2b2e      	cmp	r3, #46	@ 0x2e
 801abf8:	d1ef      	bne.n	801abda <create_name+0x162>

	i = b = 0; ni = 8;
 801abfa:	2300      	movs	r3, #0
 801abfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac00:	2300      	movs	r3, #0
 801ac02:	623b      	str	r3, [r7, #32]
 801ac04:	2308      	movs	r3, #8
 801ac06:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801ac08:	69bb      	ldr	r3, [r7, #24]
 801ac0a:	1c5a      	adds	r2, r3, #1
 801ac0c:	61ba      	str	r2, [r7, #24]
 801ac0e:	005b      	lsls	r3, r3, #1
 801ac10:	68fa      	ldr	r2, [r7, #12]
 801ac12:	4413      	add	r3, r2
 801ac14:	881b      	ldrh	r3, [r3, #0]
 801ac16:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801ac18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	f000 8090 	beq.w	801ad40 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801ac20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac22:	2b20      	cmp	r3, #32
 801ac24:	d006      	beq.n	801ac34 <create_name+0x1bc>
 801ac26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac28:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac2a:	d10a      	bne.n	801ac42 <create_name+0x1ca>
 801ac2c:	69ba      	ldr	r2, [r7, #24]
 801ac2e:	697b      	ldr	r3, [r7, #20]
 801ac30:	429a      	cmp	r2, r3
 801ac32:	d006      	beq.n	801ac42 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801ac34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac38:	f043 0303 	orr.w	r3, r3, #3
 801ac3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac40:	e07d      	b.n	801ad3e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801ac42:	6a3a      	ldr	r2, [r7, #32]
 801ac44:	69fb      	ldr	r3, [r7, #28]
 801ac46:	429a      	cmp	r2, r3
 801ac48:	d203      	bcs.n	801ac52 <create_name+0x1da>
 801ac4a:	69ba      	ldr	r2, [r7, #24]
 801ac4c:	697b      	ldr	r3, [r7, #20]
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	d123      	bne.n	801ac9a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801ac52:	69fb      	ldr	r3, [r7, #28]
 801ac54:	2b0b      	cmp	r3, #11
 801ac56:	d106      	bne.n	801ac66 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801ac58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac5c:	f043 0303 	orr.w	r3, r3, #3
 801ac60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac64:	e075      	b.n	801ad52 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801ac66:	69ba      	ldr	r2, [r7, #24]
 801ac68:	697b      	ldr	r3, [r7, #20]
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d005      	beq.n	801ac7a <create_name+0x202>
 801ac6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac72:	f043 0303 	orr.w	r3, r3, #3
 801ac76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801ac7a:	69ba      	ldr	r2, [r7, #24]
 801ac7c:	697b      	ldr	r3, [r7, #20]
 801ac7e:	429a      	cmp	r2, r3
 801ac80:	d866      	bhi.n	801ad50 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	61bb      	str	r3, [r7, #24]
 801ac86:	2308      	movs	r3, #8
 801ac88:	623b      	str	r3, [r7, #32]
 801ac8a:	230b      	movs	r3, #11
 801ac8c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801ac8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ac92:	009b      	lsls	r3, r3, #2
 801ac94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac98:	e051      	b.n	801ad3e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801ac9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac9c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ac9e:	d914      	bls.n	801acca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801aca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aca2:	2100      	movs	r1, #0
 801aca4:	4618      	mov	r0, r3
 801aca6:	f001 f8e3 	bl	801be70 <ff_convert>
 801acaa:	4603      	mov	r3, r0
 801acac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801acae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d004      	beq.n	801acbe <create_name+0x246>
 801acb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acb6:	3b80      	subs	r3, #128	@ 0x80
 801acb8:	4a23      	ldr	r2, [pc, #140]	@ (801ad48 <create_name+0x2d0>)
 801acba:	5cd3      	ldrb	r3, [r2, r3]
 801acbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801acbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acc2:	f043 0302 	orr.w	r3, r3, #2
 801acc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801acca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801accc:	2b00      	cmp	r3, #0
 801acce:	d007      	beq.n	801ace0 <create_name+0x268>
 801acd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acd2:	4619      	mov	r1, r3
 801acd4:	481d      	ldr	r0, [pc, #116]	@ (801ad4c <create_name+0x2d4>)
 801acd6:	f7fe fba2 	bl	801941e <chk_chr>
 801acda:	4603      	mov	r3, r0
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d008      	beq.n	801acf2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ace0:	235f      	movs	r3, #95	@ 0x5f
 801ace2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801ace4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ace8:	f043 0303 	orr.w	r3, r3, #3
 801acec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801acf0:	e01b      	b.n	801ad2a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801acf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acf4:	2b40      	cmp	r3, #64	@ 0x40
 801acf6:	d909      	bls.n	801ad0c <create_name+0x294>
 801acf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acfa:	2b5a      	cmp	r3, #90	@ 0x5a
 801acfc:	d806      	bhi.n	801ad0c <create_name+0x294>
					b |= 2;
 801acfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad02:	f043 0302 	orr.w	r3, r3, #2
 801ad06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad0a:	e00e      	b.n	801ad2a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801ad0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad0e:	2b60      	cmp	r3, #96	@ 0x60
 801ad10:	d90b      	bls.n	801ad2a <create_name+0x2b2>
 801ad12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad14:	2b7a      	cmp	r3, #122	@ 0x7a
 801ad16:	d808      	bhi.n	801ad2a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ad18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad1c:	f043 0301 	orr.w	r3, r3, #1
 801ad20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad26:	3b20      	subs	r3, #32
 801ad28:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801ad2a:	6a3b      	ldr	r3, [r7, #32]
 801ad2c:	1c5a      	adds	r2, r3, #1
 801ad2e:	623a      	str	r2, [r7, #32]
 801ad30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad32:	b2d1      	uxtb	r1, r2
 801ad34:	687a      	ldr	r2, [r7, #4]
 801ad36:	4413      	add	r3, r2
 801ad38:	460a      	mov	r2, r1
 801ad3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ad3e:	e763      	b.n	801ac08 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ad40:	bf00      	nop
 801ad42:	e006      	b.n	801ad52 <create_name+0x2da>
 801ad44:	080246ac 	.word	0x080246ac
 801ad48:	08024fd8 	.word	0x08024fd8
 801ad4c:	080246b8 	.word	0x080246b8
			if (si > di) break;			/* No extension */
 801ad50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ad58:	2be5      	cmp	r3, #229	@ 0xe5
 801ad5a:	d103      	bne.n	801ad64 <create_name+0x2ec>
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	2205      	movs	r2, #5
 801ad60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ad64:	69fb      	ldr	r3, [r7, #28]
 801ad66:	2b08      	cmp	r3, #8
 801ad68:	d104      	bne.n	801ad74 <create_name+0x2fc>
 801ad6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad6e:	009b      	lsls	r3, r3, #2
 801ad70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ad74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad78:	f003 030c 	and.w	r3, r3, #12
 801ad7c:	2b0c      	cmp	r3, #12
 801ad7e:	d005      	beq.n	801ad8c <create_name+0x314>
 801ad80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad84:	f003 0303 	and.w	r3, r3, #3
 801ad88:	2b03      	cmp	r3, #3
 801ad8a:	d105      	bne.n	801ad98 <create_name+0x320>
 801ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad90:	f043 0302 	orr.w	r3, r3, #2
 801ad94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ad98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad9c:	f003 0302 	and.w	r3, r3, #2
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d117      	bne.n	801add4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801ada4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ada8:	f003 0303 	and.w	r3, r3, #3
 801adac:	2b01      	cmp	r3, #1
 801adae:	d105      	bne.n	801adbc <create_name+0x344>
 801adb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adb4:	f043 0310 	orr.w	r3, r3, #16
 801adb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801adbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801adc0:	f003 030c 	and.w	r3, r3, #12
 801adc4:	2b04      	cmp	r3, #4
 801adc6:	d105      	bne.n	801add4 <create_name+0x35c>
 801adc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adcc:	f043 0308 	orr.w	r3, r3, #8
 801add0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801adda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801adde:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ade0:	4618      	mov	r0, r3
 801ade2:	3728      	adds	r7, #40	@ 0x28
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bd80      	pop	{r7, pc}

0801ade8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b086      	sub	sp, #24
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
 801adf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801adf6:	693b      	ldr	r3, [r7, #16]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801adfc:	e002      	b.n	801ae04 <follow_path+0x1c>
 801adfe:	683b      	ldr	r3, [r7, #0]
 801ae00:	3301      	adds	r3, #1
 801ae02:	603b      	str	r3, [r7, #0]
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	781b      	ldrb	r3, [r3, #0]
 801ae08:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae0a:	d0f8      	beq.n	801adfe <follow_path+0x16>
 801ae0c:	683b      	ldr	r3, [r7, #0]
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	2b5c      	cmp	r3, #92	@ 0x5c
 801ae12:	d0f4      	beq.n	801adfe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	2200      	movs	r2, #0
 801ae18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	781b      	ldrb	r3, [r3, #0]
 801ae1e:	2b1f      	cmp	r3, #31
 801ae20:	d80a      	bhi.n	801ae38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	2280      	movs	r2, #128	@ 0x80
 801ae26:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ae2a:	2100      	movs	r1, #0
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f7ff f83e 	bl	8019eae <dir_sdi>
 801ae32:	4603      	mov	r3, r0
 801ae34:	75fb      	strb	r3, [r7, #23]
 801ae36:	e043      	b.n	801aec0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ae38:	463b      	mov	r3, r7
 801ae3a:	4619      	mov	r1, r3
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	f7ff fe1b 	bl	801aa78 <create_name>
 801ae42:	4603      	mov	r3, r0
 801ae44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ae46:	7dfb      	ldrb	r3, [r7, #23]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d134      	bne.n	801aeb6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801ae4c:	6878      	ldr	r0, [r7, #4]
 801ae4e:	f7ff fb7c 	bl	801a54a <dir_find>
 801ae52:	4603      	mov	r3, r0
 801ae54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ae5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801ae5e:	7dfb      	ldrb	r3, [r7, #23]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d00a      	beq.n	801ae7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ae64:	7dfb      	ldrb	r3, [r7, #23]
 801ae66:	2b04      	cmp	r3, #4
 801ae68:	d127      	bne.n	801aeba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801ae6a:	7afb      	ldrb	r3, [r7, #11]
 801ae6c:	f003 0304 	and.w	r3, r3, #4
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d122      	bne.n	801aeba <follow_path+0xd2>
 801ae74:	2305      	movs	r3, #5
 801ae76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801ae78:	e01f      	b.n	801aeba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ae7a:	7afb      	ldrb	r3, [r7, #11]
 801ae7c:	f003 0304 	and.w	r3, r3, #4
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d11c      	bne.n	801aebe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ae84:	693b      	ldr	r3, [r7, #16]
 801ae86:	799b      	ldrb	r3, [r3, #6]
 801ae88:	f003 0310 	and.w	r3, r3, #16
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d102      	bne.n	801ae96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ae90:	2305      	movs	r3, #5
 801ae92:	75fb      	strb	r3, [r7, #23]
 801ae94:	e014      	b.n	801aec0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	695b      	ldr	r3, [r3, #20]
 801aea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aea4:	4413      	add	r3, r2
 801aea6:	4619      	mov	r1, r3
 801aea8:	68f8      	ldr	r0, [r7, #12]
 801aeaa:	f7ff f987 	bl	801a1bc <ld_clust>
 801aeae:	4602      	mov	r2, r0
 801aeb0:	693b      	ldr	r3, [r7, #16]
 801aeb2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801aeb4:	e7c0      	b.n	801ae38 <follow_path+0x50>
			if (res != FR_OK) break;
 801aeb6:	bf00      	nop
 801aeb8:	e002      	b.n	801aec0 <follow_path+0xd8>
				break;
 801aeba:	bf00      	nop
 801aebc:	e000      	b.n	801aec0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801aebe:	bf00      	nop
			}
		}
	}

	return res;
 801aec0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aec2:	4618      	mov	r0, r3
 801aec4:	3718      	adds	r7, #24
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}

0801aeca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801aeca:	b480      	push	{r7}
 801aecc:	b087      	sub	sp, #28
 801aece:	af00      	add	r7, sp, #0
 801aed0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801aed2:	f04f 33ff 	mov.w	r3, #4294967295
 801aed6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d031      	beq.n	801af44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	617b      	str	r3, [r7, #20]
 801aee6:	e002      	b.n	801aeee <get_ldnumber+0x24>
 801aee8:	697b      	ldr	r3, [r7, #20]
 801aeea:	3301      	adds	r3, #1
 801aeec:	617b      	str	r3, [r7, #20]
 801aeee:	697b      	ldr	r3, [r7, #20]
 801aef0:	781b      	ldrb	r3, [r3, #0]
 801aef2:	2b1f      	cmp	r3, #31
 801aef4:	d903      	bls.n	801aefe <get_ldnumber+0x34>
 801aef6:	697b      	ldr	r3, [r7, #20]
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	2b3a      	cmp	r3, #58	@ 0x3a
 801aefc:	d1f4      	bne.n	801aee8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801aefe:	697b      	ldr	r3, [r7, #20]
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	2b3a      	cmp	r3, #58	@ 0x3a
 801af04:	d11c      	bne.n	801af40 <get_ldnumber+0x76>
			tp = *path;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	1c5a      	adds	r2, r3, #1
 801af10:	60fa      	str	r2, [r7, #12]
 801af12:	781b      	ldrb	r3, [r3, #0]
 801af14:	3b30      	subs	r3, #48	@ 0x30
 801af16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801af18:	68bb      	ldr	r3, [r7, #8]
 801af1a:	2b09      	cmp	r3, #9
 801af1c:	d80e      	bhi.n	801af3c <get_ldnumber+0x72>
 801af1e:	68fa      	ldr	r2, [r7, #12]
 801af20:	697b      	ldr	r3, [r7, #20]
 801af22:	429a      	cmp	r2, r3
 801af24:	d10a      	bne.n	801af3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801af26:	68bb      	ldr	r3, [r7, #8]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d107      	bne.n	801af3c <get_ldnumber+0x72>
					vol = (int)i;
 801af2c:	68bb      	ldr	r3, [r7, #8]
 801af2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	3301      	adds	r3, #1
 801af34:	617b      	str	r3, [r7, #20]
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	697a      	ldr	r2, [r7, #20]
 801af3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801af3c:	693b      	ldr	r3, [r7, #16]
 801af3e:	e002      	b.n	801af46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801af40:	2300      	movs	r3, #0
 801af42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801af44:	693b      	ldr	r3, [r7, #16]
}
 801af46:	4618      	mov	r0, r3
 801af48:	371c      	adds	r7, #28
 801af4a:	46bd      	mov	sp, r7
 801af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af50:	4770      	bx	lr
	...

0801af54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b082      	sub	sp, #8
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
 801af5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	2200      	movs	r2, #0
 801af62:	70da      	strb	r2, [r3, #3]
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	f04f 32ff 	mov.w	r2, #4294967295
 801af6a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801af6c:	6839      	ldr	r1, [r7, #0]
 801af6e:	6878      	ldr	r0, [r7, #4]
 801af70:	f7fe fc20 	bl	80197b4 <move_window>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d001      	beq.n	801af7e <check_fs+0x2a>
 801af7a:	2304      	movs	r3, #4
 801af7c:	e038      	b.n	801aff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	3334      	adds	r3, #52	@ 0x34
 801af82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801af86:	4618      	mov	r0, r3
 801af88:	f7fe f964 	bl	8019254 <ld_word>
 801af8c:	4603      	mov	r3, r0
 801af8e:	461a      	mov	r2, r3
 801af90:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801af94:	429a      	cmp	r2, r3
 801af96:	d001      	beq.n	801af9c <check_fs+0x48>
 801af98:	2303      	movs	r3, #3
 801af9a:	e029      	b.n	801aff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afa2:	2be9      	cmp	r3, #233	@ 0xe9
 801afa4:	d009      	beq.n	801afba <check_fs+0x66>
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afac:	2beb      	cmp	r3, #235	@ 0xeb
 801afae:	d11e      	bne.n	801afee <check_fs+0x9a>
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801afb6:	2b90      	cmp	r3, #144	@ 0x90
 801afb8:	d119      	bne.n	801afee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	3334      	adds	r3, #52	@ 0x34
 801afbe:	3336      	adds	r3, #54	@ 0x36
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7fe f95f 	bl	8019284 <ld_dword>
 801afc6:	4603      	mov	r3, r0
 801afc8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801afcc:	4a0a      	ldr	r2, [pc, #40]	@ (801aff8 <check_fs+0xa4>)
 801afce:	4293      	cmp	r3, r2
 801afd0:	d101      	bne.n	801afd6 <check_fs+0x82>
 801afd2:	2300      	movs	r3, #0
 801afd4:	e00c      	b.n	801aff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	3334      	adds	r3, #52	@ 0x34
 801afda:	3352      	adds	r3, #82	@ 0x52
 801afdc:	4618      	mov	r0, r3
 801afde:	f7fe f951 	bl	8019284 <ld_dword>
 801afe2:	4603      	mov	r3, r0
 801afe4:	4a05      	ldr	r2, [pc, #20]	@ (801affc <check_fs+0xa8>)
 801afe6:	4293      	cmp	r3, r2
 801afe8:	d101      	bne.n	801afee <check_fs+0x9a>
 801afea:	2300      	movs	r3, #0
 801afec:	e000      	b.n	801aff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801afee:	2302      	movs	r3, #2
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3708      	adds	r7, #8
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}
 801aff8:	00544146 	.word	0x00544146
 801affc:	33544146 	.word	0x33544146

0801b000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b096      	sub	sp, #88	@ 0x58
 801b004:	af00      	add	r7, sp, #0
 801b006:	60f8      	str	r0, [r7, #12]
 801b008:	60b9      	str	r1, [r7, #8]
 801b00a:	4613      	mov	r3, r2
 801b00c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	2200      	movs	r2, #0
 801b012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b014:	68f8      	ldr	r0, [r7, #12]
 801b016:	f7ff ff58 	bl	801aeca <get_ldnumber>
 801b01a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b01e:	2b00      	cmp	r3, #0
 801b020:	da01      	bge.n	801b026 <find_volume+0x26>
 801b022:	230b      	movs	r3, #11
 801b024:	e230      	b.n	801b488 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b026:	4aa1      	ldr	r2, [pc, #644]	@ (801b2ac <find_volume+0x2ac>)
 801b028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b02e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b032:	2b00      	cmp	r3, #0
 801b034:	d101      	bne.n	801b03a <find_volume+0x3a>
 801b036:	230c      	movs	r3, #12
 801b038:	e226      	b.n	801b488 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b03a:	68bb      	ldr	r3, [r7, #8]
 801b03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b03e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b040:	79fb      	ldrb	r3, [r7, #7]
 801b042:	f023 0301 	bic.w	r3, r3, #1
 801b046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b04a:	781b      	ldrb	r3, [r3, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d01a      	beq.n	801b086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b052:	785b      	ldrb	r3, [r3, #1]
 801b054:	4618      	mov	r0, r3
 801b056:	f7fe f85d 	bl	8019114 <disk_status>
 801b05a:	4603      	mov	r3, r0
 801b05c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b064:	f003 0301 	and.w	r3, r3, #1
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d10c      	bne.n	801b086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b06c:	79fb      	ldrb	r3, [r7, #7]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d007      	beq.n	801b082 <find_volume+0x82>
 801b072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b076:	f003 0304 	and.w	r3, r3, #4
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d001      	beq.n	801b082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b07e:	230a      	movs	r3, #10
 801b080:	e202      	b.n	801b488 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801b082:	2300      	movs	r3, #0
 801b084:	e200      	b.n	801b488 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b088:	2200      	movs	r2, #0
 801b08a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b08e:	b2da      	uxtb	r2, r3
 801b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b096:	785b      	ldrb	r3, [r3, #1]
 801b098:	4618      	mov	r0, r3
 801b09a:	f7fe f855 	bl	8019148 <disk_initialize>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b0a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0a8:	f003 0301 	and.w	r3, r3, #1
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d001      	beq.n	801b0b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b0b0:	2303      	movs	r3, #3
 801b0b2:	e1e9      	b.n	801b488 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b0b4:	79fb      	ldrb	r3, [r7, #7]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d007      	beq.n	801b0ca <find_volume+0xca>
 801b0ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0be:	f003 0304 	and.w	r3, r3, #4
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d001      	beq.n	801b0ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b0c6:	230a      	movs	r3, #10
 801b0c8:	e1de      	b.n	801b488 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b0ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b0d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b0d2:	f7ff ff3f 	bl	801af54 <check_fs>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b0dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b0e0:	2b02      	cmp	r3, #2
 801b0e2:	d149      	bne.n	801b178 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 801b0e8:	e01e      	b.n	801b128 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801b0f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0f2:	011b      	lsls	r3, r3, #4
 801b0f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b0f8:	4413      	add	r3, r2
 801b0fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0fe:	3304      	adds	r3, #4
 801b100:	781b      	ldrb	r3, [r3, #0]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d006      	beq.n	801b114 <find_volume+0x114>
 801b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b108:	3308      	adds	r3, #8
 801b10a:	4618      	mov	r0, r3
 801b10c:	f7fe f8ba 	bl	8019284 <ld_dword>
 801b110:	4602      	mov	r2, r0
 801b112:	e000      	b.n	801b116 <find_volume+0x116>
 801b114:	2200      	movs	r2, #0
 801b116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b118:	009b      	lsls	r3, r3, #2
 801b11a:	3358      	adds	r3, #88	@ 0x58
 801b11c:	443b      	add	r3, r7
 801b11e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b124:	3301      	adds	r3, #1
 801b126:	643b      	str	r3, [r7, #64]	@ 0x40
 801b128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b12a:	2b03      	cmp	r3, #3
 801b12c:	d9dd      	bls.n	801b0ea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b12e:	2300      	movs	r3, #0
 801b130:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b134:	2b00      	cmp	r3, #0
 801b136:	d002      	beq.n	801b13e <find_volume+0x13e>
 801b138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b13a:	3b01      	subs	r3, #1
 801b13c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b140:	009b      	lsls	r3, r3, #2
 801b142:	3358      	adds	r3, #88	@ 0x58
 801b144:	443b      	add	r3, r7
 801b146:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b14a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b14c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d005      	beq.n	801b15e <find_volume+0x15e>
 801b152:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b154:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b156:	f7ff fefd 	bl	801af54 <check_fs>
 801b15a:	4603      	mov	r3, r0
 801b15c:	e000      	b.n	801b160 <find_volume+0x160>
 801b15e:	2303      	movs	r3, #3
 801b160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b168:	2b01      	cmp	r3, #1
 801b16a:	d905      	bls.n	801b178 <find_volume+0x178>
 801b16c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b16e:	3301      	adds	r3, #1
 801b170:	643b      	str	r3, [r7, #64]	@ 0x40
 801b172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b174:	2b03      	cmp	r3, #3
 801b176:	d9e2      	bls.n	801b13e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b17c:	2b04      	cmp	r3, #4
 801b17e:	d101      	bne.n	801b184 <find_volume+0x184>
 801b180:	2301      	movs	r3, #1
 801b182:	e181      	b.n	801b488 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b184:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b188:	2b01      	cmp	r3, #1
 801b18a:	d901      	bls.n	801b190 <find_volume+0x190>
 801b18c:	230d      	movs	r3, #13
 801b18e:	e17b      	b.n	801b488 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b192:	3334      	adds	r3, #52	@ 0x34
 801b194:	330b      	adds	r3, #11
 801b196:	4618      	mov	r0, r3
 801b198:	f7fe f85c 	bl	8019254 <ld_word>
 801b19c:	4603      	mov	r3, r0
 801b19e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b1a2:	d001      	beq.n	801b1a8 <find_volume+0x1a8>
 801b1a4:	230d      	movs	r3, #13
 801b1a6:	e16f      	b.n	801b488 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1aa:	3334      	adds	r3, #52	@ 0x34
 801b1ac:	3316      	adds	r3, #22
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7fe f850 	bl	8019254 <ld_word>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d106      	bne.n	801b1cc <find_volume+0x1cc>
 801b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1c0:	3334      	adds	r3, #52	@ 0x34
 801b1c2:	3324      	adds	r3, #36	@ 0x24
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	f7fe f85d 	bl	8019284 <ld_dword>
 801b1ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b1d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1d4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1de:	789b      	ldrb	r3, [r3, #2]
 801b1e0:	2b01      	cmp	r3, #1
 801b1e2:	d005      	beq.n	801b1f0 <find_volume+0x1f0>
 801b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1e6:	789b      	ldrb	r3, [r3, #2]
 801b1e8:	2b02      	cmp	r3, #2
 801b1ea:	d001      	beq.n	801b1f0 <find_volume+0x1f0>
 801b1ec:	230d      	movs	r3, #13
 801b1ee:	e14b      	b.n	801b488 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f2:	789b      	ldrb	r3, [r3, #2]
 801b1f4:	461a      	mov	r2, r3
 801b1f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1f8:	fb02 f303 	mul.w	r3, r2, r3
 801b1fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b204:	461a      	mov	r2, r3
 801b206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b208:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b20c:	895b      	ldrh	r3, [r3, #10]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d008      	beq.n	801b224 <find_volume+0x224>
 801b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b214:	895b      	ldrh	r3, [r3, #10]
 801b216:	461a      	mov	r2, r3
 801b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b21a:	895b      	ldrh	r3, [r3, #10]
 801b21c:	3b01      	subs	r3, #1
 801b21e:	4013      	ands	r3, r2
 801b220:	2b00      	cmp	r3, #0
 801b222:	d001      	beq.n	801b228 <find_volume+0x228>
 801b224:	230d      	movs	r3, #13
 801b226:	e12f      	b.n	801b488 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b22a:	3334      	adds	r3, #52	@ 0x34
 801b22c:	3311      	adds	r3, #17
 801b22e:	4618      	mov	r0, r3
 801b230:	f7fe f810 	bl	8019254 <ld_word>
 801b234:	4603      	mov	r3, r0
 801b236:	461a      	mov	r2, r3
 801b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b23a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b23e:	891b      	ldrh	r3, [r3, #8]
 801b240:	f003 030f 	and.w	r3, r3, #15
 801b244:	b29b      	uxth	r3, r3
 801b246:	2b00      	cmp	r3, #0
 801b248:	d001      	beq.n	801b24e <find_volume+0x24e>
 801b24a:	230d      	movs	r3, #13
 801b24c:	e11c      	b.n	801b488 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b250:	3334      	adds	r3, #52	@ 0x34
 801b252:	3313      	adds	r3, #19
 801b254:	4618      	mov	r0, r3
 801b256:	f7fd fffd 	bl	8019254 <ld_word>
 801b25a:	4603      	mov	r3, r0
 801b25c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b260:	2b00      	cmp	r3, #0
 801b262:	d106      	bne.n	801b272 <find_volume+0x272>
 801b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b266:	3334      	adds	r3, #52	@ 0x34
 801b268:	3320      	adds	r3, #32
 801b26a:	4618      	mov	r0, r3
 801b26c:	f7fe f80a 	bl	8019284 <ld_dword>
 801b270:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b274:	3334      	adds	r3, #52	@ 0x34
 801b276:	330e      	adds	r3, #14
 801b278:	4618      	mov	r0, r3
 801b27a:	f7fd ffeb 	bl	8019254 <ld_word>
 801b27e:	4603      	mov	r3, r0
 801b280:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b282:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b284:	2b00      	cmp	r3, #0
 801b286:	d101      	bne.n	801b28c <find_volume+0x28c>
 801b288:	230d      	movs	r3, #13
 801b28a:	e0fd      	b.n	801b488 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b28c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b28e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b290:	4413      	add	r3, r2
 801b292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b294:	8912      	ldrh	r2, [r2, #8]
 801b296:	0912      	lsrs	r2, r2, #4
 801b298:	b292      	uxth	r2, r2
 801b29a:	4413      	add	r3, r2
 801b29c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b29e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d204      	bcs.n	801b2b0 <find_volume+0x2b0>
 801b2a6:	230d      	movs	r3, #13
 801b2a8:	e0ee      	b.n	801b488 <find_volume+0x488>
 801b2aa:	bf00      	nop
 801b2ac:	20001b68 	.word	0x20001b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b2b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2b4:	1ad3      	subs	r3, r2, r3
 801b2b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2b8:	8952      	ldrh	r2, [r2, #10]
 801b2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 801b2be:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d101      	bne.n	801b2ca <find_volume+0x2ca>
 801b2c6:	230d      	movs	r3, #13
 801b2c8:	e0de      	b.n	801b488 <find_volume+0x488>
		fmt = FS_FAT32;
 801b2ca:	2303      	movs	r3, #3
 801b2cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2d2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b2d6:	4293      	cmp	r3, r2
 801b2d8:	d802      	bhi.n	801b2e0 <find_volume+0x2e0>
 801b2da:	2302      	movs	r3, #2
 801b2dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2e2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b2e6:	4293      	cmp	r3, r2
 801b2e8:	d802      	bhi.n	801b2f0 <find_volume+0x2f0>
 801b2ea:	2301      	movs	r3, #1
 801b2ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2f2:	1c9a      	adds	r2, r3, #2
 801b2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2f6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b2fc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b2fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b302:	441a      	add	r2, r3
 801b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b306:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b308:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b30c:	441a      	add	r2, r3
 801b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b310:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801b312:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b316:	2b03      	cmp	r3, #3
 801b318:	d11e      	bne.n	801b358 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b31c:	3334      	adds	r3, #52	@ 0x34
 801b31e:	332a      	adds	r3, #42	@ 0x2a
 801b320:	4618      	mov	r0, r3
 801b322:	f7fd ff97 	bl	8019254 <ld_word>
 801b326:	4603      	mov	r3, r0
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d001      	beq.n	801b330 <find_volume+0x330>
 801b32c:	230d      	movs	r3, #13
 801b32e:	e0ab      	b.n	801b488 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b332:	891b      	ldrh	r3, [r3, #8]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d001      	beq.n	801b33c <find_volume+0x33c>
 801b338:	230d      	movs	r3, #13
 801b33a:	e0a5      	b.n	801b488 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b33e:	3334      	adds	r3, #52	@ 0x34
 801b340:	332c      	adds	r3, #44	@ 0x2c
 801b342:	4618      	mov	r0, r3
 801b344:	f7fd ff9e 	bl	8019284 <ld_dword>
 801b348:	4602      	mov	r2, r0
 801b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b34c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b350:	699b      	ldr	r3, [r3, #24]
 801b352:	009b      	lsls	r3, r3, #2
 801b354:	647b      	str	r3, [r7, #68]	@ 0x44
 801b356:	e01f      	b.n	801b398 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b35a:	891b      	ldrh	r3, [r3, #8]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d101      	bne.n	801b364 <find_volume+0x364>
 801b360:	230d      	movs	r3, #13
 801b362:	e091      	b.n	801b488 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b36a:	441a      	add	r2, r3
 801b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b36e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b374:	2b02      	cmp	r3, #2
 801b376:	d103      	bne.n	801b380 <find_volume+0x380>
 801b378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b37a:	699b      	ldr	r3, [r3, #24]
 801b37c:	005b      	lsls	r3, r3, #1
 801b37e:	e00a      	b.n	801b396 <find_volume+0x396>
 801b380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b382:	699a      	ldr	r2, [r3, #24]
 801b384:	4613      	mov	r3, r2
 801b386:	005b      	lsls	r3, r3, #1
 801b388:	4413      	add	r3, r2
 801b38a:	085a      	lsrs	r2, r3, #1
 801b38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b38e:	699b      	ldr	r3, [r3, #24]
 801b390:	f003 0301 	and.w	r3, r3, #1
 801b394:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b396:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b39a:	69da      	ldr	r2, [r3, #28]
 801b39c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b39e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801b3a2:	0a5b      	lsrs	r3, r3, #9
 801b3a4:	429a      	cmp	r2, r3
 801b3a6:	d201      	bcs.n	801b3ac <find_volume+0x3ac>
 801b3a8:	230d      	movs	r3, #13
 801b3aa:	e06d      	b.n	801b488 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ae:	f04f 32ff 	mov.w	r2, #4294967295
 801b3b2:	615a      	str	r2, [r3, #20]
 801b3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b6:	695a      	ldr	r2, [r3, #20]
 801b3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3be:	2280      	movs	r2, #128	@ 0x80
 801b3c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b3c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b3c6:	2b03      	cmp	r3, #3
 801b3c8:	d149      	bne.n	801b45e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3cc:	3334      	adds	r3, #52	@ 0x34
 801b3ce:	3330      	adds	r3, #48	@ 0x30
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f7fd ff3f 	bl	8019254 <ld_word>
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	2b01      	cmp	r3, #1
 801b3da:	d140      	bne.n	801b45e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b3dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b3de:	3301      	adds	r3, #1
 801b3e0:	4619      	mov	r1, r3
 801b3e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b3e4:	f7fe f9e6 	bl	80197b4 <move_window>
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d137      	bne.n	801b45e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3f6:	3334      	adds	r3, #52	@ 0x34
 801b3f8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f7fd ff29 	bl	8019254 <ld_word>
 801b402:	4603      	mov	r3, r0
 801b404:	461a      	mov	r2, r3
 801b406:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b40a:	429a      	cmp	r2, r3
 801b40c:	d127      	bne.n	801b45e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b410:	3334      	adds	r3, #52	@ 0x34
 801b412:	4618      	mov	r0, r3
 801b414:	f7fd ff36 	bl	8019284 <ld_dword>
 801b418:	4603      	mov	r3, r0
 801b41a:	4a1d      	ldr	r2, [pc, #116]	@ (801b490 <find_volume+0x490>)
 801b41c:	4293      	cmp	r3, r2
 801b41e:	d11e      	bne.n	801b45e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b422:	3334      	adds	r3, #52	@ 0x34
 801b424:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b428:	4618      	mov	r0, r3
 801b42a:	f7fd ff2b 	bl	8019284 <ld_dword>
 801b42e:	4603      	mov	r3, r0
 801b430:	4a18      	ldr	r2, [pc, #96]	@ (801b494 <find_volume+0x494>)
 801b432:	4293      	cmp	r3, r2
 801b434:	d113      	bne.n	801b45e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b438:	3334      	adds	r3, #52	@ 0x34
 801b43a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801b43e:	4618      	mov	r0, r3
 801b440:	f7fd ff20 	bl	8019284 <ld_dword>
 801b444:	4602      	mov	r2, r0
 801b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b448:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b44c:	3334      	adds	r3, #52	@ 0x34
 801b44e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801b452:	4618      	mov	r0, r3
 801b454:	f7fd ff16 	bl	8019284 <ld_dword>
 801b458:	4602      	mov	r2, r0
 801b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b45c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b460:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b464:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b466:	4b0c      	ldr	r3, [pc, #48]	@ (801b498 <find_volume+0x498>)
 801b468:	881b      	ldrh	r3, [r3, #0]
 801b46a:	3301      	adds	r3, #1
 801b46c:	b29a      	uxth	r2, r3
 801b46e:	4b0a      	ldr	r3, [pc, #40]	@ (801b498 <find_volume+0x498>)
 801b470:	801a      	strh	r2, [r3, #0]
 801b472:	4b09      	ldr	r3, [pc, #36]	@ (801b498 <find_volume+0x498>)
 801b474:	881a      	ldrh	r2, [r3, #0]
 801b476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b478:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801b47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b47c:	4a07      	ldr	r2, [pc, #28]	@ (801b49c <find_volume+0x49c>)
 801b47e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b480:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b482:	f7fe f92f 	bl	80196e4 <clear_lock>
#endif
	return FR_OK;
 801b486:	2300      	movs	r3, #0
}
 801b488:	4618      	mov	r0, r3
 801b48a:	3758      	adds	r7, #88	@ 0x58
 801b48c:	46bd      	mov	sp, r7
 801b48e:	bd80      	pop	{r7, pc}
 801b490:	41615252 	.word	0x41615252
 801b494:	61417272 	.word	0x61417272
 801b498:	20001b6c 	.word	0x20001b6c
 801b49c:	20001b90 	.word	0x20001b90

0801b4a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b084      	sub	sp, #16
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	6078      	str	r0, [r7, #4]
 801b4a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b4aa:	2309      	movs	r3, #9
 801b4ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d01c      	beq.n	801b4ee <validate+0x4e>
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d018      	beq.n	801b4ee <validate+0x4e>
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	781b      	ldrb	r3, [r3, #0]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d013      	beq.n	801b4ee <validate+0x4e>
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	889a      	ldrh	r2, [r3, #4]
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	88db      	ldrh	r3, [r3, #6]
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	d10c      	bne.n	801b4ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	785b      	ldrb	r3, [r3, #1]
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f7fd fe1a 	bl	8019114 <disk_status>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	f003 0301 	and.w	r3, r3, #1
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d101      	bne.n	801b4ee <validate+0x4e>
			res = FR_OK;
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b4ee:	7bfb      	ldrb	r3, [r7, #15]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d102      	bne.n	801b4fa <validate+0x5a>
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	e000      	b.n	801b4fc <validate+0x5c>
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	683a      	ldr	r2, [r7, #0]
 801b4fe:	6013      	str	r3, [r2, #0]
	return res;
 801b500:	7bfb      	ldrb	r3, [r7, #15]
}
 801b502:	4618      	mov	r0, r3
 801b504:	3710      	adds	r7, #16
 801b506:	46bd      	mov	sp, r7
 801b508:	bd80      	pop	{r7, pc}
	...

0801b50c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b088      	sub	sp, #32
 801b510:	af00      	add	r7, sp, #0
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	60b9      	str	r1, [r7, #8]
 801b516:	4613      	mov	r3, r2
 801b518:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b51a:	68bb      	ldr	r3, [r7, #8]
 801b51c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b51e:	f107 0310 	add.w	r3, r7, #16
 801b522:	4618      	mov	r0, r3
 801b524:	f7ff fcd1 	bl	801aeca <get_ldnumber>
 801b528:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b52a:	69fb      	ldr	r3, [r7, #28]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	da01      	bge.n	801b534 <f_mount+0x28>
 801b530:	230b      	movs	r3, #11
 801b532:	e02b      	b.n	801b58c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b534:	4a17      	ldr	r2, [pc, #92]	@ (801b594 <f_mount+0x88>)
 801b536:	69fb      	ldr	r3, [r7, #28]
 801b538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b53c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b53e:	69bb      	ldr	r3, [r7, #24]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d005      	beq.n	801b550 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b544:	69b8      	ldr	r0, [r7, #24]
 801b546:	f7fe f8cd 	bl	80196e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b54a:	69bb      	ldr	r3, [r7, #24]
 801b54c:	2200      	movs	r2, #0
 801b54e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d002      	beq.n	801b55c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	2200      	movs	r2, #0
 801b55a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b55c:	68fa      	ldr	r2, [r7, #12]
 801b55e:	490d      	ldr	r1, [pc, #52]	@ (801b594 <f_mount+0x88>)
 801b560:	69fb      	ldr	r3, [r7, #28]
 801b562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d002      	beq.n	801b572 <f_mount+0x66>
 801b56c:	79fb      	ldrb	r3, [r7, #7]
 801b56e:	2b01      	cmp	r3, #1
 801b570:	d001      	beq.n	801b576 <f_mount+0x6a>
 801b572:	2300      	movs	r3, #0
 801b574:	e00a      	b.n	801b58c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b576:	f107 010c 	add.w	r1, r7, #12
 801b57a:	f107 0308 	add.w	r3, r7, #8
 801b57e:	2200      	movs	r2, #0
 801b580:	4618      	mov	r0, r3
 801b582:	f7ff fd3d 	bl	801b000 <find_volume>
 801b586:	4603      	mov	r3, r0
 801b588:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b58a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b58c:	4618      	mov	r0, r3
 801b58e:	3720      	adds	r7, #32
 801b590:	46bd      	mov	sp, r7
 801b592:	bd80      	pop	{r7, pc}
 801b594:	20001b68 	.word	0x20001b68

0801b598 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b09a      	sub	sp, #104	@ 0x68
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	60f8      	str	r0, [r7, #12]
 801b5a0:	60b9      	str	r1, [r7, #8]
 801b5a2:	4613      	mov	r3, r2
 801b5a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d101      	bne.n	801b5b0 <f_open+0x18>
 801b5ac:	2309      	movs	r3, #9
 801b5ae:	e1a9      	b.n	801b904 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b5b0:	79fb      	ldrb	r3, [r7, #7]
 801b5b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b5b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b5b8:	79fa      	ldrb	r2, [r7, #7]
 801b5ba:	f107 0114 	add.w	r1, r7, #20
 801b5be:	f107 0308 	add.w	r3, r7, #8
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f7ff fd1c 	bl	801b000 <find_volume>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801b5ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	f040 818d 	bne.w	801b8f2 <f_open+0x35a>
		dj.obj.fs = fs;
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b5dc:	68ba      	ldr	r2, [r7, #8]
 801b5de:	f107 0318 	add.w	r3, r7, #24
 801b5e2:	4611      	mov	r1, r2
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7ff fbff 	bl	801ade8 <follow_path>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b5f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d118      	bne.n	801b62a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b5f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b5fc:	b25b      	sxtb	r3, r3
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	da03      	bge.n	801b60a <f_open+0x72>
				res = FR_INVALID_NAME;
 801b602:	2306      	movs	r3, #6
 801b604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b608:	e00f      	b.n	801b62a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b60a:	79fb      	ldrb	r3, [r7, #7]
 801b60c:	2b01      	cmp	r3, #1
 801b60e:	bf8c      	ite	hi
 801b610:	2301      	movhi	r3, #1
 801b612:	2300      	movls	r3, #0
 801b614:	b2db      	uxtb	r3, r3
 801b616:	461a      	mov	r2, r3
 801b618:	f107 0318 	add.w	r3, r7, #24
 801b61c:	4611      	mov	r1, r2
 801b61e:	4618      	mov	r0, r3
 801b620:	f7fd ff18 	bl	8019454 <chk_lock>
 801b624:	4603      	mov	r3, r0
 801b626:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b62a:	79fb      	ldrb	r3, [r7, #7]
 801b62c:	f003 031c 	and.w	r3, r3, #28
 801b630:	2b00      	cmp	r3, #0
 801b632:	d07f      	beq.n	801b734 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801b634:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d017      	beq.n	801b66c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b63c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b640:	2b04      	cmp	r3, #4
 801b642:	d10e      	bne.n	801b662 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b644:	f7fd ff62 	bl	801950c <enq_lock>
 801b648:	4603      	mov	r3, r0
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d006      	beq.n	801b65c <f_open+0xc4>
 801b64e:	f107 0318 	add.w	r3, r7, #24
 801b652:	4618      	mov	r0, r3
 801b654:	f7ff f83a 	bl	801a6cc <dir_register>
 801b658:	4603      	mov	r3, r0
 801b65a:	e000      	b.n	801b65e <f_open+0xc6>
 801b65c:	2312      	movs	r3, #18
 801b65e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b662:	79fb      	ldrb	r3, [r7, #7]
 801b664:	f043 0308 	orr.w	r3, r3, #8
 801b668:	71fb      	strb	r3, [r7, #7]
 801b66a:	e010      	b.n	801b68e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b66c:	7fbb      	ldrb	r3, [r7, #30]
 801b66e:	f003 0311 	and.w	r3, r3, #17
 801b672:	2b00      	cmp	r3, #0
 801b674:	d003      	beq.n	801b67e <f_open+0xe6>
					res = FR_DENIED;
 801b676:	2307      	movs	r3, #7
 801b678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b67c:	e007      	b.n	801b68e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b67e:	79fb      	ldrb	r3, [r7, #7]
 801b680:	f003 0304 	and.w	r3, r3, #4
 801b684:	2b00      	cmp	r3, #0
 801b686:	d002      	beq.n	801b68e <f_open+0xf6>
 801b688:	2308      	movs	r3, #8
 801b68a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b68e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b692:	2b00      	cmp	r3, #0
 801b694:	d168      	bne.n	801b768 <f_open+0x1d0>
 801b696:	79fb      	ldrb	r3, [r7, #7]
 801b698:	f003 0308 	and.w	r3, r3, #8
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d063      	beq.n	801b768 <f_open+0x1d0>
				dw = GET_FATTIME();
 801b6a0:	f7f8 f916 	bl	80138d0 <get_fattime>
 801b6a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6a8:	330e      	adds	r3, #14
 801b6aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7fd fe27 	bl	8019300 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6b4:	3316      	adds	r3, #22
 801b6b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f7fd fe21 	bl	8019300 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6c0:	330b      	adds	r3, #11
 801b6c2:	2220      	movs	r2, #32
 801b6c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b6c6:	697b      	ldr	r3, [r7, #20]
 801b6c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b6ca:	4611      	mov	r1, r2
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7fe fd75 	bl	801a1bc <ld_clust>
 801b6d2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b6d8:	2200      	movs	r2, #0
 801b6da:	4618      	mov	r0, r3
 801b6dc:	f7fe fd8d 	bl	801a1fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6e2:	331c      	adds	r3, #28
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f7fd fe0a 	bl	8019300 <st_dword>
					fs->wflag = 1;
 801b6ec:	697b      	ldr	r3, [r7, #20]
 801b6ee:	2201      	movs	r2, #1
 801b6f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b6f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d037      	beq.n	801b768 <f_open+0x1d0>
						dw = fs->winsect;
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b6fc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801b6fe:	f107 0318 	add.w	r3, r7, #24
 801b702:	2200      	movs	r2, #0
 801b704:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b706:	4618      	mov	r0, r3
 801b708:	f7fe faa0 	bl	8019c4c <remove_chain>
 801b70c:	4603      	mov	r3, r0
 801b70e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801b712:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b716:	2b00      	cmp	r3, #0
 801b718:	d126      	bne.n	801b768 <f_open+0x1d0>
							res = move_window(fs, dw);
 801b71a:	697b      	ldr	r3, [r7, #20]
 801b71c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b71e:	4618      	mov	r0, r3
 801b720:	f7fe f848 	bl	80197b4 <move_window>
 801b724:	4603      	mov	r3, r0
 801b726:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b72e:	3a01      	subs	r2, #1
 801b730:	611a      	str	r2, [r3, #16]
 801b732:	e019      	b.n	801b768 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b734:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d115      	bne.n	801b768 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b73c:	7fbb      	ldrb	r3, [r7, #30]
 801b73e:	f003 0310 	and.w	r3, r3, #16
 801b742:	2b00      	cmp	r3, #0
 801b744:	d003      	beq.n	801b74e <f_open+0x1b6>
					res = FR_NO_FILE;
 801b746:	2304      	movs	r3, #4
 801b748:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b74c:	e00c      	b.n	801b768 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b74e:	79fb      	ldrb	r3, [r7, #7]
 801b750:	f003 0302 	and.w	r3, r3, #2
 801b754:	2b00      	cmp	r3, #0
 801b756:	d007      	beq.n	801b768 <f_open+0x1d0>
 801b758:	7fbb      	ldrb	r3, [r7, #30]
 801b75a:	f003 0301 	and.w	r3, r3, #1
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d002      	beq.n	801b768 <f_open+0x1d0>
						res = FR_DENIED;
 801b762:	2307      	movs	r3, #7
 801b764:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801b768:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d126      	bne.n	801b7be <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b770:	79fb      	ldrb	r3, [r7, #7]
 801b772:	f003 0308 	and.w	r3, r3, #8
 801b776:	2b00      	cmp	r3, #0
 801b778:	d003      	beq.n	801b782 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801b77a:	79fb      	ldrb	r3, [r7, #7]
 801b77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b780:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801b78a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b790:	79fb      	ldrb	r3, [r7, #7]
 801b792:	2b01      	cmp	r3, #1
 801b794:	bf8c      	ite	hi
 801b796:	2301      	movhi	r3, #1
 801b798:	2300      	movls	r3, #0
 801b79a:	b2db      	uxtb	r3, r3
 801b79c:	461a      	mov	r2, r3
 801b79e:	f107 0318 	add.w	r3, r7, #24
 801b7a2:	4611      	mov	r1, r2
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f7fd fed3 	bl	8019550 <inc_lock>
 801b7aa:	4602      	mov	r2, r0
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	691b      	ldr	r3, [r3, #16]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d102      	bne.n	801b7be <f_open+0x226>
 801b7b8:	2302      	movs	r3, #2
 801b7ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b7be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	f040 8095 	bne.w	801b8f2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7cc:	4611      	mov	r1, r2
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	f7fe fcf4 	bl	801a1bc <ld_clust>
 801b7d4:	4602      	mov	r2, r0
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b7dc:	331c      	adds	r3, #28
 801b7de:	4618      	mov	r0, r3
 801b7e0:	f7fd fd50 	bl	8019284 <ld_dword>
 801b7e4:	4602      	mov	r2, r0
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	2200      	movs	r2, #0
 801b7ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b7f0:	697a      	ldr	r2, [r7, #20]
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b7f6:	697b      	ldr	r3, [r7, #20]
 801b7f8:	88da      	ldrh	r2, [r3, #6]
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	79fa      	ldrb	r2, [r7, #7]
 801b802:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	2200      	movs	r2, #0
 801b808:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	2200      	movs	r2, #0
 801b80e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	2200      	movs	r2, #0
 801b814:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	3330      	adds	r3, #48	@ 0x30
 801b81a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b81e:	2100      	movs	r1, #0
 801b820:	4618      	mov	r0, r3
 801b822:	f7fd fdba 	bl	801939a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b826:	79fb      	ldrb	r3, [r7, #7]
 801b828:	f003 0320 	and.w	r3, r3, #32
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d060      	beq.n	801b8f2 <f_open+0x35a>
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	68db      	ldr	r3, [r3, #12]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d05c      	beq.n	801b8f2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	68da      	ldr	r2, [r3, #12]
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	895b      	ldrh	r3, [r3, #10]
 801b844:	025b      	lsls	r3, r3, #9
 801b846:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	689b      	ldr	r3, [r3, #8]
 801b84c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	68db      	ldr	r3, [r3, #12]
 801b852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b854:	e016      	b.n	801b884 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b85a:	4618      	mov	r0, r3
 801b85c:	f7fe f865 	bl	801992a <get_fat>
 801b860:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801b862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b864:	2b01      	cmp	r3, #1
 801b866:	d802      	bhi.n	801b86e <f_open+0x2d6>
 801b868:	2302      	movs	r3, #2
 801b86a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b86e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b870:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b874:	d102      	bne.n	801b87c <f_open+0x2e4>
 801b876:	2301      	movs	r3, #1
 801b878:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b87c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b87e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b880:	1ad3      	subs	r3, r2, r3
 801b882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b884:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d103      	bne.n	801b894 <f_open+0x2fc>
 801b88c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b890:	429a      	cmp	r2, r3
 801b892:	d8e0      	bhi.n	801b856 <f_open+0x2be>
				}
				fp->clust = clst;
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b898:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b89a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d127      	bne.n	801b8f2 <f_open+0x35a>
 801b8a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d022      	beq.n	801b8f2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b8ac:	697b      	ldr	r3, [r7, #20]
 801b8ae:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f7fe f81b 	bl	80198ec <clust2sect>
 801b8b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b8b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d103      	bne.n	801b8c6 <f_open+0x32e>
						res = FR_INT_ERR;
 801b8be:	2302      	movs	r3, #2
 801b8c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b8c4:	e015      	b.n	801b8f2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b8c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8c8:	0a5a      	lsrs	r2, r3, #9
 801b8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8cc:	441a      	add	r2, r3
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b8d2:	697b      	ldr	r3, [r7, #20]
 801b8d4:	7858      	ldrb	r0, [r3, #1]
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	6a1a      	ldr	r2, [r3, #32]
 801b8e0:	2301      	movs	r3, #1
 801b8e2:	f7fd fc59 	bl	8019198 <disk_read>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d002      	beq.n	801b8f2 <f_open+0x35a>
 801b8ec:	2301      	movs	r3, #1
 801b8ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b8f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d002      	beq.n	801b900 <f_open+0x368>
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b900:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801b904:	4618      	mov	r0, r3
 801b906:	3768      	adds	r7, #104	@ 0x68
 801b908:	46bd      	mov	sp, r7
 801b90a:	bd80      	pop	{r7, pc}

0801b90c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b08c      	sub	sp, #48	@ 0x30
 801b910:	af00      	add	r7, sp, #0
 801b912:	60f8      	str	r0, [r7, #12]
 801b914:	60b9      	str	r1, [r7, #8]
 801b916:	607a      	str	r2, [r7, #4]
 801b918:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b91a:	68bb      	ldr	r3, [r7, #8]
 801b91c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b91e:	683b      	ldr	r3, [r7, #0]
 801b920:	2200      	movs	r2, #0
 801b922:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b924:	68fb      	ldr	r3, [r7, #12]
 801b926:	f107 0210 	add.w	r2, r7, #16
 801b92a:	4611      	mov	r1, r2
 801b92c:	4618      	mov	r0, r3
 801b92e:	f7ff fdb7 	bl	801b4a0 <validate>
 801b932:	4603      	mov	r3, r0
 801b934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d107      	bne.n	801b950 <f_write+0x44>
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	7d5b      	ldrb	r3, [r3, #21]
 801b944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801b948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d002      	beq.n	801b956 <f_write+0x4a>
 801b950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b954:	e14b      	b.n	801bbee <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	7d1b      	ldrb	r3, [r3, #20]
 801b95a:	f003 0302 	and.w	r3, r3, #2
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d101      	bne.n	801b966 <f_write+0x5a>
 801b962:	2307      	movs	r3, #7
 801b964:	e143      	b.n	801bbee <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	699a      	ldr	r2, [r3, #24]
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	441a      	add	r2, r3
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	699b      	ldr	r3, [r3, #24]
 801b972:	429a      	cmp	r2, r3
 801b974:	f080 812d 	bcs.w	801bbd2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	699b      	ldr	r3, [r3, #24]
 801b97c:	43db      	mvns	r3, r3
 801b97e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b980:	e127      	b.n	801bbd2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	699b      	ldr	r3, [r3, #24]
 801b986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	f040 80e3 	bne.w	801bb56 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	699b      	ldr	r3, [r3, #24]
 801b994:	0a5b      	lsrs	r3, r3, #9
 801b996:	693a      	ldr	r2, [r7, #16]
 801b998:	8952      	ldrh	r2, [r2, #10]
 801b99a:	3a01      	subs	r2, #1
 801b99c:	4013      	ands	r3, r2
 801b99e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b9a0:	69bb      	ldr	r3, [r7, #24]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d143      	bne.n	801ba2e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	699b      	ldr	r3, [r3, #24]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d10c      	bne.n	801b9c8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	689b      	ldr	r3, [r3, #8]
 801b9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d11a      	bne.n	801b9f0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	2100      	movs	r1, #0
 801b9be:	4618      	mov	r0, r3
 801b9c0:	f7fe f9a9 	bl	8019d16 <create_chain>
 801b9c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b9c6:	e013      	b.n	801b9f0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d007      	beq.n	801b9e0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	699b      	ldr	r3, [r3, #24]
 801b9d4:	4619      	mov	r1, r3
 801b9d6:	68f8      	ldr	r0, [r7, #12]
 801b9d8:	f7fe fa35 	bl	8019e46 <clmt_clust>
 801b9dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b9de:	e007      	b.n	801b9f0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801b9e0:	68fa      	ldr	r2, [r7, #12]
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	69db      	ldr	r3, [r3, #28]
 801b9e6:	4619      	mov	r1, r3
 801b9e8:	4610      	mov	r0, r2
 801b9ea:	f7fe f994 	bl	8019d16 <create_chain>
 801b9ee:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	f000 80f2 	beq.w	801bbdc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9fa:	2b01      	cmp	r3, #1
 801b9fc:	d104      	bne.n	801ba08 <f_write+0xfc>
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	2202      	movs	r2, #2
 801ba02:	755a      	strb	r2, [r3, #21]
 801ba04:	2302      	movs	r3, #2
 801ba06:	e0f2      	b.n	801bbee <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba0e:	d104      	bne.n	801ba1a <f_write+0x10e>
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	2201      	movs	r2, #1
 801ba14:	755a      	strb	r2, [r3, #21]
 801ba16:	2301      	movs	r3, #1
 801ba18:	e0e9      	b.n	801bbee <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba1e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	689b      	ldr	r3, [r3, #8]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d102      	bne.n	801ba2e <f_write+0x122>
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba2c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	7d1b      	ldrb	r3, [r3, #20]
 801ba32:	b25b      	sxtb	r3, r3
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	da18      	bge.n	801ba6a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba38:	693b      	ldr	r3, [r7, #16]
 801ba3a:	7858      	ldrb	r0, [r3, #1]
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	6a1a      	ldr	r2, [r3, #32]
 801ba46:	2301      	movs	r3, #1
 801ba48:	f7fd fbc6 	bl	80191d8 <disk_write>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d004      	beq.n	801ba5c <f_write+0x150>
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	2201      	movs	r2, #1
 801ba56:	755a      	strb	r2, [r3, #21]
 801ba58:	2301      	movs	r3, #1
 801ba5a:	e0c8      	b.n	801bbee <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	7d1b      	ldrb	r3, [r3, #20]
 801ba60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ba64:	b2da      	uxtb	r2, r3
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ba6a:	693a      	ldr	r2, [r7, #16]
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	69db      	ldr	r3, [r3, #28]
 801ba70:	4619      	mov	r1, r3
 801ba72:	4610      	mov	r0, r2
 801ba74:	f7fd ff3a 	bl	80198ec <clust2sect>
 801ba78:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d104      	bne.n	801ba8a <f_write+0x17e>
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	2202      	movs	r2, #2
 801ba84:	755a      	strb	r2, [r3, #21]
 801ba86:	2302      	movs	r3, #2
 801ba88:	e0b1      	b.n	801bbee <f_write+0x2e2>
			sect += csect;
 801ba8a:	697a      	ldr	r2, [r7, #20]
 801ba8c:	69bb      	ldr	r3, [r7, #24]
 801ba8e:	4413      	add	r3, r2
 801ba90:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	0a5b      	lsrs	r3, r3, #9
 801ba96:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801ba98:	6a3b      	ldr	r3, [r7, #32]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d03c      	beq.n	801bb18 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ba9e:	69ba      	ldr	r2, [r7, #24]
 801baa0:	6a3b      	ldr	r3, [r7, #32]
 801baa2:	4413      	add	r3, r2
 801baa4:	693a      	ldr	r2, [r7, #16]
 801baa6:	8952      	ldrh	r2, [r2, #10]
 801baa8:	4293      	cmp	r3, r2
 801baaa:	d905      	bls.n	801bab8 <f_write+0x1ac>
					cc = fs->csize - csect;
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	895b      	ldrh	r3, [r3, #10]
 801bab0:	461a      	mov	r2, r3
 801bab2:	69bb      	ldr	r3, [r7, #24]
 801bab4:	1ad3      	subs	r3, r2, r3
 801bab6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801bab8:	693b      	ldr	r3, [r7, #16]
 801baba:	7858      	ldrb	r0, [r3, #1]
 801babc:	6a3b      	ldr	r3, [r7, #32]
 801babe:	697a      	ldr	r2, [r7, #20]
 801bac0:	69f9      	ldr	r1, [r7, #28]
 801bac2:	f7fd fb89 	bl	80191d8 <disk_write>
 801bac6:	4603      	mov	r3, r0
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d004      	beq.n	801bad6 <f_write+0x1ca>
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2201      	movs	r2, #1
 801bad0:	755a      	strb	r2, [r3, #21]
 801bad2:	2301      	movs	r3, #1
 801bad4:	e08b      	b.n	801bbee <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	6a1a      	ldr	r2, [r3, #32]
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	1ad3      	subs	r3, r2, r3
 801bade:	6a3a      	ldr	r2, [r7, #32]
 801bae0:	429a      	cmp	r2, r3
 801bae2:	d915      	bls.n	801bb10 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	6a1a      	ldr	r2, [r3, #32]
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	1ad3      	subs	r3, r2, r3
 801baf2:	025b      	lsls	r3, r3, #9
 801baf4:	69fa      	ldr	r2, [r7, #28]
 801baf6:	4413      	add	r3, r2
 801baf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bafc:	4619      	mov	r1, r3
 801bafe:	f7fd fc2b 	bl	8019358 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	7d1b      	ldrb	r3, [r3, #20]
 801bb06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb0a:	b2da      	uxtb	r2, r3
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801bb10:	6a3b      	ldr	r3, [r7, #32]
 801bb12:	025b      	lsls	r3, r3, #9
 801bb14:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801bb16:	e03f      	b.n	801bb98 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	6a1b      	ldr	r3, [r3, #32]
 801bb1c:	697a      	ldr	r2, [r7, #20]
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	d016      	beq.n	801bb50 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	699a      	ldr	r2, [r3, #24]
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb2a:	429a      	cmp	r2, r3
 801bb2c:	d210      	bcs.n	801bb50 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801bb2e:	693b      	ldr	r3, [r7, #16]
 801bb30:	7858      	ldrb	r0, [r3, #1]
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bb38:	2301      	movs	r3, #1
 801bb3a:	697a      	ldr	r2, [r7, #20]
 801bb3c:	f7fd fb2c 	bl	8019198 <disk_read>
 801bb40:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d004      	beq.n	801bb50 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	2201      	movs	r2, #1
 801bb4a:	755a      	strb	r2, [r3, #21]
 801bb4c:	2301      	movs	r3, #1
 801bb4e:	e04e      	b.n	801bbee <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	697a      	ldr	r2, [r7, #20]
 801bb54:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	699b      	ldr	r3, [r3, #24]
 801bb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb5e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801bb62:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801bb64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	d901      	bls.n	801bb70 <f_write+0x264>
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	699b      	ldr	r3, [r3, #24]
 801bb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb7e:	4413      	add	r3, r2
 801bb80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb82:	69f9      	ldr	r1, [r7, #28]
 801bb84:	4618      	mov	r0, r3
 801bb86:	f7fd fbe7 	bl	8019358 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	7d1b      	ldrb	r3, [r3, #20]
 801bb8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bb92:	b2da      	uxtb	r2, r3
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801bb98:	69fa      	ldr	r2, [r7, #28]
 801bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb9c:	4413      	add	r3, r2
 801bb9e:	61fb      	str	r3, [r7, #28]
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	699a      	ldr	r2, [r3, #24]
 801bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bba6:	441a      	add	r2, r3
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	619a      	str	r2, [r3, #24]
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	68da      	ldr	r2, [r3, #12]
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	699b      	ldr	r3, [r3, #24]
 801bbb4:	429a      	cmp	r2, r3
 801bbb6:	bf38      	it	cc
 801bbb8:	461a      	movcc	r2, r3
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	60da      	str	r2, [r3, #12]
 801bbbe:	683b      	ldr	r3, [r7, #0]
 801bbc0:	681a      	ldr	r2, [r3, #0]
 801bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc4:	441a      	add	r2, r3
 801bbc6:	683b      	ldr	r3, [r7, #0]
 801bbc8:	601a      	str	r2, [r3, #0]
 801bbca:	687a      	ldr	r2, [r7, #4]
 801bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbce:	1ad3      	subs	r3, r2, r3
 801bbd0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	f47f aed4 	bne.w	801b982 <f_write+0x76>
 801bbda:	e000      	b.n	801bbde <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801bbdc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	7d1b      	ldrb	r3, [r3, #20]
 801bbe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bbe6:	b2da      	uxtb	r2, r3
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801bbec:	2300      	movs	r3, #0
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	3730      	adds	r7, #48	@ 0x30
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	bd80      	pop	{r7, pc}

0801bbf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801bbf6:	b580      	push	{r7, lr}
 801bbf8:	b086      	sub	sp, #24
 801bbfa:	af00      	add	r7, sp, #0
 801bbfc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	f107 0208 	add.w	r2, r7, #8
 801bc04:	4611      	mov	r1, r2
 801bc06:	4618      	mov	r0, r3
 801bc08:	f7ff fc4a 	bl	801b4a0 <validate>
 801bc0c:	4603      	mov	r3, r0
 801bc0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc10:	7dfb      	ldrb	r3, [r7, #23]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d168      	bne.n	801bce8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	7d1b      	ldrb	r3, [r3, #20]
 801bc1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d062      	beq.n	801bce8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	7d1b      	ldrb	r3, [r3, #20]
 801bc26:	b25b      	sxtb	r3, r3
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	da15      	bge.n	801bc58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	7858      	ldrb	r0, [r3, #1]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	6a1a      	ldr	r2, [r3, #32]
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	f7fd facc 	bl	80191d8 <disk_write>
 801bc40:	4603      	mov	r3, r0
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d001      	beq.n	801bc4a <f_sync+0x54>
 801bc46:	2301      	movs	r3, #1
 801bc48:	e04f      	b.n	801bcea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	7d1b      	ldrb	r3, [r3, #20]
 801bc4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bc52:	b2da      	uxtb	r2, r3
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801bc58:	f7f7 fe3a 	bl	80138d0 <get_fattime>
 801bc5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801bc5e:	68ba      	ldr	r2, [r7, #8]
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc64:	4619      	mov	r1, r3
 801bc66:	4610      	mov	r0, r2
 801bc68:	f7fd fda4 	bl	80197b4 <move_window>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801bc70:	7dfb      	ldrb	r3, [r7, #23]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d138      	bne.n	801bce8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	330b      	adds	r3, #11
 801bc80:	781a      	ldrb	r2, [r3, #0]
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	330b      	adds	r3, #11
 801bc86:	f042 0220 	orr.w	r2, r2, #32
 801bc8a:	b2d2      	uxtb	r2, r2
 801bc8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	6818      	ldr	r0, [r3, #0]
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	689b      	ldr	r3, [r3, #8]
 801bc96:	461a      	mov	r2, r3
 801bc98:	68f9      	ldr	r1, [r7, #12]
 801bc9a:	f7fe faae 	bl	801a1fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	f103 021c 	add.w	r2, r3, #28
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	68db      	ldr	r3, [r3, #12]
 801bca8:	4619      	mov	r1, r3
 801bcaa:	4610      	mov	r0, r2
 801bcac:	f7fd fb28 	bl	8019300 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	3316      	adds	r3, #22
 801bcb4:	6939      	ldr	r1, [r7, #16]
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	f7fd fb22 	bl	8019300 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	3312      	adds	r3, #18
 801bcc0:	2100      	movs	r1, #0
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	f7fd fb01 	bl	80192ca <st_word>
					fs->wflag = 1;
 801bcc8:	68bb      	ldr	r3, [r7, #8]
 801bcca:	2201      	movs	r2, #1
 801bccc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801bcce:	68bb      	ldr	r3, [r7, #8]
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	f7fd fd9d 	bl	8019810 <sync_fs>
 801bcd6:	4603      	mov	r3, r0
 801bcd8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	7d1b      	ldrb	r3, [r3, #20]
 801bcde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bce2:	b2da      	uxtb	r2, r3
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801bce8:	7dfb      	ldrb	r3, [r7, #23]
}
 801bcea:	4618      	mov	r0, r3
 801bcec:	3718      	adds	r7, #24
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}

0801bcf2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801bcf2:	b580      	push	{r7, lr}
 801bcf4:	b084      	sub	sp, #16
 801bcf6:	af00      	add	r7, sp, #0
 801bcf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801bcfa:	6878      	ldr	r0, [r7, #4]
 801bcfc:	f7ff ff7b 	bl	801bbf6 <f_sync>
 801bd00:	4603      	mov	r3, r0
 801bd02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801bd04:	7bfb      	ldrb	r3, [r7, #15]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d118      	bne.n	801bd3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	f107 0208 	add.w	r2, r7, #8
 801bd10:	4611      	mov	r1, r2
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7ff fbc4 	bl	801b4a0 <validate>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bd1c:	7bfb      	ldrb	r3, [r7, #15]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d10c      	bne.n	801bd3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	691b      	ldr	r3, [r3, #16]
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7fd fca0 	bl	801966c <dec_lock>
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801bd30:	7bfb      	ldrb	r3, [r7, #15]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d102      	bne.n	801bd3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2200      	movs	r2, #0
 801bd3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801bd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd3e:	4618      	mov	r0, r3
 801bd40:	3710      	adds	r7, #16
 801bd42:	46bd      	mov	sp, r7
 801bd44:	bd80      	pop	{r7, pc}

0801bd46 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801bd46:	b580      	push	{r7, lr}
 801bd48:	b090      	sub	sp, #64	@ 0x40
 801bd4a:	af00      	add	r7, sp, #0
 801bd4c:	6078      	str	r0, [r7, #4]
 801bd4e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801bd50:	f107 0108 	add.w	r1, r7, #8
 801bd54:	1d3b      	adds	r3, r7, #4
 801bd56:	2200      	movs	r2, #0
 801bd58:	4618      	mov	r0, r3
 801bd5a:	f7ff f951 	bl	801b000 <find_volume>
 801bd5e:	4603      	mov	r3, r0
 801bd60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801bd64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d11f      	bne.n	801bdac <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bd6c:	687a      	ldr	r2, [r7, #4]
 801bd6e:	f107 0308 	add.w	r3, r7, #8
 801bd72:	4611      	mov	r1, r2
 801bd74:	4618      	mov	r0, r3
 801bd76:	f7ff f837 	bl	801ade8 <follow_path>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801bd80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d111      	bne.n	801bdac <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801bd88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bd8c:	b25b      	sxtb	r3, r3
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	da03      	bge.n	801bd9a <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bd92:	2306      	movs	r3, #6
 801bd94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801bd98:	e008      	b.n	801bdac <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bd9a:	683b      	ldr	r3, [r7, #0]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d005      	beq.n	801bdac <f_stat+0x66>
 801bda0:	f107 0308 	add.w	r3, r7, #8
 801bda4:	6839      	ldr	r1, [r7, #0]
 801bda6:	4618      	mov	r0, r3
 801bda8:	f7fe fd88 	bl	801a8bc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801bdac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	3740      	adds	r7, #64	@ 0x40
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}

0801bdb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801bdb8:	b480      	push	{r7}
 801bdba:	b087      	sub	sp, #28
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	60f8      	str	r0, [r7, #12]
 801bdc0:	60b9      	str	r1, [r7, #8]
 801bdc2:	4613      	mov	r3, r2
 801bdc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801bdc6:	2301      	movs	r3, #1
 801bdc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801bdca:	2300      	movs	r3, #0
 801bdcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801bdce:	4b1f      	ldr	r3, [pc, #124]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801bdd0:	7a5b      	ldrb	r3, [r3, #9]
 801bdd2:	b2db      	uxtb	r3, r3
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d131      	bne.n	801be3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801bdd8:	4b1c      	ldr	r3, [pc, #112]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801bdda:	7a5b      	ldrb	r3, [r3, #9]
 801bddc:	b2db      	uxtb	r3, r3
 801bdde:	461a      	mov	r2, r3
 801bde0:	4b1a      	ldr	r3, [pc, #104]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801bde2:	2100      	movs	r1, #0
 801bde4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801bde6:	4b19      	ldr	r3, [pc, #100]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801bde8:	7a5b      	ldrb	r3, [r3, #9]
 801bdea:	b2db      	uxtb	r3, r3
 801bdec:	4a17      	ldr	r2, [pc, #92]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801bdee:	009b      	lsls	r3, r3, #2
 801bdf0:	4413      	add	r3, r2
 801bdf2:	68fa      	ldr	r2, [r7, #12]
 801bdf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801bdf6:	4b15      	ldr	r3, [pc, #84]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801bdf8:	7a5b      	ldrb	r3, [r3, #9]
 801bdfa:	b2db      	uxtb	r3, r3
 801bdfc:	461a      	mov	r2, r3
 801bdfe:	4b13      	ldr	r3, [pc, #76]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801be00:	4413      	add	r3, r2
 801be02:	79fa      	ldrb	r2, [r7, #7]
 801be04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801be06:	4b11      	ldr	r3, [pc, #68]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801be08:	7a5b      	ldrb	r3, [r3, #9]
 801be0a:	b2db      	uxtb	r3, r3
 801be0c:	1c5a      	adds	r2, r3, #1
 801be0e:	b2d1      	uxtb	r1, r2
 801be10:	4a0e      	ldr	r2, [pc, #56]	@ (801be4c <FATFS_LinkDriverEx+0x94>)
 801be12:	7251      	strb	r1, [r2, #9]
 801be14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801be16:	7dbb      	ldrb	r3, [r7, #22]
 801be18:	3330      	adds	r3, #48	@ 0x30
 801be1a:	b2da      	uxtb	r2, r3
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801be20:	68bb      	ldr	r3, [r7, #8]
 801be22:	3301      	adds	r3, #1
 801be24:	223a      	movs	r2, #58	@ 0x3a
 801be26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	3302      	adds	r3, #2
 801be2c:	222f      	movs	r2, #47	@ 0x2f
 801be2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	3303      	adds	r3, #3
 801be34:	2200      	movs	r2, #0
 801be36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801be38:	2300      	movs	r3, #0
 801be3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 801be3e:	4618      	mov	r0, r3
 801be40:	371c      	adds	r7, #28
 801be42:	46bd      	mov	sp, r7
 801be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be48:	4770      	bx	lr
 801be4a:	bf00      	nop
 801be4c:	20001d90 	.word	0x20001d90

0801be50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b082      	sub	sp, #8
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
 801be58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801be5a:	2200      	movs	r2, #0
 801be5c:	6839      	ldr	r1, [r7, #0]
 801be5e:	6878      	ldr	r0, [r7, #4]
 801be60:	f7ff ffaa 	bl	801bdb8 <FATFS_LinkDriverEx>
 801be64:	4603      	mov	r3, r0
}
 801be66:	4618      	mov	r0, r3
 801be68:	3708      	adds	r7, #8
 801be6a:	46bd      	mov	sp, r7
 801be6c:	bd80      	pop	{r7, pc}
	...

0801be70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801be70:	b480      	push	{r7}
 801be72:	b085      	sub	sp, #20
 801be74:	af00      	add	r7, sp, #0
 801be76:	4603      	mov	r3, r0
 801be78:	6039      	str	r1, [r7, #0]
 801be7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801be7c:	88fb      	ldrh	r3, [r7, #6]
 801be7e:	2b7f      	cmp	r3, #127	@ 0x7f
 801be80:	d802      	bhi.n	801be88 <ff_convert+0x18>
		c = chr;
 801be82:	88fb      	ldrh	r3, [r7, #6]
 801be84:	81fb      	strh	r3, [r7, #14]
 801be86:	e025      	b.n	801bed4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801be88:	683b      	ldr	r3, [r7, #0]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d00b      	beq.n	801bea6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801be8e:	88fb      	ldrh	r3, [r7, #6]
 801be90:	2bff      	cmp	r3, #255	@ 0xff
 801be92:	d805      	bhi.n	801bea0 <ff_convert+0x30>
 801be94:	88fb      	ldrh	r3, [r7, #6]
 801be96:	3b80      	subs	r3, #128	@ 0x80
 801be98:	4a12      	ldr	r2, [pc, #72]	@ (801bee4 <ff_convert+0x74>)
 801be9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801be9e:	e000      	b.n	801bea2 <ff_convert+0x32>
 801bea0:	2300      	movs	r3, #0
 801bea2:	81fb      	strh	r3, [r7, #14]
 801bea4:	e016      	b.n	801bed4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801bea6:	2300      	movs	r3, #0
 801bea8:	81fb      	strh	r3, [r7, #14]
 801beaa:	e009      	b.n	801bec0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801beac:	89fb      	ldrh	r3, [r7, #14]
 801beae:	4a0d      	ldr	r2, [pc, #52]	@ (801bee4 <ff_convert+0x74>)
 801beb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801beb4:	88fa      	ldrh	r2, [r7, #6]
 801beb6:	429a      	cmp	r2, r3
 801beb8:	d006      	beq.n	801bec8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801beba:	89fb      	ldrh	r3, [r7, #14]
 801bebc:	3301      	adds	r3, #1
 801bebe:	81fb      	strh	r3, [r7, #14]
 801bec0:	89fb      	ldrh	r3, [r7, #14]
 801bec2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bec4:	d9f2      	bls.n	801beac <ff_convert+0x3c>
 801bec6:	e000      	b.n	801beca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801bec8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801beca:	89fb      	ldrh	r3, [r7, #14]
 801becc:	3380      	adds	r3, #128	@ 0x80
 801bece:	b29b      	uxth	r3, r3
 801bed0:	b2db      	uxtb	r3, r3
 801bed2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801bed4:	89fb      	ldrh	r3, [r7, #14]
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	3714      	adds	r7, #20
 801beda:	46bd      	mov	sp, r7
 801bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee0:	4770      	bx	lr
 801bee2:	bf00      	nop
 801bee4:	08025068 	.word	0x08025068

0801bee8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801bee8:	b480      	push	{r7}
 801beea:	b087      	sub	sp, #28
 801beec:	af00      	add	r7, sp, #0
 801beee:	4603      	mov	r3, r0
 801bef0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801bef2:	88fb      	ldrh	r3, [r7, #6]
 801bef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bef8:	d201      	bcs.n	801befe <ff_wtoupper+0x16>
 801befa:	4b3e      	ldr	r3, [pc, #248]	@ (801bff4 <ff_wtoupper+0x10c>)
 801befc:	e000      	b.n	801bf00 <ff_wtoupper+0x18>
 801befe:	4b3e      	ldr	r3, [pc, #248]	@ (801bff8 <ff_wtoupper+0x110>)
 801bf00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801bf02:	697b      	ldr	r3, [r7, #20]
 801bf04:	1c9a      	adds	r2, r3, #2
 801bf06:	617a      	str	r2, [r7, #20]
 801bf08:	881b      	ldrh	r3, [r3, #0]
 801bf0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801bf0c:	8a7b      	ldrh	r3, [r7, #18]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d068      	beq.n	801bfe4 <ff_wtoupper+0xfc>
 801bf12:	88fa      	ldrh	r2, [r7, #6]
 801bf14:	8a7b      	ldrh	r3, [r7, #18]
 801bf16:	429a      	cmp	r2, r3
 801bf18:	d364      	bcc.n	801bfe4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801bf1a:	697b      	ldr	r3, [r7, #20]
 801bf1c:	1c9a      	adds	r2, r3, #2
 801bf1e:	617a      	str	r2, [r7, #20]
 801bf20:	881b      	ldrh	r3, [r3, #0]
 801bf22:	823b      	strh	r3, [r7, #16]
 801bf24:	8a3b      	ldrh	r3, [r7, #16]
 801bf26:	0a1b      	lsrs	r3, r3, #8
 801bf28:	81fb      	strh	r3, [r7, #14]
 801bf2a:	8a3b      	ldrh	r3, [r7, #16]
 801bf2c:	b2db      	uxtb	r3, r3
 801bf2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801bf30:	88fa      	ldrh	r2, [r7, #6]
 801bf32:	8a79      	ldrh	r1, [r7, #18]
 801bf34:	8a3b      	ldrh	r3, [r7, #16]
 801bf36:	440b      	add	r3, r1
 801bf38:	429a      	cmp	r2, r3
 801bf3a:	da49      	bge.n	801bfd0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bf3c:	89fb      	ldrh	r3, [r7, #14]
 801bf3e:	2b08      	cmp	r3, #8
 801bf40:	d84f      	bhi.n	801bfe2 <ff_wtoupper+0xfa>
 801bf42:	a201      	add	r2, pc, #4	@ (adr r2, 801bf48 <ff_wtoupper+0x60>)
 801bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf48:	0801bf6d 	.word	0x0801bf6d
 801bf4c:	0801bf7f 	.word	0x0801bf7f
 801bf50:	0801bf95 	.word	0x0801bf95
 801bf54:	0801bf9d 	.word	0x0801bf9d
 801bf58:	0801bfa5 	.word	0x0801bfa5
 801bf5c:	0801bfad 	.word	0x0801bfad
 801bf60:	0801bfb5 	.word	0x0801bfb5
 801bf64:	0801bfbd 	.word	0x0801bfbd
 801bf68:	0801bfc5 	.word	0x0801bfc5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bf6c:	88fa      	ldrh	r2, [r7, #6]
 801bf6e:	8a7b      	ldrh	r3, [r7, #18]
 801bf70:	1ad3      	subs	r3, r2, r3
 801bf72:	005b      	lsls	r3, r3, #1
 801bf74:	697a      	ldr	r2, [r7, #20]
 801bf76:	4413      	add	r3, r2
 801bf78:	881b      	ldrh	r3, [r3, #0]
 801bf7a:	80fb      	strh	r3, [r7, #6]
 801bf7c:	e027      	b.n	801bfce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bf7e:	88fa      	ldrh	r2, [r7, #6]
 801bf80:	8a7b      	ldrh	r3, [r7, #18]
 801bf82:	1ad3      	subs	r3, r2, r3
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	f003 0301 	and.w	r3, r3, #1
 801bf8a:	b29b      	uxth	r3, r3
 801bf8c:	88fa      	ldrh	r2, [r7, #6]
 801bf8e:	1ad3      	subs	r3, r2, r3
 801bf90:	80fb      	strh	r3, [r7, #6]
 801bf92:	e01c      	b.n	801bfce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bf94:	88fb      	ldrh	r3, [r7, #6]
 801bf96:	3b10      	subs	r3, #16
 801bf98:	80fb      	strh	r3, [r7, #6]
 801bf9a:	e018      	b.n	801bfce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bf9c:	88fb      	ldrh	r3, [r7, #6]
 801bf9e:	3b20      	subs	r3, #32
 801bfa0:	80fb      	strh	r3, [r7, #6]
 801bfa2:	e014      	b.n	801bfce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bfa4:	88fb      	ldrh	r3, [r7, #6]
 801bfa6:	3b30      	subs	r3, #48	@ 0x30
 801bfa8:	80fb      	strh	r3, [r7, #6]
 801bfaa:	e010      	b.n	801bfce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bfac:	88fb      	ldrh	r3, [r7, #6]
 801bfae:	3b1a      	subs	r3, #26
 801bfb0:	80fb      	strh	r3, [r7, #6]
 801bfb2:	e00c      	b.n	801bfce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801bfb4:	88fb      	ldrh	r3, [r7, #6]
 801bfb6:	3308      	adds	r3, #8
 801bfb8:	80fb      	strh	r3, [r7, #6]
 801bfba:	e008      	b.n	801bfce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801bfbc:	88fb      	ldrh	r3, [r7, #6]
 801bfbe:	3b50      	subs	r3, #80	@ 0x50
 801bfc0:	80fb      	strh	r3, [r7, #6]
 801bfc2:	e004      	b.n	801bfce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801bfc4:	88fb      	ldrh	r3, [r7, #6]
 801bfc6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801bfca:	80fb      	strh	r3, [r7, #6]
 801bfcc:	bf00      	nop
			}
			break;
 801bfce:	e008      	b.n	801bfe2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801bfd0:	89fb      	ldrh	r3, [r7, #14]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d195      	bne.n	801bf02 <ff_wtoupper+0x1a>
 801bfd6:	8a3b      	ldrh	r3, [r7, #16]
 801bfd8:	005b      	lsls	r3, r3, #1
 801bfda:	697a      	ldr	r2, [r7, #20]
 801bfdc:	4413      	add	r3, r2
 801bfde:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801bfe0:	e78f      	b.n	801bf02 <ff_wtoupper+0x1a>
			break;
 801bfe2:	bf00      	nop
	}

	return chr;
 801bfe4:	88fb      	ldrh	r3, [r7, #6]
}
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	371c      	adds	r7, #28
 801bfea:	46bd      	mov	sp, r7
 801bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff0:	4770      	bx	lr
 801bff2:	bf00      	nop
 801bff4:	08025168 	.word	0x08025168
 801bff8:	0802535c 	.word	0x0802535c

0801bffc <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b082      	sub	sp, #8
 801c000:	af00      	add	r7, sp, #0
 801c002:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801c004:	2201      	movs	r2, #1
 801c006:	6879      	ldr	r1, [r7, #4]
 801c008:	480e      	ldr	r0, [pc, #56]	@ (801c044 <Mount_SD+0x48>)
 801c00a:	f7ff fa7f 	bl	801b50c <f_mount>
 801c00e:	4603      	mov	r3, r0
 801c010:	461a      	mov	r2, r3
 801c012:	4b0d      	ldr	r3, [pc, #52]	@ (801c048 <Mount_SD+0x4c>)
 801c014:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c016:	4b0c      	ldr	r3, [pc, #48]	@ (801c048 <Mount_SD+0x4c>)
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d006      	beq.n	801c02c <Mount_SD+0x30>
		if (sdioPrints)
 801c01e:	2300      	movs	r3, #0
 801c020:	2b00      	cmp	r3, #0
 801c022:	d009      	beq.n	801c038 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801c024:	4809      	ldr	r0, [pc, #36]	@ (801c04c <Mount_SD+0x50>)
 801c026:	f002 fd03 	bl	801ea30 <puts>
 801c02a:	e005      	b.n	801c038 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801c02c:	2300      	movs	r3, #0
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d002      	beq.n	801c038 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801c032:	4807      	ldr	r0, [pc, #28]	@ (801c050 <Mount_SD+0x54>)
 801c034:	f002 fcfc 	bl	801ea30 <puts>

	return fresult;
 801c038:	4b03      	ldr	r3, [pc, #12]	@ (801c048 <Mount_SD+0x4c>)
 801c03a:	781b      	ldrb	r3, [r3, #0]
}
 801c03c:	4618      	mov	r0, r3
 801c03e:	3708      	adds	r7, #8
 801c040:	46bd      	mov	sp, r7
 801c042:	bd80      	pop	{r7, pc}
 801c044:	20001d9c 	.word	0x20001d9c
 801c048:	20002318 	.word	0x20002318
 801c04c:	080246f4 	.word	0x080246f4
 801c050:	08024714 	.word	0x08024714

0801c054 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801c054:	b580      	push	{r7, lr}
 801c056:	b082      	sub	sp, #8
 801c058:	af00      	add	r7, sp, #0
 801c05a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801c05c:	2201      	movs	r2, #1
 801c05e:	6879      	ldr	r1, [r7, #4]
 801c060:	2000      	movs	r0, #0
 801c062:	f7ff fa53 	bl	801b50c <f_mount>
 801c066:	4603      	mov	r3, r0
 801c068:	461a      	mov	r2, r3
 801c06a:	4b0b      	ldr	r3, [pc, #44]	@ (801c098 <Unmount_SD+0x44>)
 801c06c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c06e:	4b0a      	ldr	r3, [pc, #40]	@ (801c098 <Unmount_SD+0x44>)
 801c070:	781b      	ldrb	r3, [r3, #0]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d106      	bne.n	801c084 <Unmount_SD+0x30>
		if (sdioPrints)
 801c076:	2300      	movs	r3, #0
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d009      	beq.n	801c090 <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801c07c:	4807      	ldr	r0, [pc, #28]	@ (801c09c <Unmount_SD+0x48>)
 801c07e:	f002 fcd7 	bl	801ea30 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801c082:	e005      	b.n	801c090 <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801c084:	2300      	movs	r3, #0
 801c086:	2b00      	cmp	r3, #0
 801c088:	d002      	beq.n	801c090 <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801c08a:	4805      	ldr	r0, [pc, #20]	@ (801c0a0 <Unmount_SD+0x4c>)
 801c08c:	f002 fcd0 	bl	801ea30 <puts>
}
 801c090:	bf00      	nop
 801c092:	3708      	adds	r7, #8
 801c094:	46bd      	mov	sp, r7
 801c096:	bd80      	pop	{r7, pc}
 801c098:	20002318 	.word	0x20002318
 801c09c:	08024734 	.word	0x08024734
 801c0a0:	08024758 	.word	0x08024758

0801c0a4 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b0a8      	sub	sp, #160	@ 0xa0
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801c0ac:	4941      	ldr	r1, [pc, #260]	@ (801c1b4 <Create_File+0x110>)
 801c0ae:	6878      	ldr	r0, [r7, #4]
 801c0b0:	f7ff fe49 	bl	801bd46 <f_stat>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	461a      	mov	r2, r3
 801c0b8:	4b3f      	ldr	r3, [pc, #252]	@ (801c1b8 <Create_File+0x114>)
 801c0ba:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c0bc:	4b3e      	ldr	r3, [pc, #248]	@ (801c1b8 <Create_File+0x114>)
 801c0be:	781b      	ldrb	r3, [r3, #0]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d114      	bne.n	801c0ee <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801c0c4:	4b3d      	ldr	r3, [pc, #244]	@ (801c1bc <Create_File+0x118>)
 801c0c6:	2201      	movs	r2, #1
 801c0c8:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801c0ca:	f107 0308 	add.w	r3, r7, #8
 801c0ce:	687a      	ldr	r2, [r7, #4]
 801c0d0:	493b      	ldr	r1, [pc, #236]	@ (801c1c0 <Create_File+0x11c>)
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	f002 fcb4 	bl	801ea40 <siprintf>
				name);
		if (sdioPrints)
 801c0d8:	2300      	movs	r3, #0
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d004      	beq.n	801c0e8 <Create_File+0x44>
			printf(buf);
 801c0de:	f107 0308 	add.w	r3, r7, #8
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f002 fc3c 	bl	801e960 <iprintf>

		return fresult;
 801c0e8:	4b33      	ldr	r3, [pc, #204]	@ (801c1b8 <Create_File+0x114>)
 801c0ea:	781b      	ldrb	r3, [r3, #0]
 801c0ec:	e05d      	b.n	801c1aa <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801c0ee:	220b      	movs	r2, #11
 801c0f0:	6879      	ldr	r1, [r7, #4]
 801c0f2:	4834      	ldr	r0, [pc, #208]	@ (801c1c4 <Create_File+0x120>)
 801c0f4:	f7ff fa50 	bl	801b598 <f_open>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	461a      	mov	r2, r3
 801c0fc:	4b2e      	ldr	r3, [pc, #184]	@ (801c1b8 <Create_File+0x114>)
 801c0fe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c100:	4b2d      	ldr	r3, [pc, #180]	@ (801c1b8 <Create_File+0x114>)
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d013      	beq.n	801c130 <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801c108:	4b2b      	ldr	r3, [pc, #172]	@ (801c1b8 <Create_File+0x114>)
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	461a      	mov	r2, r3
 801c10e:	f107 0008 	add.w	r0, r7, #8
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	492c      	ldr	r1, [pc, #176]	@ (801c1c8 <Create_File+0x124>)
 801c116:	f002 fc93 	bl	801ea40 <siprintf>
					name);
			if (sdioPrints)
 801c11a:	2300      	movs	r3, #0
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d004      	beq.n	801c12a <Create_File+0x86>
				printf(buf);
 801c120:	f107 0308 	add.w	r3, r7, #8
 801c124:	4618      	mov	r0, r3
 801c126:	f002 fc1b 	bl	801e960 <iprintf>

			return fresult;
 801c12a:	4b23      	ldr	r3, [pc, #140]	@ (801c1b8 <Create_File+0x114>)
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	e03c      	b.n	801c1aa <Create_File+0x106>
		} else {

			sprintf(buf,
 801c130:	f107 0308 	add.w	r3, r7, #8
 801c134:	687a      	ldr	r2, [r7, #4]
 801c136:	4925      	ldr	r1, [pc, #148]	@ (801c1cc <Create_File+0x128>)
 801c138:	4618      	mov	r0, r3
 801c13a:	f002 fc81 	bl	801ea40 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801c13e:	2300      	movs	r3, #0
 801c140:	2b00      	cmp	r3, #0
 801c142:	d004      	beq.n	801c14e <Create_File+0xaa>
				printf(buf);
 801c144:	f107 0308 	add.w	r3, r7, #8
 801c148:	4618      	mov	r0, r3
 801c14a:	f002 fc09 	bl	801e960 <iprintf>

		}

		fresult = f_close(&fil);
 801c14e:	481d      	ldr	r0, [pc, #116]	@ (801c1c4 <Create_File+0x120>)
 801c150:	f7ff fdcf 	bl	801bcf2 <f_close>
 801c154:	4603      	mov	r3, r0
 801c156:	461a      	mov	r2, r3
 801c158:	4b17      	ldr	r3, [pc, #92]	@ (801c1b8 <Create_File+0x114>)
 801c15a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c15c:	4b16      	ldr	r3, [pc, #88]	@ (801c1b8 <Create_File+0x114>)
 801c15e:	781b      	ldrb	r3, [r3, #0]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d011      	beq.n	801c188 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801c164:	4b14      	ldr	r3, [pc, #80]	@ (801c1b8 <Create_File+0x114>)
 801c166:	781b      	ldrb	r3, [r3, #0]
 801c168:	461a      	mov	r2, r3
 801c16a:	f107 0008 	add.w	r0, r7, #8
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	4917      	ldr	r1, [pc, #92]	@ (801c1d0 <Create_File+0x12c>)
 801c172:	f002 fc65 	bl	801ea40 <siprintf>
			if (sdioPrints)
 801c176:	2300      	movs	r3, #0
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d014      	beq.n	801c1a6 <Create_File+0x102>
				printf(buf);
 801c17c:	f107 0308 	add.w	r3, r7, #8
 801c180:	4618      	mov	r0, r3
 801c182:	f002 fbed 	bl	801e960 <iprintf>
 801c186:	e00e      	b.n	801c1a6 <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c188:	f107 0308 	add.w	r3, r7, #8
 801c18c:	687a      	ldr	r2, [r7, #4]
 801c18e:	4911      	ldr	r1, [pc, #68]	@ (801c1d4 <Create_File+0x130>)
 801c190:	4618      	mov	r0, r3
 801c192:	f002 fc55 	bl	801ea40 <siprintf>
			if (sdioPrints)
 801c196:	2300      	movs	r3, #0
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d004      	beq.n	801c1a6 <Create_File+0x102>
				printf(buf);
 801c19c:	f107 0308 	add.w	r3, r7, #8
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	f002 fbdd 	bl	801e960 <iprintf>

		}
	}
	return fresult;
 801c1a6:	4b04      	ldr	r3, [pc, #16]	@ (801c1b8 <Create_File+0x114>)
 801c1a8:	781b      	ldrb	r3, [r3, #0]
}
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	37a0      	adds	r7, #160	@ 0xa0
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	bd80      	pop	{r7, pc}
 801c1b2:	bf00      	nop
 801c1b4:	20002200 	.word	0x20002200
 801c1b8:	20002318 	.word	0x20002318
 801c1bc:	20002321 	.word	0x20002321
 801c1c0:	0802491c 	.word	0x0802491c
 801c1c4:	20001fd0 	.word	0x20001fd0
 801c1c8:	08024950 	.word	0x08024950
 801c1cc:	08024978 	.word	0x08024978
 801c1d0:	080249b8 	.word	0x080249b8
 801c1d4:	080248fc 	.word	0x080248fc

0801c1d8 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801c1d8:	b580      	push	{r7, lr}
 801c1da:	b0a8      	sub	sp, #160	@ 0xa0
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	6078      	str	r0, [r7, #4]
 801c1e0:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801c1e2:	4951      	ldr	r1, [pc, #324]	@ (801c328 <Update_File+0x150>)
 801c1e4:	6878      	ldr	r0, [r7, #4]
 801c1e6:	f7ff fdae 	bl	801bd46 <f_stat>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	461a      	mov	r2, r3
 801c1ee:	4b4f      	ldr	r3, [pc, #316]	@ (801c32c <Update_File+0x154>)
 801c1f0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c1f2:	4b4e      	ldr	r3, [pc, #312]	@ (801c32c <Update_File+0x154>)
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d011      	beq.n	801c21e <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801c1fa:	f107 0308 	add.w	r3, r7, #8
 801c1fe:	687a      	ldr	r2, [r7, #4]
 801c200:	494b      	ldr	r1, [pc, #300]	@ (801c330 <Update_File+0x158>)
 801c202:	4618      	mov	r0, r3
 801c204:	f002 fc1c 	bl	801ea40 <siprintf>
		if (sdioPrints)
 801c208:	2300      	movs	r3, #0
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d004      	beq.n	801c218 <Update_File+0x40>
			printf(buf);
 801c20e:	f107 0308 	add.w	r3, r7, #8
 801c212:	4618      	mov	r0, r3
 801c214:	f002 fba4 	bl	801e960 <iprintf>

		return fresult;
 801c218:	4b44      	ldr	r3, [pc, #272]	@ (801c32c <Update_File+0x154>)
 801c21a:	781b      	ldrb	r3, [r3, #0]
 801c21c:	e080      	b.n	801c320 <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801c21e:	2232      	movs	r2, #50	@ 0x32
 801c220:	6879      	ldr	r1, [r7, #4]
 801c222:	4844      	ldr	r0, [pc, #272]	@ (801c334 <Update_File+0x15c>)
 801c224:	f7ff f9b8 	bl	801b598 <f_open>
 801c228:	4603      	mov	r3, r0
 801c22a:	461a      	mov	r2, r3
 801c22c:	4b3f      	ldr	r3, [pc, #252]	@ (801c32c <Update_File+0x154>)
 801c22e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c230:	4b3e      	ldr	r3, [pc, #248]	@ (801c32c <Update_File+0x154>)
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d013      	beq.n	801c260 <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801c238:	4b3c      	ldr	r3, [pc, #240]	@ (801c32c <Update_File+0x154>)
 801c23a:	781b      	ldrb	r3, [r3, #0]
 801c23c:	461a      	mov	r2, r3
 801c23e:	f107 0008 	add.w	r0, r7, #8
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	493c      	ldr	r1, [pc, #240]	@ (801c338 <Update_File+0x160>)
 801c246:	f002 fbfb 	bl	801ea40 <siprintf>
					name);
			if (sdioPrints)
 801c24a:	2300      	movs	r3, #0
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d004      	beq.n	801c25a <Update_File+0x82>
				printf(buf);
 801c250:	f107 0308 	add.w	r3, r7, #8
 801c254:	4618      	mov	r0, r3
 801c256:	f002 fb83 	bl	801e960 <iprintf>

			return fresult;
 801c25a:	4b34      	ldr	r3, [pc, #208]	@ (801c32c <Update_File+0x154>)
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	e05f      	b.n	801c320 <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801c260:	6838      	ldr	r0, [r7, #0]
 801c262:	f7e4 f81d 	bl	80002a0 <strlen>
 801c266:	4602      	mov	r2, r0
 801c268:	4b34      	ldr	r3, [pc, #208]	@ (801c33c <Update_File+0x164>)
 801c26a:	6839      	ldr	r1, [r7, #0]
 801c26c:	4831      	ldr	r0, [pc, #196]	@ (801c334 <Update_File+0x15c>)
 801c26e:	f7ff fb4d 	bl	801b90c <f_write>
 801c272:	4603      	mov	r3, r0
 801c274:	461a      	mov	r2, r3
 801c276:	4b2d      	ldr	r3, [pc, #180]	@ (801c32c <Update_File+0x154>)
 801c278:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c27a:	4b2c      	ldr	r3, [pc, #176]	@ (801c32c <Update_File+0x154>)
 801c27c:	781b      	ldrb	r3, [r3, #0]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d011      	beq.n	801c2a6 <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801c282:	4b2a      	ldr	r3, [pc, #168]	@ (801c32c <Update_File+0x154>)
 801c284:	781b      	ldrb	r3, [r3, #0]
 801c286:	461a      	mov	r2, r3
 801c288:	f107 0008 	add.w	r0, r7, #8
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	492c      	ldr	r1, [pc, #176]	@ (801c340 <Update_File+0x168>)
 801c290:	f002 fbd6 	bl	801ea40 <siprintf>
					name);
			if (sdioPrints)
 801c294:	2300      	movs	r3, #0
 801c296:	2b00      	cmp	r3, #0
 801c298:	d014      	beq.n	801c2c4 <Update_File+0xec>
				printf(buf);
 801c29a:	f107 0308 	add.w	r3, r7, #8
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f002 fb5e 	bl	801e960 <iprintf>
 801c2a4:	e00e      	b.n	801c2c4 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801c2a6:	f107 0308 	add.w	r3, r7, #8
 801c2aa:	687a      	ldr	r2, [r7, #4]
 801c2ac:	4925      	ldr	r1, [pc, #148]	@ (801c344 <Update_File+0x16c>)
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f002 fbc6 	bl	801ea40 <siprintf>
			if (sdioPrints)
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d004      	beq.n	801c2c4 <Update_File+0xec>
				printf(buf);
 801c2ba:	f107 0308 	add.w	r3, r7, #8
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f002 fb4e 	bl	801e960 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801c2c4:	481b      	ldr	r0, [pc, #108]	@ (801c334 <Update_File+0x15c>)
 801c2c6:	f7ff fd14 	bl	801bcf2 <f_close>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	461a      	mov	r2, r3
 801c2ce:	4b17      	ldr	r3, [pc, #92]	@ (801c32c <Update_File+0x154>)
 801c2d0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c2d2:	4b16      	ldr	r3, [pc, #88]	@ (801c32c <Update_File+0x154>)
 801c2d4:	781b      	ldrb	r3, [r3, #0]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d011      	beq.n	801c2fe <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801c2da:	4b14      	ldr	r3, [pc, #80]	@ (801c32c <Update_File+0x154>)
 801c2dc:	781b      	ldrb	r3, [r3, #0]
 801c2de:	461a      	mov	r2, r3
 801c2e0:	f107 0008 	add.w	r0, r7, #8
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	4918      	ldr	r1, [pc, #96]	@ (801c348 <Update_File+0x170>)
 801c2e8:	f002 fbaa 	bl	801ea40 <siprintf>
					name);
			if (sdioPrints)
 801c2ec:	2300      	movs	r3, #0
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d014      	beq.n	801c31c <Update_File+0x144>
				printf(buf);
 801c2f2:	f107 0308 	add.w	r3, r7, #8
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	f002 fb32 	bl	801e960 <iprintf>
 801c2fc:	e00e      	b.n	801c31c <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c2fe:	f107 0308 	add.w	r3, r7, #8
 801c302:	687a      	ldr	r2, [r7, #4]
 801c304:	4911      	ldr	r1, [pc, #68]	@ (801c34c <Update_File+0x174>)
 801c306:	4618      	mov	r0, r3
 801c308:	f002 fb9a 	bl	801ea40 <siprintf>
			if (sdioPrints)
 801c30c:	2300      	movs	r3, #0
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d004      	beq.n	801c31c <Update_File+0x144>
				printf(buf);
 801c312:	f107 0308 	add.w	r3, r7, #8
 801c316:	4618      	mov	r0, r3
 801c318:	f002 fb22 	bl	801e960 <iprintf>

		}
	}
	return fresult;
 801c31c:	4b03      	ldr	r3, [pc, #12]	@ (801c32c <Update_File+0x154>)
 801c31e:	781b      	ldrb	r3, [r3, #0]
}
 801c320:	4618      	mov	r0, r3
 801c322:	37a0      	adds	r7, #160	@ 0xa0
 801c324:	46bd      	mov	sp, r7
 801c326:	bd80      	pop	{r7, pc}
 801c328:	20002200 	.word	0x20002200
 801c32c:	20002318 	.word	0x20002318
 801c330:	080247ac 	.word	0x080247ac
 801c334:	20001fd0 	.word	0x20001fd0
 801c338:	080247cc 	.word	0x080247cc
 801c33c:	2000231c 	.word	0x2000231c
 801c340:	080249dc 	.word	0x080249dc
 801c344:	08024a04 	.word	0x08024a04
 801c348:	080248d4 	.word	0x080248d4
 801c34c:	080248fc 	.word	0x080248fc

0801c350 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801c350:	b580      	push	{r7, lr}
 801c352:	b088      	sub	sp, #32
 801c354:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c356:	f107 0314 	add.w	r3, r7, #20
 801c35a:	2200      	movs	r2, #0
 801c35c:	4619      	mov	r1, r3
 801c35e:	48b4      	ldr	r0, [pc, #720]	@ (801c630 <json_update+0x2e0>)
 801c360:	f7ed fbeb 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c364:	463b      	mov	r3, r7
 801c366:	2200      	movs	r2, #0
 801c368:	4619      	mov	r1, r3
 801c36a:	48b1      	ldr	r0, [pc, #708]	@ (801c630 <json_update+0x2e0>)
 801c36c:	f7ed fb03 	bl	8009976 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c370:	7dba      	ldrb	r2, [r7, #22]
 801c372:	4bb0      	ldr	r3, [pc, #704]	@ (801c634 <json_update+0x2e4>)
 801c374:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c376:	7d7a      	ldrb	r2, [r7, #21]
 801c378:	4baf      	ldr	r3, [pc, #700]	@ (801c638 <json_update+0x2e8>)
 801c37a:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c37c:	7dfa      	ldrb	r2, [r7, #23]
 801c37e:	4baf      	ldr	r3, [pc, #700]	@ (801c63c <json_update+0x2ec>)
 801c380:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c382:	783a      	ldrb	r2, [r7, #0]
 801c384:	4bae      	ldr	r3, [pc, #696]	@ (801c640 <json_update+0x2f0>)
 801c386:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c388:	787a      	ldrb	r2, [r7, #1]
 801c38a:	4bae      	ldr	r3, [pc, #696]	@ (801c644 <json_update+0x2f4>)
 801c38c:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c38e:	78ba      	ldrb	r2, [r7, #2]
 801c390:	4bad      	ldr	r3, [pc, #692]	@ (801c648 <json_update+0x2f8>)
 801c392:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801c394:	48ad      	ldr	r0, [pc, #692]	@ (801c64c <json_update+0x2fc>)
 801c396:	f7ff fe31 	bl	801bffc <Mount_SD>
 801c39a:	4603      	mov	r3, r0
 801c39c:	461a      	mov	r2, r3
 801c39e:	4bac      	ldr	r3, [pc, #688]	@ (801c650 <json_update+0x300>)
 801c3a0:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c3a2:	4bab      	ldr	r3, [pc, #684]	@ (801c650 <json_update+0x300>)
 801c3a4:	781b      	ldrb	r3, [r3, #0]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	f040 8137 	bne.w	801c61a <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801c3ac:	49a9      	ldr	r1, [pc, #676]	@ (801c654 <json_update+0x304>)
 801c3ae:	48aa      	ldr	r0, [pc, #680]	@ (801c658 <json_update+0x308>)
 801c3b0:	f002 fb46 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3b4:	49a8      	ldr	r1, [pc, #672]	@ (801c658 <json_update+0x308>)
 801c3b6:	48a9      	ldr	r0, [pc, #676]	@ (801c65c <json_update+0x30c>)
 801c3b8:	f7ff ff0e 	bl	801c1d8 <Update_File>
 801c3bc:	4603      	mov	r3, r0
 801c3be:	461a      	mov	r2, r3
 801c3c0:	4ba3      	ldr	r3, [pc, #652]	@ (801c650 <json_update+0x300>)
 801c3c2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c3c4:	22ff      	movs	r2, #255	@ 0xff
 801c3c6:	2100      	movs	r1, #0
 801c3c8:	48a3      	ldr	r0, [pc, #652]	@ (801c658 <json_update+0x308>)
 801c3ca:	f002 fc83 	bl	801ecd4 <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801c3ce:	f7e6 f84b 	bl	8002468 <ver_GetUid>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	461a      	mov	r2, r3
 801c3d6:	49a2      	ldr	r1, [pc, #648]	@ (801c660 <json_update+0x310>)
 801c3d8:	489f      	ldr	r0, [pc, #636]	@ (801c658 <json_update+0x308>)
 801c3da:	f002 fb31 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3de:	499e      	ldr	r1, [pc, #632]	@ (801c658 <json_update+0x308>)
 801c3e0:	489e      	ldr	r0, [pc, #632]	@ (801c65c <json_update+0x30c>)
 801c3e2:	f7ff fef9 	bl	801c1d8 <Update_File>
 801c3e6:	4603      	mov	r3, r0
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	4b99      	ldr	r3, [pc, #612]	@ (801c650 <json_update+0x300>)
 801c3ec:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c3ee:	22ff      	movs	r2, #255	@ 0xff
 801c3f0:	2100      	movs	r1, #0
 801c3f2:	4899      	ldr	r0, [pc, #612]	@ (801c658 <json_update+0x308>)
 801c3f4:	f002 fc6e 	bl	801ecd4 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801c3f8:	4a9a      	ldr	r2, [pc, #616]	@ (801c664 <json_update+0x314>)
 801c3fa:	499b      	ldr	r1, [pc, #620]	@ (801c668 <json_update+0x318>)
 801c3fc:	4896      	ldr	r0, [pc, #600]	@ (801c658 <json_update+0x308>)
 801c3fe:	f002 fb1f 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c402:	4995      	ldr	r1, [pc, #596]	@ (801c658 <json_update+0x308>)
 801c404:	4895      	ldr	r0, [pc, #596]	@ (801c65c <json_update+0x30c>)
 801c406:	f7ff fee7 	bl	801c1d8 <Update_File>
 801c40a:	4603      	mov	r3, r0
 801c40c:	461a      	mov	r2, r3
 801c40e:	4b90      	ldr	r3, [pc, #576]	@ (801c650 <json_update+0x300>)
 801c410:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c412:	22ff      	movs	r2, #255	@ 0xff
 801c414:	2100      	movs	r1, #0
 801c416:	4890      	ldr	r0, [pc, #576]	@ (801c658 <json_update+0x308>)
 801c418:	f002 fc5c 	bl	801ecd4 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c41c:	783b      	ldrb	r3, [r7, #0]
 801c41e:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801c420:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c422:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801c424:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c426:	9300      	str	r3, [sp, #0]
 801c428:	460b      	mov	r3, r1
 801c42a:	4990      	ldr	r1, [pc, #576]	@ (801c66c <json_update+0x31c>)
 801c42c:	488a      	ldr	r0, [pc, #552]	@ (801c658 <json_update+0x308>)
 801c42e:	f002 fb07 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c432:	4989      	ldr	r1, [pc, #548]	@ (801c658 <json_update+0x308>)
 801c434:	4889      	ldr	r0, [pc, #548]	@ (801c65c <json_update+0x30c>)
 801c436:	f7ff fecf 	bl	801c1d8 <Update_File>
 801c43a:	4603      	mov	r3, r0
 801c43c:	461a      	mov	r2, r3
 801c43e:	4b84      	ldr	r3, [pc, #528]	@ (801c650 <json_update+0x300>)
 801c440:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c442:	22ff      	movs	r2, #255	@ 0xff
 801c444:	2100      	movs	r1, #0
 801c446:	4884      	ldr	r0, [pc, #528]	@ (801c658 <json_update+0x308>)
 801c448:	f002 fc44 	bl	801ecd4 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801c44c:	4a88      	ldr	r2, [pc, #544]	@ (801c670 <json_update+0x320>)
 801c44e:	4989      	ldr	r1, [pc, #548]	@ (801c674 <json_update+0x324>)
 801c450:	4881      	ldr	r0, [pc, #516]	@ (801c658 <json_update+0x308>)
 801c452:	f002 faf5 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c456:	4980      	ldr	r1, [pc, #512]	@ (801c658 <json_update+0x308>)
 801c458:	4880      	ldr	r0, [pc, #512]	@ (801c65c <json_update+0x30c>)
 801c45a:	f7ff febd 	bl	801c1d8 <Update_File>
 801c45e:	4603      	mov	r3, r0
 801c460:	461a      	mov	r2, r3
 801c462:	4b7b      	ldr	r3, [pc, #492]	@ (801c650 <json_update+0x300>)
 801c464:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c466:	22ff      	movs	r2, #255	@ 0xff
 801c468:	2100      	movs	r1, #0
 801c46a:	487b      	ldr	r0, [pc, #492]	@ (801c658 <json_update+0x308>)
 801c46c:	f002 fc32 	bl	801ecd4 <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801c470:	4a81      	ldr	r2, [pc, #516]	@ (801c678 <json_update+0x328>)
 801c472:	4982      	ldr	r1, [pc, #520]	@ (801c67c <json_update+0x32c>)
 801c474:	4878      	ldr	r0, [pc, #480]	@ (801c658 <json_update+0x308>)
 801c476:	f002 fae3 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c47a:	4977      	ldr	r1, [pc, #476]	@ (801c658 <json_update+0x308>)
 801c47c:	4877      	ldr	r0, [pc, #476]	@ (801c65c <json_update+0x30c>)
 801c47e:	f7ff feab 	bl	801c1d8 <Update_File>
 801c482:	4603      	mov	r3, r0
 801c484:	461a      	mov	r2, r3
 801c486:	4b72      	ldr	r3, [pc, #456]	@ (801c650 <json_update+0x300>)
 801c488:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c48a:	22ff      	movs	r2, #255	@ 0xff
 801c48c:	2100      	movs	r1, #0
 801c48e:	4872      	ldr	r0, [pc, #456]	@ (801c658 <json_update+0x308>)
 801c490:	f002 fc20 	bl	801ecd4 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801c494:	4a7a      	ldr	r2, [pc, #488]	@ (801c680 <json_update+0x330>)
 801c496:	497b      	ldr	r1, [pc, #492]	@ (801c684 <json_update+0x334>)
 801c498:	486f      	ldr	r0, [pc, #444]	@ (801c658 <json_update+0x308>)
 801c49a:	f002 fad1 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c49e:	496e      	ldr	r1, [pc, #440]	@ (801c658 <json_update+0x308>)
 801c4a0:	486e      	ldr	r0, [pc, #440]	@ (801c65c <json_update+0x30c>)
 801c4a2:	f7ff fe99 	bl	801c1d8 <Update_File>
 801c4a6:	4603      	mov	r3, r0
 801c4a8:	461a      	mov	r2, r3
 801c4aa:	4b69      	ldr	r3, [pc, #420]	@ (801c650 <json_update+0x300>)
 801c4ac:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c4ae:	22ff      	movs	r2, #255	@ 0xff
 801c4b0:	2100      	movs	r1, #0
 801c4b2:	4869      	ldr	r0, [pc, #420]	@ (801c658 <json_update+0x308>)
 801c4b4:	f002 fc0e 	bl	801ecd4 <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801c4b8:	4b73      	ldr	r3, [pc, #460]	@ (801c688 <json_update+0x338>)
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	4618      	mov	r0, r3
 801c4be:	f7e4 f85b 	bl	8000578 <__aeabi_f2d>
 801c4c2:	4602      	mov	r2, r0
 801c4c4:	460b      	mov	r3, r1
 801c4c6:	4971      	ldr	r1, [pc, #452]	@ (801c68c <json_update+0x33c>)
 801c4c8:	4863      	ldr	r0, [pc, #396]	@ (801c658 <json_update+0x308>)
 801c4ca:	f002 fab9 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4ce:	4962      	ldr	r1, [pc, #392]	@ (801c658 <json_update+0x308>)
 801c4d0:	4862      	ldr	r0, [pc, #392]	@ (801c65c <json_update+0x30c>)
 801c4d2:	f7ff fe81 	bl	801c1d8 <Update_File>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	461a      	mov	r2, r3
 801c4da:	4b5d      	ldr	r3, [pc, #372]	@ (801c650 <json_update+0x300>)
 801c4dc:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4de:	22ff      	movs	r2, #255	@ 0xff
 801c4e0:	2100      	movs	r1, #0
 801c4e2:	485d      	ldr	r0, [pc, #372]	@ (801c658 <json_update+0x308>)
 801c4e4:	f002 fbf6 	bl	801ecd4 <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801c4e8:	4b67      	ldr	r3, [pc, #412]	@ (801c688 <json_update+0x338>)
 801c4ea:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	f7e4 f843 	bl	8000578 <__aeabi_f2d>
 801c4f2:	4602      	mov	r2, r0
 801c4f4:	460b      	mov	r3, r1
 801c4f6:	4966      	ldr	r1, [pc, #408]	@ (801c690 <json_update+0x340>)
 801c4f8:	4857      	ldr	r0, [pc, #348]	@ (801c658 <json_update+0x308>)
 801c4fa:	f002 faa1 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4fe:	4956      	ldr	r1, [pc, #344]	@ (801c658 <json_update+0x308>)
 801c500:	4856      	ldr	r0, [pc, #344]	@ (801c65c <json_update+0x30c>)
 801c502:	f7ff fe69 	bl	801c1d8 <Update_File>
 801c506:	4603      	mov	r3, r0
 801c508:	461a      	mov	r2, r3
 801c50a:	4b51      	ldr	r3, [pc, #324]	@ (801c650 <json_update+0x300>)
 801c50c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c50e:	22ff      	movs	r2, #255	@ 0xff
 801c510:	2100      	movs	r1, #0
 801c512:	4851      	ldr	r0, [pc, #324]	@ (801c658 <json_update+0x308>)
 801c514:	f002 fbde 	bl	801ecd4 <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801c518:	4b5b      	ldr	r3, [pc, #364]	@ (801c688 <json_update+0x338>)
 801c51a:	689b      	ldr	r3, [r3, #8]
 801c51c:	4618      	mov	r0, r3
 801c51e:	f7e4 f82b 	bl	8000578 <__aeabi_f2d>
 801c522:	4602      	mov	r2, r0
 801c524:	460b      	mov	r3, r1
 801c526:	495b      	ldr	r1, [pc, #364]	@ (801c694 <json_update+0x344>)
 801c528:	484b      	ldr	r0, [pc, #300]	@ (801c658 <json_update+0x308>)
 801c52a:	f002 fa89 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c52e:	494a      	ldr	r1, [pc, #296]	@ (801c658 <json_update+0x308>)
 801c530:	484a      	ldr	r0, [pc, #296]	@ (801c65c <json_update+0x30c>)
 801c532:	f7ff fe51 	bl	801c1d8 <Update_File>
 801c536:	4603      	mov	r3, r0
 801c538:	461a      	mov	r2, r3
 801c53a:	4b45      	ldr	r3, [pc, #276]	@ (801c650 <json_update+0x300>)
 801c53c:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c53e:	22ff      	movs	r2, #255	@ 0xff
 801c540:	2100      	movs	r1, #0
 801c542:	4845      	ldr	r0, [pc, #276]	@ (801c658 <json_update+0x308>)
 801c544:	f002 fbc6 	bl	801ecd4 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801c548:	4b4f      	ldr	r3, [pc, #316]	@ (801c688 <json_update+0x338>)
 801c54a:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d001      	beq.n	801c554 <json_update+0x204>
 801c550:	4b51      	ldr	r3, [pc, #324]	@ (801c698 <json_update+0x348>)
 801c552:	e000      	b.n	801c556 <json_update+0x206>
 801c554:	4b51      	ldr	r3, [pc, #324]	@ (801c69c <json_update+0x34c>)
 801c556:	461a      	mov	r2, r3
 801c558:	4951      	ldr	r1, [pc, #324]	@ (801c6a0 <json_update+0x350>)
 801c55a:	483f      	ldr	r0, [pc, #252]	@ (801c658 <json_update+0x308>)
 801c55c:	f002 fa70 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c560:	493d      	ldr	r1, [pc, #244]	@ (801c658 <json_update+0x308>)
 801c562:	483e      	ldr	r0, [pc, #248]	@ (801c65c <json_update+0x30c>)
 801c564:	f7ff fe38 	bl	801c1d8 <Update_File>
 801c568:	4603      	mov	r3, r0
 801c56a:	461a      	mov	r2, r3
 801c56c:	4b38      	ldr	r3, [pc, #224]	@ (801c650 <json_update+0x300>)
 801c56e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c570:	22ff      	movs	r2, #255	@ 0xff
 801c572:	2100      	movs	r1, #0
 801c574:	4838      	ldr	r0, [pc, #224]	@ (801c658 <json_update+0x308>)
 801c576:	f002 fbad 	bl	801ecd4 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801c57a:	4b43      	ldr	r3, [pc, #268]	@ (801c688 <json_update+0x338>)
 801c57c:	695b      	ldr	r3, [r3, #20]
 801c57e:	4618      	mov	r0, r3
 801c580:	f7e3 fffa 	bl	8000578 <__aeabi_f2d>
 801c584:	4602      	mov	r2, r0
 801c586:	460b      	mov	r3, r1
 801c588:	4946      	ldr	r1, [pc, #280]	@ (801c6a4 <json_update+0x354>)
 801c58a:	4833      	ldr	r0, [pc, #204]	@ (801c658 <json_update+0x308>)
 801c58c:	f002 fa58 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c590:	4931      	ldr	r1, [pc, #196]	@ (801c658 <json_update+0x308>)
 801c592:	4832      	ldr	r0, [pc, #200]	@ (801c65c <json_update+0x30c>)
 801c594:	f7ff fe20 	bl	801c1d8 <Update_File>
 801c598:	4603      	mov	r3, r0
 801c59a:	461a      	mov	r2, r3
 801c59c:	4b2c      	ldr	r3, [pc, #176]	@ (801c650 <json_update+0x300>)
 801c59e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5a0:	22ff      	movs	r2, #255	@ 0xff
 801c5a2:	2100      	movs	r1, #0
 801c5a4:	482c      	ldr	r0, [pc, #176]	@ (801c658 <json_update+0x308>)
 801c5a6:	f002 fb95 	bl	801ecd4 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801c5aa:	493f      	ldr	r1, [pc, #252]	@ (801c6a8 <json_update+0x358>)
 801c5ac:	482a      	ldr	r0, [pc, #168]	@ (801c658 <json_update+0x308>)
 801c5ae:	f002 fa47 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5b2:	4929      	ldr	r1, [pc, #164]	@ (801c658 <json_update+0x308>)
 801c5b4:	4829      	ldr	r0, [pc, #164]	@ (801c65c <json_update+0x30c>)
 801c5b6:	f7ff fe0f 	bl	801c1d8 <Update_File>
 801c5ba:	4603      	mov	r3, r0
 801c5bc:	461a      	mov	r2, r3
 801c5be:	4b24      	ldr	r3, [pc, #144]	@ (801c650 <json_update+0x300>)
 801c5c0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5c2:	22ff      	movs	r2, #255	@ 0xff
 801c5c4:	2100      	movs	r1, #0
 801c5c6:	4824      	ldr	r0, [pc, #144]	@ (801c658 <json_update+0x308>)
 801c5c8:	f002 fb84 	bl	801ecd4 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801c5cc:	4b2e      	ldr	r3, [pc, #184]	@ (801c688 <json_update+0x338>)
 801c5ce:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	f7e3 ffd1 	bl	8000578 <__aeabi_f2d>
 801c5d6:	4602      	mov	r2, r0
 801c5d8:	460b      	mov	r3, r1
 801c5da:	4934      	ldr	r1, [pc, #208]	@ (801c6ac <json_update+0x35c>)
 801c5dc:	481e      	ldr	r0, [pc, #120]	@ (801c658 <json_update+0x308>)
 801c5de:	f002 fa2f 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5e2:	491d      	ldr	r1, [pc, #116]	@ (801c658 <json_update+0x308>)
 801c5e4:	481d      	ldr	r0, [pc, #116]	@ (801c65c <json_update+0x30c>)
 801c5e6:	f7ff fdf7 	bl	801c1d8 <Update_File>
 801c5ea:	4603      	mov	r3, r0
 801c5ec:	461a      	mov	r2, r3
 801c5ee:	4b18      	ldr	r3, [pc, #96]	@ (801c650 <json_update+0x300>)
 801c5f0:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801c5f2:	22ff      	movs	r2, #255	@ 0xff
 801c5f4:	2100      	movs	r1, #0
 801c5f6:	4818      	ldr	r0, [pc, #96]	@ (801c658 <json_update+0x308>)
 801c5f8:	f002 fb6c 	bl	801ecd4 <memset>
		sprintf(buffer, "}\n\n");
 801c5fc:	492c      	ldr	r1, [pc, #176]	@ (801c6b0 <json_update+0x360>)
 801c5fe:	4816      	ldr	r0, [pc, #88]	@ (801c658 <json_update+0x308>)
 801c600:	f002 fa1e 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c604:	4914      	ldr	r1, [pc, #80]	@ (801c658 <json_update+0x308>)
 801c606:	4815      	ldr	r0, [pc, #84]	@ (801c65c <json_update+0x30c>)
 801c608:	f7ff fde6 	bl	801c1d8 <Update_File>
 801c60c:	4603      	mov	r3, r0
 801c60e:	461a      	mov	r2, r3
 801c610:	4b0f      	ldr	r3, [pc, #60]	@ (801c650 <json_update+0x300>)
 801c612:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c614:	480d      	ldr	r0, [pc, #52]	@ (801c64c <json_update+0x2fc>)
 801c616:	f7ff fd1d 	bl	801c054 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c61a:	4b0d      	ldr	r3, [pc, #52]	@ (801c650 <json_update+0x300>)
 801c61c:	781b      	ldrb	r3, [r3, #0]
 801c61e:	b25a      	sxtb	r2, r3
 801c620:	4b19      	ldr	r3, [pc, #100]	@ (801c688 <json_update+0x338>)
 801c622:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c626:	bf00      	nop
 801c628:	3718      	adds	r7, #24
 801c62a:	46bd      	mov	sp, r7
 801c62c:	bd80      	pop	{r7, pc}
 801c62e:	bf00      	nop
 801c630:	20001898 	.word	0x20001898
 801c634:	20002322 	.word	0x20002322
 801c638:	20002323 	.word	0x20002323
 801c63c:	20002324 	.word	0x20002324
 801c640:	20002325 	.word	0x20002325
 801c644:	20002326 	.word	0x20002326
 801c648:	20002327 	.word	0x20002327
 801c64c:	08024af0 	.word	0x08024af0
 801c650:	20002320 	.word	0x20002320
 801c654:	08024af4 	.word	0x08024af4
 801c658:	2000232c 	.word	0x2000232c
 801c65c:	20001461 	.word	0x20001461
 801c660:	08024af8 	.word	0x08024af8
 801c664:	20001399 	.word	0x20001399
 801c668:	08024b08 	.word	0x08024b08
 801c66c:	08024b14 	.word	0x08024b14
 801c670:	200013cb 	.word	0x200013cb
 801c674:	08024b34 	.word	0x08024b34
 801c678:	200014c5 	.word	0x200014c5
 801c67c:	08024b48 	.word	0x08024b48
 801c680:	2000142f 	.word	0x2000142f
 801c684:	08024b5c 	.word	0x08024b5c
 801c688:	20001530 	.word	0x20001530
 801c68c:	08024b6c 	.word	0x08024b6c
 801c690:	08024b7c 	.word	0x08024b7c
 801c694:	08024b94 	.word	0x08024b94
 801c698:	08024ba8 	.word	0x08024ba8
 801c69c:	08024bb0 	.word	0x08024bb0
 801c6a0:	08024bb8 	.word	0x08024bb8
 801c6a4:	08024bc8 	.word	0x08024bc8
 801c6a8:	08024bdc 	.word	0x08024bdc
 801c6ac:	08024bec 	.word	0x08024bec
 801c6b0:	08024c00 	.word	0x08024c00

0801c6b4 <csv_update>:
void csv_update() {
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b088      	sub	sp, #32
 801c6b8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c6ba:	f107 0314 	add.w	r3, r7, #20
 801c6be:	2200      	movs	r2, #0
 801c6c0:	4619      	mov	r1, r3
 801c6c2:	48ab      	ldr	r0, [pc, #684]	@ (801c970 <csv_update+0x2bc>)
 801c6c4:	f7ed fa39 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c6c8:	463b      	mov	r3, r7
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	4619      	mov	r1, r3
 801c6ce:	48a8      	ldr	r0, [pc, #672]	@ (801c970 <csv_update+0x2bc>)
 801c6d0:	f7ed f951 	bl	8009976 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c6d4:	7dba      	ldrb	r2, [r7, #22]
 801c6d6:	4ba7      	ldr	r3, [pc, #668]	@ (801c974 <csv_update+0x2c0>)
 801c6d8:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c6da:	7d7a      	ldrb	r2, [r7, #21]
 801c6dc:	4ba6      	ldr	r3, [pc, #664]	@ (801c978 <csv_update+0x2c4>)
 801c6de:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c6e0:	7dfa      	ldrb	r2, [r7, #23]
 801c6e2:	4ba6      	ldr	r3, [pc, #664]	@ (801c97c <csv_update+0x2c8>)
 801c6e4:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c6e6:	783a      	ldrb	r2, [r7, #0]
 801c6e8:	4ba5      	ldr	r3, [pc, #660]	@ (801c980 <csv_update+0x2cc>)
 801c6ea:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c6ec:	787a      	ldrb	r2, [r7, #1]
 801c6ee:	4ba5      	ldr	r3, [pc, #660]	@ (801c984 <csv_update+0x2d0>)
 801c6f0:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c6f2:	78ba      	ldrb	r2, [r7, #2]
 801c6f4:	4ba4      	ldr	r3, [pc, #656]	@ (801c988 <csv_update+0x2d4>)
 801c6f6:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801c6f8:	48a4      	ldr	r0, [pc, #656]	@ (801c98c <csv_update+0x2d8>)
 801c6fa:	f7ff fc7f 	bl	801bffc <Mount_SD>
 801c6fe:	4603      	mov	r3, r0
 801c700:	461a      	mov	r2, r3
 801c702:	4ba3      	ldr	r3, [pc, #652]	@ (801c990 <csv_update+0x2dc>)
 801c704:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c706:	4ba2      	ldr	r3, [pc, #648]	@ (801c990 <csv_update+0x2dc>)
 801c708:	781b      	ldrb	r3, [r3, #0]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	f040 8126 	bne.w	801c95c <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801c710:	f7e5 feaa 	bl	8002468 <ver_GetUid>
 801c714:	4603      	mov	r3, r0
 801c716:	461a      	mov	r2, r3
 801c718:	499e      	ldr	r1, [pc, #632]	@ (801c994 <csv_update+0x2e0>)
 801c71a:	489f      	ldr	r0, [pc, #636]	@ (801c998 <csv_update+0x2e4>)
 801c71c:	f002 f990 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c720:	499d      	ldr	r1, [pc, #628]	@ (801c998 <csv_update+0x2e4>)
 801c722:	489e      	ldr	r0, [pc, #632]	@ (801c99c <csv_update+0x2e8>)
 801c724:	f7ff fd58 	bl	801c1d8 <Update_File>
 801c728:	4603      	mov	r3, r0
 801c72a:	461a      	mov	r2, r3
 801c72c:	4b98      	ldr	r3, [pc, #608]	@ (801c990 <csv_update+0x2dc>)
 801c72e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c730:	22ff      	movs	r2, #255	@ 0xff
 801c732:	2100      	movs	r1, #0
 801c734:	4898      	ldr	r0, [pc, #608]	@ (801c998 <csv_update+0x2e4>)
 801c736:	f002 facd 	bl	801ecd4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801c73a:	4a99      	ldr	r2, [pc, #612]	@ (801c9a0 <csv_update+0x2ec>)
 801c73c:	4995      	ldr	r1, [pc, #596]	@ (801c994 <csv_update+0x2e0>)
 801c73e:	4896      	ldr	r0, [pc, #600]	@ (801c998 <csv_update+0x2e4>)
 801c740:	f002 f97e 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c744:	4994      	ldr	r1, [pc, #592]	@ (801c998 <csv_update+0x2e4>)
 801c746:	4895      	ldr	r0, [pc, #596]	@ (801c99c <csv_update+0x2e8>)
 801c748:	f7ff fd46 	bl	801c1d8 <Update_File>
 801c74c:	4603      	mov	r3, r0
 801c74e:	461a      	mov	r2, r3
 801c750:	4b8f      	ldr	r3, [pc, #572]	@ (801c990 <csv_update+0x2dc>)
 801c752:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c754:	22ff      	movs	r2, #255	@ 0xff
 801c756:	2100      	movs	r1, #0
 801c758:	488f      	ldr	r0, [pc, #572]	@ (801c998 <csv_update+0x2e4>)
 801c75a:	f002 fabb 	bl	801ecd4 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c75e:	783b      	ldrb	r3, [r7, #0]
 801c760:	461a      	mov	r2, r3
 801c762:	787b      	ldrb	r3, [r7, #1]
 801c764:	4619      	mov	r1, r3
				sTime.Seconds);
 801c766:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c768:	9300      	str	r3, [sp, #0]
 801c76a:	460b      	mov	r3, r1
 801c76c:	498d      	ldr	r1, [pc, #564]	@ (801c9a4 <csv_update+0x2f0>)
 801c76e:	488a      	ldr	r0, [pc, #552]	@ (801c998 <csv_update+0x2e4>)
 801c770:	f002 f966 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c774:	4988      	ldr	r1, [pc, #544]	@ (801c998 <csv_update+0x2e4>)
 801c776:	4889      	ldr	r0, [pc, #548]	@ (801c99c <csv_update+0x2e8>)
 801c778:	f7ff fd2e 	bl	801c1d8 <Update_File>
 801c77c:	4603      	mov	r3, r0
 801c77e:	461a      	mov	r2, r3
 801c780:	4b83      	ldr	r3, [pc, #524]	@ (801c990 <csv_update+0x2dc>)
 801c782:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c784:	22ff      	movs	r2, #255	@ 0xff
 801c786:	2100      	movs	r1, #0
 801c788:	4883      	ldr	r0, [pc, #524]	@ (801c998 <csv_update+0x2e4>)
 801c78a:	f002 faa3 	bl	801ecd4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801c78e:	4a86      	ldr	r2, [pc, #536]	@ (801c9a8 <csv_update+0x2f4>)
 801c790:	4980      	ldr	r1, [pc, #512]	@ (801c994 <csv_update+0x2e0>)
 801c792:	4881      	ldr	r0, [pc, #516]	@ (801c998 <csv_update+0x2e4>)
 801c794:	f002 f954 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c798:	497f      	ldr	r1, [pc, #508]	@ (801c998 <csv_update+0x2e4>)
 801c79a:	4880      	ldr	r0, [pc, #512]	@ (801c99c <csv_update+0x2e8>)
 801c79c:	f7ff fd1c 	bl	801c1d8 <Update_File>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	461a      	mov	r2, r3
 801c7a4:	4b7a      	ldr	r3, [pc, #488]	@ (801c990 <csv_update+0x2dc>)
 801c7a6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7a8:	22ff      	movs	r2, #255	@ 0xff
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	487a      	ldr	r0, [pc, #488]	@ (801c998 <csv_update+0x2e4>)
 801c7ae:	f002 fa91 	bl	801ecd4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801c7b2:	4a7e      	ldr	r2, [pc, #504]	@ (801c9ac <csv_update+0x2f8>)
 801c7b4:	4977      	ldr	r1, [pc, #476]	@ (801c994 <csv_update+0x2e0>)
 801c7b6:	4878      	ldr	r0, [pc, #480]	@ (801c998 <csv_update+0x2e4>)
 801c7b8:	f002 f942 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7bc:	4976      	ldr	r1, [pc, #472]	@ (801c998 <csv_update+0x2e4>)
 801c7be:	4877      	ldr	r0, [pc, #476]	@ (801c99c <csv_update+0x2e8>)
 801c7c0:	f7ff fd0a 	bl	801c1d8 <Update_File>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	461a      	mov	r2, r3
 801c7c8:	4b71      	ldr	r3, [pc, #452]	@ (801c990 <csv_update+0x2dc>)
 801c7ca:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7cc:	22ff      	movs	r2, #255	@ 0xff
 801c7ce:	2100      	movs	r1, #0
 801c7d0:	4871      	ldr	r0, [pc, #452]	@ (801c998 <csv_update+0x2e4>)
 801c7d2:	f002 fa7f 	bl	801ecd4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801c7d6:	4a76      	ldr	r2, [pc, #472]	@ (801c9b0 <csv_update+0x2fc>)
 801c7d8:	496e      	ldr	r1, [pc, #440]	@ (801c994 <csv_update+0x2e0>)
 801c7da:	486f      	ldr	r0, [pc, #444]	@ (801c998 <csv_update+0x2e4>)
 801c7dc:	f002 f930 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7e0:	496d      	ldr	r1, [pc, #436]	@ (801c998 <csv_update+0x2e4>)
 801c7e2:	486e      	ldr	r0, [pc, #440]	@ (801c99c <csv_update+0x2e8>)
 801c7e4:	f7ff fcf8 	bl	801c1d8 <Update_File>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	461a      	mov	r2, r3
 801c7ec:	4b68      	ldr	r3, [pc, #416]	@ (801c990 <csv_update+0x2dc>)
 801c7ee:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c7f0:	22ff      	movs	r2, #255	@ 0xff
 801c7f2:	2100      	movs	r1, #0
 801c7f4:	4868      	ldr	r0, [pc, #416]	@ (801c998 <csv_update+0x2e4>)
 801c7f6:	f002 fa6d 	bl	801ecd4 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801c7fa:	4b6e      	ldr	r3, [pc, #440]	@ (801c9b4 <csv_update+0x300>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7e3 feba 	bl	8000578 <__aeabi_f2d>
 801c804:	4602      	mov	r2, r0
 801c806:	460b      	mov	r3, r1
 801c808:	496b      	ldr	r1, [pc, #428]	@ (801c9b8 <csv_update+0x304>)
 801c80a:	4863      	ldr	r0, [pc, #396]	@ (801c998 <csv_update+0x2e4>)
 801c80c:	f002 f918 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c810:	4961      	ldr	r1, [pc, #388]	@ (801c998 <csv_update+0x2e4>)
 801c812:	4862      	ldr	r0, [pc, #392]	@ (801c99c <csv_update+0x2e8>)
 801c814:	f7ff fce0 	bl	801c1d8 <Update_File>
 801c818:	4603      	mov	r3, r0
 801c81a:	461a      	mov	r2, r3
 801c81c:	4b5c      	ldr	r3, [pc, #368]	@ (801c990 <csv_update+0x2dc>)
 801c81e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c820:	22ff      	movs	r2, #255	@ 0xff
 801c822:	2100      	movs	r1, #0
 801c824:	485c      	ldr	r0, [pc, #368]	@ (801c998 <csv_update+0x2e4>)
 801c826:	f002 fa55 	bl	801ecd4 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801c82a:	4b62      	ldr	r3, [pc, #392]	@ (801c9b4 <csv_update+0x300>)
 801c82c:	685b      	ldr	r3, [r3, #4]
 801c82e:	4618      	mov	r0, r3
 801c830:	f7e3 fea2 	bl	8000578 <__aeabi_f2d>
 801c834:	4602      	mov	r2, r0
 801c836:	460b      	mov	r3, r1
 801c838:	495f      	ldr	r1, [pc, #380]	@ (801c9b8 <csv_update+0x304>)
 801c83a:	4857      	ldr	r0, [pc, #348]	@ (801c998 <csv_update+0x2e4>)
 801c83c:	f002 f900 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c840:	4955      	ldr	r1, [pc, #340]	@ (801c998 <csv_update+0x2e4>)
 801c842:	4856      	ldr	r0, [pc, #344]	@ (801c99c <csv_update+0x2e8>)
 801c844:	f7ff fcc8 	bl	801c1d8 <Update_File>
 801c848:	4603      	mov	r3, r0
 801c84a:	461a      	mov	r2, r3
 801c84c:	4b50      	ldr	r3, [pc, #320]	@ (801c990 <csv_update+0x2dc>)
 801c84e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c850:	22ff      	movs	r2, #255	@ 0xff
 801c852:	2100      	movs	r1, #0
 801c854:	4850      	ldr	r0, [pc, #320]	@ (801c998 <csv_update+0x2e4>)
 801c856:	f002 fa3d 	bl	801ecd4 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801c85a:	4b56      	ldr	r3, [pc, #344]	@ (801c9b4 <csv_update+0x300>)
 801c85c:	689b      	ldr	r3, [r3, #8]
 801c85e:	4618      	mov	r0, r3
 801c860:	f7e3 fe8a 	bl	8000578 <__aeabi_f2d>
 801c864:	4602      	mov	r2, r0
 801c866:	460b      	mov	r3, r1
 801c868:	4953      	ldr	r1, [pc, #332]	@ (801c9b8 <csv_update+0x304>)
 801c86a:	484b      	ldr	r0, [pc, #300]	@ (801c998 <csv_update+0x2e4>)
 801c86c:	f002 f8e8 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c870:	4949      	ldr	r1, [pc, #292]	@ (801c998 <csv_update+0x2e4>)
 801c872:	484a      	ldr	r0, [pc, #296]	@ (801c99c <csv_update+0x2e8>)
 801c874:	f7ff fcb0 	bl	801c1d8 <Update_File>
 801c878:	4603      	mov	r3, r0
 801c87a:	461a      	mov	r2, r3
 801c87c:	4b44      	ldr	r3, [pc, #272]	@ (801c990 <csv_update+0x2dc>)
 801c87e:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c880:	22ff      	movs	r2, #255	@ 0xff
 801c882:	2100      	movs	r1, #0
 801c884:	4844      	ldr	r0, [pc, #272]	@ (801c998 <csv_update+0x2e4>)
 801c886:	f002 fa25 	bl	801ecd4 <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801c88a:	4b4a      	ldr	r3, [pc, #296]	@ (801c9b4 <csv_update+0x300>)
 801c88c:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801c88e:	2b01      	cmp	r3, #1
 801c890:	d101      	bne.n	801c896 <csv_update+0x1e2>
 801c892:	4b4a      	ldr	r3, [pc, #296]	@ (801c9bc <csv_update+0x308>)
 801c894:	e000      	b.n	801c898 <csv_update+0x1e4>
 801c896:	4b4a      	ldr	r3, [pc, #296]	@ (801c9c0 <csv_update+0x30c>)
 801c898:	461a      	mov	r2, r3
 801c89a:	493e      	ldr	r1, [pc, #248]	@ (801c994 <csv_update+0x2e0>)
 801c89c:	483e      	ldr	r0, [pc, #248]	@ (801c998 <csv_update+0x2e4>)
 801c89e:	f002 f8cf 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8a2:	493d      	ldr	r1, [pc, #244]	@ (801c998 <csv_update+0x2e4>)
 801c8a4:	483d      	ldr	r0, [pc, #244]	@ (801c99c <csv_update+0x2e8>)
 801c8a6:	f7ff fc97 	bl	801c1d8 <Update_File>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	461a      	mov	r2, r3
 801c8ae:	4b38      	ldr	r3, [pc, #224]	@ (801c990 <csv_update+0x2dc>)
 801c8b0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8b2:	22ff      	movs	r2, #255	@ 0xff
 801c8b4:	2100      	movs	r1, #0
 801c8b6:	4838      	ldr	r0, [pc, #224]	@ (801c998 <csv_update+0x2e4>)
 801c8b8:	f002 fa0c 	bl	801ecd4 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801c8bc:	4b3d      	ldr	r3, [pc, #244]	@ (801c9b4 <csv_update+0x300>)
 801c8be:	695b      	ldr	r3, [r3, #20]
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	f7e3 fe59 	bl	8000578 <__aeabi_f2d>
 801c8c6:	4602      	mov	r2, r0
 801c8c8:	460b      	mov	r3, r1
 801c8ca:	493e      	ldr	r1, [pc, #248]	@ (801c9c4 <csv_update+0x310>)
 801c8cc:	4832      	ldr	r0, [pc, #200]	@ (801c998 <csv_update+0x2e4>)
 801c8ce:	f002 f8b7 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8d2:	4931      	ldr	r1, [pc, #196]	@ (801c998 <csv_update+0x2e4>)
 801c8d4:	4831      	ldr	r0, [pc, #196]	@ (801c99c <csv_update+0x2e8>)
 801c8d6:	f7ff fc7f 	bl	801c1d8 <Update_File>
 801c8da:	4603      	mov	r3, r0
 801c8dc:	461a      	mov	r2, r3
 801c8de:	4b2c      	ldr	r3, [pc, #176]	@ (801c990 <csv_update+0x2dc>)
 801c8e0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8e2:	22ff      	movs	r2, #255	@ 0xff
 801c8e4:	2100      	movs	r1, #0
 801c8e6:	482c      	ldr	r0, [pc, #176]	@ (801c998 <csv_update+0x2e4>)
 801c8e8:	f002 f9f4 	bl	801ecd4 <memset>
		sprintf(buffer, "NONE ,");
 801c8ec:	4936      	ldr	r1, [pc, #216]	@ (801c9c8 <csv_update+0x314>)
 801c8ee:	482a      	ldr	r0, [pc, #168]	@ (801c998 <csv_update+0x2e4>)
 801c8f0:	f002 f8a6 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8f4:	4928      	ldr	r1, [pc, #160]	@ (801c998 <csv_update+0x2e4>)
 801c8f6:	4829      	ldr	r0, [pc, #164]	@ (801c99c <csv_update+0x2e8>)
 801c8f8:	f7ff fc6e 	bl	801c1d8 <Update_File>
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	461a      	mov	r2, r3
 801c900:	4b23      	ldr	r3, [pc, #140]	@ (801c990 <csv_update+0x2dc>)
 801c902:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c904:	22ff      	movs	r2, #255	@ 0xff
 801c906:	2100      	movs	r1, #0
 801c908:	4823      	ldr	r0, [pc, #140]	@ (801c998 <csv_update+0x2e4>)
 801c90a:	f002 f9e3 	bl	801ecd4 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801c90e:	4b29      	ldr	r3, [pc, #164]	@ (801c9b4 <csv_update+0x300>)
 801c910:	6a1b      	ldr	r3, [r3, #32]
 801c912:	4618      	mov	r0, r3
 801c914:	f7e3 fe30 	bl	8000578 <__aeabi_f2d>
 801c918:	4602      	mov	r2, r0
 801c91a:	460b      	mov	r3, r1
 801c91c:	4929      	ldr	r1, [pc, #164]	@ (801c9c4 <csv_update+0x310>)
 801c91e:	481e      	ldr	r0, [pc, #120]	@ (801c998 <csv_update+0x2e4>)
 801c920:	f002 f88e 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c924:	491c      	ldr	r1, [pc, #112]	@ (801c998 <csv_update+0x2e4>)
 801c926:	481d      	ldr	r0, [pc, #116]	@ (801c99c <csv_update+0x2e8>)
 801c928:	f7ff fc56 	bl	801c1d8 <Update_File>
 801c92c:	4603      	mov	r3, r0
 801c92e:	461a      	mov	r2, r3
 801c930:	4b17      	ldr	r3, [pc, #92]	@ (801c990 <csv_update+0x2dc>)
 801c932:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c934:	22ff      	movs	r2, #255	@ 0xff
 801c936:	2100      	movs	r1, #0
 801c938:	4817      	ldr	r0, [pc, #92]	@ (801c998 <csv_update+0x2e4>)
 801c93a:	f002 f9cb 	bl	801ecd4 <memset>
		sprintf(buffer, "\n");
 801c93e:	4923      	ldr	r1, [pc, #140]	@ (801c9cc <csv_update+0x318>)
 801c940:	4815      	ldr	r0, [pc, #84]	@ (801c998 <csv_update+0x2e4>)
 801c942:	f002 f87d 	bl	801ea40 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c946:	4914      	ldr	r1, [pc, #80]	@ (801c998 <csv_update+0x2e4>)
 801c948:	4814      	ldr	r0, [pc, #80]	@ (801c99c <csv_update+0x2e8>)
 801c94a:	f7ff fc45 	bl	801c1d8 <Update_File>
 801c94e:	4603      	mov	r3, r0
 801c950:	461a      	mov	r2, r3
 801c952:	4b0f      	ldr	r3, [pc, #60]	@ (801c990 <csv_update+0x2dc>)
 801c954:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c956:	480d      	ldr	r0, [pc, #52]	@ (801c98c <csv_update+0x2d8>)
 801c958:	f7ff fb7c 	bl	801c054 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c95c:	4b0c      	ldr	r3, [pc, #48]	@ (801c990 <csv_update+0x2dc>)
 801c95e:	781b      	ldrb	r3, [r3, #0]
 801c960:	b25a      	sxtb	r2, r3
 801c962:	4b14      	ldr	r3, [pc, #80]	@ (801c9b4 <csv_update+0x300>)
 801c964:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c968:	bf00      	nop
 801c96a:	3718      	adds	r7, #24
 801c96c:	46bd      	mov	sp, r7
 801c96e:	bd80      	pop	{r7, pc}
 801c970:	20001898 	.word	0x20001898
 801c974:	20002322 	.word	0x20002322
 801c978:	20002323 	.word	0x20002323
 801c97c:	20002324 	.word	0x20002324
 801c980:	20002325 	.word	0x20002325
 801c984:	20002326 	.word	0x20002326
 801c988:	20002327 	.word	0x20002327
 801c98c:	08024af0 	.word	0x08024af0
 801c990:	20002320 	.word	0x20002320
 801c994:	08024c04 	.word	0x08024c04
 801c998:	2000232c 	.word	0x2000232c
 801c99c:	20001461 	.word	0x20001461
 801c9a0:	20001399 	.word	0x20001399
 801c9a4:	08024c0c 	.word	0x08024c0c
 801c9a8:	200013cb 	.word	0x200013cb
 801c9ac:	200014c5 	.word	0x200014c5
 801c9b0:	2000142f 	.word	0x2000142f
 801c9b4:	20001530 	.word	0x20001530
 801c9b8:	08024c20 	.word	0x08024c20
 801c9bc:	08024ba8 	.word	0x08024ba8
 801c9c0:	08024bb0 	.word	0x08024bb0
 801c9c4:	08024c28 	.word	0x08024c28
 801c9c8:	08024c30 	.word	0x08024c30
 801c9cc:	08024c38 	.word	0x08024c38

0801c9d0 <csv_header>:
void csv_header() {
 801c9d0:	b580      	push	{r7, lr}
 801c9d2:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801c9d4:	485d      	ldr	r0, [pc, #372]	@ (801cb4c <csv_header+0x17c>)
 801c9d6:	f7ff fb11 	bl	801bffc <Mount_SD>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	461a      	mov	r2, r3
 801c9de:	4b5c      	ldr	r3, [pc, #368]	@ (801cb50 <csv_header+0x180>)
 801c9e0:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c9e2:	4b5b      	ldr	r3, [pc, #364]	@ (801cb50 <csv_header+0x180>)
 801c9e4:	781b      	ldrb	r3, [r3, #0]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	f040 80a7 	bne.w	801cb3a <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801c9ec:	4959      	ldr	r1, [pc, #356]	@ (801cb54 <csv_header+0x184>)
 801c9ee:	485a      	ldr	r0, [pc, #360]	@ (801cb58 <csv_header+0x188>)
 801c9f0:	f002 f826 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9f4:	4958      	ldr	r1, [pc, #352]	@ (801cb58 <csv_header+0x188>)
 801c9f6:	4859      	ldr	r0, [pc, #356]	@ (801cb5c <csv_header+0x18c>)
 801c9f8:	f7ff fbee 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c9fc:	22ff      	movs	r2, #255	@ 0xff
 801c9fe:	2100      	movs	r1, #0
 801ca00:	4855      	ldr	r0, [pc, #340]	@ (801cb58 <csv_header+0x188>)
 801ca02:	f002 f967 	bl	801ecd4 <memset>
		sprintf(buffer, "id ,");
 801ca06:	4956      	ldr	r1, [pc, #344]	@ (801cb60 <csv_header+0x190>)
 801ca08:	4853      	ldr	r0, [pc, #332]	@ (801cb58 <csv_header+0x188>)
 801ca0a:	f002 f819 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca0e:	4952      	ldr	r1, [pc, #328]	@ (801cb58 <csv_header+0x188>)
 801ca10:	4852      	ldr	r0, [pc, #328]	@ (801cb5c <csv_header+0x18c>)
 801ca12:	f7ff fbe1 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca16:	22ff      	movs	r2, #255	@ 0xff
 801ca18:	2100      	movs	r1, #0
 801ca1a:	484f      	ldr	r0, [pc, #316]	@ (801cb58 <csv_header+0x188>)
 801ca1c:	f002 f95a 	bl	801ecd4 <memset>
		sprintf(buffer, "timestamp ,");
 801ca20:	4950      	ldr	r1, [pc, #320]	@ (801cb64 <csv_header+0x194>)
 801ca22:	484d      	ldr	r0, [pc, #308]	@ (801cb58 <csv_header+0x188>)
 801ca24:	f002 f80c 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca28:	494b      	ldr	r1, [pc, #300]	@ (801cb58 <csv_header+0x188>)
 801ca2a:	484c      	ldr	r0, [pc, #304]	@ (801cb5c <csv_header+0x18c>)
 801ca2c:	f7ff fbd4 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca30:	22ff      	movs	r2, #255	@ 0xff
 801ca32:	2100      	movs	r1, #0
 801ca34:	4848      	ldr	r0, [pc, #288]	@ (801cb58 <csv_header+0x188>)
 801ca36:	f002 f94d 	bl	801ecd4 <memset>
		sprintf(buffer, "location ,");
 801ca3a:	494b      	ldr	r1, [pc, #300]	@ (801cb68 <csv_header+0x198>)
 801ca3c:	4846      	ldr	r0, [pc, #280]	@ (801cb58 <csv_header+0x188>)
 801ca3e:	f001 ffff 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca42:	4945      	ldr	r1, [pc, #276]	@ (801cb58 <csv_header+0x188>)
 801ca44:	4845      	ldr	r0, [pc, #276]	@ (801cb5c <csv_header+0x18c>)
 801ca46:	f7ff fbc7 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca4a:	22ff      	movs	r2, #255	@ 0xff
 801ca4c:	2100      	movs	r1, #0
 801ca4e:	4842      	ldr	r0, [pc, #264]	@ (801cb58 <csv_header+0x188>)
 801ca50:	f002 f940 	bl	801ecd4 <memset>
		sprintf(buffer, "Filename ,");
 801ca54:	4945      	ldr	r1, [pc, #276]	@ (801cb6c <csv_header+0x19c>)
 801ca56:	4840      	ldr	r0, [pc, #256]	@ (801cb58 <csv_header+0x188>)
 801ca58:	f001 fff2 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca5c:	493e      	ldr	r1, [pc, #248]	@ (801cb58 <csv_header+0x188>)
 801ca5e:	483f      	ldr	r0, [pc, #252]	@ (801cb5c <csv_header+0x18c>)
 801ca60:	f7ff fbba 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca64:	22ff      	movs	r2, #255	@ 0xff
 801ca66:	2100      	movs	r1, #0
 801ca68:	483b      	ldr	r0, [pc, #236]	@ (801cb58 <csv_header+0x188>)
 801ca6a:	f002 f933 	bl	801ecd4 <memset>
		sprintf(buffer, "group ,");
 801ca6e:	4940      	ldr	r1, [pc, #256]	@ (801cb70 <csv_header+0x1a0>)
 801ca70:	4839      	ldr	r0, [pc, #228]	@ (801cb58 <csv_header+0x188>)
 801ca72:	f001 ffe5 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca76:	4938      	ldr	r1, [pc, #224]	@ (801cb58 <csv_header+0x188>)
 801ca78:	4838      	ldr	r0, [pc, #224]	@ (801cb5c <csv_header+0x18c>)
 801ca7a:	f7ff fbad 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca7e:	22ff      	movs	r2, #255	@ 0xff
 801ca80:	2100      	movs	r1, #0
 801ca82:	4835      	ldr	r0, [pc, #212]	@ (801cb58 <csv_header+0x188>)
 801ca84:	f002 f926 	bl	801ecd4 <memset>
		sprintf(buffer, "co2 ,");
 801ca88:	493a      	ldr	r1, [pc, #232]	@ (801cb74 <csv_header+0x1a4>)
 801ca8a:	4833      	ldr	r0, [pc, #204]	@ (801cb58 <csv_header+0x188>)
 801ca8c:	f001 ffd8 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca90:	4931      	ldr	r1, [pc, #196]	@ (801cb58 <csv_header+0x188>)
 801ca92:	4832      	ldr	r0, [pc, #200]	@ (801cb5c <csv_header+0x18c>)
 801ca94:	f7ff fba0 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca98:	22ff      	movs	r2, #255	@ 0xff
 801ca9a:	2100      	movs	r1, #0
 801ca9c:	482e      	ldr	r0, [pc, #184]	@ (801cb58 <csv_header+0x188>)
 801ca9e:	f002 f919 	bl	801ecd4 <memset>
		sprintf(buffer, "temperature ,");
 801caa2:	4935      	ldr	r1, [pc, #212]	@ (801cb78 <csv_header+0x1a8>)
 801caa4:	482c      	ldr	r0, [pc, #176]	@ (801cb58 <csv_header+0x188>)
 801caa6:	f001 ffcb 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caaa:	492b      	ldr	r1, [pc, #172]	@ (801cb58 <csv_header+0x188>)
 801caac:	482b      	ldr	r0, [pc, #172]	@ (801cb5c <csv_header+0x18c>)
 801caae:	f7ff fb93 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cab2:	22ff      	movs	r2, #255	@ 0xff
 801cab4:	2100      	movs	r1, #0
 801cab6:	4828      	ldr	r0, [pc, #160]	@ (801cb58 <csv_header+0x188>)
 801cab8:	f002 f90c 	bl	801ecd4 <memset>
		sprintf(buffer, "humidity ,");
 801cabc:	492f      	ldr	r1, [pc, #188]	@ (801cb7c <csv_header+0x1ac>)
 801cabe:	4826      	ldr	r0, [pc, #152]	@ (801cb58 <csv_header+0x188>)
 801cac0:	f001 ffbe 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cac4:	4924      	ldr	r1, [pc, #144]	@ (801cb58 <csv_header+0x188>)
 801cac6:	4825      	ldr	r0, [pc, #148]	@ (801cb5c <csv_header+0x18c>)
 801cac8:	f7ff fb86 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cacc:	22ff      	movs	r2, #255	@ 0xff
 801cace:	2100      	movs	r1, #0
 801cad0:	4821      	ldr	r0, [pc, #132]	@ (801cb58 <csv_header+0x188>)
 801cad2:	f002 f8ff 	bl	801ecd4 <memset>
		sprintf(buffer, "pir ,");
 801cad6:	492a      	ldr	r1, [pc, #168]	@ (801cb80 <csv_header+0x1b0>)
 801cad8:	481f      	ldr	r0, [pc, #124]	@ (801cb58 <csv_header+0x188>)
 801cada:	f001 ffb1 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cade:	491e      	ldr	r1, [pc, #120]	@ (801cb58 <csv_header+0x188>)
 801cae0:	481e      	ldr	r0, [pc, #120]	@ (801cb5c <csv_header+0x18c>)
 801cae2:	f7ff fb79 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cae6:	22ff      	movs	r2, #255	@ 0xff
 801cae8:	2100      	movs	r1, #0
 801caea:	481b      	ldr	r0, [pc, #108]	@ (801cb58 <csv_header+0x188>)
 801caec:	f002 f8f2 	bl	801ecd4 <memset>
		sprintf(buffer, "pm2.5 ,");
 801caf0:	4924      	ldr	r1, [pc, #144]	@ (801cb84 <csv_header+0x1b4>)
 801caf2:	4819      	ldr	r0, [pc, #100]	@ (801cb58 <csv_header+0x188>)
 801caf4:	f001 ffa4 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caf8:	4917      	ldr	r1, [pc, #92]	@ (801cb58 <csv_header+0x188>)
 801cafa:	4818      	ldr	r0, [pc, #96]	@ (801cb5c <csv_header+0x18c>)
 801cafc:	f7ff fb6c 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb00:	22ff      	movs	r2, #255	@ 0xff
 801cb02:	2100      	movs	r1, #0
 801cb04:	4814      	ldr	r0, [pc, #80]	@ (801cb58 <csv_header+0x188>)
 801cb06:	f002 f8e5 	bl	801ecd4 <memset>
		sprintf(buffer, "port ,");
 801cb0a:	491f      	ldr	r1, [pc, #124]	@ (801cb88 <csv_header+0x1b8>)
 801cb0c:	4812      	ldr	r0, [pc, #72]	@ (801cb58 <csv_header+0x188>)
 801cb0e:	f001 ff97 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb12:	4911      	ldr	r1, [pc, #68]	@ (801cb58 <csv_header+0x188>)
 801cb14:	4811      	ldr	r0, [pc, #68]	@ (801cb5c <csv_header+0x18c>)
 801cb16:	f7ff fb5f 	bl	801c1d8 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb1a:	22ff      	movs	r2, #255	@ 0xff
 801cb1c:	2100      	movs	r1, #0
 801cb1e:	480e      	ldr	r0, [pc, #56]	@ (801cb58 <csv_header+0x188>)
 801cb20:	f002 f8d8 	bl	801ecd4 <memset>
		sprintf(buffer, "battery \n\n");
 801cb24:	4919      	ldr	r1, [pc, #100]	@ (801cb8c <csv_header+0x1bc>)
 801cb26:	480c      	ldr	r0, [pc, #48]	@ (801cb58 <csv_header+0x188>)
 801cb28:	f001 ff8a 	bl	801ea40 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb2c:	490a      	ldr	r1, [pc, #40]	@ (801cb58 <csv_header+0x188>)
 801cb2e:	480b      	ldr	r0, [pc, #44]	@ (801cb5c <csv_header+0x18c>)
 801cb30:	f7ff fb52 	bl	801c1d8 <Update_File>

		Unmount_SD("/");
 801cb34:	4805      	ldr	r0, [pc, #20]	@ (801cb4c <csv_header+0x17c>)
 801cb36:	f7ff fa8d 	bl	801c054 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801cb3a:	4b05      	ldr	r3, [pc, #20]	@ (801cb50 <csv_header+0x180>)
 801cb3c:	781b      	ldrb	r3, [r3, #0]
 801cb3e:	b25a      	sxtb	r2, r3
 801cb40:	4b13      	ldr	r3, [pc, #76]	@ (801cb90 <csv_header+0x1c0>)
 801cb42:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801cb46:	bf00      	nop
 801cb48:	bd80      	pop	{r7, pc}
 801cb4a:	bf00      	nop
 801cb4c:	08024af0 	.word	0x08024af0
 801cb50:	20002320 	.word	0x20002320
 801cb54:	08024c3c 	.word	0x08024c3c
 801cb58:	2000232c 	.word	0x2000232c
 801cb5c:	20001461 	.word	0x20001461
 801cb60:	08024c48 	.word	0x08024c48
 801cb64:	08024c50 	.word	0x08024c50
 801cb68:	08024c5c 	.word	0x08024c5c
 801cb6c:	08024c68 	.word	0x08024c68
 801cb70:	08024c74 	.word	0x08024c74
 801cb74:	08024c7c 	.word	0x08024c7c
 801cb78:	08024c84 	.word	0x08024c84
 801cb7c:	08024c94 	.word	0x08024c94
 801cb80:	08024ca0 	.word	0x08024ca0
 801cb84:	08024ca8 	.word	0x08024ca8
 801cb88:	08024cb0 	.word	0x08024cb0
 801cb8c:	08024cb8 	.word	0x08024cb8
 801cb90:	20001530 	.word	0x20001530

0801cb94 <filesaving_process>:
uint8_t filesaving_process() {
 801cb94:	b580      	push	{r7, lr}
 801cb96:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801cb98:	22ff      	movs	r2, #255	@ 0xff
 801cb9a:	2100      	movs	r1, #0
 801cb9c:	480f      	ldr	r0, [pc, #60]	@ (801cbdc <filesaving_process+0x48>)
 801cb9e:	f002 f899 	bl	801ecd4 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801cba2:	4b0f      	ldr	r3, [pc, #60]	@ (801cbe0 <filesaving_process+0x4c>)
 801cba4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d002      	beq.n	801cbb2 <filesaving_process+0x1e>
		csv_update();
 801cbac:	f7ff fd82 	bl	801c6b4 <csv_update>
 801cbb0:	e001      	b.n	801cbb6 <filesaving_process+0x22>
	} else {
		json_update();
 801cbb2:	f7ff fbcd 	bl	801c350 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801cbb6:	4b0a      	ldr	r3, [pc, #40]	@ (801cbe0 <filesaving_process+0x4c>)
 801cbb8:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d006      	beq.n	801cbce <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801cbc0:	f7e5 fa54 	bl	800206c <blink_red>
		datawritten = 2;
 801cbc4:	4b07      	ldr	r3, [pc, #28]	@ (801cbe4 <filesaving_process+0x50>)
 801cbc6:	2202      	movs	r2, #2
 801cbc8:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801cbca:	2301      	movs	r3, #1
 801cbcc:	e003      	b.n	801cbd6 <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801cbce:	4b05      	ldr	r3, [pc, #20]	@ (801cbe4 <filesaving_process+0x50>)
 801cbd0:	2201      	movs	r2, #1
 801cbd2:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801cbd4:	2300      	movs	r3, #0
//	__enable_irq();
}
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	bd80      	pop	{r7, pc}
 801cbda:	bf00      	nop
 801cbdc:	2000232c 	.word	0x2000232c
 801cbe0:	20001530 	.word	0x20001530
 801cbe4:	20002328 	.word	0x20002328

0801cbe8 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b08c      	sub	sp, #48	@ 0x30
 801cbec:	af04      	add	r7, sp, #16
 801cbee:	6078      	str	r0, [r7, #4]
 801cbf0:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801cbf2:	f107 031c 	add.w	r3, r7, #28
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	4619      	mov	r1, r3
 801cbfa:	4832      	ldr	r0, [pc, #200]	@ (801ccc4 <createfile+0xdc>)
 801cbfc:	f7ec ff9d 	bl	8009b3a <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801cc00:	f107 0308 	add.w	r3, r7, #8
 801cc04:	2200      	movs	r2, #0
 801cc06:	4619      	mov	r1, r3
 801cc08:	482e      	ldr	r0, [pc, #184]	@ (801ccc4 <createfile+0xdc>)
 801cc0a:	f7ec feb4 	bl	8009976 <HAL_RTC_GetTime>

	sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801cc0e:	7ffb      	ldrb	r3, [r7, #31]
 801cc10:	4618      	mov	r0, r3
 801cc12:	7f7b      	ldrb	r3, [r7, #29]
 801cc14:	461a      	mov	r2, r3
 801cc16:	7fbb      	ldrb	r3, [r7, #30]
 801cc18:	4619      	mov	r1, r3
 801cc1a:	683b      	ldr	r3, [r7, #0]
 801cc1c:	9302      	str	r3, [sp, #8]
 801cc1e:	9101      	str	r1, [sp, #4]
 801cc20:	9200      	str	r2, [sp, #0]
 801cc22:	4603      	mov	r3, r0
 801cc24:	687a      	ldr	r2, [r7, #4]
 801cc26:	4928      	ldr	r1, [pc, #160]	@ (801ccc8 <createfile+0xe0>)
 801cc28:	4828      	ldr	r0, [pc, #160]	@ (801cccc <createfile+0xe4>)
 801cc2a:	f001 ff09 	bl	801ea40 <siprintf>
	sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801cc2e:	7ffb      	ldrb	r3, [r7, #31]
 801cc30:	4619      	mov	r1, r3
 801cc32:	7f7b      	ldrb	r3, [r7, #29]
 801cc34:	7fba      	ldrb	r2, [r7, #30]
 801cc36:	9201      	str	r2, [sp, #4]
 801cc38:	9300      	str	r3, [sp, #0]
 801cc3a:	460b      	mov	r3, r1
 801cc3c:	687a      	ldr	r2, [r7, #4]
 801cc3e:	4924      	ldr	r1, [pc, #144]	@ (801ccd0 <createfile+0xe8>)
 801cc40:	4824      	ldr	r0, [pc, #144]	@ (801ccd4 <createfile+0xec>)
 801cc42:	f001 fefd 	bl	801ea40 <siprintf>

	set_param_flags();
 801cc46:	4b24      	ldr	r3, [pc, #144]	@ (801ccd8 <createfile+0xf0>)
 801cc48:	2201      	movs	r2, #1
 801cc4a:	701a      	strb	r2, [r3, #0]
 801cc4c:	4b23      	ldr	r3, [pc, #140]	@ (801ccdc <createfile+0xf4>)
 801cc4e:	2201      	movs	r2, #1
 801cc50:	701a      	strb	r2, [r3, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801cc52:	4823      	ldr	r0, [pc, #140]	@ (801cce0 <createfile+0xf8>)
 801cc54:	f7ff f9d2 	bl	801bffc <Mount_SD>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d002      	beq.n	801cc64 <createfile+0x7c>
	} else {
		//	__enable_irq();
		return -1;
 801cc5e:	f04f 33ff 	mov.w	r3, #4294967295
 801cc62:	e02b      	b.n	801ccbc <createfile+0xd4>
	}
	Unmount_SD("/");
 801cc64:	481e      	ldr	r0, [pc, #120]	@ (801cce0 <createfile+0xf8>)
 801cc66:	f7ff f9f5 	bl	801c054 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801cc6a:	481d      	ldr	r0, [pc, #116]	@ (801cce0 <createfile+0xf8>)
 801cc6c:	f7ff f9c6 	bl	801bffc <Mount_SD>
 801cc70:	4603      	mov	r3, r0
 801cc72:	461a      	mov	r2, r3
 801cc74:	4b1b      	ldr	r3, [pc, #108]	@ (801cce4 <createfile+0xfc>)
 801cc76:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801cc78:	4b1a      	ldr	r3, [pc, #104]	@ (801cce4 <createfile+0xfc>)
 801cc7a:	781b      	ldrb	r3, [r3, #0]
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d119      	bne.n	801ccb4 <createfile+0xcc>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801cc80:	4812      	ldr	r0, [pc, #72]	@ (801cccc <createfile+0xe4>)
 801cc82:	f7ff fa0f 	bl	801c0a4 <Create_File>
 801cc86:	4603      	mov	r3, r0
 801cc88:	461a      	mov	r2, r3
 801cc8a:	4b16      	ldr	r3, [pc, #88]	@ (801cce4 <createfile+0xfc>)
 801cc8c:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801cc8e:	4814      	ldr	r0, [pc, #80]	@ (801cce0 <createfile+0xf8>)
 801cc90:	f7ff f9e0 	bl	801c054 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801cc94:	4b14      	ldr	r3, [pc, #80]	@ (801cce8 <createfile+0x100>)
 801cc96:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d00d      	beq.n	801ccba <createfile+0xd2>
			if (file_already_exist) {
 801cc9e:	4b13      	ldr	r3, [pc, #76]	@ (801ccec <createfile+0x104>)
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d003      	beq.n	801ccae <createfile+0xc6>
				file_already_exist = 0;
 801cca6:	4b11      	ldr	r3, [pc, #68]	@ (801ccec <createfile+0x104>)
 801cca8:	2200      	movs	r2, #0
 801ccaa:	701a      	strb	r2, [r3, #0]
 801ccac:	e005      	b.n	801ccba <createfile+0xd2>
			} else {
				csv_header();  //json does not require an header only csv
 801ccae:	f7ff fe8f 	bl	801c9d0 <csv_header>
 801ccb2:	e002      	b.n	801ccba <createfile+0xd2>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801ccb4:	f04f 33ff 	mov.w	r3, #4294967295
 801ccb8:	e000      	b.n	801ccbc <createfile+0xd4>
	}
//	__enable_irq();
	return 0;
 801ccba:	2300      	movs	r3, #0
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3720      	adds	r7, #32
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}
 801ccc4:	20001898 	.word	0x20001898
 801ccc8:	08024cc4 	.word	0x08024cc4
 801cccc:	20001461 	.word	0x20001461
 801ccd0:	08024cd8 	.word	0x08024cd8
 801ccd4:	200014c5 	.word	0x200014c5
 801ccd8:	20001579 	.word	0x20001579
 801ccdc:	2000157a 	.word	0x2000157a
 801cce0:	08024af0 	.word	0x08024af0
 801cce4:	20002320 	.word	0x20002320
 801cce8:	20001530 	.word	0x20001530
 801ccec:	20002321 	.word	0x20002321

0801ccf0 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801ccf4:	4905      	ldr	r1, [pc, #20]	@ (801cd0c <MX_USB_DEVICE_DeInit+0x1c>)
 801ccf6:	4806      	ldr	r0, [pc, #24]	@ (801cd10 <MX_USB_DEVICE_DeInit+0x20>)
 801ccf8:	f7f8 ff90 	bl	8015c1c <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801ccfc:	4804      	ldr	r0, [pc, #16]	@ (801cd10 <MX_USB_DEVICE_DeInit+0x20>)
 801ccfe:	f7fa ff86 	bl	8017c0e <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801cd02:	4803      	ldr	r0, [pc, #12]	@ (801cd10 <MX_USB_DEVICE_DeInit+0x20>)
 801cd04:	f7fa ff11 	bl	8017b2a <USBD_DeInit>

}
 801cd08:	bf00      	nop
 801cd0a:	bd80      	pop	{r7, pc}
 801cd0c:	2000011c 	.word	0x2000011c
 801cd10:	2000242c 	.word	0x2000242c

0801cd14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cd14:	b580      	push	{r7, lr}
 801cd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cd18:	2200      	movs	r2, #0
 801cd1a:	4912      	ldr	r1, [pc, #72]	@ (801cd64 <MX_USB_DEVICE_Init+0x50>)
 801cd1c:	4812      	ldr	r0, [pc, #72]	@ (801cd68 <MX_USB_DEVICE_Init+0x54>)
 801cd1e:	f7fa fed4 	bl	8017aca <USBD_Init>
 801cd22:	4603      	mov	r3, r0
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d001      	beq.n	801cd2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cd28:	f7e6 fc9e 	bl	8003668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801cd2c:	490f      	ldr	r1, [pc, #60]	@ (801cd6c <MX_USB_DEVICE_Init+0x58>)
 801cd2e:	480e      	ldr	r0, [pc, #56]	@ (801cd68 <MX_USB_DEVICE_Init+0x54>)
 801cd30:	f7fa ff2b 	bl	8017b8a <USBD_RegisterClass>
 801cd34:	4603      	mov	r3, r0
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d001      	beq.n	801cd3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801cd3a:	f7e6 fc95 	bl	8003668 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801cd3e:	490c      	ldr	r1, [pc, #48]	@ (801cd70 <MX_USB_DEVICE_Init+0x5c>)
 801cd40:	4809      	ldr	r0, [pc, #36]	@ (801cd68 <MX_USB_DEVICE_Init+0x54>)
 801cd42:	f7f9 f973 	bl	801602c <USBD_MSC_RegisterStorage>
 801cd46:	4603      	mov	r3, r0
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d001      	beq.n	801cd50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801cd4c:	f7e6 fc8c 	bl	8003668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cd50:	4805      	ldr	r0, [pc, #20]	@ (801cd68 <MX_USB_DEVICE_Init+0x54>)
 801cd52:	f7fa ff50 	bl	8017bf6 <USBD_Start>
 801cd56:	4603      	mov	r3, r0
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d001      	beq.n	801cd60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801cd5c:	f7e6 fc84 	bl	8003668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cd60:	bf00      	nop
 801cd62:	bd80      	pop	{r7, pc}
 801cd64:	200000cc 	.word	0x200000cc
 801cd68:	2000242c 	.word	0x2000242c
 801cd6c:	2000004c 	.word	0x2000004c
 801cd70:	2000011c 	.word	0x2000011c

0801cd74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd74:	b480      	push	{r7}
 801cd76:	b083      	sub	sp, #12
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	6039      	str	r1, [r7, #0]
 801cd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cd80:	683b      	ldr	r3, [r7, #0]
 801cd82:	2212      	movs	r2, #18
 801cd84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cd86:	4b03      	ldr	r3, [pc, #12]	@ (801cd94 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cd88:	4618      	mov	r0, r3
 801cd8a:	370c      	adds	r7, #12
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd92:	4770      	bx	lr
 801cd94:	200000e8 	.word	0x200000e8

0801cd98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd98:	b480      	push	{r7}
 801cd9a:	b083      	sub	sp, #12
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	4603      	mov	r3, r0
 801cda0:	6039      	str	r1, [r7, #0]
 801cda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cda4:	683b      	ldr	r3, [r7, #0]
 801cda6:	2204      	movs	r2, #4
 801cda8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cdaa:	4b03      	ldr	r3, [pc, #12]	@ (801cdb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cdac:	4618      	mov	r0, r3
 801cdae:	370c      	adds	r7, #12
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdb6:	4770      	bx	lr
 801cdb8:	200000fc 	.word	0x200000fc

0801cdbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b082      	sub	sp, #8
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	6039      	str	r1, [r7, #0]
 801cdc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cdc8:	79fb      	ldrb	r3, [r7, #7]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d105      	bne.n	801cdda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cdce:	683a      	ldr	r2, [r7, #0]
 801cdd0:	4907      	ldr	r1, [pc, #28]	@ (801cdf0 <USBD_FS_ProductStrDescriptor+0x34>)
 801cdd2:	4808      	ldr	r0, [pc, #32]	@ (801cdf4 <USBD_FS_ProductStrDescriptor+0x38>)
 801cdd4:	f7fc f8da 	bl	8018f8c <USBD_GetString>
 801cdd8:	e004      	b.n	801cde4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cdda:	683a      	ldr	r2, [r7, #0]
 801cddc:	4904      	ldr	r1, [pc, #16]	@ (801cdf0 <USBD_FS_ProductStrDescriptor+0x34>)
 801cdde:	4805      	ldr	r0, [pc, #20]	@ (801cdf4 <USBD_FS_ProductStrDescriptor+0x38>)
 801cde0:	f7fc f8d4 	bl	8018f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 801cde4:	4b02      	ldr	r3, [pc, #8]	@ (801cdf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801cde6:	4618      	mov	r0, r3
 801cde8:	3708      	adds	r7, #8
 801cdea:	46bd      	mov	sp, r7
 801cdec:	bd80      	pop	{r7, pc}
 801cdee:	bf00      	nop
 801cdf0:	20002708 	.word	0x20002708
 801cdf4:	08024cec 	.word	0x08024cec

0801cdf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b082      	sub	sp, #8
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	4603      	mov	r3, r0
 801ce00:	6039      	str	r1, [r7, #0]
 801ce02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ce04:	683a      	ldr	r2, [r7, #0]
 801ce06:	4904      	ldr	r1, [pc, #16]	@ (801ce18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ce08:	4804      	ldr	r0, [pc, #16]	@ (801ce1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ce0a:	f7fc f8bf 	bl	8018f8c <USBD_GetString>
  return USBD_StrDesc;
 801ce0e:	4b02      	ldr	r3, [pc, #8]	@ (801ce18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801ce10:	4618      	mov	r0, r3
 801ce12:	3708      	adds	r7, #8
 801ce14:	46bd      	mov	sp, r7
 801ce16:	bd80      	pop	{r7, pc}
 801ce18:	20002708 	.word	0x20002708
 801ce1c:	08024d00 	.word	0x08024d00

0801ce20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce20:	b580      	push	{r7, lr}
 801ce22:	b082      	sub	sp, #8
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	4603      	mov	r3, r0
 801ce28:	6039      	str	r1, [r7, #0]
 801ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ce2c:	683b      	ldr	r3, [r7, #0]
 801ce2e:	221a      	movs	r2, #26
 801ce30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ce32:	f000 f843 	bl	801cebc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ce36:	4b02      	ldr	r3, [pc, #8]	@ (801ce40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801ce38:	4618      	mov	r0, r3
 801ce3a:	3708      	adds	r7, #8
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	bd80      	pop	{r7, pc}
 801ce40:	20000100 	.word	0x20000100

0801ce44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	6039      	str	r1, [r7, #0]
 801ce4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ce50:	79fb      	ldrb	r3, [r7, #7]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d105      	bne.n	801ce62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce56:	683a      	ldr	r2, [r7, #0]
 801ce58:	4907      	ldr	r1, [pc, #28]	@ (801ce78 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ce5a:	4808      	ldr	r0, [pc, #32]	@ (801ce7c <USBD_FS_ConfigStrDescriptor+0x38>)
 801ce5c:	f7fc f896 	bl	8018f8c <USBD_GetString>
 801ce60:	e004      	b.n	801ce6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce62:	683a      	ldr	r2, [r7, #0]
 801ce64:	4904      	ldr	r1, [pc, #16]	@ (801ce78 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ce66:	4805      	ldr	r0, [pc, #20]	@ (801ce7c <USBD_FS_ConfigStrDescriptor+0x38>)
 801ce68:	f7fc f890 	bl	8018f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce6c:	4b02      	ldr	r3, [pc, #8]	@ (801ce78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ce6e:	4618      	mov	r0, r3
 801ce70:	3708      	adds	r7, #8
 801ce72:	46bd      	mov	sp, r7
 801ce74:	bd80      	pop	{r7, pc}
 801ce76:	bf00      	nop
 801ce78:	20002708 	.word	0x20002708
 801ce7c:	08024d14 	.word	0x08024d14

0801ce80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b082      	sub	sp, #8
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	4603      	mov	r3, r0
 801ce88:	6039      	str	r1, [r7, #0]
 801ce8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ce8c:	79fb      	ldrb	r3, [r7, #7]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d105      	bne.n	801ce9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ce92:	683a      	ldr	r2, [r7, #0]
 801ce94:	4907      	ldr	r1, [pc, #28]	@ (801ceb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ce96:	4808      	ldr	r0, [pc, #32]	@ (801ceb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ce98:	f7fc f878 	bl	8018f8c <USBD_GetString>
 801ce9c:	e004      	b.n	801cea8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ce9e:	683a      	ldr	r2, [r7, #0]
 801cea0:	4904      	ldr	r1, [pc, #16]	@ (801ceb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cea2:	4805      	ldr	r0, [pc, #20]	@ (801ceb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cea4:	f7fc f872 	bl	8018f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 801cea8:	4b02      	ldr	r3, [pc, #8]	@ (801ceb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ceaa:	4618      	mov	r0, r3
 801ceac:	3708      	adds	r7, #8
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	bd80      	pop	{r7, pc}
 801ceb2:	bf00      	nop
 801ceb4:	20002708 	.word	0x20002708
 801ceb8:	08024d20 	.word	0x08024d20

0801cebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	b084      	sub	sp, #16
 801cec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801cec2:	68fa      	ldr	r2, [r7, #12]
 801cec4:	68bb      	ldr	r3, [r7, #8]
 801cec6:	4413      	add	r3, r2
 801cec8:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d009      	beq.n	801cee4 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ced0:	2208      	movs	r2, #8
 801ced2:	4906      	ldr	r1, [pc, #24]	@ (801ceec <Get_SerialNum+0x30>)
 801ced4:	68f8      	ldr	r0, [r7, #12]
 801ced6:	f000 f80d 	bl	801cef4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ceda:	2204      	movs	r2, #4
 801cedc:	4904      	ldr	r1, [pc, #16]	@ (801cef0 <Get_SerialNum+0x34>)
 801cede:	6878      	ldr	r0, [r7, #4]
 801cee0:	f000 f808 	bl	801cef4 <IntToUnicode>
  }
}
 801cee4:	bf00      	nop
 801cee6:	3710      	adds	r7, #16
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bd80      	pop	{r7, pc}
 801ceec:	20000102 	.word	0x20000102
 801cef0:	20000112 	.word	0x20000112

0801cef4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cef4:	b480      	push	{r7}
 801cef6:	b087      	sub	sp, #28
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	60f8      	str	r0, [r7, #12]
 801cefc:	60b9      	str	r1, [r7, #8]
 801cefe:	4613      	mov	r3, r2
 801cf00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cf02:	2300      	movs	r3, #0
 801cf04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801cf06:	2300      	movs	r3, #0
 801cf08:	75fb      	strb	r3, [r7, #23]
 801cf0a:	e027      	b.n	801cf5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	0f1b      	lsrs	r3, r3, #28
 801cf10:	2b09      	cmp	r3, #9
 801cf12:	d80b      	bhi.n	801cf2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	0f1b      	lsrs	r3, r3, #28
 801cf18:	b2da      	uxtb	r2, r3
 801cf1a:	7dfb      	ldrb	r3, [r7, #23]
 801cf1c:	005b      	lsls	r3, r3, #1
 801cf1e:	4619      	mov	r1, r3
 801cf20:	68bb      	ldr	r3, [r7, #8]
 801cf22:	440b      	add	r3, r1
 801cf24:	3230      	adds	r2, #48	@ 0x30
 801cf26:	b2d2      	uxtb	r2, r2
 801cf28:	701a      	strb	r2, [r3, #0]
 801cf2a:	e00a      	b.n	801cf42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	0f1b      	lsrs	r3, r3, #28
 801cf30:	b2da      	uxtb	r2, r3
 801cf32:	7dfb      	ldrb	r3, [r7, #23]
 801cf34:	005b      	lsls	r3, r3, #1
 801cf36:	4619      	mov	r1, r3
 801cf38:	68bb      	ldr	r3, [r7, #8]
 801cf3a:	440b      	add	r3, r1
 801cf3c:	3237      	adds	r2, #55	@ 0x37
 801cf3e:	b2d2      	uxtb	r2, r2
 801cf40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	011b      	lsls	r3, r3, #4
 801cf46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cf48:	7dfb      	ldrb	r3, [r7, #23]
 801cf4a:	005b      	lsls	r3, r3, #1
 801cf4c:	3301      	adds	r3, #1
 801cf4e:	68ba      	ldr	r2, [r7, #8]
 801cf50:	4413      	add	r3, r2
 801cf52:	2200      	movs	r2, #0
 801cf54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cf56:	7dfb      	ldrb	r3, [r7, #23]
 801cf58:	3301      	adds	r3, #1
 801cf5a:	75fb      	strb	r3, [r7, #23]
 801cf5c:	7dfa      	ldrb	r2, [r7, #23]
 801cf5e:	79fb      	ldrb	r3, [r7, #7]
 801cf60:	429a      	cmp	r2, r3
 801cf62:	d3d3      	bcc.n	801cf0c <IntToUnicode+0x18>
  }
}
 801cf64:	bf00      	nop
 801cf66:	bf00      	nop
 801cf68:	371c      	adds	r7, #28
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf70:	4770      	bx	lr

0801cf72 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801cf72:	b480      	push	{r7}
 801cf74:	b083      	sub	sp, #12
 801cf76:	af00      	add	r7, sp, #0
 801cf78:	4603      	mov	r3, r0
 801cf7a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801cf7c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801cf7e:	4618      	mov	r0, r3
 801cf80:	370c      	adds	r7, #12
 801cf82:	46bd      	mov	sp, r7
 801cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf88:	4770      	bx	lr
	...

0801cf8c <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b08e      	sub	sp, #56	@ 0x38
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	4603      	mov	r3, r0
 801cf94:	60b9      	str	r1, [r7, #8]
 801cf96:	607a      	str	r2, [r7, #4]
 801cf98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801cf9a:	23ff      	movs	r3, #255	@ 0xff
 801cf9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801cfa0:	f107 0314 	add.w	r3, r7, #20
 801cfa4:	4619      	mov	r1, r3
 801cfa6:	480a      	ldr	r0, [pc, #40]	@ (801cfd0 <STORAGE_GetCapacity_FS+0x44>)
 801cfa8:	f7ed fe62 	bl	800ac70 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801cfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfae:	1e5a      	subs	r2, r3, #1
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801cfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfb6:	b29a      	uxth	r2, r3
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801cfbc:	2300      	movs	r3, #0
 801cfbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801cfc2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	3738      	adds	r7, #56	@ 0x38
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	200018b8 	.word	0x200018b8

0801cfd4 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801cfd4:	b480      	push	{r7}
 801cfd6:	b083      	sub	sp, #12
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	4603      	mov	r3, r0
 801cfdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801cfde:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	370c      	adds	r7, #12
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfea:	4770      	bx	lr

0801cfec <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801cfec:	b480      	push	{r7}
 801cfee:	b083      	sub	sp, #12
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	4603      	mov	r3, r0
 801cff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801cff6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cff8:	4618      	mov	r0, r3
 801cffa:	370c      	adds	r7, #12
 801cffc:	46bd      	mov	sp, r7
 801cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d002:	4770      	bx	lr

0801d004 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d004:	b580      	push	{r7, lr}
 801d006:	b088      	sub	sp, #32
 801d008:	af02      	add	r7, sp, #8
 801d00a:	60b9      	str	r1, [r7, #8]
 801d00c:	607a      	str	r2, [r7, #4]
 801d00e:	461a      	mov	r2, r3
 801d010:	4603      	mov	r3, r0
 801d012:	73fb      	strb	r3, [r7, #15]
 801d014:	4613      	mov	r3, r2
 801d016:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801d018:	23ff      	movs	r3, #255	@ 0xff
 801d01a:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801d01c:	f7e7 f86e 	bl	80040fc <HAL_GetTick>
 801d020:	4603      	mov	r3, r0
 801d022:	4a0d      	ldr	r2, [pc, #52]	@ (801d058 <STORAGE_Read_FS+0x54>)
 801d024:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d026:	89bb      	ldrh	r3, [r7, #12]
 801d028:	f04f 32ff 	mov.w	r2, #4294967295
 801d02c:	9200      	str	r2, [sp, #0]
 801d02e:	687a      	ldr	r2, [r7, #4]
 801d030:	68b9      	ldr	r1, [r7, #8]
 801d032:	480a      	ldr	r0, [pc, #40]	@ (801d05c <STORAGE_Read_FS+0x58>)
 801d034:	f7ed f904 	bl	800a240 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d038:	bf00      	nop
 801d03a:	4808      	ldr	r0, [pc, #32]	@ (801d05c <STORAGE_Read_FS+0x58>)
 801d03c:	f7ed fe44 	bl	800acc8 <HAL_SD_GetCardState>
 801d040:	4603      	mov	r3, r0
 801d042:	2b04      	cmp	r3, #4
 801d044:	d1f9      	bne.n	801d03a <STORAGE_Read_FS+0x36>
	  ret = 0;
 801d046:	2300      	movs	r3, #0
 801d048:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801d04e:	4618      	mov	r0, r3
 801d050:	3718      	adds	r7, #24
 801d052:	46bd      	mov	sp, r7
 801d054:	bd80      	pop	{r7, pc}
 801d056:	bf00      	nop
 801d058:	200017c0 	.word	0x200017c0
 801d05c:	200018b8 	.word	0x200018b8

0801d060 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b088      	sub	sp, #32
 801d064:	af02      	add	r7, sp, #8
 801d066:	60b9      	str	r1, [r7, #8]
 801d068:	607a      	str	r2, [r7, #4]
 801d06a:	461a      	mov	r2, r3
 801d06c:	4603      	mov	r3, r0
 801d06e:	73fb      	strb	r3, [r7, #15]
 801d070:	4613      	mov	r3, r2
 801d072:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801d074:	23ff      	movs	r3, #255	@ 0xff
 801d076:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d078:	89bb      	ldrh	r3, [r7, #12]
 801d07a:	f04f 32ff 	mov.w	r2, #4294967295
 801d07e:	9200      	str	r2, [sp, #0]
 801d080:	687a      	ldr	r2, [r7, #4]
 801d082:	68b9      	ldr	r1, [r7, #8]
 801d084:	4808      	ldr	r0, [pc, #32]	@ (801d0a8 <STORAGE_Write_FS+0x48>)
 801d086:	f7ed fac1 	bl	800a60c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d08a:	bf00      	nop
 801d08c:	4806      	ldr	r0, [pc, #24]	@ (801d0a8 <STORAGE_Write_FS+0x48>)
 801d08e:	f7ed fe1b 	bl	800acc8 <HAL_SD_GetCardState>
 801d092:	4603      	mov	r3, r0
 801d094:	2b04      	cmp	r3, #4
 801d096:	d1f9      	bne.n	801d08c <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801d098:	2300      	movs	r3, #0
 801d09a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d09c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	3718      	adds	r7, #24
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd80      	pop	{r7, pc}
 801d0a8:	200018b8 	.word	0x200018b8

0801d0ac <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d0ac:	b480      	push	{r7}
 801d0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d0b0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ba:	4770      	bx	lr

0801d0bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b08a      	sub	sp, #40	@ 0x28
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d0c4:	f107 0314 	add.w	r3, r7, #20
 801d0c8:	2200      	movs	r2, #0
 801d0ca:	601a      	str	r2, [r3, #0]
 801d0cc:	605a      	str	r2, [r3, #4]
 801d0ce:	609a      	str	r2, [r3, #8]
 801d0d0:	60da      	str	r2, [r3, #12]
 801d0d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d0dc:	d13a      	bne.n	801d154 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d0de:	2300      	movs	r3, #0
 801d0e0:	613b      	str	r3, [r7, #16]
 801d0e2:	4b1e      	ldr	r3, [pc, #120]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0e6:	4a1d      	ldr	r2, [pc, #116]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d0e8:	f043 0301 	orr.w	r3, r3, #1
 801d0ec:	6313      	str	r3, [r2, #48]	@ 0x30
 801d0ee:	4b1b      	ldr	r3, [pc, #108]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0f2:	f003 0301 	and.w	r3, r3, #1
 801d0f6:	613b      	str	r3, [r7, #16]
 801d0f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d0fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d0fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d100:	2302      	movs	r3, #2
 801d102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d104:	2300      	movs	r3, #0
 801d106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d108:	2303      	movs	r3, #3
 801d10a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d10c:	230a      	movs	r3, #10
 801d10e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d110:	f107 0314 	add.w	r3, r7, #20
 801d114:	4619      	mov	r1, r3
 801d116:	4812      	ldr	r0, [pc, #72]	@ (801d160 <HAL_PCD_MspInit+0xa4>)
 801d118:	f7e8 fd54 	bl	8005bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d11c:	4b0f      	ldr	r3, [pc, #60]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d120:	4a0e      	ldr	r2, [pc, #56]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d126:	6353      	str	r3, [r2, #52]	@ 0x34
 801d128:	2300      	movs	r3, #0
 801d12a:	60fb      	str	r3, [r7, #12]
 801d12c:	4b0b      	ldr	r3, [pc, #44]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d12e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d130:	4a0a      	ldr	r2, [pc, #40]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d136:	6453      	str	r3, [r2, #68]	@ 0x44
 801d138:	4b08      	ldr	r3, [pc, #32]	@ (801d15c <HAL_PCD_MspInit+0xa0>)
 801d13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d13c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d140:	60fb      	str	r3, [r7, #12]
 801d142:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d144:	2200      	movs	r2, #0
 801d146:	2100      	movs	r1, #0
 801d148:	2043      	movs	r0, #67	@ 0x43
 801d14a:	f7e7 fdba 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d14e:	2043      	movs	r0, #67	@ 0x43
 801d150:	f7e7 fdd3 	bl	8004cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d154:	bf00      	nop
 801d156:	3728      	adds	r7, #40	@ 0x28
 801d158:	46bd      	mov	sp, r7
 801d15a:	bd80      	pop	{r7, pc}
 801d15c:	40023800 	.word	0x40023800
 801d160:	40020000 	.word	0x40020000

0801d164 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b082      	sub	sp, #8
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d174:	d10d      	bne.n	801d192 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801d176:	4b09      	ldr	r3, [pc, #36]	@ (801d19c <HAL_PCD_MspDeInit+0x38>)
 801d178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d17a:	4a08      	ldr	r2, [pc, #32]	@ (801d19c <HAL_PCD_MspDeInit+0x38>)
 801d17c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d180:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801d182:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801d186:	4806      	ldr	r0, [pc, #24]	@ (801d1a0 <HAL_PCD_MspDeInit+0x3c>)
 801d188:	f7e8 fea0 	bl	8005ecc <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801d18c:	2043      	movs	r0, #67	@ 0x43
 801d18e:	f7e7 fdc2 	bl	8004d16 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801d192:	bf00      	nop
 801d194:	3708      	adds	r7, #8
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
 801d19a:	bf00      	nop
 801d19c:	40023800 	.word	0x40023800
 801d1a0:	40020000 	.word	0x40020000

0801d1a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1a4:	b580      	push	{r7, lr}
 801d1a6:	b082      	sub	sp, #8
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	4610      	mov	r0, r2
 801d1bc:	f7fa fd83 	bl	8017cc6 <USBD_LL_SetupStage>
}
 801d1c0:	bf00      	nop
 801d1c2:	3708      	adds	r7, #8
 801d1c4:	46bd      	mov	sp, r7
 801d1c6:	bd80      	pop	{r7, pc}

0801d1c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b082      	sub	sp, #8
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
 801d1d0:	460b      	mov	r3, r1
 801d1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d1da:	78fa      	ldrb	r2, [r7, #3]
 801d1dc:	6879      	ldr	r1, [r7, #4]
 801d1de:	4613      	mov	r3, r2
 801d1e0:	00db      	lsls	r3, r3, #3
 801d1e2:	4413      	add	r3, r2
 801d1e4:	009b      	lsls	r3, r3, #2
 801d1e6:	440b      	add	r3, r1
 801d1e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d1ec:	681a      	ldr	r2, [r3, #0]
 801d1ee:	78fb      	ldrb	r3, [r7, #3]
 801d1f0:	4619      	mov	r1, r3
 801d1f2:	f7fa fdbd 	bl	8017d70 <USBD_LL_DataOutStage>
}
 801d1f6:	bf00      	nop
 801d1f8:	3708      	adds	r7, #8
 801d1fa:	46bd      	mov	sp, r7
 801d1fc:	bd80      	pop	{r7, pc}

0801d1fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1fe:	b580      	push	{r7, lr}
 801d200:	b082      	sub	sp, #8
 801d202:	af00      	add	r7, sp, #0
 801d204:	6078      	str	r0, [r7, #4]
 801d206:	460b      	mov	r3, r1
 801d208:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d210:	78fa      	ldrb	r2, [r7, #3]
 801d212:	6879      	ldr	r1, [r7, #4]
 801d214:	4613      	mov	r3, r2
 801d216:	00db      	lsls	r3, r3, #3
 801d218:	4413      	add	r3, r2
 801d21a:	009b      	lsls	r3, r3, #2
 801d21c:	440b      	add	r3, r1
 801d21e:	3320      	adds	r3, #32
 801d220:	681a      	ldr	r2, [r3, #0]
 801d222:	78fb      	ldrb	r3, [r7, #3]
 801d224:	4619      	mov	r1, r3
 801d226:	f7fa fe56 	bl	8017ed6 <USBD_LL_DataInStage>
}
 801d22a:	bf00      	nop
 801d22c:	3708      	adds	r7, #8
 801d22e:	46bd      	mov	sp, r7
 801d230:	bd80      	pop	{r7, pc}

0801d232 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d232:	b580      	push	{r7, lr}
 801d234:	b082      	sub	sp, #8
 801d236:	af00      	add	r7, sp, #0
 801d238:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d240:	4618      	mov	r0, r3
 801d242:	f7fa ff90 	bl	8018166 <USBD_LL_SOF>
}
 801d246:	bf00      	nop
 801d248:	3708      	adds	r7, #8
 801d24a:	46bd      	mov	sp, r7
 801d24c:	bd80      	pop	{r7, pc}

0801d24e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d24e:	b580      	push	{r7, lr}
 801d250:	b084      	sub	sp, #16
 801d252:	af00      	add	r7, sp, #0
 801d254:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d256:	2301      	movs	r3, #1
 801d258:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	79db      	ldrb	r3, [r3, #7]
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d102      	bne.n	801d268 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d262:	2300      	movs	r3, #0
 801d264:	73fb      	strb	r3, [r7, #15]
 801d266:	e008      	b.n	801d27a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	79db      	ldrb	r3, [r3, #7]
 801d26c:	2b02      	cmp	r3, #2
 801d26e:	d102      	bne.n	801d276 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d270:	2301      	movs	r3, #1
 801d272:	73fb      	strb	r3, [r7, #15]
 801d274:	e001      	b.n	801d27a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d276:	f7e6 f9f7 	bl	8003668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d280:	7bfa      	ldrb	r2, [r7, #15]
 801d282:	4611      	mov	r1, r2
 801d284:	4618      	mov	r0, r3
 801d286:	f7fa ff2a 	bl	80180de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d290:	4618      	mov	r0, r3
 801d292:	f7fa fed2 	bl	801803a <USBD_LL_Reset>
}
 801d296:	bf00      	nop
 801d298:	3710      	adds	r7, #16
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bd80      	pop	{r7, pc}
	...

0801d2a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2ae:	4618      	mov	r0, r3
 801d2b0:	f7fa ff25 	bl	80180fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	687a      	ldr	r2, [r7, #4]
 801d2c0:	6812      	ldr	r2, [r2, #0]
 801d2c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d2c6:	f043 0301 	orr.w	r3, r3, #1
 801d2ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	7adb      	ldrb	r3, [r3, #11]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d005      	beq.n	801d2e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d2d4:	4b04      	ldr	r3, [pc, #16]	@ (801d2e8 <HAL_PCD_SuspendCallback+0x48>)
 801d2d6:	691b      	ldr	r3, [r3, #16]
 801d2d8:	4a03      	ldr	r2, [pc, #12]	@ (801d2e8 <HAL_PCD_SuspendCallback+0x48>)
 801d2da:	f043 0306 	orr.w	r3, r3, #6
 801d2de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d2e0:	bf00      	nop
 801d2e2:	3708      	adds	r7, #8
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	bd80      	pop	{r7, pc}
 801d2e8:	e000ed00 	.word	0xe000ed00

0801d2ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b082      	sub	sp, #8
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7fa ff1b 	bl	8018136 <USBD_LL_Resume>
}
 801d300:	bf00      	nop
 801d302:	3708      	adds	r7, #8
 801d304:	46bd      	mov	sp, r7
 801d306:	bd80      	pop	{r7, pc}

0801d308 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d308:	b580      	push	{r7, lr}
 801d30a:	b082      	sub	sp, #8
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	6078      	str	r0, [r7, #4]
 801d310:	460b      	mov	r3, r1
 801d312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d31a:	78fa      	ldrb	r2, [r7, #3]
 801d31c:	4611      	mov	r1, r2
 801d31e:	4618      	mov	r0, r3
 801d320:	f7fa ff73 	bl	801820a <USBD_LL_IsoOUTIncomplete>
}
 801d324:	bf00      	nop
 801d326:	3708      	adds	r7, #8
 801d328:	46bd      	mov	sp, r7
 801d32a:	bd80      	pop	{r7, pc}

0801d32c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b082      	sub	sp, #8
 801d330:	af00      	add	r7, sp, #0
 801d332:	6078      	str	r0, [r7, #4]
 801d334:	460b      	mov	r3, r1
 801d336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d33e:	78fa      	ldrb	r2, [r7, #3]
 801d340:	4611      	mov	r1, r2
 801d342:	4618      	mov	r0, r3
 801d344:	f7fa ff2f 	bl	80181a6 <USBD_LL_IsoINIncomplete>
}
 801d348:	bf00      	nop
 801d34a:	3708      	adds	r7, #8
 801d34c:	46bd      	mov	sp, r7
 801d34e:	bd80      	pop	{r7, pc}

0801d350 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d350:	b580      	push	{r7, lr}
 801d352:	b082      	sub	sp, #8
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d35e:	4618      	mov	r0, r3
 801d360:	f7fa ff85 	bl	801826e <USBD_LL_DevConnected>
}
 801d364:	bf00      	nop
 801d366:	3708      	adds	r7, #8
 801d368:	46bd      	mov	sp, r7
 801d36a:	bd80      	pop	{r7, pc}

0801d36c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b082      	sub	sp, #8
 801d370:	af00      	add	r7, sp, #0
 801d372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d37a:	4618      	mov	r0, r3
 801d37c:	f7fa ff82 	bl	8018284 <USBD_LL_DevDisconnected>
}
 801d380:	bf00      	nop
 801d382:	3708      	adds	r7, #8
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}

0801d388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b082      	sub	sp, #8
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	781b      	ldrb	r3, [r3, #0]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d13c      	bne.n	801d412 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d398:	4a20      	ldr	r2, [pc, #128]	@ (801d41c <USBD_LL_Init+0x94>)
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	4a1e      	ldr	r2, [pc, #120]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d3a8:	4b1c      	ldr	r3, [pc, #112]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d3ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d3b0:	4b1a      	ldr	r3, [pc, #104]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3b2:	2204      	movs	r2, #4
 801d3b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d3b6:	4b19      	ldr	r3, [pc, #100]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3b8:	2202      	movs	r2, #2
 801d3ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d3bc:	4b17      	ldr	r3, [pc, #92]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3be:	2200      	movs	r2, #0
 801d3c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d3c2:	4b16      	ldr	r3, [pc, #88]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3c4:	2202      	movs	r2, #2
 801d3c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d3c8:	4b14      	ldr	r3, [pc, #80]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d3ce:	4b13      	ldr	r3, [pc, #76]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d3d4:	4b11      	ldr	r3, [pc, #68]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d3da:	4b10      	ldr	r3, [pc, #64]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3dc:	2200      	movs	r2, #0
 801d3de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d3e0:	4b0e      	ldr	r3, [pc, #56]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d3e6:	480d      	ldr	r0, [pc, #52]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3e8:	f7ea f848 	bl	800747c <HAL_PCD_Init>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d001      	beq.n	801d3f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d3f2:	f7e6 f939 	bl	8003668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d3f6:	2180      	movs	r1, #128	@ 0x80
 801d3f8:	4808      	ldr	r0, [pc, #32]	@ (801d41c <USBD_LL_Init+0x94>)
 801d3fa:	f7eb fafe 	bl	80089fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d3fe:	2240      	movs	r2, #64	@ 0x40
 801d400:	2100      	movs	r1, #0
 801d402:	4806      	ldr	r0, [pc, #24]	@ (801d41c <USBD_LL_Init+0x94>)
 801d404:	f7eb fab2 	bl	800896c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d408:	2280      	movs	r2, #128	@ 0x80
 801d40a:	2101      	movs	r1, #1
 801d40c:	4803      	ldr	r0, [pc, #12]	@ (801d41c <USBD_LL_Init+0x94>)
 801d40e:	f7eb faad 	bl	800896c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d412:	2300      	movs	r3, #0
}
 801d414:	4618      	mov	r0, r3
 801d416:	3708      	adds	r7, #8
 801d418:	46bd      	mov	sp, r7
 801d41a:	bd80      	pop	{r7, pc}
 801d41c:	20002908 	.word	0x20002908

0801d420 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b084      	sub	sp, #16
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d428:	2300      	movs	r3, #0
 801d42a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d42c:	2300      	movs	r3, #0
 801d42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d436:	4618      	mov	r0, r3
 801d438:	f7ea f92f 	bl	800769a <HAL_PCD_DeInit>
 801d43c:	4603      	mov	r3, r0
 801d43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d440:	7bfb      	ldrb	r3, [r7, #15]
 801d442:	4618      	mov	r0, r3
 801d444:	f000 f998 	bl	801d778 <USBD_Get_USB_Status>
 801d448:	4603      	mov	r3, r0
 801d44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d44c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d44e:	4618      	mov	r0, r3
 801d450:	3710      	adds	r7, #16
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}

0801d456 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d456:	b580      	push	{r7, lr}
 801d458:	b084      	sub	sp, #16
 801d45a:	af00      	add	r7, sp, #0
 801d45c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d45e:	2300      	movs	r3, #0
 801d460:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d462:	2300      	movs	r3, #0
 801d464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d46c:	4618      	mov	r0, r3
 801d46e:	f7ea f937 	bl	80076e0 <HAL_PCD_Start>
 801d472:	4603      	mov	r3, r0
 801d474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d476:	7bfb      	ldrb	r3, [r7, #15]
 801d478:	4618      	mov	r0, r3
 801d47a:	f000 f97d 	bl	801d778 <USBD_Get_USB_Status>
 801d47e:	4603      	mov	r3, r0
 801d480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d482:	7bbb      	ldrb	r3, [r7, #14]
}
 801d484:	4618      	mov	r0, r3
 801d486:	3710      	adds	r7, #16
 801d488:	46bd      	mov	sp, r7
 801d48a:	bd80      	pop	{r7, pc}

0801d48c <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	b084      	sub	sp, #16
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d494:	2300      	movs	r3, #0
 801d496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d498:	2300      	movs	r3, #0
 801d49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f7ea f951 	bl	800774a <HAL_PCD_Stop>
 801d4a8:	4603      	mov	r3, r0
 801d4aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4ac:	7bfb      	ldrb	r3, [r7, #15]
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	f000 f962 	bl	801d778 <USBD_Get_USB_Status>
 801d4b4:	4603      	mov	r3, r0
 801d4b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d4b8:	7bbb      	ldrb	r3, [r7, #14]
}
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	3710      	adds	r7, #16
 801d4be:	46bd      	mov	sp, r7
 801d4c0:	bd80      	pop	{r7, pc}

0801d4c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d4c2:	b580      	push	{r7, lr}
 801d4c4:	b084      	sub	sp, #16
 801d4c6:	af00      	add	r7, sp, #0
 801d4c8:	6078      	str	r0, [r7, #4]
 801d4ca:	4608      	mov	r0, r1
 801d4cc:	4611      	mov	r1, r2
 801d4ce:	461a      	mov	r2, r3
 801d4d0:	4603      	mov	r3, r0
 801d4d2:	70fb      	strb	r3, [r7, #3]
 801d4d4:	460b      	mov	r3, r1
 801d4d6:	70bb      	strb	r3, [r7, #2]
 801d4d8:	4613      	mov	r3, r2
 801d4da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4dc:	2300      	movs	r3, #0
 801d4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d4ea:	78bb      	ldrb	r3, [r7, #2]
 801d4ec:	883a      	ldrh	r2, [r7, #0]
 801d4ee:	78f9      	ldrb	r1, [r7, #3]
 801d4f0:	f7ea fe2b 	bl	800814a <HAL_PCD_EP_Open>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4f8:	7bfb      	ldrb	r3, [r7, #15]
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f000 f93c 	bl	801d778 <USBD_Get_USB_Status>
 801d500:	4603      	mov	r3, r0
 801d502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d504:	7bbb      	ldrb	r3, [r7, #14]
}
 801d506:	4618      	mov	r0, r3
 801d508:	3710      	adds	r7, #16
 801d50a:	46bd      	mov	sp, r7
 801d50c:	bd80      	pop	{r7, pc}

0801d50e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d50e:	b580      	push	{r7, lr}
 801d510:	b084      	sub	sp, #16
 801d512:	af00      	add	r7, sp, #0
 801d514:	6078      	str	r0, [r7, #4]
 801d516:	460b      	mov	r3, r1
 801d518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d51a:	2300      	movs	r3, #0
 801d51c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d51e:	2300      	movs	r3, #0
 801d520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d528:	78fa      	ldrb	r2, [r7, #3]
 801d52a:	4611      	mov	r1, r2
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7ea fe74 	bl	800821a <HAL_PCD_EP_Close>
 801d532:	4603      	mov	r3, r0
 801d534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d536:	7bfb      	ldrb	r3, [r7, #15]
 801d538:	4618      	mov	r0, r3
 801d53a:	f000 f91d 	bl	801d778 <USBD_Get_USB_Status>
 801d53e:	4603      	mov	r3, r0
 801d540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d542:	7bbb      	ldrb	r3, [r7, #14]
}
 801d544:	4618      	mov	r0, r3
 801d546:	3710      	adds	r7, #16
 801d548:	46bd      	mov	sp, r7
 801d54a:	bd80      	pop	{r7, pc}

0801d54c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b084      	sub	sp, #16
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
 801d554:	460b      	mov	r3, r1
 801d556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d558:	2300      	movs	r3, #0
 801d55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d55c:	2300      	movs	r3, #0
 801d55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d566:	78fa      	ldrb	r2, [r7, #3]
 801d568:	4611      	mov	r1, r2
 801d56a:	4618      	mov	r0, r3
 801d56c:	f7eb f816 	bl	800859c <HAL_PCD_EP_Flush>
 801d570:	4603      	mov	r3, r0
 801d572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d574:	7bfb      	ldrb	r3, [r7, #15]
 801d576:	4618      	mov	r0, r3
 801d578:	f000 f8fe 	bl	801d778 <USBD_Get_USB_Status>
 801d57c:	4603      	mov	r3, r0
 801d57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d580:	7bbb      	ldrb	r3, [r7, #14]
}
 801d582:	4618      	mov	r0, r3
 801d584:	3710      	adds	r7, #16
 801d586:	46bd      	mov	sp, r7
 801d588:	bd80      	pop	{r7, pc}

0801d58a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d58a:	b580      	push	{r7, lr}
 801d58c:	b084      	sub	sp, #16
 801d58e:	af00      	add	r7, sp, #0
 801d590:	6078      	str	r0, [r7, #4]
 801d592:	460b      	mov	r3, r1
 801d594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d596:	2300      	movs	r3, #0
 801d598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d59a:	2300      	movs	r3, #0
 801d59c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5a4:	78fa      	ldrb	r2, [r7, #3]
 801d5a6:	4611      	mov	r1, r2
 801d5a8:	4618      	mov	r0, r3
 801d5aa:	f7ea ff0d 	bl	80083c8 <HAL_PCD_EP_SetStall>
 801d5ae:	4603      	mov	r3, r0
 801d5b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5b2:	7bfb      	ldrb	r3, [r7, #15]
 801d5b4:	4618      	mov	r0, r3
 801d5b6:	f000 f8df 	bl	801d778 <USBD_Get_USB_Status>
 801d5ba:	4603      	mov	r3, r0
 801d5bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5be:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	3710      	adds	r7, #16
 801d5c4:	46bd      	mov	sp, r7
 801d5c6:	bd80      	pop	{r7, pc}

0801d5c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5c8:	b580      	push	{r7, lr}
 801d5ca:	b084      	sub	sp, #16
 801d5cc:	af00      	add	r7, sp, #0
 801d5ce:	6078      	str	r0, [r7, #4]
 801d5d0:	460b      	mov	r3, r1
 801d5d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5d8:	2300      	movs	r3, #0
 801d5da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5e2:	78fa      	ldrb	r2, [r7, #3]
 801d5e4:	4611      	mov	r1, r2
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7ea ff51 	bl	800848e <HAL_PCD_EP_ClrStall>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5f0:	7bfb      	ldrb	r3, [r7, #15]
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f000 f8c0 	bl	801d778 <USBD_Get_USB_Status>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5fc:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5fe:	4618      	mov	r0, r3
 801d600:	3710      	adds	r7, #16
 801d602:	46bd      	mov	sp, r7
 801d604:	bd80      	pop	{r7, pc}

0801d606 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d606:	b480      	push	{r7}
 801d608:	b085      	sub	sp, #20
 801d60a:	af00      	add	r7, sp, #0
 801d60c:	6078      	str	r0, [r7, #4]
 801d60e:	460b      	mov	r3, r1
 801d610:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d618:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d61a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d61e:	2b00      	cmp	r3, #0
 801d620:	da0b      	bge.n	801d63a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d622:	78fb      	ldrb	r3, [r7, #3]
 801d624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d628:	68f9      	ldr	r1, [r7, #12]
 801d62a:	4613      	mov	r3, r2
 801d62c:	00db      	lsls	r3, r3, #3
 801d62e:	4413      	add	r3, r2
 801d630:	009b      	lsls	r3, r3, #2
 801d632:	440b      	add	r3, r1
 801d634:	3316      	adds	r3, #22
 801d636:	781b      	ldrb	r3, [r3, #0]
 801d638:	e00b      	b.n	801d652 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d63a:	78fb      	ldrb	r3, [r7, #3]
 801d63c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d640:	68f9      	ldr	r1, [r7, #12]
 801d642:	4613      	mov	r3, r2
 801d644:	00db      	lsls	r3, r3, #3
 801d646:	4413      	add	r3, r2
 801d648:	009b      	lsls	r3, r3, #2
 801d64a:	440b      	add	r3, r1
 801d64c:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d650:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d652:	4618      	mov	r0, r3
 801d654:	3714      	adds	r7, #20
 801d656:	46bd      	mov	sp, r7
 801d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d65c:	4770      	bx	lr

0801d65e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d65e:	b580      	push	{r7, lr}
 801d660:	b084      	sub	sp, #16
 801d662:	af00      	add	r7, sp, #0
 801d664:	6078      	str	r0, [r7, #4]
 801d666:	460b      	mov	r3, r1
 801d668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d66a:	2300      	movs	r3, #0
 801d66c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d66e:	2300      	movs	r3, #0
 801d670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d678:	78fa      	ldrb	r2, [r7, #3]
 801d67a:	4611      	mov	r1, r2
 801d67c:	4618      	mov	r0, r3
 801d67e:	f7ea fd40 	bl	8008102 <HAL_PCD_SetAddress>
 801d682:	4603      	mov	r3, r0
 801d684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d686:	7bfb      	ldrb	r3, [r7, #15]
 801d688:	4618      	mov	r0, r3
 801d68a:	f000 f875 	bl	801d778 <USBD_Get_USB_Status>
 801d68e:	4603      	mov	r3, r0
 801d690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d692:	7bbb      	ldrb	r3, [r7, #14]
}
 801d694:	4618      	mov	r0, r3
 801d696:	3710      	adds	r7, #16
 801d698:	46bd      	mov	sp, r7
 801d69a:	bd80      	pop	{r7, pc}

0801d69c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d69c:	b580      	push	{r7, lr}
 801d69e:	b086      	sub	sp, #24
 801d6a0:	af00      	add	r7, sp, #0
 801d6a2:	60f8      	str	r0, [r7, #12]
 801d6a4:	607a      	str	r2, [r7, #4]
 801d6a6:	603b      	str	r3, [r7, #0]
 801d6a8:	460b      	mov	r3, r1
 801d6aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6ac:	2300      	movs	r3, #0
 801d6ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d6ba:	7af9      	ldrb	r1, [r7, #11]
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	687a      	ldr	r2, [r7, #4]
 801d6c0:	f7ea fe48 	bl	8008354 <HAL_PCD_EP_Transmit>
 801d6c4:	4603      	mov	r3, r0
 801d6c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6c8:	7dfb      	ldrb	r3, [r7, #23]
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f000 f854 	bl	801d778 <USBD_Get_USB_Status>
 801d6d0:	4603      	mov	r3, r0
 801d6d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d6d4:	7dbb      	ldrb	r3, [r7, #22]
}
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	3718      	adds	r7, #24
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	bd80      	pop	{r7, pc}

0801d6de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d6de:	b580      	push	{r7, lr}
 801d6e0:	b086      	sub	sp, #24
 801d6e2:	af00      	add	r7, sp, #0
 801d6e4:	60f8      	str	r0, [r7, #12]
 801d6e6:	607a      	str	r2, [r7, #4]
 801d6e8:	603b      	str	r3, [r7, #0]
 801d6ea:	460b      	mov	r3, r1
 801d6ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6ee:	2300      	movs	r3, #0
 801d6f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d6fc:	7af9      	ldrb	r1, [r7, #11]
 801d6fe:	683b      	ldr	r3, [r7, #0]
 801d700:	687a      	ldr	r2, [r7, #4]
 801d702:	f7ea fdd4 	bl	80082ae <HAL_PCD_EP_Receive>
 801d706:	4603      	mov	r3, r0
 801d708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d70a:	7dfb      	ldrb	r3, [r7, #23]
 801d70c:	4618      	mov	r0, r3
 801d70e:	f000 f833 	bl	801d778 <USBD_Get_USB_Status>
 801d712:	4603      	mov	r3, r0
 801d714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d716:	7dbb      	ldrb	r3, [r7, #22]
}
 801d718:	4618      	mov	r0, r3
 801d71a:	3718      	adds	r7, #24
 801d71c:	46bd      	mov	sp, r7
 801d71e:	bd80      	pop	{r7, pc}

0801d720 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d720:	b580      	push	{r7, lr}
 801d722:	b082      	sub	sp, #8
 801d724:	af00      	add	r7, sp, #0
 801d726:	6078      	str	r0, [r7, #4]
 801d728:	460b      	mov	r3, r1
 801d72a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d732:	78fa      	ldrb	r2, [r7, #3]
 801d734:	4611      	mov	r1, r2
 801d736:	4618      	mov	r0, r3
 801d738:	f7ea fdf4 	bl	8008324 <HAL_PCD_EP_GetRxCount>
 801d73c:	4603      	mov	r3, r0
}
 801d73e:	4618      	mov	r0, r3
 801d740:	3708      	adds	r7, #8
 801d742:	46bd      	mov	sp, r7
 801d744:	bd80      	pop	{r7, pc}
	...

0801d748 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d748:	b480      	push	{r7}
 801d74a:	b083      	sub	sp, #12
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d750:	4b03      	ldr	r3, [pc, #12]	@ (801d760 <USBD_static_malloc+0x18>)
}
 801d752:	4618      	mov	r0, r3
 801d754:	370c      	adds	r7, #12
 801d756:	46bd      	mov	sp, r7
 801d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d75c:	4770      	bx	lr
 801d75e:	bf00      	nop
 801d760:	20002dec 	.word	0x20002dec

0801d764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d764:	b480      	push	{r7}
 801d766:	b083      	sub	sp, #12
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]

}
 801d76c:	bf00      	nop
 801d76e:	370c      	adds	r7, #12
 801d770:	46bd      	mov	sp, r7
 801d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d776:	4770      	bx	lr

0801d778 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d778:	b480      	push	{r7}
 801d77a:	b085      	sub	sp, #20
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	4603      	mov	r3, r0
 801d780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d782:	2300      	movs	r3, #0
 801d784:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d786:	79fb      	ldrb	r3, [r7, #7]
 801d788:	2b03      	cmp	r3, #3
 801d78a:	d817      	bhi.n	801d7bc <USBD_Get_USB_Status+0x44>
 801d78c:	a201      	add	r2, pc, #4	@ (adr r2, 801d794 <USBD_Get_USB_Status+0x1c>)
 801d78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d792:	bf00      	nop
 801d794:	0801d7a5 	.word	0x0801d7a5
 801d798:	0801d7ab 	.word	0x0801d7ab
 801d79c:	0801d7b1 	.word	0x0801d7b1
 801d7a0:	0801d7b7 	.word	0x0801d7b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	73fb      	strb	r3, [r7, #15]
    break;
 801d7a8:	e00b      	b.n	801d7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d7aa:	2303      	movs	r3, #3
 801d7ac:	73fb      	strb	r3, [r7, #15]
    break;
 801d7ae:	e008      	b.n	801d7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d7b0:	2301      	movs	r3, #1
 801d7b2:	73fb      	strb	r3, [r7, #15]
    break;
 801d7b4:	e005      	b.n	801d7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d7b6:	2303      	movs	r3, #3
 801d7b8:	73fb      	strb	r3, [r7, #15]
    break;
 801d7ba:	e002      	b.n	801d7c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d7bc:	2303      	movs	r3, #3
 801d7be:	73fb      	strb	r3, [r7, #15]
    break;
 801d7c0:	bf00      	nop
  }
  return usb_status;
 801d7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	3714      	adds	r7, #20
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ce:	4770      	bx	lr

0801d7d0 <atoi>:
 801d7d0:	220a      	movs	r2, #10
 801d7d2:	2100      	movs	r1, #0
 801d7d4:	f000 b932 	b.w	801da3c <strtol>

0801d7d8 <malloc>:
 801d7d8:	4b02      	ldr	r3, [pc, #8]	@ (801d7e4 <malloc+0xc>)
 801d7da:	4601      	mov	r1, r0
 801d7dc:	6818      	ldr	r0, [r3, #0]
 801d7de:	f000 b825 	b.w	801d82c <_malloc_r>
 801d7e2:	bf00      	nop
 801d7e4:	20000148 	.word	0x20000148

0801d7e8 <sbrk_aligned>:
 801d7e8:	b570      	push	{r4, r5, r6, lr}
 801d7ea:	4e0f      	ldr	r6, [pc, #60]	@ (801d828 <sbrk_aligned+0x40>)
 801d7ec:	460c      	mov	r4, r1
 801d7ee:	6831      	ldr	r1, [r6, #0]
 801d7f0:	4605      	mov	r5, r0
 801d7f2:	b911      	cbnz	r1, 801d7fa <sbrk_aligned+0x12>
 801d7f4:	f001 fb2e 	bl	801ee54 <_sbrk_r>
 801d7f8:	6030      	str	r0, [r6, #0]
 801d7fa:	4621      	mov	r1, r4
 801d7fc:	4628      	mov	r0, r5
 801d7fe:	f001 fb29 	bl	801ee54 <_sbrk_r>
 801d802:	1c43      	adds	r3, r0, #1
 801d804:	d103      	bne.n	801d80e <sbrk_aligned+0x26>
 801d806:	f04f 34ff 	mov.w	r4, #4294967295
 801d80a:	4620      	mov	r0, r4
 801d80c:	bd70      	pop	{r4, r5, r6, pc}
 801d80e:	1cc4      	adds	r4, r0, #3
 801d810:	f024 0403 	bic.w	r4, r4, #3
 801d814:	42a0      	cmp	r0, r4
 801d816:	d0f8      	beq.n	801d80a <sbrk_aligned+0x22>
 801d818:	1a21      	subs	r1, r4, r0
 801d81a:	4628      	mov	r0, r5
 801d81c:	f001 fb1a 	bl	801ee54 <_sbrk_r>
 801d820:	3001      	adds	r0, #1
 801d822:	d1f2      	bne.n	801d80a <sbrk_aligned+0x22>
 801d824:	e7ef      	b.n	801d806 <sbrk_aligned+0x1e>
 801d826:	bf00      	nop
 801d828:	20003664 	.word	0x20003664

0801d82c <_malloc_r>:
 801d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d830:	1ccd      	adds	r5, r1, #3
 801d832:	f025 0503 	bic.w	r5, r5, #3
 801d836:	3508      	adds	r5, #8
 801d838:	2d0c      	cmp	r5, #12
 801d83a:	bf38      	it	cc
 801d83c:	250c      	movcc	r5, #12
 801d83e:	2d00      	cmp	r5, #0
 801d840:	4606      	mov	r6, r0
 801d842:	db01      	blt.n	801d848 <_malloc_r+0x1c>
 801d844:	42a9      	cmp	r1, r5
 801d846:	d904      	bls.n	801d852 <_malloc_r+0x26>
 801d848:	230c      	movs	r3, #12
 801d84a:	6033      	str	r3, [r6, #0]
 801d84c:	2000      	movs	r0, #0
 801d84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d928 <_malloc_r+0xfc>
 801d856:	f000 f869 	bl	801d92c <__malloc_lock>
 801d85a:	f8d8 3000 	ldr.w	r3, [r8]
 801d85e:	461c      	mov	r4, r3
 801d860:	bb44      	cbnz	r4, 801d8b4 <_malloc_r+0x88>
 801d862:	4629      	mov	r1, r5
 801d864:	4630      	mov	r0, r6
 801d866:	f7ff ffbf 	bl	801d7e8 <sbrk_aligned>
 801d86a:	1c43      	adds	r3, r0, #1
 801d86c:	4604      	mov	r4, r0
 801d86e:	d158      	bne.n	801d922 <_malloc_r+0xf6>
 801d870:	f8d8 4000 	ldr.w	r4, [r8]
 801d874:	4627      	mov	r7, r4
 801d876:	2f00      	cmp	r7, #0
 801d878:	d143      	bne.n	801d902 <_malloc_r+0xd6>
 801d87a:	2c00      	cmp	r4, #0
 801d87c:	d04b      	beq.n	801d916 <_malloc_r+0xea>
 801d87e:	6823      	ldr	r3, [r4, #0]
 801d880:	4639      	mov	r1, r7
 801d882:	4630      	mov	r0, r6
 801d884:	eb04 0903 	add.w	r9, r4, r3
 801d888:	f001 fae4 	bl	801ee54 <_sbrk_r>
 801d88c:	4581      	cmp	r9, r0
 801d88e:	d142      	bne.n	801d916 <_malloc_r+0xea>
 801d890:	6821      	ldr	r1, [r4, #0]
 801d892:	1a6d      	subs	r5, r5, r1
 801d894:	4629      	mov	r1, r5
 801d896:	4630      	mov	r0, r6
 801d898:	f7ff ffa6 	bl	801d7e8 <sbrk_aligned>
 801d89c:	3001      	adds	r0, #1
 801d89e:	d03a      	beq.n	801d916 <_malloc_r+0xea>
 801d8a0:	6823      	ldr	r3, [r4, #0]
 801d8a2:	442b      	add	r3, r5
 801d8a4:	6023      	str	r3, [r4, #0]
 801d8a6:	f8d8 3000 	ldr.w	r3, [r8]
 801d8aa:	685a      	ldr	r2, [r3, #4]
 801d8ac:	bb62      	cbnz	r2, 801d908 <_malloc_r+0xdc>
 801d8ae:	f8c8 7000 	str.w	r7, [r8]
 801d8b2:	e00f      	b.n	801d8d4 <_malloc_r+0xa8>
 801d8b4:	6822      	ldr	r2, [r4, #0]
 801d8b6:	1b52      	subs	r2, r2, r5
 801d8b8:	d420      	bmi.n	801d8fc <_malloc_r+0xd0>
 801d8ba:	2a0b      	cmp	r2, #11
 801d8bc:	d917      	bls.n	801d8ee <_malloc_r+0xc2>
 801d8be:	1961      	adds	r1, r4, r5
 801d8c0:	42a3      	cmp	r3, r4
 801d8c2:	6025      	str	r5, [r4, #0]
 801d8c4:	bf18      	it	ne
 801d8c6:	6059      	strne	r1, [r3, #4]
 801d8c8:	6863      	ldr	r3, [r4, #4]
 801d8ca:	bf08      	it	eq
 801d8cc:	f8c8 1000 	streq.w	r1, [r8]
 801d8d0:	5162      	str	r2, [r4, r5]
 801d8d2:	604b      	str	r3, [r1, #4]
 801d8d4:	4630      	mov	r0, r6
 801d8d6:	f000 f82f 	bl	801d938 <__malloc_unlock>
 801d8da:	f104 000b 	add.w	r0, r4, #11
 801d8de:	1d23      	adds	r3, r4, #4
 801d8e0:	f020 0007 	bic.w	r0, r0, #7
 801d8e4:	1ac2      	subs	r2, r0, r3
 801d8e6:	bf1c      	itt	ne
 801d8e8:	1a1b      	subne	r3, r3, r0
 801d8ea:	50a3      	strne	r3, [r4, r2]
 801d8ec:	e7af      	b.n	801d84e <_malloc_r+0x22>
 801d8ee:	6862      	ldr	r2, [r4, #4]
 801d8f0:	42a3      	cmp	r3, r4
 801d8f2:	bf0c      	ite	eq
 801d8f4:	f8c8 2000 	streq.w	r2, [r8]
 801d8f8:	605a      	strne	r2, [r3, #4]
 801d8fa:	e7eb      	b.n	801d8d4 <_malloc_r+0xa8>
 801d8fc:	4623      	mov	r3, r4
 801d8fe:	6864      	ldr	r4, [r4, #4]
 801d900:	e7ae      	b.n	801d860 <_malloc_r+0x34>
 801d902:	463c      	mov	r4, r7
 801d904:	687f      	ldr	r7, [r7, #4]
 801d906:	e7b6      	b.n	801d876 <_malloc_r+0x4a>
 801d908:	461a      	mov	r2, r3
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	42a3      	cmp	r3, r4
 801d90e:	d1fb      	bne.n	801d908 <_malloc_r+0xdc>
 801d910:	2300      	movs	r3, #0
 801d912:	6053      	str	r3, [r2, #4]
 801d914:	e7de      	b.n	801d8d4 <_malloc_r+0xa8>
 801d916:	230c      	movs	r3, #12
 801d918:	6033      	str	r3, [r6, #0]
 801d91a:	4630      	mov	r0, r6
 801d91c:	f000 f80c 	bl	801d938 <__malloc_unlock>
 801d920:	e794      	b.n	801d84c <_malloc_r+0x20>
 801d922:	6005      	str	r5, [r0, #0]
 801d924:	e7d6      	b.n	801d8d4 <_malloc_r+0xa8>
 801d926:	bf00      	nop
 801d928:	20003668 	.word	0x20003668

0801d92c <__malloc_lock>:
 801d92c:	4801      	ldr	r0, [pc, #4]	@ (801d934 <__malloc_lock+0x8>)
 801d92e:	f001 bade 	b.w	801eeee <__retarget_lock_acquire_recursive>
 801d932:	bf00      	nop
 801d934:	200037ac 	.word	0x200037ac

0801d938 <__malloc_unlock>:
 801d938:	4801      	ldr	r0, [pc, #4]	@ (801d940 <__malloc_unlock+0x8>)
 801d93a:	f001 bad9 	b.w	801eef0 <__retarget_lock_release_recursive>
 801d93e:	bf00      	nop
 801d940:	200037ac 	.word	0x200037ac

0801d944 <_strtol_l.constprop.0>:
 801d944:	2b24      	cmp	r3, #36	@ 0x24
 801d946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d94a:	4686      	mov	lr, r0
 801d94c:	4690      	mov	r8, r2
 801d94e:	d801      	bhi.n	801d954 <_strtol_l.constprop.0+0x10>
 801d950:	2b01      	cmp	r3, #1
 801d952:	d106      	bne.n	801d962 <_strtol_l.constprop.0+0x1e>
 801d954:	f001 faa0 	bl	801ee98 <__errno>
 801d958:	2316      	movs	r3, #22
 801d95a:	6003      	str	r3, [r0, #0]
 801d95c:	2000      	movs	r0, #0
 801d95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d962:	4834      	ldr	r0, [pc, #208]	@ (801da34 <_strtol_l.constprop.0+0xf0>)
 801d964:	460d      	mov	r5, r1
 801d966:	462a      	mov	r2, r5
 801d968:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d96c:	5d06      	ldrb	r6, [r0, r4]
 801d96e:	f016 0608 	ands.w	r6, r6, #8
 801d972:	d1f8      	bne.n	801d966 <_strtol_l.constprop.0+0x22>
 801d974:	2c2d      	cmp	r4, #45	@ 0x2d
 801d976:	d12d      	bne.n	801d9d4 <_strtol_l.constprop.0+0x90>
 801d978:	782c      	ldrb	r4, [r5, #0]
 801d97a:	2601      	movs	r6, #1
 801d97c:	1c95      	adds	r5, r2, #2
 801d97e:	f033 0210 	bics.w	r2, r3, #16
 801d982:	d109      	bne.n	801d998 <_strtol_l.constprop.0+0x54>
 801d984:	2c30      	cmp	r4, #48	@ 0x30
 801d986:	d12a      	bne.n	801d9de <_strtol_l.constprop.0+0x9a>
 801d988:	782a      	ldrb	r2, [r5, #0]
 801d98a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d98e:	2a58      	cmp	r2, #88	@ 0x58
 801d990:	d125      	bne.n	801d9de <_strtol_l.constprop.0+0x9a>
 801d992:	786c      	ldrb	r4, [r5, #1]
 801d994:	2310      	movs	r3, #16
 801d996:	3502      	adds	r5, #2
 801d998:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d99c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d9a0:	2200      	movs	r2, #0
 801d9a2:	fbbc f9f3 	udiv	r9, ip, r3
 801d9a6:	4610      	mov	r0, r2
 801d9a8:	fb03 ca19 	mls	sl, r3, r9, ip
 801d9ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d9b0:	2f09      	cmp	r7, #9
 801d9b2:	d81b      	bhi.n	801d9ec <_strtol_l.constprop.0+0xa8>
 801d9b4:	463c      	mov	r4, r7
 801d9b6:	42a3      	cmp	r3, r4
 801d9b8:	dd27      	ble.n	801da0a <_strtol_l.constprop.0+0xc6>
 801d9ba:	1c57      	adds	r7, r2, #1
 801d9bc:	d007      	beq.n	801d9ce <_strtol_l.constprop.0+0x8a>
 801d9be:	4581      	cmp	r9, r0
 801d9c0:	d320      	bcc.n	801da04 <_strtol_l.constprop.0+0xc0>
 801d9c2:	d101      	bne.n	801d9c8 <_strtol_l.constprop.0+0x84>
 801d9c4:	45a2      	cmp	sl, r4
 801d9c6:	db1d      	blt.n	801da04 <_strtol_l.constprop.0+0xc0>
 801d9c8:	fb00 4003 	mla	r0, r0, r3, r4
 801d9cc:	2201      	movs	r2, #1
 801d9ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d9d2:	e7eb      	b.n	801d9ac <_strtol_l.constprop.0+0x68>
 801d9d4:	2c2b      	cmp	r4, #43	@ 0x2b
 801d9d6:	bf04      	itt	eq
 801d9d8:	782c      	ldrbeq	r4, [r5, #0]
 801d9da:	1c95      	addeq	r5, r2, #2
 801d9dc:	e7cf      	b.n	801d97e <_strtol_l.constprop.0+0x3a>
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d1da      	bne.n	801d998 <_strtol_l.constprop.0+0x54>
 801d9e2:	2c30      	cmp	r4, #48	@ 0x30
 801d9e4:	bf0c      	ite	eq
 801d9e6:	2308      	moveq	r3, #8
 801d9e8:	230a      	movne	r3, #10
 801d9ea:	e7d5      	b.n	801d998 <_strtol_l.constprop.0+0x54>
 801d9ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d9f0:	2f19      	cmp	r7, #25
 801d9f2:	d801      	bhi.n	801d9f8 <_strtol_l.constprop.0+0xb4>
 801d9f4:	3c37      	subs	r4, #55	@ 0x37
 801d9f6:	e7de      	b.n	801d9b6 <_strtol_l.constprop.0+0x72>
 801d9f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d9fc:	2f19      	cmp	r7, #25
 801d9fe:	d804      	bhi.n	801da0a <_strtol_l.constprop.0+0xc6>
 801da00:	3c57      	subs	r4, #87	@ 0x57
 801da02:	e7d8      	b.n	801d9b6 <_strtol_l.constprop.0+0x72>
 801da04:	f04f 32ff 	mov.w	r2, #4294967295
 801da08:	e7e1      	b.n	801d9ce <_strtol_l.constprop.0+0x8a>
 801da0a:	1c53      	adds	r3, r2, #1
 801da0c:	d108      	bne.n	801da20 <_strtol_l.constprop.0+0xdc>
 801da0e:	2322      	movs	r3, #34	@ 0x22
 801da10:	f8ce 3000 	str.w	r3, [lr]
 801da14:	4660      	mov	r0, ip
 801da16:	f1b8 0f00 	cmp.w	r8, #0
 801da1a:	d0a0      	beq.n	801d95e <_strtol_l.constprop.0+0x1a>
 801da1c:	1e69      	subs	r1, r5, #1
 801da1e:	e006      	b.n	801da2e <_strtol_l.constprop.0+0xea>
 801da20:	b106      	cbz	r6, 801da24 <_strtol_l.constprop.0+0xe0>
 801da22:	4240      	negs	r0, r0
 801da24:	f1b8 0f00 	cmp.w	r8, #0
 801da28:	d099      	beq.n	801d95e <_strtol_l.constprop.0+0x1a>
 801da2a:	2a00      	cmp	r2, #0
 801da2c:	d1f6      	bne.n	801da1c <_strtol_l.constprop.0+0xd8>
 801da2e:	f8c8 1000 	str.w	r1, [r8]
 801da32:	e794      	b.n	801d95e <_strtol_l.constprop.0+0x1a>
 801da34:	0802543d 	.word	0x0802543d

0801da38 <_strtol_r>:
 801da38:	f7ff bf84 	b.w	801d944 <_strtol_l.constprop.0>

0801da3c <strtol>:
 801da3c:	4613      	mov	r3, r2
 801da3e:	460a      	mov	r2, r1
 801da40:	4601      	mov	r1, r0
 801da42:	4802      	ldr	r0, [pc, #8]	@ (801da4c <strtol+0x10>)
 801da44:	6800      	ldr	r0, [r0, #0]
 801da46:	f7ff bf7d 	b.w	801d944 <_strtol_l.constprop.0>
 801da4a:	bf00      	nop
 801da4c:	20000148 	.word	0x20000148

0801da50 <__cvt>:
 801da50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da54:	ec57 6b10 	vmov	r6, r7, d0
 801da58:	2f00      	cmp	r7, #0
 801da5a:	460c      	mov	r4, r1
 801da5c:	4619      	mov	r1, r3
 801da5e:	463b      	mov	r3, r7
 801da60:	bfbb      	ittet	lt
 801da62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801da66:	461f      	movlt	r7, r3
 801da68:	2300      	movge	r3, #0
 801da6a:	232d      	movlt	r3, #45	@ 0x2d
 801da6c:	700b      	strb	r3, [r1, #0]
 801da6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801da74:	4691      	mov	r9, r2
 801da76:	f023 0820 	bic.w	r8, r3, #32
 801da7a:	bfbc      	itt	lt
 801da7c:	4632      	movlt	r2, r6
 801da7e:	4616      	movlt	r6, r2
 801da80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801da84:	d005      	beq.n	801da92 <__cvt+0x42>
 801da86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801da8a:	d100      	bne.n	801da8e <__cvt+0x3e>
 801da8c:	3401      	adds	r4, #1
 801da8e:	2102      	movs	r1, #2
 801da90:	e000      	b.n	801da94 <__cvt+0x44>
 801da92:	2103      	movs	r1, #3
 801da94:	ab03      	add	r3, sp, #12
 801da96:	9301      	str	r3, [sp, #4]
 801da98:	ab02      	add	r3, sp, #8
 801da9a:	9300      	str	r3, [sp, #0]
 801da9c:	ec47 6b10 	vmov	d0, r6, r7
 801daa0:	4653      	mov	r3, sl
 801daa2:	4622      	mov	r2, r4
 801daa4:	f001 fae8 	bl	801f078 <_dtoa_r>
 801daa8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801daac:	4605      	mov	r5, r0
 801daae:	d119      	bne.n	801dae4 <__cvt+0x94>
 801dab0:	f019 0f01 	tst.w	r9, #1
 801dab4:	d00e      	beq.n	801dad4 <__cvt+0x84>
 801dab6:	eb00 0904 	add.w	r9, r0, r4
 801daba:	2200      	movs	r2, #0
 801dabc:	2300      	movs	r3, #0
 801dabe:	4630      	mov	r0, r6
 801dac0:	4639      	mov	r1, r7
 801dac2:	f7e3 f819 	bl	8000af8 <__aeabi_dcmpeq>
 801dac6:	b108      	cbz	r0, 801dacc <__cvt+0x7c>
 801dac8:	f8cd 900c 	str.w	r9, [sp, #12]
 801dacc:	2230      	movs	r2, #48	@ 0x30
 801dace:	9b03      	ldr	r3, [sp, #12]
 801dad0:	454b      	cmp	r3, r9
 801dad2:	d31e      	bcc.n	801db12 <__cvt+0xc2>
 801dad4:	9b03      	ldr	r3, [sp, #12]
 801dad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dad8:	1b5b      	subs	r3, r3, r5
 801dada:	4628      	mov	r0, r5
 801dadc:	6013      	str	r3, [r2, #0]
 801dade:	b004      	add	sp, #16
 801dae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dae4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dae8:	eb00 0904 	add.w	r9, r0, r4
 801daec:	d1e5      	bne.n	801daba <__cvt+0x6a>
 801daee:	7803      	ldrb	r3, [r0, #0]
 801daf0:	2b30      	cmp	r3, #48	@ 0x30
 801daf2:	d10a      	bne.n	801db0a <__cvt+0xba>
 801daf4:	2200      	movs	r2, #0
 801daf6:	2300      	movs	r3, #0
 801daf8:	4630      	mov	r0, r6
 801dafa:	4639      	mov	r1, r7
 801dafc:	f7e2 fffc 	bl	8000af8 <__aeabi_dcmpeq>
 801db00:	b918      	cbnz	r0, 801db0a <__cvt+0xba>
 801db02:	f1c4 0401 	rsb	r4, r4, #1
 801db06:	f8ca 4000 	str.w	r4, [sl]
 801db0a:	f8da 3000 	ldr.w	r3, [sl]
 801db0e:	4499      	add	r9, r3
 801db10:	e7d3      	b.n	801daba <__cvt+0x6a>
 801db12:	1c59      	adds	r1, r3, #1
 801db14:	9103      	str	r1, [sp, #12]
 801db16:	701a      	strb	r2, [r3, #0]
 801db18:	e7d9      	b.n	801dace <__cvt+0x7e>

0801db1a <__exponent>:
 801db1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db1c:	2900      	cmp	r1, #0
 801db1e:	bfba      	itte	lt
 801db20:	4249      	neglt	r1, r1
 801db22:	232d      	movlt	r3, #45	@ 0x2d
 801db24:	232b      	movge	r3, #43	@ 0x2b
 801db26:	2909      	cmp	r1, #9
 801db28:	7002      	strb	r2, [r0, #0]
 801db2a:	7043      	strb	r3, [r0, #1]
 801db2c:	dd29      	ble.n	801db82 <__exponent+0x68>
 801db2e:	f10d 0307 	add.w	r3, sp, #7
 801db32:	461d      	mov	r5, r3
 801db34:	270a      	movs	r7, #10
 801db36:	461a      	mov	r2, r3
 801db38:	fbb1 f6f7 	udiv	r6, r1, r7
 801db3c:	fb07 1416 	mls	r4, r7, r6, r1
 801db40:	3430      	adds	r4, #48	@ 0x30
 801db42:	f802 4c01 	strb.w	r4, [r2, #-1]
 801db46:	460c      	mov	r4, r1
 801db48:	2c63      	cmp	r4, #99	@ 0x63
 801db4a:	f103 33ff 	add.w	r3, r3, #4294967295
 801db4e:	4631      	mov	r1, r6
 801db50:	dcf1      	bgt.n	801db36 <__exponent+0x1c>
 801db52:	3130      	adds	r1, #48	@ 0x30
 801db54:	1e94      	subs	r4, r2, #2
 801db56:	f803 1c01 	strb.w	r1, [r3, #-1]
 801db5a:	1c41      	adds	r1, r0, #1
 801db5c:	4623      	mov	r3, r4
 801db5e:	42ab      	cmp	r3, r5
 801db60:	d30a      	bcc.n	801db78 <__exponent+0x5e>
 801db62:	f10d 0309 	add.w	r3, sp, #9
 801db66:	1a9b      	subs	r3, r3, r2
 801db68:	42ac      	cmp	r4, r5
 801db6a:	bf88      	it	hi
 801db6c:	2300      	movhi	r3, #0
 801db6e:	3302      	adds	r3, #2
 801db70:	4403      	add	r3, r0
 801db72:	1a18      	subs	r0, r3, r0
 801db74:	b003      	add	sp, #12
 801db76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db78:	f813 6b01 	ldrb.w	r6, [r3], #1
 801db7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 801db80:	e7ed      	b.n	801db5e <__exponent+0x44>
 801db82:	2330      	movs	r3, #48	@ 0x30
 801db84:	3130      	adds	r1, #48	@ 0x30
 801db86:	7083      	strb	r3, [r0, #2]
 801db88:	70c1      	strb	r1, [r0, #3]
 801db8a:	1d03      	adds	r3, r0, #4
 801db8c:	e7f1      	b.n	801db72 <__exponent+0x58>
	...

0801db90 <_printf_float>:
 801db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db94:	b08d      	sub	sp, #52	@ 0x34
 801db96:	460c      	mov	r4, r1
 801db98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801db9c:	4616      	mov	r6, r2
 801db9e:	461f      	mov	r7, r3
 801dba0:	4605      	mov	r5, r0
 801dba2:	f001 f91f 	bl	801ede4 <_localeconv_r>
 801dba6:	6803      	ldr	r3, [r0, #0]
 801dba8:	9304      	str	r3, [sp, #16]
 801dbaa:	4618      	mov	r0, r3
 801dbac:	f7e2 fb78 	bl	80002a0 <strlen>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	930a      	str	r3, [sp, #40]	@ 0x28
 801dbb4:	f8d8 3000 	ldr.w	r3, [r8]
 801dbb8:	9005      	str	r0, [sp, #20]
 801dbba:	3307      	adds	r3, #7
 801dbbc:	f023 0307 	bic.w	r3, r3, #7
 801dbc0:	f103 0208 	add.w	r2, r3, #8
 801dbc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dbc8:	f8d4 b000 	ldr.w	fp, [r4]
 801dbcc:	f8c8 2000 	str.w	r2, [r8]
 801dbd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dbd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dbd8:	9307      	str	r3, [sp, #28]
 801dbda:	f8cd 8018 	str.w	r8, [sp, #24]
 801dbde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dbe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dbe6:	4b9c      	ldr	r3, [pc, #624]	@ (801de58 <_printf_float+0x2c8>)
 801dbe8:	f04f 32ff 	mov.w	r2, #4294967295
 801dbec:	f7e2 ffb6 	bl	8000b5c <__aeabi_dcmpun>
 801dbf0:	bb70      	cbnz	r0, 801dc50 <_printf_float+0xc0>
 801dbf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dbf6:	4b98      	ldr	r3, [pc, #608]	@ (801de58 <_printf_float+0x2c8>)
 801dbf8:	f04f 32ff 	mov.w	r2, #4294967295
 801dbfc:	f7e2 ff90 	bl	8000b20 <__aeabi_dcmple>
 801dc00:	bb30      	cbnz	r0, 801dc50 <_printf_float+0xc0>
 801dc02:	2200      	movs	r2, #0
 801dc04:	2300      	movs	r3, #0
 801dc06:	4640      	mov	r0, r8
 801dc08:	4649      	mov	r1, r9
 801dc0a:	f7e2 ff7f 	bl	8000b0c <__aeabi_dcmplt>
 801dc0e:	b110      	cbz	r0, 801dc16 <_printf_float+0x86>
 801dc10:	232d      	movs	r3, #45	@ 0x2d
 801dc12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dc16:	4a91      	ldr	r2, [pc, #580]	@ (801de5c <_printf_float+0x2cc>)
 801dc18:	4b91      	ldr	r3, [pc, #580]	@ (801de60 <_printf_float+0x2d0>)
 801dc1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801dc1e:	bf94      	ite	ls
 801dc20:	4690      	movls	r8, r2
 801dc22:	4698      	movhi	r8, r3
 801dc24:	2303      	movs	r3, #3
 801dc26:	6123      	str	r3, [r4, #16]
 801dc28:	f02b 0304 	bic.w	r3, fp, #4
 801dc2c:	6023      	str	r3, [r4, #0]
 801dc2e:	f04f 0900 	mov.w	r9, #0
 801dc32:	9700      	str	r7, [sp, #0]
 801dc34:	4633      	mov	r3, r6
 801dc36:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dc38:	4621      	mov	r1, r4
 801dc3a:	4628      	mov	r0, r5
 801dc3c:	f000 f9d2 	bl	801dfe4 <_printf_common>
 801dc40:	3001      	adds	r0, #1
 801dc42:	f040 808d 	bne.w	801dd60 <_printf_float+0x1d0>
 801dc46:	f04f 30ff 	mov.w	r0, #4294967295
 801dc4a:	b00d      	add	sp, #52	@ 0x34
 801dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc50:	4642      	mov	r2, r8
 801dc52:	464b      	mov	r3, r9
 801dc54:	4640      	mov	r0, r8
 801dc56:	4649      	mov	r1, r9
 801dc58:	f7e2 ff80 	bl	8000b5c <__aeabi_dcmpun>
 801dc5c:	b140      	cbz	r0, 801dc70 <_printf_float+0xe0>
 801dc5e:	464b      	mov	r3, r9
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	bfbc      	itt	lt
 801dc64:	232d      	movlt	r3, #45	@ 0x2d
 801dc66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801dc6a:	4a7e      	ldr	r2, [pc, #504]	@ (801de64 <_printf_float+0x2d4>)
 801dc6c:	4b7e      	ldr	r3, [pc, #504]	@ (801de68 <_printf_float+0x2d8>)
 801dc6e:	e7d4      	b.n	801dc1a <_printf_float+0x8a>
 801dc70:	6863      	ldr	r3, [r4, #4]
 801dc72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801dc76:	9206      	str	r2, [sp, #24]
 801dc78:	1c5a      	adds	r2, r3, #1
 801dc7a:	d13b      	bne.n	801dcf4 <_printf_float+0x164>
 801dc7c:	2306      	movs	r3, #6
 801dc7e:	6063      	str	r3, [r4, #4]
 801dc80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801dc84:	2300      	movs	r3, #0
 801dc86:	6022      	str	r2, [r4, #0]
 801dc88:	9303      	str	r3, [sp, #12]
 801dc8a:	ab0a      	add	r3, sp, #40	@ 0x28
 801dc8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801dc90:	ab09      	add	r3, sp, #36	@ 0x24
 801dc92:	9300      	str	r3, [sp, #0]
 801dc94:	6861      	ldr	r1, [r4, #4]
 801dc96:	ec49 8b10 	vmov	d0, r8, r9
 801dc9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801dc9e:	4628      	mov	r0, r5
 801dca0:	f7ff fed6 	bl	801da50 <__cvt>
 801dca4:	9b06      	ldr	r3, [sp, #24]
 801dca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dca8:	2b47      	cmp	r3, #71	@ 0x47
 801dcaa:	4680      	mov	r8, r0
 801dcac:	d129      	bne.n	801dd02 <_printf_float+0x172>
 801dcae:	1cc8      	adds	r0, r1, #3
 801dcb0:	db02      	blt.n	801dcb8 <_printf_float+0x128>
 801dcb2:	6863      	ldr	r3, [r4, #4]
 801dcb4:	4299      	cmp	r1, r3
 801dcb6:	dd41      	ble.n	801dd3c <_printf_float+0x1ac>
 801dcb8:	f1aa 0a02 	sub.w	sl, sl, #2
 801dcbc:	fa5f fa8a 	uxtb.w	sl, sl
 801dcc0:	3901      	subs	r1, #1
 801dcc2:	4652      	mov	r2, sl
 801dcc4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801dcc8:	9109      	str	r1, [sp, #36]	@ 0x24
 801dcca:	f7ff ff26 	bl	801db1a <__exponent>
 801dcce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dcd0:	1813      	adds	r3, r2, r0
 801dcd2:	2a01      	cmp	r2, #1
 801dcd4:	4681      	mov	r9, r0
 801dcd6:	6123      	str	r3, [r4, #16]
 801dcd8:	dc02      	bgt.n	801dce0 <_printf_float+0x150>
 801dcda:	6822      	ldr	r2, [r4, #0]
 801dcdc:	07d2      	lsls	r2, r2, #31
 801dcde:	d501      	bpl.n	801dce4 <_printf_float+0x154>
 801dce0:	3301      	adds	r3, #1
 801dce2:	6123      	str	r3, [r4, #16]
 801dce4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d0a2      	beq.n	801dc32 <_printf_float+0xa2>
 801dcec:	232d      	movs	r3, #45	@ 0x2d
 801dcee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dcf2:	e79e      	b.n	801dc32 <_printf_float+0xa2>
 801dcf4:	9a06      	ldr	r2, [sp, #24]
 801dcf6:	2a47      	cmp	r2, #71	@ 0x47
 801dcf8:	d1c2      	bne.n	801dc80 <_printf_float+0xf0>
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	d1c0      	bne.n	801dc80 <_printf_float+0xf0>
 801dcfe:	2301      	movs	r3, #1
 801dd00:	e7bd      	b.n	801dc7e <_printf_float+0xee>
 801dd02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dd06:	d9db      	bls.n	801dcc0 <_printf_float+0x130>
 801dd08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801dd0c:	d118      	bne.n	801dd40 <_printf_float+0x1b0>
 801dd0e:	2900      	cmp	r1, #0
 801dd10:	6863      	ldr	r3, [r4, #4]
 801dd12:	dd0b      	ble.n	801dd2c <_printf_float+0x19c>
 801dd14:	6121      	str	r1, [r4, #16]
 801dd16:	b913      	cbnz	r3, 801dd1e <_printf_float+0x18e>
 801dd18:	6822      	ldr	r2, [r4, #0]
 801dd1a:	07d0      	lsls	r0, r2, #31
 801dd1c:	d502      	bpl.n	801dd24 <_printf_float+0x194>
 801dd1e:	3301      	adds	r3, #1
 801dd20:	440b      	add	r3, r1
 801dd22:	6123      	str	r3, [r4, #16]
 801dd24:	65a1      	str	r1, [r4, #88]	@ 0x58
 801dd26:	f04f 0900 	mov.w	r9, #0
 801dd2a:	e7db      	b.n	801dce4 <_printf_float+0x154>
 801dd2c:	b913      	cbnz	r3, 801dd34 <_printf_float+0x1a4>
 801dd2e:	6822      	ldr	r2, [r4, #0]
 801dd30:	07d2      	lsls	r2, r2, #31
 801dd32:	d501      	bpl.n	801dd38 <_printf_float+0x1a8>
 801dd34:	3302      	adds	r3, #2
 801dd36:	e7f4      	b.n	801dd22 <_printf_float+0x192>
 801dd38:	2301      	movs	r3, #1
 801dd3a:	e7f2      	b.n	801dd22 <_printf_float+0x192>
 801dd3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801dd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd42:	4299      	cmp	r1, r3
 801dd44:	db05      	blt.n	801dd52 <_printf_float+0x1c2>
 801dd46:	6823      	ldr	r3, [r4, #0]
 801dd48:	6121      	str	r1, [r4, #16]
 801dd4a:	07d8      	lsls	r0, r3, #31
 801dd4c:	d5ea      	bpl.n	801dd24 <_printf_float+0x194>
 801dd4e:	1c4b      	adds	r3, r1, #1
 801dd50:	e7e7      	b.n	801dd22 <_printf_float+0x192>
 801dd52:	2900      	cmp	r1, #0
 801dd54:	bfd4      	ite	le
 801dd56:	f1c1 0202 	rsble	r2, r1, #2
 801dd5a:	2201      	movgt	r2, #1
 801dd5c:	4413      	add	r3, r2
 801dd5e:	e7e0      	b.n	801dd22 <_printf_float+0x192>
 801dd60:	6823      	ldr	r3, [r4, #0]
 801dd62:	055a      	lsls	r2, r3, #21
 801dd64:	d407      	bmi.n	801dd76 <_printf_float+0x1e6>
 801dd66:	6923      	ldr	r3, [r4, #16]
 801dd68:	4642      	mov	r2, r8
 801dd6a:	4631      	mov	r1, r6
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	47b8      	blx	r7
 801dd70:	3001      	adds	r0, #1
 801dd72:	d12b      	bne.n	801ddcc <_printf_float+0x23c>
 801dd74:	e767      	b.n	801dc46 <_printf_float+0xb6>
 801dd76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dd7a:	f240 80dd 	bls.w	801df38 <_printf_float+0x3a8>
 801dd7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dd82:	2200      	movs	r2, #0
 801dd84:	2300      	movs	r3, #0
 801dd86:	f7e2 feb7 	bl	8000af8 <__aeabi_dcmpeq>
 801dd8a:	2800      	cmp	r0, #0
 801dd8c:	d033      	beq.n	801ddf6 <_printf_float+0x266>
 801dd8e:	4a37      	ldr	r2, [pc, #220]	@ (801de6c <_printf_float+0x2dc>)
 801dd90:	2301      	movs	r3, #1
 801dd92:	4631      	mov	r1, r6
 801dd94:	4628      	mov	r0, r5
 801dd96:	47b8      	blx	r7
 801dd98:	3001      	adds	r0, #1
 801dd9a:	f43f af54 	beq.w	801dc46 <_printf_float+0xb6>
 801dd9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801dda2:	4543      	cmp	r3, r8
 801dda4:	db02      	blt.n	801ddac <_printf_float+0x21c>
 801dda6:	6823      	ldr	r3, [r4, #0]
 801dda8:	07d8      	lsls	r0, r3, #31
 801ddaa:	d50f      	bpl.n	801ddcc <_printf_float+0x23c>
 801ddac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ddb0:	4631      	mov	r1, r6
 801ddb2:	4628      	mov	r0, r5
 801ddb4:	47b8      	blx	r7
 801ddb6:	3001      	adds	r0, #1
 801ddb8:	f43f af45 	beq.w	801dc46 <_printf_float+0xb6>
 801ddbc:	f04f 0900 	mov.w	r9, #0
 801ddc0:	f108 38ff 	add.w	r8, r8, #4294967295
 801ddc4:	f104 0a1a 	add.w	sl, r4, #26
 801ddc8:	45c8      	cmp	r8, r9
 801ddca:	dc09      	bgt.n	801dde0 <_printf_float+0x250>
 801ddcc:	6823      	ldr	r3, [r4, #0]
 801ddce:	079b      	lsls	r3, r3, #30
 801ddd0:	f100 8103 	bmi.w	801dfda <_printf_float+0x44a>
 801ddd4:	68e0      	ldr	r0, [r4, #12]
 801ddd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddd8:	4298      	cmp	r0, r3
 801ddda:	bfb8      	it	lt
 801dddc:	4618      	movlt	r0, r3
 801ddde:	e734      	b.n	801dc4a <_printf_float+0xba>
 801dde0:	2301      	movs	r3, #1
 801dde2:	4652      	mov	r2, sl
 801dde4:	4631      	mov	r1, r6
 801dde6:	4628      	mov	r0, r5
 801dde8:	47b8      	blx	r7
 801ddea:	3001      	adds	r0, #1
 801ddec:	f43f af2b 	beq.w	801dc46 <_printf_float+0xb6>
 801ddf0:	f109 0901 	add.w	r9, r9, #1
 801ddf4:	e7e8      	b.n	801ddc8 <_printf_float+0x238>
 801ddf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	dc39      	bgt.n	801de70 <_printf_float+0x2e0>
 801ddfc:	4a1b      	ldr	r2, [pc, #108]	@ (801de6c <_printf_float+0x2dc>)
 801ddfe:	2301      	movs	r3, #1
 801de00:	4631      	mov	r1, r6
 801de02:	4628      	mov	r0, r5
 801de04:	47b8      	blx	r7
 801de06:	3001      	adds	r0, #1
 801de08:	f43f af1d 	beq.w	801dc46 <_printf_float+0xb6>
 801de0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801de10:	ea59 0303 	orrs.w	r3, r9, r3
 801de14:	d102      	bne.n	801de1c <_printf_float+0x28c>
 801de16:	6823      	ldr	r3, [r4, #0]
 801de18:	07d9      	lsls	r1, r3, #31
 801de1a:	d5d7      	bpl.n	801ddcc <_printf_float+0x23c>
 801de1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801de20:	4631      	mov	r1, r6
 801de22:	4628      	mov	r0, r5
 801de24:	47b8      	blx	r7
 801de26:	3001      	adds	r0, #1
 801de28:	f43f af0d 	beq.w	801dc46 <_printf_float+0xb6>
 801de2c:	f04f 0a00 	mov.w	sl, #0
 801de30:	f104 0b1a 	add.w	fp, r4, #26
 801de34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de36:	425b      	negs	r3, r3
 801de38:	4553      	cmp	r3, sl
 801de3a:	dc01      	bgt.n	801de40 <_printf_float+0x2b0>
 801de3c:	464b      	mov	r3, r9
 801de3e:	e793      	b.n	801dd68 <_printf_float+0x1d8>
 801de40:	2301      	movs	r3, #1
 801de42:	465a      	mov	r2, fp
 801de44:	4631      	mov	r1, r6
 801de46:	4628      	mov	r0, r5
 801de48:	47b8      	blx	r7
 801de4a:	3001      	adds	r0, #1
 801de4c:	f43f aefb 	beq.w	801dc46 <_printf_float+0xb6>
 801de50:	f10a 0a01 	add.w	sl, sl, #1
 801de54:	e7ee      	b.n	801de34 <_printf_float+0x2a4>
 801de56:	bf00      	nop
 801de58:	7fefffff 	.word	0x7fefffff
 801de5c:	0802553d 	.word	0x0802553d
 801de60:	08025541 	.word	0x08025541
 801de64:	08025545 	.word	0x08025545
 801de68:	08025549 	.word	0x08025549
 801de6c:	0802554d 	.word	0x0802554d
 801de70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801de72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801de76:	4553      	cmp	r3, sl
 801de78:	bfa8      	it	ge
 801de7a:	4653      	movge	r3, sl
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	4699      	mov	r9, r3
 801de80:	dc36      	bgt.n	801def0 <_printf_float+0x360>
 801de82:	f04f 0b00 	mov.w	fp, #0
 801de86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801de8a:	f104 021a 	add.w	r2, r4, #26
 801de8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801de90:	9306      	str	r3, [sp, #24]
 801de92:	eba3 0309 	sub.w	r3, r3, r9
 801de96:	455b      	cmp	r3, fp
 801de98:	dc31      	bgt.n	801defe <_printf_float+0x36e>
 801de9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de9c:	459a      	cmp	sl, r3
 801de9e:	dc3a      	bgt.n	801df16 <_printf_float+0x386>
 801dea0:	6823      	ldr	r3, [r4, #0]
 801dea2:	07da      	lsls	r2, r3, #31
 801dea4:	d437      	bmi.n	801df16 <_printf_float+0x386>
 801dea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dea8:	ebaa 0903 	sub.w	r9, sl, r3
 801deac:	9b06      	ldr	r3, [sp, #24]
 801deae:	ebaa 0303 	sub.w	r3, sl, r3
 801deb2:	4599      	cmp	r9, r3
 801deb4:	bfa8      	it	ge
 801deb6:	4699      	movge	r9, r3
 801deb8:	f1b9 0f00 	cmp.w	r9, #0
 801debc:	dc33      	bgt.n	801df26 <_printf_float+0x396>
 801debe:	f04f 0800 	mov.w	r8, #0
 801dec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dec6:	f104 0b1a 	add.w	fp, r4, #26
 801deca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801decc:	ebaa 0303 	sub.w	r3, sl, r3
 801ded0:	eba3 0309 	sub.w	r3, r3, r9
 801ded4:	4543      	cmp	r3, r8
 801ded6:	f77f af79 	ble.w	801ddcc <_printf_float+0x23c>
 801deda:	2301      	movs	r3, #1
 801dedc:	465a      	mov	r2, fp
 801dede:	4631      	mov	r1, r6
 801dee0:	4628      	mov	r0, r5
 801dee2:	47b8      	blx	r7
 801dee4:	3001      	adds	r0, #1
 801dee6:	f43f aeae 	beq.w	801dc46 <_printf_float+0xb6>
 801deea:	f108 0801 	add.w	r8, r8, #1
 801deee:	e7ec      	b.n	801deca <_printf_float+0x33a>
 801def0:	4642      	mov	r2, r8
 801def2:	4631      	mov	r1, r6
 801def4:	4628      	mov	r0, r5
 801def6:	47b8      	blx	r7
 801def8:	3001      	adds	r0, #1
 801defa:	d1c2      	bne.n	801de82 <_printf_float+0x2f2>
 801defc:	e6a3      	b.n	801dc46 <_printf_float+0xb6>
 801defe:	2301      	movs	r3, #1
 801df00:	4631      	mov	r1, r6
 801df02:	4628      	mov	r0, r5
 801df04:	9206      	str	r2, [sp, #24]
 801df06:	47b8      	blx	r7
 801df08:	3001      	adds	r0, #1
 801df0a:	f43f ae9c 	beq.w	801dc46 <_printf_float+0xb6>
 801df0e:	9a06      	ldr	r2, [sp, #24]
 801df10:	f10b 0b01 	add.w	fp, fp, #1
 801df14:	e7bb      	b.n	801de8e <_printf_float+0x2fe>
 801df16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df1a:	4631      	mov	r1, r6
 801df1c:	4628      	mov	r0, r5
 801df1e:	47b8      	blx	r7
 801df20:	3001      	adds	r0, #1
 801df22:	d1c0      	bne.n	801dea6 <_printf_float+0x316>
 801df24:	e68f      	b.n	801dc46 <_printf_float+0xb6>
 801df26:	9a06      	ldr	r2, [sp, #24]
 801df28:	464b      	mov	r3, r9
 801df2a:	4442      	add	r2, r8
 801df2c:	4631      	mov	r1, r6
 801df2e:	4628      	mov	r0, r5
 801df30:	47b8      	blx	r7
 801df32:	3001      	adds	r0, #1
 801df34:	d1c3      	bne.n	801debe <_printf_float+0x32e>
 801df36:	e686      	b.n	801dc46 <_printf_float+0xb6>
 801df38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801df3c:	f1ba 0f01 	cmp.w	sl, #1
 801df40:	dc01      	bgt.n	801df46 <_printf_float+0x3b6>
 801df42:	07db      	lsls	r3, r3, #31
 801df44:	d536      	bpl.n	801dfb4 <_printf_float+0x424>
 801df46:	2301      	movs	r3, #1
 801df48:	4642      	mov	r2, r8
 801df4a:	4631      	mov	r1, r6
 801df4c:	4628      	mov	r0, r5
 801df4e:	47b8      	blx	r7
 801df50:	3001      	adds	r0, #1
 801df52:	f43f ae78 	beq.w	801dc46 <_printf_float+0xb6>
 801df56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df5a:	4631      	mov	r1, r6
 801df5c:	4628      	mov	r0, r5
 801df5e:	47b8      	blx	r7
 801df60:	3001      	adds	r0, #1
 801df62:	f43f ae70 	beq.w	801dc46 <_printf_float+0xb6>
 801df66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801df6a:	2200      	movs	r2, #0
 801df6c:	2300      	movs	r3, #0
 801df6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df72:	f7e2 fdc1 	bl	8000af8 <__aeabi_dcmpeq>
 801df76:	b9c0      	cbnz	r0, 801dfaa <_printf_float+0x41a>
 801df78:	4653      	mov	r3, sl
 801df7a:	f108 0201 	add.w	r2, r8, #1
 801df7e:	4631      	mov	r1, r6
 801df80:	4628      	mov	r0, r5
 801df82:	47b8      	blx	r7
 801df84:	3001      	adds	r0, #1
 801df86:	d10c      	bne.n	801dfa2 <_printf_float+0x412>
 801df88:	e65d      	b.n	801dc46 <_printf_float+0xb6>
 801df8a:	2301      	movs	r3, #1
 801df8c:	465a      	mov	r2, fp
 801df8e:	4631      	mov	r1, r6
 801df90:	4628      	mov	r0, r5
 801df92:	47b8      	blx	r7
 801df94:	3001      	adds	r0, #1
 801df96:	f43f ae56 	beq.w	801dc46 <_printf_float+0xb6>
 801df9a:	f108 0801 	add.w	r8, r8, #1
 801df9e:	45d0      	cmp	r8, sl
 801dfa0:	dbf3      	blt.n	801df8a <_printf_float+0x3fa>
 801dfa2:	464b      	mov	r3, r9
 801dfa4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801dfa8:	e6df      	b.n	801dd6a <_printf_float+0x1da>
 801dfaa:	f04f 0800 	mov.w	r8, #0
 801dfae:	f104 0b1a 	add.w	fp, r4, #26
 801dfb2:	e7f4      	b.n	801df9e <_printf_float+0x40e>
 801dfb4:	2301      	movs	r3, #1
 801dfb6:	4642      	mov	r2, r8
 801dfb8:	e7e1      	b.n	801df7e <_printf_float+0x3ee>
 801dfba:	2301      	movs	r3, #1
 801dfbc:	464a      	mov	r2, r9
 801dfbe:	4631      	mov	r1, r6
 801dfc0:	4628      	mov	r0, r5
 801dfc2:	47b8      	blx	r7
 801dfc4:	3001      	adds	r0, #1
 801dfc6:	f43f ae3e 	beq.w	801dc46 <_printf_float+0xb6>
 801dfca:	f108 0801 	add.w	r8, r8, #1
 801dfce:	68e3      	ldr	r3, [r4, #12]
 801dfd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dfd2:	1a5b      	subs	r3, r3, r1
 801dfd4:	4543      	cmp	r3, r8
 801dfd6:	dcf0      	bgt.n	801dfba <_printf_float+0x42a>
 801dfd8:	e6fc      	b.n	801ddd4 <_printf_float+0x244>
 801dfda:	f04f 0800 	mov.w	r8, #0
 801dfde:	f104 0919 	add.w	r9, r4, #25
 801dfe2:	e7f4      	b.n	801dfce <_printf_float+0x43e>

0801dfe4 <_printf_common>:
 801dfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfe8:	4616      	mov	r6, r2
 801dfea:	4698      	mov	r8, r3
 801dfec:	688a      	ldr	r2, [r1, #8]
 801dfee:	690b      	ldr	r3, [r1, #16]
 801dff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dff4:	4293      	cmp	r3, r2
 801dff6:	bfb8      	it	lt
 801dff8:	4613      	movlt	r3, r2
 801dffa:	6033      	str	r3, [r6, #0]
 801dffc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e000:	4607      	mov	r7, r0
 801e002:	460c      	mov	r4, r1
 801e004:	b10a      	cbz	r2, 801e00a <_printf_common+0x26>
 801e006:	3301      	adds	r3, #1
 801e008:	6033      	str	r3, [r6, #0]
 801e00a:	6823      	ldr	r3, [r4, #0]
 801e00c:	0699      	lsls	r1, r3, #26
 801e00e:	bf42      	ittt	mi
 801e010:	6833      	ldrmi	r3, [r6, #0]
 801e012:	3302      	addmi	r3, #2
 801e014:	6033      	strmi	r3, [r6, #0]
 801e016:	6825      	ldr	r5, [r4, #0]
 801e018:	f015 0506 	ands.w	r5, r5, #6
 801e01c:	d106      	bne.n	801e02c <_printf_common+0x48>
 801e01e:	f104 0a19 	add.w	sl, r4, #25
 801e022:	68e3      	ldr	r3, [r4, #12]
 801e024:	6832      	ldr	r2, [r6, #0]
 801e026:	1a9b      	subs	r3, r3, r2
 801e028:	42ab      	cmp	r3, r5
 801e02a:	dc26      	bgt.n	801e07a <_printf_common+0x96>
 801e02c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e030:	6822      	ldr	r2, [r4, #0]
 801e032:	3b00      	subs	r3, #0
 801e034:	bf18      	it	ne
 801e036:	2301      	movne	r3, #1
 801e038:	0692      	lsls	r2, r2, #26
 801e03a:	d42b      	bmi.n	801e094 <_printf_common+0xb0>
 801e03c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e040:	4641      	mov	r1, r8
 801e042:	4638      	mov	r0, r7
 801e044:	47c8      	blx	r9
 801e046:	3001      	adds	r0, #1
 801e048:	d01e      	beq.n	801e088 <_printf_common+0xa4>
 801e04a:	6823      	ldr	r3, [r4, #0]
 801e04c:	6922      	ldr	r2, [r4, #16]
 801e04e:	f003 0306 	and.w	r3, r3, #6
 801e052:	2b04      	cmp	r3, #4
 801e054:	bf02      	ittt	eq
 801e056:	68e5      	ldreq	r5, [r4, #12]
 801e058:	6833      	ldreq	r3, [r6, #0]
 801e05a:	1aed      	subeq	r5, r5, r3
 801e05c:	68a3      	ldr	r3, [r4, #8]
 801e05e:	bf0c      	ite	eq
 801e060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e064:	2500      	movne	r5, #0
 801e066:	4293      	cmp	r3, r2
 801e068:	bfc4      	itt	gt
 801e06a:	1a9b      	subgt	r3, r3, r2
 801e06c:	18ed      	addgt	r5, r5, r3
 801e06e:	2600      	movs	r6, #0
 801e070:	341a      	adds	r4, #26
 801e072:	42b5      	cmp	r5, r6
 801e074:	d11a      	bne.n	801e0ac <_printf_common+0xc8>
 801e076:	2000      	movs	r0, #0
 801e078:	e008      	b.n	801e08c <_printf_common+0xa8>
 801e07a:	2301      	movs	r3, #1
 801e07c:	4652      	mov	r2, sl
 801e07e:	4641      	mov	r1, r8
 801e080:	4638      	mov	r0, r7
 801e082:	47c8      	blx	r9
 801e084:	3001      	adds	r0, #1
 801e086:	d103      	bne.n	801e090 <_printf_common+0xac>
 801e088:	f04f 30ff 	mov.w	r0, #4294967295
 801e08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e090:	3501      	adds	r5, #1
 801e092:	e7c6      	b.n	801e022 <_printf_common+0x3e>
 801e094:	18e1      	adds	r1, r4, r3
 801e096:	1c5a      	adds	r2, r3, #1
 801e098:	2030      	movs	r0, #48	@ 0x30
 801e09a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e09e:	4422      	add	r2, r4
 801e0a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e0a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e0a8:	3302      	adds	r3, #2
 801e0aa:	e7c7      	b.n	801e03c <_printf_common+0x58>
 801e0ac:	2301      	movs	r3, #1
 801e0ae:	4622      	mov	r2, r4
 801e0b0:	4641      	mov	r1, r8
 801e0b2:	4638      	mov	r0, r7
 801e0b4:	47c8      	blx	r9
 801e0b6:	3001      	adds	r0, #1
 801e0b8:	d0e6      	beq.n	801e088 <_printf_common+0xa4>
 801e0ba:	3601      	adds	r6, #1
 801e0bc:	e7d9      	b.n	801e072 <_printf_common+0x8e>
	...

0801e0c0 <_printf_i>:
 801e0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e0c4:	7e0f      	ldrb	r7, [r1, #24]
 801e0c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e0c8:	2f78      	cmp	r7, #120	@ 0x78
 801e0ca:	4691      	mov	r9, r2
 801e0cc:	4680      	mov	r8, r0
 801e0ce:	460c      	mov	r4, r1
 801e0d0:	469a      	mov	sl, r3
 801e0d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e0d6:	d807      	bhi.n	801e0e8 <_printf_i+0x28>
 801e0d8:	2f62      	cmp	r7, #98	@ 0x62
 801e0da:	d80a      	bhi.n	801e0f2 <_printf_i+0x32>
 801e0dc:	2f00      	cmp	r7, #0
 801e0de:	f000 80d2 	beq.w	801e286 <_printf_i+0x1c6>
 801e0e2:	2f58      	cmp	r7, #88	@ 0x58
 801e0e4:	f000 80b9 	beq.w	801e25a <_printf_i+0x19a>
 801e0e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e0ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e0f0:	e03a      	b.n	801e168 <_printf_i+0xa8>
 801e0f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e0f6:	2b15      	cmp	r3, #21
 801e0f8:	d8f6      	bhi.n	801e0e8 <_printf_i+0x28>
 801e0fa:	a101      	add	r1, pc, #4	@ (adr r1, 801e100 <_printf_i+0x40>)
 801e0fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e100:	0801e159 	.word	0x0801e159
 801e104:	0801e16d 	.word	0x0801e16d
 801e108:	0801e0e9 	.word	0x0801e0e9
 801e10c:	0801e0e9 	.word	0x0801e0e9
 801e110:	0801e0e9 	.word	0x0801e0e9
 801e114:	0801e0e9 	.word	0x0801e0e9
 801e118:	0801e16d 	.word	0x0801e16d
 801e11c:	0801e0e9 	.word	0x0801e0e9
 801e120:	0801e0e9 	.word	0x0801e0e9
 801e124:	0801e0e9 	.word	0x0801e0e9
 801e128:	0801e0e9 	.word	0x0801e0e9
 801e12c:	0801e26d 	.word	0x0801e26d
 801e130:	0801e197 	.word	0x0801e197
 801e134:	0801e227 	.word	0x0801e227
 801e138:	0801e0e9 	.word	0x0801e0e9
 801e13c:	0801e0e9 	.word	0x0801e0e9
 801e140:	0801e28f 	.word	0x0801e28f
 801e144:	0801e0e9 	.word	0x0801e0e9
 801e148:	0801e197 	.word	0x0801e197
 801e14c:	0801e0e9 	.word	0x0801e0e9
 801e150:	0801e0e9 	.word	0x0801e0e9
 801e154:	0801e22f 	.word	0x0801e22f
 801e158:	6833      	ldr	r3, [r6, #0]
 801e15a:	1d1a      	adds	r2, r3, #4
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	6032      	str	r2, [r6, #0]
 801e160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e168:	2301      	movs	r3, #1
 801e16a:	e09d      	b.n	801e2a8 <_printf_i+0x1e8>
 801e16c:	6833      	ldr	r3, [r6, #0]
 801e16e:	6820      	ldr	r0, [r4, #0]
 801e170:	1d19      	adds	r1, r3, #4
 801e172:	6031      	str	r1, [r6, #0]
 801e174:	0606      	lsls	r6, r0, #24
 801e176:	d501      	bpl.n	801e17c <_printf_i+0xbc>
 801e178:	681d      	ldr	r5, [r3, #0]
 801e17a:	e003      	b.n	801e184 <_printf_i+0xc4>
 801e17c:	0645      	lsls	r5, r0, #25
 801e17e:	d5fb      	bpl.n	801e178 <_printf_i+0xb8>
 801e180:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e184:	2d00      	cmp	r5, #0
 801e186:	da03      	bge.n	801e190 <_printf_i+0xd0>
 801e188:	232d      	movs	r3, #45	@ 0x2d
 801e18a:	426d      	negs	r5, r5
 801e18c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e190:	4859      	ldr	r0, [pc, #356]	@ (801e2f8 <_printf_i+0x238>)
 801e192:	230a      	movs	r3, #10
 801e194:	e011      	b.n	801e1ba <_printf_i+0xfa>
 801e196:	6821      	ldr	r1, [r4, #0]
 801e198:	6833      	ldr	r3, [r6, #0]
 801e19a:	0608      	lsls	r0, r1, #24
 801e19c:	f853 5b04 	ldr.w	r5, [r3], #4
 801e1a0:	d402      	bmi.n	801e1a8 <_printf_i+0xe8>
 801e1a2:	0649      	lsls	r1, r1, #25
 801e1a4:	bf48      	it	mi
 801e1a6:	b2ad      	uxthmi	r5, r5
 801e1a8:	2f6f      	cmp	r7, #111	@ 0x6f
 801e1aa:	4853      	ldr	r0, [pc, #332]	@ (801e2f8 <_printf_i+0x238>)
 801e1ac:	6033      	str	r3, [r6, #0]
 801e1ae:	bf14      	ite	ne
 801e1b0:	230a      	movne	r3, #10
 801e1b2:	2308      	moveq	r3, #8
 801e1b4:	2100      	movs	r1, #0
 801e1b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e1ba:	6866      	ldr	r6, [r4, #4]
 801e1bc:	60a6      	str	r6, [r4, #8]
 801e1be:	2e00      	cmp	r6, #0
 801e1c0:	bfa2      	ittt	ge
 801e1c2:	6821      	ldrge	r1, [r4, #0]
 801e1c4:	f021 0104 	bicge.w	r1, r1, #4
 801e1c8:	6021      	strge	r1, [r4, #0]
 801e1ca:	b90d      	cbnz	r5, 801e1d0 <_printf_i+0x110>
 801e1cc:	2e00      	cmp	r6, #0
 801e1ce:	d04b      	beq.n	801e268 <_printf_i+0x1a8>
 801e1d0:	4616      	mov	r6, r2
 801e1d2:	fbb5 f1f3 	udiv	r1, r5, r3
 801e1d6:	fb03 5711 	mls	r7, r3, r1, r5
 801e1da:	5dc7      	ldrb	r7, [r0, r7]
 801e1dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e1e0:	462f      	mov	r7, r5
 801e1e2:	42bb      	cmp	r3, r7
 801e1e4:	460d      	mov	r5, r1
 801e1e6:	d9f4      	bls.n	801e1d2 <_printf_i+0x112>
 801e1e8:	2b08      	cmp	r3, #8
 801e1ea:	d10b      	bne.n	801e204 <_printf_i+0x144>
 801e1ec:	6823      	ldr	r3, [r4, #0]
 801e1ee:	07df      	lsls	r7, r3, #31
 801e1f0:	d508      	bpl.n	801e204 <_printf_i+0x144>
 801e1f2:	6923      	ldr	r3, [r4, #16]
 801e1f4:	6861      	ldr	r1, [r4, #4]
 801e1f6:	4299      	cmp	r1, r3
 801e1f8:	bfde      	ittt	le
 801e1fa:	2330      	movle	r3, #48	@ 0x30
 801e1fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e200:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e204:	1b92      	subs	r2, r2, r6
 801e206:	6122      	str	r2, [r4, #16]
 801e208:	f8cd a000 	str.w	sl, [sp]
 801e20c:	464b      	mov	r3, r9
 801e20e:	aa03      	add	r2, sp, #12
 801e210:	4621      	mov	r1, r4
 801e212:	4640      	mov	r0, r8
 801e214:	f7ff fee6 	bl	801dfe4 <_printf_common>
 801e218:	3001      	adds	r0, #1
 801e21a:	d14a      	bne.n	801e2b2 <_printf_i+0x1f2>
 801e21c:	f04f 30ff 	mov.w	r0, #4294967295
 801e220:	b004      	add	sp, #16
 801e222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e226:	6823      	ldr	r3, [r4, #0]
 801e228:	f043 0320 	orr.w	r3, r3, #32
 801e22c:	6023      	str	r3, [r4, #0]
 801e22e:	4833      	ldr	r0, [pc, #204]	@ (801e2fc <_printf_i+0x23c>)
 801e230:	2778      	movs	r7, #120	@ 0x78
 801e232:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e236:	6823      	ldr	r3, [r4, #0]
 801e238:	6831      	ldr	r1, [r6, #0]
 801e23a:	061f      	lsls	r7, r3, #24
 801e23c:	f851 5b04 	ldr.w	r5, [r1], #4
 801e240:	d402      	bmi.n	801e248 <_printf_i+0x188>
 801e242:	065f      	lsls	r7, r3, #25
 801e244:	bf48      	it	mi
 801e246:	b2ad      	uxthmi	r5, r5
 801e248:	6031      	str	r1, [r6, #0]
 801e24a:	07d9      	lsls	r1, r3, #31
 801e24c:	bf44      	itt	mi
 801e24e:	f043 0320 	orrmi.w	r3, r3, #32
 801e252:	6023      	strmi	r3, [r4, #0]
 801e254:	b11d      	cbz	r5, 801e25e <_printf_i+0x19e>
 801e256:	2310      	movs	r3, #16
 801e258:	e7ac      	b.n	801e1b4 <_printf_i+0xf4>
 801e25a:	4827      	ldr	r0, [pc, #156]	@ (801e2f8 <_printf_i+0x238>)
 801e25c:	e7e9      	b.n	801e232 <_printf_i+0x172>
 801e25e:	6823      	ldr	r3, [r4, #0]
 801e260:	f023 0320 	bic.w	r3, r3, #32
 801e264:	6023      	str	r3, [r4, #0]
 801e266:	e7f6      	b.n	801e256 <_printf_i+0x196>
 801e268:	4616      	mov	r6, r2
 801e26a:	e7bd      	b.n	801e1e8 <_printf_i+0x128>
 801e26c:	6833      	ldr	r3, [r6, #0]
 801e26e:	6825      	ldr	r5, [r4, #0]
 801e270:	6961      	ldr	r1, [r4, #20]
 801e272:	1d18      	adds	r0, r3, #4
 801e274:	6030      	str	r0, [r6, #0]
 801e276:	062e      	lsls	r6, r5, #24
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	d501      	bpl.n	801e280 <_printf_i+0x1c0>
 801e27c:	6019      	str	r1, [r3, #0]
 801e27e:	e002      	b.n	801e286 <_printf_i+0x1c6>
 801e280:	0668      	lsls	r0, r5, #25
 801e282:	d5fb      	bpl.n	801e27c <_printf_i+0x1bc>
 801e284:	8019      	strh	r1, [r3, #0]
 801e286:	2300      	movs	r3, #0
 801e288:	6123      	str	r3, [r4, #16]
 801e28a:	4616      	mov	r6, r2
 801e28c:	e7bc      	b.n	801e208 <_printf_i+0x148>
 801e28e:	6833      	ldr	r3, [r6, #0]
 801e290:	1d1a      	adds	r2, r3, #4
 801e292:	6032      	str	r2, [r6, #0]
 801e294:	681e      	ldr	r6, [r3, #0]
 801e296:	6862      	ldr	r2, [r4, #4]
 801e298:	2100      	movs	r1, #0
 801e29a:	4630      	mov	r0, r6
 801e29c:	f7e1 ffb0 	bl	8000200 <memchr>
 801e2a0:	b108      	cbz	r0, 801e2a6 <_printf_i+0x1e6>
 801e2a2:	1b80      	subs	r0, r0, r6
 801e2a4:	6060      	str	r0, [r4, #4]
 801e2a6:	6863      	ldr	r3, [r4, #4]
 801e2a8:	6123      	str	r3, [r4, #16]
 801e2aa:	2300      	movs	r3, #0
 801e2ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2b0:	e7aa      	b.n	801e208 <_printf_i+0x148>
 801e2b2:	6923      	ldr	r3, [r4, #16]
 801e2b4:	4632      	mov	r2, r6
 801e2b6:	4649      	mov	r1, r9
 801e2b8:	4640      	mov	r0, r8
 801e2ba:	47d0      	blx	sl
 801e2bc:	3001      	adds	r0, #1
 801e2be:	d0ad      	beq.n	801e21c <_printf_i+0x15c>
 801e2c0:	6823      	ldr	r3, [r4, #0]
 801e2c2:	079b      	lsls	r3, r3, #30
 801e2c4:	d413      	bmi.n	801e2ee <_printf_i+0x22e>
 801e2c6:	68e0      	ldr	r0, [r4, #12]
 801e2c8:	9b03      	ldr	r3, [sp, #12]
 801e2ca:	4298      	cmp	r0, r3
 801e2cc:	bfb8      	it	lt
 801e2ce:	4618      	movlt	r0, r3
 801e2d0:	e7a6      	b.n	801e220 <_printf_i+0x160>
 801e2d2:	2301      	movs	r3, #1
 801e2d4:	4632      	mov	r2, r6
 801e2d6:	4649      	mov	r1, r9
 801e2d8:	4640      	mov	r0, r8
 801e2da:	47d0      	blx	sl
 801e2dc:	3001      	adds	r0, #1
 801e2de:	d09d      	beq.n	801e21c <_printf_i+0x15c>
 801e2e0:	3501      	adds	r5, #1
 801e2e2:	68e3      	ldr	r3, [r4, #12]
 801e2e4:	9903      	ldr	r1, [sp, #12]
 801e2e6:	1a5b      	subs	r3, r3, r1
 801e2e8:	42ab      	cmp	r3, r5
 801e2ea:	dcf2      	bgt.n	801e2d2 <_printf_i+0x212>
 801e2ec:	e7eb      	b.n	801e2c6 <_printf_i+0x206>
 801e2ee:	2500      	movs	r5, #0
 801e2f0:	f104 0619 	add.w	r6, r4, #25
 801e2f4:	e7f5      	b.n	801e2e2 <_printf_i+0x222>
 801e2f6:	bf00      	nop
 801e2f8:	0802554f 	.word	0x0802554f
 801e2fc:	08025560 	.word	0x08025560

0801e300 <_scanf_float>:
 801e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e304:	b087      	sub	sp, #28
 801e306:	4617      	mov	r7, r2
 801e308:	9303      	str	r3, [sp, #12]
 801e30a:	688b      	ldr	r3, [r1, #8]
 801e30c:	1e5a      	subs	r2, r3, #1
 801e30e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e312:	bf81      	itttt	hi
 801e314:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e318:	eb03 0b05 	addhi.w	fp, r3, r5
 801e31c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e320:	608b      	strhi	r3, [r1, #8]
 801e322:	680b      	ldr	r3, [r1, #0]
 801e324:	460a      	mov	r2, r1
 801e326:	f04f 0500 	mov.w	r5, #0
 801e32a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e32e:	f842 3b1c 	str.w	r3, [r2], #28
 801e332:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e336:	4680      	mov	r8, r0
 801e338:	460c      	mov	r4, r1
 801e33a:	bf98      	it	ls
 801e33c:	f04f 0b00 	movls.w	fp, #0
 801e340:	9201      	str	r2, [sp, #4]
 801e342:	4616      	mov	r6, r2
 801e344:	46aa      	mov	sl, r5
 801e346:	46a9      	mov	r9, r5
 801e348:	9502      	str	r5, [sp, #8]
 801e34a:	68a2      	ldr	r2, [r4, #8]
 801e34c:	b152      	cbz	r2, 801e364 <_scanf_float+0x64>
 801e34e:	683b      	ldr	r3, [r7, #0]
 801e350:	781b      	ldrb	r3, [r3, #0]
 801e352:	2b4e      	cmp	r3, #78	@ 0x4e
 801e354:	d864      	bhi.n	801e420 <_scanf_float+0x120>
 801e356:	2b40      	cmp	r3, #64	@ 0x40
 801e358:	d83c      	bhi.n	801e3d4 <_scanf_float+0xd4>
 801e35a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e35e:	b2c8      	uxtb	r0, r1
 801e360:	280e      	cmp	r0, #14
 801e362:	d93a      	bls.n	801e3da <_scanf_float+0xda>
 801e364:	f1b9 0f00 	cmp.w	r9, #0
 801e368:	d003      	beq.n	801e372 <_scanf_float+0x72>
 801e36a:	6823      	ldr	r3, [r4, #0]
 801e36c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e370:	6023      	str	r3, [r4, #0]
 801e372:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e376:	f1ba 0f01 	cmp.w	sl, #1
 801e37a:	f200 8117 	bhi.w	801e5ac <_scanf_float+0x2ac>
 801e37e:	9b01      	ldr	r3, [sp, #4]
 801e380:	429e      	cmp	r6, r3
 801e382:	f200 8108 	bhi.w	801e596 <_scanf_float+0x296>
 801e386:	2001      	movs	r0, #1
 801e388:	b007      	add	sp, #28
 801e38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e38e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e392:	2a0d      	cmp	r2, #13
 801e394:	d8e6      	bhi.n	801e364 <_scanf_float+0x64>
 801e396:	a101      	add	r1, pc, #4	@ (adr r1, 801e39c <_scanf_float+0x9c>)
 801e398:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e39c:	0801e4e3 	.word	0x0801e4e3
 801e3a0:	0801e365 	.word	0x0801e365
 801e3a4:	0801e365 	.word	0x0801e365
 801e3a8:	0801e365 	.word	0x0801e365
 801e3ac:	0801e543 	.word	0x0801e543
 801e3b0:	0801e51b 	.word	0x0801e51b
 801e3b4:	0801e365 	.word	0x0801e365
 801e3b8:	0801e365 	.word	0x0801e365
 801e3bc:	0801e4f1 	.word	0x0801e4f1
 801e3c0:	0801e365 	.word	0x0801e365
 801e3c4:	0801e365 	.word	0x0801e365
 801e3c8:	0801e365 	.word	0x0801e365
 801e3cc:	0801e365 	.word	0x0801e365
 801e3d0:	0801e4a9 	.word	0x0801e4a9
 801e3d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e3d8:	e7db      	b.n	801e392 <_scanf_float+0x92>
 801e3da:	290e      	cmp	r1, #14
 801e3dc:	d8c2      	bhi.n	801e364 <_scanf_float+0x64>
 801e3de:	a001      	add	r0, pc, #4	@ (adr r0, 801e3e4 <_scanf_float+0xe4>)
 801e3e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e3e4:	0801e499 	.word	0x0801e499
 801e3e8:	0801e365 	.word	0x0801e365
 801e3ec:	0801e499 	.word	0x0801e499
 801e3f0:	0801e52f 	.word	0x0801e52f
 801e3f4:	0801e365 	.word	0x0801e365
 801e3f8:	0801e441 	.word	0x0801e441
 801e3fc:	0801e47f 	.word	0x0801e47f
 801e400:	0801e47f 	.word	0x0801e47f
 801e404:	0801e47f 	.word	0x0801e47f
 801e408:	0801e47f 	.word	0x0801e47f
 801e40c:	0801e47f 	.word	0x0801e47f
 801e410:	0801e47f 	.word	0x0801e47f
 801e414:	0801e47f 	.word	0x0801e47f
 801e418:	0801e47f 	.word	0x0801e47f
 801e41c:	0801e47f 	.word	0x0801e47f
 801e420:	2b6e      	cmp	r3, #110	@ 0x6e
 801e422:	d809      	bhi.n	801e438 <_scanf_float+0x138>
 801e424:	2b60      	cmp	r3, #96	@ 0x60
 801e426:	d8b2      	bhi.n	801e38e <_scanf_float+0x8e>
 801e428:	2b54      	cmp	r3, #84	@ 0x54
 801e42a:	d07b      	beq.n	801e524 <_scanf_float+0x224>
 801e42c:	2b59      	cmp	r3, #89	@ 0x59
 801e42e:	d199      	bne.n	801e364 <_scanf_float+0x64>
 801e430:	2d07      	cmp	r5, #7
 801e432:	d197      	bne.n	801e364 <_scanf_float+0x64>
 801e434:	2508      	movs	r5, #8
 801e436:	e02c      	b.n	801e492 <_scanf_float+0x192>
 801e438:	2b74      	cmp	r3, #116	@ 0x74
 801e43a:	d073      	beq.n	801e524 <_scanf_float+0x224>
 801e43c:	2b79      	cmp	r3, #121	@ 0x79
 801e43e:	e7f6      	b.n	801e42e <_scanf_float+0x12e>
 801e440:	6821      	ldr	r1, [r4, #0]
 801e442:	05c8      	lsls	r0, r1, #23
 801e444:	d51b      	bpl.n	801e47e <_scanf_float+0x17e>
 801e446:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e44a:	6021      	str	r1, [r4, #0]
 801e44c:	f109 0901 	add.w	r9, r9, #1
 801e450:	f1bb 0f00 	cmp.w	fp, #0
 801e454:	d003      	beq.n	801e45e <_scanf_float+0x15e>
 801e456:	3201      	adds	r2, #1
 801e458:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e45c:	60a2      	str	r2, [r4, #8]
 801e45e:	68a3      	ldr	r3, [r4, #8]
 801e460:	3b01      	subs	r3, #1
 801e462:	60a3      	str	r3, [r4, #8]
 801e464:	6923      	ldr	r3, [r4, #16]
 801e466:	3301      	adds	r3, #1
 801e468:	6123      	str	r3, [r4, #16]
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	3b01      	subs	r3, #1
 801e46e:	2b00      	cmp	r3, #0
 801e470:	607b      	str	r3, [r7, #4]
 801e472:	f340 8087 	ble.w	801e584 <_scanf_float+0x284>
 801e476:	683b      	ldr	r3, [r7, #0]
 801e478:	3301      	adds	r3, #1
 801e47a:	603b      	str	r3, [r7, #0]
 801e47c:	e765      	b.n	801e34a <_scanf_float+0x4a>
 801e47e:	eb1a 0105 	adds.w	r1, sl, r5
 801e482:	f47f af6f 	bne.w	801e364 <_scanf_float+0x64>
 801e486:	6822      	ldr	r2, [r4, #0]
 801e488:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e48c:	6022      	str	r2, [r4, #0]
 801e48e:	460d      	mov	r5, r1
 801e490:	468a      	mov	sl, r1
 801e492:	f806 3b01 	strb.w	r3, [r6], #1
 801e496:	e7e2      	b.n	801e45e <_scanf_float+0x15e>
 801e498:	6822      	ldr	r2, [r4, #0]
 801e49a:	0610      	lsls	r0, r2, #24
 801e49c:	f57f af62 	bpl.w	801e364 <_scanf_float+0x64>
 801e4a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e4a4:	6022      	str	r2, [r4, #0]
 801e4a6:	e7f4      	b.n	801e492 <_scanf_float+0x192>
 801e4a8:	f1ba 0f00 	cmp.w	sl, #0
 801e4ac:	d10e      	bne.n	801e4cc <_scanf_float+0x1cc>
 801e4ae:	f1b9 0f00 	cmp.w	r9, #0
 801e4b2:	d10e      	bne.n	801e4d2 <_scanf_float+0x1d2>
 801e4b4:	6822      	ldr	r2, [r4, #0]
 801e4b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e4ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e4be:	d108      	bne.n	801e4d2 <_scanf_float+0x1d2>
 801e4c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e4c4:	6022      	str	r2, [r4, #0]
 801e4c6:	f04f 0a01 	mov.w	sl, #1
 801e4ca:	e7e2      	b.n	801e492 <_scanf_float+0x192>
 801e4cc:	f1ba 0f02 	cmp.w	sl, #2
 801e4d0:	d055      	beq.n	801e57e <_scanf_float+0x27e>
 801e4d2:	2d01      	cmp	r5, #1
 801e4d4:	d002      	beq.n	801e4dc <_scanf_float+0x1dc>
 801e4d6:	2d04      	cmp	r5, #4
 801e4d8:	f47f af44 	bne.w	801e364 <_scanf_float+0x64>
 801e4dc:	3501      	adds	r5, #1
 801e4de:	b2ed      	uxtb	r5, r5
 801e4e0:	e7d7      	b.n	801e492 <_scanf_float+0x192>
 801e4e2:	f1ba 0f01 	cmp.w	sl, #1
 801e4e6:	f47f af3d 	bne.w	801e364 <_scanf_float+0x64>
 801e4ea:	f04f 0a02 	mov.w	sl, #2
 801e4ee:	e7d0      	b.n	801e492 <_scanf_float+0x192>
 801e4f0:	b97d      	cbnz	r5, 801e512 <_scanf_float+0x212>
 801e4f2:	f1b9 0f00 	cmp.w	r9, #0
 801e4f6:	f47f af38 	bne.w	801e36a <_scanf_float+0x6a>
 801e4fa:	6822      	ldr	r2, [r4, #0]
 801e4fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e500:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e504:	f040 8108 	bne.w	801e718 <_scanf_float+0x418>
 801e508:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e50c:	6022      	str	r2, [r4, #0]
 801e50e:	2501      	movs	r5, #1
 801e510:	e7bf      	b.n	801e492 <_scanf_float+0x192>
 801e512:	2d03      	cmp	r5, #3
 801e514:	d0e2      	beq.n	801e4dc <_scanf_float+0x1dc>
 801e516:	2d05      	cmp	r5, #5
 801e518:	e7de      	b.n	801e4d8 <_scanf_float+0x1d8>
 801e51a:	2d02      	cmp	r5, #2
 801e51c:	f47f af22 	bne.w	801e364 <_scanf_float+0x64>
 801e520:	2503      	movs	r5, #3
 801e522:	e7b6      	b.n	801e492 <_scanf_float+0x192>
 801e524:	2d06      	cmp	r5, #6
 801e526:	f47f af1d 	bne.w	801e364 <_scanf_float+0x64>
 801e52a:	2507      	movs	r5, #7
 801e52c:	e7b1      	b.n	801e492 <_scanf_float+0x192>
 801e52e:	6822      	ldr	r2, [r4, #0]
 801e530:	0591      	lsls	r1, r2, #22
 801e532:	f57f af17 	bpl.w	801e364 <_scanf_float+0x64>
 801e536:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e53a:	6022      	str	r2, [r4, #0]
 801e53c:	f8cd 9008 	str.w	r9, [sp, #8]
 801e540:	e7a7      	b.n	801e492 <_scanf_float+0x192>
 801e542:	6822      	ldr	r2, [r4, #0]
 801e544:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e548:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e54c:	d006      	beq.n	801e55c <_scanf_float+0x25c>
 801e54e:	0550      	lsls	r0, r2, #21
 801e550:	f57f af08 	bpl.w	801e364 <_scanf_float+0x64>
 801e554:	f1b9 0f00 	cmp.w	r9, #0
 801e558:	f000 80de 	beq.w	801e718 <_scanf_float+0x418>
 801e55c:	0591      	lsls	r1, r2, #22
 801e55e:	bf58      	it	pl
 801e560:	9902      	ldrpl	r1, [sp, #8]
 801e562:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e566:	bf58      	it	pl
 801e568:	eba9 0101 	subpl.w	r1, r9, r1
 801e56c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e570:	bf58      	it	pl
 801e572:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e576:	6022      	str	r2, [r4, #0]
 801e578:	f04f 0900 	mov.w	r9, #0
 801e57c:	e789      	b.n	801e492 <_scanf_float+0x192>
 801e57e:	f04f 0a03 	mov.w	sl, #3
 801e582:	e786      	b.n	801e492 <_scanf_float+0x192>
 801e584:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e588:	4639      	mov	r1, r7
 801e58a:	4640      	mov	r0, r8
 801e58c:	4798      	blx	r3
 801e58e:	2800      	cmp	r0, #0
 801e590:	f43f aedb 	beq.w	801e34a <_scanf_float+0x4a>
 801e594:	e6e6      	b.n	801e364 <_scanf_float+0x64>
 801e596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e59a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e59e:	463a      	mov	r2, r7
 801e5a0:	4640      	mov	r0, r8
 801e5a2:	4798      	blx	r3
 801e5a4:	6923      	ldr	r3, [r4, #16]
 801e5a6:	3b01      	subs	r3, #1
 801e5a8:	6123      	str	r3, [r4, #16]
 801e5aa:	e6e8      	b.n	801e37e <_scanf_float+0x7e>
 801e5ac:	1e6b      	subs	r3, r5, #1
 801e5ae:	2b06      	cmp	r3, #6
 801e5b0:	d824      	bhi.n	801e5fc <_scanf_float+0x2fc>
 801e5b2:	2d02      	cmp	r5, #2
 801e5b4:	d836      	bhi.n	801e624 <_scanf_float+0x324>
 801e5b6:	9b01      	ldr	r3, [sp, #4]
 801e5b8:	429e      	cmp	r6, r3
 801e5ba:	f67f aee4 	bls.w	801e386 <_scanf_float+0x86>
 801e5be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e5c6:	463a      	mov	r2, r7
 801e5c8:	4640      	mov	r0, r8
 801e5ca:	4798      	blx	r3
 801e5cc:	6923      	ldr	r3, [r4, #16]
 801e5ce:	3b01      	subs	r3, #1
 801e5d0:	6123      	str	r3, [r4, #16]
 801e5d2:	e7f0      	b.n	801e5b6 <_scanf_float+0x2b6>
 801e5d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e5dc:	463a      	mov	r2, r7
 801e5de:	4640      	mov	r0, r8
 801e5e0:	4798      	blx	r3
 801e5e2:	6923      	ldr	r3, [r4, #16]
 801e5e4:	3b01      	subs	r3, #1
 801e5e6:	6123      	str	r3, [r4, #16]
 801e5e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e5ec:	fa5f fa8a 	uxtb.w	sl, sl
 801e5f0:	f1ba 0f02 	cmp.w	sl, #2
 801e5f4:	d1ee      	bne.n	801e5d4 <_scanf_float+0x2d4>
 801e5f6:	3d03      	subs	r5, #3
 801e5f8:	b2ed      	uxtb	r5, r5
 801e5fa:	1b76      	subs	r6, r6, r5
 801e5fc:	6823      	ldr	r3, [r4, #0]
 801e5fe:	05da      	lsls	r2, r3, #23
 801e600:	d530      	bpl.n	801e664 <_scanf_float+0x364>
 801e602:	055b      	lsls	r3, r3, #21
 801e604:	d511      	bpl.n	801e62a <_scanf_float+0x32a>
 801e606:	9b01      	ldr	r3, [sp, #4]
 801e608:	429e      	cmp	r6, r3
 801e60a:	f67f aebc 	bls.w	801e386 <_scanf_float+0x86>
 801e60e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e612:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e616:	463a      	mov	r2, r7
 801e618:	4640      	mov	r0, r8
 801e61a:	4798      	blx	r3
 801e61c:	6923      	ldr	r3, [r4, #16]
 801e61e:	3b01      	subs	r3, #1
 801e620:	6123      	str	r3, [r4, #16]
 801e622:	e7f0      	b.n	801e606 <_scanf_float+0x306>
 801e624:	46aa      	mov	sl, r5
 801e626:	46b3      	mov	fp, r6
 801e628:	e7de      	b.n	801e5e8 <_scanf_float+0x2e8>
 801e62a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e62e:	6923      	ldr	r3, [r4, #16]
 801e630:	2965      	cmp	r1, #101	@ 0x65
 801e632:	f103 33ff 	add.w	r3, r3, #4294967295
 801e636:	f106 35ff 	add.w	r5, r6, #4294967295
 801e63a:	6123      	str	r3, [r4, #16]
 801e63c:	d00c      	beq.n	801e658 <_scanf_float+0x358>
 801e63e:	2945      	cmp	r1, #69	@ 0x45
 801e640:	d00a      	beq.n	801e658 <_scanf_float+0x358>
 801e642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e646:	463a      	mov	r2, r7
 801e648:	4640      	mov	r0, r8
 801e64a:	4798      	blx	r3
 801e64c:	6923      	ldr	r3, [r4, #16]
 801e64e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e652:	3b01      	subs	r3, #1
 801e654:	1eb5      	subs	r5, r6, #2
 801e656:	6123      	str	r3, [r4, #16]
 801e658:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e65c:	463a      	mov	r2, r7
 801e65e:	4640      	mov	r0, r8
 801e660:	4798      	blx	r3
 801e662:	462e      	mov	r6, r5
 801e664:	6822      	ldr	r2, [r4, #0]
 801e666:	f012 0210 	ands.w	r2, r2, #16
 801e66a:	d001      	beq.n	801e670 <_scanf_float+0x370>
 801e66c:	2000      	movs	r0, #0
 801e66e:	e68b      	b.n	801e388 <_scanf_float+0x88>
 801e670:	7032      	strb	r2, [r6, #0]
 801e672:	6823      	ldr	r3, [r4, #0]
 801e674:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e67c:	d11c      	bne.n	801e6b8 <_scanf_float+0x3b8>
 801e67e:	9b02      	ldr	r3, [sp, #8]
 801e680:	454b      	cmp	r3, r9
 801e682:	eba3 0209 	sub.w	r2, r3, r9
 801e686:	d123      	bne.n	801e6d0 <_scanf_float+0x3d0>
 801e688:	9901      	ldr	r1, [sp, #4]
 801e68a:	2200      	movs	r2, #0
 801e68c:	4640      	mov	r0, r8
 801e68e:	f002 fdb7 	bl	8021200 <_strtod_r>
 801e692:	9b03      	ldr	r3, [sp, #12]
 801e694:	6821      	ldr	r1, [r4, #0]
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	f011 0f02 	tst.w	r1, #2
 801e69c:	ec57 6b10 	vmov	r6, r7, d0
 801e6a0:	f103 0204 	add.w	r2, r3, #4
 801e6a4:	d01f      	beq.n	801e6e6 <_scanf_float+0x3e6>
 801e6a6:	9903      	ldr	r1, [sp, #12]
 801e6a8:	600a      	str	r2, [r1, #0]
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	e9c3 6700 	strd	r6, r7, [r3]
 801e6b0:	68e3      	ldr	r3, [r4, #12]
 801e6b2:	3301      	adds	r3, #1
 801e6b4:	60e3      	str	r3, [r4, #12]
 801e6b6:	e7d9      	b.n	801e66c <_scanf_float+0x36c>
 801e6b8:	9b04      	ldr	r3, [sp, #16]
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d0e4      	beq.n	801e688 <_scanf_float+0x388>
 801e6be:	9905      	ldr	r1, [sp, #20]
 801e6c0:	230a      	movs	r3, #10
 801e6c2:	3101      	adds	r1, #1
 801e6c4:	4640      	mov	r0, r8
 801e6c6:	f7ff f9b7 	bl	801da38 <_strtol_r>
 801e6ca:	9b04      	ldr	r3, [sp, #16]
 801e6cc:	9e05      	ldr	r6, [sp, #20]
 801e6ce:	1ac2      	subs	r2, r0, r3
 801e6d0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e6d4:	429e      	cmp	r6, r3
 801e6d6:	bf28      	it	cs
 801e6d8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e6dc:	4910      	ldr	r1, [pc, #64]	@ (801e720 <_scanf_float+0x420>)
 801e6de:	4630      	mov	r0, r6
 801e6e0:	f000 f9ae 	bl	801ea40 <siprintf>
 801e6e4:	e7d0      	b.n	801e688 <_scanf_float+0x388>
 801e6e6:	f011 0f04 	tst.w	r1, #4
 801e6ea:	9903      	ldr	r1, [sp, #12]
 801e6ec:	600a      	str	r2, [r1, #0]
 801e6ee:	d1dc      	bne.n	801e6aa <_scanf_float+0x3aa>
 801e6f0:	681d      	ldr	r5, [r3, #0]
 801e6f2:	4632      	mov	r2, r6
 801e6f4:	463b      	mov	r3, r7
 801e6f6:	4630      	mov	r0, r6
 801e6f8:	4639      	mov	r1, r7
 801e6fa:	f7e2 fa2f 	bl	8000b5c <__aeabi_dcmpun>
 801e6fe:	b128      	cbz	r0, 801e70c <_scanf_float+0x40c>
 801e700:	4808      	ldr	r0, [pc, #32]	@ (801e724 <_scanf_float+0x424>)
 801e702:	f000 fc0d 	bl	801ef20 <nanf>
 801e706:	ed85 0a00 	vstr	s0, [r5]
 801e70a:	e7d1      	b.n	801e6b0 <_scanf_float+0x3b0>
 801e70c:	4630      	mov	r0, r6
 801e70e:	4639      	mov	r1, r7
 801e710:	f7e2 fa82 	bl	8000c18 <__aeabi_d2f>
 801e714:	6028      	str	r0, [r5, #0]
 801e716:	e7cb      	b.n	801e6b0 <_scanf_float+0x3b0>
 801e718:	f04f 0900 	mov.w	r9, #0
 801e71c:	e629      	b.n	801e372 <_scanf_float+0x72>
 801e71e:	bf00      	nop
 801e720:	08025571 	.word	0x08025571
 801e724:	08025622 	.word	0x08025622

0801e728 <std>:
 801e728:	2300      	movs	r3, #0
 801e72a:	b510      	push	{r4, lr}
 801e72c:	4604      	mov	r4, r0
 801e72e:	e9c0 3300 	strd	r3, r3, [r0]
 801e732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e736:	6083      	str	r3, [r0, #8]
 801e738:	8181      	strh	r1, [r0, #12]
 801e73a:	6643      	str	r3, [r0, #100]	@ 0x64
 801e73c:	81c2      	strh	r2, [r0, #14]
 801e73e:	6183      	str	r3, [r0, #24]
 801e740:	4619      	mov	r1, r3
 801e742:	2208      	movs	r2, #8
 801e744:	305c      	adds	r0, #92	@ 0x5c
 801e746:	f000 fac5 	bl	801ecd4 <memset>
 801e74a:	4b0d      	ldr	r3, [pc, #52]	@ (801e780 <std+0x58>)
 801e74c:	6263      	str	r3, [r4, #36]	@ 0x24
 801e74e:	4b0d      	ldr	r3, [pc, #52]	@ (801e784 <std+0x5c>)
 801e750:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e752:	4b0d      	ldr	r3, [pc, #52]	@ (801e788 <std+0x60>)
 801e754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e756:	4b0d      	ldr	r3, [pc, #52]	@ (801e78c <std+0x64>)
 801e758:	6323      	str	r3, [r4, #48]	@ 0x30
 801e75a:	4b0d      	ldr	r3, [pc, #52]	@ (801e790 <std+0x68>)
 801e75c:	6224      	str	r4, [r4, #32]
 801e75e:	429c      	cmp	r4, r3
 801e760:	d006      	beq.n	801e770 <std+0x48>
 801e762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e766:	4294      	cmp	r4, r2
 801e768:	d002      	beq.n	801e770 <std+0x48>
 801e76a:	33d0      	adds	r3, #208	@ 0xd0
 801e76c:	429c      	cmp	r4, r3
 801e76e:	d105      	bne.n	801e77c <std+0x54>
 801e770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e778:	f000 bbb8 	b.w	801eeec <__retarget_lock_init_recursive>
 801e77c:	bd10      	pop	{r4, pc}
 801e77e:	bf00      	nop
 801e780:	0801ea81 	.word	0x0801ea81
 801e784:	0801eaa3 	.word	0x0801eaa3
 801e788:	0801eadb 	.word	0x0801eadb
 801e78c:	0801eaff 	.word	0x0801eaff
 801e790:	2000366c 	.word	0x2000366c

0801e794 <stdio_exit_handler>:
 801e794:	4a02      	ldr	r2, [pc, #8]	@ (801e7a0 <stdio_exit_handler+0xc>)
 801e796:	4903      	ldr	r1, [pc, #12]	@ (801e7a4 <stdio_exit_handler+0x10>)
 801e798:	4803      	ldr	r0, [pc, #12]	@ (801e7a8 <stdio_exit_handler+0x14>)
 801e79a:	f000 b869 	b.w	801e870 <_fwalk_sglue>
 801e79e:	bf00      	nop
 801e7a0:	2000013c 	.word	0x2000013c
 801e7a4:	08021849 	.word	0x08021849
 801e7a8:	2000014c 	.word	0x2000014c

0801e7ac <cleanup_stdio>:
 801e7ac:	6841      	ldr	r1, [r0, #4]
 801e7ae:	4b0c      	ldr	r3, [pc, #48]	@ (801e7e0 <cleanup_stdio+0x34>)
 801e7b0:	4299      	cmp	r1, r3
 801e7b2:	b510      	push	{r4, lr}
 801e7b4:	4604      	mov	r4, r0
 801e7b6:	d001      	beq.n	801e7bc <cleanup_stdio+0x10>
 801e7b8:	f003 f846 	bl	8021848 <_fflush_r>
 801e7bc:	68a1      	ldr	r1, [r4, #8]
 801e7be:	4b09      	ldr	r3, [pc, #36]	@ (801e7e4 <cleanup_stdio+0x38>)
 801e7c0:	4299      	cmp	r1, r3
 801e7c2:	d002      	beq.n	801e7ca <cleanup_stdio+0x1e>
 801e7c4:	4620      	mov	r0, r4
 801e7c6:	f003 f83f 	bl	8021848 <_fflush_r>
 801e7ca:	68e1      	ldr	r1, [r4, #12]
 801e7cc:	4b06      	ldr	r3, [pc, #24]	@ (801e7e8 <cleanup_stdio+0x3c>)
 801e7ce:	4299      	cmp	r1, r3
 801e7d0:	d004      	beq.n	801e7dc <cleanup_stdio+0x30>
 801e7d2:	4620      	mov	r0, r4
 801e7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7d8:	f003 b836 	b.w	8021848 <_fflush_r>
 801e7dc:	bd10      	pop	{r4, pc}
 801e7de:	bf00      	nop
 801e7e0:	2000366c 	.word	0x2000366c
 801e7e4:	200036d4 	.word	0x200036d4
 801e7e8:	2000373c 	.word	0x2000373c

0801e7ec <global_stdio_init.part.0>:
 801e7ec:	b510      	push	{r4, lr}
 801e7ee:	4b0b      	ldr	r3, [pc, #44]	@ (801e81c <global_stdio_init.part.0+0x30>)
 801e7f0:	4c0b      	ldr	r4, [pc, #44]	@ (801e820 <global_stdio_init.part.0+0x34>)
 801e7f2:	4a0c      	ldr	r2, [pc, #48]	@ (801e824 <global_stdio_init.part.0+0x38>)
 801e7f4:	601a      	str	r2, [r3, #0]
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	2104      	movs	r1, #4
 801e7fc:	f7ff ff94 	bl	801e728 <std>
 801e800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e804:	2201      	movs	r2, #1
 801e806:	2109      	movs	r1, #9
 801e808:	f7ff ff8e 	bl	801e728 <std>
 801e80c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e810:	2202      	movs	r2, #2
 801e812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e816:	2112      	movs	r1, #18
 801e818:	f7ff bf86 	b.w	801e728 <std>
 801e81c:	200037a4 	.word	0x200037a4
 801e820:	2000366c 	.word	0x2000366c
 801e824:	0801e795 	.word	0x0801e795

0801e828 <__sfp_lock_acquire>:
 801e828:	4801      	ldr	r0, [pc, #4]	@ (801e830 <__sfp_lock_acquire+0x8>)
 801e82a:	f000 bb60 	b.w	801eeee <__retarget_lock_acquire_recursive>
 801e82e:	bf00      	nop
 801e830:	200037ad 	.word	0x200037ad

0801e834 <__sfp_lock_release>:
 801e834:	4801      	ldr	r0, [pc, #4]	@ (801e83c <__sfp_lock_release+0x8>)
 801e836:	f000 bb5b 	b.w	801eef0 <__retarget_lock_release_recursive>
 801e83a:	bf00      	nop
 801e83c:	200037ad 	.word	0x200037ad

0801e840 <__sinit>:
 801e840:	b510      	push	{r4, lr}
 801e842:	4604      	mov	r4, r0
 801e844:	f7ff fff0 	bl	801e828 <__sfp_lock_acquire>
 801e848:	6a23      	ldr	r3, [r4, #32]
 801e84a:	b11b      	cbz	r3, 801e854 <__sinit+0x14>
 801e84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e850:	f7ff bff0 	b.w	801e834 <__sfp_lock_release>
 801e854:	4b04      	ldr	r3, [pc, #16]	@ (801e868 <__sinit+0x28>)
 801e856:	6223      	str	r3, [r4, #32]
 801e858:	4b04      	ldr	r3, [pc, #16]	@ (801e86c <__sinit+0x2c>)
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d1f5      	bne.n	801e84c <__sinit+0xc>
 801e860:	f7ff ffc4 	bl	801e7ec <global_stdio_init.part.0>
 801e864:	e7f2      	b.n	801e84c <__sinit+0xc>
 801e866:	bf00      	nop
 801e868:	0801e7ad 	.word	0x0801e7ad
 801e86c:	200037a4 	.word	0x200037a4

0801e870 <_fwalk_sglue>:
 801e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e874:	4607      	mov	r7, r0
 801e876:	4688      	mov	r8, r1
 801e878:	4614      	mov	r4, r2
 801e87a:	2600      	movs	r6, #0
 801e87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e880:	f1b9 0901 	subs.w	r9, r9, #1
 801e884:	d505      	bpl.n	801e892 <_fwalk_sglue+0x22>
 801e886:	6824      	ldr	r4, [r4, #0]
 801e888:	2c00      	cmp	r4, #0
 801e88a:	d1f7      	bne.n	801e87c <_fwalk_sglue+0xc>
 801e88c:	4630      	mov	r0, r6
 801e88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e892:	89ab      	ldrh	r3, [r5, #12]
 801e894:	2b01      	cmp	r3, #1
 801e896:	d907      	bls.n	801e8a8 <_fwalk_sglue+0x38>
 801e898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e89c:	3301      	adds	r3, #1
 801e89e:	d003      	beq.n	801e8a8 <_fwalk_sglue+0x38>
 801e8a0:	4629      	mov	r1, r5
 801e8a2:	4638      	mov	r0, r7
 801e8a4:	47c0      	blx	r8
 801e8a6:	4306      	orrs	r6, r0
 801e8a8:	3568      	adds	r5, #104	@ 0x68
 801e8aa:	e7e9      	b.n	801e880 <_fwalk_sglue+0x10>

0801e8ac <_fwrite_r>:
 801e8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8b0:	9c08      	ldr	r4, [sp, #32]
 801e8b2:	468a      	mov	sl, r1
 801e8b4:	4690      	mov	r8, r2
 801e8b6:	fb02 f903 	mul.w	r9, r2, r3
 801e8ba:	4606      	mov	r6, r0
 801e8bc:	b118      	cbz	r0, 801e8c6 <_fwrite_r+0x1a>
 801e8be:	6a03      	ldr	r3, [r0, #32]
 801e8c0:	b90b      	cbnz	r3, 801e8c6 <_fwrite_r+0x1a>
 801e8c2:	f7ff ffbd 	bl	801e840 <__sinit>
 801e8c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e8c8:	07dd      	lsls	r5, r3, #31
 801e8ca:	d405      	bmi.n	801e8d8 <_fwrite_r+0x2c>
 801e8cc:	89a3      	ldrh	r3, [r4, #12]
 801e8ce:	0598      	lsls	r0, r3, #22
 801e8d0:	d402      	bmi.n	801e8d8 <_fwrite_r+0x2c>
 801e8d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e8d4:	f000 fb0b 	bl	801eeee <__retarget_lock_acquire_recursive>
 801e8d8:	89a3      	ldrh	r3, [r4, #12]
 801e8da:	0719      	lsls	r1, r3, #28
 801e8dc:	d516      	bpl.n	801e90c <_fwrite_r+0x60>
 801e8de:	6923      	ldr	r3, [r4, #16]
 801e8e0:	b1a3      	cbz	r3, 801e90c <_fwrite_r+0x60>
 801e8e2:	2500      	movs	r5, #0
 801e8e4:	454d      	cmp	r5, r9
 801e8e6:	d01f      	beq.n	801e928 <_fwrite_r+0x7c>
 801e8e8:	68a7      	ldr	r7, [r4, #8]
 801e8ea:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801e8ee:	3f01      	subs	r7, #1
 801e8f0:	2f00      	cmp	r7, #0
 801e8f2:	60a7      	str	r7, [r4, #8]
 801e8f4:	da04      	bge.n	801e900 <_fwrite_r+0x54>
 801e8f6:	69a3      	ldr	r3, [r4, #24]
 801e8f8:	429f      	cmp	r7, r3
 801e8fa:	db0f      	blt.n	801e91c <_fwrite_r+0x70>
 801e8fc:	290a      	cmp	r1, #10
 801e8fe:	d00d      	beq.n	801e91c <_fwrite_r+0x70>
 801e900:	6823      	ldr	r3, [r4, #0]
 801e902:	1c5a      	adds	r2, r3, #1
 801e904:	6022      	str	r2, [r4, #0]
 801e906:	7019      	strb	r1, [r3, #0]
 801e908:	3501      	adds	r5, #1
 801e90a:	e7eb      	b.n	801e8e4 <_fwrite_r+0x38>
 801e90c:	4621      	mov	r1, r4
 801e90e:	4630      	mov	r0, r6
 801e910:	f000 f970 	bl	801ebf4 <__swsetup_r>
 801e914:	2800      	cmp	r0, #0
 801e916:	d0e4      	beq.n	801e8e2 <_fwrite_r+0x36>
 801e918:	2500      	movs	r5, #0
 801e91a:	e005      	b.n	801e928 <_fwrite_r+0x7c>
 801e91c:	4622      	mov	r2, r4
 801e91e:	4630      	mov	r0, r6
 801e920:	f000 f92a 	bl	801eb78 <__swbuf_r>
 801e924:	3001      	adds	r0, #1
 801e926:	d1ef      	bne.n	801e908 <_fwrite_r+0x5c>
 801e928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e92a:	07da      	lsls	r2, r3, #31
 801e92c:	d405      	bmi.n	801e93a <_fwrite_r+0x8e>
 801e92e:	89a3      	ldrh	r3, [r4, #12]
 801e930:	059b      	lsls	r3, r3, #22
 801e932:	d402      	bmi.n	801e93a <_fwrite_r+0x8e>
 801e934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e936:	f000 fadb 	bl	801eef0 <__retarget_lock_release_recursive>
 801e93a:	fbb5 f0f8 	udiv	r0, r5, r8
 801e93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801e944 <fwrite>:
 801e944:	b507      	push	{r0, r1, r2, lr}
 801e946:	9300      	str	r3, [sp, #0]
 801e948:	4613      	mov	r3, r2
 801e94a:	460a      	mov	r2, r1
 801e94c:	4601      	mov	r1, r0
 801e94e:	4803      	ldr	r0, [pc, #12]	@ (801e95c <fwrite+0x18>)
 801e950:	6800      	ldr	r0, [r0, #0]
 801e952:	f7ff ffab 	bl	801e8ac <_fwrite_r>
 801e956:	b003      	add	sp, #12
 801e958:	f85d fb04 	ldr.w	pc, [sp], #4
 801e95c:	20000148 	.word	0x20000148

0801e960 <iprintf>:
 801e960:	b40f      	push	{r0, r1, r2, r3}
 801e962:	b507      	push	{r0, r1, r2, lr}
 801e964:	4906      	ldr	r1, [pc, #24]	@ (801e980 <iprintf+0x20>)
 801e966:	ab04      	add	r3, sp, #16
 801e968:	6808      	ldr	r0, [r1, #0]
 801e96a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e96e:	6881      	ldr	r1, [r0, #8]
 801e970:	9301      	str	r3, [sp, #4]
 801e972:	f002 fdcd 	bl	8021510 <_vfiprintf_r>
 801e976:	b003      	add	sp, #12
 801e978:	f85d eb04 	ldr.w	lr, [sp], #4
 801e97c:	b004      	add	sp, #16
 801e97e:	4770      	bx	lr
 801e980:	20000148 	.word	0x20000148

0801e984 <_puts_r>:
 801e984:	6a03      	ldr	r3, [r0, #32]
 801e986:	b570      	push	{r4, r5, r6, lr}
 801e988:	6884      	ldr	r4, [r0, #8]
 801e98a:	4605      	mov	r5, r0
 801e98c:	460e      	mov	r6, r1
 801e98e:	b90b      	cbnz	r3, 801e994 <_puts_r+0x10>
 801e990:	f7ff ff56 	bl	801e840 <__sinit>
 801e994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e996:	07db      	lsls	r3, r3, #31
 801e998:	d405      	bmi.n	801e9a6 <_puts_r+0x22>
 801e99a:	89a3      	ldrh	r3, [r4, #12]
 801e99c:	0598      	lsls	r0, r3, #22
 801e99e:	d402      	bmi.n	801e9a6 <_puts_r+0x22>
 801e9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9a2:	f000 faa4 	bl	801eeee <__retarget_lock_acquire_recursive>
 801e9a6:	89a3      	ldrh	r3, [r4, #12]
 801e9a8:	0719      	lsls	r1, r3, #28
 801e9aa:	d502      	bpl.n	801e9b2 <_puts_r+0x2e>
 801e9ac:	6923      	ldr	r3, [r4, #16]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d135      	bne.n	801ea1e <_puts_r+0x9a>
 801e9b2:	4621      	mov	r1, r4
 801e9b4:	4628      	mov	r0, r5
 801e9b6:	f000 f91d 	bl	801ebf4 <__swsetup_r>
 801e9ba:	b380      	cbz	r0, 801ea1e <_puts_r+0x9a>
 801e9bc:	f04f 35ff 	mov.w	r5, #4294967295
 801e9c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9c2:	07da      	lsls	r2, r3, #31
 801e9c4:	d405      	bmi.n	801e9d2 <_puts_r+0x4e>
 801e9c6:	89a3      	ldrh	r3, [r4, #12]
 801e9c8:	059b      	lsls	r3, r3, #22
 801e9ca:	d402      	bmi.n	801e9d2 <_puts_r+0x4e>
 801e9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9ce:	f000 fa8f 	bl	801eef0 <__retarget_lock_release_recursive>
 801e9d2:	4628      	mov	r0, r5
 801e9d4:	bd70      	pop	{r4, r5, r6, pc}
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	da04      	bge.n	801e9e4 <_puts_r+0x60>
 801e9da:	69a2      	ldr	r2, [r4, #24]
 801e9dc:	429a      	cmp	r2, r3
 801e9de:	dc17      	bgt.n	801ea10 <_puts_r+0x8c>
 801e9e0:	290a      	cmp	r1, #10
 801e9e2:	d015      	beq.n	801ea10 <_puts_r+0x8c>
 801e9e4:	6823      	ldr	r3, [r4, #0]
 801e9e6:	1c5a      	adds	r2, r3, #1
 801e9e8:	6022      	str	r2, [r4, #0]
 801e9ea:	7019      	strb	r1, [r3, #0]
 801e9ec:	68a3      	ldr	r3, [r4, #8]
 801e9ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e9f2:	3b01      	subs	r3, #1
 801e9f4:	60a3      	str	r3, [r4, #8]
 801e9f6:	2900      	cmp	r1, #0
 801e9f8:	d1ed      	bne.n	801e9d6 <_puts_r+0x52>
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	da11      	bge.n	801ea22 <_puts_r+0x9e>
 801e9fe:	4622      	mov	r2, r4
 801ea00:	210a      	movs	r1, #10
 801ea02:	4628      	mov	r0, r5
 801ea04:	f000 f8b8 	bl	801eb78 <__swbuf_r>
 801ea08:	3001      	adds	r0, #1
 801ea0a:	d0d7      	beq.n	801e9bc <_puts_r+0x38>
 801ea0c:	250a      	movs	r5, #10
 801ea0e:	e7d7      	b.n	801e9c0 <_puts_r+0x3c>
 801ea10:	4622      	mov	r2, r4
 801ea12:	4628      	mov	r0, r5
 801ea14:	f000 f8b0 	bl	801eb78 <__swbuf_r>
 801ea18:	3001      	adds	r0, #1
 801ea1a:	d1e7      	bne.n	801e9ec <_puts_r+0x68>
 801ea1c:	e7ce      	b.n	801e9bc <_puts_r+0x38>
 801ea1e:	3e01      	subs	r6, #1
 801ea20:	e7e4      	b.n	801e9ec <_puts_r+0x68>
 801ea22:	6823      	ldr	r3, [r4, #0]
 801ea24:	1c5a      	adds	r2, r3, #1
 801ea26:	6022      	str	r2, [r4, #0]
 801ea28:	220a      	movs	r2, #10
 801ea2a:	701a      	strb	r2, [r3, #0]
 801ea2c:	e7ee      	b.n	801ea0c <_puts_r+0x88>
	...

0801ea30 <puts>:
 801ea30:	4b02      	ldr	r3, [pc, #8]	@ (801ea3c <puts+0xc>)
 801ea32:	4601      	mov	r1, r0
 801ea34:	6818      	ldr	r0, [r3, #0]
 801ea36:	f7ff bfa5 	b.w	801e984 <_puts_r>
 801ea3a:	bf00      	nop
 801ea3c:	20000148 	.word	0x20000148

0801ea40 <siprintf>:
 801ea40:	b40e      	push	{r1, r2, r3}
 801ea42:	b500      	push	{lr}
 801ea44:	b09c      	sub	sp, #112	@ 0x70
 801ea46:	ab1d      	add	r3, sp, #116	@ 0x74
 801ea48:	9002      	str	r0, [sp, #8]
 801ea4a:	9006      	str	r0, [sp, #24]
 801ea4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ea50:	4809      	ldr	r0, [pc, #36]	@ (801ea78 <siprintf+0x38>)
 801ea52:	9107      	str	r1, [sp, #28]
 801ea54:	9104      	str	r1, [sp, #16]
 801ea56:	4909      	ldr	r1, [pc, #36]	@ (801ea7c <siprintf+0x3c>)
 801ea58:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea5c:	9105      	str	r1, [sp, #20]
 801ea5e:	6800      	ldr	r0, [r0, #0]
 801ea60:	9301      	str	r3, [sp, #4]
 801ea62:	a902      	add	r1, sp, #8
 801ea64:	f002 fc2e 	bl	80212c4 <_svfiprintf_r>
 801ea68:	9b02      	ldr	r3, [sp, #8]
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	701a      	strb	r2, [r3, #0]
 801ea6e:	b01c      	add	sp, #112	@ 0x70
 801ea70:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea74:	b003      	add	sp, #12
 801ea76:	4770      	bx	lr
 801ea78:	20000148 	.word	0x20000148
 801ea7c:	ffff0208 	.word	0xffff0208

0801ea80 <__sread>:
 801ea80:	b510      	push	{r4, lr}
 801ea82:	460c      	mov	r4, r1
 801ea84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea88:	f000 f9d2 	bl	801ee30 <_read_r>
 801ea8c:	2800      	cmp	r0, #0
 801ea8e:	bfab      	itete	ge
 801ea90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ea92:	89a3      	ldrhlt	r3, [r4, #12]
 801ea94:	181b      	addge	r3, r3, r0
 801ea96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ea9a:	bfac      	ite	ge
 801ea9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ea9e:	81a3      	strhlt	r3, [r4, #12]
 801eaa0:	bd10      	pop	{r4, pc}

0801eaa2 <__swrite>:
 801eaa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eaa6:	461f      	mov	r7, r3
 801eaa8:	898b      	ldrh	r3, [r1, #12]
 801eaaa:	05db      	lsls	r3, r3, #23
 801eaac:	4605      	mov	r5, r0
 801eaae:	460c      	mov	r4, r1
 801eab0:	4616      	mov	r6, r2
 801eab2:	d505      	bpl.n	801eac0 <__swrite+0x1e>
 801eab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eab8:	2302      	movs	r3, #2
 801eaba:	2200      	movs	r2, #0
 801eabc:	f000 f9a6 	bl	801ee0c <_lseek_r>
 801eac0:	89a3      	ldrh	r3, [r4, #12]
 801eac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801eaca:	81a3      	strh	r3, [r4, #12]
 801eacc:	4632      	mov	r2, r6
 801eace:	463b      	mov	r3, r7
 801ead0:	4628      	mov	r0, r5
 801ead2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ead6:	f000 b9cd 	b.w	801ee74 <_write_r>

0801eada <__sseek>:
 801eada:	b510      	push	{r4, lr}
 801eadc:	460c      	mov	r4, r1
 801eade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eae2:	f000 f993 	bl	801ee0c <_lseek_r>
 801eae6:	1c43      	adds	r3, r0, #1
 801eae8:	89a3      	ldrh	r3, [r4, #12]
 801eaea:	bf15      	itete	ne
 801eaec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801eaee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801eaf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801eaf6:	81a3      	strheq	r3, [r4, #12]
 801eaf8:	bf18      	it	ne
 801eafa:	81a3      	strhne	r3, [r4, #12]
 801eafc:	bd10      	pop	{r4, pc}

0801eafe <__sclose>:
 801eafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb02:	f000 b973 	b.w	801edec <_close_r>

0801eb06 <_vsniprintf_r>:
 801eb06:	b530      	push	{r4, r5, lr}
 801eb08:	4614      	mov	r4, r2
 801eb0a:	2c00      	cmp	r4, #0
 801eb0c:	b09b      	sub	sp, #108	@ 0x6c
 801eb0e:	4605      	mov	r5, r0
 801eb10:	461a      	mov	r2, r3
 801eb12:	da05      	bge.n	801eb20 <_vsniprintf_r+0x1a>
 801eb14:	238b      	movs	r3, #139	@ 0x8b
 801eb16:	6003      	str	r3, [r0, #0]
 801eb18:	f04f 30ff 	mov.w	r0, #4294967295
 801eb1c:	b01b      	add	sp, #108	@ 0x6c
 801eb1e:	bd30      	pop	{r4, r5, pc}
 801eb20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801eb24:	f8ad 300c 	strh.w	r3, [sp, #12]
 801eb28:	bf14      	ite	ne
 801eb2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eb2e:	4623      	moveq	r3, r4
 801eb30:	9302      	str	r3, [sp, #8]
 801eb32:	9305      	str	r3, [sp, #20]
 801eb34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801eb38:	9100      	str	r1, [sp, #0]
 801eb3a:	9104      	str	r1, [sp, #16]
 801eb3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eb40:	4669      	mov	r1, sp
 801eb42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801eb44:	f002 fbbe 	bl	80212c4 <_svfiprintf_r>
 801eb48:	1c43      	adds	r3, r0, #1
 801eb4a:	bfbc      	itt	lt
 801eb4c:	238b      	movlt	r3, #139	@ 0x8b
 801eb4e:	602b      	strlt	r3, [r5, #0]
 801eb50:	2c00      	cmp	r4, #0
 801eb52:	d0e3      	beq.n	801eb1c <_vsniprintf_r+0x16>
 801eb54:	9b00      	ldr	r3, [sp, #0]
 801eb56:	2200      	movs	r2, #0
 801eb58:	701a      	strb	r2, [r3, #0]
 801eb5a:	e7df      	b.n	801eb1c <_vsniprintf_r+0x16>

0801eb5c <vsniprintf>:
 801eb5c:	b507      	push	{r0, r1, r2, lr}
 801eb5e:	9300      	str	r3, [sp, #0]
 801eb60:	4613      	mov	r3, r2
 801eb62:	460a      	mov	r2, r1
 801eb64:	4601      	mov	r1, r0
 801eb66:	4803      	ldr	r0, [pc, #12]	@ (801eb74 <vsniprintf+0x18>)
 801eb68:	6800      	ldr	r0, [r0, #0]
 801eb6a:	f7ff ffcc 	bl	801eb06 <_vsniprintf_r>
 801eb6e:	b003      	add	sp, #12
 801eb70:	f85d fb04 	ldr.w	pc, [sp], #4
 801eb74:	20000148 	.word	0x20000148

0801eb78 <__swbuf_r>:
 801eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb7a:	460e      	mov	r6, r1
 801eb7c:	4614      	mov	r4, r2
 801eb7e:	4605      	mov	r5, r0
 801eb80:	b118      	cbz	r0, 801eb8a <__swbuf_r+0x12>
 801eb82:	6a03      	ldr	r3, [r0, #32]
 801eb84:	b90b      	cbnz	r3, 801eb8a <__swbuf_r+0x12>
 801eb86:	f7ff fe5b 	bl	801e840 <__sinit>
 801eb8a:	69a3      	ldr	r3, [r4, #24]
 801eb8c:	60a3      	str	r3, [r4, #8]
 801eb8e:	89a3      	ldrh	r3, [r4, #12]
 801eb90:	071a      	lsls	r2, r3, #28
 801eb92:	d501      	bpl.n	801eb98 <__swbuf_r+0x20>
 801eb94:	6923      	ldr	r3, [r4, #16]
 801eb96:	b943      	cbnz	r3, 801ebaa <__swbuf_r+0x32>
 801eb98:	4621      	mov	r1, r4
 801eb9a:	4628      	mov	r0, r5
 801eb9c:	f000 f82a 	bl	801ebf4 <__swsetup_r>
 801eba0:	b118      	cbz	r0, 801ebaa <__swbuf_r+0x32>
 801eba2:	f04f 37ff 	mov.w	r7, #4294967295
 801eba6:	4638      	mov	r0, r7
 801eba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ebaa:	6823      	ldr	r3, [r4, #0]
 801ebac:	6922      	ldr	r2, [r4, #16]
 801ebae:	1a98      	subs	r0, r3, r2
 801ebb0:	6963      	ldr	r3, [r4, #20]
 801ebb2:	b2f6      	uxtb	r6, r6
 801ebb4:	4283      	cmp	r3, r0
 801ebb6:	4637      	mov	r7, r6
 801ebb8:	dc05      	bgt.n	801ebc6 <__swbuf_r+0x4e>
 801ebba:	4621      	mov	r1, r4
 801ebbc:	4628      	mov	r0, r5
 801ebbe:	f002 fe43 	bl	8021848 <_fflush_r>
 801ebc2:	2800      	cmp	r0, #0
 801ebc4:	d1ed      	bne.n	801eba2 <__swbuf_r+0x2a>
 801ebc6:	68a3      	ldr	r3, [r4, #8]
 801ebc8:	3b01      	subs	r3, #1
 801ebca:	60a3      	str	r3, [r4, #8]
 801ebcc:	6823      	ldr	r3, [r4, #0]
 801ebce:	1c5a      	adds	r2, r3, #1
 801ebd0:	6022      	str	r2, [r4, #0]
 801ebd2:	701e      	strb	r6, [r3, #0]
 801ebd4:	6962      	ldr	r2, [r4, #20]
 801ebd6:	1c43      	adds	r3, r0, #1
 801ebd8:	429a      	cmp	r2, r3
 801ebda:	d004      	beq.n	801ebe6 <__swbuf_r+0x6e>
 801ebdc:	89a3      	ldrh	r3, [r4, #12]
 801ebde:	07db      	lsls	r3, r3, #31
 801ebe0:	d5e1      	bpl.n	801eba6 <__swbuf_r+0x2e>
 801ebe2:	2e0a      	cmp	r6, #10
 801ebe4:	d1df      	bne.n	801eba6 <__swbuf_r+0x2e>
 801ebe6:	4621      	mov	r1, r4
 801ebe8:	4628      	mov	r0, r5
 801ebea:	f002 fe2d 	bl	8021848 <_fflush_r>
 801ebee:	2800      	cmp	r0, #0
 801ebf0:	d0d9      	beq.n	801eba6 <__swbuf_r+0x2e>
 801ebf2:	e7d6      	b.n	801eba2 <__swbuf_r+0x2a>

0801ebf4 <__swsetup_r>:
 801ebf4:	b538      	push	{r3, r4, r5, lr}
 801ebf6:	4b29      	ldr	r3, [pc, #164]	@ (801ec9c <__swsetup_r+0xa8>)
 801ebf8:	4605      	mov	r5, r0
 801ebfa:	6818      	ldr	r0, [r3, #0]
 801ebfc:	460c      	mov	r4, r1
 801ebfe:	b118      	cbz	r0, 801ec08 <__swsetup_r+0x14>
 801ec00:	6a03      	ldr	r3, [r0, #32]
 801ec02:	b90b      	cbnz	r3, 801ec08 <__swsetup_r+0x14>
 801ec04:	f7ff fe1c 	bl	801e840 <__sinit>
 801ec08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec0c:	0719      	lsls	r1, r3, #28
 801ec0e:	d422      	bmi.n	801ec56 <__swsetup_r+0x62>
 801ec10:	06da      	lsls	r2, r3, #27
 801ec12:	d407      	bmi.n	801ec24 <__swsetup_r+0x30>
 801ec14:	2209      	movs	r2, #9
 801ec16:	602a      	str	r2, [r5, #0]
 801ec18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec1c:	81a3      	strh	r3, [r4, #12]
 801ec1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ec22:	e033      	b.n	801ec8c <__swsetup_r+0x98>
 801ec24:	0758      	lsls	r0, r3, #29
 801ec26:	d512      	bpl.n	801ec4e <__swsetup_r+0x5a>
 801ec28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec2a:	b141      	cbz	r1, 801ec3e <__swsetup_r+0x4a>
 801ec2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec30:	4299      	cmp	r1, r3
 801ec32:	d002      	beq.n	801ec3a <__swsetup_r+0x46>
 801ec34:	4628      	mov	r0, r5
 801ec36:	f000 ffe3 	bl	801fc00 <_free_r>
 801ec3a:	2300      	movs	r3, #0
 801ec3c:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec3e:	89a3      	ldrh	r3, [r4, #12]
 801ec40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ec44:	81a3      	strh	r3, [r4, #12]
 801ec46:	2300      	movs	r3, #0
 801ec48:	6063      	str	r3, [r4, #4]
 801ec4a:	6923      	ldr	r3, [r4, #16]
 801ec4c:	6023      	str	r3, [r4, #0]
 801ec4e:	89a3      	ldrh	r3, [r4, #12]
 801ec50:	f043 0308 	orr.w	r3, r3, #8
 801ec54:	81a3      	strh	r3, [r4, #12]
 801ec56:	6923      	ldr	r3, [r4, #16]
 801ec58:	b94b      	cbnz	r3, 801ec6e <__swsetup_r+0x7a>
 801ec5a:	89a3      	ldrh	r3, [r4, #12]
 801ec5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ec60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ec64:	d003      	beq.n	801ec6e <__swsetup_r+0x7a>
 801ec66:	4621      	mov	r1, r4
 801ec68:	4628      	mov	r0, r5
 801ec6a:	f002 fe4d 	bl	8021908 <__smakebuf_r>
 801ec6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec72:	f013 0201 	ands.w	r2, r3, #1
 801ec76:	d00a      	beq.n	801ec8e <__swsetup_r+0x9a>
 801ec78:	2200      	movs	r2, #0
 801ec7a:	60a2      	str	r2, [r4, #8]
 801ec7c:	6962      	ldr	r2, [r4, #20]
 801ec7e:	4252      	negs	r2, r2
 801ec80:	61a2      	str	r2, [r4, #24]
 801ec82:	6922      	ldr	r2, [r4, #16]
 801ec84:	b942      	cbnz	r2, 801ec98 <__swsetup_r+0xa4>
 801ec86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ec8a:	d1c5      	bne.n	801ec18 <__swsetup_r+0x24>
 801ec8c:	bd38      	pop	{r3, r4, r5, pc}
 801ec8e:	0799      	lsls	r1, r3, #30
 801ec90:	bf58      	it	pl
 801ec92:	6962      	ldrpl	r2, [r4, #20]
 801ec94:	60a2      	str	r2, [r4, #8]
 801ec96:	e7f4      	b.n	801ec82 <__swsetup_r+0x8e>
 801ec98:	2000      	movs	r0, #0
 801ec9a:	e7f7      	b.n	801ec8c <__swsetup_r+0x98>
 801ec9c:	20000148 	.word	0x20000148

0801eca0 <memmove>:
 801eca0:	4288      	cmp	r0, r1
 801eca2:	b510      	push	{r4, lr}
 801eca4:	eb01 0402 	add.w	r4, r1, r2
 801eca8:	d902      	bls.n	801ecb0 <memmove+0x10>
 801ecaa:	4284      	cmp	r4, r0
 801ecac:	4623      	mov	r3, r4
 801ecae:	d807      	bhi.n	801ecc0 <memmove+0x20>
 801ecb0:	1e43      	subs	r3, r0, #1
 801ecb2:	42a1      	cmp	r1, r4
 801ecb4:	d008      	beq.n	801ecc8 <memmove+0x28>
 801ecb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ecba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ecbe:	e7f8      	b.n	801ecb2 <memmove+0x12>
 801ecc0:	4402      	add	r2, r0
 801ecc2:	4601      	mov	r1, r0
 801ecc4:	428a      	cmp	r2, r1
 801ecc6:	d100      	bne.n	801ecca <memmove+0x2a>
 801ecc8:	bd10      	pop	{r4, pc}
 801ecca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ecce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ecd2:	e7f7      	b.n	801ecc4 <memmove+0x24>

0801ecd4 <memset>:
 801ecd4:	4402      	add	r2, r0
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	4293      	cmp	r3, r2
 801ecda:	d100      	bne.n	801ecde <memset+0xa>
 801ecdc:	4770      	bx	lr
 801ecde:	f803 1b01 	strb.w	r1, [r3], #1
 801ece2:	e7f9      	b.n	801ecd8 <memset+0x4>

0801ece4 <strchr>:
 801ece4:	b2c9      	uxtb	r1, r1
 801ece6:	4603      	mov	r3, r0
 801ece8:	4618      	mov	r0, r3
 801ecea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ecee:	b112      	cbz	r2, 801ecf6 <strchr+0x12>
 801ecf0:	428a      	cmp	r2, r1
 801ecf2:	d1f9      	bne.n	801ece8 <strchr+0x4>
 801ecf4:	4770      	bx	lr
 801ecf6:	2900      	cmp	r1, #0
 801ecf8:	bf18      	it	ne
 801ecfa:	2000      	movne	r0, #0
 801ecfc:	4770      	bx	lr
	...

0801ed00 <strtok>:
 801ed00:	4b16      	ldr	r3, [pc, #88]	@ (801ed5c <strtok+0x5c>)
 801ed02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed06:	681f      	ldr	r7, [r3, #0]
 801ed08:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801ed0a:	4605      	mov	r5, r0
 801ed0c:	460e      	mov	r6, r1
 801ed0e:	b9ec      	cbnz	r4, 801ed4c <strtok+0x4c>
 801ed10:	2050      	movs	r0, #80	@ 0x50
 801ed12:	f7fe fd61 	bl	801d7d8 <malloc>
 801ed16:	4602      	mov	r2, r0
 801ed18:	6478      	str	r0, [r7, #68]	@ 0x44
 801ed1a:	b920      	cbnz	r0, 801ed26 <strtok+0x26>
 801ed1c:	4b10      	ldr	r3, [pc, #64]	@ (801ed60 <strtok+0x60>)
 801ed1e:	4811      	ldr	r0, [pc, #68]	@ (801ed64 <strtok+0x64>)
 801ed20:	215b      	movs	r1, #91	@ 0x5b
 801ed22:	f000 f903 	bl	801ef2c <__assert_func>
 801ed26:	e9c0 4400 	strd	r4, r4, [r0]
 801ed2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ed2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ed32:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ed36:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ed3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ed3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ed42:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ed46:	6184      	str	r4, [r0, #24]
 801ed48:	7704      	strb	r4, [r0, #28]
 801ed4a:	6244      	str	r4, [r0, #36]	@ 0x24
 801ed4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ed4e:	4631      	mov	r1, r6
 801ed50:	4628      	mov	r0, r5
 801ed52:	2301      	movs	r3, #1
 801ed54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ed58:	f000 b806 	b.w	801ed68 <__strtok_r>
 801ed5c:	20000148 	.word	0x20000148
 801ed60:	08025576 	.word	0x08025576
 801ed64:	0802558d 	.word	0x0802558d

0801ed68 <__strtok_r>:
 801ed68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed6a:	4604      	mov	r4, r0
 801ed6c:	b908      	cbnz	r0, 801ed72 <__strtok_r+0xa>
 801ed6e:	6814      	ldr	r4, [r2, #0]
 801ed70:	b144      	cbz	r4, 801ed84 <__strtok_r+0x1c>
 801ed72:	4620      	mov	r0, r4
 801ed74:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ed78:	460f      	mov	r7, r1
 801ed7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ed7e:	b91e      	cbnz	r6, 801ed88 <__strtok_r+0x20>
 801ed80:	b965      	cbnz	r5, 801ed9c <__strtok_r+0x34>
 801ed82:	6015      	str	r5, [r2, #0]
 801ed84:	2000      	movs	r0, #0
 801ed86:	e005      	b.n	801ed94 <__strtok_r+0x2c>
 801ed88:	42b5      	cmp	r5, r6
 801ed8a:	d1f6      	bne.n	801ed7a <__strtok_r+0x12>
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d1f0      	bne.n	801ed72 <__strtok_r+0xa>
 801ed90:	6014      	str	r4, [r2, #0]
 801ed92:	7003      	strb	r3, [r0, #0]
 801ed94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed96:	461c      	mov	r4, r3
 801ed98:	e00c      	b.n	801edb4 <__strtok_r+0x4c>
 801ed9a:	b915      	cbnz	r5, 801eda2 <__strtok_r+0x3a>
 801ed9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eda0:	460e      	mov	r6, r1
 801eda2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801eda6:	42ab      	cmp	r3, r5
 801eda8:	d1f7      	bne.n	801ed9a <__strtok_r+0x32>
 801edaa:	2b00      	cmp	r3, #0
 801edac:	d0f3      	beq.n	801ed96 <__strtok_r+0x2e>
 801edae:	2300      	movs	r3, #0
 801edb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801edb4:	6014      	str	r4, [r2, #0]
 801edb6:	e7ed      	b.n	801ed94 <__strtok_r+0x2c>

0801edb8 <strstr>:
 801edb8:	780a      	ldrb	r2, [r1, #0]
 801edba:	b570      	push	{r4, r5, r6, lr}
 801edbc:	b96a      	cbnz	r2, 801edda <strstr+0x22>
 801edbe:	bd70      	pop	{r4, r5, r6, pc}
 801edc0:	429a      	cmp	r2, r3
 801edc2:	d109      	bne.n	801edd8 <strstr+0x20>
 801edc4:	460c      	mov	r4, r1
 801edc6:	4605      	mov	r5, r0
 801edc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801edcc:	2b00      	cmp	r3, #0
 801edce:	d0f6      	beq.n	801edbe <strstr+0x6>
 801edd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801edd4:	429e      	cmp	r6, r3
 801edd6:	d0f7      	beq.n	801edc8 <strstr+0x10>
 801edd8:	3001      	adds	r0, #1
 801edda:	7803      	ldrb	r3, [r0, #0]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d1ef      	bne.n	801edc0 <strstr+0x8>
 801ede0:	4618      	mov	r0, r3
 801ede2:	e7ec      	b.n	801edbe <strstr+0x6>

0801ede4 <_localeconv_r>:
 801ede4:	4800      	ldr	r0, [pc, #0]	@ (801ede8 <_localeconv_r+0x4>)
 801ede6:	4770      	bx	lr
 801ede8:	20000288 	.word	0x20000288

0801edec <_close_r>:
 801edec:	b538      	push	{r3, r4, r5, lr}
 801edee:	4d06      	ldr	r5, [pc, #24]	@ (801ee08 <_close_r+0x1c>)
 801edf0:	2300      	movs	r3, #0
 801edf2:	4604      	mov	r4, r0
 801edf4:	4608      	mov	r0, r1
 801edf6:	602b      	str	r3, [r5, #0]
 801edf8:	f7e5 f874 	bl	8003ee4 <_close>
 801edfc:	1c43      	adds	r3, r0, #1
 801edfe:	d102      	bne.n	801ee06 <_close_r+0x1a>
 801ee00:	682b      	ldr	r3, [r5, #0]
 801ee02:	b103      	cbz	r3, 801ee06 <_close_r+0x1a>
 801ee04:	6023      	str	r3, [r4, #0]
 801ee06:	bd38      	pop	{r3, r4, r5, pc}
 801ee08:	200037a8 	.word	0x200037a8

0801ee0c <_lseek_r>:
 801ee0c:	b538      	push	{r3, r4, r5, lr}
 801ee0e:	4d07      	ldr	r5, [pc, #28]	@ (801ee2c <_lseek_r+0x20>)
 801ee10:	4604      	mov	r4, r0
 801ee12:	4608      	mov	r0, r1
 801ee14:	4611      	mov	r1, r2
 801ee16:	2200      	movs	r2, #0
 801ee18:	602a      	str	r2, [r5, #0]
 801ee1a:	461a      	mov	r2, r3
 801ee1c:	f7e5 f889 	bl	8003f32 <_lseek>
 801ee20:	1c43      	adds	r3, r0, #1
 801ee22:	d102      	bne.n	801ee2a <_lseek_r+0x1e>
 801ee24:	682b      	ldr	r3, [r5, #0]
 801ee26:	b103      	cbz	r3, 801ee2a <_lseek_r+0x1e>
 801ee28:	6023      	str	r3, [r4, #0]
 801ee2a:	bd38      	pop	{r3, r4, r5, pc}
 801ee2c:	200037a8 	.word	0x200037a8

0801ee30 <_read_r>:
 801ee30:	b538      	push	{r3, r4, r5, lr}
 801ee32:	4d07      	ldr	r5, [pc, #28]	@ (801ee50 <_read_r+0x20>)
 801ee34:	4604      	mov	r4, r0
 801ee36:	4608      	mov	r0, r1
 801ee38:	4611      	mov	r1, r2
 801ee3a:	2200      	movs	r2, #0
 801ee3c:	602a      	str	r2, [r5, #0]
 801ee3e:	461a      	mov	r2, r3
 801ee40:	f7e5 f817 	bl	8003e72 <_read>
 801ee44:	1c43      	adds	r3, r0, #1
 801ee46:	d102      	bne.n	801ee4e <_read_r+0x1e>
 801ee48:	682b      	ldr	r3, [r5, #0]
 801ee4a:	b103      	cbz	r3, 801ee4e <_read_r+0x1e>
 801ee4c:	6023      	str	r3, [r4, #0]
 801ee4e:	bd38      	pop	{r3, r4, r5, pc}
 801ee50:	200037a8 	.word	0x200037a8

0801ee54 <_sbrk_r>:
 801ee54:	b538      	push	{r3, r4, r5, lr}
 801ee56:	4d06      	ldr	r5, [pc, #24]	@ (801ee70 <_sbrk_r+0x1c>)
 801ee58:	2300      	movs	r3, #0
 801ee5a:	4604      	mov	r4, r0
 801ee5c:	4608      	mov	r0, r1
 801ee5e:	602b      	str	r3, [r5, #0]
 801ee60:	f7e5 f874 	bl	8003f4c <_sbrk>
 801ee64:	1c43      	adds	r3, r0, #1
 801ee66:	d102      	bne.n	801ee6e <_sbrk_r+0x1a>
 801ee68:	682b      	ldr	r3, [r5, #0]
 801ee6a:	b103      	cbz	r3, 801ee6e <_sbrk_r+0x1a>
 801ee6c:	6023      	str	r3, [r4, #0]
 801ee6e:	bd38      	pop	{r3, r4, r5, pc}
 801ee70:	200037a8 	.word	0x200037a8

0801ee74 <_write_r>:
 801ee74:	b538      	push	{r3, r4, r5, lr}
 801ee76:	4d07      	ldr	r5, [pc, #28]	@ (801ee94 <_write_r+0x20>)
 801ee78:	4604      	mov	r4, r0
 801ee7a:	4608      	mov	r0, r1
 801ee7c:	4611      	mov	r1, r2
 801ee7e:	2200      	movs	r2, #0
 801ee80:	602a      	str	r2, [r5, #0]
 801ee82:	461a      	mov	r2, r3
 801ee84:	f7e5 f812 	bl	8003eac <_write>
 801ee88:	1c43      	adds	r3, r0, #1
 801ee8a:	d102      	bne.n	801ee92 <_write_r+0x1e>
 801ee8c:	682b      	ldr	r3, [r5, #0]
 801ee8e:	b103      	cbz	r3, 801ee92 <_write_r+0x1e>
 801ee90:	6023      	str	r3, [r4, #0]
 801ee92:	bd38      	pop	{r3, r4, r5, pc}
 801ee94:	200037a8 	.word	0x200037a8

0801ee98 <__errno>:
 801ee98:	4b01      	ldr	r3, [pc, #4]	@ (801eea0 <__errno+0x8>)
 801ee9a:	6818      	ldr	r0, [r3, #0]
 801ee9c:	4770      	bx	lr
 801ee9e:	bf00      	nop
 801eea0:	20000148 	.word	0x20000148

0801eea4 <__libc_init_array>:
 801eea4:	b570      	push	{r4, r5, r6, lr}
 801eea6:	4d0d      	ldr	r5, [pc, #52]	@ (801eedc <__libc_init_array+0x38>)
 801eea8:	4c0d      	ldr	r4, [pc, #52]	@ (801eee0 <__libc_init_array+0x3c>)
 801eeaa:	1b64      	subs	r4, r4, r5
 801eeac:	10a4      	asrs	r4, r4, #2
 801eeae:	2600      	movs	r6, #0
 801eeb0:	42a6      	cmp	r6, r4
 801eeb2:	d109      	bne.n	801eec8 <__libc_init_array+0x24>
 801eeb4:	4d0b      	ldr	r5, [pc, #44]	@ (801eee4 <__libc_init_array+0x40>)
 801eeb6:	4c0c      	ldr	r4, [pc, #48]	@ (801eee8 <__libc_init_array+0x44>)
 801eeb8:	f003 f98a 	bl	80221d0 <_init>
 801eebc:	1b64      	subs	r4, r4, r5
 801eebe:	10a4      	asrs	r4, r4, #2
 801eec0:	2600      	movs	r6, #0
 801eec2:	42a6      	cmp	r6, r4
 801eec4:	d105      	bne.n	801eed2 <__libc_init_array+0x2e>
 801eec6:	bd70      	pop	{r4, r5, r6, pc}
 801eec8:	f855 3b04 	ldr.w	r3, [r5], #4
 801eecc:	4798      	blx	r3
 801eece:	3601      	adds	r6, #1
 801eed0:	e7ee      	b.n	801eeb0 <__libc_init_array+0xc>
 801eed2:	f855 3b04 	ldr.w	r3, [r5], #4
 801eed6:	4798      	blx	r3
 801eed8:	3601      	adds	r6, #1
 801eeda:	e7f2      	b.n	801eec2 <__libc_init_array+0x1e>
 801eedc:	080258cc 	.word	0x080258cc
 801eee0:	080258cc 	.word	0x080258cc
 801eee4:	080258cc 	.word	0x080258cc
 801eee8:	080258d0 	.word	0x080258d0

0801eeec <__retarget_lock_init_recursive>:
 801eeec:	4770      	bx	lr

0801eeee <__retarget_lock_acquire_recursive>:
 801eeee:	4770      	bx	lr

0801eef0 <__retarget_lock_release_recursive>:
 801eef0:	4770      	bx	lr

0801eef2 <strcpy>:
 801eef2:	4603      	mov	r3, r0
 801eef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eef8:	f803 2b01 	strb.w	r2, [r3], #1
 801eefc:	2a00      	cmp	r2, #0
 801eefe:	d1f9      	bne.n	801eef4 <strcpy+0x2>
 801ef00:	4770      	bx	lr

0801ef02 <memcpy>:
 801ef02:	440a      	add	r2, r1
 801ef04:	4291      	cmp	r1, r2
 801ef06:	f100 33ff 	add.w	r3, r0, #4294967295
 801ef0a:	d100      	bne.n	801ef0e <memcpy+0xc>
 801ef0c:	4770      	bx	lr
 801ef0e:	b510      	push	{r4, lr}
 801ef10:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef14:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ef18:	4291      	cmp	r1, r2
 801ef1a:	d1f9      	bne.n	801ef10 <memcpy+0xe>
 801ef1c:	bd10      	pop	{r4, pc}
	...

0801ef20 <nanf>:
 801ef20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ef28 <nanf+0x8>
 801ef24:	4770      	bx	lr
 801ef26:	bf00      	nop
 801ef28:	7fc00000 	.word	0x7fc00000

0801ef2c <__assert_func>:
 801ef2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ef2e:	4614      	mov	r4, r2
 801ef30:	461a      	mov	r2, r3
 801ef32:	4b09      	ldr	r3, [pc, #36]	@ (801ef58 <__assert_func+0x2c>)
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	4605      	mov	r5, r0
 801ef38:	68d8      	ldr	r0, [r3, #12]
 801ef3a:	b954      	cbnz	r4, 801ef52 <__assert_func+0x26>
 801ef3c:	4b07      	ldr	r3, [pc, #28]	@ (801ef5c <__assert_func+0x30>)
 801ef3e:	461c      	mov	r4, r3
 801ef40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ef44:	9100      	str	r1, [sp, #0]
 801ef46:	462b      	mov	r3, r5
 801ef48:	4905      	ldr	r1, [pc, #20]	@ (801ef60 <__assert_func+0x34>)
 801ef4a:	f002 fca5 	bl	8021898 <fiprintf>
 801ef4e:	f002 fd53 	bl	80219f8 <abort>
 801ef52:	4b04      	ldr	r3, [pc, #16]	@ (801ef64 <__assert_func+0x38>)
 801ef54:	e7f4      	b.n	801ef40 <__assert_func+0x14>
 801ef56:	bf00      	nop
 801ef58:	20000148 	.word	0x20000148
 801ef5c:	08025622 	.word	0x08025622
 801ef60:	080255f4 	.word	0x080255f4
 801ef64:	080255e7 	.word	0x080255e7

0801ef68 <quorem>:
 801ef68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef6c:	6903      	ldr	r3, [r0, #16]
 801ef6e:	690c      	ldr	r4, [r1, #16]
 801ef70:	42a3      	cmp	r3, r4
 801ef72:	4607      	mov	r7, r0
 801ef74:	db7e      	blt.n	801f074 <quorem+0x10c>
 801ef76:	3c01      	subs	r4, #1
 801ef78:	f101 0814 	add.w	r8, r1, #20
 801ef7c:	00a3      	lsls	r3, r4, #2
 801ef7e:	f100 0514 	add.w	r5, r0, #20
 801ef82:	9300      	str	r3, [sp, #0]
 801ef84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ef88:	9301      	str	r3, [sp, #4]
 801ef8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ef8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ef92:	3301      	adds	r3, #1
 801ef94:	429a      	cmp	r2, r3
 801ef96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ef9a:	fbb2 f6f3 	udiv	r6, r2, r3
 801ef9e:	d32e      	bcc.n	801effe <quorem+0x96>
 801efa0:	f04f 0a00 	mov.w	sl, #0
 801efa4:	46c4      	mov	ip, r8
 801efa6:	46ae      	mov	lr, r5
 801efa8:	46d3      	mov	fp, sl
 801efaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 801efae:	b298      	uxth	r0, r3
 801efb0:	fb06 a000 	mla	r0, r6, r0, sl
 801efb4:	0c02      	lsrs	r2, r0, #16
 801efb6:	0c1b      	lsrs	r3, r3, #16
 801efb8:	fb06 2303 	mla	r3, r6, r3, r2
 801efbc:	f8de 2000 	ldr.w	r2, [lr]
 801efc0:	b280      	uxth	r0, r0
 801efc2:	b292      	uxth	r2, r2
 801efc4:	1a12      	subs	r2, r2, r0
 801efc6:	445a      	add	r2, fp
 801efc8:	f8de 0000 	ldr.w	r0, [lr]
 801efcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801efd0:	b29b      	uxth	r3, r3
 801efd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801efd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801efda:	b292      	uxth	r2, r2
 801efdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801efe0:	45e1      	cmp	r9, ip
 801efe2:	f84e 2b04 	str.w	r2, [lr], #4
 801efe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801efea:	d2de      	bcs.n	801efaa <quorem+0x42>
 801efec:	9b00      	ldr	r3, [sp, #0]
 801efee:	58eb      	ldr	r3, [r5, r3]
 801eff0:	b92b      	cbnz	r3, 801effe <quorem+0x96>
 801eff2:	9b01      	ldr	r3, [sp, #4]
 801eff4:	3b04      	subs	r3, #4
 801eff6:	429d      	cmp	r5, r3
 801eff8:	461a      	mov	r2, r3
 801effa:	d32f      	bcc.n	801f05c <quorem+0xf4>
 801effc:	613c      	str	r4, [r7, #16]
 801effe:	4638      	mov	r0, r7
 801f000:	f001 f90c 	bl	802021c <__mcmp>
 801f004:	2800      	cmp	r0, #0
 801f006:	db25      	blt.n	801f054 <quorem+0xec>
 801f008:	4629      	mov	r1, r5
 801f00a:	2000      	movs	r0, #0
 801f00c:	f858 2b04 	ldr.w	r2, [r8], #4
 801f010:	f8d1 c000 	ldr.w	ip, [r1]
 801f014:	fa1f fe82 	uxth.w	lr, r2
 801f018:	fa1f f38c 	uxth.w	r3, ip
 801f01c:	eba3 030e 	sub.w	r3, r3, lr
 801f020:	4403      	add	r3, r0
 801f022:	0c12      	lsrs	r2, r2, #16
 801f024:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f028:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f02c:	b29b      	uxth	r3, r3
 801f02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f032:	45c1      	cmp	r9, r8
 801f034:	f841 3b04 	str.w	r3, [r1], #4
 801f038:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f03c:	d2e6      	bcs.n	801f00c <quorem+0xa4>
 801f03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f046:	b922      	cbnz	r2, 801f052 <quorem+0xea>
 801f048:	3b04      	subs	r3, #4
 801f04a:	429d      	cmp	r5, r3
 801f04c:	461a      	mov	r2, r3
 801f04e:	d30b      	bcc.n	801f068 <quorem+0x100>
 801f050:	613c      	str	r4, [r7, #16]
 801f052:	3601      	adds	r6, #1
 801f054:	4630      	mov	r0, r6
 801f056:	b003      	add	sp, #12
 801f058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f05c:	6812      	ldr	r2, [r2, #0]
 801f05e:	3b04      	subs	r3, #4
 801f060:	2a00      	cmp	r2, #0
 801f062:	d1cb      	bne.n	801effc <quorem+0x94>
 801f064:	3c01      	subs	r4, #1
 801f066:	e7c6      	b.n	801eff6 <quorem+0x8e>
 801f068:	6812      	ldr	r2, [r2, #0]
 801f06a:	3b04      	subs	r3, #4
 801f06c:	2a00      	cmp	r2, #0
 801f06e:	d1ef      	bne.n	801f050 <quorem+0xe8>
 801f070:	3c01      	subs	r4, #1
 801f072:	e7ea      	b.n	801f04a <quorem+0xe2>
 801f074:	2000      	movs	r0, #0
 801f076:	e7ee      	b.n	801f056 <quorem+0xee>

0801f078 <_dtoa_r>:
 801f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f07c:	69c7      	ldr	r7, [r0, #28]
 801f07e:	b099      	sub	sp, #100	@ 0x64
 801f080:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f084:	ec55 4b10 	vmov	r4, r5, d0
 801f088:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f08a:	9109      	str	r1, [sp, #36]	@ 0x24
 801f08c:	4683      	mov	fp, r0
 801f08e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f090:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f092:	b97f      	cbnz	r7, 801f0b4 <_dtoa_r+0x3c>
 801f094:	2010      	movs	r0, #16
 801f096:	f7fe fb9f 	bl	801d7d8 <malloc>
 801f09a:	4602      	mov	r2, r0
 801f09c:	f8cb 001c 	str.w	r0, [fp, #28]
 801f0a0:	b920      	cbnz	r0, 801f0ac <_dtoa_r+0x34>
 801f0a2:	4ba7      	ldr	r3, [pc, #668]	@ (801f340 <_dtoa_r+0x2c8>)
 801f0a4:	21ef      	movs	r1, #239	@ 0xef
 801f0a6:	48a7      	ldr	r0, [pc, #668]	@ (801f344 <_dtoa_r+0x2cc>)
 801f0a8:	f7ff ff40 	bl	801ef2c <__assert_func>
 801f0ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f0b0:	6007      	str	r7, [r0, #0]
 801f0b2:	60c7      	str	r7, [r0, #12]
 801f0b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f0b8:	6819      	ldr	r1, [r3, #0]
 801f0ba:	b159      	cbz	r1, 801f0d4 <_dtoa_r+0x5c>
 801f0bc:	685a      	ldr	r2, [r3, #4]
 801f0be:	604a      	str	r2, [r1, #4]
 801f0c0:	2301      	movs	r3, #1
 801f0c2:	4093      	lsls	r3, r2
 801f0c4:	608b      	str	r3, [r1, #8]
 801f0c6:	4658      	mov	r0, fp
 801f0c8:	f000 fe24 	bl	801fd14 <_Bfree>
 801f0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f0d0:	2200      	movs	r2, #0
 801f0d2:	601a      	str	r2, [r3, #0]
 801f0d4:	1e2b      	subs	r3, r5, #0
 801f0d6:	bfb9      	ittee	lt
 801f0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f0dc:	9303      	strlt	r3, [sp, #12]
 801f0de:	2300      	movge	r3, #0
 801f0e0:	6033      	strge	r3, [r6, #0]
 801f0e2:	9f03      	ldr	r7, [sp, #12]
 801f0e4:	4b98      	ldr	r3, [pc, #608]	@ (801f348 <_dtoa_r+0x2d0>)
 801f0e6:	bfbc      	itt	lt
 801f0e8:	2201      	movlt	r2, #1
 801f0ea:	6032      	strlt	r2, [r6, #0]
 801f0ec:	43bb      	bics	r3, r7
 801f0ee:	d112      	bne.n	801f116 <_dtoa_r+0x9e>
 801f0f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f0f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f0f6:	6013      	str	r3, [r2, #0]
 801f0f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f0fc:	4323      	orrs	r3, r4
 801f0fe:	f000 854d 	beq.w	801fb9c <_dtoa_r+0xb24>
 801f102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f104:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f35c <_dtoa_r+0x2e4>
 801f108:	2b00      	cmp	r3, #0
 801f10a:	f000 854f 	beq.w	801fbac <_dtoa_r+0xb34>
 801f10e:	f10a 0303 	add.w	r3, sl, #3
 801f112:	f000 bd49 	b.w	801fba8 <_dtoa_r+0xb30>
 801f116:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f11a:	2200      	movs	r2, #0
 801f11c:	ec51 0b17 	vmov	r0, r1, d7
 801f120:	2300      	movs	r3, #0
 801f122:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f126:	f7e1 fce7 	bl	8000af8 <__aeabi_dcmpeq>
 801f12a:	4680      	mov	r8, r0
 801f12c:	b158      	cbz	r0, 801f146 <_dtoa_r+0xce>
 801f12e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f130:	2301      	movs	r3, #1
 801f132:	6013      	str	r3, [r2, #0]
 801f134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f136:	b113      	cbz	r3, 801f13e <_dtoa_r+0xc6>
 801f138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f13a:	4b84      	ldr	r3, [pc, #528]	@ (801f34c <_dtoa_r+0x2d4>)
 801f13c:	6013      	str	r3, [r2, #0]
 801f13e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f360 <_dtoa_r+0x2e8>
 801f142:	f000 bd33 	b.w	801fbac <_dtoa_r+0xb34>
 801f146:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f14a:	aa16      	add	r2, sp, #88	@ 0x58
 801f14c:	a917      	add	r1, sp, #92	@ 0x5c
 801f14e:	4658      	mov	r0, fp
 801f150:	f001 f984 	bl	802045c <__d2b>
 801f154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f158:	4681      	mov	r9, r0
 801f15a:	2e00      	cmp	r6, #0
 801f15c:	d077      	beq.n	801f24e <_dtoa_r+0x1d6>
 801f15e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f160:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f16c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f178:	4619      	mov	r1, r3
 801f17a:	2200      	movs	r2, #0
 801f17c:	4b74      	ldr	r3, [pc, #464]	@ (801f350 <_dtoa_r+0x2d8>)
 801f17e:	f7e1 f89b 	bl	80002b8 <__aeabi_dsub>
 801f182:	a369      	add	r3, pc, #420	@ (adr r3, 801f328 <_dtoa_r+0x2b0>)
 801f184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f188:	f7e1 fa4e 	bl	8000628 <__aeabi_dmul>
 801f18c:	a368      	add	r3, pc, #416	@ (adr r3, 801f330 <_dtoa_r+0x2b8>)
 801f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f192:	f7e1 f893 	bl	80002bc <__adddf3>
 801f196:	4604      	mov	r4, r0
 801f198:	4630      	mov	r0, r6
 801f19a:	460d      	mov	r5, r1
 801f19c:	f7e1 f9da 	bl	8000554 <__aeabi_i2d>
 801f1a0:	a365      	add	r3, pc, #404	@ (adr r3, 801f338 <_dtoa_r+0x2c0>)
 801f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a6:	f7e1 fa3f 	bl	8000628 <__aeabi_dmul>
 801f1aa:	4602      	mov	r2, r0
 801f1ac:	460b      	mov	r3, r1
 801f1ae:	4620      	mov	r0, r4
 801f1b0:	4629      	mov	r1, r5
 801f1b2:	f7e1 f883 	bl	80002bc <__adddf3>
 801f1b6:	4604      	mov	r4, r0
 801f1b8:	460d      	mov	r5, r1
 801f1ba:	f7e1 fce5 	bl	8000b88 <__aeabi_d2iz>
 801f1be:	2200      	movs	r2, #0
 801f1c0:	4607      	mov	r7, r0
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	4629      	mov	r1, r5
 801f1c8:	f7e1 fca0 	bl	8000b0c <__aeabi_dcmplt>
 801f1cc:	b140      	cbz	r0, 801f1e0 <_dtoa_r+0x168>
 801f1ce:	4638      	mov	r0, r7
 801f1d0:	f7e1 f9c0 	bl	8000554 <__aeabi_i2d>
 801f1d4:	4622      	mov	r2, r4
 801f1d6:	462b      	mov	r3, r5
 801f1d8:	f7e1 fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 801f1dc:	b900      	cbnz	r0, 801f1e0 <_dtoa_r+0x168>
 801f1de:	3f01      	subs	r7, #1
 801f1e0:	2f16      	cmp	r7, #22
 801f1e2:	d851      	bhi.n	801f288 <_dtoa_r+0x210>
 801f1e4:	4b5b      	ldr	r3, [pc, #364]	@ (801f354 <_dtoa_r+0x2dc>)
 801f1e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f1f2:	f7e1 fc8b 	bl	8000b0c <__aeabi_dcmplt>
 801f1f6:	2800      	cmp	r0, #0
 801f1f8:	d048      	beq.n	801f28c <_dtoa_r+0x214>
 801f1fa:	3f01      	subs	r7, #1
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	9312      	str	r3, [sp, #72]	@ 0x48
 801f200:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f202:	1b9b      	subs	r3, r3, r6
 801f204:	1e5a      	subs	r2, r3, #1
 801f206:	bf44      	itt	mi
 801f208:	f1c3 0801 	rsbmi	r8, r3, #1
 801f20c:	2300      	movmi	r3, #0
 801f20e:	9208      	str	r2, [sp, #32]
 801f210:	bf54      	ite	pl
 801f212:	f04f 0800 	movpl.w	r8, #0
 801f216:	9308      	strmi	r3, [sp, #32]
 801f218:	2f00      	cmp	r7, #0
 801f21a:	db39      	blt.n	801f290 <_dtoa_r+0x218>
 801f21c:	9b08      	ldr	r3, [sp, #32]
 801f21e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f220:	443b      	add	r3, r7
 801f222:	9308      	str	r3, [sp, #32]
 801f224:	2300      	movs	r3, #0
 801f226:	930a      	str	r3, [sp, #40]	@ 0x28
 801f228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f22a:	2b09      	cmp	r3, #9
 801f22c:	d864      	bhi.n	801f2f8 <_dtoa_r+0x280>
 801f22e:	2b05      	cmp	r3, #5
 801f230:	bfc4      	itt	gt
 801f232:	3b04      	subgt	r3, #4
 801f234:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f238:	f1a3 0302 	sub.w	r3, r3, #2
 801f23c:	bfcc      	ite	gt
 801f23e:	2400      	movgt	r4, #0
 801f240:	2401      	movle	r4, #1
 801f242:	2b03      	cmp	r3, #3
 801f244:	d863      	bhi.n	801f30e <_dtoa_r+0x296>
 801f246:	e8df f003 	tbb	[pc, r3]
 801f24a:	372a      	.short	0x372a
 801f24c:	5535      	.short	0x5535
 801f24e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f252:	441e      	add	r6, r3
 801f254:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f258:	2b20      	cmp	r3, #32
 801f25a:	bfc1      	itttt	gt
 801f25c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f260:	409f      	lslgt	r7, r3
 801f262:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f266:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f26a:	bfd6      	itet	le
 801f26c:	f1c3 0320 	rsble	r3, r3, #32
 801f270:	ea47 0003 	orrgt.w	r0, r7, r3
 801f274:	fa04 f003 	lslle.w	r0, r4, r3
 801f278:	f7e1 f95c 	bl	8000534 <__aeabi_ui2d>
 801f27c:	2201      	movs	r2, #1
 801f27e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f282:	3e01      	subs	r6, #1
 801f284:	9214      	str	r2, [sp, #80]	@ 0x50
 801f286:	e777      	b.n	801f178 <_dtoa_r+0x100>
 801f288:	2301      	movs	r3, #1
 801f28a:	e7b8      	b.n	801f1fe <_dtoa_r+0x186>
 801f28c:	9012      	str	r0, [sp, #72]	@ 0x48
 801f28e:	e7b7      	b.n	801f200 <_dtoa_r+0x188>
 801f290:	427b      	negs	r3, r7
 801f292:	930a      	str	r3, [sp, #40]	@ 0x28
 801f294:	2300      	movs	r3, #0
 801f296:	eba8 0807 	sub.w	r8, r8, r7
 801f29a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f29c:	e7c4      	b.n	801f228 <_dtoa_r+0x1b0>
 801f29e:	2300      	movs	r3, #0
 801f2a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f2a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	dc35      	bgt.n	801f314 <_dtoa_r+0x29c>
 801f2a8:	2301      	movs	r3, #1
 801f2aa:	9300      	str	r3, [sp, #0]
 801f2ac:	9307      	str	r3, [sp, #28]
 801f2ae:	461a      	mov	r2, r3
 801f2b0:	920e      	str	r2, [sp, #56]	@ 0x38
 801f2b2:	e00b      	b.n	801f2cc <_dtoa_r+0x254>
 801f2b4:	2301      	movs	r3, #1
 801f2b6:	e7f3      	b.n	801f2a0 <_dtoa_r+0x228>
 801f2b8:	2300      	movs	r3, #0
 801f2ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2be:	18fb      	adds	r3, r7, r3
 801f2c0:	9300      	str	r3, [sp, #0]
 801f2c2:	3301      	adds	r3, #1
 801f2c4:	2b01      	cmp	r3, #1
 801f2c6:	9307      	str	r3, [sp, #28]
 801f2c8:	bfb8      	it	lt
 801f2ca:	2301      	movlt	r3, #1
 801f2cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f2d0:	2100      	movs	r1, #0
 801f2d2:	2204      	movs	r2, #4
 801f2d4:	f102 0514 	add.w	r5, r2, #20
 801f2d8:	429d      	cmp	r5, r3
 801f2da:	d91f      	bls.n	801f31c <_dtoa_r+0x2a4>
 801f2dc:	6041      	str	r1, [r0, #4]
 801f2de:	4658      	mov	r0, fp
 801f2e0:	f000 fcd8 	bl	801fc94 <_Balloc>
 801f2e4:	4682      	mov	sl, r0
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	d13c      	bne.n	801f364 <_dtoa_r+0x2ec>
 801f2ea:	4b1b      	ldr	r3, [pc, #108]	@ (801f358 <_dtoa_r+0x2e0>)
 801f2ec:	4602      	mov	r2, r0
 801f2ee:	f240 11af 	movw	r1, #431	@ 0x1af
 801f2f2:	e6d8      	b.n	801f0a6 <_dtoa_r+0x2e>
 801f2f4:	2301      	movs	r3, #1
 801f2f6:	e7e0      	b.n	801f2ba <_dtoa_r+0x242>
 801f2f8:	2401      	movs	r4, #1
 801f2fa:	2300      	movs	r3, #0
 801f2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f2fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f300:	f04f 33ff 	mov.w	r3, #4294967295
 801f304:	9300      	str	r3, [sp, #0]
 801f306:	9307      	str	r3, [sp, #28]
 801f308:	2200      	movs	r2, #0
 801f30a:	2312      	movs	r3, #18
 801f30c:	e7d0      	b.n	801f2b0 <_dtoa_r+0x238>
 801f30e:	2301      	movs	r3, #1
 801f310:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f312:	e7f5      	b.n	801f300 <_dtoa_r+0x288>
 801f314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f316:	9300      	str	r3, [sp, #0]
 801f318:	9307      	str	r3, [sp, #28]
 801f31a:	e7d7      	b.n	801f2cc <_dtoa_r+0x254>
 801f31c:	3101      	adds	r1, #1
 801f31e:	0052      	lsls	r2, r2, #1
 801f320:	e7d8      	b.n	801f2d4 <_dtoa_r+0x25c>
 801f322:	bf00      	nop
 801f324:	f3af 8000 	nop.w
 801f328:	636f4361 	.word	0x636f4361
 801f32c:	3fd287a7 	.word	0x3fd287a7
 801f330:	8b60c8b3 	.word	0x8b60c8b3
 801f334:	3fc68a28 	.word	0x3fc68a28
 801f338:	509f79fb 	.word	0x509f79fb
 801f33c:	3fd34413 	.word	0x3fd34413
 801f340:	08025576 	.word	0x08025576
 801f344:	08025630 	.word	0x08025630
 801f348:	7ff00000 	.word	0x7ff00000
 801f34c:	0802554e 	.word	0x0802554e
 801f350:	3ff80000 	.word	0x3ff80000
 801f354:	08025728 	.word	0x08025728
 801f358:	08025688 	.word	0x08025688
 801f35c:	0802562c 	.word	0x0802562c
 801f360:	0802554d 	.word	0x0802554d
 801f364:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f368:	6018      	str	r0, [r3, #0]
 801f36a:	9b07      	ldr	r3, [sp, #28]
 801f36c:	2b0e      	cmp	r3, #14
 801f36e:	f200 80a4 	bhi.w	801f4ba <_dtoa_r+0x442>
 801f372:	2c00      	cmp	r4, #0
 801f374:	f000 80a1 	beq.w	801f4ba <_dtoa_r+0x442>
 801f378:	2f00      	cmp	r7, #0
 801f37a:	dd33      	ble.n	801f3e4 <_dtoa_r+0x36c>
 801f37c:	4bad      	ldr	r3, [pc, #692]	@ (801f634 <_dtoa_r+0x5bc>)
 801f37e:	f007 020f 	and.w	r2, r7, #15
 801f382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f386:	ed93 7b00 	vldr	d7, [r3]
 801f38a:	05f8      	lsls	r0, r7, #23
 801f38c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f390:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f394:	d516      	bpl.n	801f3c4 <_dtoa_r+0x34c>
 801f396:	4ba8      	ldr	r3, [pc, #672]	@ (801f638 <_dtoa_r+0x5c0>)
 801f398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f39c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f3a0:	f7e1 fa6c 	bl	800087c <__aeabi_ddiv>
 801f3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f3a8:	f004 040f 	and.w	r4, r4, #15
 801f3ac:	2603      	movs	r6, #3
 801f3ae:	4da2      	ldr	r5, [pc, #648]	@ (801f638 <_dtoa_r+0x5c0>)
 801f3b0:	b954      	cbnz	r4, 801f3c8 <_dtoa_r+0x350>
 801f3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f3ba:	f7e1 fa5f 	bl	800087c <__aeabi_ddiv>
 801f3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f3c2:	e028      	b.n	801f416 <_dtoa_r+0x39e>
 801f3c4:	2602      	movs	r6, #2
 801f3c6:	e7f2      	b.n	801f3ae <_dtoa_r+0x336>
 801f3c8:	07e1      	lsls	r1, r4, #31
 801f3ca:	d508      	bpl.n	801f3de <_dtoa_r+0x366>
 801f3cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f3d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f3d4:	f7e1 f928 	bl	8000628 <__aeabi_dmul>
 801f3d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f3dc:	3601      	adds	r6, #1
 801f3de:	1064      	asrs	r4, r4, #1
 801f3e0:	3508      	adds	r5, #8
 801f3e2:	e7e5      	b.n	801f3b0 <_dtoa_r+0x338>
 801f3e4:	f000 80d2 	beq.w	801f58c <_dtoa_r+0x514>
 801f3e8:	427c      	negs	r4, r7
 801f3ea:	4b92      	ldr	r3, [pc, #584]	@ (801f634 <_dtoa_r+0x5bc>)
 801f3ec:	4d92      	ldr	r5, [pc, #584]	@ (801f638 <_dtoa_r+0x5c0>)
 801f3ee:	f004 020f 	and.w	r2, r4, #15
 801f3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f3fe:	f7e1 f913 	bl	8000628 <__aeabi_dmul>
 801f402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f406:	1124      	asrs	r4, r4, #4
 801f408:	2300      	movs	r3, #0
 801f40a:	2602      	movs	r6, #2
 801f40c:	2c00      	cmp	r4, #0
 801f40e:	f040 80b2 	bne.w	801f576 <_dtoa_r+0x4fe>
 801f412:	2b00      	cmp	r3, #0
 801f414:	d1d3      	bne.n	801f3be <_dtoa_r+0x346>
 801f416:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f418:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	f000 80b7 	beq.w	801f590 <_dtoa_r+0x518>
 801f422:	4b86      	ldr	r3, [pc, #536]	@ (801f63c <_dtoa_r+0x5c4>)
 801f424:	2200      	movs	r2, #0
 801f426:	4620      	mov	r0, r4
 801f428:	4629      	mov	r1, r5
 801f42a:	f7e1 fb6f 	bl	8000b0c <__aeabi_dcmplt>
 801f42e:	2800      	cmp	r0, #0
 801f430:	f000 80ae 	beq.w	801f590 <_dtoa_r+0x518>
 801f434:	9b07      	ldr	r3, [sp, #28]
 801f436:	2b00      	cmp	r3, #0
 801f438:	f000 80aa 	beq.w	801f590 <_dtoa_r+0x518>
 801f43c:	9b00      	ldr	r3, [sp, #0]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	dd37      	ble.n	801f4b2 <_dtoa_r+0x43a>
 801f442:	1e7b      	subs	r3, r7, #1
 801f444:	9304      	str	r3, [sp, #16]
 801f446:	4620      	mov	r0, r4
 801f448:	4b7d      	ldr	r3, [pc, #500]	@ (801f640 <_dtoa_r+0x5c8>)
 801f44a:	2200      	movs	r2, #0
 801f44c:	4629      	mov	r1, r5
 801f44e:	f7e1 f8eb 	bl	8000628 <__aeabi_dmul>
 801f452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f456:	9c00      	ldr	r4, [sp, #0]
 801f458:	3601      	adds	r6, #1
 801f45a:	4630      	mov	r0, r6
 801f45c:	f7e1 f87a 	bl	8000554 <__aeabi_i2d>
 801f460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f464:	f7e1 f8e0 	bl	8000628 <__aeabi_dmul>
 801f468:	4b76      	ldr	r3, [pc, #472]	@ (801f644 <_dtoa_r+0x5cc>)
 801f46a:	2200      	movs	r2, #0
 801f46c:	f7e0 ff26 	bl	80002bc <__adddf3>
 801f470:	4605      	mov	r5, r0
 801f472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f476:	2c00      	cmp	r4, #0
 801f478:	f040 808d 	bne.w	801f596 <_dtoa_r+0x51e>
 801f47c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f480:	4b71      	ldr	r3, [pc, #452]	@ (801f648 <_dtoa_r+0x5d0>)
 801f482:	2200      	movs	r2, #0
 801f484:	f7e0 ff18 	bl	80002b8 <__aeabi_dsub>
 801f488:	4602      	mov	r2, r0
 801f48a:	460b      	mov	r3, r1
 801f48c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f490:	462a      	mov	r2, r5
 801f492:	4633      	mov	r3, r6
 801f494:	f7e1 fb58 	bl	8000b48 <__aeabi_dcmpgt>
 801f498:	2800      	cmp	r0, #0
 801f49a:	f040 828b 	bne.w	801f9b4 <_dtoa_r+0x93c>
 801f49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f4a2:	462a      	mov	r2, r5
 801f4a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f4a8:	f7e1 fb30 	bl	8000b0c <__aeabi_dcmplt>
 801f4ac:	2800      	cmp	r0, #0
 801f4ae:	f040 8128 	bne.w	801f702 <_dtoa_r+0x68a>
 801f4b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f4b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f4ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	f2c0 815a 	blt.w	801f776 <_dtoa_r+0x6fe>
 801f4c2:	2f0e      	cmp	r7, #14
 801f4c4:	f300 8157 	bgt.w	801f776 <_dtoa_r+0x6fe>
 801f4c8:	4b5a      	ldr	r3, [pc, #360]	@ (801f634 <_dtoa_r+0x5bc>)
 801f4ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f4ce:	ed93 7b00 	vldr	d7, [r3]
 801f4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	ed8d 7b00 	vstr	d7, [sp]
 801f4da:	da03      	bge.n	801f4e4 <_dtoa_r+0x46c>
 801f4dc:	9b07      	ldr	r3, [sp, #28]
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	f340 8101 	ble.w	801f6e6 <_dtoa_r+0x66e>
 801f4e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f4e8:	4656      	mov	r6, sl
 801f4ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f4ee:	4620      	mov	r0, r4
 801f4f0:	4629      	mov	r1, r5
 801f4f2:	f7e1 f9c3 	bl	800087c <__aeabi_ddiv>
 801f4f6:	f7e1 fb47 	bl	8000b88 <__aeabi_d2iz>
 801f4fa:	4680      	mov	r8, r0
 801f4fc:	f7e1 f82a 	bl	8000554 <__aeabi_i2d>
 801f500:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f504:	f7e1 f890 	bl	8000628 <__aeabi_dmul>
 801f508:	4602      	mov	r2, r0
 801f50a:	460b      	mov	r3, r1
 801f50c:	4620      	mov	r0, r4
 801f50e:	4629      	mov	r1, r5
 801f510:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f514:	f7e0 fed0 	bl	80002b8 <__aeabi_dsub>
 801f518:	f806 4b01 	strb.w	r4, [r6], #1
 801f51c:	9d07      	ldr	r5, [sp, #28]
 801f51e:	eba6 040a 	sub.w	r4, r6, sl
 801f522:	42a5      	cmp	r5, r4
 801f524:	4602      	mov	r2, r0
 801f526:	460b      	mov	r3, r1
 801f528:	f040 8117 	bne.w	801f75a <_dtoa_r+0x6e2>
 801f52c:	f7e0 fec6 	bl	80002bc <__adddf3>
 801f530:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f534:	4604      	mov	r4, r0
 801f536:	460d      	mov	r5, r1
 801f538:	f7e1 fb06 	bl	8000b48 <__aeabi_dcmpgt>
 801f53c:	2800      	cmp	r0, #0
 801f53e:	f040 80f9 	bne.w	801f734 <_dtoa_r+0x6bc>
 801f542:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f546:	4620      	mov	r0, r4
 801f548:	4629      	mov	r1, r5
 801f54a:	f7e1 fad5 	bl	8000af8 <__aeabi_dcmpeq>
 801f54e:	b118      	cbz	r0, 801f558 <_dtoa_r+0x4e0>
 801f550:	f018 0f01 	tst.w	r8, #1
 801f554:	f040 80ee 	bne.w	801f734 <_dtoa_r+0x6bc>
 801f558:	4649      	mov	r1, r9
 801f55a:	4658      	mov	r0, fp
 801f55c:	f000 fbda 	bl	801fd14 <_Bfree>
 801f560:	2300      	movs	r3, #0
 801f562:	7033      	strb	r3, [r6, #0]
 801f564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f566:	3701      	adds	r7, #1
 801f568:	601f      	str	r7, [r3, #0]
 801f56a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	f000 831d 	beq.w	801fbac <_dtoa_r+0xb34>
 801f572:	601e      	str	r6, [r3, #0]
 801f574:	e31a      	b.n	801fbac <_dtoa_r+0xb34>
 801f576:	07e2      	lsls	r2, r4, #31
 801f578:	d505      	bpl.n	801f586 <_dtoa_r+0x50e>
 801f57a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f57e:	f7e1 f853 	bl	8000628 <__aeabi_dmul>
 801f582:	3601      	adds	r6, #1
 801f584:	2301      	movs	r3, #1
 801f586:	1064      	asrs	r4, r4, #1
 801f588:	3508      	adds	r5, #8
 801f58a:	e73f      	b.n	801f40c <_dtoa_r+0x394>
 801f58c:	2602      	movs	r6, #2
 801f58e:	e742      	b.n	801f416 <_dtoa_r+0x39e>
 801f590:	9c07      	ldr	r4, [sp, #28]
 801f592:	9704      	str	r7, [sp, #16]
 801f594:	e761      	b.n	801f45a <_dtoa_r+0x3e2>
 801f596:	4b27      	ldr	r3, [pc, #156]	@ (801f634 <_dtoa_r+0x5bc>)
 801f598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f59a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f59e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f5a2:	4454      	add	r4, sl
 801f5a4:	2900      	cmp	r1, #0
 801f5a6:	d053      	beq.n	801f650 <_dtoa_r+0x5d8>
 801f5a8:	4928      	ldr	r1, [pc, #160]	@ (801f64c <_dtoa_r+0x5d4>)
 801f5aa:	2000      	movs	r0, #0
 801f5ac:	f7e1 f966 	bl	800087c <__aeabi_ddiv>
 801f5b0:	4633      	mov	r3, r6
 801f5b2:	462a      	mov	r2, r5
 801f5b4:	f7e0 fe80 	bl	80002b8 <__aeabi_dsub>
 801f5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f5bc:	4656      	mov	r6, sl
 801f5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5c2:	f7e1 fae1 	bl	8000b88 <__aeabi_d2iz>
 801f5c6:	4605      	mov	r5, r0
 801f5c8:	f7e0 ffc4 	bl	8000554 <__aeabi_i2d>
 801f5cc:	4602      	mov	r2, r0
 801f5ce:	460b      	mov	r3, r1
 801f5d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5d4:	f7e0 fe70 	bl	80002b8 <__aeabi_dsub>
 801f5d8:	3530      	adds	r5, #48	@ 0x30
 801f5da:	4602      	mov	r2, r0
 801f5dc:	460b      	mov	r3, r1
 801f5de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f5e2:	f806 5b01 	strb.w	r5, [r6], #1
 801f5e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f5ea:	f7e1 fa8f 	bl	8000b0c <__aeabi_dcmplt>
 801f5ee:	2800      	cmp	r0, #0
 801f5f0:	d171      	bne.n	801f6d6 <_dtoa_r+0x65e>
 801f5f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f5f6:	4911      	ldr	r1, [pc, #68]	@ (801f63c <_dtoa_r+0x5c4>)
 801f5f8:	2000      	movs	r0, #0
 801f5fa:	f7e0 fe5d 	bl	80002b8 <__aeabi_dsub>
 801f5fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f602:	f7e1 fa83 	bl	8000b0c <__aeabi_dcmplt>
 801f606:	2800      	cmp	r0, #0
 801f608:	f040 8095 	bne.w	801f736 <_dtoa_r+0x6be>
 801f60c:	42a6      	cmp	r6, r4
 801f60e:	f43f af50 	beq.w	801f4b2 <_dtoa_r+0x43a>
 801f612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f616:	4b0a      	ldr	r3, [pc, #40]	@ (801f640 <_dtoa_r+0x5c8>)
 801f618:	2200      	movs	r2, #0
 801f61a:	f7e1 f805 	bl	8000628 <__aeabi_dmul>
 801f61e:	4b08      	ldr	r3, [pc, #32]	@ (801f640 <_dtoa_r+0x5c8>)
 801f620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f624:	2200      	movs	r2, #0
 801f626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f62a:	f7e0 fffd 	bl	8000628 <__aeabi_dmul>
 801f62e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f632:	e7c4      	b.n	801f5be <_dtoa_r+0x546>
 801f634:	08025728 	.word	0x08025728
 801f638:	08025700 	.word	0x08025700
 801f63c:	3ff00000 	.word	0x3ff00000
 801f640:	40240000 	.word	0x40240000
 801f644:	401c0000 	.word	0x401c0000
 801f648:	40140000 	.word	0x40140000
 801f64c:	3fe00000 	.word	0x3fe00000
 801f650:	4631      	mov	r1, r6
 801f652:	4628      	mov	r0, r5
 801f654:	f7e0 ffe8 	bl	8000628 <__aeabi_dmul>
 801f658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f65c:	9415      	str	r4, [sp, #84]	@ 0x54
 801f65e:	4656      	mov	r6, sl
 801f660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f664:	f7e1 fa90 	bl	8000b88 <__aeabi_d2iz>
 801f668:	4605      	mov	r5, r0
 801f66a:	f7e0 ff73 	bl	8000554 <__aeabi_i2d>
 801f66e:	4602      	mov	r2, r0
 801f670:	460b      	mov	r3, r1
 801f672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f676:	f7e0 fe1f 	bl	80002b8 <__aeabi_dsub>
 801f67a:	3530      	adds	r5, #48	@ 0x30
 801f67c:	f806 5b01 	strb.w	r5, [r6], #1
 801f680:	4602      	mov	r2, r0
 801f682:	460b      	mov	r3, r1
 801f684:	42a6      	cmp	r6, r4
 801f686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f68a:	f04f 0200 	mov.w	r2, #0
 801f68e:	d124      	bne.n	801f6da <_dtoa_r+0x662>
 801f690:	4bac      	ldr	r3, [pc, #688]	@ (801f944 <_dtoa_r+0x8cc>)
 801f692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f696:	f7e0 fe11 	bl	80002bc <__adddf3>
 801f69a:	4602      	mov	r2, r0
 801f69c:	460b      	mov	r3, r1
 801f69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6a2:	f7e1 fa51 	bl	8000b48 <__aeabi_dcmpgt>
 801f6a6:	2800      	cmp	r0, #0
 801f6a8:	d145      	bne.n	801f736 <_dtoa_r+0x6be>
 801f6aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f6ae:	49a5      	ldr	r1, [pc, #660]	@ (801f944 <_dtoa_r+0x8cc>)
 801f6b0:	2000      	movs	r0, #0
 801f6b2:	f7e0 fe01 	bl	80002b8 <__aeabi_dsub>
 801f6b6:	4602      	mov	r2, r0
 801f6b8:	460b      	mov	r3, r1
 801f6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6be:	f7e1 fa25 	bl	8000b0c <__aeabi_dcmplt>
 801f6c2:	2800      	cmp	r0, #0
 801f6c4:	f43f aef5 	beq.w	801f4b2 <_dtoa_r+0x43a>
 801f6c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f6ca:	1e73      	subs	r3, r6, #1
 801f6cc:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f6d2:	2b30      	cmp	r3, #48	@ 0x30
 801f6d4:	d0f8      	beq.n	801f6c8 <_dtoa_r+0x650>
 801f6d6:	9f04      	ldr	r7, [sp, #16]
 801f6d8:	e73e      	b.n	801f558 <_dtoa_r+0x4e0>
 801f6da:	4b9b      	ldr	r3, [pc, #620]	@ (801f948 <_dtoa_r+0x8d0>)
 801f6dc:	f7e0 ffa4 	bl	8000628 <__aeabi_dmul>
 801f6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f6e4:	e7bc      	b.n	801f660 <_dtoa_r+0x5e8>
 801f6e6:	d10c      	bne.n	801f702 <_dtoa_r+0x68a>
 801f6e8:	4b98      	ldr	r3, [pc, #608]	@ (801f94c <_dtoa_r+0x8d4>)
 801f6ea:	2200      	movs	r2, #0
 801f6ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f6f0:	f7e0 ff9a 	bl	8000628 <__aeabi_dmul>
 801f6f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f6f8:	f7e1 fa1c 	bl	8000b34 <__aeabi_dcmpge>
 801f6fc:	2800      	cmp	r0, #0
 801f6fe:	f000 8157 	beq.w	801f9b0 <_dtoa_r+0x938>
 801f702:	2400      	movs	r4, #0
 801f704:	4625      	mov	r5, r4
 801f706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f708:	43db      	mvns	r3, r3
 801f70a:	9304      	str	r3, [sp, #16]
 801f70c:	4656      	mov	r6, sl
 801f70e:	2700      	movs	r7, #0
 801f710:	4621      	mov	r1, r4
 801f712:	4658      	mov	r0, fp
 801f714:	f000 fafe 	bl	801fd14 <_Bfree>
 801f718:	2d00      	cmp	r5, #0
 801f71a:	d0dc      	beq.n	801f6d6 <_dtoa_r+0x65e>
 801f71c:	b12f      	cbz	r7, 801f72a <_dtoa_r+0x6b2>
 801f71e:	42af      	cmp	r7, r5
 801f720:	d003      	beq.n	801f72a <_dtoa_r+0x6b2>
 801f722:	4639      	mov	r1, r7
 801f724:	4658      	mov	r0, fp
 801f726:	f000 faf5 	bl	801fd14 <_Bfree>
 801f72a:	4629      	mov	r1, r5
 801f72c:	4658      	mov	r0, fp
 801f72e:	f000 faf1 	bl	801fd14 <_Bfree>
 801f732:	e7d0      	b.n	801f6d6 <_dtoa_r+0x65e>
 801f734:	9704      	str	r7, [sp, #16]
 801f736:	4633      	mov	r3, r6
 801f738:	461e      	mov	r6, r3
 801f73a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f73e:	2a39      	cmp	r2, #57	@ 0x39
 801f740:	d107      	bne.n	801f752 <_dtoa_r+0x6da>
 801f742:	459a      	cmp	sl, r3
 801f744:	d1f8      	bne.n	801f738 <_dtoa_r+0x6c0>
 801f746:	9a04      	ldr	r2, [sp, #16]
 801f748:	3201      	adds	r2, #1
 801f74a:	9204      	str	r2, [sp, #16]
 801f74c:	2230      	movs	r2, #48	@ 0x30
 801f74e:	f88a 2000 	strb.w	r2, [sl]
 801f752:	781a      	ldrb	r2, [r3, #0]
 801f754:	3201      	adds	r2, #1
 801f756:	701a      	strb	r2, [r3, #0]
 801f758:	e7bd      	b.n	801f6d6 <_dtoa_r+0x65e>
 801f75a:	4b7b      	ldr	r3, [pc, #492]	@ (801f948 <_dtoa_r+0x8d0>)
 801f75c:	2200      	movs	r2, #0
 801f75e:	f7e0 ff63 	bl	8000628 <__aeabi_dmul>
 801f762:	2200      	movs	r2, #0
 801f764:	2300      	movs	r3, #0
 801f766:	4604      	mov	r4, r0
 801f768:	460d      	mov	r5, r1
 801f76a:	f7e1 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 801f76e:	2800      	cmp	r0, #0
 801f770:	f43f aebb 	beq.w	801f4ea <_dtoa_r+0x472>
 801f774:	e6f0      	b.n	801f558 <_dtoa_r+0x4e0>
 801f776:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f778:	2a00      	cmp	r2, #0
 801f77a:	f000 80db 	beq.w	801f934 <_dtoa_r+0x8bc>
 801f77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f780:	2a01      	cmp	r2, #1
 801f782:	f300 80bf 	bgt.w	801f904 <_dtoa_r+0x88c>
 801f786:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f788:	2a00      	cmp	r2, #0
 801f78a:	f000 80b7 	beq.w	801f8fc <_dtoa_r+0x884>
 801f78e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f792:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f794:	4646      	mov	r6, r8
 801f796:	9a08      	ldr	r2, [sp, #32]
 801f798:	2101      	movs	r1, #1
 801f79a:	441a      	add	r2, r3
 801f79c:	4658      	mov	r0, fp
 801f79e:	4498      	add	r8, r3
 801f7a0:	9208      	str	r2, [sp, #32]
 801f7a2:	f000 fbb5 	bl	801ff10 <__i2b>
 801f7a6:	4605      	mov	r5, r0
 801f7a8:	b15e      	cbz	r6, 801f7c2 <_dtoa_r+0x74a>
 801f7aa:	9b08      	ldr	r3, [sp, #32]
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	dd08      	ble.n	801f7c2 <_dtoa_r+0x74a>
 801f7b0:	42b3      	cmp	r3, r6
 801f7b2:	9a08      	ldr	r2, [sp, #32]
 801f7b4:	bfa8      	it	ge
 801f7b6:	4633      	movge	r3, r6
 801f7b8:	eba8 0803 	sub.w	r8, r8, r3
 801f7bc:	1af6      	subs	r6, r6, r3
 801f7be:	1ad3      	subs	r3, r2, r3
 801f7c0:	9308      	str	r3, [sp, #32]
 801f7c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f7c4:	b1f3      	cbz	r3, 801f804 <_dtoa_r+0x78c>
 801f7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	f000 80b7 	beq.w	801f93c <_dtoa_r+0x8c4>
 801f7ce:	b18c      	cbz	r4, 801f7f4 <_dtoa_r+0x77c>
 801f7d0:	4629      	mov	r1, r5
 801f7d2:	4622      	mov	r2, r4
 801f7d4:	4658      	mov	r0, fp
 801f7d6:	f000 fc5b 	bl	8020090 <__pow5mult>
 801f7da:	464a      	mov	r2, r9
 801f7dc:	4601      	mov	r1, r0
 801f7de:	4605      	mov	r5, r0
 801f7e0:	4658      	mov	r0, fp
 801f7e2:	f000 fbab 	bl	801ff3c <__multiply>
 801f7e6:	4649      	mov	r1, r9
 801f7e8:	9004      	str	r0, [sp, #16]
 801f7ea:	4658      	mov	r0, fp
 801f7ec:	f000 fa92 	bl	801fd14 <_Bfree>
 801f7f0:	9b04      	ldr	r3, [sp, #16]
 801f7f2:	4699      	mov	r9, r3
 801f7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f7f6:	1b1a      	subs	r2, r3, r4
 801f7f8:	d004      	beq.n	801f804 <_dtoa_r+0x78c>
 801f7fa:	4649      	mov	r1, r9
 801f7fc:	4658      	mov	r0, fp
 801f7fe:	f000 fc47 	bl	8020090 <__pow5mult>
 801f802:	4681      	mov	r9, r0
 801f804:	2101      	movs	r1, #1
 801f806:	4658      	mov	r0, fp
 801f808:	f000 fb82 	bl	801ff10 <__i2b>
 801f80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f80e:	4604      	mov	r4, r0
 801f810:	2b00      	cmp	r3, #0
 801f812:	f000 81cf 	beq.w	801fbb4 <_dtoa_r+0xb3c>
 801f816:	461a      	mov	r2, r3
 801f818:	4601      	mov	r1, r0
 801f81a:	4658      	mov	r0, fp
 801f81c:	f000 fc38 	bl	8020090 <__pow5mult>
 801f820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f822:	2b01      	cmp	r3, #1
 801f824:	4604      	mov	r4, r0
 801f826:	f300 8095 	bgt.w	801f954 <_dtoa_r+0x8dc>
 801f82a:	9b02      	ldr	r3, [sp, #8]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	f040 8087 	bne.w	801f940 <_dtoa_r+0x8c8>
 801f832:	9b03      	ldr	r3, [sp, #12]
 801f834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f838:	2b00      	cmp	r3, #0
 801f83a:	f040 8089 	bne.w	801f950 <_dtoa_r+0x8d8>
 801f83e:	9b03      	ldr	r3, [sp, #12]
 801f840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f844:	0d1b      	lsrs	r3, r3, #20
 801f846:	051b      	lsls	r3, r3, #20
 801f848:	b12b      	cbz	r3, 801f856 <_dtoa_r+0x7de>
 801f84a:	9b08      	ldr	r3, [sp, #32]
 801f84c:	3301      	adds	r3, #1
 801f84e:	9308      	str	r3, [sp, #32]
 801f850:	f108 0801 	add.w	r8, r8, #1
 801f854:	2301      	movs	r3, #1
 801f856:	930a      	str	r3, [sp, #40]	@ 0x28
 801f858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	f000 81b0 	beq.w	801fbc0 <_dtoa_r+0xb48>
 801f860:	6923      	ldr	r3, [r4, #16]
 801f862:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f866:	6918      	ldr	r0, [r3, #16]
 801f868:	f000 fb06 	bl	801fe78 <__hi0bits>
 801f86c:	f1c0 0020 	rsb	r0, r0, #32
 801f870:	9b08      	ldr	r3, [sp, #32]
 801f872:	4418      	add	r0, r3
 801f874:	f010 001f 	ands.w	r0, r0, #31
 801f878:	d077      	beq.n	801f96a <_dtoa_r+0x8f2>
 801f87a:	f1c0 0320 	rsb	r3, r0, #32
 801f87e:	2b04      	cmp	r3, #4
 801f880:	dd6b      	ble.n	801f95a <_dtoa_r+0x8e2>
 801f882:	9b08      	ldr	r3, [sp, #32]
 801f884:	f1c0 001c 	rsb	r0, r0, #28
 801f888:	4403      	add	r3, r0
 801f88a:	4480      	add	r8, r0
 801f88c:	4406      	add	r6, r0
 801f88e:	9308      	str	r3, [sp, #32]
 801f890:	f1b8 0f00 	cmp.w	r8, #0
 801f894:	dd05      	ble.n	801f8a2 <_dtoa_r+0x82a>
 801f896:	4649      	mov	r1, r9
 801f898:	4642      	mov	r2, r8
 801f89a:	4658      	mov	r0, fp
 801f89c:	f000 fc52 	bl	8020144 <__lshift>
 801f8a0:	4681      	mov	r9, r0
 801f8a2:	9b08      	ldr	r3, [sp, #32]
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	dd05      	ble.n	801f8b4 <_dtoa_r+0x83c>
 801f8a8:	4621      	mov	r1, r4
 801f8aa:	461a      	mov	r2, r3
 801f8ac:	4658      	mov	r0, fp
 801f8ae:	f000 fc49 	bl	8020144 <__lshift>
 801f8b2:	4604      	mov	r4, r0
 801f8b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d059      	beq.n	801f96e <_dtoa_r+0x8f6>
 801f8ba:	4621      	mov	r1, r4
 801f8bc:	4648      	mov	r0, r9
 801f8be:	f000 fcad 	bl	802021c <__mcmp>
 801f8c2:	2800      	cmp	r0, #0
 801f8c4:	da53      	bge.n	801f96e <_dtoa_r+0x8f6>
 801f8c6:	1e7b      	subs	r3, r7, #1
 801f8c8:	9304      	str	r3, [sp, #16]
 801f8ca:	4649      	mov	r1, r9
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	220a      	movs	r2, #10
 801f8d0:	4658      	mov	r0, fp
 801f8d2:	f000 fa41 	bl	801fd58 <__multadd>
 801f8d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8d8:	4681      	mov	r9, r0
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	f000 8172 	beq.w	801fbc4 <_dtoa_r+0xb4c>
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	4629      	mov	r1, r5
 801f8e4:	220a      	movs	r2, #10
 801f8e6:	4658      	mov	r0, fp
 801f8e8:	f000 fa36 	bl	801fd58 <__multadd>
 801f8ec:	9b00      	ldr	r3, [sp, #0]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	4605      	mov	r5, r0
 801f8f2:	dc67      	bgt.n	801f9c4 <_dtoa_r+0x94c>
 801f8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8f6:	2b02      	cmp	r3, #2
 801f8f8:	dc41      	bgt.n	801f97e <_dtoa_r+0x906>
 801f8fa:	e063      	b.n	801f9c4 <_dtoa_r+0x94c>
 801f8fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f8fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f902:	e746      	b.n	801f792 <_dtoa_r+0x71a>
 801f904:	9b07      	ldr	r3, [sp, #28]
 801f906:	1e5c      	subs	r4, r3, #1
 801f908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f90a:	42a3      	cmp	r3, r4
 801f90c:	bfbf      	itttt	lt
 801f90e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f910:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f912:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f914:	1ae3      	sublt	r3, r4, r3
 801f916:	bfb4      	ite	lt
 801f918:	18d2      	addlt	r2, r2, r3
 801f91a:	1b1c      	subge	r4, r3, r4
 801f91c:	9b07      	ldr	r3, [sp, #28]
 801f91e:	bfbc      	itt	lt
 801f920:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f922:	2400      	movlt	r4, #0
 801f924:	2b00      	cmp	r3, #0
 801f926:	bfb5      	itete	lt
 801f928:	eba8 0603 	sublt.w	r6, r8, r3
 801f92c:	9b07      	ldrge	r3, [sp, #28]
 801f92e:	2300      	movlt	r3, #0
 801f930:	4646      	movge	r6, r8
 801f932:	e730      	b.n	801f796 <_dtoa_r+0x71e>
 801f934:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f936:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f938:	4646      	mov	r6, r8
 801f93a:	e735      	b.n	801f7a8 <_dtoa_r+0x730>
 801f93c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f93e:	e75c      	b.n	801f7fa <_dtoa_r+0x782>
 801f940:	2300      	movs	r3, #0
 801f942:	e788      	b.n	801f856 <_dtoa_r+0x7de>
 801f944:	3fe00000 	.word	0x3fe00000
 801f948:	40240000 	.word	0x40240000
 801f94c:	40140000 	.word	0x40140000
 801f950:	9b02      	ldr	r3, [sp, #8]
 801f952:	e780      	b.n	801f856 <_dtoa_r+0x7de>
 801f954:	2300      	movs	r3, #0
 801f956:	930a      	str	r3, [sp, #40]	@ 0x28
 801f958:	e782      	b.n	801f860 <_dtoa_r+0x7e8>
 801f95a:	d099      	beq.n	801f890 <_dtoa_r+0x818>
 801f95c:	9a08      	ldr	r2, [sp, #32]
 801f95e:	331c      	adds	r3, #28
 801f960:	441a      	add	r2, r3
 801f962:	4498      	add	r8, r3
 801f964:	441e      	add	r6, r3
 801f966:	9208      	str	r2, [sp, #32]
 801f968:	e792      	b.n	801f890 <_dtoa_r+0x818>
 801f96a:	4603      	mov	r3, r0
 801f96c:	e7f6      	b.n	801f95c <_dtoa_r+0x8e4>
 801f96e:	9b07      	ldr	r3, [sp, #28]
 801f970:	9704      	str	r7, [sp, #16]
 801f972:	2b00      	cmp	r3, #0
 801f974:	dc20      	bgt.n	801f9b8 <_dtoa_r+0x940>
 801f976:	9300      	str	r3, [sp, #0]
 801f978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f97a:	2b02      	cmp	r3, #2
 801f97c:	dd1e      	ble.n	801f9bc <_dtoa_r+0x944>
 801f97e:	9b00      	ldr	r3, [sp, #0]
 801f980:	2b00      	cmp	r3, #0
 801f982:	f47f aec0 	bne.w	801f706 <_dtoa_r+0x68e>
 801f986:	4621      	mov	r1, r4
 801f988:	2205      	movs	r2, #5
 801f98a:	4658      	mov	r0, fp
 801f98c:	f000 f9e4 	bl	801fd58 <__multadd>
 801f990:	4601      	mov	r1, r0
 801f992:	4604      	mov	r4, r0
 801f994:	4648      	mov	r0, r9
 801f996:	f000 fc41 	bl	802021c <__mcmp>
 801f99a:	2800      	cmp	r0, #0
 801f99c:	f77f aeb3 	ble.w	801f706 <_dtoa_r+0x68e>
 801f9a0:	4656      	mov	r6, sl
 801f9a2:	2331      	movs	r3, #49	@ 0x31
 801f9a4:	f806 3b01 	strb.w	r3, [r6], #1
 801f9a8:	9b04      	ldr	r3, [sp, #16]
 801f9aa:	3301      	adds	r3, #1
 801f9ac:	9304      	str	r3, [sp, #16]
 801f9ae:	e6ae      	b.n	801f70e <_dtoa_r+0x696>
 801f9b0:	9c07      	ldr	r4, [sp, #28]
 801f9b2:	9704      	str	r7, [sp, #16]
 801f9b4:	4625      	mov	r5, r4
 801f9b6:	e7f3      	b.n	801f9a0 <_dtoa_r+0x928>
 801f9b8:	9b07      	ldr	r3, [sp, #28]
 801f9ba:	9300      	str	r3, [sp, #0]
 801f9bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	f000 8104 	beq.w	801fbcc <_dtoa_r+0xb54>
 801f9c4:	2e00      	cmp	r6, #0
 801f9c6:	dd05      	ble.n	801f9d4 <_dtoa_r+0x95c>
 801f9c8:	4629      	mov	r1, r5
 801f9ca:	4632      	mov	r2, r6
 801f9cc:	4658      	mov	r0, fp
 801f9ce:	f000 fbb9 	bl	8020144 <__lshift>
 801f9d2:	4605      	mov	r5, r0
 801f9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d05a      	beq.n	801fa90 <_dtoa_r+0xa18>
 801f9da:	6869      	ldr	r1, [r5, #4]
 801f9dc:	4658      	mov	r0, fp
 801f9de:	f000 f959 	bl	801fc94 <_Balloc>
 801f9e2:	4606      	mov	r6, r0
 801f9e4:	b928      	cbnz	r0, 801f9f2 <_dtoa_r+0x97a>
 801f9e6:	4b84      	ldr	r3, [pc, #528]	@ (801fbf8 <_dtoa_r+0xb80>)
 801f9e8:	4602      	mov	r2, r0
 801f9ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f9ee:	f7ff bb5a 	b.w	801f0a6 <_dtoa_r+0x2e>
 801f9f2:	692a      	ldr	r2, [r5, #16]
 801f9f4:	3202      	adds	r2, #2
 801f9f6:	0092      	lsls	r2, r2, #2
 801f9f8:	f105 010c 	add.w	r1, r5, #12
 801f9fc:	300c      	adds	r0, #12
 801f9fe:	f7ff fa80 	bl	801ef02 <memcpy>
 801fa02:	2201      	movs	r2, #1
 801fa04:	4631      	mov	r1, r6
 801fa06:	4658      	mov	r0, fp
 801fa08:	f000 fb9c 	bl	8020144 <__lshift>
 801fa0c:	f10a 0301 	add.w	r3, sl, #1
 801fa10:	9307      	str	r3, [sp, #28]
 801fa12:	9b00      	ldr	r3, [sp, #0]
 801fa14:	4453      	add	r3, sl
 801fa16:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fa18:	9b02      	ldr	r3, [sp, #8]
 801fa1a:	f003 0301 	and.w	r3, r3, #1
 801fa1e:	462f      	mov	r7, r5
 801fa20:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa22:	4605      	mov	r5, r0
 801fa24:	9b07      	ldr	r3, [sp, #28]
 801fa26:	4621      	mov	r1, r4
 801fa28:	3b01      	subs	r3, #1
 801fa2a:	4648      	mov	r0, r9
 801fa2c:	9300      	str	r3, [sp, #0]
 801fa2e:	f7ff fa9b 	bl	801ef68 <quorem>
 801fa32:	4639      	mov	r1, r7
 801fa34:	9002      	str	r0, [sp, #8]
 801fa36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fa3a:	4648      	mov	r0, r9
 801fa3c:	f000 fbee 	bl	802021c <__mcmp>
 801fa40:	462a      	mov	r2, r5
 801fa42:	9008      	str	r0, [sp, #32]
 801fa44:	4621      	mov	r1, r4
 801fa46:	4658      	mov	r0, fp
 801fa48:	f000 fc04 	bl	8020254 <__mdiff>
 801fa4c:	68c2      	ldr	r2, [r0, #12]
 801fa4e:	4606      	mov	r6, r0
 801fa50:	bb02      	cbnz	r2, 801fa94 <_dtoa_r+0xa1c>
 801fa52:	4601      	mov	r1, r0
 801fa54:	4648      	mov	r0, r9
 801fa56:	f000 fbe1 	bl	802021c <__mcmp>
 801fa5a:	4602      	mov	r2, r0
 801fa5c:	4631      	mov	r1, r6
 801fa5e:	4658      	mov	r0, fp
 801fa60:	920e      	str	r2, [sp, #56]	@ 0x38
 801fa62:	f000 f957 	bl	801fd14 <_Bfree>
 801fa66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa6a:	9e07      	ldr	r6, [sp, #28]
 801fa6c:	ea43 0102 	orr.w	r1, r3, r2
 801fa70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa72:	4319      	orrs	r1, r3
 801fa74:	d110      	bne.n	801fa98 <_dtoa_r+0xa20>
 801fa76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fa7a:	d029      	beq.n	801fad0 <_dtoa_r+0xa58>
 801fa7c:	9b08      	ldr	r3, [sp, #32]
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	dd02      	ble.n	801fa88 <_dtoa_r+0xa10>
 801fa82:	9b02      	ldr	r3, [sp, #8]
 801fa84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fa88:	9b00      	ldr	r3, [sp, #0]
 801fa8a:	f883 8000 	strb.w	r8, [r3]
 801fa8e:	e63f      	b.n	801f710 <_dtoa_r+0x698>
 801fa90:	4628      	mov	r0, r5
 801fa92:	e7bb      	b.n	801fa0c <_dtoa_r+0x994>
 801fa94:	2201      	movs	r2, #1
 801fa96:	e7e1      	b.n	801fa5c <_dtoa_r+0x9e4>
 801fa98:	9b08      	ldr	r3, [sp, #32]
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	db04      	blt.n	801faa8 <_dtoa_r+0xa30>
 801fa9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801faa0:	430b      	orrs	r3, r1
 801faa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801faa4:	430b      	orrs	r3, r1
 801faa6:	d120      	bne.n	801faea <_dtoa_r+0xa72>
 801faa8:	2a00      	cmp	r2, #0
 801faaa:	dded      	ble.n	801fa88 <_dtoa_r+0xa10>
 801faac:	4649      	mov	r1, r9
 801faae:	2201      	movs	r2, #1
 801fab0:	4658      	mov	r0, fp
 801fab2:	f000 fb47 	bl	8020144 <__lshift>
 801fab6:	4621      	mov	r1, r4
 801fab8:	4681      	mov	r9, r0
 801faba:	f000 fbaf 	bl	802021c <__mcmp>
 801fabe:	2800      	cmp	r0, #0
 801fac0:	dc03      	bgt.n	801faca <_dtoa_r+0xa52>
 801fac2:	d1e1      	bne.n	801fa88 <_dtoa_r+0xa10>
 801fac4:	f018 0f01 	tst.w	r8, #1
 801fac8:	d0de      	beq.n	801fa88 <_dtoa_r+0xa10>
 801faca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801face:	d1d8      	bne.n	801fa82 <_dtoa_r+0xa0a>
 801fad0:	9a00      	ldr	r2, [sp, #0]
 801fad2:	2339      	movs	r3, #57	@ 0x39
 801fad4:	7013      	strb	r3, [r2, #0]
 801fad6:	4633      	mov	r3, r6
 801fad8:	461e      	mov	r6, r3
 801fada:	3b01      	subs	r3, #1
 801fadc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fae0:	2a39      	cmp	r2, #57	@ 0x39
 801fae2:	d052      	beq.n	801fb8a <_dtoa_r+0xb12>
 801fae4:	3201      	adds	r2, #1
 801fae6:	701a      	strb	r2, [r3, #0]
 801fae8:	e612      	b.n	801f710 <_dtoa_r+0x698>
 801faea:	2a00      	cmp	r2, #0
 801faec:	dd07      	ble.n	801fafe <_dtoa_r+0xa86>
 801faee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801faf2:	d0ed      	beq.n	801fad0 <_dtoa_r+0xa58>
 801faf4:	9a00      	ldr	r2, [sp, #0]
 801faf6:	f108 0301 	add.w	r3, r8, #1
 801fafa:	7013      	strb	r3, [r2, #0]
 801fafc:	e608      	b.n	801f710 <_dtoa_r+0x698>
 801fafe:	9b07      	ldr	r3, [sp, #28]
 801fb00:	9a07      	ldr	r2, [sp, #28]
 801fb02:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fb06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb08:	4293      	cmp	r3, r2
 801fb0a:	d028      	beq.n	801fb5e <_dtoa_r+0xae6>
 801fb0c:	4649      	mov	r1, r9
 801fb0e:	2300      	movs	r3, #0
 801fb10:	220a      	movs	r2, #10
 801fb12:	4658      	mov	r0, fp
 801fb14:	f000 f920 	bl	801fd58 <__multadd>
 801fb18:	42af      	cmp	r7, r5
 801fb1a:	4681      	mov	r9, r0
 801fb1c:	f04f 0300 	mov.w	r3, #0
 801fb20:	f04f 020a 	mov.w	r2, #10
 801fb24:	4639      	mov	r1, r7
 801fb26:	4658      	mov	r0, fp
 801fb28:	d107      	bne.n	801fb3a <_dtoa_r+0xac2>
 801fb2a:	f000 f915 	bl	801fd58 <__multadd>
 801fb2e:	4607      	mov	r7, r0
 801fb30:	4605      	mov	r5, r0
 801fb32:	9b07      	ldr	r3, [sp, #28]
 801fb34:	3301      	adds	r3, #1
 801fb36:	9307      	str	r3, [sp, #28]
 801fb38:	e774      	b.n	801fa24 <_dtoa_r+0x9ac>
 801fb3a:	f000 f90d 	bl	801fd58 <__multadd>
 801fb3e:	4629      	mov	r1, r5
 801fb40:	4607      	mov	r7, r0
 801fb42:	2300      	movs	r3, #0
 801fb44:	220a      	movs	r2, #10
 801fb46:	4658      	mov	r0, fp
 801fb48:	f000 f906 	bl	801fd58 <__multadd>
 801fb4c:	4605      	mov	r5, r0
 801fb4e:	e7f0      	b.n	801fb32 <_dtoa_r+0xaba>
 801fb50:	9b00      	ldr	r3, [sp, #0]
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	bfcc      	ite	gt
 801fb56:	461e      	movgt	r6, r3
 801fb58:	2601      	movle	r6, #1
 801fb5a:	4456      	add	r6, sl
 801fb5c:	2700      	movs	r7, #0
 801fb5e:	4649      	mov	r1, r9
 801fb60:	2201      	movs	r2, #1
 801fb62:	4658      	mov	r0, fp
 801fb64:	f000 faee 	bl	8020144 <__lshift>
 801fb68:	4621      	mov	r1, r4
 801fb6a:	4681      	mov	r9, r0
 801fb6c:	f000 fb56 	bl	802021c <__mcmp>
 801fb70:	2800      	cmp	r0, #0
 801fb72:	dcb0      	bgt.n	801fad6 <_dtoa_r+0xa5e>
 801fb74:	d102      	bne.n	801fb7c <_dtoa_r+0xb04>
 801fb76:	f018 0f01 	tst.w	r8, #1
 801fb7a:	d1ac      	bne.n	801fad6 <_dtoa_r+0xa5e>
 801fb7c:	4633      	mov	r3, r6
 801fb7e:	461e      	mov	r6, r3
 801fb80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fb84:	2a30      	cmp	r2, #48	@ 0x30
 801fb86:	d0fa      	beq.n	801fb7e <_dtoa_r+0xb06>
 801fb88:	e5c2      	b.n	801f710 <_dtoa_r+0x698>
 801fb8a:	459a      	cmp	sl, r3
 801fb8c:	d1a4      	bne.n	801fad8 <_dtoa_r+0xa60>
 801fb8e:	9b04      	ldr	r3, [sp, #16]
 801fb90:	3301      	adds	r3, #1
 801fb92:	9304      	str	r3, [sp, #16]
 801fb94:	2331      	movs	r3, #49	@ 0x31
 801fb96:	f88a 3000 	strb.w	r3, [sl]
 801fb9a:	e5b9      	b.n	801f710 <_dtoa_r+0x698>
 801fb9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fb9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fbfc <_dtoa_r+0xb84>
 801fba2:	b11b      	cbz	r3, 801fbac <_dtoa_r+0xb34>
 801fba4:	f10a 0308 	add.w	r3, sl, #8
 801fba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fbaa:	6013      	str	r3, [r2, #0]
 801fbac:	4650      	mov	r0, sl
 801fbae:	b019      	add	sp, #100	@ 0x64
 801fbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbb6:	2b01      	cmp	r3, #1
 801fbb8:	f77f ae37 	ble.w	801f82a <_dtoa_r+0x7b2>
 801fbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbbe:	930a      	str	r3, [sp, #40]	@ 0x28
 801fbc0:	2001      	movs	r0, #1
 801fbc2:	e655      	b.n	801f870 <_dtoa_r+0x7f8>
 801fbc4:	9b00      	ldr	r3, [sp, #0]
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	f77f aed6 	ble.w	801f978 <_dtoa_r+0x900>
 801fbcc:	4656      	mov	r6, sl
 801fbce:	4621      	mov	r1, r4
 801fbd0:	4648      	mov	r0, r9
 801fbd2:	f7ff f9c9 	bl	801ef68 <quorem>
 801fbd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fbda:	f806 8b01 	strb.w	r8, [r6], #1
 801fbde:	9b00      	ldr	r3, [sp, #0]
 801fbe0:	eba6 020a 	sub.w	r2, r6, sl
 801fbe4:	4293      	cmp	r3, r2
 801fbe6:	ddb3      	ble.n	801fb50 <_dtoa_r+0xad8>
 801fbe8:	4649      	mov	r1, r9
 801fbea:	2300      	movs	r3, #0
 801fbec:	220a      	movs	r2, #10
 801fbee:	4658      	mov	r0, fp
 801fbf0:	f000 f8b2 	bl	801fd58 <__multadd>
 801fbf4:	4681      	mov	r9, r0
 801fbf6:	e7ea      	b.n	801fbce <_dtoa_r+0xb56>
 801fbf8:	08025688 	.word	0x08025688
 801fbfc:	08025623 	.word	0x08025623

0801fc00 <_free_r>:
 801fc00:	b538      	push	{r3, r4, r5, lr}
 801fc02:	4605      	mov	r5, r0
 801fc04:	2900      	cmp	r1, #0
 801fc06:	d041      	beq.n	801fc8c <_free_r+0x8c>
 801fc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fc0c:	1f0c      	subs	r4, r1, #4
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	bfb8      	it	lt
 801fc12:	18e4      	addlt	r4, r4, r3
 801fc14:	f7fd fe8a 	bl	801d92c <__malloc_lock>
 801fc18:	4a1d      	ldr	r2, [pc, #116]	@ (801fc90 <_free_r+0x90>)
 801fc1a:	6813      	ldr	r3, [r2, #0]
 801fc1c:	b933      	cbnz	r3, 801fc2c <_free_r+0x2c>
 801fc1e:	6063      	str	r3, [r4, #4]
 801fc20:	6014      	str	r4, [r2, #0]
 801fc22:	4628      	mov	r0, r5
 801fc24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc28:	f7fd be86 	b.w	801d938 <__malloc_unlock>
 801fc2c:	42a3      	cmp	r3, r4
 801fc2e:	d908      	bls.n	801fc42 <_free_r+0x42>
 801fc30:	6820      	ldr	r0, [r4, #0]
 801fc32:	1821      	adds	r1, r4, r0
 801fc34:	428b      	cmp	r3, r1
 801fc36:	bf01      	itttt	eq
 801fc38:	6819      	ldreq	r1, [r3, #0]
 801fc3a:	685b      	ldreq	r3, [r3, #4]
 801fc3c:	1809      	addeq	r1, r1, r0
 801fc3e:	6021      	streq	r1, [r4, #0]
 801fc40:	e7ed      	b.n	801fc1e <_free_r+0x1e>
 801fc42:	461a      	mov	r2, r3
 801fc44:	685b      	ldr	r3, [r3, #4]
 801fc46:	b10b      	cbz	r3, 801fc4c <_free_r+0x4c>
 801fc48:	42a3      	cmp	r3, r4
 801fc4a:	d9fa      	bls.n	801fc42 <_free_r+0x42>
 801fc4c:	6811      	ldr	r1, [r2, #0]
 801fc4e:	1850      	adds	r0, r2, r1
 801fc50:	42a0      	cmp	r0, r4
 801fc52:	d10b      	bne.n	801fc6c <_free_r+0x6c>
 801fc54:	6820      	ldr	r0, [r4, #0]
 801fc56:	4401      	add	r1, r0
 801fc58:	1850      	adds	r0, r2, r1
 801fc5a:	4283      	cmp	r3, r0
 801fc5c:	6011      	str	r1, [r2, #0]
 801fc5e:	d1e0      	bne.n	801fc22 <_free_r+0x22>
 801fc60:	6818      	ldr	r0, [r3, #0]
 801fc62:	685b      	ldr	r3, [r3, #4]
 801fc64:	6053      	str	r3, [r2, #4]
 801fc66:	4408      	add	r0, r1
 801fc68:	6010      	str	r0, [r2, #0]
 801fc6a:	e7da      	b.n	801fc22 <_free_r+0x22>
 801fc6c:	d902      	bls.n	801fc74 <_free_r+0x74>
 801fc6e:	230c      	movs	r3, #12
 801fc70:	602b      	str	r3, [r5, #0]
 801fc72:	e7d6      	b.n	801fc22 <_free_r+0x22>
 801fc74:	6820      	ldr	r0, [r4, #0]
 801fc76:	1821      	adds	r1, r4, r0
 801fc78:	428b      	cmp	r3, r1
 801fc7a:	bf04      	itt	eq
 801fc7c:	6819      	ldreq	r1, [r3, #0]
 801fc7e:	685b      	ldreq	r3, [r3, #4]
 801fc80:	6063      	str	r3, [r4, #4]
 801fc82:	bf04      	itt	eq
 801fc84:	1809      	addeq	r1, r1, r0
 801fc86:	6021      	streq	r1, [r4, #0]
 801fc88:	6054      	str	r4, [r2, #4]
 801fc8a:	e7ca      	b.n	801fc22 <_free_r+0x22>
 801fc8c:	bd38      	pop	{r3, r4, r5, pc}
 801fc8e:	bf00      	nop
 801fc90:	20003668 	.word	0x20003668

0801fc94 <_Balloc>:
 801fc94:	b570      	push	{r4, r5, r6, lr}
 801fc96:	69c6      	ldr	r6, [r0, #28]
 801fc98:	4604      	mov	r4, r0
 801fc9a:	460d      	mov	r5, r1
 801fc9c:	b976      	cbnz	r6, 801fcbc <_Balloc+0x28>
 801fc9e:	2010      	movs	r0, #16
 801fca0:	f7fd fd9a 	bl	801d7d8 <malloc>
 801fca4:	4602      	mov	r2, r0
 801fca6:	61e0      	str	r0, [r4, #28]
 801fca8:	b920      	cbnz	r0, 801fcb4 <_Balloc+0x20>
 801fcaa:	4b18      	ldr	r3, [pc, #96]	@ (801fd0c <_Balloc+0x78>)
 801fcac:	4818      	ldr	r0, [pc, #96]	@ (801fd10 <_Balloc+0x7c>)
 801fcae:	216b      	movs	r1, #107	@ 0x6b
 801fcb0:	f7ff f93c 	bl	801ef2c <__assert_func>
 801fcb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fcb8:	6006      	str	r6, [r0, #0]
 801fcba:	60c6      	str	r6, [r0, #12]
 801fcbc:	69e6      	ldr	r6, [r4, #28]
 801fcbe:	68f3      	ldr	r3, [r6, #12]
 801fcc0:	b183      	cbz	r3, 801fce4 <_Balloc+0x50>
 801fcc2:	69e3      	ldr	r3, [r4, #28]
 801fcc4:	68db      	ldr	r3, [r3, #12]
 801fcc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fcca:	b9b8      	cbnz	r0, 801fcfc <_Balloc+0x68>
 801fccc:	2101      	movs	r1, #1
 801fcce:	fa01 f605 	lsl.w	r6, r1, r5
 801fcd2:	1d72      	adds	r2, r6, #5
 801fcd4:	0092      	lsls	r2, r2, #2
 801fcd6:	4620      	mov	r0, r4
 801fcd8:	f001 fe95 	bl	8021a06 <_calloc_r>
 801fcdc:	b160      	cbz	r0, 801fcf8 <_Balloc+0x64>
 801fcde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fce2:	e00e      	b.n	801fd02 <_Balloc+0x6e>
 801fce4:	2221      	movs	r2, #33	@ 0x21
 801fce6:	2104      	movs	r1, #4
 801fce8:	4620      	mov	r0, r4
 801fcea:	f001 fe8c 	bl	8021a06 <_calloc_r>
 801fcee:	69e3      	ldr	r3, [r4, #28]
 801fcf0:	60f0      	str	r0, [r6, #12]
 801fcf2:	68db      	ldr	r3, [r3, #12]
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	d1e4      	bne.n	801fcc2 <_Balloc+0x2e>
 801fcf8:	2000      	movs	r0, #0
 801fcfa:	bd70      	pop	{r4, r5, r6, pc}
 801fcfc:	6802      	ldr	r2, [r0, #0]
 801fcfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fd02:	2300      	movs	r3, #0
 801fd04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fd08:	e7f7      	b.n	801fcfa <_Balloc+0x66>
 801fd0a:	bf00      	nop
 801fd0c:	08025576 	.word	0x08025576
 801fd10:	08025699 	.word	0x08025699

0801fd14 <_Bfree>:
 801fd14:	b570      	push	{r4, r5, r6, lr}
 801fd16:	69c6      	ldr	r6, [r0, #28]
 801fd18:	4605      	mov	r5, r0
 801fd1a:	460c      	mov	r4, r1
 801fd1c:	b976      	cbnz	r6, 801fd3c <_Bfree+0x28>
 801fd1e:	2010      	movs	r0, #16
 801fd20:	f7fd fd5a 	bl	801d7d8 <malloc>
 801fd24:	4602      	mov	r2, r0
 801fd26:	61e8      	str	r0, [r5, #28]
 801fd28:	b920      	cbnz	r0, 801fd34 <_Bfree+0x20>
 801fd2a:	4b09      	ldr	r3, [pc, #36]	@ (801fd50 <_Bfree+0x3c>)
 801fd2c:	4809      	ldr	r0, [pc, #36]	@ (801fd54 <_Bfree+0x40>)
 801fd2e:	218f      	movs	r1, #143	@ 0x8f
 801fd30:	f7ff f8fc 	bl	801ef2c <__assert_func>
 801fd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fd38:	6006      	str	r6, [r0, #0]
 801fd3a:	60c6      	str	r6, [r0, #12]
 801fd3c:	b13c      	cbz	r4, 801fd4e <_Bfree+0x3a>
 801fd3e:	69eb      	ldr	r3, [r5, #28]
 801fd40:	6862      	ldr	r2, [r4, #4]
 801fd42:	68db      	ldr	r3, [r3, #12]
 801fd44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fd48:	6021      	str	r1, [r4, #0]
 801fd4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fd4e:	bd70      	pop	{r4, r5, r6, pc}
 801fd50:	08025576 	.word	0x08025576
 801fd54:	08025699 	.word	0x08025699

0801fd58 <__multadd>:
 801fd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd5c:	690d      	ldr	r5, [r1, #16]
 801fd5e:	4607      	mov	r7, r0
 801fd60:	460c      	mov	r4, r1
 801fd62:	461e      	mov	r6, r3
 801fd64:	f101 0c14 	add.w	ip, r1, #20
 801fd68:	2000      	movs	r0, #0
 801fd6a:	f8dc 3000 	ldr.w	r3, [ip]
 801fd6e:	b299      	uxth	r1, r3
 801fd70:	fb02 6101 	mla	r1, r2, r1, r6
 801fd74:	0c1e      	lsrs	r6, r3, #16
 801fd76:	0c0b      	lsrs	r3, r1, #16
 801fd78:	fb02 3306 	mla	r3, r2, r6, r3
 801fd7c:	b289      	uxth	r1, r1
 801fd7e:	3001      	adds	r0, #1
 801fd80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fd84:	4285      	cmp	r5, r0
 801fd86:	f84c 1b04 	str.w	r1, [ip], #4
 801fd8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fd8e:	dcec      	bgt.n	801fd6a <__multadd+0x12>
 801fd90:	b30e      	cbz	r6, 801fdd6 <__multadd+0x7e>
 801fd92:	68a3      	ldr	r3, [r4, #8]
 801fd94:	42ab      	cmp	r3, r5
 801fd96:	dc19      	bgt.n	801fdcc <__multadd+0x74>
 801fd98:	6861      	ldr	r1, [r4, #4]
 801fd9a:	4638      	mov	r0, r7
 801fd9c:	3101      	adds	r1, #1
 801fd9e:	f7ff ff79 	bl	801fc94 <_Balloc>
 801fda2:	4680      	mov	r8, r0
 801fda4:	b928      	cbnz	r0, 801fdb2 <__multadd+0x5a>
 801fda6:	4602      	mov	r2, r0
 801fda8:	4b0c      	ldr	r3, [pc, #48]	@ (801fddc <__multadd+0x84>)
 801fdaa:	480d      	ldr	r0, [pc, #52]	@ (801fde0 <__multadd+0x88>)
 801fdac:	21ba      	movs	r1, #186	@ 0xba
 801fdae:	f7ff f8bd 	bl	801ef2c <__assert_func>
 801fdb2:	6922      	ldr	r2, [r4, #16]
 801fdb4:	3202      	adds	r2, #2
 801fdb6:	f104 010c 	add.w	r1, r4, #12
 801fdba:	0092      	lsls	r2, r2, #2
 801fdbc:	300c      	adds	r0, #12
 801fdbe:	f7ff f8a0 	bl	801ef02 <memcpy>
 801fdc2:	4621      	mov	r1, r4
 801fdc4:	4638      	mov	r0, r7
 801fdc6:	f7ff ffa5 	bl	801fd14 <_Bfree>
 801fdca:	4644      	mov	r4, r8
 801fdcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fdd0:	3501      	adds	r5, #1
 801fdd2:	615e      	str	r6, [r3, #20]
 801fdd4:	6125      	str	r5, [r4, #16]
 801fdd6:	4620      	mov	r0, r4
 801fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fddc:	08025688 	.word	0x08025688
 801fde0:	08025699 	.word	0x08025699

0801fde4 <__s2b>:
 801fde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fde8:	460c      	mov	r4, r1
 801fdea:	4615      	mov	r5, r2
 801fdec:	461f      	mov	r7, r3
 801fdee:	2209      	movs	r2, #9
 801fdf0:	3308      	adds	r3, #8
 801fdf2:	4606      	mov	r6, r0
 801fdf4:	fb93 f3f2 	sdiv	r3, r3, r2
 801fdf8:	2100      	movs	r1, #0
 801fdfa:	2201      	movs	r2, #1
 801fdfc:	429a      	cmp	r2, r3
 801fdfe:	db09      	blt.n	801fe14 <__s2b+0x30>
 801fe00:	4630      	mov	r0, r6
 801fe02:	f7ff ff47 	bl	801fc94 <_Balloc>
 801fe06:	b940      	cbnz	r0, 801fe1a <__s2b+0x36>
 801fe08:	4602      	mov	r2, r0
 801fe0a:	4b19      	ldr	r3, [pc, #100]	@ (801fe70 <__s2b+0x8c>)
 801fe0c:	4819      	ldr	r0, [pc, #100]	@ (801fe74 <__s2b+0x90>)
 801fe0e:	21d3      	movs	r1, #211	@ 0xd3
 801fe10:	f7ff f88c 	bl	801ef2c <__assert_func>
 801fe14:	0052      	lsls	r2, r2, #1
 801fe16:	3101      	adds	r1, #1
 801fe18:	e7f0      	b.n	801fdfc <__s2b+0x18>
 801fe1a:	9b08      	ldr	r3, [sp, #32]
 801fe1c:	6143      	str	r3, [r0, #20]
 801fe1e:	2d09      	cmp	r5, #9
 801fe20:	f04f 0301 	mov.w	r3, #1
 801fe24:	6103      	str	r3, [r0, #16]
 801fe26:	dd16      	ble.n	801fe56 <__s2b+0x72>
 801fe28:	f104 0909 	add.w	r9, r4, #9
 801fe2c:	46c8      	mov	r8, r9
 801fe2e:	442c      	add	r4, r5
 801fe30:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fe34:	4601      	mov	r1, r0
 801fe36:	3b30      	subs	r3, #48	@ 0x30
 801fe38:	220a      	movs	r2, #10
 801fe3a:	4630      	mov	r0, r6
 801fe3c:	f7ff ff8c 	bl	801fd58 <__multadd>
 801fe40:	45a0      	cmp	r8, r4
 801fe42:	d1f5      	bne.n	801fe30 <__s2b+0x4c>
 801fe44:	f1a5 0408 	sub.w	r4, r5, #8
 801fe48:	444c      	add	r4, r9
 801fe4a:	1b2d      	subs	r5, r5, r4
 801fe4c:	1963      	adds	r3, r4, r5
 801fe4e:	42bb      	cmp	r3, r7
 801fe50:	db04      	blt.n	801fe5c <__s2b+0x78>
 801fe52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe56:	340a      	adds	r4, #10
 801fe58:	2509      	movs	r5, #9
 801fe5a:	e7f6      	b.n	801fe4a <__s2b+0x66>
 801fe5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fe60:	4601      	mov	r1, r0
 801fe62:	3b30      	subs	r3, #48	@ 0x30
 801fe64:	220a      	movs	r2, #10
 801fe66:	4630      	mov	r0, r6
 801fe68:	f7ff ff76 	bl	801fd58 <__multadd>
 801fe6c:	e7ee      	b.n	801fe4c <__s2b+0x68>
 801fe6e:	bf00      	nop
 801fe70:	08025688 	.word	0x08025688
 801fe74:	08025699 	.word	0x08025699

0801fe78 <__hi0bits>:
 801fe78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801fe7c:	4603      	mov	r3, r0
 801fe7e:	bf36      	itet	cc
 801fe80:	0403      	lslcc	r3, r0, #16
 801fe82:	2000      	movcs	r0, #0
 801fe84:	2010      	movcc	r0, #16
 801fe86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fe8a:	bf3c      	itt	cc
 801fe8c:	021b      	lslcc	r3, r3, #8
 801fe8e:	3008      	addcc	r0, #8
 801fe90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fe94:	bf3c      	itt	cc
 801fe96:	011b      	lslcc	r3, r3, #4
 801fe98:	3004      	addcc	r0, #4
 801fe9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fe9e:	bf3c      	itt	cc
 801fea0:	009b      	lslcc	r3, r3, #2
 801fea2:	3002      	addcc	r0, #2
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	db05      	blt.n	801feb4 <__hi0bits+0x3c>
 801fea8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801feac:	f100 0001 	add.w	r0, r0, #1
 801feb0:	bf08      	it	eq
 801feb2:	2020      	moveq	r0, #32
 801feb4:	4770      	bx	lr

0801feb6 <__lo0bits>:
 801feb6:	6803      	ldr	r3, [r0, #0]
 801feb8:	4602      	mov	r2, r0
 801feba:	f013 0007 	ands.w	r0, r3, #7
 801febe:	d00b      	beq.n	801fed8 <__lo0bits+0x22>
 801fec0:	07d9      	lsls	r1, r3, #31
 801fec2:	d421      	bmi.n	801ff08 <__lo0bits+0x52>
 801fec4:	0798      	lsls	r0, r3, #30
 801fec6:	bf49      	itett	mi
 801fec8:	085b      	lsrmi	r3, r3, #1
 801feca:	089b      	lsrpl	r3, r3, #2
 801fecc:	2001      	movmi	r0, #1
 801fece:	6013      	strmi	r3, [r2, #0]
 801fed0:	bf5c      	itt	pl
 801fed2:	6013      	strpl	r3, [r2, #0]
 801fed4:	2002      	movpl	r0, #2
 801fed6:	4770      	bx	lr
 801fed8:	b299      	uxth	r1, r3
 801feda:	b909      	cbnz	r1, 801fee0 <__lo0bits+0x2a>
 801fedc:	0c1b      	lsrs	r3, r3, #16
 801fede:	2010      	movs	r0, #16
 801fee0:	b2d9      	uxtb	r1, r3
 801fee2:	b909      	cbnz	r1, 801fee8 <__lo0bits+0x32>
 801fee4:	3008      	adds	r0, #8
 801fee6:	0a1b      	lsrs	r3, r3, #8
 801fee8:	0719      	lsls	r1, r3, #28
 801feea:	bf04      	itt	eq
 801feec:	091b      	lsreq	r3, r3, #4
 801feee:	3004      	addeq	r0, #4
 801fef0:	0799      	lsls	r1, r3, #30
 801fef2:	bf04      	itt	eq
 801fef4:	089b      	lsreq	r3, r3, #2
 801fef6:	3002      	addeq	r0, #2
 801fef8:	07d9      	lsls	r1, r3, #31
 801fefa:	d403      	bmi.n	801ff04 <__lo0bits+0x4e>
 801fefc:	085b      	lsrs	r3, r3, #1
 801fefe:	f100 0001 	add.w	r0, r0, #1
 801ff02:	d003      	beq.n	801ff0c <__lo0bits+0x56>
 801ff04:	6013      	str	r3, [r2, #0]
 801ff06:	4770      	bx	lr
 801ff08:	2000      	movs	r0, #0
 801ff0a:	4770      	bx	lr
 801ff0c:	2020      	movs	r0, #32
 801ff0e:	4770      	bx	lr

0801ff10 <__i2b>:
 801ff10:	b510      	push	{r4, lr}
 801ff12:	460c      	mov	r4, r1
 801ff14:	2101      	movs	r1, #1
 801ff16:	f7ff febd 	bl	801fc94 <_Balloc>
 801ff1a:	4602      	mov	r2, r0
 801ff1c:	b928      	cbnz	r0, 801ff2a <__i2b+0x1a>
 801ff1e:	4b05      	ldr	r3, [pc, #20]	@ (801ff34 <__i2b+0x24>)
 801ff20:	4805      	ldr	r0, [pc, #20]	@ (801ff38 <__i2b+0x28>)
 801ff22:	f240 1145 	movw	r1, #325	@ 0x145
 801ff26:	f7ff f801 	bl	801ef2c <__assert_func>
 801ff2a:	2301      	movs	r3, #1
 801ff2c:	6144      	str	r4, [r0, #20]
 801ff2e:	6103      	str	r3, [r0, #16]
 801ff30:	bd10      	pop	{r4, pc}
 801ff32:	bf00      	nop
 801ff34:	08025688 	.word	0x08025688
 801ff38:	08025699 	.word	0x08025699

0801ff3c <__multiply>:
 801ff3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff40:	4614      	mov	r4, r2
 801ff42:	690a      	ldr	r2, [r1, #16]
 801ff44:	6923      	ldr	r3, [r4, #16]
 801ff46:	429a      	cmp	r2, r3
 801ff48:	bfa8      	it	ge
 801ff4a:	4623      	movge	r3, r4
 801ff4c:	460f      	mov	r7, r1
 801ff4e:	bfa4      	itt	ge
 801ff50:	460c      	movge	r4, r1
 801ff52:	461f      	movge	r7, r3
 801ff54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ff58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ff5c:	68a3      	ldr	r3, [r4, #8]
 801ff5e:	6861      	ldr	r1, [r4, #4]
 801ff60:	eb0a 0609 	add.w	r6, sl, r9
 801ff64:	42b3      	cmp	r3, r6
 801ff66:	b085      	sub	sp, #20
 801ff68:	bfb8      	it	lt
 801ff6a:	3101      	addlt	r1, #1
 801ff6c:	f7ff fe92 	bl	801fc94 <_Balloc>
 801ff70:	b930      	cbnz	r0, 801ff80 <__multiply+0x44>
 801ff72:	4602      	mov	r2, r0
 801ff74:	4b44      	ldr	r3, [pc, #272]	@ (8020088 <__multiply+0x14c>)
 801ff76:	4845      	ldr	r0, [pc, #276]	@ (802008c <__multiply+0x150>)
 801ff78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ff7c:	f7fe ffd6 	bl	801ef2c <__assert_func>
 801ff80:	f100 0514 	add.w	r5, r0, #20
 801ff84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ff88:	462b      	mov	r3, r5
 801ff8a:	2200      	movs	r2, #0
 801ff8c:	4543      	cmp	r3, r8
 801ff8e:	d321      	bcc.n	801ffd4 <__multiply+0x98>
 801ff90:	f107 0114 	add.w	r1, r7, #20
 801ff94:	f104 0214 	add.w	r2, r4, #20
 801ff98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ff9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ffa0:	9302      	str	r3, [sp, #8]
 801ffa2:	1b13      	subs	r3, r2, r4
 801ffa4:	3b15      	subs	r3, #21
 801ffa6:	f023 0303 	bic.w	r3, r3, #3
 801ffaa:	3304      	adds	r3, #4
 801ffac:	f104 0715 	add.w	r7, r4, #21
 801ffb0:	42ba      	cmp	r2, r7
 801ffb2:	bf38      	it	cc
 801ffb4:	2304      	movcc	r3, #4
 801ffb6:	9301      	str	r3, [sp, #4]
 801ffb8:	9b02      	ldr	r3, [sp, #8]
 801ffba:	9103      	str	r1, [sp, #12]
 801ffbc:	428b      	cmp	r3, r1
 801ffbe:	d80c      	bhi.n	801ffda <__multiply+0x9e>
 801ffc0:	2e00      	cmp	r6, #0
 801ffc2:	dd03      	ble.n	801ffcc <__multiply+0x90>
 801ffc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d05b      	beq.n	8020084 <__multiply+0x148>
 801ffcc:	6106      	str	r6, [r0, #16]
 801ffce:	b005      	add	sp, #20
 801ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffd4:	f843 2b04 	str.w	r2, [r3], #4
 801ffd8:	e7d8      	b.n	801ff8c <__multiply+0x50>
 801ffda:	f8b1 a000 	ldrh.w	sl, [r1]
 801ffde:	f1ba 0f00 	cmp.w	sl, #0
 801ffe2:	d024      	beq.n	802002e <__multiply+0xf2>
 801ffe4:	f104 0e14 	add.w	lr, r4, #20
 801ffe8:	46a9      	mov	r9, r5
 801ffea:	f04f 0c00 	mov.w	ip, #0
 801ffee:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fff2:	f8d9 3000 	ldr.w	r3, [r9]
 801fff6:	fa1f fb87 	uxth.w	fp, r7
 801fffa:	b29b      	uxth	r3, r3
 801fffc:	fb0a 330b 	mla	r3, sl, fp, r3
 8020000:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8020004:	f8d9 7000 	ldr.w	r7, [r9]
 8020008:	4463      	add	r3, ip
 802000a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802000e:	fb0a c70b 	mla	r7, sl, fp, ip
 8020012:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8020016:	b29b      	uxth	r3, r3
 8020018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802001c:	4572      	cmp	r2, lr
 802001e:	f849 3b04 	str.w	r3, [r9], #4
 8020022:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020026:	d8e2      	bhi.n	801ffee <__multiply+0xb2>
 8020028:	9b01      	ldr	r3, [sp, #4]
 802002a:	f845 c003 	str.w	ip, [r5, r3]
 802002e:	9b03      	ldr	r3, [sp, #12]
 8020030:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8020034:	3104      	adds	r1, #4
 8020036:	f1b9 0f00 	cmp.w	r9, #0
 802003a:	d021      	beq.n	8020080 <__multiply+0x144>
 802003c:	682b      	ldr	r3, [r5, #0]
 802003e:	f104 0c14 	add.w	ip, r4, #20
 8020042:	46ae      	mov	lr, r5
 8020044:	f04f 0a00 	mov.w	sl, #0
 8020048:	f8bc b000 	ldrh.w	fp, [ip]
 802004c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020050:	fb09 770b 	mla	r7, r9, fp, r7
 8020054:	4457      	add	r7, sl
 8020056:	b29b      	uxth	r3, r3
 8020058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802005c:	f84e 3b04 	str.w	r3, [lr], #4
 8020060:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020068:	f8be 3000 	ldrh.w	r3, [lr]
 802006c:	fb09 330a 	mla	r3, r9, sl, r3
 8020070:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020074:	4562      	cmp	r2, ip
 8020076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802007a:	d8e5      	bhi.n	8020048 <__multiply+0x10c>
 802007c:	9f01      	ldr	r7, [sp, #4]
 802007e:	51eb      	str	r3, [r5, r7]
 8020080:	3504      	adds	r5, #4
 8020082:	e799      	b.n	801ffb8 <__multiply+0x7c>
 8020084:	3e01      	subs	r6, #1
 8020086:	e79b      	b.n	801ffc0 <__multiply+0x84>
 8020088:	08025688 	.word	0x08025688
 802008c:	08025699 	.word	0x08025699

08020090 <__pow5mult>:
 8020090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020094:	4615      	mov	r5, r2
 8020096:	f012 0203 	ands.w	r2, r2, #3
 802009a:	4607      	mov	r7, r0
 802009c:	460e      	mov	r6, r1
 802009e:	d007      	beq.n	80200b0 <__pow5mult+0x20>
 80200a0:	4c25      	ldr	r4, [pc, #148]	@ (8020138 <__pow5mult+0xa8>)
 80200a2:	3a01      	subs	r2, #1
 80200a4:	2300      	movs	r3, #0
 80200a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80200aa:	f7ff fe55 	bl	801fd58 <__multadd>
 80200ae:	4606      	mov	r6, r0
 80200b0:	10ad      	asrs	r5, r5, #2
 80200b2:	d03d      	beq.n	8020130 <__pow5mult+0xa0>
 80200b4:	69fc      	ldr	r4, [r7, #28]
 80200b6:	b97c      	cbnz	r4, 80200d8 <__pow5mult+0x48>
 80200b8:	2010      	movs	r0, #16
 80200ba:	f7fd fb8d 	bl	801d7d8 <malloc>
 80200be:	4602      	mov	r2, r0
 80200c0:	61f8      	str	r0, [r7, #28]
 80200c2:	b928      	cbnz	r0, 80200d0 <__pow5mult+0x40>
 80200c4:	4b1d      	ldr	r3, [pc, #116]	@ (802013c <__pow5mult+0xac>)
 80200c6:	481e      	ldr	r0, [pc, #120]	@ (8020140 <__pow5mult+0xb0>)
 80200c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80200cc:	f7fe ff2e 	bl	801ef2c <__assert_func>
 80200d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80200d4:	6004      	str	r4, [r0, #0]
 80200d6:	60c4      	str	r4, [r0, #12]
 80200d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80200dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80200e0:	b94c      	cbnz	r4, 80200f6 <__pow5mult+0x66>
 80200e2:	f240 2171 	movw	r1, #625	@ 0x271
 80200e6:	4638      	mov	r0, r7
 80200e8:	f7ff ff12 	bl	801ff10 <__i2b>
 80200ec:	2300      	movs	r3, #0
 80200ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80200f2:	4604      	mov	r4, r0
 80200f4:	6003      	str	r3, [r0, #0]
 80200f6:	f04f 0900 	mov.w	r9, #0
 80200fa:	07eb      	lsls	r3, r5, #31
 80200fc:	d50a      	bpl.n	8020114 <__pow5mult+0x84>
 80200fe:	4631      	mov	r1, r6
 8020100:	4622      	mov	r2, r4
 8020102:	4638      	mov	r0, r7
 8020104:	f7ff ff1a 	bl	801ff3c <__multiply>
 8020108:	4631      	mov	r1, r6
 802010a:	4680      	mov	r8, r0
 802010c:	4638      	mov	r0, r7
 802010e:	f7ff fe01 	bl	801fd14 <_Bfree>
 8020112:	4646      	mov	r6, r8
 8020114:	106d      	asrs	r5, r5, #1
 8020116:	d00b      	beq.n	8020130 <__pow5mult+0xa0>
 8020118:	6820      	ldr	r0, [r4, #0]
 802011a:	b938      	cbnz	r0, 802012c <__pow5mult+0x9c>
 802011c:	4622      	mov	r2, r4
 802011e:	4621      	mov	r1, r4
 8020120:	4638      	mov	r0, r7
 8020122:	f7ff ff0b 	bl	801ff3c <__multiply>
 8020126:	6020      	str	r0, [r4, #0]
 8020128:	f8c0 9000 	str.w	r9, [r0]
 802012c:	4604      	mov	r4, r0
 802012e:	e7e4      	b.n	80200fa <__pow5mult+0x6a>
 8020130:	4630      	mov	r0, r6
 8020132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020136:	bf00      	nop
 8020138:	080256f4 	.word	0x080256f4
 802013c:	08025576 	.word	0x08025576
 8020140:	08025699 	.word	0x08025699

08020144 <__lshift>:
 8020144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020148:	460c      	mov	r4, r1
 802014a:	6849      	ldr	r1, [r1, #4]
 802014c:	6923      	ldr	r3, [r4, #16]
 802014e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020152:	68a3      	ldr	r3, [r4, #8]
 8020154:	4607      	mov	r7, r0
 8020156:	4691      	mov	r9, r2
 8020158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802015c:	f108 0601 	add.w	r6, r8, #1
 8020160:	42b3      	cmp	r3, r6
 8020162:	db0b      	blt.n	802017c <__lshift+0x38>
 8020164:	4638      	mov	r0, r7
 8020166:	f7ff fd95 	bl	801fc94 <_Balloc>
 802016a:	4605      	mov	r5, r0
 802016c:	b948      	cbnz	r0, 8020182 <__lshift+0x3e>
 802016e:	4602      	mov	r2, r0
 8020170:	4b28      	ldr	r3, [pc, #160]	@ (8020214 <__lshift+0xd0>)
 8020172:	4829      	ldr	r0, [pc, #164]	@ (8020218 <__lshift+0xd4>)
 8020174:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020178:	f7fe fed8 	bl	801ef2c <__assert_func>
 802017c:	3101      	adds	r1, #1
 802017e:	005b      	lsls	r3, r3, #1
 8020180:	e7ee      	b.n	8020160 <__lshift+0x1c>
 8020182:	2300      	movs	r3, #0
 8020184:	f100 0114 	add.w	r1, r0, #20
 8020188:	f100 0210 	add.w	r2, r0, #16
 802018c:	4618      	mov	r0, r3
 802018e:	4553      	cmp	r3, sl
 8020190:	db33      	blt.n	80201fa <__lshift+0xb6>
 8020192:	6920      	ldr	r0, [r4, #16]
 8020194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020198:	f104 0314 	add.w	r3, r4, #20
 802019c:	f019 091f 	ands.w	r9, r9, #31
 80201a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80201a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80201a8:	d02b      	beq.n	8020202 <__lshift+0xbe>
 80201aa:	f1c9 0e20 	rsb	lr, r9, #32
 80201ae:	468a      	mov	sl, r1
 80201b0:	2200      	movs	r2, #0
 80201b2:	6818      	ldr	r0, [r3, #0]
 80201b4:	fa00 f009 	lsl.w	r0, r0, r9
 80201b8:	4310      	orrs	r0, r2
 80201ba:	f84a 0b04 	str.w	r0, [sl], #4
 80201be:	f853 2b04 	ldr.w	r2, [r3], #4
 80201c2:	459c      	cmp	ip, r3
 80201c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80201c8:	d8f3      	bhi.n	80201b2 <__lshift+0x6e>
 80201ca:	ebac 0304 	sub.w	r3, ip, r4
 80201ce:	3b15      	subs	r3, #21
 80201d0:	f023 0303 	bic.w	r3, r3, #3
 80201d4:	3304      	adds	r3, #4
 80201d6:	f104 0015 	add.w	r0, r4, #21
 80201da:	4584      	cmp	ip, r0
 80201dc:	bf38      	it	cc
 80201de:	2304      	movcc	r3, #4
 80201e0:	50ca      	str	r2, [r1, r3]
 80201e2:	b10a      	cbz	r2, 80201e8 <__lshift+0xa4>
 80201e4:	f108 0602 	add.w	r6, r8, #2
 80201e8:	3e01      	subs	r6, #1
 80201ea:	4638      	mov	r0, r7
 80201ec:	612e      	str	r6, [r5, #16]
 80201ee:	4621      	mov	r1, r4
 80201f0:	f7ff fd90 	bl	801fd14 <_Bfree>
 80201f4:	4628      	mov	r0, r5
 80201f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80201fe:	3301      	adds	r3, #1
 8020200:	e7c5      	b.n	802018e <__lshift+0x4a>
 8020202:	3904      	subs	r1, #4
 8020204:	f853 2b04 	ldr.w	r2, [r3], #4
 8020208:	f841 2f04 	str.w	r2, [r1, #4]!
 802020c:	459c      	cmp	ip, r3
 802020e:	d8f9      	bhi.n	8020204 <__lshift+0xc0>
 8020210:	e7ea      	b.n	80201e8 <__lshift+0xa4>
 8020212:	bf00      	nop
 8020214:	08025688 	.word	0x08025688
 8020218:	08025699 	.word	0x08025699

0802021c <__mcmp>:
 802021c:	690a      	ldr	r2, [r1, #16]
 802021e:	4603      	mov	r3, r0
 8020220:	6900      	ldr	r0, [r0, #16]
 8020222:	1a80      	subs	r0, r0, r2
 8020224:	b530      	push	{r4, r5, lr}
 8020226:	d10e      	bne.n	8020246 <__mcmp+0x2a>
 8020228:	3314      	adds	r3, #20
 802022a:	3114      	adds	r1, #20
 802022c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802023c:	4295      	cmp	r5, r2
 802023e:	d003      	beq.n	8020248 <__mcmp+0x2c>
 8020240:	d205      	bcs.n	802024e <__mcmp+0x32>
 8020242:	f04f 30ff 	mov.w	r0, #4294967295
 8020246:	bd30      	pop	{r4, r5, pc}
 8020248:	42a3      	cmp	r3, r4
 802024a:	d3f3      	bcc.n	8020234 <__mcmp+0x18>
 802024c:	e7fb      	b.n	8020246 <__mcmp+0x2a>
 802024e:	2001      	movs	r0, #1
 8020250:	e7f9      	b.n	8020246 <__mcmp+0x2a>
	...

08020254 <__mdiff>:
 8020254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020258:	4689      	mov	r9, r1
 802025a:	4606      	mov	r6, r0
 802025c:	4611      	mov	r1, r2
 802025e:	4648      	mov	r0, r9
 8020260:	4614      	mov	r4, r2
 8020262:	f7ff ffdb 	bl	802021c <__mcmp>
 8020266:	1e05      	subs	r5, r0, #0
 8020268:	d112      	bne.n	8020290 <__mdiff+0x3c>
 802026a:	4629      	mov	r1, r5
 802026c:	4630      	mov	r0, r6
 802026e:	f7ff fd11 	bl	801fc94 <_Balloc>
 8020272:	4602      	mov	r2, r0
 8020274:	b928      	cbnz	r0, 8020282 <__mdiff+0x2e>
 8020276:	4b3f      	ldr	r3, [pc, #252]	@ (8020374 <__mdiff+0x120>)
 8020278:	f240 2137 	movw	r1, #567	@ 0x237
 802027c:	483e      	ldr	r0, [pc, #248]	@ (8020378 <__mdiff+0x124>)
 802027e:	f7fe fe55 	bl	801ef2c <__assert_func>
 8020282:	2301      	movs	r3, #1
 8020284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020288:	4610      	mov	r0, r2
 802028a:	b003      	add	sp, #12
 802028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020290:	bfbc      	itt	lt
 8020292:	464b      	movlt	r3, r9
 8020294:	46a1      	movlt	r9, r4
 8020296:	4630      	mov	r0, r6
 8020298:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802029c:	bfba      	itte	lt
 802029e:	461c      	movlt	r4, r3
 80202a0:	2501      	movlt	r5, #1
 80202a2:	2500      	movge	r5, #0
 80202a4:	f7ff fcf6 	bl	801fc94 <_Balloc>
 80202a8:	4602      	mov	r2, r0
 80202aa:	b918      	cbnz	r0, 80202b4 <__mdiff+0x60>
 80202ac:	4b31      	ldr	r3, [pc, #196]	@ (8020374 <__mdiff+0x120>)
 80202ae:	f240 2145 	movw	r1, #581	@ 0x245
 80202b2:	e7e3      	b.n	802027c <__mdiff+0x28>
 80202b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80202b8:	6926      	ldr	r6, [r4, #16]
 80202ba:	60c5      	str	r5, [r0, #12]
 80202bc:	f109 0310 	add.w	r3, r9, #16
 80202c0:	f109 0514 	add.w	r5, r9, #20
 80202c4:	f104 0e14 	add.w	lr, r4, #20
 80202c8:	f100 0b14 	add.w	fp, r0, #20
 80202cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80202d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80202d4:	9301      	str	r3, [sp, #4]
 80202d6:	46d9      	mov	r9, fp
 80202d8:	f04f 0c00 	mov.w	ip, #0
 80202dc:	9b01      	ldr	r3, [sp, #4]
 80202de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80202e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80202e6:	9301      	str	r3, [sp, #4]
 80202e8:	fa1f f38a 	uxth.w	r3, sl
 80202ec:	4619      	mov	r1, r3
 80202ee:	b283      	uxth	r3, r0
 80202f0:	1acb      	subs	r3, r1, r3
 80202f2:	0c00      	lsrs	r0, r0, #16
 80202f4:	4463      	add	r3, ip
 80202f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80202fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80202fe:	b29b      	uxth	r3, r3
 8020300:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020304:	4576      	cmp	r6, lr
 8020306:	f849 3b04 	str.w	r3, [r9], #4
 802030a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802030e:	d8e5      	bhi.n	80202dc <__mdiff+0x88>
 8020310:	1b33      	subs	r3, r6, r4
 8020312:	3b15      	subs	r3, #21
 8020314:	f023 0303 	bic.w	r3, r3, #3
 8020318:	3415      	adds	r4, #21
 802031a:	3304      	adds	r3, #4
 802031c:	42a6      	cmp	r6, r4
 802031e:	bf38      	it	cc
 8020320:	2304      	movcc	r3, #4
 8020322:	441d      	add	r5, r3
 8020324:	445b      	add	r3, fp
 8020326:	461e      	mov	r6, r3
 8020328:	462c      	mov	r4, r5
 802032a:	4544      	cmp	r4, r8
 802032c:	d30e      	bcc.n	802034c <__mdiff+0xf8>
 802032e:	f108 0103 	add.w	r1, r8, #3
 8020332:	1b49      	subs	r1, r1, r5
 8020334:	f021 0103 	bic.w	r1, r1, #3
 8020338:	3d03      	subs	r5, #3
 802033a:	45a8      	cmp	r8, r5
 802033c:	bf38      	it	cc
 802033e:	2100      	movcc	r1, #0
 8020340:	440b      	add	r3, r1
 8020342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020346:	b191      	cbz	r1, 802036e <__mdiff+0x11a>
 8020348:	6117      	str	r7, [r2, #16]
 802034a:	e79d      	b.n	8020288 <__mdiff+0x34>
 802034c:	f854 1b04 	ldr.w	r1, [r4], #4
 8020350:	46e6      	mov	lr, ip
 8020352:	0c08      	lsrs	r0, r1, #16
 8020354:	fa1c fc81 	uxtah	ip, ip, r1
 8020358:	4471      	add	r1, lr
 802035a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802035e:	b289      	uxth	r1, r1
 8020360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020364:	f846 1b04 	str.w	r1, [r6], #4
 8020368:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802036c:	e7dd      	b.n	802032a <__mdiff+0xd6>
 802036e:	3f01      	subs	r7, #1
 8020370:	e7e7      	b.n	8020342 <__mdiff+0xee>
 8020372:	bf00      	nop
 8020374:	08025688 	.word	0x08025688
 8020378:	08025699 	.word	0x08025699

0802037c <__ulp>:
 802037c:	b082      	sub	sp, #8
 802037e:	ed8d 0b00 	vstr	d0, [sp]
 8020382:	9a01      	ldr	r2, [sp, #4]
 8020384:	4b0f      	ldr	r3, [pc, #60]	@ (80203c4 <__ulp+0x48>)
 8020386:	4013      	ands	r3, r2
 8020388:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802038c:	2b00      	cmp	r3, #0
 802038e:	dc08      	bgt.n	80203a2 <__ulp+0x26>
 8020390:	425b      	negs	r3, r3
 8020392:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8020396:	ea4f 5223 	mov.w	r2, r3, asr #20
 802039a:	da04      	bge.n	80203a6 <__ulp+0x2a>
 802039c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80203a0:	4113      	asrs	r3, r2
 80203a2:	2200      	movs	r2, #0
 80203a4:	e008      	b.n	80203b8 <__ulp+0x3c>
 80203a6:	f1a2 0314 	sub.w	r3, r2, #20
 80203aa:	2b1e      	cmp	r3, #30
 80203ac:	bfda      	itte	le
 80203ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80203b2:	40da      	lsrle	r2, r3
 80203b4:	2201      	movgt	r2, #1
 80203b6:	2300      	movs	r3, #0
 80203b8:	4619      	mov	r1, r3
 80203ba:	4610      	mov	r0, r2
 80203bc:	ec41 0b10 	vmov	d0, r0, r1
 80203c0:	b002      	add	sp, #8
 80203c2:	4770      	bx	lr
 80203c4:	7ff00000 	.word	0x7ff00000

080203c8 <__b2d>:
 80203c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203cc:	6906      	ldr	r6, [r0, #16]
 80203ce:	f100 0814 	add.w	r8, r0, #20
 80203d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80203d6:	1f37      	subs	r7, r6, #4
 80203d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80203dc:	4610      	mov	r0, r2
 80203de:	f7ff fd4b 	bl	801fe78 <__hi0bits>
 80203e2:	f1c0 0320 	rsb	r3, r0, #32
 80203e6:	280a      	cmp	r0, #10
 80203e8:	600b      	str	r3, [r1, #0]
 80203ea:	491b      	ldr	r1, [pc, #108]	@ (8020458 <__b2d+0x90>)
 80203ec:	dc15      	bgt.n	802041a <__b2d+0x52>
 80203ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80203f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80203f6:	45b8      	cmp	r8, r7
 80203f8:	ea43 0501 	orr.w	r5, r3, r1
 80203fc:	bf34      	ite	cc
 80203fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020402:	2300      	movcs	r3, #0
 8020404:	3015      	adds	r0, #21
 8020406:	fa02 f000 	lsl.w	r0, r2, r0
 802040a:	fa23 f30c 	lsr.w	r3, r3, ip
 802040e:	4303      	orrs	r3, r0
 8020410:	461c      	mov	r4, r3
 8020412:	ec45 4b10 	vmov	d0, r4, r5
 8020416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802041a:	45b8      	cmp	r8, r7
 802041c:	bf3a      	itte	cc
 802041e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020422:	f1a6 0708 	subcc.w	r7, r6, #8
 8020426:	2300      	movcs	r3, #0
 8020428:	380b      	subs	r0, #11
 802042a:	d012      	beq.n	8020452 <__b2d+0x8a>
 802042c:	f1c0 0120 	rsb	r1, r0, #32
 8020430:	fa23 f401 	lsr.w	r4, r3, r1
 8020434:	4082      	lsls	r2, r0
 8020436:	4322      	orrs	r2, r4
 8020438:	4547      	cmp	r7, r8
 802043a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802043e:	bf8c      	ite	hi
 8020440:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020444:	2200      	movls	r2, #0
 8020446:	4083      	lsls	r3, r0
 8020448:	40ca      	lsrs	r2, r1
 802044a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802044e:	4313      	orrs	r3, r2
 8020450:	e7de      	b.n	8020410 <__b2d+0x48>
 8020452:	ea42 0501 	orr.w	r5, r2, r1
 8020456:	e7db      	b.n	8020410 <__b2d+0x48>
 8020458:	3ff00000 	.word	0x3ff00000

0802045c <__d2b>:
 802045c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020460:	460f      	mov	r7, r1
 8020462:	2101      	movs	r1, #1
 8020464:	ec59 8b10 	vmov	r8, r9, d0
 8020468:	4616      	mov	r6, r2
 802046a:	f7ff fc13 	bl	801fc94 <_Balloc>
 802046e:	4604      	mov	r4, r0
 8020470:	b930      	cbnz	r0, 8020480 <__d2b+0x24>
 8020472:	4602      	mov	r2, r0
 8020474:	4b23      	ldr	r3, [pc, #140]	@ (8020504 <__d2b+0xa8>)
 8020476:	4824      	ldr	r0, [pc, #144]	@ (8020508 <__d2b+0xac>)
 8020478:	f240 310f 	movw	r1, #783	@ 0x30f
 802047c:	f7fe fd56 	bl	801ef2c <__assert_func>
 8020480:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020484:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020488:	b10d      	cbz	r5, 802048e <__d2b+0x32>
 802048a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802048e:	9301      	str	r3, [sp, #4]
 8020490:	f1b8 0300 	subs.w	r3, r8, #0
 8020494:	d023      	beq.n	80204de <__d2b+0x82>
 8020496:	4668      	mov	r0, sp
 8020498:	9300      	str	r3, [sp, #0]
 802049a:	f7ff fd0c 	bl	801feb6 <__lo0bits>
 802049e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80204a2:	b1d0      	cbz	r0, 80204da <__d2b+0x7e>
 80204a4:	f1c0 0320 	rsb	r3, r0, #32
 80204a8:	fa02 f303 	lsl.w	r3, r2, r3
 80204ac:	430b      	orrs	r3, r1
 80204ae:	40c2      	lsrs	r2, r0
 80204b0:	6163      	str	r3, [r4, #20]
 80204b2:	9201      	str	r2, [sp, #4]
 80204b4:	9b01      	ldr	r3, [sp, #4]
 80204b6:	61a3      	str	r3, [r4, #24]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	bf0c      	ite	eq
 80204bc:	2201      	moveq	r2, #1
 80204be:	2202      	movne	r2, #2
 80204c0:	6122      	str	r2, [r4, #16]
 80204c2:	b1a5      	cbz	r5, 80204ee <__d2b+0x92>
 80204c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80204c8:	4405      	add	r5, r0
 80204ca:	603d      	str	r5, [r7, #0]
 80204cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80204d0:	6030      	str	r0, [r6, #0]
 80204d2:	4620      	mov	r0, r4
 80204d4:	b003      	add	sp, #12
 80204d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80204da:	6161      	str	r1, [r4, #20]
 80204dc:	e7ea      	b.n	80204b4 <__d2b+0x58>
 80204de:	a801      	add	r0, sp, #4
 80204e0:	f7ff fce9 	bl	801feb6 <__lo0bits>
 80204e4:	9b01      	ldr	r3, [sp, #4]
 80204e6:	6163      	str	r3, [r4, #20]
 80204e8:	3020      	adds	r0, #32
 80204ea:	2201      	movs	r2, #1
 80204ec:	e7e8      	b.n	80204c0 <__d2b+0x64>
 80204ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80204f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80204f6:	6038      	str	r0, [r7, #0]
 80204f8:	6918      	ldr	r0, [r3, #16]
 80204fa:	f7ff fcbd 	bl	801fe78 <__hi0bits>
 80204fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020502:	e7e5      	b.n	80204d0 <__d2b+0x74>
 8020504:	08025688 	.word	0x08025688
 8020508:	08025699 	.word	0x08025699

0802050c <__ratio>:
 802050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020510:	b085      	sub	sp, #20
 8020512:	e9cd 1000 	strd	r1, r0, [sp]
 8020516:	a902      	add	r1, sp, #8
 8020518:	f7ff ff56 	bl	80203c8 <__b2d>
 802051c:	9800      	ldr	r0, [sp, #0]
 802051e:	a903      	add	r1, sp, #12
 8020520:	ec55 4b10 	vmov	r4, r5, d0
 8020524:	f7ff ff50 	bl	80203c8 <__b2d>
 8020528:	9b01      	ldr	r3, [sp, #4]
 802052a:	6919      	ldr	r1, [r3, #16]
 802052c:	9b00      	ldr	r3, [sp, #0]
 802052e:	691b      	ldr	r3, [r3, #16]
 8020530:	1ac9      	subs	r1, r1, r3
 8020532:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020536:	1a9b      	subs	r3, r3, r2
 8020538:	ec5b ab10 	vmov	sl, fp, d0
 802053c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020540:	2b00      	cmp	r3, #0
 8020542:	bfce      	itee	gt
 8020544:	462a      	movgt	r2, r5
 8020546:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802054a:	465a      	movle	r2, fp
 802054c:	462f      	mov	r7, r5
 802054e:	46d9      	mov	r9, fp
 8020550:	bfcc      	ite	gt
 8020552:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020556:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802055a:	464b      	mov	r3, r9
 802055c:	4652      	mov	r2, sl
 802055e:	4620      	mov	r0, r4
 8020560:	4639      	mov	r1, r7
 8020562:	f7e0 f98b 	bl	800087c <__aeabi_ddiv>
 8020566:	ec41 0b10 	vmov	d0, r0, r1
 802056a:	b005      	add	sp, #20
 802056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020570 <__copybits>:
 8020570:	3901      	subs	r1, #1
 8020572:	b570      	push	{r4, r5, r6, lr}
 8020574:	1149      	asrs	r1, r1, #5
 8020576:	6914      	ldr	r4, [r2, #16]
 8020578:	3101      	adds	r1, #1
 802057a:	f102 0314 	add.w	r3, r2, #20
 802057e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020582:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020586:	1f05      	subs	r5, r0, #4
 8020588:	42a3      	cmp	r3, r4
 802058a:	d30c      	bcc.n	80205a6 <__copybits+0x36>
 802058c:	1aa3      	subs	r3, r4, r2
 802058e:	3b11      	subs	r3, #17
 8020590:	f023 0303 	bic.w	r3, r3, #3
 8020594:	3211      	adds	r2, #17
 8020596:	42a2      	cmp	r2, r4
 8020598:	bf88      	it	hi
 802059a:	2300      	movhi	r3, #0
 802059c:	4418      	add	r0, r3
 802059e:	2300      	movs	r3, #0
 80205a0:	4288      	cmp	r0, r1
 80205a2:	d305      	bcc.n	80205b0 <__copybits+0x40>
 80205a4:	bd70      	pop	{r4, r5, r6, pc}
 80205a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80205aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80205ae:	e7eb      	b.n	8020588 <__copybits+0x18>
 80205b0:	f840 3b04 	str.w	r3, [r0], #4
 80205b4:	e7f4      	b.n	80205a0 <__copybits+0x30>

080205b6 <__any_on>:
 80205b6:	f100 0214 	add.w	r2, r0, #20
 80205ba:	6900      	ldr	r0, [r0, #16]
 80205bc:	114b      	asrs	r3, r1, #5
 80205be:	4298      	cmp	r0, r3
 80205c0:	b510      	push	{r4, lr}
 80205c2:	db11      	blt.n	80205e8 <__any_on+0x32>
 80205c4:	dd0a      	ble.n	80205dc <__any_on+0x26>
 80205c6:	f011 011f 	ands.w	r1, r1, #31
 80205ca:	d007      	beq.n	80205dc <__any_on+0x26>
 80205cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80205d0:	fa24 f001 	lsr.w	r0, r4, r1
 80205d4:	fa00 f101 	lsl.w	r1, r0, r1
 80205d8:	428c      	cmp	r4, r1
 80205da:	d10b      	bne.n	80205f4 <__any_on+0x3e>
 80205dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80205e0:	4293      	cmp	r3, r2
 80205e2:	d803      	bhi.n	80205ec <__any_on+0x36>
 80205e4:	2000      	movs	r0, #0
 80205e6:	bd10      	pop	{r4, pc}
 80205e8:	4603      	mov	r3, r0
 80205ea:	e7f7      	b.n	80205dc <__any_on+0x26>
 80205ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80205f0:	2900      	cmp	r1, #0
 80205f2:	d0f5      	beq.n	80205e0 <__any_on+0x2a>
 80205f4:	2001      	movs	r0, #1
 80205f6:	e7f6      	b.n	80205e6 <__any_on+0x30>

080205f8 <sulp>:
 80205f8:	b570      	push	{r4, r5, r6, lr}
 80205fa:	4604      	mov	r4, r0
 80205fc:	460d      	mov	r5, r1
 80205fe:	ec45 4b10 	vmov	d0, r4, r5
 8020602:	4616      	mov	r6, r2
 8020604:	f7ff feba 	bl	802037c <__ulp>
 8020608:	ec51 0b10 	vmov	r0, r1, d0
 802060c:	b17e      	cbz	r6, 802062e <sulp+0x36>
 802060e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020612:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020616:	2b00      	cmp	r3, #0
 8020618:	dd09      	ble.n	802062e <sulp+0x36>
 802061a:	051b      	lsls	r3, r3, #20
 802061c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020620:	2400      	movs	r4, #0
 8020622:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8020626:	4622      	mov	r2, r4
 8020628:	462b      	mov	r3, r5
 802062a:	f7df fffd 	bl	8000628 <__aeabi_dmul>
 802062e:	ec41 0b10 	vmov	d0, r0, r1
 8020632:	bd70      	pop	{r4, r5, r6, pc}
 8020634:	0000      	movs	r0, r0
	...

08020638 <_strtod_l>:
 8020638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802063c:	b09f      	sub	sp, #124	@ 0x7c
 802063e:	460c      	mov	r4, r1
 8020640:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020642:	2200      	movs	r2, #0
 8020644:	921a      	str	r2, [sp, #104]	@ 0x68
 8020646:	9005      	str	r0, [sp, #20]
 8020648:	f04f 0a00 	mov.w	sl, #0
 802064c:	f04f 0b00 	mov.w	fp, #0
 8020650:	460a      	mov	r2, r1
 8020652:	9219      	str	r2, [sp, #100]	@ 0x64
 8020654:	7811      	ldrb	r1, [r2, #0]
 8020656:	292b      	cmp	r1, #43	@ 0x2b
 8020658:	d04a      	beq.n	80206f0 <_strtod_l+0xb8>
 802065a:	d838      	bhi.n	80206ce <_strtod_l+0x96>
 802065c:	290d      	cmp	r1, #13
 802065e:	d832      	bhi.n	80206c6 <_strtod_l+0x8e>
 8020660:	2908      	cmp	r1, #8
 8020662:	d832      	bhi.n	80206ca <_strtod_l+0x92>
 8020664:	2900      	cmp	r1, #0
 8020666:	d03b      	beq.n	80206e0 <_strtod_l+0xa8>
 8020668:	2200      	movs	r2, #0
 802066a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802066c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802066e:	782a      	ldrb	r2, [r5, #0]
 8020670:	2a30      	cmp	r2, #48	@ 0x30
 8020672:	f040 80b3 	bne.w	80207dc <_strtod_l+0x1a4>
 8020676:	786a      	ldrb	r2, [r5, #1]
 8020678:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802067c:	2a58      	cmp	r2, #88	@ 0x58
 802067e:	d16e      	bne.n	802075e <_strtod_l+0x126>
 8020680:	9302      	str	r3, [sp, #8]
 8020682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020684:	9301      	str	r3, [sp, #4]
 8020686:	ab1a      	add	r3, sp, #104	@ 0x68
 8020688:	9300      	str	r3, [sp, #0]
 802068a:	4a8e      	ldr	r2, [pc, #568]	@ (80208c4 <_strtod_l+0x28c>)
 802068c:	9805      	ldr	r0, [sp, #20]
 802068e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020690:	a919      	add	r1, sp, #100	@ 0x64
 8020692:	f001 fa33 	bl	8021afc <__gethex>
 8020696:	f010 060f 	ands.w	r6, r0, #15
 802069a:	4604      	mov	r4, r0
 802069c:	d005      	beq.n	80206aa <_strtod_l+0x72>
 802069e:	2e06      	cmp	r6, #6
 80206a0:	d128      	bne.n	80206f4 <_strtod_l+0xbc>
 80206a2:	3501      	adds	r5, #1
 80206a4:	2300      	movs	r3, #0
 80206a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80206a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80206aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	f040 858e 	bne.w	80211ce <_strtod_l+0xb96>
 80206b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206b4:	b1cb      	cbz	r3, 80206ea <_strtod_l+0xb2>
 80206b6:	4652      	mov	r2, sl
 80206b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80206bc:	ec43 2b10 	vmov	d0, r2, r3
 80206c0:	b01f      	add	sp, #124	@ 0x7c
 80206c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206c6:	2920      	cmp	r1, #32
 80206c8:	d1ce      	bne.n	8020668 <_strtod_l+0x30>
 80206ca:	3201      	adds	r2, #1
 80206cc:	e7c1      	b.n	8020652 <_strtod_l+0x1a>
 80206ce:	292d      	cmp	r1, #45	@ 0x2d
 80206d0:	d1ca      	bne.n	8020668 <_strtod_l+0x30>
 80206d2:	2101      	movs	r1, #1
 80206d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80206d6:	1c51      	adds	r1, r2, #1
 80206d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80206da:	7852      	ldrb	r2, [r2, #1]
 80206dc:	2a00      	cmp	r2, #0
 80206de:	d1c5      	bne.n	802066c <_strtod_l+0x34>
 80206e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80206e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	f040 8570 	bne.w	80211ca <_strtod_l+0xb92>
 80206ea:	4652      	mov	r2, sl
 80206ec:	465b      	mov	r3, fp
 80206ee:	e7e5      	b.n	80206bc <_strtod_l+0x84>
 80206f0:	2100      	movs	r1, #0
 80206f2:	e7ef      	b.n	80206d4 <_strtod_l+0x9c>
 80206f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80206f6:	b13a      	cbz	r2, 8020708 <_strtod_l+0xd0>
 80206f8:	2135      	movs	r1, #53	@ 0x35
 80206fa:	a81c      	add	r0, sp, #112	@ 0x70
 80206fc:	f7ff ff38 	bl	8020570 <__copybits>
 8020700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020702:	9805      	ldr	r0, [sp, #20]
 8020704:	f7ff fb06 	bl	801fd14 <_Bfree>
 8020708:	3e01      	subs	r6, #1
 802070a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802070c:	2e04      	cmp	r6, #4
 802070e:	d806      	bhi.n	802071e <_strtod_l+0xe6>
 8020710:	e8df f006 	tbb	[pc, r6]
 8020714:	201d0314 	.word	0x201d0314
 8020718:	14          	.byte	0x14
 8020719:	00          	.byte	0x00
 802071a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802071e:	05e1      	lsls	r1, r4, #23
 8020720:	bf48      	it	mi
 8020722:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8020726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802072a:	0d1b      	lsrs	r3, r3, #20
 802072c:	051b      	lsls	r3, r3, #20
 802072e:	2b00      	cmp	r3, #0
 8020730:	d1bb      	bne.n	80206aa <_strtod_l+0x72>
 8020732:	f7fe fbb1 	bl	801ee98 <__errno>
 8020736:	2322      	movs	r3, #34	@ 0x22
 8020738:	6003      	str	r3, [r0, #0]
 802073a:	e7b6      	b.n	80206aa <_strtod_l+0x72>
 802073c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020740:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8020744:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020748:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802074c:	e7e7      	b.n	802071e <_strtod_l+0xe6>
 802074e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80208cc <_strtod_l+0x294>
 8020752:	e7e4      	b.n	802071e <_strtod_l+0xe6>
 8020754:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020758:	f04f 3aff 	mov.w	sl, #4294967295
 802075c:	e7df      	b.n	802071e <_strtod_l+0xe6>
 802075e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020760:	1c5a      	adds	r2, r3, #1
 8020762:	9219      	str	r2, [sp, #100]	@ 0x64
 8020764:	785b      	ldrb	r3, [r3, #1]
 8020766:	2b30      	cmp	r3, #48	@ 0x30
 8020768:	d0f9      	beq.n	802075e <_strtod_l+0x126>
 802076a:	2b00      	cmp	r3, #0
 802076c:	d09d      	beq.n	80206aa <_strtod_l+0x72>
 802076e:	2301      	movs	r3, #1
 8020770:	9309      	str	r3, [sp, #36]	@ 0x24
 8020772:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020774:	930c      	str	r3, [sp, #48]	@ 0x30
 8020776:	2300      	movs	r3, #0
 8020778:	9308      	str	r3, [sp, #32]
 802077a:	930a      	str	r3, [sp, #40]	@ 0x28
 802077c:	461f      	mov	r7, r3
 802077e:	220a      	movs	r2, #10
 8020780:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020782:	7805      	ldrb	r5, [r0, #0]
 8020784:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020788:	b2d9      	uxtb	r1, r3
 802078a:	2909      	cmp	r1, #9
 802078c:	d928      	bls.n	80207e0 <_strtod_l+0x1a8>
 802078e:	494e      	ldr	r1, [pc, #312]	@ (80208c8 <_strtod_l+0x290>)
 8020790:	2201      	movs	r2, #1
 8020792:	f001 f8f5 	bl	8021980 <strncmp>
 8020796:	2800      	cmp	r0, #0
 8020798:	d032      	beq.n	8020800 <_strtod_l+0x1c8>
 802079a:	2000      	movs	r0, #0
 802079c:	462a      	mov	r2, r5
 802079e:	4681      	mov	r9, r0
 80207a0:	463d      	mov	r5, r7
 80207a2:	4603      	mov	r3, r0
 80207a4:	2a65      	cmp	r2, #101	@ 0x65
 80207a6:	d001      	beq.n	80207ac <_strtod_l+0x174>
 80207a8:	2a45      	cmp	r2, #69	@ 0x45
 80207aa:	d114      	bne.n	80207d6 <_strtod_l+0x19e>
 80207ac:	b91d      	cbnz	r5, 80207b6 <_strtod_l+0x17e>
 80207ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207b0:	4302      	orrs	r2, r0
 80207b2:	d095      	beq.n	80206e0 <_strtod_l+0xa8>
 80207b4:	2500      	movs	r5, #0
 80207b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80207b8:	1c62      	adds	r2, r4, #1
 80207ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80207bc:	7862      	ldrb	r2, [r4, #1]
 80207be:	2a2b      	cmp	r2, #43	@ 0x2b
 80207c0:	d077      	beq.n	80208b2 <_strtod_l+0x27a>
 80207c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80207c4:	d07b      	beq.n	80208be <_strtod_l+0x286>
 80207c6:	f04f 0c00 	mov.w	ip, #0
 80207ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80207ce:	2909      	cmp	r1, #9
 80207d0:	f240 8082 	bls.w	80208d8 <_strtod_l+0x2a0>
 80207d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80207d6:	f04f 0800 	mov.w	r8, #0
 80207da:	e0a2      	b.n	8020922 <_strtod_l+0x2ea>
 80207dc:	2300      	movs	r3, #0
 80207de:	e7c7      	b.n	8020770 <_strtod_l+0x138>
 80207e0:	2f08      	cmp	r7, #8
 80207e2:	bfd5      	itete	le
 80207e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80207e6:	9908      	ldrgt	r1, [sp, #32]
 80207e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80207ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80207f0:	f100 0001 	add.w	r0, r0, #1
 80207f4:	bfd4      	ite	le
 80207f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80207f8:	9308      	strgt	r3, [sp, #32]
 80207fa:	3701      	adds	r7, #1
 80207fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80207fe:	e7bf      	b.n	8020780 <_strtod_l+0x148>
 8020800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020802:	1c5a      	adds	r2, r3, #1
 8020804:	9219      	str	r2, [sp, #100]	@ 0x64
 8020806:	785a      	ldrb	r2, [r3, #1]
 8020808:	b37f      	cbz	r7, 802086a <_strtod_l+0x232>
 802080a:	4681      	mov	r9, r0
 802080c:	463d      	mov	r5, r7
 802080e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8020812:	2b09      	cmp	r3, #9
 8020814:	d912      	bls.n	802083c <_strtod_l+0x204>
 8020816:	2301      	movs	r3, #1
 8020818:	e7c4      	b.n	80207a4 <_strtod_l+0x16c>
 802081a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802081c:	1c5a      	adds	r2, r3, #1
 802081e:	9219      	str	r2, [sp, #100]	@ 0x64
 8020820:	785a      	ldrb	r2, [r3, #1]
 8020822:	3001      	adds	r0, #1
 8020824:	2a30      	cmp	r2, #48	@ 0x30
 8020826:	d0f8      	beq.n	802081a <_strtod_l+0x1e2>
 8020828:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802082c:	2b08      	cmp	r3, #8
 802082e:	f200 84d3 	bhi.w	80211d8 <_strtod_l+0xba0>
 8020832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020834:	930c      	str	r3, [sp, #48]	@ 0x30
 8020836:	4681      	mov	r9, r0
 8020838:	2000      	movs	r0, #0
 802083a:	4605      	mov	r5, r0
 802083c:	3a30      	subs	r2, #48	@ 0x30
 802083e:	f100 0301 	add.w	r3, r0, #1
 8020842:	d02a      	beq.n	802089a <_strtod_l+0x262>
 8020844:	4499      	add	r9, r3
 8020846:	eb00 0c05 	add.w	ip, r0, r5
 802084a:	462b      	mov	r3, r5
 802084c:	210a      	movs	r1, #10
 802084e:	4563      	cmp	r3, ip
 8020850:	d10d      	bne.n	802086e <_strtod_l+0x236>
 8020852:	1c69      	adds	r1, r5, #1
 8020854:	4401      	add	r1, r0
 8020856:	4428      	add	r0, r5
 8020858:	2808      	cmp	r0, #8
 802085a:	dc16      	bgt.n	802088a <_strtod_l+0x252>
 802085c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802085e:	230a      	movs	r3, #10
 8020860:	fb03 2300 	mla	r3, r3, r0, r2
 8020864:	930a      	str	r3, [sp, #40]	@ 0x28
 8020866:	2300      	movs	r3, #0
 8020868:	e018      	b.n	802089c <_strtod_l+0x264>
 802086a:	4638      	mov	r0, r7
 802086c:	e7da      	b.n	8020824 <_strtod_l+0x1ec>
 802086e:	2b08      	cmp	r3, #8
 8020870:	f103 0301 	add.w	r3, r3, #1
 8020874:	dc03      	bgt.n	802087e <_strtod_l+0x246>
 8020876:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020878:	434e      	muls	r6, r1
 802087a:	960a      	str	r6, [sp, #40]	@ 0x28
 802087c:	e7e7      	b.n	802084e <_strtod_l+0x216>
 802087e:	2b10      	cmp	r3, #16
 8020880:	bfde      	ittt	le
 8020882:	9e08      	ldrle	r6, [sp, #32]
 8020884:	434e      	mulle	r6, r1
 8020886:	9608      	strle	r6, [sp, #32]
 8020888:	e7e1      	b.n	802084e <_strtod_l+0x216>
 802088a:	280f      	cmp	r0, #15
 802088c:	dceb      	bgt.n	8020866 <_strtod_l+0x22e>
 802088e:	9808      	ldr	r0, [sp, #32]
 8020890:	230a      	movs	r3, #10
 8020892:	fb03 2300 	mla	r3, r3, r0, r2
 8020896:	9308      	str	r3, [sp, #32]
 8020898:	e7e5      	b.n	8020866 <_strtod_l+0x22e>
 802089a:	4629      	mov	r1, r5
 802089c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802089e:	1c50      	adds	r0, r2, #1
 80208a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80208a2:	7852      	ldrb	r2, [r2, #1]
 80208a4:	4618      	mov	r0, r3
 80208a6:	460d      	mov	r5, r1
 80208a8:	e7b1      	b.n	802080e <_strtod_l+0x1d6>
 80208aa:	f04f 0900 	mov.w	r9, #0
 80208ae:	2301      	movs	r3, #1
 80208b0:	e77d      	b.n	80207ae <_strtod_l+0x176>
 80208b2:	f04f 0c00 	mov.w	ip, #0
 80208b6:	1ca2      	adds	r2, r4, #2
 80208b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80208ba:	78a2      	ldrb	r2, [r4, #2]
 80208bc:	e785      	b.n	80207ca <_strtod_l+0x192>
 80208be:	f04f 0c01 	mov.w	ip, #1
 80208c2:	e7f8      	b.n	80208b6 <_strtod_l+0x27e>
 80208c4:	08025808 	.word	0x08025808
 80208c8:	080257f0 	.word	0x080257f0
 80208cc:	7ff00000 	.word	0x7ff00000
 80208d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80208d2:	1c51      	adds	r1, r2, #1
 80208d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80208d6:	7852      	ldrb	r2, [r2, #1]
 80208d8:	2a30      	cmp	r2, #48	@ 0x30
 80208da:	d0f9      	beq.n	80208d0 <_strtod_l+0x298>
 80208dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80208e0:	2908      	cmp	r1, #8
 80208e2:	f63f af78 	bhi.w	80207d6 <_strtod_l+0x19e>
 80208e6:	3a30      	subs	r2, #48	@ 0x30
 80208e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80208ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80208ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80208ee:	f04f 080a 	mov.w	r8, #10
 80208f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80208f4:	1c56      	adds	r6, r2, #1
 80208f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80208f8:	7852      	ldrb	r2, [r2, #1]
 80208fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80208fe:	f1be 0f09 	cmp.w	lr, #9
 8020902:	d939      	bls.n	8020978 <_strtod_l+0x340>
 8020904:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020906:	1a76      	subs	r6, r6, r1
 8020908:	2e08      	cmp	r6, #8
 802090a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802090e:	dc03      	bgt.n	8020918 <_strtod_l+0x2e0>
 8020910:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020912:	4588      	cmp	r8, r1
 8020914:	bfa8      	it	ge
 8020916:	4688      	movge	r8, r1
 8020918:	f1bc 0f00 	cmp.w	ip, #0
 802091c:	d001      	beq.n	8020922 <_strtod_l+0x2ea>
 802091e:	f1c8 0800 	rsb	r8, r8, #0
 8020922:	2d00      	cmp	r5, #0
 8020924:	d14e      	bne.n	80209c4 <_strtod_l+0x38c>
 8020926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020928:	4308      	orrs	r0, r1
 802092a:	f47f aebe 	bne.w	80206aa <_strtod_l+0x72>
 802092e:	2b00      	cmp	r3, #0
 8020930:	f47f aed6 	bne.w	80206e0 <_strtod_l+0xa8>
 8020934:	2a69      	cmp	r2, #105	@ 0x69
 8020936:	d028      	beq.n	802098a <_strtod_l+0x352>
 8020938:	dc25      	bgt.n	8020986 <_strtod_l+0x34e>
 802093a:	2a49      	cmp	r2, #73	@ 0x49
 802093c:	d025      	beq.n	802098a <_strtod_l+0x352>
 802093e:	2a4e      	cmp	r2, #78	@ 0x4e
 8020940:	f47f aece 	bne.w	80206e0 <_strtod_l+0xa8>
 8020944:	499b      	ldr	r1, [pc, #620]	@ (8020bb4 <_strtod_l+0x57c>)
 8020946:	a819      	add	r0, sp, #100	@ 0x64
 8020948:	f001 fafa 	bl	8021f40 <__match>
 802094c:	2800      	cmp	r0, #0
 802094e:	f43f aec7 	beq.w	80206e0 <_strtod_l+0xa8>
 8020952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020954:	781b      	ldrb	r3, [r3, #0]
 8020956:	2b28      	cmp	r3, #40	@ 0x28
 8020958:	d12e      	bne.n	80209b8 <_strtod_l+0x380>
 802095a:	4997      	ldr	r1, [pc, #604]	@ (8020bb8 <_strtod_l+0x580>)
 802095c:	aa1c      	add	r2, sp, #112	@ 0x70
 802095e:	a819      	add	r0, sp, #100	@ 0x64
 8020960:	f001 fb02 	bl	8021f68 <__hexnan>
 8020964:	2805      	cmp	r0, #5
 8020966:	d127      	bne.n	80209b8 <_strtod_l+0x380>
 8020968:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802096a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802096e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8020972:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8020976:	e698      	b.n	80206aa <_strtod_l+0x72>
 8020978:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802097a:	fb08 2101 	mla	r1, r8, r1, r2
 802097e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8020982:	920e      	str	r2, [sp, #56]	@ 0x38
 8020984:	e7b5      	b.n	80208f2 <_strtod_l+0x2ba>
 8020986:	2a6e      	cmp	r2, #110	@ 0x6e
 8020988:	e7da      	b.n	8020940 <_strtod_l+0x308>
 802098a:	498c      	ldr	r1, [pc, #560]	@ (8020bbc <_strtod_l+0x584>)
 802098c:	a819      	add	r0, sp, #100	@ 0x64
 802098e:	f001 fad7 	bl	8021f40 <__match>
 8020992:	2800      	cmp	r0, #0
 8020994:	f43f aea4 	beq.w	80206e0 <_strtod_l+0xa8>
 8020998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802099a:	4989      	ldr	r1, [pc, #548]	@ (8020bc0 <_strtod_l+0x588>)
 802099c:	3b01      	subs	r3, #1
 802099e:	a819      	add	r0, sp, #100	@ 0x64
 80209a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80209a2:	f001 facd 	bl	8021f40 <__match>
 80209a6:	b910      	cbnz	r0, 80209ae <_strtod_l+0x376>
 80209a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80209aa:	3301      	adds	r3, #1
 80209ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80209ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020bd0 <_strtod_l+0x598>
 80209b2:	f04f 0a00 	mov.w	sl, #0
 80209b6:	e678      	b.n	80206aa <_strtod_l+0x72>
 80209b8:	4882      	ldr	r0, [pc, #520]	@ (8020bc4 <_strtod_l+0x58c>)
 80209ba:	f001 f815 	bl	80219e8 <nan>
 80209be:	ec5b ab10 	vmov	sl, fp, d0
 80209c2:	e672      	b.n	80206aa <_strtod_l+0x72>
 80209c4:	eba8 0309 	sub.w	r3, r8, r9
 80209c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80209cc:	2f00      	cmp	r7, #0
 80209ce:	bf08      	it	eq
 80209d0:	462f      	moveq	r7, r5
 80209d2:	2d10      	cmp	r5, #16
 80209d4:	462c      	mov	r4, r5
 80209d6:	bfa8      	it	ge
 80209d8:	2410      	movge	r4, #16
 80209da:	f7df fdab 	bl	8000534 <__aeabi_ui2d>
 80209de:	2d09      	cmp	r5, #9
 80209e0:	4682      	mov	sl, r0
 80209e2:	468b      	mov	fp, r1
 80209e4:	dc13      	bgt.n	8020a0e <_strtod_l+0x3d6>
 80209e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	f43f ae5e 	beq.w	80206aa <_strtod_l+0x72>
 80209ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209f0:	dd78      	ble.n	8020ae4 <_strtod_l+0x4ac>
 80209f2:	2b16      	cmp	r3, #22
 80209f4:	dc5f      	bgt.n	8020ab6 <_strtod_l+0x47e>
 80209f6:	4974      	ldr	r1, [pc, #464]	@ (8020bc8 <_strtod_l+0x590>)
 80209f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80209fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a00:	4652      	mov	r2, sl
 8020a02:	465b      	mov	r3, fp
 8020a04:	f7df fe10 	bl	8000628 <__aeabi_dmul>
 8020a08:	4682      	mov	sl, r0
 8020a0a:	468b      	mov	fp, r1
 8020a0c:	e64d      	b.n	80206aa <_strtod_l+0x72>
 8020a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8020bc8 <_strtod_l+0x590>)
 8020a10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020a14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020a18:	f7df fe06 	bl	8000628 <__aeabi_dmul>
 8020a1c:	4682      	mov	sl, r0
 8020a1e:	9808      	ldr	r0, [sp, #32]
 8020a20:	468b      	mov	fp, r1
 8020a22:	f7df fd87 	bl	8000534 <__aeabi_ui2d>
 8020a26:	4602      	mov	r2, r0
 8020a28:	460b      	mov	r3, r1
 8020a2a:	4650      	mov	r0, sl
 8020a2c:	4659      	mov	r1, fp
 8020a2e:	f7df fc45 	bl	80002bc <__adddf3>
 8020a32:	2d0f      	cmp	r5, #15
 8020a34:	4682      	mov	sl, r0
 8020a36:	468b      	mov	fp, r1
 8020a38:	ddd5      	ble.n	80209e6 <_strtod_l+0x3ae>
 8020a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a3c:	1b2c      	subs	r4, r5, r4
 8020a3e:	441c      	add	r4, r3
 8020a40:	2c00      	cmp	r4, #0
 8020a42:	f340 8096 	ble.w	8020b72 <_strtod_l+0x53a>
 8020a46:	f014 030f 	ands.w	r3, r4, #15
 8020a4a:	d00a      	beq.n	8020a62 <_strtod_l+0x42a>
 8020a4c:	495e      	ldr	r1, [pc, #376]	@ (8020bc8 <_strtod_l+0x590>)
 8020a4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020a52:	4652      	mov	r2, sl
 8020a54:	465b      	mov	r3, fp
 8020a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a5a:	f7df fde5 	bl	8000628 <__aeabi_dmul>
 8020a5e:	4682      	mov	sl, r0
 8020a60:	468b      	mov	fp, r1
 8020a62:	f034 040f 	bics.w	r4, r4, #15
 8020a66:	d073      	beq.n	8020b50 <_strtod_l+0x518>
 8020a68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8020a6c:	dd48      	ble.n	8020b00 <_strtod_l+0x4c8>
 8020a6e:	2400      	movs	r4, #0
 8020a70:	46a0      	mov	r8, r4
 8020a72:	940a      	str	r4, [sp, #40]	@ 0x28
 8020a74:	46a1      	mov	r9, r4
 8020a76:	9a05      	ldr	r2, [sp, #20]
 8020a78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020bd0 <_strtod_l+0x598>
 8020a7c:	2322      	movs	r3, #34	@ 0x22
 8020a7e:	6013      	str	r3, [r2, #0]
 8020a80:	f04f 0a00 	mov.w	sl, #0
 8020a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	f43f ae0f 	beq.w	80206aa <_strtod_l+0x72>
 8020a8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020a8e:	9805      	ldr	r0, [sp, #20]
 8020a90:	f7ff f940 	bl	801fd14 <_Bfree>
 8020a94:	9805      	ldr	r0, [sp, #20]
 8020a96:	4649      	mov	r1, r9
 8020a98:	f7ff f93c 	bl	801fd14 <_Bfree>
 8020a9c:	9805      	ldr	r0, [sp, #20]
 8020a9e:	4641      	mov	r1, r8
 8020aa0:	f7ff f938 	bl	801fd14 <_Bfree>
 8020aa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020aa6:	9805      	ldr	r0, [sp, #20]
 8020aa8:	f7ff f934 	bl	801fd14 <_Bfree>
 8020aac:	9805      	ldr	r0, [sp, #20]
 8020aae:	4621      	mov	r1, r4
 8020ab0:	f7ff f930 	bl	801fd14 <_Bfree>
 8020ab4:	e5f9      	b.n	80206aa <_strtod_l+0x72>
 8020ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ab8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020abc:	4293      	cmp	r3, r2
 8020abe:	dbbc      	blt.n	8020a3a <_strtod_l+0x402>
 8020ac0:	4c41      	ldr	r4, [pc, #260]	@ (8020bc8 <_strtod_l+0x590>)
 8020ac2:	f1c5 050f 	rsb	r5, r5, #15
 8020ac6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020aca:	4652      	mov	r2, sl
 8020acc:	465b      	mov	r3, fp
 8020ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ad2:	f7df fda9 	bl	8000628 <__aeabi_dmul>
 8020ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ad8:	1b5d      	subs	r5, r3, r5
 8020ada:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020ade:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020ae2:	e78f      	b.n	8020a04 <_strtod_l+0x3cc>
 8020ae4:	3316      	adds	r3, #22
 8020ae6:	dba8      	blt.n	8020a3a <_strtod_l+0x402>
 8020ae8:	4b37      	ldr	r3, [pc, #220]	@ (8020bc8 <_strtod_l+0x590>)
 8020aea:	eba9 0808 	sub.w	r8, r9, r8
 8020aee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020af2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020af6:	4650      	mov	r0, sl
 8020af8:	4659      	mov	r1, fp
 8020afa:	f7df febf 	bl	800087c <__aeabi_ddiv>
 8020afe:	e783      	b.n	8020a08 <_strtod_l+0x3d0>
 8020b00:	4b32      	ldr	r3, [pc, #200]	@ (8020bcc <_strtod_l+0x594>)
 8020b02:	9308      	str	r3, [sp, #32]
 8020b04:	2300      	movs	r3, #0
 8020b06:	1124      	asrs	r4, r4, #4
 8020b08:	4650      	mov	r0, sl
 8020b0a:	4659      	mov	r1, fp
 8020b0c:	461e      	mov	r6, r3
 8020b0e:	2c01      	cmp	r4, #1
 8020b10:	dc21      	bgt.n	8020b56 <_strtod_l+0x51e>
 8020b12:	b10b      	cbz	r3, 8020b18 <_strtod_l+0x4e0>
 8020b14:	4682      	mov	sl, r0
 8020b16:	468b      	mov	fp, r1
 8020b18:	492c      	ldr	r1, [pc, #176]	@ (8020bcc <_strtod_l+0x594>)
 8020b1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020b1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020b22:	4652      	mov	r2, sl
 8020b24:	465b      	mov	r3, fp
 8020b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b2a:	f7df fd7d 	bl	8000628 <__aeabi_dmul>
 8020b2e:	4b28      	ldr	r3, [pc, #160]	@ (8020bd0 <_strtod_l+0x598>)
 8020b30:	460a      	mov	r2, r1
 8020b32:	400b      	ands	r3, r1
 8020b34:	4927      	ldr	r1, [pc, #156]	@ (8020bd4 <_strtod_l+0x59c>)
 8020b36:	428b      	cmp	r3, r1
 8020b38:	4682      	mov	sl, r0
 8020b3a:	d898      	bhi.n	8020a6e <_strtod_l+0x436>
 8020b3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020b40:	428b      	cmp	r3, r1
 8020b42:	bf86      	itte	hi
 8020b44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020bd8 <_strtod_l+0x5a0>
 8020b48:	f04f 3aff 	movhi.w	sl, #4294967295
 8020b4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020b50:	2300      	movs	r3, #0
 8020b52:	9308      	str	r3, [sp, #32]
 8020b54:	e07a      	b.n	8020c4c <_strtod_l+0x614>
 8020b56:	07e2      	lsls	r2, r4, #31
 8020b58:	d505      	bpl.n	8020b66 <_strtod_l+0x52e>
 8020b5a:	9b08      	ldr	r3, [sp, #32]
 8020b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b60:	f7df fd62 	bl	8000628 <__aeabi_dmul>
 8020b64:	2301      	movs	r3, #1
 8020b66:	9a08      	ldr	r2, [sp, #32]
 8020b68:	3208      	adds	r2, #8
 8020b6a:	3601      	adds	r6, #1
 8020b6c:	1064      	asrs	r4, r4, #1
 8020b6e:	9208      	str	r2, [sp, #32]
 8020b70:	e7cd      	b.n	8020b0e <_strtod_l+0x4d6>
 8020b72:	d0ed      	beq.n	8020b50 <_strtod_l+0x518>
 8020b74:	4264      	negs	r4, r4
 8020b76:	f014 020f 	ands.w	r2, r4, #15
 8020b7a:	d00a      	beq.n	8020b92 <_strtod_l+0x55a>
 8020b7c:	4b12      	ldr	r3, [pc, #72]	@ (8020bc8 <_strtod_l+0x590>)
 8020b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020b82:	4650      	mov	r0, sl
 8020b84:	4659      	mov	r1, fp
 8020b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b8a:	f7df fe77 	bl	800087c <__aeabi_ddiv>
 8020b8e:	4682      	mov	sl, r0
 8020b90:	468b      	mov	fp, r1
 8020b92:	1124      	asrs	r4, r4, #4
 8020b94:	d0dc      	beq.n	8020b50 <_strtod_l+0x518>
 8020b96:	2c1f      	cmp	r4, #31
 8020b98:	dd20      	ble.n	8020bdc <_strtod_l+0x5a4>
 8020b9a:	2400      	movs	r4, #0
 8020b9c:	46a0      	mov	r8, r4
 8020b9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020ba0:	46a1      	mov	r9, r4
 8020ba2:	9a05      	ldr	r2, [sp, #20]
 8020ba4:	2322      	movs	r3, #34	@ 0x22
 8020ba6:	f04f 0a00 	mov.w	sl, #0
 8020baa:	f04f 0b00 	mov.w	fp, #0
 8020bae:	6013      	str	r3, [r2, #0]
 8020bb0:	e768      	b.n	8020a84 <_strtod_l+0x44c>
 8020bb2:	bf00      	nop
 8020bb4:	0802554a 	.word	0x0802554a
 8020bb8:	080257f4 	.word	0x080257f4
 8020bbc:	08025542 	.word	0x08025542
 8020bc0:	08025626 	.word	0x08025626
 8020bc4:	08025622 	.word	0x08025622
 8020bc8:	08025728 	.word	0x08025728
 8020bcc:	08025700 	.word	0x08025700
 8020bd0:	7ff00000 	.word	0x7ff00000
 8020bd4:	7ca00000 	.word	0x7ca00000
 8020bd8:	7fefffff 	.word	0x7fefffff
 8020bdc:	f014 0310 	ands.w	r3, r4, #16
 8020be0:	bf18      	it	ne
 8020be2:	236a      	movne	r3, #106	@ 0x6a
 8020be4:	4ea9      	ldr	r6, [pc, #676]	@ (8020e8c <_strtod_l+0x854>)
 8020be6:	9308      	str	r3, [sp, #32]
 8020be8:	4650      	mov	r0, sl
 8020bea:	4659      	mov	r1, fp
 8020bec:	2300      	movs	r3, #0
 8020bee:	07e2      	lsls	r2, r4, #31
 8020bf0:	d504      	bpl.n	8020bfc <_strtod_l+0x5c4>
 8020bf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020bf6:	f7df fd17 	bl	8000628 <__aeabi_dmul>
 8020bfa:	2301      	movs	r3, #1
 8020bfc:	1064      	asrs	r4, r4, #1
 8020bfe:	f106 0608 	add.w	r6, r6, #8
 8020c02:	d1f4      	bne.n	8020bee <_strtod_l+0x5b6>
 8020c04:	b10b      	cbz	r3, 8020c0a <_strtod_l+0x5d2>
 8020c06:	4682      	mov	sl, r0
 8020c08:	468b      	mov	fp, r1
 8020c0a:	9b08      	ldr	r3, [sp, #32]
 8020c0c:	b1b3      	cbz	r3, 8020c3c <_strtod_l+0x604>
 8020c0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020c12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	4659      	mov	r1, fp
 8020c1a:	dd0f      	ble.n	8020c3c <_strtod_l+0x604>
 8020c1c:	2b1f      	cmp	r3, #31
 8020c1e:	dd55      	ble.n	8020ccc <_strtod_l+0x694>
 8020c20:	2b34      	cmp	r3, #52	@ 0x34
 8020c22:	bfde      	ittt	le
 8020c24:	f04f 33ff 	movle.w	r3, #4294967295
 8020c28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020c2c:	4093      	lslle	r3, r2
 8020c2e:	f04f 0a00 	mov.w	sl, #0
 8020c32:	bfcc      	ite	gt
 8020c34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020c38:	ea03 0b01 	andle.w	fp, r3, r1
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	2300      	movs	r3, #0
 8020c40:	4650      	mov	r0, sl
 8020c42:	4659      	mov	r1, fp
 8020c44:	f7df ff58 	bl	8000af8 <__aeabi_dcmpeq>
 8020c48:	2800      	cmp	r0, #0
 8020c4a:	d1a6      	bne.n	8020b9a <_strtod_l+0x562>
 8020c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c4e:	9300      	str	r3, [sp, #0]
 8020c50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020c52:	9805      	ldr	r0, [sp, #20]
 8020c54:	462b      	mov	r3, r5
 8020c56:	463a      	mov	r2, r7
 8020c58:	f7ff f8c4 	bl	801fde4 <__s2b>
 8020c5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c5e:	2800      	cmp	r0, #0
 8020c60:	f43f af05 	beq.w	8020a6e <_strtod_l+0x436>
 8020c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c66:	2a00      	cmp	r2, #0
 8020c68:	eba9 0308 	sub.w	r3, r9, r8
 8020c6c:	bfa8      	it	ge
 8020c6e:	2300      	movge	r3, #0
 8020c70:	9312      	str	r3, [sp, #72]	@ 0x48
 8020c72:	2400      	movs	r4, #0
 8020c74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020c78:	9316      	str	r3, [sp, #88]	@ 0x58
 8020c7a:	46a0      	mov	r8, r4
 8020c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c7e:	9805      	ldr	r0, [sp, #20]
 8020c80:	6859      	ldr	r1, [r3, #4]
 8020c82:	f7ff f807 	bl	801fc94 <_Balloc>
 8020c86:	4681      	mov	r9, r0
 8020c88:	2800      	cmp	r0, #0
 8020c8a:	f43f aef4 	beq.w	8020a76 <_strtod_l+0x43e>
 8020c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c90:	691a      	ldr	r2, [r3, #16]
 8020c92:	3202      	adds	r2, #2
 8020c94:	f103 010c 	add.w	r1, r3, #12
 8020c98:	0092      	lsls	r2, r2, #2
 8020c9a:	300c      	adds	r0, #12
 8020c9c:	f7fe f931 	bl	801ef02 <memcpy>
 8020ca0:	ec4b ab10 	vmov	d0, sl, fp
 8020ca4:	9805      	ldr	r0, [sp, #20]
 8020ca6:	aa1c      	add	r2, sp, #112	@ 0x70
 8020ca8:	a91b      	add	r1, sp, #108	@ 0x6c
 8020caa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020cae:	f7ff fbd5 	bl	802045c <__d2b>
 8020cb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8020cb4:	2800      	cmp	r0, #0
 8020cb6:	f43f aede 	beq.w	8020a76 <_strtod_l+0x43e>
 8020cba:	9805      	ldr	r0, [sp, #20]
 8020cbc:	2101      	movs	r1, #1
 8020cbe:	f7ff f927 	bl	801ff10 <__i2b>
 8020cc2:	4680      	mov	r8, r0
 8020cc4:	b948      	cbnz	r0, 8020cda <_strtod_l+0x6a2>
 8020cc6:	f04f 0800 	mov.w	r8, #0
 8020cca:	e6d4      	b.n	8020a76 <_strtod_l+0x43e>
 8020ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8020cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8020cd4:	ea03 0a0a 	and.w	sl, r3, sl
 8020cd8:	e7b0      	b.n	8020c3c <_strtod_l+0x604>
 8020cda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020cdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020cde:	2d00      	cmp	r5, #0
 8020ce0:	bfab      	itete	ge
 8020ce2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020ce4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020ce6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020ce8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020cea:	bfac      	ite	ge
 8020cec:	18ef      	addge	r7, r5, r3
 8020cee:	1b5e      	sublt	r6, r3, r5
 8020cf0:	9b08      	ldr	r3, [sp, #32]
 8020cf2:	1aed      	subs	r5, r5, r3
 8020cf4:	4415      	add	r5, r2
 8020cf6:	4b66      	ldr	r3, [pc, #408]	@ (8020e90 <_strtod_l+0x858>)
 8020cf8:	3d01      	subs	r5, #1
 8020cfa:	429d      	cmp	r5, r3
 8020cfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020d00:	da50      	bge.n	8020da4 <_strtod_l+0x76c>
 8020d02:	1b5b      	subs	r3, r3, r5
 8020d04:	2b1f      	cmp	r3, #31
 8020d06:	eba2 0203 	sub.w	r2, r2, r3
 8020d0a:	f04f 0101 	mov.w	r1, #1
 8020d0e:	dc3d      	bgt.n	8020d8c <_strtod_l+0x754>
 8020d10:	fa01 f303 	lsl.w	r3, r1, r3
 8020d14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020d16:	2300      	movs	r3, #0
 8020d18:	9310      	str	r3, [sp, #64]	@ 0x40
 8020d1a:	18bd      	adds	r5, r7, r2
 8020d1c:	9b08      	ldr	r3, [sp, #32]
 8020d1e:	42af      	cmp	r7, r5
 8020d20:	4416      	add	r6, r2
 8020d22:	441e      	add	r6, r3
 8020d24:	463b      	mov	r3, r7
 8020d26:	bfa8      	it	ge
 8020d28:	462b      	movge	r3, r5
 8020d2a:	42b3      	cmp	r3, r6
 8020d2c:	bfa8      	it	ge
 8020d2e:	4633      	movge	r3, r6
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	bfc2      	ittt	gt
 8020d34:	1aed      	subgt	r5, r5, r3
 8020d36:	1af6      	subgt	r6, r6, r3
 8020d38:	1aff      	subgt	r7, r7, r3
 8020d3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	dd16      	ble.n	8020d6e <_strtod_l+0x736>
 8020d40:	4641      	mov	r1, r8
 8020d42:	9805      	ldr	r0, [sp, #20]
 8020d44:	461a      	mov	r2, r3
 8020d46:	f7ff f9a3 	bl	8020090 <__pow5mult>
 8020d4a:	4680      	mov	r8, r0
 8020d4c:	2800      	cmp	r0, #0
 8020d4e:	d0ba      	beq.n	8020cc6 <_strtod_l+0x68e>
 8020d50:	4601      	mov	r1, r0
 8020d52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020d54:	9805      	ldr	r0, [sp, #20]
 8020d56:	f7ff f8f1 	bl	801ff3c <__multiply>
 8020d5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8020d5c:	2800      	cmp	r0, #0
 8020d5e:	f43f ae8a 	beq.w	8020a76 <_strtod_l+0x43e>
 8020d62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020d64:	9805      	ldr	r0, [sp, #20]
 8020d66:	f7fe ffd5 	bl	801fd14 <_Bfree>
 8020d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020d6e:	2d00      	cmp	r5, #0
 8020d70:	dc1d      	bgt.n	8020dae <_strtod_l+0x776>
 8020d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	dd23      	ble.n	8020dc0 <_strtod_l+0x788>
 8020d78:	4649      	mov	r1, r9
 8020d7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020d7c:	9805      	ldr	r0, [sp, #20]
 8020d7e:	f7ff f987 	bl	8020090 <__pow5mult>
 8020d82:	4681      	mov	r9, r0
 8020d84:	b9e0      	cbnz	r0, 8020dc0 <_strtod_l+0x788>
 8020d86:	f04f 0900 	mov.w	r9, #0
 8020d8a:	e674      	b.n	8020a76 <_strtod_l+0x43e>
 8020d8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020d90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020d94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020d98:	35e2      	adds	r5, #226	@ 0xe2
 8020d9a:	fa01 f305 	lsl.w	r3, r1, r5
 8020d9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020da0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020da2:	e7ba      	b.n	8020d1a <_strtod_l+0x6e2>
 8020da4:	2300      	movs	r3, #0
 8020da6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020da8:	2301      	movs	r3, #1
 8020daa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020dac:	e7b5      	b.n	8020d1a <_strtod_l+0x6e2>
 8020dae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020db0:	9805      	ldr	r0, [sp, #20]
 8020db2:	462a      	mov	r2, r5
 8020db4:	f7ff f9c6 	bl	8020144 <__lshift>
 8020db8:	901a      	str	r0, [sp, #104]	@ 0x68
 8020dba:	2800      	cmp	r0, #0
 8020dbc:	d1d9      	bne.n	8020d72 <_strtod_l+0x73a>
 8020dbe:	e65a      	b.n	8020a76 <_strtod_l+0x43e>
 8020dc0:	2e00      	cmp	r6, #0
 8020dc2:	dd07      	ble.n	8020dd4 <_strtod_l+0x79c>
 8020dc4:	4649      	mov	r1, r9
 8020dc6:	9805      	ldr	r0, [sp, #20]
 8020dc8:	4632      	mov	r2, r6
 8020dca:	f7ff f9bb 	bl	8020144 <__lshift>
 8020dce:	4681      	mov	r9, r0
 8020dd0:	2800      	cmp	r0, #0
 8020dd2:	d0d8      	beq.n	8020d86 <_strtod_l+0x74e>
 8020dd4:	2f00      	cmp	r7, #0
 8020dd6:	dd08      	ble.n	8020dea <_strtod_l+0x7b2>
 8020dd8:	4641      	mov	r1, r8
 8020dda:	9805      	ldr	r0, [sp, #20]
 8020ddc:	463a      	mov	r2, r7
 8020dde:	f7ff f9b1 	bl	8020144 <__lshift>
 8020de2:	4680      	mov	r8, r0
 8020de4:	2800      	cmp	r0, #0
 8020de6:	f43f ae46 	beq.w	8020a76 <_strtod_l+0x43e>
 8020dea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020dec:	9805      	ldr	r0, [sp, #20]
 8020dee:	464a      	mov	r2, r9
 8020df0:	f7ff fa30 	bl	8020254 <__mdiff>
 8020df4:	4604      	mov	r4, r0
 8020df6:	2800      	cmp	r0, #0
 8020df8:	f43f ae3d 	beq.w	8020a76 <_strtod_l+0x43e>
 8020dfc:	68c3      	ldr	r3, [r0, #12]
 8020dfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e00:	2300      	movs	r3, #0
 8020e02:	60c3      	str	r3, [r0, #12]
 8020e04:	4641      	mov	r1, r8
 8020e06:	f7ff fa09 	bl	802021c <__mcmp>
 8020e0a:	2800      	cmp	r0, #0
 8020e0c:	da46      	bge.n	8020e9c <_strtod_l+0x864>
 8020e0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e10:	ea53 030a 	orrs.w	r3, r3, sl
 8020e14:	d16c      	bne.n	8020ef0 <_strtod_l+0x8b8>
 8020e16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d168      	bne.n	8020ef0 <_strtod_l+0x8b8>
 8020e1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020e22:	0d1b      	lsrs	r3, r3, #20
 8020e24:	051b      	lsls	r3, r3, #20
 8020e26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020e2a:	d961      	bls.n	8020ef0 <_strtod_l+0x8b8>
 8020e2c:	6963      	ldr	r3, [r4, #20]
 8020e2e:	b913      	cbnz	r3, 8020e36 <_strtod_l+0x7fe>
 8020e30:	6923      	ldr	r3, [r4, #16]
 8020e32:	2b01      	cmp	r3, #1
 8020e34:	dd5c      	ble.n	8020ef0 <_strtod_l+0x8b8>
 8020e36:	4621      	mov	r1, r4
 8020e38:	2201      	movs	r2, #1
 8020e3a:	9805      	ldr	r0, [sp, #20]
 8020e3c:	f7ff f982 	bl	8020144 <__lshift>
 8020e40:	4641      	mov	r1, r8
 8020e42:	4604      	mov	r4, r0
 8020e44:	f7ff f9ea 	bl	802021c <__mcmp>
 8020e48:	2800      	cmp	r0, #0
 8020e4a:	dd51      	ble.n	8020ef0 <_strtod_l+0x8b8>
 8020e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020e50:	9a08      	ldr	r2, [sp, #32]
 8020e52:	0d1b      	lsrs	r3, r3, #20
 8020e54:	051b      	lsls	r3, r3, #20
 8020e56:	2a00      	cmp	r2, #0
 8020e58:	d06b      	beq.n	8020f32 <_strtod_l+0x8fa>
 8020e5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020e5e:	d868      	bhi.n	8020f32 <_strtod_l+0x8fa>
 8020e60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020e64:	f67f ae9d 	bls.w	8020ba2 <_strtod_l+0x56a>
 8020e68:	4b0a      	ldr	r3, [pc, #40]	@ (8020e94 <_strtod_l+0x85c>)
 8020e6a:	4650      	mov	r0, sl
 8020e6c:	4659      	mov	r1, fp
 8020e6e:	2200      	movs	r2, #0
 8020e70:	f7df fbda 	bl	8000628 <__aeabi_dmul>
 8020e74:	4b08      	ldr	r3, [pc, #32]	@ (8020e98 <_strtod_l+0x860>)
 8020e76:	400b      	ands	r3, r1
 8020e78:	4682      	mov	sl, r0
 8020e7a:	468b      	mov	fp, r1
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	f47f ae05 	bne.w	8020a8c <_strtod_l+0x454>
 8020e82:	9a05      	ldr	r2, [sp, #20]
 8020e84:	2322      	movs	r3, #34	@ 0x22
 8020e86:	6013      	str	r3, [r2, #0]
 8020e88:	e600      	b.n	8020a8c <_strtod_l+0x454>
 8020e8a:	bf00      	nop
 8020e8c:	08025820 	.word	0x08025820
 8020e90:	fffffc02 	.word	0xfffffc02
 8020e94:	39500000 	.word	0x39500000
 8020e98:	7ff00000 	.word	0x7ff00000
 8020e9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020ea0:	d165      	bne.n	8020f6e <_strtod_l+0x936>
 8020ea2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020ea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020ea8:	b35a      	cbz	r2, 8020f02 <_strtod_l+0x8ca>
 8020eaa:	4a9f      	ldr	r2, [pc, #636]	@ (8021128 <_strtod_l+0xaf0>)
 8020eac:	4293      	cmp	r3, r2
 8020eae:	d12b      	bne.n	8020f08 <_strtod_l+0x8d0>
 8020eb0:	9b08      	ldr	r3, [sp, #32]
 8020eb2:	4651      	mov	r1, sl
 8020eb4:	b303      	cbz	r3, 8020ef8 <_strtod_l+0x8c0>
 8020eb6:	4b9d      	ldr	r3, [pc, #628]	@ (802112c <_strtod_l+0xaf4>)
 8020eb8:	465a      	mov	r2, fp
 8020eba:	4013      	ands	r3, r2
 8020ebc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8020ec4:	d81b      	bhi.n	8020efe <_strtod_l+0x8c6>
 8020ec6:	0d1b      	lsrs	r3, r3, #20
 8020ec8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8020ed0:	4299      	cmp	r1, r3
 8020ed2:	d119      	bne.n	8020f08 <_strtod_l+0x8d0>
 8020ed4:	4b96      	ldr	r3, [pc, #600]	@ (8021130 <_strtod_l+0xaf8>)
 8020ed6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ed8:	429a      	cmp	r2, r3
 8020eda:	d102      	bne.n	8020ee2 <_strtod_l+0x8aa>
 8020edc:	3101      	adds	r1, #1
 8020ede:	f43f adca 	beq.w	8020a76 <_strtod_l+0x43e>
 8020ee2:	4b92      	ldr	r3, [pc, #584]	@ (802112c <_strtod_l+0xaf4>)
 8020ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ee6:	401a      	ands	r2, r3
 8020ee8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020eec:	f04f 0a00 	mov.w	sl, #0
 8020ef0:	9b08      	ldr	r3, [sp, #32]
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d1b8      	bne.n	8020e68 <_strtod_l+0x830>
 8020ef6:	e5c9      	b.n	8020a8c <_strtod_l+0x454>
 8020ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8020efc:	e7e8      	b.n	8020ed0 <_strtod_l+0x898>
 8020efe:	4613      	mov	r3, r2
 8020f00:	e7e6      	b.n	8020ed0 <_strtod_l+0x898>
 8020f02:	ea53 030a 	orrs.w	r3, r3, sl
 8020f06:	d0a1      	beq.n	8020e4c <_strtod_l+0x814>
 8020f08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f0a:	b1db      	cbz	r3, 8020f44 <_strtod_l+0x90c>
 8020f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f0e:	4213      	tst	r3, r2
 8020f10:	d0ee      	beq.n	8020ef0 <_strtod_l+0x8b8>
 8020f12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f14:	9a08      	ldr	r2, [sp, #32]
 8020f16:	4650      	mov	r0, sl
 8020f18:	4659      	mov	r1, fp
 8020f1a:	b1bb      	cbz	r3, 8020f4c <_strtod_l+0x914>
 8020f1c:	f7ff fb6c 	bl	80205f8 <sulp>
 8020f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020f24:	ec53 2b10 	vmov	r2, r3, d0
 8020f28:	f7df f9c8 	bl	80002bc <__adddf3>
 8020f2c:	4682      	mov	sl, r0
 8020f2e:	468b      	mov	fp, r1
 8020f30:	e7de      	b.n	8020ef0 <_strtod_l+0x8b8>
 8020f32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020f36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020f3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020f3e:	f04f 3aff 	mov.w	sl, #4294967295
 8020f42:	e7d5      	b.n	8020ef0 <_strtod_l+0x8b8>
 8020f44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020f46:	ea13 0f0a 	tst.w	r3, sl
 8020f4a:	e7e1      	b.n	8020f10 <_strtod_l+0x8d8>
 8020f4c:	f7ff fb54 	bl	80205f8 <sulp>
 8020f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020f54:	ec53 2b10 	vmov	r2, r3, d0
 8020f58:	f7df f9ae 	bl	80002b8 <__aeabi_dsub>
 8020f5c:	2200      	movs	r2, #0
 8020f5e:	2300      	movs	r3, #0
 8020f60:	4682      	mov	sl, r0
 8020f62:	468b      	mov	fp, r1
 8020f64:	f7df fdc8 	bl	8000af8 <__aeabi_dcmpeq>
 8020f68:	2800      	cmp	r0, #0
 8020f6a:	d0c1      	beq.n	8020ef0 <_strtod_l+0x8b8>
 8020f6c:	e619      	b.n	8020ba2 <_strtod_l+0x56a>
 8020f6e:	4641      	mov	r1, r8
 8020f70:	4620      	mov	r0, r4
 8020f72:	f7ff facb 	bl	802050c <__ratio>
 8020f76:	ec57 6b10 	vmov	r6, r7, d0
 8020f7a:	2200      	movs	r2, #0
 8020f7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020f80:	4630      	mov	r0, r6
 8020f82:	4639      	mov	r1, r7
 8020f84:	f7df fdcc 	bl	8000b20 <__aeabi_dcmple>
 8020f88:	2800      	cmp	r0, #0
 8020f8a:	d06f      	beq.n	802106c <_strtod_l+0xa34>
 8020f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f8e:	2b00      	cmp	r3, #0
 8020f90:	d17a      	bne.n	8021088 <_strtod_l+0xa50>
 8020f92:	f1ba 0f00 	cmp.w	sl, #0
 8020f96:	d158      	bne.n	802104a <_strtod_l+0xa12>
 8020f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d15a      	bne.n	8021058 <_strtod_l+0xa20>
 8020fa2:	4b64      	ldr	r3, [pc, #400]	@ (8021134 <_strtod_l+0xafc>)
 8020fa4:	2200      	movs	r2, #0
 8020fa6:	4630      	mov	r0, r6
 8020fa8:	4639      	mov	r1, r7
 8020faa:	f7df fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8020fae:	2800      	cmp	r0, #0
 8020fb0:	d159      	bne.n	8021066 <_strtod_l+0xa2e>
 8020fb2:	4630      	mov	r0, r6
 8020fb4:	4639      	mov	r1, r7
 8020fb6:	4b60      	ldr	r3, [pc, #384]	@ (8021138 <_strtod_l+0xb00>)
 8020fb8:	2200      	movs	r2, #0
 8020fba:	f7df fb35 	bl	8000628 <__aeabi_dmul>
 8020fbe:	4606      	mov	r6, r0
 8020fc0:	460f      	mov	r7, r1
 8020fc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020fc6:	9606      	str	r6, [sp, #24]
 8020fc8:	9307      	str	r3, [sp, #28]
 8020fca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020fce:	4d57      	ldr	r5, [pc, #348]	@ (802112c <_strtod_l+0xaf4>)
 8020fd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fd6:	401d      	ands	r5, r3
 8020fd8:	4b58      	ldr	r3, [pc, #352]	@ (802113c <_strtod_l+0xb04>)
 8020fda:	429d      	cmp	r5, r3
 8020fdc:	f040 80b2 	bne.w	8021144 <_strtod_l+0xb0c>
 8020fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fe2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020fe6:	ec4b ab10 	vmov	d0, sl, fp
 8020fea:	f7ff f9c7 	bl	802037c <__ulp>
 8020fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020ff2:	ec51 0b10 	vmov	r0, r1, d0
 8020ff6:	f7df fb17 	bl	8000628 <__aeabi_dmul>
 8020ffa:	4652      	mov	r2, sl
 8020ffc:	465b      	mov	r3, fp
 8020ffe:	f7df f95d 	bl	80002bc <__adddf3>
 8021002:	460b      	mov	r3, r1
 8021004:	4949      	ldr	r1, [pc, #292]	@ (802112c <_strtod_l+0xaf4>)
 8021006:	4a4e      	ldr	r2, [pc, #312]	@ (8021140 <_strtod_l+0xb08>)
 8021008:	4019      	ands	r1, r3
 802100a:	4291      	cmp	r1, r2
 802100c:	4682      	mov	sl, r0
 802100e:	d942      	bls.n	8021096 <_strtod_l+0xa5e>
 8021010:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021012:	4b47      	ldr	r3, [pc, #284]	@ (8021130 <_strtod_l+0xaf8>)
 8021014:	429a      	cmp	r2, r3
 8021016:	d103      	bne.n	8021020 <_strtod_l+0x9e8>
 8021018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802101a:	3301      	adds	r3, #1
 802101c:	f43f ad2b 	beq.w	8020a76 <_strtod_l+0x43e>
 8021020:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8021130 <_strtod_l+0xaf8>
 8021024:	f04f 3aff 	mov.w	sl, #4294967295
 8021028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802102a:	9805      	ldr	r0, [sp, #20]
 802102c:	f7fe fe72 	bl	801fd14 <_Bfree>
 8021030:	9805      	ldr	r0, [sp, #20]
 8021032:	4649      	mov	r1, r9
 8021034:	f7fe fe6e 	bl	801fd14 <_Bfree>
 8021038:	9805      	ldr	r0, [sp, #20]
 802103a:	4641      	mov	r1, r8
 802103c:	f7fe fe6a 	bl	801fd14 <_Bfree>
 8021040:	9805      	ldr	r0, [sp, #20]
 8021042:	4621      	mov	r1, r4
 8021044:	f7fe fe66 	bl	801fd14 <_Bfree>
 8021048:	e618      	b.n	8020c7c <_strtod_l+0x644>
 802104a:	f1ba 0f01 	cmp.w	sl, #1
 802104e:	d103      	bne.n	8021058 <_strtod_l+0xa20>
 8021050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021052:	2b00      	cmp	r3, #0
 8021054:	f43f ada5 	beq.w	8020ba2 <_strtod_l+0x56a>
 8021058:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8021108 <_strtod_l+0xad0>
 802105c:	4f35      	ldr	r7, [pc, #212]	@ (8021134 <_strtod_l+0xafc>)
 802105e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021062:	2600      	movs	r6, #0
 8021064:	e7b1      	b.n	8020fca <_strtod_l+0x992>
 8021066:	4f34      	ldr	r7, [pc, #208]	@ (8021138 <_strtod_l+0xb00>)
 8021068:	2600      	movs	r6, #0
 802106a:	e7aa      	b.n	8020fc2 <_strtod_l+0x98a>
 802106c:	4b32      	ldr	r3, [pc, #200]	@ (8021138 <_strtod_l+0xb00>)
 802106e:	4630      	mov	r0, r6
 8021070:	4639      	mov	r1, r7
 8021072:	2200      	movs	r2, #0
 8021074:	f7df fad8 	bl	8000628 <__aeabi_dmul>
 8021078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802107a:	4606      	mov	r6, r0
 802107c:	460f      	mov	r7, r1
 802107e:	2b00      	cmp	r3, #0
 8021080:	d09f      	beq.n	8020fc2 <_strtod_l+0x98a>
 8021082:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8021086:	e7a0      	b.n	8020fca <_strtod_l+0x992>
 8021088:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8021110 <_strtod_l+0xad8>
 802108c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021090:	ec57 6b17 	vmov	r6, r7, d7
 8021094:	e799      	b.n	8020fca <_strtod_l+0x992>
 8021096:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802109a:	9b08      	ldr	r3, [sp, #32]
 802109c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d1c1      	bne.n	8021028 <_strtod_l+0x9f0>
 80210a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80210a8:	0d1b      	lsrs	r3, r3, #20
 80210aa:	051b      	lsls	r3, r3, #20
 80210ac:	429d      	cmp	r5, r3
 80210ae:	d1bb      	bne.n	8021028 <_strtod_l+0x9f0>
 80210b0:	4630      	mov	r0, r6
 80210b2:	4639      	mov	r1, r7
 80210b4:	f7df fe18 	bl	8000ce8 <__aeabi_d2lz>
 80210b8:	f7df fa88 	bl	80005cc <__aeabi_l2d>
 80210bc:	4602      	mov	r2, r0
 80210be:	460b      	mov	r3, r1
 80210c0:	4630      	mov	r0, r6
 80210c2:	4639      	mov	r1, r7
 80210c4:	f7df f8f8 	bl	80002b8 <__aeabi_dsub>
 80210c8:	460b      	mov	r3, r1
 80210ca:	4602      	mov	r2, r0
 80210cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80210d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80210d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210d6:	ea46 060a 	orr.w	r6, r6, sl
 80210da:	431e      	orrs	r6, r3
 80210dc:	d06f      	beq.n	80211be <_strtod_l+0xb86>
 80210de:	a30e      	add	r3, pc, #56	@ (adr r3, 8021118 <_strtod_l+0xae0>)
 80210e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210e4:	f7df fd12 	bl	8000b0c <__aeabi_dcmplt>
 80210e8:	2800      	cmp	r0, #0
 80210ea:	f47f accf 	bne.w	8020a8c <_strtod_l+0x454>
 80210ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8021120 <_strtod_l+0xae8>)
 80210f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80210f8:	f7df fd26 	bl	8000b48 <__aeabi_dcmpgt>
 80210fc:	2800      	cmp	r0, #0
 80210fe:	d093      	beq.n	8021028 <_strtod_l+0x9f0>
 8021100:	e4c4      	b.n	8020a8c <_strtod_l+0x454>
 8021102:	bf00      	nop
 8021104:	f3af 8000 	nop.w
 8021108:	00000000 	.word	0x00000000
 802110c:	bff00000 	.word	0xbff00000
 8021110:	00000000 	.word	0x00000000
 8021114:	3ff00000 	.word	0x3ff00000
 8021118:	94a03595 	.word	0x94a03595
 802111c:	3fdfffff 	.word	0x3fdfffff
 8021120:	35afe535 	.word	0x35afe535
 8021124:	3fe00000 	.word	0x3fe00000
 8021128:	000fffff 	.word	0x000fffff
 802112c:	7ff00000 	.word	0x7ff00000
 8021130:	7fefffff 	.word	0x7fefffff
 8021134:	3ff00000 	.word	0x3ff00000
 8021138:	3fe00000 	.word	0x3fe00000
 802113c:	7fe00000 	.word	0x7fe00000
 8021140:	7c9fffff 	.word	0x7c9fffff
 8021144:	9b08      	ldr	r3, [sp, #32]
 8021146:	b323      	cbz	r3, 8021192 <_strtod_l+0xb5a>
 8021148:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802114c:	d821      	bhi.n	8021192 <_strtod_l+0xb5a>
 802114e:	a328      	add	r3, pc, #160	@ (adr r3, 80211f0 <_strtod_l+0xbb8>)
 8021150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021154:	4630      	mov	r0, r6
 8021156:	4639      	mov	r1, r7
 8021158:	f7df fce2 	bl	8000b20 <__aeabi_dcmple>
 802115c:	b1a0      	cbz	r0, 8021188 <_strtod_l+0xb50>
 802115e:	4639      	mov	r1, r7
 8021160:	4630      	mov	r0, r6
 8021162:	f7df fd39 	bl	8000bd8 <__aeabi_d2uiz>
 8021166:	2801      	cmp	r0, #1
 8021168:	bf38      	it	cc
 802116a:	2001      	movcc	r0, #1
 802116c:	f7df f9e2 	bl	8000534 <__aeabi_ui2d>
 8021170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021172:	4606      	mov	r6, r0
 8021174:	460f      	mov	r7, r1
 8021176:	b9fb      	cbnz	r3, 80211b8 <_strtod_l+0xb80>
 8021178:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802117c:	9014      	str	r0, [sp, #80]	@ 0x50
 802117e:	9315      	str	r3, [sp, #84]	@ 0x54
 8021180:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8021184:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8021188:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802118a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802118e:	1b5b      	subs	r3, r3, r5
 8021190:	9311      	str	r3, [sp, #68]	@ 0x44
 8021192:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8021196:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802119a:	f7ff f8ef 	bl	802037c <__ulp>
 802119e:	4650      	mov	r0, sl
 80211a0:	ec53 2b10 	vmov	r2, r3, d0
 80211a4:	4659      	mov	r1, fp
 80211a6:	f7df fa3f 	bl	8000628 <__aeabi_dmul>
 80211aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80211ae:	f7df f885 	bl	80002bc <__adddf3>
 80211b2:	4682      	mov	sl, r0
 80211b4:	468b      	mov	fp, r1
 80211b6:	e770      	b.n	802109a <_strtod_l+0xa62>
 80211b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80211bc:	e7e0      	b.n	8021180 <_strtod_l+0xb48>
 80211be:	a30e      	add	r3, pc, #56	@ (adr r3, 80211f8 <_strtod_l+0xbc0>)
 80211c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211c4:	f7df fca2 	bl	8000b0c <__aeabi_dcmplt>
 80211c8:	e798      	b.n	80210fc <_strtod_l+0xac4>
 80211ca:	2300      	movs	r3, #0
 80211cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80211ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80211d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80211d2:	6013      	str	r3, [r2, #0]
 80211d4:	f7ff ba6d 	b.w	80206b2 <_strtod_l+0x7a>
 80211d8:	2a65      	cmp	r2, #101	@ 0x65
 80211da:	f43f ab66 	beq.w	80208aa <_strtod_l+0x272>
 80211de:	2a45      	cmp	r2, #69	@ 0x45
 80211e0:	f43f ab63 	beq.w	80208aa <_strtod_l+0x272>
 80211e4:	2301      	movs	r3, #1
 80211e6:	f7ff bb9e 	b.w	8020926 <_strtod_l+0x2ee>
 80211ea:	bf00      	nop
 80211ec:	f3af 8000 	nop.w
 80211f0:	ffc00000 	.word	0xffc00000
 80211f4:	41dfffff 	.word	0x41dfffff
 80211f8:	94a03595 	.word	0x94a03595
 80211fc:	3fcfffff 	.word	0x3fcfffff

08021200 <_strtod_r>:
 8021200:	4b01      	ldr	r3, [pc, #4]	@ (8021208 <_strtod_r+0x8>)
 8021202:	f7ff ba19 	b.w	8020638 <_strtod_l>
 8021206:	bf00      	nop
 8021208:	20000198 	.word	0x20000198

0802120c <__ssputs_r>:
 802120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021210:	688e      	ldr	r6, [r1, #8]
 8021212:	461f      	mov	r7, r3
 8021214:	42be      	cmp	r6, r7
 8021216:	680b      	ldr	r3, [r1, #0]
 8021218:	4682      	mov	sl, r0
 802121a:	460c      	mov	r4, r1
 802121c:	4690      	mov	r8, r2
 802121e:	d82d      	bhi.n	802127c <__ssputs_r+0x70>
 8021220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021228:	d026      	beq.n	8021278 <__ssputs_r+0x6c>
 802122a:	6965      	ldr	r5, [r4, #20]
 802122c:	6909      	ldr	r1, [r1, #16]
 802122e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021232:	eba3 0901 	sub.w	r9, r3, r1
 8021236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802123a:	1c7b      	adds	r3, r7, #1
 802123c:	444b      	add	r3, r9
 802123e:	106d      	asrs	r5, r5, #1
 8021240:	429d      	cmp	r5, r3
 8021242:	bf38      	it	cc
 8021244:	461d      	movcc	r5, r3
 8021246:	0553      	lsls	r3, r2, #21
 8021248:	d527      	bpl.n	802129a <__ssputs_r+0x8e>
 802124a:	4629      	mov	r1, r5
 802124c:	f7fc faee 	bl	801d82c <_malloc_r>
 8021250:	4606      	mov	r6, r0
 8021252:	b360      	cbz	r0, 80212ae <__ssputs_r+0xa2>
 8021254:	6921      	ldr	r1, [r4, #16]
 8021256:	464a      	mov	r2, r9
 8021258:	f7fd fe53 	bl	801ef02 <memcpy>
 802125c:	89a3      	ldrh	r3, [r4, #12]
 802125e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021266:	81a3      	strh	r3, [r4, #12]
 8021268:	6126      	str	r6, [r4, #16]
 802126a:	6165      	str	r5, [r4, #20]
 802126c:	444e      	add	r6, r9
 802126e:	eba5 0509 	sub.w	r5, r5, r9
 8021272:	6026      	str	r6, [r4, #0]
 8021274:	60a5      	str	r5, [r4, #8]
 8021276:	463e      	mov	r6, r7
 8021278:	42be      	cmp	r6, r7
 802127a:	d900      	bls.n	802127e <__ssputs_r+0x72>
 802127c:	463e      	mov	r6, r7
 802127e:	6820      	ldr	r0, [r4, #0]
 8021280:	4632      	mov	r2, r6
 8021282:	4641      	mov	r1, r8
 8021284:	f7fd fd0c 	bl	801eca0 <memmove>
 8021288:	68a3      	ldr	r3, [r4, #8]
 802128a:	1b9b      	subs	r3, r3, r6
 802128c:	60a3      	str	r3, [r4, #8]
 802128e:	6823      	ldr	r3, [r4, #0]
 8021290:	4433      	add	r3, r6
 8021292:	6023      	str	r3, [r4, #0]
 8021294:	2000      	movs	r0, #0
 8021296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802129a:	462a      	mov	r2, r5
 802129c:	f000 ff11 	bl	80220c2 <_realloc_r>
 80212a0:	4606      	mov	r6, r0
 80212a2:	2800      	cmp	r0, #0
 80212a4:	d1e0      	bne.n	8021268 <__ssputs_r+0x5c>
 80212a6:	6921      	ldr	r1, [r4, #16]
 80212a8:	4650      	mov	r0, sl
 80212aa:	f7fe fca9 	bl	801fc00 <_free_r>
 80212ae:	230c      	movs	r3, #12
 80212b0:	f8ca 3000 	str.w	r3, [sl]
 80212b4:	89a3      	ldrh	r3, [r4, #12]
 80212b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80212ba:	81a3      	strh	r3, [r4, #12]
 80212bc:	f04f 30ff 	mov.w	r0, #4294967295
 80212c0:	e7e9      	b.n	8021296 <__ssputs_r+0x8a>
	...

080212c4 <_svfiprintf_r>:
 80212c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212c8:	4698      	mov	r8, r3
 80212ca:	898b      	ldrh	r3, [r1, #12]
 80212cc:	061b      	lsls	r3, r3, #24
 80212ce:	b09d      	sub	sp, #116	@ 0x74
 80212d0:	4607      	mov	r7, r0
 80212d2:	460d      	mov	r5, r1
 80212d4:	4614      	mov	r4, r2
 80212d6:	d510      	bpl.n	80212fa <_svfiprintf_r+0x36>
 80212d8:	690b      	ldr	r3, [r1, #16]
 80212da:	b973      	cbnz	r3, 80212fa <_svfiprintf_r+0x36>
 80212dc:	2140      	movs	r1, #64	@ 0x40
 80212de:	f7fc faa5 	bl	801d82c <_malloc_r>
 80212e2:	6028      	str	r0, [r5, #0]
 80212e4:	6128      	str	r0, [r5, #16]
 80212e6:	b930      	cbnz	r0, 80212f6 <_svfiprintf_r+0x32>
 80212e8:	230c      	movs	r3, #12
 80212ea:	603b      	str	r3, [r7, #0]
 80212ec:	f04f 30ff 	mov.w	r0, #4294967295
 80212f0:	b01d      	add	sp, #116	@ 0x74
 80212f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212f6:	2340      	movs	r3, #64	@ 0x40
 80212f8:	616b      	str	r3, [r5, #20]
 80212fa:	2300      	movs	r3, #0
 80212fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80212fe:	2320      	movs	r3, #32
 8021300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021304:	f8cd 800c 	str.w	r8, [sp, #12]
 8021308:	2330      	movs	r3, #48	@ 0x30
 802130a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80214a8 <_svfiprintf_r+0x1e4>
 802130e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021312:	f04f 0901 	mov.w	r9, #1
 8021316:	4623      	mov	r3, r4
 8021318:	469a      	mov	sl, r3
 802131a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802131e:	b10a      	cbz	r2, 8021324 <_svfiprintf_r+0x60>
 8021320:	2a25      	cmp	r2, #37	@ 0x25
 8021322:	d1f9      	bne.n	8021318 <_svfiprintf_r+0x54>
 8021324:	ebba 0b04 	subs.w	fp, sl, r4
 8021328:	d00b      	beq.n	8021342 <_svfiprintf_r+0x7e>
 802132a:	465b      	mov	r3, fp
 802132c:	4622      	mov	r2, r4
 802132e:	4629      	mov	r1, r5
 8021330:	4638      	mov	r0, r7
 8021332:	f7ff ff6b 	bl	802120c <__ssputs_r>
 8021336:	3001      	adds	r0, #1
 8021338:	f000 80a7 	beq.w	802148a <_svfiprintf_r+0x1c6>
 802133c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802133e:	445a      	add	r2, fp
 8021340:	9209      	str	r2, [sp, #36]	@ 0x24
 8021342:	f89a 3000 	ldrb.w	r3, [sl]
 8021346:	2b00      	cmp	r3, #0
 8021348:	f000 809f 	beq.w	802148a <_svfiprintf_r+0x1c6>
 802134c:	2300      	movs	r3, #0
 802134e:	f04f 32ff 	mov.w	r2, #4294967295
 8021352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021356:	f10a 0a01 	add.w	sl, sl, #1
 802135a:	9304      	str	r3, [sp, #16]
 802135c:	9307      	str	r3, [sp, #28]
 802135e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021362:	931a      	str	r3, [sp, #104]	@ 0x68
 8021364:	4654      	mov	r4, sl
 8021366:	2205      	movs	r2, #5
 8021368:	f814 1b01 	ldrb.w	r1, [r4], #1
 802136c:	484e      	ldr	r0, [pc, #312]	@ (80214a8 <_svfiprintf_r+0x1e4>)
 802136e:	f7de ff47 	bl	8000200 <memchr>
 8021372:	9a04      	ldr	r2, [sp, #16]
 8021374:	b9d8      	cbnz	r0, 80213ae <_svfiprintf_r+0xea>
 8021376:	06d0      	lsls	r0, r2, #27
 8021378:	bf44      	itt	mi
 802137a:	2320      	movmi	r3, #32
 802137c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021380:	0711      	lsls	r1, r2, #28
 8021382:	bf44      	itt	mi
 8021384:	232b      	movmi	r3, #43	@ 0x2b
 8021386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802138a:	f89a 3000 	ldrb.w	r3, [sl]
 802138e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021390:	d015      	beq.n	80213be <_svfiprintf_r+0xfa>
 8021392:	9a07      	ldr	r2, [sp, #28]
 8021394:	4654      	mov	r4, sl
 8021396:	2000      	movs	r0, #0
 8021398:	f04f 0c0a 	mov.w	ip, #10
 802139c:	4621      	mov	r1, r4
 802139e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80213a2:	3b30      	subs	r3, #48	@ 0x30
 80213a4:	2b09      	cmp	r3, #9
 80213a6:	d94b      	bls.n	8021440 <_svfiprintf_r+0x17c>
 80213a8:	b1b0      	cbz	r0, 80213d8 <_svfiprintf_r+0x114>
 80213aa:	9207      	str	r2, [sp, #28]
 80213ac:	e014      	b.n	80213d8 <_svfiprintf_r+0x114>
 80213ae:	eba0 0308 	sub.w	r3, r0, r8
 80213b2:	fa09 f303 	lsl.w	r3, r9, r3
 80213b6:	4313      	orrs	r3, r2
 80213b8:	9304      	str	r3, [sp, #16]
 80213ba:	46a2      	mov	sl, r4
 80213bc:	e7d2      	b.n	8021364 <_svfiprintf_r+0xa0>
 80213be:	9b03      	ldr	r3, [sp, #12]
 80213c0:	1d19      	adds	r1, r3, #4
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	9103      	str	r1, [sp, #12]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	bfbb      	ittet	lt
 80213ca:	425b      	neglt	r3, r3
 80213cc:	f042 0202 	orrlt.w	r2, r2, #2
 80213d0:	9307      	strge	r3, [sp, #28]
 80213d2:	9307      	strlt	r3, [sp, #28]
 80213d4:	bfb8      	it	lt
 80213d6:	9204      	strlt	r2, [sp, #16]
 80213d8:	7823      	ldrb	r3, [r4, #0]
 80213da:	2b2e      	cmp	r3, #46	@ 0x2e
 80213dc:	d10a      	bne.n	80213f4 <_svfiprintf_r+0x130>
 80213de:	7863      	ldrb	r3, [r4, #1]
 80213e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80213e2:	d132      	bne.n	802144a <_svfiprintf_r+0x186>
 80213e4:	9b03      	ldr	r3, [sp, #12]
 80213e6:	1d1a      	adds	r2, r3, #4
 80213e8:	681b      	ldr	r3, [r3, #0]
 80213ea:	9203      	str	r2, [sp, #12]
 80213ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80213f0:	3402      	adds	r4, #2
 80213f2:	9305      	str	r3, [sp, #20]
 80213f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80214b8 <_svfiprintf_r+0x1f4>
 80213f8:	7821      	ldrb	r1, [r4, #0]
 80213fa:	2203      	movs	r2, #3
 80213fc:	4650      	mov	r0, sl
 80213fe:	f7de feff 	bl	8000200 <memchr>
 8021402:	b138      	cbz	r0, 8021414 <_svfiprintf_r+0x150>
 8021404:	9b04      	ldr	r3, [sp, #16]
 8021406:	eba0 000a 	sub.w	r0, r0, sl
 802140a:	2240      	movs	r2, #64	@ 0x40
 802140c:	4082      	lsls	r2, r0
 802140e:	4313      	orrs	r3, r2
 8021410:	3401      	adds	r4, #1
 8021412:	9304      	str	r3, [sp, #16]
 8021414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021418:	4824      	ldr	r0, [pc, #144]	@ (80214ac <_svfiprintf_r+0x1e8>)
 802141a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802141e:	2206      	movs	r2, #6
 8021420:	f7de feee 	bl	8000200 <memchr>
 8021424:	2800      	cmp	r0, #0
 8021426:	d036      	beq.n	8021496 <_svfiprintf_r+0x1d2>
 8021428:	4b21      	ldr	r3, [pc, #132]	@ (80214b0 <_svfiprintf_r+0x1ec>)
 802142a:	bb1b      	cbnz	r3, 8021474 <_svfiprintf_r+0x1b0>
 802142c:	9b03      	ldr	r3, [sp, #12]
 802142e:	3307      	adds	r3, #7
 8021430:	f023 0307 	bic.w	r3, r3, #7
 8021434:	3308      	adds	r3, #8
 8021436:	9303      	str	r3, [sp, #12]
 8021438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802143a:	4433      	add	r3, r6
 802143c:	9309      	str	r3, [sp, #36]	@ 0x24
 802143e:	e76a      	b.n	8021316 <_svfiprintf_r+0x52>
 8021440:	fb0c 3202 	mla	r2, ip, r2, r3
 8021444:	460c      	mov	r4, r1
 8021446:	2001      	movs	r0, #1
 8021448:	e7a8      	b.n	802139c <_svfiprintf_r+0xd8>
 802144a:	2300      	movs	r3, #0
 802144c:	3401      	adds	r4, #1
 802144e:	9305      	str	r3, [sp, #20]
 8021450:	4619      	mov	r1, r3
 8021452:	f04f 0c0a 	mov.w	ip, #10
 8021456:	4620      	mov	r0, r4
 8021458:	f810 2b01 	ldrb.w	r2, [r0], #1
 802145c:	3a30      	subs	r2, #48	@ 0x30
 802145e:	2a09      	cmp	r2, #9
 8021460:	d903      	bls.n	802146a <_svfiprintf_r+0x1a6>
 8021462:	2b00      	cmp	r3, #0
 8021464:	d0c6      	beq.n	80213f4 <_svfiprintf_r+0x130>
 8021466:	9105      	str	r1, [sp, #20]
 8021468:	e7c4      	b.n	80213f4 <_svfiprintf_r+0x130>
 802146a:	fb0c 2101 	mla	r1, ip, r1, r2
 802146e:	4604      	mov	r4, r0
 8021470:	2301      	movs	r3, #1
 8021472:	e7f0      	b.n	8021456 <_svfiprintf_r+0x192>
 8021474:	ab03      	add	r3, sp, #12
 8021476:	9300      	str	r3, [sp, #0]
 8021478:	462a      	mov	r2, r5
 802147a:	4b0e      	ldr	r3, [pc, #56]	@ (80214b4 <_svfiprintf_r+0x1f0>)
 802147c:	a904      	add	r1, sp, #16
 802147e:	4638      	mov	r0, r7
 8021480:	f7fc fb86 	bl	801db90 <_printf_float>
 8021484:	1c42      	adds	r2, r0, #1
 8021486:	4606      	mov	r6, r0
 8021488:	d1d6      	bne.n	8021438 <_svfiprintf_r+0x174>
 802148a:	89ab      	ldrh	r3, [r5, #12]
 802148c:	065b      	lsls	r3, r3, #25
 802148e:	f53f af2d 	bmi.w	80212ec <_svfiprintf_r+0x28>
 8021492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021494:	e72c      	b.n	80212f0 <_svfiprintf_r+0x2c>
 8021496:	ab03      	add	r3, sp, #12
 8021498:	9300      	str	r3, [sp, #0]
 802149a:	462a      	mov	r2, r5
 802149c:	4b05      	ldr	r3, [pc, #20]	@ (80214b4 <_svfiprintf_r+0x1f0>)
 802149e:	a904      	add	r1, sp, #16
 80214a0:	4638      	mov	r0, r7
 80214a2:	f7fc fe0d 	bl	801e0c0 <_printf_i>
 80214a6:	e7ed      	b.n	8021484 <_svfiprintf_r+0x1c0>
 80214a8:	08025848 	.word	0x08025848
 80214ac:	08025852 	.word	0x08025852
 80214b0:	0801db91 	.word	0x0801db91
 80214b4:	0802120d 	.word	0x0802120d
 80214b8:	0802584e 	.word	0x0802584e

080214bc <__sfputc_r>:
 80214bc:	6893      	ldr	r3, [r2, #8]
 80214be:	3b01      	subs	r3, #1
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	b410      	push	{r4}
 80214c4:	6093      	str	r3, [r2, #8]
 80214c6:	da08      	bge.n	80214da <__sfputc_r+0x1e>
 80214c8:	6994      	ldr	r4, [r2, #24]
 80214ca:	42a3      	cmp	r3, r4
 80214cc:	db01      	blt.n	80214d2 <__sfputc_r+0x16>
 80214ce:	290a      	cmp	r1, #10
 80214d0:	d103      	bne.n	80214da <__sfputc_r+0x1e>
 80214d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214d6:	f7fd bb4f 	b.w	801eb78 <__swbuf_r>
 80214da:	6813      	ldr	r3, [r2, #0]
 80214dc:	1c58      	adds	r0, r3, #1
 80214de:	6010      	str	r0, [r2, #0]
 80214e0:	7019      	strb	r1, [r3, #0]
 80214e2:	4608      	mov	r0, r1
 80214e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214e8:	4770      	bx	lr

080214ea <__sfputs_r>:
 80214ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ec:	4606      	mov	r6, r0
 80214ee:	460f      	mov	r7, r1
 80214f0:	4614      	mov	r4, r2
 80214f2:	18d5      	adds	r5, r2, r3
 80214f4:	42ac      	cmp	r4, r5
 80214f6:	d101      	bne.n	80214fc <__sfputs_r+0x12>
 80214f8:	2000      	movs	r0, #0
 80214fa:	e007      	b.n	802150c <__sfputs_r+0x22>
 80214fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021500:	463a      	mov	r2, r7
 8021502:	4630      	mov	r0, r6
 8021504:	f7ff ffda 	bl	80214bc <__sfputc_r>
 8021508:	1c43      	adds	r3, r0, #1
 802150a:	d1f3      	bne.n	80214f4 <__sfputs_r+0xa>
 802150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021510 <_vfiprintf_r>:
 8021510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021514:	460d      	mov	r5, r1
 8021516:	b09d      	sub	sp, #116	@ 0x74
 8021518:	4614      	mov	r4, r2
 802151a:	4698      	mov	r8, r3
 802151c:	4606      	mov	r6, r0
 802151e:	b118      	cbz	r0, 8021528 <_vfiprintf_r+0x18>
 8021520:	6a03      	ldr	r3, [r0, #32]
 8021522:	b90b      	cbnz	r3, 8021528 <_vfiprintf_r+0x18>
 8021524:	f7fd f98c 	bl	801e840 <__sinit>
 8021528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802152a:	07d9      	lsls	r1, r3, #31
 802152c:	d405      	bmi.n	802153a <_vfiprintf_r+0x2a>
 802152e:	89ab      	ldrh	r3, [r5, #12]
 8021530:	059a      	lsls	r2, r3, #22
 8021532:	d402      	bmi.n	802153a <_vfiprintf_r+0x2a>
 8021534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021536:	f7fd fcda 	bl	801eeee <__retarget_lock_acquire_recursive>
 802153a:	89ab      	ldrh	r3, [r5, #12]
 802153c:	071b      	lsls	r3, r3, #28
 802153e:	d501      	bpl.n	8021544 <_vfiprintf_r+0x34>
 8021540:	692b      	ldr	r3, [r5, #16]
 8021542:	b99b      	cbnz	r3, 802156c <_vfiprintf_r+0x5c>
 8021544:	4629      	mov	r1, r5
 8021546:	4630      	mov	r0, r6
 8021548:	f7fd fb54 	bl	801ebf4 <__swsetup_r>
 802154c:	b170      	cbz	r0, 802156c <_vfiprintf_r+0x5c>
 802154e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021550:	07dc      	lsls	r4, r3, #31
 8021552:	d504      	bpl.n	802155e <_vfiprintf_r+0x4e>
 8021554:	f04f 30ff 	mov.w	r0, #4294967295
 8021558:	b01d      	add	sp, #116	@ 0x74
 802155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802155e:	89ab      	ldrh	r3, [r5, #12]
 8021560:	0598      	lsls	r0, r3, #22
 8021562:	d4f7      	bmi.n	8021554 <_vfiprintf_r+0x44>
 8021564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021566:	f7fd fcc3 	bl	801eef0 <__retarget_lock_release_recursive>
 802156a:	e7f3      	b.n	8021554 <_vfiprintf_r+0x44>
 802156c:	2300      	movs	r3, #0
 802156e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021570:	2320      	movs	r3, #32
 8021572:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021576:	f8cd 800c 	str.w	r8, [sp, #12]
 802157a:	2330      	movs	r3, #48	@ 0x30
 802157c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802172c <_vfiprintf_r+0x21c>
 8021580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021584:	f04f 0901 	mov.w	r9, #1
 8021588:	4623      	mov	r3, r4
 802158a:	469a      	mov	sl, r3
 802158c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021590:	b10a      	cbz	r2, 8021596 <_vfiprintf_r+0x86>
 8021592:	2a25      	cmp	r2, #37	@ 0x25
 8021594:	d1f9      	bne.n	802158a <_vfiprintf_r+0x7a>
 8021596:	ebba 0b04 	subs.w	fp, sl, r4
 802159a:	d00b      	beq.n	80215b4 <_vfiprintf_r+0xa4>
 802159c:	465b      	mov	r3, fp
 802159e:	4622      	mov	r2, r4
 80215a0:	4629      	mov	r1, r5
 80215a2:	4630      	mov	r0, r6
 80215a4:	f7ff ffa1 	bl	80214ea <__sfputs_r>
 80215a8:	3001      	adds	r0, #1
 80215aa:	f000 80a7 	beq.w	80216fc <_vfiprintf_r+0x1ec>
 80215ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80215b0:	445a      	add	r2, fp
 80215b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80215b4:	f89a 3000 	ldrb.w	r3, [sl]
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	f000 809f 	beq.w	80216fc <_vfiprintf_r+0x1ec>
 80215be:	2300      	movs	r3, #0
 80215c0:	f04f 32ff 	mov.w	r2, #4294967295
 80215c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80215c8:	f10a 0a01 	add.w	sl, sl, #1
 80215cc:	9304      	str	r3, [sp, #16]
 80215ce:	9307      	str	r3, [sp, #28]
 80215d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80215d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80215d6:	4654      	mov	r4, sl
 80215d8:	2205      	movs	r2, #5
 80215da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215de:	4853      	ldr	r0, [pc, #332]	@ (802172c <_vfiprintf_r+0x21c>)
 80215e0:	f7de fe0e 	bl	8000200 <memchr>
 80215e4:	9a04      	ldr	r2, [sp, #16]
 80215e6:	b9d8      	cbnz	r0, 8021620 <_vfiprintf_r+0x110>
 80215e8:	06d1      	lsls	r1, r2, #27
 80215ea:	bf44      	itt	mi
 80215ec:	2320      	movmi	r3, #32
 80215ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80215f2:	0713      	lsls	r3, r2, #28
 80215f4:	bf44      	itt	mi
 80215f6:	232b      	movmi	r3, #43	@ 0x2b
 80215f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80215fc:	f89a 3000 	ldrb.w	r3, [sl]
 8021600:	2b2a      	cmp	r3, #42	@ 0x2a
 8021602:	d015      	beq.n	8021630 <_vfiprintf_r+0x120>
 8021604:	9a07      	ldr	r2, [sp, #28]
 8021606:	4654      	mov	r4, sl
 8021608:	2000      	movs	r0, #0
 802160a:	f04f 0c0a 	mov.w	ip, #10
 802160e:	4621      	mov	r1, r4
 8021610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021614:	3b30      	subs	r3, #48	@ 0x30
 8021616:	2b09      	cmp	r3, #9
 8021618:	d94b      	bls.n	80216b2 <_vfiprintf_r+0x1a2>
 802161a:	b1b0      	cbz	r0, 802164a <_vfiprintf_r+0x13a>
 802161c:	9207      	str	r2, [sp, #28]
 802161e:	e014      	b.n	802164a <_vfiprintf_r+0x13a>
 8021620:	eba0 0308 	sub.w	r3, r0, r8
 8021624:	fa09 f303 	lsl.w	r3, r9, r3
 8021628:	4313      	orrs	r3, r2
 802162a:	9304      	str	r3, [sp, #16]
 802162c:	46a2      	mov	sl, r4
 802162e:	e7d2      	b.n	80215d6 <_vfiprintf_r+0xc6>
 8021630:	9b03      	ldr	r3, [sp, #12]
 8021632:	1d19      	adds	r1, r3, #4
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	9103      	str	r1, [sp, #12]
 8021638:	2b00      	cmp	r3, #0
 802163a:	bfbb      	ittet	lt
 802163c:	425b      	neglt	r3, r3
 802163e:	f042 0202 	orrlt.w	r2, r2, #2
 8021642:	9307      	strge	r3, [sp, #28]
 8021644:	9307      	strlt	r3, [sp, #28]
 8021646:	bfb8      	it	lt
 8021648:	9204      	strlt	r2, [sp, #16]
 802164a:	7823      	ldrb	r3, [r4, #0]
 802164c:	2b2e      	cmp	r3, #46	@ 0x2e
 802164e:	d10a      	bne.n	8021666 <_vfiprintf_r+0x156>
 8021650:	7863      	ldrb	r3, [r4, #1]
 8021652:	2b2a      	cmp	r3, #42	@ 0x2a
 8021654:	d132      	bne.n	80216bc <_vfiprintf_r+0x1ac>
 8021656:	9b03      	ldr	r3, [sp, #12]
 8021658:	1d1a      	adds	r2, r3, #4
 802165a:	681b      	ldr	r3, [r3, #0]
 802165c:	9203      	str	r2, [sp, #12]
 802165e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021662:	3402      	adds	r4, #2
 8021664:	9305      	str	r3, [sp, #20]
 8021666:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802173c <_vfiprintf_r+0x22c>
 802166a:	7821      	ldrb	r1, [r4, #0]
 802166c:	2203      	movs	r2, #3
 802166e:	4650      	mov	r0, sl
 8021670:	f7de fdc6 	bl	8000200 <memchr>
 8021674:	b138      	cbz	r0, 8021686 <_vfiprintf_r+0x176>
 8021676:	9b04      	ldr	r3, [sp, #16]
 8021678:	eba0 000a 	sub.w	r0, r0, sl
 802167c:	2240      	movs	r2, #64	@ 0x40
 802167e:	4082      	lsls	r2, r0
 8021680:	4313      	orrs	r3, r2
 8021682:	3401      	adds	r4, #1
 8021684:	9304      	str	r3, [sp, #16]
 8021686:	f814 1b01 	ldrb.w	r1, [r4], #1
 802168a:	4829      	ldr	r0, [pc, #164]	@ (8021730 <_vfiprintf_r+0x220>)
 802168c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021690:	2206      	movs	r2, #6
 8021692:	f7de fdb5 	bl	8000200 <memchr>
 8021696:	2800      	cmp	r0, #0
 8021698:	d03f      	beq.n	802171a <_vfiprintf_r+0x20a>
 802169a:	4b26      	ldr	r3, [pc, #152]	@ (8021734 <_vfiprintf_r+0x224>)
 802169c:	bb1b      	cbnz	r3, 80216e6 <_vfiprintf_r+0x1d6>
 802169e:	9b03      	ldr	r3, [sp, #12]
 80216a0:	3307      	adds	r3, #7
 80216a2:	f023 0307 	bic.w	r3, r3, #7
 80216a6:	3308      	adds	r3, #8
 80216a8:	9303      	str	r3, [sp, #12]
 80216aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216ac:	443b      	add	r3, r7
 80216ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80216b0:	e76a      	b.n	8021588 <_vfiprintf_r+0x78>
 80216b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80216b6:	460c      	mov	r4, r1
 80216b8:	2001      	movs	r0, #1
 80216ba:	e7a8      	b.n	802160e <_vfiprintf_r+0xfe>
 80216bc:	2300      	movs	r3, #0
 80216be:	3401      	adds	r4, #1
 80216c0:	9305      	str	r3, [sp, #20]
 80216c2:	4619      	mov	r1, r3
 80216c4:	f04f 0c0a 	mov.w	ip, #10
 80216c8:	4620      	mov	r0, r4
 80216ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80216ce:	3a30      	subs	r2, #48	@ 0x30
 80216d0:	2a09      	cmp	r2, #9
 80216d2:	d903      	bls.n	80216dc <_vfiprintf_r+0x1cc>
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d0c6      	beq.n	8021666 <_vfiprintf_r+0x156>
 80216d8:	9105      	str	r1, [sp, #20]
 80216da:	e7c4      	b.n	8021666 <_vfiprintf_r+0x156>
 80216dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80216e0:	4604      	mov	r4, r0
 80216e2:	2301      	movs	r3, #1
 80216e4:	e7f0      	b.n	80216c8 <_vfiprintf_r+0x1b8>
 80216e6:	ab03      	add	r3, sp, #12
 80216e8:	9300      	str	r3, [sp, #0]
 80216ea:	462a      	mov	r2, r5
 80216ec:	4b12      	ldr	r3, [pc, #72]	@ (8021738 <_vfiprintf_r+0x228>)
 80216ee:	a904      	add	r1, sp, #16
 80216f0:	4630      	mov	r0, r6
 80216f2:	f7fc fa4d 	bl	801db90 <_printf_float>
 80216f6:	4607      	mov	r7, r0
 80216f8:	1c78      	adds	r0, r7, #1
 80216fa:	d1d6      	bne.n	80216aa <_vfiprintf_r+0x19a>
 80216fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80216fe:	07d9      	lsls	r1, r3, #31
 8021700:	d405      	bmi.n	802170e <_vfiprintf_r+0x1fe>
 8021702:	89ab      	ldrh	r3, [r5, #12]
 8021704:	059a      	lsls	r2, r3, #22
 8021706:	d402      	bmi.n	802170e <_vfiprintf_r+0x1fe>
 8021708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802170a:	f7fd fbf1 	bl	801eef0 <__retarget_lock_release_recursive>
 802170e:	89ab      	ldrh	r3, [r5, #12]
 8021710:	065b      	lsls	r3, r3, #25
 8021712:	f53f af1f 	bmi.w	8021554 <_vfiprintf_r+0x44>
 8021716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021718:	e71e      	b.n	8021558 <_vfiprintf_r+0x48>
 802171a:	ab03      	add	r3, sp, #12
 802171c:	9300      	str	r3, [sp, #0]
 802171e:	462a      	mov	r2, r5
 8021720:	4b05      	ldr	r3, [pc, #20]	@ (8021738 <_vfiprintf_r+0x228>)
 8021722:	a904      	add	r1, sp, #16
 8021724:	4630      	mov	r0, r6
 8021726:	f7fc fccb 	bl	801e0c0 <_printf_i>
 802172a:	e7e4      	b.n	80216f6 <_vfiprintf_r+0x1e6>
 802172c:	08025848 	.word	0x08025848
 8021730:	08025852 	.word	0x08025852
 8021734:	0801db91 	.word	0x0801db91
 8021738:	080214eb 	.word	0x080214eb
 802173c:	0802584e 	.word	0x0802584e

08021740 <__sflush_r>:
 8021740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021748:	0716      	lsls	r6, r2, #28
 802174a:	4605      	mov	r5, r0
 802174c:	460c      	mov	r4, r1
 802174e:	d454      	bmi.n	80217fa <__sflush_r+0xba>
 8021750:	684b      	ldr	r3, [r1, #4]
 8021752:	2b00      	cmp	r3, #0
 8021754:	dc02      	bgt.n	802175c <__sflush_r+0x1c>
 8021756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021758:	2b00      	cmp	r3, #0
 802175a:	dd48      	ble.n	80217ee <__sflush_r+0xae>
 802175c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802175e:	2e00      	cmp	r6, #0
 8021760:	d045      	beq.n	80217ee <__sflush_r+0xae>
 8021762:	2300      	movs	r3, #0
 8021764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021768:	682f      	ldr	r7, [r5, #0]
 802176a:	6a21      	ldr	r1, [r4, #32]
 802176c:	602b      	str	r3, [r5, #0]
 802176e:	d030      	beq.n	80217d2 <__sflush_r+0x92>
 8021770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021772:	89a3      	ldrh	r3, [r4, #12]
 8021774:	0759      	lsls	r1, r3, #29
 8021776:	d505      	bpl.n	8021784 <__sflush_r+0x44>
 8021778:	6863      	ldr	r3, [r4, #4]
 802177a:	1ad2      	subs	r2, r2, r3
 802177c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802177e:	b10b      	cbz	r3, 8021784 <__sflush_r+0x44>
 8021780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021782:	1ad2      	subs	r2, r2, r3
 8021784:	2300      	movs	r3, #0
 8021786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021788:	6a21      	ldr	r1, [r4, #32]
 802178a:	4628      	mov	r0, r5
 802178c:	47b0      	blx	r6
 802178e:	1c43      	adds	r3, r0, #1
 8021790:	89a3      	ldrh	r3, [r4, #12]
 8021792:	d106      	bne.n	80217a2 <__sflush_r+0x62>
 8021794:	6829      	ldr	r1, [r5, #0]
 8021796:	291d      	cmp	r1, #29
 8021798:	d82b      	bhi.n	80217f2 <__sflush_r+0xb2>
 802179a:	4a2a      	ldr	r2, [pc, #168]	@ (8021844 <__sflush_r+0x104>)
 802179c:	410a      	asrs	r2, r1
 802179e:	07d6      	lsls	r6, r2, #31
 80217a0:	d427      	bmi.n	80217f2 <__sflush_r+0xb2>
 80217a2:	2200      	movs	r2, #0
 80217a4:	6062      	str	r2, [r4, #4]
 80217a6:	04d9      	lsls	r1, r3, #19
 80217a8:	6922      	ldr	r2, [r4, #16]
 80217aa:	6022      	str	r2, [r4, #0]
 80217ac:	d504      	bpl.n	80217b8 <__sflush_r+0x78>
 80217ae:	1c42      	adds	r2, r0, #1
 80217b0:	d101      	bne.n	80217b6 <__sflush_r+0x76>
 80217b2:	682b      	ldr	r3, [r5, #0]
 80217b4:	b903      	cbnz	r3, 80217b8 <__sflush_r+0x78>
 80217b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80217b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80217ba:	602f      	str	r7, [r5, #0]
 80217bc:	b1b9      	cbz	r1, 80217ee <__sflush_r+0xae>
 80217be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80217c2:	4299      	cmp	r1, r3
 80217c4:	d002      	beq.n	80217cc <__sflush_r+0x8c>
 80217c6:	4628      	mov	r0, r5
 80217c8:	f7fe fa1a 	bl	801fc00 <_free_r>
 80217cc:	2300      	movs	r3, #0
 80217ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80217d0:	e00d      	b.n	80217ee <__sflush_r+0xae>
 80217d2:	2301      	movs	r3, #1
 80217d4:	4628      	mov	r0, r5
 80217d6:	47b0      	blx	r6
 80217d8:	4602      	mov	r2, r0
 80217da:	1c50      	adds	r0, r2, #1
 80217dc:	d1c9      	bne.n	8021772 <__sflush_r+0x32>
 80217de:	682b      	ldr	r3, [r5, #0]
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d0c6      	beq.n	8021772 <__sflush_r+0x32>
 80217e4:	2b1d      	cmp	r3, #29
 80217e6:	d001      	beq.n	80217ec <__sflush_r+0xac>
 80217e8:	2b16      	cmp	r3, #22
 80217ea:	d11e      	bne.n	802182a <__sflush_r+0xea>
 80217ec:	602f      	str	r7, [r5, #0]
 80217ee:	2000      	movs	r0, #0
 80217f0:	e022      	b.n	8021838 <__sflush_r+0xf8>
 80217f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80217f6:	b21b      	sxth	r3, r3
 80217f8:	e01b      	b.n	8021832 <__sflush_r+0xf2>
 80217fa:	690f      	ldr	r7, [r1, #16]
 80217fc:	2f00      	cmp	r7, #0
 80217fe:	d0f6      	beq.n	80217ee <__sflush_r+0xae>
 8021800:	0793      	lsls	r3, r2, #30
 8021802:	680e      	ldr	r6, [r1, #0]
 8021804:	bf08      	it	eq
 8021806:	694b      	ldreq	r3, [r1, #20]
 8021808:	600f      	str	r7, [r1, #0]
 802180a:	bf18      	it	ne
 802180c:	2300      	movne	r3, #0
 802180e:	eba6 0807 	sub.w	r8, r6, r7
 8021812:	608b      	str	r3, [r1, #8]
 8021814:	f1b8 0f00 	cmp.w	r8, #0
 8021818:	dde9      	ble.n	80217ee <__sflush_r+0xae>
 802181a:	6a21      	ldr	r1, [r4, #32]
 802181c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802181e:	4643      	mov	r3, r8
 8021820:	463a      	mov	r2, r7
 8021822:	4628      	mov	r0, r5
 8021824:	47b0      	blx	r6
 8021826:	2800      	cmp	r0, #0
 8021828:	dc08      	bgt.n	802183c <__sflush_r+0xfc>
 802182a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802182e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021832:	81a3      	strh	r3, [r4, #12]
 8021834:	f04f 30ff 	mov.w	r0, #4294967295
 8021838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802183c:	4407      	add	r7, r0
 802183e:	eba8 0800 	sub.w	r8, r8, r0
 8021842:	e7e7      	b.n	8021814 <__sflush_r+0xd4>
 8021844:	dfbffffe 	.word	0xdfbffffe

08021848 <_fflush_r>:
 8021848:	b538      	push	{r3, r4, r5, lr}
 802184a:	690b      	ldr	r3, [r1, #16]
 802184c:	4605      	mov	r5, r0
 802184e:	460c      	mov	r4, r1
 8021850:	b913      	cbnz	r3, 8021858 <_fflush_r+0x10>
 8021852:	2500      	movs	r5, #0
 8021854:	4628      	mov	r0, r5
 8021856:	bd38      	pop	{r3, r4, r5, pc}
 8021858:	b118      	cbz	r0, 8021862 <_fflush_r+0x1a>
 802185a:	6a03      	ldr	r3, [r0, #32]
 802185c:	b90b      	cbnz	r3, 8021862 <_fflush_r+0x1a>
 802185e:	f7fc ffef 	bl	801e840 <__sinit>
 8021862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021866:	2b00      	cmp	r3, #0
 8021868:	d0f3      	beq.n	8021852 <_fflush_r+0xa>
 802186a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802186c:	07d0      	lsls	r0, r2, #31
 802186e:	d404      	bmi.n	802187a <_fflush_r+0x32>
 8021870:	0599      	lsls	r1, r3, #22
 8021872:	d402      	bmi.n	802187a <_fflush_r+0x32>
 8021874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021876:	f7fd fb3a 	bl	801eeee <__retarget_lock_acquire_recursive>
 802187a:	4628      	mov	r0, r5
 802187c:	4621      	mov	r1, r4
 802187e:	f7ff ff5f 	bl	8021740 <__sflush_r>
 8021882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021884:	07da      	lsls	r2, r3, #31
 8021886:	4605      	mov	r5, r0
 8021888:	d4e4      	bmi.n	8021854 <_fflush_r+0xc>
 802188a:	89a3      	ldrh	r3, [r4, #12]
 802188c:	059b      	lsls	r3, r3, #22
 802188e:	d4e1      	bmi.n	8021854 <_fflush_r+0xc>
 8021890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021892:	f7fd fb2d 	bl	801eef0 <__retarget_lock_release_recursive>
 8021896:	e7dd      	b.n	8021854 <_fflush_r+0xc>

08021898 <fiprintf>:
 8021898:	b40e      	push	{r1, r2, r3}
 802189a:	b503      	push	{r0, r1, lr}
 802189c:	4601      	mov	r1, r0
 802189e:	ab03      	add	r3, sp, #12
 80218a0:	4805      	ldr	r0, [pc, #20]	@ (80218b8 <fiprintf+0x20>)
 80218a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80218a6:	6800      	ldr	r0, [r0, #0]
 80218a8:	9301      	str	r3, [sp, #4]
 80218aa:	f7ff fe31 	bl	8021510 <_vfiprintf_r>
 80218ae:	b002      	add	sp, #8
 80218b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80218b4:	b003      	add	sp, #12
 80218b6:	4770      	bx	lr
 80218b8:	20000148 	.word	0x20000148

080218bc <__swhatbuf_r>:
 80218bc:	b570      	push	{r4, r5, r6, lr}
 80218be:	460c      	mov	r4, r1
 80218c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218c4:	2900      	cmp	r1, #0
 80218c6:	b096      	sub	sp, #88	@ 0x58
 80218c8:	4615      	mov	r5, r2
 80218ca:	461e      	mov	r6, r3
 80218cc:	da0d      	bge.n	80218ea <__swhatbuf_r+0x2e>
 80218ce:	89a3      	ldrh	r3, [r4, #12]
 80218d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80218d4:	f04f 0100 	mov.w	r1, #0
 80218d8:	bf14      	ite	ne
 80218da:	2340      	movne	r3, #64	@ 0x40
 80218dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80218e0:	2000      	movs	r0, #0
 80218e2:	6031      	str	r1, [r6, #0]
 80218e4:	602b      	str	r3, [r5, #0]
 80218e6:	b016      	add	sp, #88	@ 0x58
 80218e8:	bd70      	pop	{r4, r5, r6, pc}
 80218ea:	466a      	mov	r2, sp
 80218ec:	f000 f85a 	bl	80219a4 <_fstat_r>
 80218f0:	2800      	cmp	r0, #0
 80218f2:	dbec      	blt.n	80218ce <__swhatbuf_r+0x12>
 80218f4:	9901      	ldr	r1, [sp, #4]
 80218f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80218fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80218fe:	4259      	negs	r1, r3
 8021900:	4159      	adcs	r1, r3
 8021902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021906:	e7eb      	b.n	80218e0 <__swhatbuf_r+0x24>

08021908 <__smakebuf_r>:
 8021908:	898b      	ldrh	r3, [r1, #12]
 802190a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802190c:	079d      	lsls	r5, r3, #30
 802190e:	4606      	mov	r6, r0
 8021910:	460c      	mov	r4, r1
 8021912:	d507      	bpl.n	8021924 <__smakebuf_r+0x1c>
 8021914:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021918:	6023      	str	r3, [r4, #0]
 802191a:	6123      	str	r3, [r4, #16]
 802191c:	2301      	movs	r3, #1
 802191e:	6163      	str	r3, [r4, #20]
 8021920:	b003      	add	sp, #12
 8021922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021924:	ab01      	add	r3, sp, #4
 8021926:	466a      	mov	r2, sp
 8021928:	f7ff ffc8 	bl	80218bc <__swhatbuf_r>
 802192c:	9f00      	ldr	r7, [sp, #0]
 802192e:	4605      	mov	r5, r0
 8021930:	4639      	mov	r1, r7
 8021932:	4630      	mov	r0, r6
 8021934:	f7fb ff7a 	bl	801d82c <_malloc_r>
 8021938:	b948      	cbnz	r0, 802194e <__smakebuf_r+0x46>
 802193a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802193e:	059a      	lsls	r2, r3, #22
 8021940:	d4ee      	bmi.n	8021920 <__smakebuf_r+0x18>
 8021942:	f023 0303 	bic.w	r3, r3, #3
 8021946:	f043 0302 	orr.w	r3, r3, #2
 802194a:	81a3      	strh	r3, [r4, #12]
 802194c:	e7e2      	b.n	8021914 <__smakebuf_r+0xc>
 802194e:	89a3      	ldrh	r3, [r4, #12]
 8021950:	6020      	str	r0, [r4, #0]
 8021952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021956:	81a3      	strh	r3, [r4, #12]
 8021958:	9b01      	ldr	r3, [sp, #4]
 802195a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802195e:	b15b      	cbz	r3, 8021978 <__smakebuf_r+0x70>
 8021960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021964:	4630      	mov	r0, r6
 8021966:	f000 f82f 	bl	80219c8 <_isatty_r>
 802196a:	b128      	cbz	r0, 8021978 <__smakebuf_r+0x70>
 802196c:	89a3      	ldrh	r3, [r4, #12]
 802196e:	f023 0303 	bic.w	r3, r3, #3
 8021972:	f043 0301 	orr.w	r3, r3, #1
 8021976:	81a3      	strh	r3, [r4, #12]
 8021978:	89a3      	ldrh	r3, [r4, #12]
 802197a:	431d      	orrs	r5, r3
 802197c:	81a5      	strh	r5, [r4, #12]
 802197e:	e7cf      	b.n	8021920 <__smakebuf_r+0x18>

08021980 <strncmp>:
 8021980:	b510      	push	{r4, lr}
 8021982:	b16a      	cbz	r2, 80219a0 <strncmp+0x20>
 8021984:	3901      	subs	r1, #1
 8021986:	1884      	adds	r4, r0, r2
 8021988:	f810 2b01 	ldrb.w	r2, [r0], #1
 802198c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021990:	429a      	cmp	r2, r3
 8021992:	d103      	bne.n	802199c <strncmp+0x1c>
 8021994:	42a0      	cmp	r0, r4
 8021996:	d001      	beq.n	802199c <strncmp+0x1c>
 8021998:	2a00      	cmp	r2, #0
 802199a:	d1f5      	bne.n	8021988 <strncmp+0x8>
 802199c:	1ad0      	subs	r0, r2, r3
 802199e:	bd10      	pop	{r4, pc}
 80219a0:	4610      	mov	r0, r2
 80219a2:	e7fc      	b.n	802199e <strncmp+0x1e>

080219a4 <_fstat_r>:
 80219a4:	b538      	push	{r3, r4, r5, lr}
 80219a6:	4d07      	ldr	r5, [pc, #28]	@ (80219c4 <_fstat_r+0x20>)
 80219a8:	2300      	movs	r3, #0
 80219aa:	4604      	mov	r4, r0
 80219ac:	4608      	mov	r0, r1
 80219ae:	4611      	mov	r1, r2
 80219b0:	602b      	str	r3, [r5, #0]
 80219b2:	f7e2 faa3 	bl	8003efc <_fstat>
 80219b6:	1c43      	adds	r3, r0, #1
 80219b8:	d102      	bne.n	80219c0 <_fstat_r+0x1c>
 80219ba:	682b      	ldr	r3, [r5, #0]
 80219bc:	b103      	cbz	r3, 80219c0 <_fstat_r+0x1c>
 80219be:	6023      	str	r3, [r4, #0]
 80219c0:	bd38      	pop	{r3, r4, r5, pc}
 80219c2:	bf00      	nop
 80219c4:	200037a8 	.word	0x200037a8

080219c8 <_isatty_r>:
 80219c8:	b538      	push	{r3, r4, r5, lr}
 80219ca:	4d06      	ldr	r5, [pc, #24]	@ (80219e4 <_isatty_r+0x1c>)
 80219cc:	2300      	movs	r3, #0
 80219ce:	4604      	mov	r4, r0
 80219d0:	4608      	mov	r0, r1
 80219d2:	602b      	str	r3, [r5, #0]
 80219d4:	f7e2 faa2 	bl	8003f1c <_isatty>
 80219d8:	1c43      	adds	r3, r0, #1
 80219da:	d102      	bne.n	80219e2 <_isatty_r+0x1a>
 80219dc:	682b      	ldr	r3, [r5, #0]
 80219de:	b103      	cbz	r3, 80219e2 <_isatty_r+0x1a>
 80219e0:	6023      	str	r3, [r4, #0]
 80219e2:	bd38      	pop	{r3, r4, r5, pc}
 80219e4:	200037a8 	.word	0x200037a8

080219e8 <nan>:
 80219e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80219f0 <nan+0x8>
 80219ec:	4770      	bx	lr
 80219ee:	bf00      	nop
 80219f0:	00000000 	.word	0x00000000
 80219f4:	7ff80000 	.word	0x7ff80000

080219f8 <abort>:
 80219f8:	b508      	push	{r3, lr}
 80219fa:	2006      	movs	r0, #6
 80219fc:	f000 fbc4 	bl	8022188 <raise>
 8021a00:	2001      	movs	r0, #1
 8021a02:	f7e2 fa2b 	bl	8003e5c <_exit>

08021a06 <_calloc_r>:
 8021a06:	b570      	push	{r4, r5, r6, lr}
 8021a08:	fba1 5402 	umull	r5, r4, r1, r2
 8021a0c:	b93c      	cbnz	r4, 8021a1e <_calloc_r+0x18>
 8021a0e:	4629      	mov	r1, r5
 8021a10:	f7fb ff0c 	bl	801d82c <_malloc_r>
 8021a14:	4606      	mov	r6, r0
 8021a16:	b928      	cbnz	r0, 8021a24 <_calloc_r+0x1e>
 8021a18:	2600      	movs	r6, #0
 8021a1a:	4630      	mov	r0, r6
 8021a1c:	bd70      	pop	{r4, r5, r6, pc}
 8021a1e:	220c      	movs	r2, #12
 8021a20:	6002      	str	r2, [r0, #0]
 8021a22:	e7f9      	b.n	8021a18 <_calloc_r+0x12>
 8021a24:	462a      	mov	r2, r5
 8021a26:	4621      	mov	r1, r4
 8021a28:	f7fd f954 	bl	801ecd4 <memset>
 8021a2c:	e7f5      	b.n	8021a1a <_calloc_r+0x14>

08021a2e <rshift>:
 8021a2e:	6903      	ldr	r3, [r0, #16]
 8021a30:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021a38:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021a3c:	f100 0414 	add.w	r4, r0, #20
 8021a40:	dd45      	ble.n	8021ace <rshift+0xa0>
 8021a42:	f011 011f 	ands.w	r1, r1, #31
 8021a46:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021a4a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021a4e:	d10c      	bne.n	8021a6a <rshift+0x3c>
 8021a50:	f100 0710 	add.w	r7, r0, #16
 8021a54:	4629      	mov	r1, r5
 8021a56:	42b1      	cmp	r1, r6
 8021a58:	d334      	bcc.n	8021ac4 <rshift+0x96>
 8021a5a:	1a9b      	subs	r3, r3, r2
 8021a5c:	009b      	lsls	r3, r3, #2
 8021a5e:	1eea      	subs	r2, r5, #3
 8021a60:	4296      	cmp	r6, r2
 8021a62:	bf38      	it	cc
 8021a64:	2300      	movcc	r3, #0
 8021a66:	4423      	add	r3, r4
 8021a68:	e015      	b.n	8021a96 <rshift+0x68>
 8021a6a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021a6e:	f1c1 0820 	rsb	r8, r1, #32
 8021a72:	40cf      	lsrs	r7, r1
 8021a74:	f105 0e04 	add.w	lr, r5, #4
 8021a78:	46a1      	mov	r9, r4
 8021a7a:	4576      	cmp	r6, lr
 8021a7c:	46f4      	mov	ip, lr
 8021a7e:	d815      	bhi.n	8021aac <rshift+0x7e>
 8021a80:	1a9a      	subs	r2, r3, r2
 8021a82:	0092      	lsls	r2, r2, #2
 8021a84:	3a04      	subs	r2, #4
 8021a86:	3501      	adds	r5, #1
 8021a88:	42ae      	cmp	r6, r5
 8021a8a:	bf38      	it	cc
 8021a8c:	2200      	movcc	r2, #0
 8021a8e:	18a3      	adds	r3, r4, r2
 8021a90:	50a7      	str	r7, [r4, r2]
 8021a92:	b107      	cbz	r7, 8021a96 <rshift+0x68>
 8021a94:	3304      	adds	r3, #4
 8021a96:	1b1a      	subs	r2, r3, r4
 8021a98:	42a3      	cmp	r3, r4
 8021a9a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021a9e:	bf08      	it	eq
 8021aa0:	2300      	moveq	r3, #0
 8021aa2:	6102      	str	r2, [r0, #16]
 8021aa4:	bf08      	it	eq
 8021aa6:	6143      	streq	r3, [r0, #20]
 8021aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021aac:	f8dc c000 	ldr.w	ip, [ip]
 8021ab0:	fa0c fc08 	lsl.w	ip, ip, r8
 8021ab4:	ea4c 0707 	orr.w	r7, ip, r7
 8021ab8:	f849 7b04 	str.w	r7, [r9], #4
 8021abc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021ac0:	40cf      	lsrs	r7, r1
 8021ac2:	e7da      	b.n	8021a7a <rshift+0x4c>
 8021ac4:	f851 cb04 	ldr.w	ip, [r1], #4
 8021ac8:	f847 cf04 	str.w	ip, [r7, #4]!
 8021acc:	e7c3      	b.n	8021a56 <rshift+0x28>
 8021ace:	4623      	mov	r3, r4
 8021ad0:	e7e1      	b.n	8021a96 <rshift+0x68>

08021ad2 <__hexdig_fun>:
 8021ad2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021ad6:	2b09      	cmp	r3, #9
 8021ad8:	d802      	bhi.n	8021ae0 <__hexdig_fun+0xe>
 8021ada:	3820      	subs	r0, #32
 8021adc:	b2c0      	uxtb	r0, r0
 8021ade:	4770      	bx	lr
 8021ae0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021ae4:	2b05      	cmp	r3, #5
 8021ae6:	d801      	bhi.n	8021aec <__hexdig_fun+0x1a>
 8021ae8:	3847      	subs	r0, #71	@ 0x47
 8021aea:	e7f7      	b.n	8021adc <__hexdig_fun+0xa>
 8021aec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021af0:	2b05      	cmp	r3, #5
 8021af2:	d801      	bhi.n	8021af8 <__hexdig_fun+0x26>
 8021af4:	3827      	subs	r0, #39	@ 0x27
 8021af6:	e7f1      	b.n	8021adc <__hexdig_fun+0xa>
 8021af8:	2000      	movs	r0, #0
 8021afa:	4770      	bx	lr

08021afc <__gethex>:
 8021afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b00:	b085      	sub	sp, #20
 8021b02:	468a      	mov	sl, r1
 8021b04:	9302      	str	r3, [sp, #8]
 8021b06:	680b      	ldr	r3, [r1, #0]
 8021b08:	9001      	str	r0, [sp, #4]
 8021b0a:	4690      	mov	r8, r2
 8021b0c:	1c9c      	adds	r4, r3, #2
 8021b0e:	46a1      	mov	r9, r4
 8021b10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021b14:	2830      	cmp	r0, #48	@ 0x30
 8021b16:	d0fa      	beq.n	8021b0e <__gethex+0x12>
 8021b18:	eba9 0303 	sub.w	r3, r9, r3
 8021b1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8021b20:	f7ff ffd7 	bl	8021ad2 <__hexdig_fun>
 8021b24:	4605      	mov	r5, r0
 8021b26:	2800      	cmp	r0, #0
 8021b28:	d168      	bne.n	8021bfc <__gethex+0x100>
 8021b2a:	49a0      	ldr	r1, [pc, #640]	@ (8021dac <__gethex+0x2b0>)
 8021b2c:	2201      	movs	r2, #1
 8021b2e:	4648      	mov	r0, r9
 8021b30:	f7ff ff26 	bl	8021980 <strncmp>
 8021b34:	4607      	mov	r7, r0
 8021b36:	2800      	cmp	r0, #0
 8021b38:	d167      	bne.n	8021c0a <__gethex+0x10e>
 8021b3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021b3e:	4626      	mov	r6, r4
 8021b40:	f7ff ffc7 	bl	8021ad2 <__hexdig_fun>
 8021b44:	2800      	cmp	r0, #0
 8021b46:	d062      	beq.n	8021c0e <__gethex+0x112>
 8021b48:	4623      	mov	r3, r4
 8021b4a:	7818      	ldrb	r0, [r3, #0]
 8021b4c:	2830      	cmp	r0, #48	@ 0x30
 8021b4e:	4699      	mov	r9, r3
 8021b50:	f103 0301 	add.w	r3, r3, #1
 8021b54:	d0f9      	beq.n	8021b4a <__gethex+0x4e>
 8021b56:	f7ff ffbc 	bl	8021ad2 <__hexdig_fun>
 8021b5a:	fab0 f580 	clz	r5, r0
 8021b5e:	096d      	lsrs	r5, r5, #5
 8021b60:	f04f 0b01 	mov.w	fp, #1
 8021b64:	464a      	mov	r2, r9
 8021b66:	4616      	mov	r6, r2
 8021b68:	3201      	adds	r2, #1
 8021b6a:	7830      	ldrb	r0, [r6, #0]
 8021b6c:	f7ff ffb1 	bl	8021ad2 <__hexdig_fun>
 8021b70:	2800      	cmp	r0, #0
 8021b72:	d1f8      	bne.n	8021b66 <__gethex+0x6a>
 8021b74:	498d      	ldr	r1, [pc, #564]	@ (8021dac <__gethex+0x2b0>)
 8021b76:	2201      	movs	r2, #1
 8021b78:	4630      	mov	r0, r6
 8021b7a:	f7ff ff01 	bl	8021980 <strncmp>
 8021b7e:	2800      	cmp	r0, #0
 8021b80:	d13f      	bne.n	8021c02 <__gethex+0x106>
 8021b82:	b944      	cbnz	r4, 8021b96 <__gethex+0x9a>
 8021b84:	1c74      	adds	r4, r6, #1
 8021b86:	4622      	mov	r2, r4
 8021b88:	4616      	mov	r6, r2
 8021b8a:	3201      	adds	r2, #1
 8021b8c:	7830      	ldrb	r0, [r6, #0]
 8021b8e:	f7ff ffa0 	bl	8021ad2 <__hexdig_fun>
 8021b92:	2800      	cmp	r0, #0
 8021b94:	d1f8      	bne.n	8021b88 <__gethex+0x8c>
 8021b96:	1ba4      	subs	r4, r4, r6
 8021b98:	00a7      	lsls	r7, r4, #2
 8021b9a:	7833      	ldrb	r3, [r6, #0]
 8021b9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021ba0:	2b50      	cmp	r3, #80	@ 0x50
 8021ba2:	d13e      	bne.n	8021c22 <__gethex+0x126>
 8021ba4:	7873      	ldrb	r3, [r6, #1]
 8021ba6:	2b2b      	cmp	r3, #43	@ 0x2b
 8021ba8:	d033      	beq.n	8021c12 <__gethex+0x116>
 8021baa:	2b2d      	cmp	r3, #45	@ 0x2d
 8021bac:	d034      	beq.n	8021c18 <__gethex+0x11c>
 8021bae:	1c71      	adds	r1, r6, #1
 8021bb0:	2400      	movs	r4, #0
 8021bb2:	7808      	ldrb	r0, [r1, #0]
 8021bb4:	f7ff ff8d 	bl	8021ad2 <__hexdig_fun>
 8021bb8:	1e43      	subs	r3, r0, #1
 8021bba:	b2db      	uxtb	r3, r3
 8021bbc:	2b18      	cmp	r3, #24
 8021bbe:	d830      	bhi.n	8021c22 <__gethex+0x126>
 8021bc0:	f1a0 0210 	sub.w	r2, r0, #16
 8021bc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021bc8:	f7ff ff83 	bl	8021ad2 <__hexdig_fun>
 8021bcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8021bd0:	fa5f fc8c 	uxtb.w	ip, ip
 8021bd4:	f1bc 0f18 	cmp.w	ip, #24
 8021bd8:	f04f 030a 	mov.w	r3, #10
 8021bdc:	d91e      	bls.n	8021c1c <__gethex+0x120>
 8021bde:	b104      	cbz	r4, 8021be2 <__gethex+0xe6>
 8021be0:	4252      	negs	r2, r2
 8021be2:	4417      	add	r7, r2
 8021be4:	f8ca 1000 	str.w	r1, [sl]
 8021be8:	b1ed      	cbz	r5, 8021c26 <__gethex+0x12a>
 8021bea:	f1bb 0f00 	cmp.w	fp, #0
 8021bee:	bf0c      	ite	eq
 8021bf0:	2506      	moveq	r5, #6
 8021bf2:	2500      	movne	r5, #0
 8021bf4:	4628      	mov	r0, r5
 8021bf6:	b005      	add	sp, #20
 8021bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bfc:	2500      	movs	r5, #0
 8021bfe:	462c      	mov	r4, r5
 8021c00:	e7b0      	b.n	8021b64 <__gethex+0x68>
 8021c02:	2c00      	cmp	r4, #0
 8021c04:	d1c7      	bne.n	8021b96 <__gethex+0x9a>
 8021c06:	4627      	mov	r7, r4
 8021c08:	e7c7      	b.n	8021b9a <__gethex+0x9e>
 8021c0a:	464e      	mov	r6, r9
 8021c0c:	462f      	mov	r7, r5
 8021c0e:	2501      	movs	r5, #1
 8021c10:	e7c3      	b.n	8021b9a <__gethex+0x9e>
 8021c12:	2400      	movs	r4, #0
 8021c14:	1cb1      	adds	r1, r6, #2
 8021c16:	e7cc      	b.n	8021bb2 <__gethex+0xb6>
 8021c18:	2401      	movs	r4, #1
 8021c1a:	e7fb      	b.n	8021c14 <__gethex+0x118>
 8021c1c:	fb03 0002 	mla	r0, r3, r2, r0
 8021c20:	e7ce      	b.n	8021bc0 <__gethex+0xc4>
 8021c22:	4631      	mov	r1, r6
 8021c24:	e7de      	b.n	8021be4 <__gethex+0xe8>
 8021c26:	eba6 0309 	sub.w	r3, r6, r9
 8021c2a:	3b01      	subs	r3, #1
 8021c2c:	4629      	mov	r1, r5
 8021c2e:	2b07      	cmp	r3, #7
 8021c30:	dc0a      	bgt.n	8021c48 <__gethex+0x14c>
 8021c32:	9801      	ldr	r0, [sp, #4]
 8021c34:	f7fe f82e 	bl	801fc94 <_Balloc>
 8021c38:	4604      	mov	r4, r0
 8021c3a:	b940      	cbnz	r0, 8021c4e <__gethex+0x152>
 8021c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8021db0 <__gethex+0x2b4>)
 8021c3e:	4602      	mov	r2, r0
 8021c40:	21e4      	movs	r1, #228	@ 0xe4
 8021c42:	485c      	ldr	r0, [pc, #368]	@ (8021db4 <__gethex+0x2b8>)
 8021c44:	f7fd f972 	bl	801ef2c <__assert_func>
 8021c48:	3101      	adds	r1, #1
 8021c4a:	105b      	asrs	r3, r3, #1
 8021c4c:	e7ef      	b.n	8021c2e <__gethex+0x132>
 8021c4e:	f100 0a14 	add.w	sl, r0, #20
 8021c52:	2300      	movs	r3, #0
 8021c54:	4655      	mov	r5, sl
 8021c56:	469b      	mov	fp, r3
 8021c58:	45b1      	cmp	r9, r6
 8021c5a:	d337      	bcc.n	8021ccc <__gethex+0x1d0>
 8021c5c:	f845 bb04 	str.w	fp, [r5], #4
 8021c60:	eba5 050a 	sub.w	r5, r5, sl
 8021c64:	10ad      	asrs	r5, r5, #2
 8021c66:	6125      	str	r5, [r4, #16]
 8021c68:	4658      	mov	r0, fp
 8021c6a:	f7fe f905 	bl	801fe78 <__hi0bits>
 8021c6e:	016d      	lsls	r5, r5, #5
 8021c70:	f8d8 6000 	ldr.w	r6, [r8]
 8021c74:	1a2d      	subs	r5, r5, r0
 8021c76:	42b5      	cmp	r5, r6
 8021c78:	dd54      	ble.n	8021d24 <__gethex+0x228>
 8021c7a:	1bad      	subs	r5, r5, r6
 8021c7c:	4629      	mov	r1, r5
 8021c7e:	4620      	mov	r0, r4
 8021c80:	f7fe fc99 	bl	80205b6 <__any_on>
 8021c84:	4681      	mov	r9, r0
 8021c86:	b178      	cbz	r0, 8021ca8 <__gethex+0x1ac>
 8021c88:	1e6b      	subs	r3, r5, #1
 8021c8a:	1159      	asrs	r1, r3, #5
 8021c8c:	f003 021f 	and.w	r2, r3, #31
 8021c90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021c94:	f04f 0901 	mov.w	r9, #1
 8021c98:	fa09 f202 	lsl.w	r2, r9, r2
 8021c9c:	420a      	tst	r2, r1
 8021c9e:	d003      	beq.n	8021ca8 <__gethex+0x1ac>
 8021ca0:	454b      	cmp	r3, r9
 8021ca2:	dc36      	bgt.n	8021d12 <__gethex+0x216>
 8021ca4:	f04f 0902 	mov.w	r9, #2
 8021ca8:	4629      	mov	r1, r5
 8021caa:	4620      	mov	r0, r4
 8021cac:	f7ff febf 	bl	8021a2e <rshift>
 8021cb0:	442f      	add	r7, r5
 8021cb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021cb6:	42bb      	cmp	r3, r7
 8021cb8:	da42      	bge.n	8021d40 <__gethex+0x244>
 8021cba:	9801      	ldr	r0, [sp, #4]
 8021cbc:	4621      	mov	r1, r4
 8021cbe:	f7fe f829 	bl	801fd14 <_Bfree>
 8021cc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021cc4:	2300      	movs	r3, #0
 8021cc6:	6013      	str	r3, [r2, #0]
 8021cc8:	25a3      	movs	r5, #163	@ 0xa3
 8021cca:	e793      	b.n	8021bf4 <__gethex+0xf8>
 8021ccc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021cd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8021cd2:	d012      	beq.n	8021cfa <__gethex+0x1fe>
 8021cd4:	2b20      	cmp	r3, #32
 8021cd6:	d104      	bne.n	8021ce2 <__gethex+0x1e6>
 8021cd8:	f845 bb04 	str.w	fp, [r5], #4
 8021cdc:	f04f 0b00 	mov.w	fp, #0
 8021ce0:	465b      	mov	r3, fp
 8021ce2:	7830      	ldrb	r0, [r6, #0]
 8021ce4:	9303      	str	r3, [sp, #12]
 8021ce6:	f7ff fef4 	bl	8021ad2 <__hexdig_fun>
 8021cea:	9b03      	ldr	r3, [sp, #12]
 8021cec:	f000 000f 	and.w	r0, r0, #15
 8021cf0:	4098      	lsls	r0, r3
 8021cf2:	ea4b 0b00 	orr.w	fp, fp, r0
 8021cf6:	3304      	adds	r3, #4
 8021cf8:	e7ae      	b.n	8021c58 <__gethex+0x15c>
 8021cfa:	45b1      	cmp	r9, r6
 8021cfc:	d8ea      	bhi.n	8021cd4 <__gethex+0x1d8>
 8021cfe:	492b      	ldr	r1, [pc, #172]	@ (8021dac <__gethex+0x2b0>)
 8021d00:	9303      	str	r3, [sp, #12]
 8021d02:	2201      	movs	r2, #1
 8021d04:	4630      	mov	r0, r6
 8021d06:	f7ff fe3b 	bl	8021980 <strncmp>
 8021d0a:	9b03      	ldr	r3, [sp, #12]
 8021d0c:	2800      	cmp	r0, #0
 8021d0e:	d1e1      	bne.n	8021cd4 <__gethex+0x1d8>
 8021d10:	e7a2      	b.n	8021c58 <__gethex+0x15c>
 8021d12:	1ea9      	subs	r1, r5, #2
 8021d14:	4620      	mov	r0, r4
 8021d16:	f7fe fc4e 	bl	80205b6 <__any_on>
 8021d1a:	2800      	cmp	r0, #0
 8021d1c:	d0c2      	beq.n	8021ca4 <__gethex+0x1a8>
 8021d1e:	f04f 0903 	mov.w	r9, #3
 8021d22:	e7c1      	b.n	8021ca8 <__gethex+0x1ac>
 8021d24:	da09      	bge.n	8021d3a <__gethex+0x23e>
 8021d26:	1b75      	subs	r5, r6, r5
 8021d28:	4621      	mov	r1, r4
 8021d2a:	9801      	ldr	r0, [sp, #4]
 8021d2c:	462a      	mov	r2, r5
 8021d2e:	f7fe fa09 	bl	8020144 <__lshift>
 8021d32:	1b7f      	subs	r7, r7, r5
 8021d34:	4604      	mov	r4, r0
 8021d36:	f100 0a14 	add.w	sl, r0, #20
 8021d3a:	f04f 0900 	mov.w	r9, #0
 8021d3e:	e7b8      	b.n	8021cb2 <__gethex+0x1b6>
 8021d40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021d44:	42bd      	cmp	r5, r7
 8021d46:	dd6f      	ble.n	8021e28 <__gethex+0x32c>
 8021d48:	1bed      	subs	r5, r5, r7
 8021d4a:	42ae      	cmp	r6, r5
 8021d4c:	dc34      	bgt.n	8021db8 <__gethex+0x2bc>
 8021d4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021d52:	2b02      	cmp	r3, #2
 8021d54:	d022      	beq.n	8021d9c <__gethex+0x2a0>
 8021d56:	2b03      	cmp	r3, #3
 8021d58:	d024      	beq.n	8021da4 <__gethex+0x2a8>
 8021d5a:	2b01      	cmp	r3, #1
 8021d5c:	d115      	bne.n	8021d8a <__gethex+0x28e>
 8021d5e:	42ae      	cmp	r6, r5
 8021d60:	d113      	bne.n	8021d8a <__gethex+0x28e>
 8021d62:	2e01      	cmp	r6, #1
 8021d64:	d10b      	bne.n	8021d7e <__gethex+0x282>
 8021d66:	9a02      	ldr	r2, [sp, #8]
 8021d68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021d6c:	6013      	str	r3, [r2, #0]
 8021d6e:	2301      	movs	r3, #1
 8021d70:	6123      	str	r3, [r4, #16]
 8021d72:	f8ca 3000 	str.w	r3, [sl]
 8021d76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d78:	2562      	movs	r5, #98	@ 0x62
 8021d7a:	601c      	str	r4, [r3, #0]
 8021d7c:	e73a      	b.n	8021bf4 <__gethex+0xf8>
 8021d7e:	1e71      	subs	r1, r6, #1
 8021d80:	4620      	mov	r0, r4
 8021d82:	f7fe fc18 	bl	80205b6 <__any_on>
 8021d86:	2800      	cmp	r0, #0
 8021d88:	d1ed      	bne.n	8021d66 <__gethex+0x26a>
 8021d8a:	9801      	ldr	r0, [sp, #4]
 8021d8c:	4621      	mov	r1, r4
 8021d8e:	f7fd ffc1 	bl	801fd14 <_Bfree>
 8021d92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d94:	2300      	movs	r3, #0
 8021d96:	6013      	str	r3, [r2, #0]
 8021d98:	2550      	movs	r5, #80	@ 0x50
 8021d9a:	e72b      	b.n	8021bf4 <__gethex+0xf8>
 8021d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d1f3      	bne.n	8021d8a <__gethex+0x28e>
 8021da2:	e7e0      	b.n	8021d66 <__gethex+0x26a>
 8021da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	d1dd      	bne.n	8021d66 <__gethex+0x26a>
 8021daa:	e7ee      	b.n	8021d8a <__gethex+0x28e>
 8021dac:	080257f0 	.word	0x080257f0
 8021db0:	08025688 	.word	0x08025688
 8021db4:	08025861 	.word	0x08025861
 8021db8:	1e6f      	subs	r7, r5, #1
 8021dba:	f1b9 0f00 	cmp.w	r9, #0
 8021dbe:	d130      	bne.n	8021e22 <__gethex+0x326>
 8021dc0:	b127      	cbz	r7, 8021dcc <__gethex+0x2d0>
 8021dc2:	4639      	mov	r1, r7
 8021dc4:	4620      	mov	r0, r4
 8021dc6:	f7fe fbf6 	bl	80205b6 <__any_on>
 8021dca:	4681      	mov	r9, r0
 8021dcc:	117a      	asrs	r2, r7, #5
 8021dce:	2301      	movs	r3, #1
 8021dd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021dd4:	f007 071f 	and.w	r7, r7, #31
 8021dd8:	40bb      	lsls	r3, r7
 8021dda:	4213      	tst	r3, r2
 8021ddc:	4629      	mov	r1, r5
 8021dde:	4620      	mov	r0, r4
 8021de0:	bf18      	it	ne
 8021de2:	f049 0902 	orrne.w	r9, r9, #2
 8021de6:	f7ff fe22 	bl	8021a2e <rshift>
 8021dea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021dee:	1b76      	subs	r6, r6, r5
 8021df0:	2502      	movs	r5, #2
 8021df2:	f1b9 0f00 	cmp.w	r9, #0
 8021df6:	d047      	beq.n	8021e88 <__gethex+0x38c>
 8021df8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021dfc:	2b02      	cmp	r3, #2
 8021dfe:	d015      	beq.n	8021e2c <__gethex+0x330>
 8021e00:	2b03      	cmp	r3, #3
 8021e02:	d017      	beq.n	8021e34 <__gethex+0x338>
 8021e04:	2b01      	cmp	r3, #1
 8021e06:	d109      	bne.n	8021e1c <__gethex+0x320>
 8021e08:	f019 0f02 	tst.w	r9, #2
 8021e0c:	d006      	beq.n	8021e1c <__gethex+0x320>
 8021e0e:	f8da 3000 	ldr.w	r3, [sl]
 8021e12:	ea49 0903 	orr.w	r9, r9, r3
 8021e16:	f019 0f01 	tst.w	r9, #1
 8021e1a:	d10e      	bne.n	8021e3a <__gethex+0x33e>
 8021e1c:	f045 0510 	orr.w	r5, r5, #16
 8021e20:	e032      	b.n	8021e88 <__gethex+0x38c>
 8021e22:	f04f 0901 	mov.w	r9, #1
 8021e26:	e7d1      	b.n	8021dcc <__gethex+0x2d0>
 8021e28:	2501      	movs	r5, #1
 8021e2a:	e7e2      	b.n	8021df2 <__gethex+0x2f6>
 8021e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e2e:	f1c3 0301 	rsb	r3, r3, #1
 8021e32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	d0f0      	beq.n	8021e1c <__gethex+0x320>
 8021e3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021e3e:	f104 0314 	add.w	r3, r4, #20
 8021e42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021e46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021e4a:	f04f 0c00 	mov.w	ip, #0
 8021e4e:	4618      	mov	r0, r3
 8021e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021e58:	d01b      	beq.n	8021e92 <__gethex+0x396>
 8021e5a:	3201      	adds	r2, #1
 8021e5c:	6002      	str	r2, [r0, #0]
 8021e5e:	2d02      	cmp	r5, #2
 8021e60:	f104 0314 	add.w	r3, r4, #20
 8021e64:	d13c      	bne.n	8021ee0 <__gethex+0x3e4>
 8021e66:	f8d8 2000 	ldr.w	r2, [r8]
 8021e6a:	3a01      	subs	r2, #1
 8021e6c:	42b2      	cmp	r2, r6
 8021e6e:	d109      	bne.n	8021e84 <__gethex+0x388>
 8021e70:	1171      	asrs	r1, r6, #5
 8021e72:	2201      	movs	r2, #1
 8021e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021e78:	f006 061f 	and.w	r6, r6, #31
 8021e7c:	fa02 f606 	lsl.w	r6, r2, r6
 8021e80:	421e      	tst	r6, r3
 8021e82:	d13a      	bne.n	8021efa <__gethex+0x3fe>
 8021e84:	f045 0520 	orr.w	r5, r5, #32
 8021e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e8a:	601c      	str	r4, [r3, #0]
 8021e8c:	9b02      	ldr	r3, [sp, #8]
 8021e8e:	601f      	str	r7, [r3, #0]
 8021e90:	e6b0      	b.n	8021bf4 <__gethex+0xf8>
 8021e92:	4299      	cmp	r1, r3
 8021e94:	f843 cc04 	str.w	ip, [r3, #-4]
 8021e98:	d8d9      	bhi.n	8021e4e <__gethex+0x352>
 8021e9a:	68a3      	ldr	r3, [r4, #8]
 8021e9c:	459b      	cmp	fp, r3
 8021e9e:	db17      	blt.n	8021ed0 <__gethex+0x3d4>
 8021ea0:	6861      	ldr	r1, [r4, #4]
 8021ea2:	9801      	ldr	r0, [sp, #4]
 8021ea4:	3101      	adds	r1, #1
 8021ea6:	f7fd fef5 	bl	801fc94 <_Balloc>
 8021eaa:	4681      	mov	r9, r0
 8021eac:	b918      	cbnz	r0, 8021eb6 <__gethex+0x3ba>
 8021eae:	4b1a      	ldr	r3, [pc, #104]	@ (8021f18 <__gethex+0x41c>)
 8021eb0:	4602      	mov	r2, r0
 8021eb2:	2184      	movs	r1, #132	@ 0x84
 8021eb4:	e6c5      	b.n	8021c42 <__gethex+0x146>
 8021eb6:	6922      	ldr	r2, [r4, #16]
 8021eb8:	3202      	adds	r2, #2
 8021eba:	f104 010c 	add.w	r1, r4, #12
 8021ebe:	0092      	lsls	r2, r2, #2
 8021ec0:	300c      	adds	r0, #12
 8021ec2:	f7fd f81e 	bl	801ef02 <memcpy>
 8021ec6:	4621      	mov	r1, r4
 8021ec8:	9801      	ldr	r0, [sp, #4]
 8021eca:	f7fd ff23 	bl	801fd14 <_Bfree>
 8021ece:	464c      	mov	r4, r9
 8021ed0:	6923      	ldr	r3, [r4, #16]
 8021ed2:	1c5a      	adds	r2, r3, #1
 8021ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021ed8:	6122      	str	r2, [r4, #16]
 8021eda:	2201      	movs	r2, #1
 8021edc:	615a      	str	r2, [r3, #20]
 8021ede:	e7be      	b.n	8021e5e <__gethex+0x362>
 8021ee0:	6922      	ldr	r2, [r4, #16]
 8021ee2:	455a      	cmp	r2, fp
 8021ee4:	dd0b      	ble.n	8021efe <__gethex+0x402>
 8021ee6:	2101      	movs	r1, #1
 8021ee8:	4620      	mov	r0, r4
 8021eea:	f7ff fda0 	bl	8021a2e <rshift>
 8021eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021ef2:	3701      	adds	r7, #1
 8021ef4:	42bb      	cmp	r3, r7
 8021ef6:	f6ff aee0 	blt.w	8021cba <__gethex+0x1be>
 8021efa:	2501      	movs	r5, #1
 8021efc:	e7c2      	b.n	8021e84 <__gethex+0x388>
 8021efe:	f016 061f 	ands.w	r6, r6, #31
 8021f02:	d0fa      	beq.n	8021efa <__gethex+0x3fe>
 8021f04:	4453      	add	r3, sl
 8021f06:	f1c6 0620 	rsb	r6, r6, #32
 8021f0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021f0e:	f7fd ffb3 	bl	801fe78 <__hi0bits>
 8021f12:	42b0      	cmp	r0, r6
 8021f14:	dbe7      	blt.n	8021ee6 <__gethex+0x3ea>
 8021f16:	e7f0      	b.n	8021efa <__gethex+0x3fe>
 8021f18:	08025688 	.word	0x08025688

08021f1c <L_shift>:
 8021f1c:	f1c2 0208 	rsb	r2, r2, #8
 8021f20:	0092      	lsls	r2, r2, #2
 8021f22:	b570      	push	{r4, r5, r6, lr}
 8021f24:	f1c2 0620 	rsb	r6, r2, #32
 8021f28:	6843      	ldr	r3, [r0, #4]
 8021f2a:	6804      	ldr	r4, [r0, #0]
 8021f2c:	fa03 f506 	lsl.w	r5, r3, r6
 8021f30:	432c      	orrs	r4, r5
 8021f32:	40d3      	lsrs	r3, r2
 8021f34:	6004      	str	r4, [r0, #0]
 8021f36:	f840 3f04 	str.w	r3, [r0, #4]!
 8021f3a:	4288      	cmp	r0, r1
 8021f3c:	d3f4      	bcc.n	8021f28 <L_shift+0xc>
 8021f3e:	bd70      	pop	{r4, r5, r6, pc}

08021f40 <__match>:
 8021f40:	b530      	push	{r4, r5, lr}
 8021f42:	6803      	ldr	r3, [r0, #0]
 8021f44:	3301      	adds	r3, #1
 8021f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021f4a:	b914      	cbnz	r4, 8021f52 <__match+0x12>
 8021f4c:	6003      	str	r3, [r0, #0]
 8021f4e:	2001      	movs	r0, #1
 8021f50:	bd30      	pop	{r4, r5, pc}
 8021f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8021f5a:	2d19      	cmp	r5, #25
 8021f5c:	bf98      	it	ls
 8021f5e:	3220      	addls	r2, #32
 8021f60:	42a2      	cmp	r2, r4
 8021f62:	d0f0      	beq.n	8021f46 <__match+0x6>
 8021f64:	2000      	movs	r0, #0
 8021f66:	e7f3      	b.n	8021f50 <__match+0x10>

08021f68 <__hexnan>:
 8021f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f6c:	680b      	ldr	r3, [r1, #0]
 8021f6e:	6801      	ldr	r1, [r0, #0]
 8021f70:	115e      	asrs	r6, r3, #5
 8021f72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021f76:	f013 031f 	ands.w	r3, r3, #31
 8021f7a:	b087      	sub	sp, #28
 8021f7c:	bf18      	it	ne
 8021f7e:	3604      	addne	r6, #4
 8021f80:	2500      	movs	r5, #0
 8021f82:	1f37      	subs	r7, r6, #4
 8021f84:	4682      	mov	sl, r0
 8021f86:	4690      	mov	r8, r2
 8021f88:	9301      	str	r3, [sp, #4]
 8021f8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8021f8e:	46b9      	mov	r9, r7
 8021f90:	463c      	mov	r4, r7
 8021f92:	9502      	str	r5, [sp, #8]
 8021f94:	46ab      	mov	fp, r5
 8021f96:	784a      	ldrb	r2, [r1, #1]
 8021f98:	1c4b      	adds	r3, r1, #1
 8021f9a:	9303      	str	r3, [sp, #12]
 8021f9c:	b342      	cbz	r2, 8021ff0 <__hexnan+0x88>
 8021f9e:	4610      	mov	r0, r2
 8021fa0:	9105      	str	r1, [sp, #20]
 8021fa2:	9204      	str	r2, [sp, #16]
 8021fa4:	f7ff fd95 	bl	8021ad2 <__hexdig_fun>
 8021fa8:	2800      	cmp	r0, #0
 8021faa:	d151      	bne.n	8022050 <__hexnan+0xe8>
 8021fac:	9a04      	ldr	r2, [sp, #16]
 8021fae:	9905      	ldr	r1, [sp, #20]
 8021fb0:	2a20      	cmp	r2, #32
 8021fb2:	d818      	bhi.n	8021fe6 <__hexnan+0x7e>
 8021fb4:	9b02      	ldr	r3, [sp, #8]
 8021fb6:	459b      	cmp	fp, r3
 8021fb8:	dd13      	ble.n	8021fe2 <__hexnan+0x7a>
 8021fba:	454c      	cmp	r4, r9
 8021fbc:	d206      	bcs.n	8021fcc <__hexnan+0x64>
 8021fbe:	2d07      	cmp	r5, #7
 8021fc0:	dc04      	bgt.n	8021fcc <__hexnan+0x64>
 8021fc2:	462a      	mov	r2, r5
 8021fc4:	4649      	mov	r1, r9
 8021fc6:	4620      	mov	r0, r4
 8021fc8:	f7ff ffa8 	bl	8021f1c <L_shift>
 8021fcc:	4544      	cmp	r4, r8
 8021fce:	d952      	bls.n	8022076 <__hexnan+0x10e>
 8021fd0:	2300      	movs	r3, #0
 8021fd2:	f1a4 0904 	sub.w	r9, r4, #4
 8021fd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8021fda:	f8cd b008 	str.w	fp, [sp, #8]
 8021fde:	464c      	mov	r4, r9
 8021fe0:	461d      	mov	r5, r3
 8021fe2:	9903      	ldr	r1, [sp, #12]
 8021fe4:	e7d7      	b.n	8021f96 <__hexnan+0x2e>
 8021fe6:	2a29      	cmp	r2, #41	@ 0x29
 8021fe8:	d157      	bne.n	802209a <__hexnan+0x132>
 8021fea:	3102      	adds	r1, #2
 8021fec:	f8ca 1000 	str.w	r1, [sl]
 8021ff0:	f1bb 0f00 	cmp.w	fp, #0
 8021ff4:	d051      	beq.n	802209a <__hexnan+0x132>
 8021ff6:	454c      	cmp	r4, r9
 8021ff8:	d206      	bcs.n	8022008 <__hexnan+0xa0>
 8021ffa:	2d07      	cmp	r5, #7
 8021ffc:	dc04      	bgt.n	8022008 <__hexnan+0xa0>
 8021ffe:	462a      	mov	r2, r5
 8022000:	4649      	mov	r1, r9
 8022002:	4620      	mov	r0, r4
 8022004:	f7ff ff8a 	bl	8021f1c <L_shift>
 8022008:	4544      	cmp	r4, r8
 802200a:	d936      	bls.n	802207a <__hexnan+0x112>
 802200c:	f1a8 0204 	sub.w	r2, r8, #4
 8022010:	4623      	mov	r3, r4
 8022012:	f853 1b04 	ldr.w	r1, [r3], #4
 8022016:	f842 1f04 	str.w	r1, [r2, #4]!
 802201a:	429f      	cmp	r7, r3
 802201c:	d2f9      	bcs.n	8022012 <__hexnan+0xaa>
 802201e:	1b3b      	subs	r3, r7, r4
 8022020:	f023 0303 	bic.w	r3, r3, #3
 8022024:	3304      	adds	r3, #4
 8022026:	3401      	adds	r4, #1
 8022028:	3e03      	subs	r6, #3
 802202a:	42b4      	cmp	r4, r6
 802202c:	bf88      	it	hi
 802202e:	2304      	movhi	r3, #4
 8022030:	4443      	add	r3, r8
 8022032:	2200      	movs	r2, #0
 8022034:	f843 2b04 	str.w	r2, [r3], #4
 8022038:	429f      	cmp	r7, r3
 802203a:	d2fb      	bcs.n	8022034 <__hexnan+0xcc>
 802203c:	683b      	ldr	r3, [r7, #0]
 802203e:	b91b      	cbnz	r3, 8022048 <__hexnan+0xe0>
 8022040:	4547      	cmp	r7, r8
 8022042:	d128      	bne.n	8022096 <__hexnan+0x12e>
 8022044:	2301      	movs	r3, #1
 8022046:	603b      	str	r3, [r7, #0]
 8022048:	2005      	movs	r0, #5
 802204a:	b007      	add	sp, #28
 802204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022050:	3501      	adds	r5, #1
 8022052:	2d08      	cmp	r5, #8
 8022054:	f10b 0b01 	add.w	fp, fp, #1
 8022058:	dd06      	ble.n	8022068 <__hexnan+0x100>
 802205a:	4544      	cmp	r4, r8
 802205c:	d9c1      	bls.n	8021fe2 <__hexnan+0x7a>
 802205e:	2300      	movs	r3, #0
 8022060:	f844 3c04 	str.w	r3, [r4, #-4]
 8022064:	2501      	movs	r5, #1
 8022066:	3c04      	subs	r4, #4
 8022068:	6822      	ldr	r2, [r4, #0]
 802206a:	f000 000f 	and.w	r0, r0, #15
 802206e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8022072:	6020      	str	r0, [r4, #0]
 8022074:	e7b5      	b.n	8021fe2 <__hexnan+0x7a>
 8022076:	2508      	movs	r5, #8
 8022078:	e7b3      	b.n	8021fe2 <__hexnan+0x7a>
 802207a:	9b01      	ldr	r3, [sp, #4]
 802207c:	2b00      	cmp	r3, #0
 802207e:	d0dd      	beq.n	802203c <__hexnan+0xd4>
 8022080:	f1c3 0320 	rsb	r3, r3, #32
 8022084:	f04f 32ff 	mov.w	r2, #4294967295
 8022088:	40da      	lsrs	r2, r3
 802208a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802208e:	4013      	ands	r3, r2
 8022090:	f846 3c04 	str.w	r3, [r6, #-4]
 8022094:	e7d2      	b.n	802203c <__hexnan+0xd4>
 8022096:	3f04      	subs	r7, #4
 8022098:	e7d0      	b.n	802203c <__hexnan+0xd4>
 802209a:	2004      	movs	r0, #4
 802209c:	e7d5      	b.n	802204a <__hexnan+0xe2>

0802209e <__ascii_mbtowc>:
 802209e:	b082      	sub	sp, #8
 80220a0:	b901      	cbnz	r1, 80220a4 <__ascii_mbtowc+0x6>
 80220a2:	a901      	add	r1, sp, #4
 80220a4:	b142      	cbz	r2, 80220b8 <__ascii_mbtowc+0x1a>
 80220a6:	b14b      	cbz	r3, 80220bc <__ascii_mbtowc+0x1e>
 80220a8:	7813      	ldrb	r3, [r2, #0]
 80220aa:	600b      	str	r3, [r1, #0]
 80220ac:	7812      	ldrb	r2, [r2, #0]
 80220ae:	1e10      	subs	r0, r2, #0
 80220b0:	bf18      	it	ne
 80220b2:	2001      	movne	r0, #1
 80220b4:	b002      	add	sp, #8
 80220b6:	4770      	bx	lr
 80220b8:	4610      	mov	r0, r2
 80220ba:	e7fb      	b.n	80220b4 <__ascii_mbtowc+0x16>
 80220bc:	f06f 0001 	mvn.w	r0, #1
 80220c0:	e7f8      	b.n	80220b4 <__ascii_mbtowc+0x16>

080220c2 <_realloc_r>:
 80220c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220c6:	4680      	mov	r8, r0
 80220c8:	4615      	mov	r5, r2
 80220ca:	460c      	mov	r4, r1
 80220cc:	b921      	cbnz	r1, 80220d8 <_realloc_r+0x16>
 80220ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80220d2:	4611      	mov	r1, r2
 80220d4:	f7fb bbaa 	b.w	801d82c <_malloc_r>
 80220d8:	b92a      	cbnz	r2, 80220e6 <_realloc_r+0x24>
 80220da:	f7fd fd91 	bl	801fc00 <_free_r>
 80220de:	2400      	movs	r4, #0
 80220e0:	4620      	mov	r0, r4
 80220e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220e6:	f000 f86b 	bl	80221c0 <_malloc_usable_size_r>
 80220ea:	4285      	cmp	r5, r0
 80220ec:	4606      	mov	r6, r0
 80220ee:	d802      	bhi.n	80220f6 <_realloc_r+0x34>
 80220f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80220f4:	d8f4      	bhi.n	80220e0 <_realloc_r+0x1e>
 80220f6:	4629      	mov	r1, r5
 80220f8:	4640      	mov	r0, r8
 80220fa:	f7fb fb97 	bl	801d82c <_malloc_r>
 80220fe:	4607      	mov	r7, r0
 8022100:	2800      	cmp	r0, #0
 8022102:	d0ec      	beq.n	80220de <_realloc_r+0x1c>
 8022104:	42b5      	cmp	r5, r6
 8022106:	462a      	mov	r2, r5
 8022108:	4621      	mov	r1, r4
 802210a:	bf28      	it	cs
 802210c:	4632      	movcs	r2, r6
 802210e:	f7fc fef8 	bl	801ef02 <memcpy>
 8022112:	4621      	mov	r1, r4
 8022114:	4640      	mov	r0, r8
 8022116:	f7fd fd73 	bl	801fc00 <_free_r>
 802211a:	463c      	mov	r4, r7
 802211c:	e7e0      	b.n	80220e0 <_realloc_r+0x1e>

0802211e <__ascii_wctomb>:
 802211e:	4603      	mov	r3, r0
 8022120:	4608      	mov	r0, r1
 8022122:	b141      	cbz	r1, 8022136 <__ascii_wctomb+0x18>
 8022124:	2aff      	cmp	r2, #255	@ 0xff
 8022126:	d904      	bls.n	8022132 <__ascii_wctomb+0x14>
 8022128:	228a      	movs	r2, #138	@ 0x8a
 802212a:	601a      	str	r2, [r3, #0]
 802212c:	f04f 30ff 	mov.w	r0, #4294967295
 8022130:	4770      	bx	lr
 8022132:	700a      	strb	r2, [r1, #0]
 8022134:	2001      	movs	r0, #1
 8022136:	4770      	bx	lr

08022138 <_raise_r>:
 8022138:	291f      	cmp	r1, #31
 802213a:	b538      	push	{r3, r4, r5, lr}
 802213c:	4605      	mov	r5, r0
 802213e:	460c      	mov	r4, r1
 8022140:	d904      	bls.n	802214c <_raise_r+0x14>
 8022142:	2316      	movs	r3, #22
 8022144:	6003      	str	r3, [r0, #0]
 8022146:	f04f 30ff 	mov.w	r0, #4294967295
 802214a:	bd38      	pop	{r3, r4, r5, pc}
 802214c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802214e:	b112      	cbz	r2, 8022156 <_raise_r+0x1e>
 8022150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022154:	b94b      	cbnz	r3, 802216a <_raise_r+0x32>
 8022156:	4628      	mov	r0, r5
 8022158:	f000 f830 	bl	80221bc <_getpid_r>
 802215c:	4622      	mov	r2, r4
 802215e:	4601      	mov	r1, r0
 8022160:	4628      	mov	r0, r5
 8022162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022166:	f000 b817 	b.w	8022198 <_kill_r>
 802216a:	2b01      	cmp	r3, #1
 802216c:	d00a      	beq.n	8022184 <_raise_r+0x4c>
 802216e:	1c59      	adds	r1, r3, #1
 8022170:	d103      	bne.n	802217a <_raise_r+0x42>
 8022172:	2316      	movs	r3, #22
 8022174:	6003      	str	r3, [r0, #0]
 8022176:	2001      	movs	r0, #1
 8022178:	e7e7      	b.n	802214a <_raise_r+0x12>
 802217a:	2100      	movs	r1, #0
 802217c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022180:	4620      	mov	r0, r4
 8022182:	4798      	blx	r3
 8022184:	2000      	movs	r0, #0
 8022186:	e7e0      	b.n	802214a <_raise_r+0x12>

08022188 <raise>:
 8022188:	4b02      	ldr	r3, [pc, #8]	@ (8022194 <raise+0xc>)
 802218a:	4601      	mov	r1, r0
 802218c:	6818      	ldr	r0, [r3, #0]
 802218e:	f7ff bfd3 	b.w	8022138 <_raise_r>
 8022192:	bf00      	nop
 8022194:	20000148 	.word	0x20000148

08022198 <_kill_r>:
 8022198:	b538      	push	{r3, r4, r5, lr}
 802219a:	4d07      	ldr	r5, [pc, #28]	@ (80221b8 <_kill_r+0x20>)
 802219c:	2300      	movs	r3, #0
 802219e:	4604      	mov	r4, r0
 80221a0:	4608      	mov	r0, r1
 80221a2:	4611      	mov	r1, r2
 80221a4:	602b      	str	r3, [r5, #0]
 80221a6:	f7e1 fe49 	bl	8003e3c <_kill>
 80221aa:	1c43      	adds	r3, r0, #1
 80221ac:	d102      	bne.n	80221b4 <_kill_r+0x1c>
 80221ae:	682b      	ldr	r3, [r5, #0]
 80221b0:	b103      	cbz	r3, 80221b4 <_kill_r+0x1c>
 80221b2:	6023      	str	r3, [r4, #0]
 80221b4:	bd38      	pop	{r3, r4, r5, pc}
 80221b6:	bf00      	nop
 80221b8:	200037a8 	.word	0x200037a8

080221bc <_getpid_r>:
 80221bc:	f7e1 be36 	b.w	8003e2c <_getpid>

080221c0 <_malloc_usable_size_r>:
 80221c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80221c4:	1f18      	subs	r0, r3, #4
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	bfbc      	itt	lt
 80221ca:	580b      	ldrlt	r3, [r1, r0]
 80221cc:	18c0      	addlt	r0, r0, r3
 80221ce:	4770      	bx	lr

080221d0 <_init>:
 80221d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221d2:	bf00      	nop
 80221d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221d6:	bc08      	pop	{r3}
 80221d8:	469e      	mov	lr, r3
 80221da:	4770      	bx	lr

080221dc <_fini>:
 80221dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221de:	bf00      	nop
 80221e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221e2:	bc08      	pop	{r3}
 80221e4:	469e      	mov	lr, r3
 80221e6:	4770      	bx	lr
