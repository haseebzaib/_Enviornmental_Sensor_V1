
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000004  20000000  20000000  00026000  2**0
                  ALLOC
  2 .text         000206b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002ab4  08020850  08020850  00021850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08023304  08023304  00025330  2**0
                  CONTENTS
  5 .ARM          00000008  08023304  08023304  00024304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802330c  0802330c  00025330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802330c  0802330c  0002430c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08023310  08023310  00024310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000032c  20000004  08023314  00025004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034f4  20000330  08023640  00025330  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003824  08023640  00025824  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY
 13 .debug_info   000359f7  00000000  00000000  00025360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008691  00000000  00000000  0005ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e20  00000000  00000000  000633e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002384  00000000  00000000  00066208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dd0  00000000  00000000  0006858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042e26  00000000  00000000  0008e35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b410c  00000000  00000000  000d1182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018528e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d678  00000000  00000000  001852d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0019294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000330 	.word	0x20000330
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020838 	.word	0x08020838

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000334 	.word	0x20000334
 80001dc:	08020838 	.word	0x08020838

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012f2 	.word	0x200012f2
 80010f4:	2000034c 	.word	0x2000034c

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 fdcb 	bl	8005ca0 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200014e1 	.word	0x200014e1
 8001128:	40020000 	.word	0x40020000
 800112c:	200014e0 	.word	0x200014e0

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 fddb 	bl	8003d08 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200014d4 	.word	0x200014d4
 8001160:	20001718 	.word	0x20001718

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 fd97 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 fda3 	bl	8005cd0 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	2000148c 	.word	0x2000148c
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fb83 	bl	80048ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fb9c 	bl	8004906 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 fd86 	bl	8003d20 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000148c 	.word	0x2000148c
 800121c:	40000400 	.word	0x40000400
 8001220:	2000034c 	.word	0x2000034c

08001224 <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01c f882 	bl	801d33c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <clock_speed_slow+0xbc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <clock_speed_slow+0xbc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <clock_speed_slow+0xbc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <clock_speed_slow+0xc0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <clock_speed_slow+0xc0>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <clock_speed_slow+0xc0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001284:	2306      	movs	r3, #6
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f007 f9c1 	bl	8008624 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <clock_speed_slow+0x88>
		Error_Handler();
 80012a8:	f001 ffe4 	bl	8003274 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80012b4:	23c0      	movs	r3, #192	@ 0xc0
 80012b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f007 fc24 	bl	8008b14 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <clock_speed_slow+0xb2>
		Error_Handler();
 80012d2:	f001 ffcf 	bl	8003274 <Error_Handler>
	}

}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	@ 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	@ 0x50
 80012ec:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 80012ee:	4b45      	ldr	r3, [pc, #276]	@ (8001404 <clock_speed_high+0x11c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a44      	ldr	r2, [pc, #272]	@ (8001404 <clock_speed_high+0x11c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 8001302:	bf00      	nop
 8001304:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <clock_speed_high+0x11c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <clock_speed_high+0x36>
 8001310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	f8a7 204e 	strh.w	r2, [r7, #78]	@ 0x4e
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f2      	bne.n	8001304 <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 800131e:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <clock_speed_high+0x11c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <clock_speed_high+0x11c>)
 8001324:	f023 0303 	bic.w	r3, r3, #3
 8001328:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800132a:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <clock_speed_high+0x11c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a35      	ldr	r2, [pc, #212]	@ (8001404 <clock_speed_high+0x11c>)
 8001330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001334:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	2230      	movs	r2, #48	@ 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f01b fffc 	bl	801d33c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <clock_speed_high+0x11c>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <clock_speed_high+0x11c>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	@ 0x40
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <clock_speed_high+0x11c>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <clock_speed_high+0x120>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800137c:	4a22      	ldr	r2, [pc, #136]	@ (8001408 <clock_speed_high+0x120>)
 800137e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <clock_speed_high+0x120>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001390:	2305      	movs	r3, #5
 8001392:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139a:	2301      	movs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013a8:	2319      	movs	r3, #25
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b6:	2307      	movs	r3, #7
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 f930 	bl	8008624 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <clock_speed_high+0xe6>
		Error_Handler();
 80013ca:	f001 ff53 	bl	8003274 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2302      	movs	r3, #2
 80013d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2102      	movs	r1, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 fb92 	bl	8008b14 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <clock_speed_high+0x112>
		Error_Handler();
 80013f6:	f001 ff3d 	bl	8003274 <Error_Handler>
	}

}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <load_param+0xa4>)
 8001414:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8b3 3195 	ldrh.w	r3, [r3, #405]	@ 0x195
 800141c:	b29b      	uxth	r3, r3
 800141e:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001422:	4293      	cmp	r3, r2
 8001424:	d118      	bne.n	8001458 <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 8001426:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <load_param+0xa8>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f240 1397 	movw	r3, #407	@ 0x197
 8001432:	461a      	mov	r2, r3
 8001434:	f01c f899 	bl	801d56a <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 8001438:	491f      	ldr	r1, [pc, #124]	@ (80014b8 <load_param+0xac>)
 800143a:	481e      	ldr	r0, [pc, #120]	@ (80014b4 <load_param+0xa8>)
 800143c:	f01b fff0 	bl	801d420 <strstr>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d019      	beq.n	800147a <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 8001446:	f000 ffb9 	bl	80023bc <ver_GetUid>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	491b      	ldr	r1, [pc, #108]	@ (80014bc <load_param+0xb0>)
 8001450:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <load_param+0xa8>)
 8001452:	f01b fe29 	bl	801d0a8 <siprintf>
 8001456:	e010      	b.n	800147a <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 8001458:	4a16      	ldr	r2, [pc, #88]	@ (80014b4 <load_param+0xa8>)
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <load_param+0xb4>)
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f240 1397 	movw	r3, #407	@ 0x197
 8001464:	461a      	mov	r2, r3
 8001466:	f01c f880 	bl	801d56a <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800146a:	f000 ffa7 	bl	80023bc <ver_GetUid>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4912      	ldr	r1, [pc, #72]	@ (80014bc <load_param+0xb0>)
 8001474:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <load_param+0xa8>)
 8001476:	f01b fe17 	bl	801d0a8 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800147a:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <load_param+0xb8>)
 800147c:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <load_param+0xbc>)
 800147e:	f01b ffcf 	bl	801d420 <strstr>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <load_param+0xc0>)
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001490:	e00a      	b.n	80014a8 <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001492:	490f      	ldr	r1, [pc, #60]	@ (80014d0 <load_param+0xc4>)
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <load_param+0xbc>)
 8001496:	f01b ffc3 	bl	801d420 <strstr>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <load_param+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	08060000 	.word	0x08060000
 80014b4:	200012f4 	.word	0x200012f4
 80014b8:	08020850 	.word	0x08020850
 80014bc:	08020858 	.word	0x08020858
 80014c0:	0802283c 	.word	0x0802283c
 80014c4:	0802085c 	.word	0x0802085c
 80014c8:	20001358 	.word	0x20001358
 80014cc:	2000148c 	.word	0x2000148c
 80014d0:	08020864 	.word	0x08020864

080014d4 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014da:	b672      	cpsid	i
}
 80014dc:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <store_param+0xc0>)
 80014e0:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80014e2:	f003 fed5 	bl	8005290 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <store_param+0xc4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <store_param+0xc4>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <store_param+0xc4>)
 80014f4:	2210      	movs	r2, #16
 80014f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <store_param+0xc4>)
 80014fa:	2220      	movs	r2, #32
 80014fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <store_param+0xc4>)
 8001500:	2240      	movs	r2, #64	@ 0x40
 8001502:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <store_param+0xc4>)
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <store_param+0xc4>)
 800150c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001510:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <store_param+0xc8>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <store_param+0xc8>)
 800151a:	2202      	movs	r2, #2
 800151c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <store_param+0xc8>)
 8001520:	2207      	movs	r2, #7
 8001522:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <store_param+0xc8>)
 8001526:	2201      	movs	r2, #1
 8001528:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <store_param+0xc8>)
 8001530:	f004 f82c 	bl	800558c <HAL_FLASHEx_Erase>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800153a:	f003 fedb 	bl	80052f4 <HAL_FLASH_GetError>
 800153e:	4603      	mov	r3, r0
 8001540:	e024      	b.n	800158c <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <store_param+0xcc>)
 8001544:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <store_param+0xd0>)
 8001548:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800154a:	e016      	b.n	800157a <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 800154c:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2002      	movs	r0, #2
 8001556:	f003 fe47 	bl	80051e8 <HAL_FLASH_Program>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <store_param+0x9a>

		{
			WrAdr += 4;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3304      	adds	r3, #4
 8001564:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3304      	adds	r3, #4
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	e005      	b.n	800157a <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 800156e:	f003 feb1 	bl	80052d4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001572:	f003 febf 	bl	80052f4 <HAL_FLASH_GetError>
 8001576:	4603      	mov	r3, r0
 8001578:	e008      	b.n	800158c <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3e4      	bcc.n	800154c <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001582:	f003 fea7 	bl	80052d4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001586:	b662      	cpsie	i
}
 8001588:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800158a:	2300      	movs	r3, #0

}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200012f4 	.word	0x200012f4
 8001598:	40023c00 	.word	0x40023c00
 800159c:	20001734 	.word	0x20001734
 80015a0:	08060197 	.word	0x08060197
 80015a4:	08060000 	.word	0x08060000

080015a8 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	if (save_param) {
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <save_data+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <save_data+0x52>
		if (start_timer) {
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <save_data+0x5c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80015bc:	4812      	ldr	r0, [pc, #72]	@ (8001608 <save_data+0x60>)
 80015be:	f009 faf1 	bl	800aba4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <save_data+0x60>)
 80015c4:	f009 fa8c 	bl	800aae0 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <save_data+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <save_data+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <save_data+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015dc:	d30d      	bcc.n	80015fa <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80015de:	480a      	ldr	r0, [pc, #40]	@ (8001608 <save_data+0x60>)
 80015e0:	f009 fae0 	bl	800aba4 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80015e4:	f7ff ff76 	bl	80014d4 <store_param>
			time_keep = 0;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <save_data+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <save_data+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <save_data+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200014d1 	.word	0x200014d1
 8001604:	200014d2 	.word	0x200014d2
 8001608:	200018dc 	.word	0x200018dc
 800160c:	200014d4 	.word	0x200014d4

08001610 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	int16_t error = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800161a:	f011 fffb 	bl	8013614 <sensirion_i2c_hal_init>
	init_driver(SCD30_I2C_ADDR_61);
 800161e:	2061      	movs	r0, #97	@ 0x61
 8001620:	f011 fc8e 	bl	8012f40 <init_driver>
	scd30_stop_periodic_measurement();
 8001624:	f011 fd24 	bl	8013070 <scd30_stop_periodic_measurement>
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 8001630:	1d3a      	adds	r2, r7, #4
 8001632:	1d7b      	adds	r3, r7, #5
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f011 fe42 	bl	80132c0 <scd30_read_firmware_version>
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800164c:	b09e      	sub	sp, #120	@ 0x78
 800164e:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 8001650:	2300      	movs	r3, #0
 8001652:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001656:	2000      	movs	r0, #0
 8001658:	f011 fcd2 	bl	8013000 <scd30_start_periodic_measurement>

	uint16_t repetition = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	for (repetition = 0; repetition < 1; repetition++) {
 8001662:	2300      	movs	r3, #0
 8001664:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001668:	e070      	b.n	800174c <get_scd30_measurement+0x104>
		sensirion_i2c_hal_sleep_usec(1500000);
 800166a:	483d      	ldr	r0, [pc, #244]	@ (8001760 <get_scd30_measurement+0x118>)
 800166c:	f012 f848 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001670:	4a3c      	ldr	r2, [pc, #240]	@ (8001764 <get_scd30_measurement+0x11c>)
 8001672:	493d      	ldr	r1, [pc, #244]	@ (8001768 <get_scd30_measurement+0x120>)
 8001674:	483d      	ldr	r0, [pc, #244]	@ (800176c <get_scd30_measurement+0x124>)
 8001676:	f011 fca3 	bl	8012fc0 <scd30_blocking_read_measurement_data>
 800167a:	4603      	mov	r3, r0
 800167c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001680:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <get_scd30_measurement+0x128>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05c      	beq.n	8001742 <get_scd30_measurement+0xfa>
			char buf[100];
			if (error) {
 8001688:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <get_scd30_measurement+0x70>
				sprintf(buf,
 8001690:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001694:	463b      	mov	r3, r7
 8001696:	4937      	ldr	r1, [pc, #220]	@ (8001774 <get_scd30_measurement+0x12c>)
 8001698:	4618      	mov	r0, r3
 800169a:	f01b fd05 	bl	801d0a8 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fdfd 	bl	80002a0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4639      	mov	r1, r7
 80016ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b0:	4831      	ldr	r0, [pc, #196]	@ (8001778 <get_scd30_measurement+0x130>)
 80016b2:	f00a fa33 	bl	800bb1c <HAL_UART_Transmit>
 80016b6:	e044      	b.n	8001742 <get_scd30_measurement+0xfa>
			} else if (_RunTime_Packet.co2 == 0) {
 80016b8:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <get_scd30_measurement+0x124>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d111      	bne.n	80016ec <get_scd30_measurement+0xa4>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80016c8:	463b      	mov	r3, r7
 80016ca:	492c      	ldr	r1, [pc, #176]	@ (800177c <get_scd30_measurement+0x134>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f01b fceb 	bl	801d0a8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fde3 	bl	80002a0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4639      	mov	r1, r7
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	4824      	ldr	r0, [pc, #144]	@ (8001778 <get_scd30_measurement+0x130>)
 80016e6:	f00a fa19 	bl	800bb1c <HAL_UART_Transmit>
 80016ea:	e02a      	b.n	8001742 <get_scd30_measurement+0xfa>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <get_scd30_measurement+0x124>)
 80016ee:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff41 	bl	8000578 <__aeabi_f2d>
 80016f6:	4680      	mov	r8, r0
 80016f8:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <get_scd30_measurement+0x124>)
 80016fc:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff3a 	bl	8000578 <__aeabi_f2d>
 8001704:	4604      	mov	r4, r0
 8001706:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <get_scd30_measurement+0x124>)
 800170a:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4638      	mov	r0, r7
 8001718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800171c:	e9cd 4500 	strd	r4, r5, [sp]
 8001720:	4642      	mov	r2, r8
 8001722:	464b      	mov	r3, r9
 8001724:	4916      	ldr	r1, [pc, #88]	@ (8001780 <get_scd30_measurement+0x138>)
 8001726:	f01b fcbf 	bl	801d0a8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fdb7 	bl	80002a0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	4639      	mov	r1, r7
 8001738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173c:	480e      	ldr	r0, [pc, #56]	@ (8001778 <get_scd30_measurement+0x130>)
 800173e:	f00a f9ed 	bl	800bb1c <HAL_UART_Transmit>
	for (repetition = 0; repetition < 1; repetition++) {
 8001742:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001746:	3301      	adds	r3, #1
 8001748:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800174c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001750:	2b00      	cmp	r3, #0
 8001752:	d08a      	beq.n	800166a <get_scd30_measurement+0x22>
			}
		}
	}
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3768      	adds	r7, #104	@ 0x68
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001760:	0016e360 	.word	0x0016e360
 8001764:	20001494 	.word	0x20001494
 8001768:	20001490 	.word	0x20001490
 800176c:	2000148c 	.word	0x2000148c
 8001770:	200014d0 	.word	0x200014d0
 8001774:	0802086c 	.word	0x0802086c
 8001778:	200019cc 	.word	0x200019cc
 800177c:	080208a4 	.word	0x080208a4
 8001780:	080208c8 	.word	0x080208c8

08001784 <init_sps30>:

#endif

static void init_sps30() {
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <init_sps30+0x34>)
 800178c:	f012 fbbc 	bl	8013f08 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001790:	f012 fb04 	bl	8013d9c <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f012 fcd5 	bl	8014146 <sps30_read_version>
 800179c:	4603      	mov	r3, r0
 800179e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4618      	mov	r0, r3
 80017a6:	f012 fbc3 	bl	8013f30 <sps30_get_serial>
 80017aa:	4603      	mov	r3, r0
 80017ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	@ 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000f4240 	.word	0x000f4240

080017bc <get_sps30_measurement>:
void get_sps30_measurement() {
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b0a0      	sub	sp, #128	@ 0x80
 80017c2:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 80017c4:	f012 fbe0 	bl	8013f88 <sps30_start_measurement>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 80017ce:	483a      	ldr	r0, [pc, #232]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017d0:	f012 fc06 	bl	8013fe0 <sps30_read_measurement>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a37      	ldr	r2, [pc, #220]	@ (80018bc <get_sps30_measurement+0x100>)
 80017e0:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 80017e2:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a35      	ldr	r2, [pc, #212]	@ (80018bc <get_sps30_measurement+0x100>)
 80017e8:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 80017ea:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a33      	ldr	r2, [pc, #204]	@ (80018bc <get_sps30_measurement+0x100>)
 80017f0:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <get_sps30_measurement+0x100>)
 80017f8:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80017fa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db54      	blt.n	80018ac <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <get_sps30_measurement+0x104>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d050      	beq.n	80018ac <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800180a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800180e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8001812:	b21b      	sxth	r3, r3
 8001814:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001818:	4293      	cmp	r3, r2
 800181a:	d113      	bne.n	8001844 <get_sps30_measurement+0x88>
				sprintf(buffer,
 800181c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001820:	b2da      	uxtb	r2, r3
 8001822:	463b      	mov	r3, r7
 8001824:	4927      	ldr	r1, [pc, #156]	@ (80018c4 <get_sps30_measurement+0x108>)
 8001826:	4618      	mov	r0, r3
 8001828:	f01b fc3e 	bl	801d0a8 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800182c:	463b      	mov	r3, r7
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fd36 	bl	80002a0 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	4639      	mov	r1, r7
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	4822      	ldr	r0, [pc, #136]	@ (80018c8 <get_sps30_measurement+0x10c>)
 8001840:	f00a f96c 	bl	800bb1c <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001846:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe95 	bl	8000578 <__aeabi_f2d>
 800184e:	4682      	mov	sl, r0
 8001850:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001854:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe8e 	bl	8000578 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001862:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe87 	bl	8000578 <__aeabi_f2d>
 800186a:	4680      	mov	r8, r0
 800186c:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001870:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe80 	bl	8000578 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4638      	mov	r0, r7
 800187e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001882:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001886:	e9cd 4500 	strd	r4, r5, [sp]
 800188a:	4652      	mov	r2, sl
 800188c:	465b      	mov	r3, fp
 800188e:	490f      	ldr	r1, [pc, #60]	@ (80018cc <get_sps30_measurement+0x110>)
 8001890:	f01b fc0a 	bl	801d0a8 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001894:	463b      	mov	r3, r7
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fd02 	bl	80002a0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4639      	mov	r1, r7
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <get_sps30_measurement+0x10c>)
 80018a8:	f00a f938 	bl	800bb1c <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 80018ac:	bf00      	nop
 80018ae:	3768      	adds	r7, #104	@ 0x68
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b6:	bf00      	nop
 80018b8:	200016f0 	.word	0x200016f0
 80018bc:	2000148c 	.word	0x2000148c
 80018c0:	200014d0 	.word	0x200014d0
 80018c4:	080208fc 	.word	0x080208fc
 80018c8:	200019cc 	.word	0x200019cc
 80018cc:	08020930 	.word	0x08020930

080018d0 <check_peripheral_error>:
static void check_peripheral_error() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <check_peripheral_error+0xa0>)
 80018d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <check_peripheral_error+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 80018e8:	f00f fb32 	bl	8010f50 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <check_peripheral_error+0xa0>)
 80018ee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <check_peripheral_error+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <check_peripheral_error+0xa4>)
 8001906:	f004 f9e3 	bl	8005cd0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800190a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800190e:	f002 fa07 	bl	8003d20 <HAL_Delay>
		enable_5v();
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001918:	4816      	ldr	r0, [pc, #88]	@ (8001974 <check_peripheral_error+0xa4>)
 800191a:	f004 f9d9 	bl	8005cd0 <HAL_GPIO_WritePin>
		init_sps30();
 800191e:	f7ff ff31 	bl	8001784 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	2205      	movs	r2, #5
 8001928:	21c2      	movs	r1, #194	@ 0xc2
 800192a:	4813      	ldr	r0, [pc, #76]	@ (8001978 <check_peripheral_error+0xa8>)
 800192c:	f004 fe9a 	bl	8006664 <HAL_I2C_IsDeviceReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d018      	beq.n	8001968 <check_peripheral_error+0x98>
			!= HAL_OK) {

		if (debug_scd_pm) {
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <check_peripheral_error+0xac>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	490f      	ldr	r1, [pc, #60]	@ (8001980 <check_peripheral_error+0xb0>)
 8001942:	4618      	mov	r0, r3
 8001944:	f01b fbb0 	bl	801d0a8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fca8 	bl	80002a0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	1d39      	adds	r1, r7, #4
 8001956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195a:	480a      	ldr	r0, [pc, #40]	@ (8001984 <check_peripheral_error+0xb4>)
 800195c:	f00a f8de 	bl	800bb1c <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <check_peripheral_error+0xa0>)
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
#endif

}
 8001968:	bf00      	nop
 800196a:	3738      	adds	r7, #56	@ 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000148c 	.word	0x2000148c
 8001974:	40020400 	.word	0x40020400
 8001978:	20001790 	.word	0x20001790
 800197c:	200014d0 	.word	0x200014d0
 8001980:	08020968 	.word	0x08020968
 8001984:	200019cc 	.word	0x200019cc

08001988 <sensor_calibration>:
static void sensor_calibration() {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <sensor_calibration+0x28>)
 800198e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <sensor_calibration+0x24>
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <sensor_calibration+0x28>)
 8001998:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <sensor_calibration+0x28>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 80019a8:	f012 fbb9 	bl	801411e <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000148c 	.word	0x2000148c

080019b4 <sleep>:
static void sleep() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <sleep+0xc0>)
 80019ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 80019c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <sleep+0xc0>)
 80019c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c6:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 80019c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <sleep+0xc4>)
 80019ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ce:	2008      	movs	r0, #8
 80019d0:	f7ff fb20 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 80019d4:	4829      	ldr	r0, [pc, #164]	@ (8001a7c <sleep+0xc8>)
 80019d6:	f002 fa4e 	bl	8003e76 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	220b      	movs	r2, #11
 80019e0:	4927      	ldr	r1, [pc, #156]	@ (8001a80 <sleep+0xcc>)
 80019e2:	4828      	ldr	r0, [pc, #160]	@ (8001a84 <sleep+0xd0>)
 80019e4:	f00a f89a 	bl	800bb1c <HAL_UART_Transmit>
	disable_5v();
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ee:	4826      	ldr	r0, [pc, #152]	@ (8001a88 <sleep+0xd4>)
 80019f0:	f004 f96e 	bl	8005cd0 <HAL_GPIO_WritePin>
	disable_motion();
 80019f4:	2201      	movs	r2, #1
 80019f6:	2102      	movs	r1, #2
 80019f8:	4824      	ldr	r0, [pc, #144]	@ (8001a8c <sleep+0xd8>)
 80019fa:	f004 f969 	bl	8005cd0 <HAL_GPIO_WritePin>
#ifdef use_scd40x
	scd4x_stop_periodic_measurement();
	scd4x_power_down();
#elif use_scd30
	scd30_stop_periodic_measurement();
 80019fe:	f011 fb37 	bl	8013070 <scd30_stop_periodic_measurement>
#endif
	console_uart_deinit();
 8001a02:	f00f fa99 	bl	8010f38 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001a06:	f011 fe37 	bl	8013678 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001a0a:	f012 fa07 	bl	8013e1c <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001a0e:	f019 fc93 	bl	801b338 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001a12:	481f      	ldr	r0, [pc, #124]	@ (8001a90 <sleep+0xdc>)
 8001a14:	f008 ffb5 	bl	800a982 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001a18:	481e      	ldr	r0, [pc, #120]	@ (8001a94 <sleep+0xe0>)
 8001a1a:	f008 ffb2 	bl	800a982 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001a1e:	481e      	ldr	r0, [pc, #120]	@ (8001a98 <sleep+0xe4>)
 8001a20:	f008 ffaf 	bl	800a982 <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001a24:	481d      	ldr	r0, [pc, #116]	@ (8001a9c <sleep+0xe8>)
 8001a26:	f003 f849 	bl	8004abc <HAL_DMA_DeInit>

	clock_speed_slow();
 8001a2a:	f7ff fbfb 	bl	8001224 <clock_speed_slow>

	HAL_SuspendTick();
 8001a2e:	f002 f99b 	bl	8003d68 <HAL_SuspendTick>
	Rtc_Alarm_watchdog();
 8001a32:	f010 ff3f 	bl	80128b4 <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001a36:	481a      	ldr	r0, [pc, #104]	@ (8001aa0 <sleep+0xec>)
 8001a38:	f005 fab1 	bl	8006f9e <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f006 fdc4 	bl	80085cc <HAL_PWR_EnterSTOPMode>
	HAL_IWDG_Refresh(&hiwdg);
 8001a44:	4816      	ldr	r0, [pc, #88]	@ (8001aa0 <sleep+0xec>)
 8001a46:	f005 faaa 	bl	8006f9e <HAL_IWDG_Refresh>
	Rtc_Alarm_watchdog();
 8001a4a:	f010 ff33 	bl	80128b4 <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <sleep+0xf0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <sleep+0xb6>
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <sleep+0xf4>)
 8001a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d104      	bne.n	8001a6a <sleep+0xb6>
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <sleep+0xf4>)
 8001a62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0e5      	beq.n	8001a36 <sleep+0x82>

	Rtc_Alarm_watchdog_disable();
 8001a6a:	f010 ff11 	bl	8012890 <Rtc_Alarm_watchdog_disable>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40000400 	.word	0x40000400
 8001a78:	2000034c 	.word	0x2000034c
 8001a7c:	20001748 	.word	0x20001748
 8001a80:	08020990 	.word	0x08020990
 8001a84:	200019cc 	.word	0x200019cc
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	20001894 	.word	0x20001894
 8001a94:	200018dc 	.word	0x200018dc
 8001a98:	20001924 	.word	0x20001924
 8001a9c:	2000196c 	.word	0x2000196c
 8001aa0:	200017e4 	.word	0x200017e4
 8001aa4:	2000002d 	.word	0x2000002d
 8001aa8:	2000148c 	.word	0x2000148c

08001aac <wakeup>:
static void wakeup() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 8001ab0:	f002 f96a 	bl	8003d88 <HAL_ResumeTick>
	clock_speed_high();
 8001ab4:	f7ff fc18 	bl	80012e8 <clock_speed_high>
	enable_5v();
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001abe:	4838      	ldr	r0, [pc, #224]	@ (8001ba0 <wakeup+0xf4>)
 8001ac0:	f004 f906 	bl	8005cd0 <HAL_GPIO_WritePin>
	enable_motion();
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4836      	ldr	r0, [pc, #216]	@ (8001ba4 <wakeup+0xf8>)
 8001aca:	f004 f901 	bl	8005cd0 <HAL_GPIO_WritePin>
	console_uart_init();
 8001ace:	f00f fa3f 	bl	8010f50 <console_uart_init>

	MX_DMA_Init();
 8001ad2:	f7ff fb63 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001ad6:	f001 f8c9 	bl	8002c6c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ada:	f001 f917 	bl	8002d0c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001ade:	f001 f963 	bl	8002da8 <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001ae2:	f7ff fd95 	bl	8001610 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001ae6:	4830      	ldr	r0, [pc, #192]	@ (8001ba8 <wakeup+0xfc>)
 8001ae8:	f018 fdb6 	bl	801a658 <Mount_SD>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <wakeup+0x52>
		Unmount_SD("/");
 8001af2:	482d      	ldr	r0, [pc, #180]	@ (8001ba8 <wakeup+0xfc>)
 8001af4:	f018 fddc 	bl	801a6b0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001af8:	f019 fc30 	bl	801b35c <MX_USB_DEVICE_Init>
 8001afc:	e002      	b.n	8001b04 <wakeup+0x58>
	} else {
		datawritten = 2;
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <wakeup+0x100>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b08:	4826      	ldr	r0, [pc, #152]	@ (8001ba4 <wakeup+0xf8>)
 8001b0a:	f004 f8c9 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <wakeup+0x6e>
		init_sps30();
 8001b14:	f7ff fe36 	bl	8001784 <init_sps30>
 8001b18:	e00f      	b.n	8001b3a <wakeup+0x8e>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <wakeup+0x104>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001b22:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <wakeup+0x104>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <wakeup+0x108>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001b30:	f002 f8ea 	bl	8003d08 <HAL_GetTick>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a20      	ldr	r2, [pc, #128]	@ (8001bb8 <wakeup+0x10c>)
 8001b38:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001b3a:	4820      	ldr	r0, [pc, #128]	@ (8001bbc <wakeup+0x110>)
 8001b3c:	f008 ff76 	bl	800aa2c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001b40:	491f      	ldr	r1, [pc, #124]	@ (8001bc0 <wakeup+0x114>)
 8001b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b46:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <wakeup+0x118>)
 8001b48:	481f      	ldr	r0, [pc, #124]	@ (8001bc8 <wakeup+0x11c>)
 8001b4a:	f003 f815 	bl	8004b78 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <wakeup+0x110>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <wakeup+0x110>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b5c:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001b5e:	4a18      	ldr	r2, [pc, #96]	@ (8001bc0 <wakeup+0x114>)
 8001b60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b64:	2008      	movs	r0, #8
 8001b66:	f7ff fa55 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4817      	ldr	r0, [pc, #92]	@ (8001bcc <wakeup+0x120>)
 8001b6e:	f009 f8a1 	bl	800acb4 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001b72:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <wakeup+0x124>)
 8001b74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4813      	ldr	r0, [pc, #76]	@ (8001bcc <wakeup+0x120>)
 8001b7e:	f009 f899 	bl	800acb4 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <wakeup+0x124>)
 8001b84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b88:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001b8a:	f7ff fb27 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b92:	220a      	movs	r2, #10
 8001b94:	490f      	ldr	r1, [pc, #60]	@ (8001bd4 <wakeup+0x128>)
 8001b96:	4810      	ldr	r0, [pc, #64]	@ (8001bd8 <wakeup+0x12c>)
 8001b98:	f009 ffc0 	bl	800bb1c <HAL_UART_Transmit>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	0802099c 	.word	0x0802099c
 8001bac:	20002375 	.word	0x20002375
 8001bb0:	2000148c 	.word	0x2000148c
 8001bb4:	200014dc 	.word	0x200014dc
 8001bb8:	20001720 	.word	0x20001720
 8001bbc:	20001894 	.word	0x20001894
 8001bc0:	2000034c 	.word	0x2000034c
 8001bc4:	40020418 	.word	0x40020418
 8001bc8:	2000196c 	.word	0x2000196c
 8001bcc:	20001924 	.word	0x20001924
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	080209a0 	.word	0x080209a0
 8001bd8:	200019cc 	.word	0x200019cc

08001bdc <green_led_blink>:

static void green_led_blink() {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <green_led_blink+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001be6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bea:	f002 f899 	bl	8003d20 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <green_led_blink+0x4c>)
 8001bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001bf6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bfa:	f002 f891 	bl	8003d20 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <green_led_blink+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c04:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c08:	f002 f88a 	bl	8003d20 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <green_led_blink+0x4c>)
 8001c0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c14:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c18:	f002 f882 	bl	8003d20 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <green_led_blink+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40000400 	.word	0x40000400

08001c2c <led_awake_routine>:

static void led_awake_routine() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001c30:	4ba6      	ldr	r3, [pc, #664]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001c32:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8195 	bne.w	8001f66 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c40:	48a3      	ldr	r0, [pc, #652]	@ (8001ed0 <led_awake_routine+0x2a4>)
 8001c42:	f004 f82d 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d025      	beq.n	8001c98 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001c4c:	4b9f      	ldr	r3, [pc, #636]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001c4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c52:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001ed4 <led_awake_routine+0x2a8>
 8001c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	db0d      	blt.n	8001c7c <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001c60:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001c66:	4b9c      	ldr	r3, [pc, #624]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001c6e:	4a9b      	ldr	r2, [pc, #620]	@ (8001edc <led_awake_routine+0x2b0>)
 8001c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c74:	2008      	movs	r0, #8
 8001c76:	f7ff f9cd 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001c7a:	e196      	b.n	8001faa <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001c7c:	4b96      	ldr	r3, [pc, #600]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c82:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001c84:	4b94      	ldr	r3, [pc, #592]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c8a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001c8c:	4a93      	ldr	r2, [pc, #588]	@ (8001edc <led_awake_routine+0x2b0>)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2008      	movs	r0, #8
 8001c92:	f7ff f9bf 	bl	8001014 <setSoftPWM>
}
 8001c96:	e188      	b.n	8001faa <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001c98:	4a90      	ldr	r2, [pc, #576]	@ (8001edc <led_awake_routine+0x2b0>)
 8001c9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c9e:	2008      	movs	r0, #8
 8001ca0:	f7ff f9b8 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001ca4:	4b89      	ldr	r3, [pc, #548]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001ca6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001caa:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001ed4 <led_awake_routine+0x2a8>
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	db38      	blt.n	8001d2a <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001cb8:	4b87      	ldr	r3, [pc, #540]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cbe:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001cc0:	4a86      	ldr	r2, [pc, #536]	@ (8001edc <led_awake_routine+0x2b0>)
 8001cc2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f7ff f9a4 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001ccc:	4b84      	ldr	r3, [pc, #528]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001cd4:	4b83      	ldr	r3, [pc, #524]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3305      	adds	r3, #5
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b80      	ldr	r3, [pc, #512]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e008      	b.n	8001cfa <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b05      	subs	r3, #5
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cf8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d04:	dd03      	ble.n	8001d0e <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001d06:	4b76      	ldr	r3, [pc, #472]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e007      	b.n	8001d1e <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001d0e:	4b75      	ldr	r3, [pc, #468]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	dc02      	bgt.n	8001d1e <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001d18:	4b71      	ldr	r3, [pc, #452]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001d1e:	4b71      	ldr	r3, [pc, #452]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d24:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001d26:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d28:	e13f      	b.n	8001faa <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001d2a:	4b68      	ldr	r3, [pc, #416]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001d2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d30:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	dd42      	ble.n	8001dc4 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001d3e:	4b63      	ldr	r3, [pc, #396]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001d40:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d44:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001ed4 <led_awake_routine+0x2a8>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d838      	bhi.n	8001dc4 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001d52:	4b61      	ldr	r3, [pc, #388]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001d54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d5a:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <led_awake_routine+0x2b0>)
 8001d5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d60:	2008      	movs	r0, #8
 8001d62:	f7ff f957 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d66:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3305      	adds	r3, #5
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d7e:	801a      	strh	r2, [r3, #0]
 8001d80:	e008      	b.n	8001d94 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001d82:	4b58      	ldr	r3, [pc, #352]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b05      	subs	r3, #5
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	4b54      	ldr	r3, [pc, #336]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d92:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001d94:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9e:	dd03      	ble.n	8001da8 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e007      	b.n	8001db8 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001da8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dc02      	bgt.n	8001db8 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001db2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001db8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001dba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc2:	e0f2      	b.n	8001faa <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001dc4:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001dc6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dca:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ee8 <led_awake_routine+0x2bc>
 8001dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	f340 808d 	ble.w	8001ef4 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001dda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001ddc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de0:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	f200 8082 	bhi.w	8001ef4 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <led_awake_routine+0x2c0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d003      	beq.n	8001e04 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <led_awake_routine+0x2c0>)
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e02:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001e04:	4a35      	ldr	r2, [pc, #212]	@ (8001edc <led_awake_routine+0x2b0>)
 8001e06:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e0a:	2008      	movs	r0, #8
 8001e0c:	f7ff f902 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e10:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3305      	adds	r3, #5
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e008      	b.n	8001e3e <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b05      	subs	r3, #5
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e3c:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e48:	dd03      	ble.n	8001e52 <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e007      	b.n	8001e62 <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	dc02      	bgt.n	8001e62 <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001e62:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <led_awake_routine+0x2c0>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3305      	adds	r3, #5
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e7a:	801a      	strh	r2, [r3, #0]
 8001e7c:	e008      	b.n	8001e90 <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b05      	subs	r3, #5
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e9a:	dd03      	ble.n	8001ea4 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <led_awake_routine+0x2c0>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e007      	b.n	8001eb4 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	dc02      	bgt.n	8001eb4 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <led_awake_routine+0x2c0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001eb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001ebc:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001ec0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ec8:	e06f      	b.n	8001faa <led_awake_routine+0x37e>
 8001eca:	bf00      	nop
 8001ecc:	2000148c 	.word	0x2000148c
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40833333 	.word	0x40833333
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	2000034c 	.word	0x2000034c
 8001ee0:	200012ec 	.word	0x200012ec
 8001ee4:	200012ee 	.word	0x200012ee
 8001ee8:	40533333 	.word	0x40533333
 8001eec:	200012ed 	.word	0x200012ed
 8001ef0:	200012f0 	.word	0x200012f0
				GREEN_LED_PWM(disable_led);
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <led_awake_routine+0x384>)
 8001ef6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001efc:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <led_awake_routine+0x388>)
 8001efe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f02:	2008      	movs	r0, #8
 8001f04:	f7ff f886 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001f08:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb8 <led_awake_routine+0x38c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <led_awake_routine+0x390>)
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3305      	adds	r3, #5
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <led_awake_routine+0x390>)
 8001f20:	801a      	strh	r2, [r3, #0]
 8001f22:	e008      	b.n	8001f36 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <led_awake_routine+0x390>)
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <led_awake_routine+0x390>)
 8001f34:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f36:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <led_awake_routine+0x390>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f40:	dd03      	ble.n	8001f4a <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <led_awake_routine+0x38c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <led_awake_routine+0x390>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dc02      	bgt.n	8001f5a <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8001f54:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <led_awake_routine+0x38c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <led_awake_routine+0x390>)
 8001f5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <led_awake_routine+0x384>)
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f64:	e021      	b.n	8001faa <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001f66:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <led_awake_routine+0x384>)
 8001f68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8001f6e:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <led_awake_routine+0x388>)
 8001f70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f74:	2008      	movs	r0, #8
 8001f76:	f7ff f84d 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <led_awake_routine+0x390>)
 8001f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f84:	d004      	beq.n	8001f90 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <led_awake_routine+0x390>)
 8001f88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f8c:	801a      	strh	r2, [r3, #0]
 8001f8e:	e002      	b.n	8001f96 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <led_awake_routine+0x390>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <led_awake_routine+0x390>)
 8001f98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <led_awake_routine+0x384>)
 8001f9e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8001fa0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fa4:	f001 febc 	bl	8003d20 <HAL_Delay>
}
 8001fa8:	e7ff      	b.n	8001faa <led_awake_routine+0x37e>
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	2000034c 	.word	0x2000034c
 8001fb8:	200012ed 	.word	0x200012ed
 8001fbc:	200012f0 	.word	0x200012f0

08001fc0 <blink_red>:

void blink_red() {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <blink_red+0x60>)
 8001fc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fca:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8001fcc:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <blink_red+0x64>)
 8001fce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd2:	2008      	movs	r0, #8
 8001fd4:	f7ff f81e 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <blink_red+0x60>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fe2:	f001 fe9d 	bl	8003d20 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <blink_red+0x60>)
 8001fe8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ff2:	f001 fe95 	bl	8003d20 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <blink_red+0x60>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002000:	f001 fe8e 	bl	8003d20 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <blink_red+0x60>)
 8002006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800200a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800200c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002010:	f001 fe86 	bl	8003d20 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8002014:	4b02      	ldr	r3, [pc, #8]	@ (8002020 <blink_red+0x60>)
 8002016:	2200      	movs	r2, #0
 8002018:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40000400 	.word	0x40000400
 8002024:	2000034c 	.word	0x2000034c

08002028 <led_awake_routine1>:

static void led_awake_routine1() {
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 800202c:	4ba6      	ldr	r3, [pc, #664]	@ (80022c8 <led_awake_routine1+0x2a0>)
 800202e:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8195 	bne.w	8002362 <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8002038:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800203c:	48a3      	ldr	r0, [pc, #652]	@ (80022cc <led_awake_routine1+0x2a4>)
 800203e:	f003 fe2f 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d025      	beq.n	8002094 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002048:	4b9f      	ldr	r3, [pc, #636]	@ (80022c8 <led_awake_routine1+0x2a0>)
 800204a:	edd3 7a08 	vldr	s15, [r3, #32]
 800204e:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80022d0 <led_awake_routine1+0x2a8>
 8002052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	db0d      	blt.n	8002078 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 800205c:	4b9d      	ldr	r3, [pc, #628]	@ (80022d4 <led_awake_routine1+0x2ac>)
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002062:	4b9c      	ldr	r3, [pc, #624]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002068:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 800206a:	4a9b      	ldr	r2, [pc, #620]	@ (80022d8 <led_awake_routine1+0x2b0>)
 800206c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002070:	2008      	movs	r0, #8
 8002072:	f7fe ffcf 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002076:	e196      	b.n	80023a6 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002078:	4b96      	ldr	r3, [pc, #600]	@ (80022d4 <led_awake_routine1+0x2ac>)
 800207a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002080:	4b94      	ldr	r3, [pc, #592]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002088:	4a93      	ldr	r2, [pc, #588]	@ (80022d8 <led_awake_routine1+0x2b0>)
 800208a:	2100      	movs	r1, #0
 800208c:	2008      	movs	r0, #8
 800208e:	f7fe ffc1 	bl	8001014 <setSoftPWM>
}
 8002092:	e188      	b.n	80023a6 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002094:	4a90      	ldr	r2, [pc, #576]	@ (80022d8 <led_awake_routine1+0x2b0>)
 8002096:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800209a:	2008      	movs	r0, #8
 800209c:	f7fe ffba 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 80020a0:	4b89      	ldr	r3, [pc, #548]	@ (80022c8 <led_awake_routine1+0x2a0>)
 80020a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80020a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80022d0 <led_awake_routine1+0x2a8>
 80020aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	db38      	blt.n	8002126 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 80020b4:	4b87      	ldr	r3, [pc, #540]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80020b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020ba:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 80020bc:	4a86      	ldr	r2, [pc, #536]	@ (80022d8 <led_awake_routine1+0x2b0>)
 80020be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c2:	2008      	movs	r0, #8
 80020c4:	f7fe ffa6 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80020c8:	4b84      	ldr	r3, [pc, #528]	@ (80022dc <led_awake_routine1+0x2b4>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 80020d0:	4b83      	ldr	r3, [pc, #524]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3328      	adds	r3, #40	@ 0x28
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	4b80      	ldr	r3, [pc, #512]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e008      	b.n	80020f6 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 80020e4:	4b7e      	ldr	r3, [pc, #504]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b28      	subs	r3, #40	@ 0x28
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	4b7b      	ldr	r3, [pc, #492]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020f4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80020f6:	4b7a      	ldr	r3, [pc, #488]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002100:	dd03      	ble.n	800210a <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 8002102:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e007      	b.n	800211a <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 800210a:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	dc02      	bgt.n	800211a <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 8002114:	4b71      	ldr	r3, [pc, #452]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800211a:	4b71      	ldr	r3, [pc, #452]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800211c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002120:	4b6c      	ldr	r3, [pc, #432]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002124:	e13f      	b.n	80023a6 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8002126:	4b68      	ldr	r3, [pc, #416]	@ (80022c8 <led_awake_routine1+0x2a0>)
 8002128:	edd3 7a08 	vldr	s15, [r3, #32]
 800212c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	dd42      	ble.n	80021c0 <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 800213a:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <led_awake_routine1+0x2a0>)
 800213c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002140:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80022d0 <led_awake_routine1+0x2a8>
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d838      	bhi.n	80021c0 <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 800214e:	4b61      	ldr	r3, [pc, #388]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002150:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002154:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002156:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <led_awake_routine1+0x2b0>)
 8002158:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800215c:	2008      	movs	r0, #8
 800215e:	f7fe ff59 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002162:	4b5e      	ldr	r3, [pc, #376]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 800216a:	4b5d      	ldr	r3, [pc, #372]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800216c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002170:	b29b      	uxth	r3, r3
 8002172:	3328      	adds	r3, #40	@ 0x28
 8002174:	b29b      	uxth	r3, r3
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b59      	ldr	r3, [pc, #356]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e008      	b.n	8002190 <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800217e:	4b58      	ldr	r3, [pc, #352]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b28      	subs	r3, #40	@ 0x28
 8002188:	b29b      	uxth	r3, r3
 800218a:	b21a      	sxth	r2, r3
 800218c:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800218e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002190:	4b53      	ldr	r3, [pc, #332]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800219a:	dd03      	ble.n	80021a4 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 800219c:	4b4f      	ldr	r3, [pc, #316]	@ (80022dc <led_awake_routine1+0x2b4>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 80021a4:	4b4e      	ldr	r3, [pc, #312]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dc02      	bgt.n	80021b4 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 80021ae:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <led_awake_routine1+0x2b4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80021b4:	4b4a      	ldr	r3, [pc, #296]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80021b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80021be:	e0f2      	b.n	80023a6 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 80021c0:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <led_awake_routine1+0x2a0>)
 80021c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80021c6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80022e4 <led_awake_routine1+0x2bc>
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	f340 808d 	ble.w	80022f0 <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 80021d6:	4b3c      	ldr	r3, [pc, #240]	@ (80022c8 <led_awake_routine1+0x2a0>)
 80021d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80021dc:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	f200 8082 	bhi.w	80022f0 <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <led_awake_routine1+0x2b4>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <led_awake_routine1+0x2c0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d003      	beq.n	8002200 <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <led_awake_routine1+0x2c0>)
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <led_awake_routine1+0x2b4>)
 80021fe:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8002200:	4a35      	ldr	r2, [pc, #212]	@ (80022d8 <led_awake_routine1+0x2b0>)
 8002202:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002206:	2008      	movs	r0, #8
 8002208:	f7fe ff04 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <led_awake_routine1+0x2b4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221a:	b29b      	uxth	r3, r3
 800221c:	3328      	adds	r3, #40	@ 0x28
 800221e:	b29b      	uxth	r3, r3
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	e008      	b.n	800223a <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800222a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b28      	subs	r3, #40	@ 0x28
 8002232:	b29b      	uxth	r3, r3
 8002234:	b21a      	sxth	r2, r3
 8002236:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002238:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800223a:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002244:	dd03      	ble.n	800224e <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e007      	b.n	800225e <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	dc02      	bgt.n	800225e <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002258:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <led_awake_routine1+0x2b4>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <led_awake_routine1+0x2c0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002266:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <led_awake_routine1+0x2c4>)
 8002268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226c:	b29b      	uxth	r3, r3
 800226e:	3328      	adds	r3, #40	@ 0x28
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21a      	sxth	r2, r3
 8002274:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <led_awake_routine1+0x2c4>)
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e008      	b.n	800228c <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 800227a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <led_awake_routine1+0x2c4>)
 800227c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b28      	subs	r3, #40	@ 0x28
 8002284:	b29b      	uxth	r3, r3
 8002286:	b21a      	sxth	r2, r3
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <led_awake_routine1+0x2c4>)
 800228a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 800228c:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <led_awake_routine1+0x2c4>)
 800228e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002296:	dd03      	ble.n	80022a0 <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <led_awake_routine1+0x2c0>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <led_awake_routine1+0x2c4>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	dc02      	bgt.n	80022b0 <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <led_awake_routine1+0x2c0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80022b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 80022ba:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <led_awake_routine1+0x2c4>)
 80022bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80022c4:	e06f      	b.n	80023a6 <led_awake_routine1+0x37e>
 80022c6:	bf00      	nop
 80022c8:	2000148c 	.word	0x2000148c
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40833333 	.word	0x40833333
 80022d4:	40000400 	.word	0x40000400
 80022d8:	2000034c 	.word	0x2000034c
 80022dc:	200012ec 	.word	0x200012ec
 80022e0:	200012ee 	.word	0x200012ee
 80022e4:	40533333 	.word	0x40533333
 80022e8:	200012ed 	.word	0x200012ed
 80022ec:	200012f0 	.word	0x200012f0
				GREEN_LED_PWM(disable_led);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <led_awake_routine1+0x384>)
 80022f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80022f8:	4a2d      	ldr	r2, [pc, #180]	@ (80023b0 <led_awake_routine1+0x388>)
 80022fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022fe:	2008      	movs	r0, #8
 8002300:	f7fe fe88 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <led_awake_routine1+0x38c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 800230c:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <led_awake_routine1+0x390>)
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002312:	b29b      	uxth	r3, r3
 8002314:	3328      	adds	r3, #40	@ 0x28
 8002316:	b29b      	uxth	r3, r3
 8002318:	b21a      	sxth	r2, r3
 800231a:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <led_awake_routine1+0x390>)
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	e008      	b.n	8002332 <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <led_awake_routine1+0x390>)
 8002322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b28      	subs	r3, #40	@ 0x28
 800232a:	b29b      	uxth	r3, r3
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <led_awake_routine1+0x390>)
 8002330:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002332:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <led_awake_routine1+0x390>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233c:	dd03      	ble.n	8002346 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 800233e:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <led_awake_routine1+0x38c>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e007      	b.n	8002356 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <led_awake_routine1+0x390>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	dc02      	bgt.n	8002356 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <led_awake_routine1+0x38c>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <led_awake_routine1+0x390>)
 8002358:	f9b3 2000 	ldrsh.w	r2, [r3]
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <led_awake_routine1+0x384>)
 800235e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002360:	e021      	b.n	80023a6 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <led_awake_routine1+0x384>)
 8002364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800236a:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <led_awake_routine1+0x388>)
 800236c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002370:	2008      	movs	r0, #8
 8002372:	f7fe fe4f 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <led_awake_routine1+0x390>)
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002380:	d004      	beq.n	800238c <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <led_awake_routine1+0x390>)
 8002384:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e002      	b.n	8002392 <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <led_awake_routine1+0x390>)
 800238e:	2200      	movs	r2, #0
 8002390:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <led_awake_routine1+0x390>)
 8002394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002398:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <led_awake_routine1+0x384>)
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800239c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80023a0:	f001 fcbe 	bl	8003d20 <HAL_Delay>
}
 80023a4:	e7ff      	b.n	80023a6 <led_awake_routine1+0x37e>
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40000400 	.word	0x40000400
 80023b0:	2000034c 	.word	0x2000034c
 80023b4:	200012ed 	.word	0x200012ed
 80023b8:	200012f0 	.word	0x200012f0

080023bc <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80023c2:	f001 fcfd 	bl	8003dc0 <HAL_GetUIDw1>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 80023cc:	f001 fcf8 	bl	8003dc0 <HAL_GetUIDw1>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <ver_GetUid+0x8c>)
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 80023d8:	4c1c      	ldr	r4, [pc, #112]	@ (800244c <ver_GetUid+0x90>)
 80023da:	f001 fcfd 	bl	8003dd8 <HAL_GetUIDw2>
 80023de:	4603      	mov	r3, r0
 80023e0:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b23      	cmp	r3, #35	@ 0x23
 80023e6:	d909      	bls.n	80023fc <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b3d      	cmp	r3, #61	@ 0x3d
 80023ec:	bf28      	it	cs
 80023ee:	233d      	movcs	r3, #61	@ 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	333d      	adds	r3, #61	@ 0x3d
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <ver_GetUid+0x8c>)
 80023f8:	71da      	strb	r2, [r3, #7]
 80023fa:	e00b      	b.n	8002414 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b09      	cmp	r3, #9
 8002400:	d901      	bls.n	8002406 <ver_GetUid+0x4a>
 8002402:	2241      	movs	r2, #65	@ 0x41
 8002404:	e000      	b.n	8002408 <ver_GetUid+0x4c>
 8002406:	2230      	movs	r2, #48	@ 0x30
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4413      	add	r3, r2
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <ver_GetUid+0x8c>)
 8002412:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8002414:	f001 fcc8 	bl	8003da8 <HAL_GetUIDw0>
 8002418:	4603      	mov	r3, r0
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	480b      	ldr	r0, [pc, #44]	@ (8002450 <ver_GetUid+0x94>)
 8002422:	f010 fc5b 	bl	8012cdc <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8002426:	f001 fcbf 	bl	8003da8 <HAL_GetUIDw0>
 800242a:	4603      	mov	r3, r0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <ver_GetUid+0x98>)
 8002432:	f010 fc53 	bl	8012cdc <CharToHexasc>
	sUid[12] = 0;
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <ver_GetUid+0x8c>)
 8002438:	2200      	movs	r2, #0
 800243a:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 800243c:	4b02      	ldr	r3, [pc, #8]	@ (8002448 <ver_GetUid+0x8c>)
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	20001724 	.word	0x20001724
 800244c:	20001727 	.word	0x20001727
 8002450:	2000172c 	.word	0x2000172c
 8002454:	2000172e 	.word	0x2000172e

08002458 <app_main>:

void app_main() {
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 800245e:	2244      	movs	r2, #68	@ 0x44
 8002460:	2100      	movs	r1, #0
 8002462:	4893      	ldr	r0, [pc, #588]	@ (80026b0 <app_main+0x258>)
 8002464:	f01a ff6a 	bl	801d33c <memset>

	load_param();
 8002468:	f7fe ffd0 	bl	800140c <load_param>

	HAL_TIM_Base_Start(&htim1);
 800246c:	4891      	ldr	r0, [pc, #580]	@ (80026b4 <app_main+0x25c>)
 800246e:	f008 fadd 	bl	800aa2c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8002472:	4991      	ldr	r1, [pc, #580]	@ (80026b8 <app_main+0x260>)
 8002474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002478:	4a90      	ldr	r2, [pc, #576]	@ (80026bc <app_main+0x264>)
 800247a:	4891      	ldr	r0, [pc, #580]	@ (80026c0 <app_main+0x268>)
 800247c:	f002 fb7c 	bl	8004b78 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002480:	4b8c      	ldr	r3, [pc, #560]	@ (80026b4 <app_main+0x25c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b8b      	ldr	r3, [pc, #556]	@ (80026b4 <app_main+0x25c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800248e:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002490:	4a89      	ldr	r2, [pc, #548]	@ (80026b8 <app_main+0x260>)
 8002492:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002496:	2008      	movs	r0, #8
 8002498:	f7fe fdbc 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 800249c:	2100      	movs	r1, #0
 800249e:	4889      	ldr	r0, [pc, #548]	@ (80026c4 <app_main+0x26c>)
 80024a0:	f008 fc08 	bl	800acb4 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 80024a4:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <app_main+0x270>)
 80024a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 80024ac:	2104      	movs	r1, #4
 80024ae:	4885      	ldr	r0, [pc, #532]	@ (80026c4 <app_main+0x26c>)
 80024b0:	f008 fc00 	bl	800acb4 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 80024b4:	4b84      	ldr	r3, [pc, #528]	@ (80026c8 <app_main+0x270>)
 80024b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 80024bc:	4883      	ldr	r0, [pc, #524]	@ (80026cc <app_main+0x274>)
 80024be:	f018 f8cb 	bl	801a658 <Mount_SD>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <app_main+0x7c>

		Unmount_SD("/");
 80024c8:	4880      	ldr	r0, [pc, #512]	@ (80026cc <app_main+0x274>)
 80024ca:	f018 f8f1 	bl	801a6b0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 80024ce:	f018 ff45 	bl	801b35c <MX_USB_DEVICE_Init>
 80024d2:	e002      	b.n	80024da <app_main+0x82>

	} else {
		datawritten = 2;
 80024d4:	4b7e      	ldr	r3, [pc, #504]	@ (80026d0 <app_main+0x278>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80024da:	f001 fc15 	bl	8003d08 <HAL_GetTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a7c      	ldr	r2, [pc, #496]	@ (80026d4 <app_main+0x27c>)
 80024e2:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80024e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024e8:	487b      	ldr	r0, [pc, #492]	@ (80026d8 <app_main+0x280>)
 80024ea:	f003 fbd9 	bl	8005ca0 <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <app_main+0xa2>
		init_sps30();
 80024f4:	f7ff f946 	bl	8001784 <init_sps30>
 80024f8:	e016      	b.n	8002528 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80024fa:	4b6d      	ldr	r3, [pc, #436]	@ (80026b0 <app_main+0x258>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 8002502:	4b6b      	ldr	r3, [pc, #428]	@ (80026b0 <app_main+0x258>)
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 800250a:	4b69      	ldr	r3, [pc, #420]	@ (80026b0 <app_main+0x258>)
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 8002512:	4b67      	ldr	r3, [pc, #412]	@ (80026b0 <app_main+0x258>)
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 800251a:	4b70      	ldr	r3, [pc, #448]	@ (80026dc <app_main+0x284>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 8002520:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <app_main+0x258>)
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8002528:	f7ff f872 	bl	8001610 <init_scd30_i2c>
#endif
	console_init();
 800252c:	f00e fd44 	bl	8010fb8 <console_init>
	Rtc_set_alarm();
 8002530:	f010 fa42 	bl	80129b8 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	4868      	ldr	r0, [pc, #416]	@ (80026e0 <app_main+0x288>)
 800253e:	f006 ffa9 	bl	8009494 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	461a      	mov	r2, r3
 8002546:	4b5a      	ldr	r3, [pc, #360]	@ (80026b0 <app_main+0x258>)
 8002548:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	if (RetainState != 1) {
 800254a:	4b66      	ldr	r3, [pc, #408]	@ (80026e4 <app_main+0x28c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00b      	beq.n	800256a <app_main+0x112>
		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002552:	4965      	ldr	r1, [pc, #404]	@ (80026e8 <app_main+0x290>)
 8002554:	4865      	ldr	r0, [pc, #404]	@ (80026ec <app_main+0x294>)
 8002556:	f018 fe75 	bl	801b244 <createfile>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	4b54      	ldr	r3, [pc, #336]	@ (80026b0 <app_main+0x258>)
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				_Flash_Packet.File_Format);

		RetainState = 1;
 8002564:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <app_main+0x28c>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 800256a:	f7ff fb37 	bl	8001bdc <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 800256e:	23c8      	movs	r3, #200	@ 0xc8
 8002570:	2215      	movs	r2, #21
 8002572:	495f      	ldr	r1, [pc, #380]	@ (80026f0 <app_main+0x298>)
 8002574:	485f      	ldr	r0, [pc, #380]	@ (80026f4 <app_main+0x29c>)
 8002576:	f009 fad1 	bl	800bb1c <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 800257a:	f001 fbc5 	bl	8003d08 <HAL_GetTick>
 800257e:	4603      	mov	r3, r0
 8002580:	4a5d      	ldr	r2, [pc, #372]	@ (80026f8 <app_main+0x2a0>)
 8002582:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002584:	f001 fbc0 	bl	8003d08 <HAL_GetTick>
 8002588:	4603      	mov	r3, r0
 800258a:	4a5c      	ldr	r2, [pc, #368]	@ (80026fc <app_main+0x2a4>)
 800258c:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800258e:	4b5c      	ldr	r3, [pc, #368]	@ (8002700 <app_main+0x2a8>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 8002594:	f7fe fe22 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002598:	e175      	b.n	8002886 <app_main+0x42e>
		{
			pwr_off_detected();
 800259a:	f7fe fe1f 	bl	80011dc <pwr_off_detected>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 800259e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025a2:	484d      	ldr	r0, [pc, #308]	@ (80026d8 <app_main+0x280>)
 80025a4:	f003 fb7c 	bl	8005ca0 <HAL_GPIO_ReadPin>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <app_main+0x160>
					{
				prev_sleep_time = HAL_GetTick();
 80025ae:	f001 fbab 	bl	8003d08 <HAL_GetTick>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <app_main+0x2a0>)
 80025b6:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	2200      	movs	r2, #0
 80025be:	4619      	mov	r1, r3
 80025c0:	4847      	ldr	r0, [pc, #284]	@ (80026e0 <app_main+0x288>)
 80025c2:	f006 fe85 	bl	80092d0 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	4619      	mov	r1, r3
 80025cc:	4844      	ldr	r0, [pc, #272]	@ (80026e0 <app_main+0x288>)
 80025ce:	f006 ff61 	bl	8009494 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80025d2:	79ba      	ldrb	r2, [r7, #6]
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <app_main+0x258>)
 80025d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			_RunTime_Packet.month = sDate.Month;
 80025da:	797a      	ldrb	r2, [r7, #5]
 80025dc:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <app_main+0x258>)
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			_RunTime_Packet.year = sDate.Year;
 80025e2:	79fa      	ldrb	r2, [r7, #7]
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <app_main+0x258>)
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			if (_RunTime_Packet.prev_year != sDate.Year) {
 80025ea:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <app_main+0x258>)
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	79fa      	ldrb	r2, [r7, #7]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <app_main+0x1ac>
				_RunTime_Packet.year_changed = 1; //this for year now
 80025f4:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <app_main+0x258>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <app_main+0x258>)
 8002602:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 8002604:	f7ff f964 	bl	80018d0 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8002608:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <app_main+0x258>)
 800260a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <app_main+0x1c4>
					|| _RunTime_Packet.usb_first_start) {
 8002612:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <app_main+0x258>)
 8002614:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002618:	2b00      	cmp	r3, #0
 800261a:	d045      	beq.n	80026a8 <app_main+0x250>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <app_main+0x258>)
 800261e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <app_main+0x1d6>
				{

					start_usb_timer = 1;
 8002626:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <app_main+0x2ac>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e003      	b.n	8002636 <app_main+0x1de>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <app_main+0x258>)
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 8002636:	f001 fb67 	bl	8003d08 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <app_main+0x27c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	1ad2      	subs	r2, r2, r3
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <app_main+0x2b0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d329      	bcc.n	800269e <app_main+0x246>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800264a:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <app_main+0x258>)
 800264c:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d10d      	bne.n	8002672 <app_main+0x21a>
							&& _RunTime_Packet.usb_first_start) {
 8002656:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <app_main+0x258>)
 8002658:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <app_main+0x21a>
						_RunTime_Packet.sd_file_creation = createfile(
 8002660:	4921      	ldr	r1, [pc, #132]	@ (80026e8 <app_main+0x290>)
 8002662:	4822      	ldr	r0, [pc, #136]	@ (80026ec <app_main+0x294>)
 8002664:	f018 fdee 	bl	801b244 <createfile>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <app_main+0x258>)
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <app_main+0x258>)
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 800267a:	4b0d      	ldr	r3, [pc, #52]	@ (80026b0 <app_main+0x258>)
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <app_main+0x258>)
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <app_main+0x2ac>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002690:	f7ff f878 	bl	8001784 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8002694:	f001 fb38 	bl	8003d08 <HAL_GetTick>
 8002698:	4603      	mov	r3, r0
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <app_main+0x2a4>)
 800269c:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 800269e:	f001 fb33 	bl	8003d08 <HAL_GetTick>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <app_main+0x2a0>)
 80026a6:	6013      	str	r3, [r2, #0]
			}

			console_process();
 80026a8:	f00e fc3a 	bl	8010f20 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80026ac:	e040      	b.n	8002730 <app_main+0x2d8>
 80026ae:	bf00      	nop
 80026b0:	2000148c 	.word	0x2000148c
 80026b4:	20001894 	.word	0x20001894
 80026b8:	2000034c 	.word	0x2000034c
 80026bc:	40020418 	.word	0x40020418
 80026c0:	2000196c 	.word	0x2000196c
 80026c4:	20001924 	.word	0x20001924
 80026c8:	40000400 	.word	0x40000400
 80026cc:	0802099c 	.word	0x0802099c
 80026d0:	20002375 	.word	0x20002375
 80026d4:	20001720 	.word	0x20001720
 80026d8:	40020000 	.word	0x40020000
 80026dc:	200014dc 	.word	0x200014dc
 80026e0:	200017f0 	.word	0x200017f0
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20001358 	.word	0x20001358
 80026ec:	200012f4 	.word	0x200012f4
 80026f0:	080209ac 	.word	0x080209ac
 80026f4:	200019cc 	.word	0x200019cc
 80026f8:	20001718 	.word	0x20001718
 80026fc:	2000171c 	.word	0x2000171c
 8002700:	20000010 	.word	0x20000010
 8002704:	200014d8 	.word	0x200014d8
 8002708:	2000000c 	.word	0x2000000c
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 800270c:	f00e fc08 	bl	8010f20 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002710:	4b8e      	ldr	r3, [pc, #568]	@ (800294c <app_main+0x4f4>)
 8002712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <app_main+0x2c6>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 800271a:	f7fe ff95 	bl	8001648 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 800271e:	f7ff f84d 	bl	80017bc <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002722:	488b      	ldr	r0, [pc, #556]	@ (8002950 <app_main+0x4f8>)
 8002724:	f010 fb70 	bl	8012e08 <adc_Measure>
				led_awake_routine1();
 8002728:	f7ff fc7e 	bl	8002028 <led_awake_routine1>
				pwr_off_detected();
 800272c:	f7fe fd56 	bl	80011dc <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002730:	f001 faea 	bl	8003d08 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	4b87      	ldr	r3, [pc, #540]	@ (8002954 <app_main+0x4fc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	4b86      	ldr	r3, [pc, #536]	@ (8002958 <app_main+0x500>)
 800273e:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 8002740:	429a      	cmp	r2, r3
 8002742:	d809      	bhi.n	8002758 <app_main+0x300>
					&& !_RunTime_Packet.usb_detection
 8002744:	4b81      	ldr	r3, [pc, #516]	@ (800294c <app_main+0x4f4>)
 8002746:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <app_main+0x300>
					&& !_RunTime_Packet.usb_first_start)
 800274e:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <app_main+0x4f4>)
 8002750:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0d9      	beq.n	800270c <app_main+0x2b4>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002758:	f7ff f916 	bl	8001988 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 800275c:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <app_main+0x504>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <app_main+0x33e>
 8002764:	4b79      	ldr	r3, [pc, #484]	@ (800294c <app_main+0x4f4>)
 8002766:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <app_main+0x33e>
					&& !_RunTime_Packet.usb_first_start
 800276e:	4b77      	ldr	r3, [pc, #476]	@ (800294c <app_main+0x4f4>)
 8002770:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10e      	bne.n	8002796 <app_main+0x33e>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002778:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800277c:	4878      	ldr	r0, [pc, #480]	@ (8002960 <app_main+0x508>)
 800277e:	f003 fa8f 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <app_main+0x33e>
					USB_DETECT_Pin)) {
#ifdef use_scd40x
				scd4x_stop_periodic_measurement();
#elif use_scd30
				scd30_stop_periodic_measurement();
 8002788:	f010 fc72 	bl	8013070 <scd30_stop_periodic_measurement>
#endif

				sps30_stop_measurement();
 800278c:	f011 fc14 	bl	8013fb8 <sps30_stop_measurement>
				stop_measurement = 0;
 8002790:	4b72      	ldr	r3, [pc, #456]	@ (800295c <app_main+0x504>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 8002796:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800279a:	4871      	ldr	r0, [pc, #452]	@ (8002960 <app_main+0x508>)
 800279c:	f003 fa80 	bl	8005ca0 <HAL_GPIO_ReadPin>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d050      	beq.n	8002848 <app_main+0x3f0>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80027a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002964 <app_main+0x50c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04c      	beq.n	8002848 <app_main+0x3f0>
 80027ae:	4b67      	ldr	r3, [pc, #412]	@ (800294c <app_main+0x4f4>)
 80027b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d147      	bne.n	8002848 <app_main+0x3f0>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <app_main+0x4f4>)
 80027ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <app_main+0x38a>
						|| _RunTime_Packet.filename_changed
 80027c2:	4b62      	ldr	r3, [pc, #392]	@ (800294c <app_main+0x4f4>)
 80027c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <app_main+0x38a>
						|| _RunTime_Packet.fileformat_changed
 80027cc:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <app_main+0x4f4>)
 80027ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <app_main+0x38a>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80027d6:	4b5d      	ldr	r3, [pc, #372]	@ (800294c <app_main+0x4f4>)
 80027d8:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d114      	bne.n	800280c <app_main+0x3b4>
					_RunTime_Packet.year_changed = 0;
 80027e2:	4b5a      	ldr	r3, [pc, #360]	@ (800294c <app_main+0x4f4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 80027ea:	4b58      	ldr	r3, [pc, #352]	@ (800294c <app_main+0x4f4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 80027f2:	4b56      	ldr	r3, [pc, #344]	@ (800294c <app_main+0x4f4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					_RunTime_Packet.sd_file_creation = createfile(
 80027fa:	495b      	ldr	r1, [pc, #364]	@ (8002968 <app_main+0x510>)
 80027fc:	485b      	ldr	r0, [pc, #364]	@ (800296c <app_main+0x514>)
 80027fe:	f018 fd21 	bl	801b244 <createfile>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	4b51      	ldr	r3, [pc, #324]	@ (800294c <app_main+0x4f4>)
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 800280c:	f018 fcf0 	bl	801b1f0 <filesaving_process>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d013      	beq.n	800283e <app_main+0x3e6>
					HAL_Delay(1500);
 8002816:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800281a:	f001 fa81 	bl	8003d20 <HAL_Delay>
					if (filesaving_process()) {
 800281e:	f018 fce7 	bl	801b1f0 <filesaving_process>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <app_main+0x3e6>
						HAL_Delay(1500);
 8002828:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800282c:	f001 fa78 	bl	8003d20 <HAL_Delay>
						if (filesaving_process()) {
 8002830:	f018 fcde 	bl	801b1f0 <filesaving_process>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <app_main+0x3e6>
							HAL_NVIC_SystemReset();
 800283a:	f002 f880 	bl	800493e <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 800283e:	f001 fa63 	bl	8003d08 <HAL_GetTick>
 8002842:	4603      	mov	r3, r0
 8002844:	4a43      	ldr	r2, [pc, #268]	@ (8002954 <app_main+0x4fc>)
 8002846:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002848:	f010 f8b6 	bl	80129b8 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 800284c:	4840      	ldr	r0, [pc, #256]	@ (8002950 <app_main+0x4f8>)
 800284e:	f010 fadb 	bl	8012e08 <adc_Measure>
			led_awake_routine();
 8002852:	f7ff f9eb 	bl	8001c2c <led_awake_routine>
			save_data();
 8002856:	f7fe fea7 	bl	80015a8 <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800285a:	2101      	movs	r1, #1
 800285c:	4840      	ldr	r0, [pc, #256]	@ (8002960 <app_main+0x508>)
 800285e:	f003 fa1f 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <app_main+0x41e>
				_RunTime_Packet.motion_detection = 1;
 8002868:	4b38      	ldr	r3, [pc, #224]	@ (800294c <app_main+0x4f4>)
 800286a:	2201      	movs	r2, #1
 800286c:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <app_main+0x518>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e005      	b.n	8002882 <app_main+0x42a>
			} else {
				_RunTime_Packet.motion_detection = 0;
 8002876:	4b35      	ldr	r3, [pc, #212]	@ (800294c <app_main+0x4f4>)
 8002878:	2200      	movs	r2, #0
 800287a:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800287c:	4b3c      	ldr	r3, [pc, #240]	@ (8002970 <app_main+0x518>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002882:	f7fe fcab 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002886:	f001 fa3f 	bl	8003d08 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <app_main+0x51c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <app_main+0x520>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	f67f ae7f 	bls.w	800259a <app_main+0x142>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <app_main+0x4f4>)
 800289e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <app_main+0x46e>
 80028a6:	4b29      	ldr	r3, [pc, #164]	@ (800294c <app_main+0x4f4>)
 80028a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <app_main+0x46e>
				|| _RunTime_Packet.fileformat_changed
 80028b0:	4b26      	ldr	r3, [pc, #152]	@ (800294c <app_main+0x4f4>)
 80028b2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <app_main+0x46e>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80028ba:	4b24      	ldr	r3, [pc, #144]	@ (800294c <app_main+0x4f4>)
 80028bc:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d114      	bne.n	80028f0 <app_main+0x498>

			_RunTime_Packet.year_changed = 0;
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <app_main+0x4f4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <app_main+0x4f4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <app_main+0x4f4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			_RunTime_Packet.sd_file_creation = createfile(
 80028de:	4922      	ldr	r1, [pc, #136]	@ (8002968 <app_main+0x510>)
 80028e0:	4822      	ldr	r0, [pc, #136]	@ (800296c <app_main+0x514>)
 80028e2:	f018 fcaf 	bl	801b244 <createfile>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <app_main+0x4f4>)
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);
		}
		if (filesaving_process()) {
 80028f0:	f018 fc7e 	bl	801b1f0 <filesaving_process>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d013      	beq.n	8002922 <app_main+0x4ca>
			HAL_Delay(1500);
 80028fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80028fe:	f001 fa0f 	bl	8003d20 <HAL_Delay>
			if (filesaving_process()) {
 8002902:	f018 fc75 	bl	801b1f0 <filesaving_process>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <app_main+0x4ca>
				HAL_Delay(1500);
 800290c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002910:	f001 fa06 	bl	8003d20 <HAL_Delay>
				if (filesaving_process()) {
 8002914:	f018 fc6c 	bl	801b1f0 <filesaving_process>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <app_main+0x4ca>
					HAL_NVIC_SystemReset();
 800291e:	f002 f80e 	bl	800493e <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002922:	f001 f9f1 	bl	8003d08 <HAL_GetTick>
 8002926:	4603      	mov	r3, r0
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <app_main+0x51c>)
 800292a:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800292c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002930:	480b      	ldr	r0, [pc, #44]	@ (8002960 <app_main+0x508>)
 8002932:	f003 f9b5 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <app_main+0x4ec>

			sleep();
 800293c:	f7ff f83a 	bl	80019b4 <sleep>
			wakeup();
 8002940:	f7ff f8b4 	bl	8001aac <wakeup>

		}
		pwr_off_detected();
 8002944:	f7fe fc4a 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002948:	e617      	b.n	800257a <app_main+0x122>
 800294a:	bf00      	nop
 800294c:	2000148c 	.word	0x2000148c
 8002950:	200014ac 	.word	0x200014ac
 8002954:	2000171c 	.word	0x2000171c
 8002958:	20000008 	.word	0x20000008
 800295c:	20000010 	.word	0x20000010
 8002960:	40020000 	.word	0x40020000
 8002964:	2000002d 	.word	0x2000002d
 8002968:	20001358 	.word	0x20001358
 800296c:	200012f4 	.word	0x200012f4
 8002970:	200014e1 	.word	0x200014e1
 8002974:	20001718 	.word	0x20001718
 8002978:	20000004 	.word	0x20000004

0800297c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002980:	f001 f95c 	bl	8003c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002984:	f000 f822 	bl	80029cc <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002988:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800298c:	f001 f9c8 	bl	8003d20 <HAL_Delay>
  MX_GPIO_Init();
 8002990:	f000 fb00 	bl	8002f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002994:	f000 fade 	bl	8002f54 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002998:	f000 f948 	bl	8002c2c <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 800299c:	f000 fa86 	bl	8002eac <MX_USART1_UART_Init>
  MX_RTC_Init();
 80029a0:	f000 f91e 	bl	8002be0 <MX_RTC_Init>
  MX_I2C1_Init();
 80029a4:	f000 f8d4 	bl	8002b50 <MX_I2C1_Init>
  MX_TIM2_Init();
 80029a8:	f000 f9b0 	bl	8002d0c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80029ac:	f000 faa8 	bl	8002f00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80029b0:	f000 f87c 	bl	8002aac <MX_ADC1_Init>
  MX_FATFS_Init();
 80029b4:	f00f fde2 	bl	801257c <MX_FATFS_Init>
  MX_TIM1_Init();
 80029b8:	f000 f958 	bl	8002c6c <MX_TIM1_Init>
  MX_TIM3_Init();
 80029bc:	f000 f9f4 	bl	8002da8 <MX_TIM3_Init>
  MX_IWDG_Init();
 80029c0:	f000 f8f4 	bl	8002bac <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 80029c4:	f7ff fd48 	bl	8002458 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <main+0x4c>

080029cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b094      	sub	sp, #80	@ 0x50
 80029d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d2:	f107 0320 	add.w	r3, r7, #32
 80029d6:	2230      	movs	r2, #48	@ 0x30
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f01a fcae 	bl	801d33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <SystemClock_Config+0xd8>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa4 <SystemClock_Config+0xd8>)
 80029fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a00:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <SystemClock_Config+0xd8>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <SystemClock_Config+0xdc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a18:	4a23      	ldr	r2, [pc, #140]	@ (8002aa8 <SystemClock_Config+0xdc>)
 8002a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <SystemClock_Config+0xdc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002a2c:	230d      	movs	r3, #13
 8002a2e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a48:	2319      	movs	r3, #25
 8002a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a4c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a52:	2304      	movs	r3, #4
 8002a54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a56:	2307      	movs	r3, #7
 8002a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5a:	f107 0320 	add.w	r3, r7, #32
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 fde0 	bl	8008624 <HAL_RCC_OscConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002a6a:	f000 fc03 	bl	8003274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a6e:	230f      	movs	r3, #15
 8002a70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a72:	2302      	movs	r3, #2
 8002a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f006 f842 	bl	8008b14 <HAL_RCC_ClockConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002a96:	f000 fbed 	bl	8003274 <Error_Handler>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3750      	adds	r7, #80	@ 0x50
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000

08002aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002abe:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ac0:	4a21      	ldr	r2, [pc, #132]	@ (8002b48 <MX_ADC1_Init+0x9c>)
 8002ac2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ac6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ade:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aec:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002aee:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <MX_ADC1_Init+0xa0>)
 8002af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b0c:	480d      	ldr	r0, [pc, #52]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002b0e:	f001 f96f 	bl	8003df0 <HAL_ADC_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002b18:	f000 fbac 	bl	8003274 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b28:	463b      	mov	r3, r7
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <MX_ADC1_Init+0x98>)
 8002b2e:	f001 fb55 	bl	80041dc <HAL_ADC_ConfigChannel>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b38:	f000 fb9c 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20001748 	.word	0x20001748
 8002b48:	40012000 	.word	0x40012000
 8002b4c:	0f000001 	.word	0x0f000001

08002b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b56:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <MX_I2C1_Init+0x54>)
 8002b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <MX_I2C1_Init+0x58>)
 8002b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	@ (8002ba0 <MX_I2C1_Init+0x50>)
 8002b8e:	f003 f8d1 	bl	8005d34 <HAL_I2C_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b98:	f000 fb6c 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20001790 	.word	0x20001790
 8002ba4:	40005400 	.word	0x40005400
 8002ba8:	000186a0 	.word	0x000186a0

08002bac <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <MX_IWDG_Init+0x2c>)
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <MX_IWDG_Init+0x30>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <MX_IWDG_Init+0x2c>)
 8002bb8:	2206      	movs	r2, #6
 8002bba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <MX_IWDG_Init+0x2c>)
 8002bbe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002bc2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002bc4:	4804      	ldr	r0, [pc, #16]	@ (8002bd8 <MX_IWDG_Init+0x2c>)
 8002bc6:	f004 f9a8 	bl	8006f1a <HAL_IWDG_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002bd0:	f000 fb50 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200017e4 	.word	0x200017e4
 8002bdc:	40003000 	.word	0x40003000

08002be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002be6:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <MX_RTC_Init+0x48>)
 8002be8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002bf2:	227f      	movs	r2, #127	@ 0x7f
 8002bf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002bf8:	22ff      	movs	r2, #255	@ 0xff
 8002bfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <MX_RTC_Init+0x44>)
 8002c10:	f006 fa4e 	bl	80090b0 <HAL_RTC_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002c1a:	f000 fb2b 	bl	8003274 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200017f0 	.word	0x200017f0
 8002c28:	40002800 	.word	0x40002800

08002c2c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c32:	4a0d      	ldr	r2, [pc, #52]	@ (8002c68 <MX_SDIO_SD_Init+0x3c>)
 8002c34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c4e:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002c54:	4b03      	ldr	r3, [pc, #12]	@ (8002c64 <MX_SDIO_SD_Init+0x38>)
 8002c56:	2205      	movs	r2, #5
 8002c58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	20001810 	.word	0x20001810
 8002c68:	40012c00 	.word	0x40012c00

08002c6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c80:	463b      	mov	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <MX_TIM1_Init+0x9c>)
 8002c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002c9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cb4:	4813      	ldr	r0, [pc, #76]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002cb6:	f007 fe15 	bl	800a8e4 <HAL_TIM_Base_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002cc0:	f000 fad8 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002cd2:	f008 fa69 	bl	800b1a8 <HAL_TIM_ConfigClockSource>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002cdc:	f000 faca 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ce8:	463b      	mov	r3, r7
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	@ (8002d04 <MX_TIM1_Init+0x98>)
 8002cee:	f008 fe17 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002cf8:	f000 fabc 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20001894 	.word	0x20001894
 8002d08:	40010000 	.word	0x40010000

08002d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	463b      	mov	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d28:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d40:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d46:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d4c:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d52:	4814      	ldr	r0, [pc, #80]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d54:	f007 fdc6 	bl	800a8e4 <HAL_TIM_Base_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d5e:	f000 fa89 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480d      	ldr	r0, [pc, #52]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d70:	f008 fa1a 	bl	800b1a8 <HAL_TIM_ConfigClockSource>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d7a:	f000 fa7b 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d86:	463b      	mov	r3, r7
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4806      	ldr	r0, [pc, #24]	@ (8002da4 <MX_TIM2_Init+0x98>)
 8002d8c:	f008 fdc8 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d96:	f000 fa6d 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200018dc 	.word	0x200018dc

08002da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08e      	sub	sp, #56	@ 0x38
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dbc:	f107 0320 	add.w	r3, r7, #32
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
 8002dd4:	615a      	str	r2, [r3, #20]
 8002dd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002dda:	4a33      	ldr	r2, [pc, #204]	@ (8002ea8 <MX_TIM3_Init+0x100>)
 8002ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dde:	4b31      	ldr	r3, [pc, #196]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002dea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002dec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002df0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dfe:	4829      	ldr	r0, [pc, #164]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e00:	f007 fd70 	bl	800a8e4 <HAL_TIM_Base_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e0a:	f000 fa33 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4822      	ldr	r0, [pc, #136]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e1c:	f008 f9c4 	bl	800b1a8 <HAL_TIM_ConfigClockSource>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e26:	f000 fa25 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e2a:	481e      	ldr	r0, [pc, #120]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e2c:	f007 fee9 	bl	800ac02 <HAL_TIM_PWM_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e36:	f000 fa1d 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e42:	f107 0320 	add.w	r3, r7, #32
 8002e46:	4619      	mov	r1, r3
 8002e48:	4816      	ldr	r0, [pc, #88]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e4a:	f008 fd69 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e54:	f000 fa0e 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e58:	2360      	movs	r3, #96	@ 0x60
 8002e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480d      	ldr	r0, [pc, #52]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e70:	f008 f8d8 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e7a:	f000 f9fb 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2204      	movs	r2, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4807      	ldr	r0, [pc, #28]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e86:	f008 f8cd 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e90:	f000 f9f0 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e94:	4803      	ldr	r0, [pc, #12]	@ (8002ea4 <MX_TIM3_Init+0xfc>)
 8002e96:	f000 fc0d 	bl	80036b4 <HAL_TIM_MspPostInit>

}
 8002e9a:	bf00      	nop
 8002e9c:	3738      	adds	r7, #56	@ 0x38
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20001924 	.word	0x20001924
 8002ea8:	40000400 	.word	0x40000400

08002eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002eb2:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <MX_USART1_UART_Init+0x50>)
 8002eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee2:	4805      	ldr	r0, [pc, #20]	@ (8002ef8 <MX_USART1_UART_Init+0x4c>)
 8002ee4:	f008 fd9e 	bl	800ba24 <HAL_UART_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eee:	f000 f9c1 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200019cc 	.word	0x200019cc
 8002efc:	40011000 	.word	0x40011000

08002f00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f06:	4a12      	ldr	r2, [pc, #72]	@ (8002f50 <MX_USART2_UART_Init+0x50>)
 8002f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f26:	220c      	movs	r2, #12
 8002f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f36:	4805      	ldr	r0, [pc, #20]	@ (8002f4c <MX_USART2_UART_Init+0x4c>)
 8002f38:	f008 fd74 	bl	800ba24 <HAL_UART_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f42:	f000 f997 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20001a10 	.word	0x20001a10
 8002f50:	40004400 	.word	0x40004400

08002f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <MX_DMA_Init+0x3c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a0b      	ldr	r2, [pc, #44]	@ (8002f90 <MX_DMA_Init+0x3c>)
 8002f64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <MX_DMA_Init+0x3c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2044      	movs	r0, #68	@ 0x44
 8002f7c:	f001 fca7 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002f80:	2044      	movs	r0, #68	@ 0x44
 8002f82:	f001 fcc0 	bl	8004906 <HAL_NVIC_EnableIRQ>

}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b71      	ldr	r3, [pc, #452]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	4a70      	ldr	r2, [pc, #448]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fba:	4b6e      	ldr	r3, [pc, #440]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	4a69      	ldr	r2, [pc, #420]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b63      	ldr	r3, [pc, #396]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a62      	ldr	r2, [pc, #392]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff2:	4b60      	ldr	r3, [pc, #384]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	4a5b      	ldr	r2, [pc, #364]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6313      	str	r3, [r2, #48]	@ 0x30
 800300e:	4b59      	ldr	r3, [pc, #356]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	4a54      	ldr	r2, [pc, #336]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6313      	str	r3, [r2, #48]	@ 0x30
 800302a:	4b52      	ldr	r3, [pc, #328]	@ (8003174 <MX_GPIO_Init+0x1e0>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	2102      	movs	r1, #2
 800303a:	484f      	ldr	r0, [pc, #316]	@ (8003178 <MX_GPIO_Init+0x1e4>)
 800303c:	f002 fe48 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003040:	2201      	movs	r2, #1
 8003042:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003046:	484d      	ldr	r0, [pc, #308]	@ (800317c <MX_GPIO_Init+0x1e8>)
 8003048:	f002 fe42 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	2108      	movs	r1, #8
 8003050:	484a      	ldr	r0, [pc, #296]	@ (800317c <MX_GPIO_Init+0x1e8>)
 8003052:	f002 fe3d 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003056:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 800305a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800305c:	2303      	movs	r3, #3
 800305e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4619      	mov	r1, r3
 800306a:	4845      	ldr	r0, [pc, #276]	@ (8003180 <MX_GPIO_Init+0x1ec>)
 800306c:	f002 fbb0 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4619      	mov	r1, r3
 8003082:	483d      	ldr	r0, [pc, #244]	@ (8003178 <MX_GPIO_Init+0x1e4>)
 8003084:	f002 fba4 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8003088:	2302      	movs	r3, #2
 800308a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003094:	2302      	movs	r3, #2
 8003096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	4836      	ldr	r0, [pc, #216]	@ (8003178 <MX_GPIO_Init+0x1e4>)
 80030a0:	f002 fb96 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80030a4:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80030a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030aa:	2303      	movs	r3, #3
 80030ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	482f      	ldr	r0, [pc, #188]	@ (8003178 <MX_GPIO_Init+0x1e4>)
 80030ba:	f002 fb89 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80030be:	f247 4307 	movw	r3, #29703	@ 0x7407
 80030c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	2303      	movs	r3, #3
 80030c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	482a      	ldr	r0, [pc, #168]	@ (800317c <MX_GPIO_Init+0x1e8>)
 80030d4:	f002 fb7c 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80030d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e6:	2302      	movs	r3, #2
 80030e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	4822      	ldr	r0, [pc, #136]	@ (800317c <MX_GPIO_Init+0x1e8>)
 80030f2:	f002 fb6d 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80030f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003102:	2302      	movs	r3, #2
 8003104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4619      	mov	r1, r3
 800310c:	481a      	ldr	r0, [pc, #104]	@ (8003178 <MX_GPIO_Init+0x1e4>)
 800310e:	f002 fb5f 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003118:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800311c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	4813      	ldr	r0, [pc, #76]	@ (8003178 <MX_GPIO_Init+0x1e4>)
 800312a:	f002 fb51 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800312e:	2308      	movs	r3, #8
 8003130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	480d      	ldr	r0, [pc, #52]	@ (800317c <MX_GPIO_Init+0x1e8>)
 8003146:	f002 fb43 	bl	80057d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	2017      	movs	r0, #23
 8003150:	f001 fbbd 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003154:	2017      	movs	r0, #23
 8003156:	f001 fbd6 	bl	8004906 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	2028      	movs	r0, #40	@ 0x28
 8003160:	f001 fbb5 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003164:	2028      	movs	r0, #40	@ 0x28
 8003166:	f001 fbce 	bl	8004906 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800316a:	bf00      	nop
 800316c:	3728      	adds	r7, #40	@ 0x28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000
 800317c:	40020400 	.word	0x40020400
 8003180:	40020800 	.word	0x40020800

08003184 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d101      	bne.n	800319a <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8003196:	f7fd ffcb 	bl	8001130 <timer_interrupt>
}

}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80031b4:	f7fd ffa0 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031be:	d118      	bne.n	80031f2 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <HAL_GPIO_EXTI_Callback+0x64>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <HAL_GPIO_EXTI_Callback+0x64>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 80031d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <HAL_GPIO_EXTI_Callback+0x64>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_GPIO_EXTI_Callback+0x68>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80031de:	f000 fd93 	bl	8003d08 <HAL_GetTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003210 <HAL_GPIO_EXTI_Callback+0x6c>)
 80031e6:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80031e8:	f000 fd8e 	bl	8003d08 <HAL_GetTick>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4a09      	ldr	r2, [pc, #36]	@ (8003214 <HAL_GPIO_EXTI_Callback+0x70>)
 80031f0:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 80031fa:	f7fd ffb3 	bl	8001164 <power_off_detect>
    }
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2000148c 	.word	0x2000148c
 800320c:	200014dc 	.word	0x200014dc
 8003210:	20001720 	.word	0x20001720
 8003214:	20001718 	.word	0x20001718

08003218 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003220:	f00f fb2a 	bl	8012878 <RtcInt>
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <HAL_UART_ErrorCallback+0x40>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d106      	bne.n	800324a <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	43d2      	mvns	r2, r2
 8003246:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003248:	e009      	b.n	800325e <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <HAL_UART_ErrorCallback+0x44>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d105      	bne.n	800325e <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	43d2      	mvns	r2, r2
 800325c:	601a      	str	r2, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	200019cc 	.word	0x200019cc
 8003270:	20001a10 	.word	0x20001a10

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003278:	b672      	cpsid	i
}
 800327a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 800327c:	f001 fb5f 	bl	800493e <HAL_NVIC_SystemReset>
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <Error_Handler+0xc>

08003284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <HAL_MspInit+0x4c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a0f      	ldr	r2, [pc, #60]	@ (80032d0 <HAL_MspInit+0x4c>)
 8003294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_MspInit+0x4c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_MspInit+0x4c>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <HAL_MspInit+0x4c>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_MspInit+0x4c>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	@ 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a17      	ldr	r2, [pc, #92]	@ (8003350 <HAL_ADC_MspInit+0x7c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d127      	bne.n	8003346 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	4b16      	ldr	r3, [pc, #88]	@ (8003354 <HAL_ADC_MspInit+0x80>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	4a15      	ldr	r2, [pc, #84]	@ (8003354 <HAL_ADC_MspInit+0x80>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003304:	6453      	str	r3, [r2, #68]	@ 0x44
 8003306:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <HAL_ADC_MspInit+0x80>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <HAL_ADC_MspInit+0x80>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a0e      	ldr	r2, [pc, #56]	@ (8003354 <HAL_ADC_MspInit+0x80>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <HAL_ADC_MspInit+0x80>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 800332e:	2301      	movs	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003332:	2303      	movs	r3, #3
 8003334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4805      	ldr	r0, [pc, #20]	@ (8003358 <HAL_ADC_MspInit+0x84>)
 8003342:	f002 fa45 	bl	80057d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003346:	bf00      	nop
 8003348:	3728      	adds	r7, #40	@ 0x28
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40012000 	.word	0x40012000
 8003354:	40023800 	.word	0x40023800
 8003358:	40020800 	.word	0x40020800

0800335c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a08      	ldr	r2, [pc, #32]	@ (800338c <HAL_ADC_MspDeInit+0x30>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d109      	bne.n	8003382 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <HAL_ADC_MspDeInit+0x34>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	4a07      	ldr	r2, [pc, #28]	@ (8003390 <HAL_ADC_MspDeInit+0x34>)
 8003374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003378:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800337a:	2101      	movs	r1, #1
 800337c:	4805      	ldr	r0, [pc, #20]	@ (8003394 <HAL_ADC_MspDeInit+0x38>)
 800337e:	f002 fbab 	bl	8005ad8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40012000 	.word	0x40012000
 8003390:	40023800 	.word	0x40023800
 8003394:	40020800 	.word	0x40020800

08003398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	@ 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a19      	ldr	r2, [pc, #100]	@ (800341c <HAL_I2C_MspInit+0x84>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12c      	bne.n	8003414 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <HAL_I2C_MspInit+0x88>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	4a17      	ldr	r2, [pc, #92]	@ (8003420 <HAL_I2C_MspInit+0x88>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ca:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <HAL_I2C_MspInit+0x88>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80033d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033dc:	2312      	movs	r3, #18
 80033de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e8:	2304      	movs	r3, #4
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	4619      	mov	r1, r3
 80033f2:	480c      	ldr	r0, [pc, #48]	@ (8003424 <HAL_I2C_MspInit+0x8c>)
 80033f4:	f002 f9ec 	bl	80057d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <HAL_I2C_MspInit+0x88>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	4a07      	ldr	r2, [pc, #28]	@ (8003420 <HAL_I2C_MspInit+0x88>)
 8003402:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003406:	6413      	str	r3, [r2, #64]	@ 0x40
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_I2C_MspInit+0x88>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003414:	bf00      	nop
 8003416:	3728      	adds	r7, #40	@ 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40005400 	.word	0x40005400
 8003420:	40023800 	.word	0x40023800
 8003424:	40020400 	.word	0x40020400

08003428 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0b      	ldr	r2, [pc, #44]	@ (8003464 <HAL_I2C_MspDeInit+0x3c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10f      	bne.n	800345a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800343a:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_I2C_MspDeInit+0x40>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <HAL_I2C_MspDeInit+0x40>)
 8003440:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003444:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8003446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800344a:	4808      	ldr	r0, [pc, #32]	@ (800346c <HAL_I2C_MspDeInit+0x44>)
 800344c:	f002 fb44 	bl	8005ad8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003454:	4805      	ldr	r0, [pc, #20]	@ (800346c <HAL_I2C_MspDeInit+0x44>)
 8003456:	f002 fb3f 	bl	8005ad8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40005400 	.word	0x40005400
 8003468:	40023800 	.word	0x40023800
 800346c:	40020400 	.word	0x40020400

08003470 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_RTC_MspInit+0x60>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d119      	bne.n	80034c6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003492:	2302      	movs	r3, #2
 8003494:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800349a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4618      	mov	r0, r3
 80034a2:	f005 fd17 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80034ac:	f7ff fee2 	bl	8003274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034b0:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_RTC_MspInit+0x64>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	2029      	movs	r0, #41	@ 0x29
 80034bc:	f001 fa07 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80034c0:	2029      	movs	r0, #41	@ 0x29
 80034c2:	f001 fa20 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034c6:	bf00      	nop
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40002800 	.word	0x40002800
 80034d4:	42470e3c 	.word	0x42470e3c

080034d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a28      	ldr	r2, [pc, #160]	@ (8003598 <HAL_SD_MspInit+0xc0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d14a      	bne.n	8003590 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b27      	ldr	r3, [pc, #156]	@ (800359c <HAL_SD_MspInit+0xc4>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_SD_MspInit+0xc4>)
 8003504:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003508:	6453      	str	r3, [r2, #68]	@ 0x44
 800350a:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_SD_MspInit+0xc4>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_SD_MspInit+0xc4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a1f      	ldr	r2, [pc, #124]	@ (800359c <HAL_SD_MspInit+0xc4>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <HAL_SD_MspInit+0xc4>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_SD_MspInit+0xc4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a18      	ldr	r2, [pc, #96]	@ (800359c <HAL_SD_MspInit+0xc4>)
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b16      	ldr	r3, [pc, #88]	@ (800359c <HAL_SD_MspInit+0xc4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800354e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003560:	230c      	movs	r3, #12
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	480d      	ldr	r0, [pc, #52]	@ (80035a0 <HAL_SD_MspInit+0xc8>)
 800356c:	f002 f930 	bl	80057d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003570:	2304      	movs	r3, #4
 8003572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003580:	230c      	movs	r3, #12
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	4806      	ldr	r0, [pc, #24]	@ (80035a4 <HAL_SD_MspInit+0xcc>)
 800358c:	f002 f920 	bl	80057d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003590:	bf00      	nop
 8003592:	3728      	adds	r7, #40	@ 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40023800 	.word	0x40023800
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020c00 	.word	0x40020c00

080035a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a3a      	ldr	r2, [pc, #232]	@ (80036a0 <HAL_TIM_Base_MspInit+0xf8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d13f      	bne.n	800363a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	4a38      	ldr	r2, [pc, #224]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ca:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80035d6:	4b34      	ldr	r3, [pc, #208]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 80035d8:	4a34      	ldr	r2, [pc, #208]	@ (80036ac <HAL_TIM_Base_MspInit+0x104>)
 80035da:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80035dc:	4b32      	ldr	r3, [pc, #200]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 80035de:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80035e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e4:	4b30      	ldr	r3, [pc, #192]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ea:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80035f0:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 80035f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035f8:	4b2b      	ldr	r3, [pc, #172]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 80035fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003600:	4b29      	ldr	r3, [pc, #164]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 8003602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003606:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003608:	4b27      	ldr	r3, [pc, #156]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 800360a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800360e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003610:	4b25      	ldr	r3, [pc, #148]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003616:	4b24      	ldr	r3, [pc, #144]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 8003618:	2200      	movs	r2, #0
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800361c:	4822      	ldr	r0, [pc, #136]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 800361e:	f001 f99f 	bl	8004960 <HAL_DMA_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003628:	f7ff fe24 	bl	8003274 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a1e      	ldr	r2, [pc, #120]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 8003630:	621a      	str	r2, [r3, #32]
 8003632:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <HAL_TIM_Base_MspInit+0x100>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003638:	e02e      	b.n	8003698 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003642:	d116      	bne.n	8003672 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	4b16      	ldr	r3, [pc, #88]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6413      	str	r3, [r2, #64]	@ 0x40
 8003654:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	2100      	movs	r1, #0
 8003664:	201c      	movs	r0, #28
 8003666:	f001 f932 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800366a:	201c      	movs	r0, #28
 800366c:	f001 f94b 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8003670:	e012      	b.n	8003698 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a0e      	ldr	r2, [pc, #56]	@ (80036b0 <HAL_TIM_Base_MspInit+0x108>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10d      	bne.n	8003698 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	4a07      	ldr	r2, [pc, #28]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	6413      	str	r3, [r2, #64]	@ 0x40
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_TIM_Base_MspInit+0xfc>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	2000196c 	.word	0x2000196c
 80036ac:	40026488 	.word	0x40026488
 80036b0:	40000400 	.word	0x40000400

080036b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a12      	ldr	r2, [pc, #72]	@ (800371c <HAL_TIM_MspPostInit+0x68>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d11d      	bne.n	8003712 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_TIM_MspPostInit+0x6c>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	4a10      	ldr	r2, [pc, #64]	@ (8003720 <HAL_TIM_MspPostInit+0x6c>)
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <HAL_TIM_MspPostInit+0x6c>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80036f2:	2330      	movs	r3, #48	@ 0x30
 80036f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003702:	2302      	movs	r3, #2
 8003704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	4619      	mov	r1, r3
 800370c:	4805      	ldr	r0, [pc, #20]	@ (8003724 <HAL_TIM_MspPostInit+0x70>)
 800370e:	f002 f85f 	bl	80057d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003712:	bf00      	nop
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40000400 	.word	0x40000400
 8003720:	40023800 	.word	0x40023800
 8003724:	40020400 	.word	0x40020400

08003728 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a16      	ldr	r2, [pc, #88]	@ (8003790 <HAL_TIM_Base_MspDeInit+0x68>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10b      	bne.n	8003752 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800373a:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <HAL_TIM_Base_MspDeInit+0x6c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f9b6 	bl	8004abc <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003750:	e019      	b.n	8003786 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375a:	d109      	bne.n	8003770 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 800375c:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <HAL_TIM_Base_MspDeInit+0x6c>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003768:	201c      	movs	r0, #28
 800376a:	f001 f8da 	bl	8004922 <HAL_NVIC_DisableIRQ>
}
 800376e:	e00a      	b.n	8003786 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <HAL_TIM_Base_MspDeInit+0x70>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d105      	bne.n	8003786 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_TIM_Base_MspDeInit+0x6c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003780:	f023 0302 	bic.w	r3, r3, #2
 8003784:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40023800 	.word	0x40023800
 8003798:	40000400 	.word	0x40000400

0800379c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	@ 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a3a      	ldr	r2, [pc, #232]	@ (80038a4 <HAL_UART_MspInit+0x108>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d134      	bne.n	8003828 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	4b39      	ldr	r3, [pc, #228]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	4a38      	ldr	r2, [pc, #224]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ce:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	4b32      	ldr	r3, [pc, #200]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	4a31      	ldr	r2, [pc, #196]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ea:	4b2f      	ldr	r3, [pc, #188]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 80037f6:	23c0      	movs	r3, #192	@ 0xc0
 80037f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003802:	2303      	movs	r3, #3
 8003804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003806:	2307      	movs	r3, #7
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380a:	f107 031c 	add.w	r3, r7, #28
 800380e:	4619      	mov	r1, r3
 8003810:	4826      	ldr	r0, [pc, #152]	@ (80038ac <HAL_UART_MspInit+0x110>)
 8003812:	f001 ffdd 	bl	80057d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	2025      	movs	r0, #37	@ 0x25
 800381c:	f001 f857 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003820:	2025      	movs	r0, #37	@ 0x25
 8003822:	f001 f870 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003826:	e038      	b.n	800389a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a20      	ldr	r2, [pc, #128]	@ (80038b0 <HAL_UART_MspInit+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d133      	bne.n	800389a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 800383c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003840:	6413      	str	r3, [r2, #64]	@ 0x40
 8003842:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4a14      	ldr	r2, [pc, #80]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6313      	str	r3, [r2, #48]	@ 0x30
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_UART_MspInit+0x10c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800386a:	230c      	movs	r3, #12
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800387a:	2307      	movs	r3, #7
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	4619      	mov	r1, r3
 8003884:	480b      	ldr	r0, [pc, #44]	@ (80038b4 <HAL_UART_MspInit+0x118>)
 8003886:	f001 ffa3 	bl	80057d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2100      	movs	r1, #0
 800388e:	2026      	movs	r0, #38	@ 0x26
 8003890:	f001 f81d 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003894:	2026      	movs	r0, #38	@ 0x26
 8003896:	f001 f836 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3730      	adds	r7, #48	@ 0x30
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40011000 	.word	0x40011000
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40020000 	.word	0x40020000

080038b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <HAL_UART_MspDeInit+0x5c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038ca:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_UART_MspDeInit+0x60>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <HAL_UART_MspDeInit+0x60>)
 80038d0:	f023 0310 	bic.w	r3, r3, #16
 80038d4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 80038d6:	21c0      	movs	r1, #192	@ 0xc0
 80038d8:	4810      	ldr	r0, [pc, #64]	@ (800391c <HAL_UART_MspDeInit+0x64>)
 80038da:	f002 f8fd 	bl	8005ad8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80038de:	2025      	movs	r0, #37	@ 0x25
 80038e0:	f001 f81f 	bl	8004922 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80038e4:	e011      	b.n	800390a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003920 <HAL_UART_MspDeInit+0x68>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10c      	bne.n	800390a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_UART_MspDeInit+0x60>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_UART_MspDeInit+0x60>)
 80038f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80038fa:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 80038fc:	210c      	movs	r1, #12
 80038fe:	4809      	ldr	r0, [pc, #36]	@ (8003924 <HAL_UART_MspDeInit+0x6c>)
 8003900:	f002 f8ea 	bl	8005ad8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003904:	2026      	movs	r0, #38	@ 0x26
 8003906:	f001 f80c 	bl	8004922 <HAL_NVIC_DisableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40011000 	.word	0x40011000
 8003918:	40023800 	.word	0x40023800
 800391c:	40020400 	.word	0x40020400
 8003920:	40004400 	.word	0x40004400
 8003924:	40020000 	.word	0x40020000

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 800392c:	f001 f807 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <NMI_Handler+0x8>

08003934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003938:	f001 f801 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <HardFault_Handler+0x8>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003944:	f000 fffb 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <MemManage_Handler+0x8>

0800394c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003950:	f000 fff5 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <BusFault_Handler+0x8>

08003958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800395c:	f000 ffef 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <UsageFault_Handler+0x8>

08003964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003968:	f000 ffe9 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}

08003970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003974:	f000 ffe3 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}

0800397c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003980:	f000 ffdd 	bl	800493e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 800398c:	4803      	ldr	r0, [pc, #12]	@ (800399c <SysTick_Handler+0x14>)
 800398e:	f003 fb06 	bl	8006f9e <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003992:	f000 f9a5 	bl	8003ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200017e4 	.word	0x200017e4

080039a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80039a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80039a8:	f002 f9ac 	bl	8005d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039b4:	4802      	ldr	r0, [pc, #8]	@ (80039c0 <TIM2_IRQHandler+0x10>)
 80039b6:	f007 fa2d 	bl	800ae14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200018dc 	.word	0x200018dc

080039c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039c8:	4802      	ldr	r0, [pc, #8]	@ (80039d4 <USART1_IRQHandler+0x10>)
 80039ca:	f008 f9cf 	bl	800bd6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200019cc 	.word	0x200019cc

080039d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039dc:	4802      	ldr	r0, [pc, #8]	@ (80039e8 <USART2_IRQHandler+0x10>)
 80039de:	f008 f9c5 	bl	800bd6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20001a10 	.word	0x20001a10

080039ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 80039f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80039f4:	f002 f986 	bl	8005d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}

080039fc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003a00:	4802      	ldr	r0, [pc, #8]	@ (8003a0c <RTC_Alarm_IRQHandler+0x10>)
 8003a02:	f005 fed9 	bl	80097b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200017f0 	.word	0x200017f0

08003a10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a14:	4802      	ldr	r0, [pc, #8]	@ (8003a20 <OTG_FS_IRQHandler+0x10>)
 8003a16:	f003 fc7e 	bl	8007316 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20002954 	.word	0x20002954

08003a24 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003a28:	4802      	ldr	r0, [pc, #8]	@ (8003a34 <DMA2_Stream5_IRQHandler+0x10>)
 8003a2a:	f001 f973 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000196c 	.word	0x2000196c

08003a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return 1;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_kill>:

int _kill(int pid, int sig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a52:	f019 fd55 	bl	801d500 <__errno>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2216      	movs	r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_exit>:

void _exit (int status)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ffe7 	bl	8003a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <_exit+0x12>

08003a7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e00a      	b.n	8003aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a90:	f3af 8000 	nop.w
 8003a94:	4601      	mov	r1, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	60ba      	str	r2, [r7, #8]
 8003a9c:	b2ca      	uxtb	r2, r1
 8003a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	dbf0      	blt.n	8003a90 <_read+0x12>
  }

  return len;
 8003aae:	687b      	ldr	r3, [r7, #4]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e009      	b.n	8003ade <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	60ba      	str	r2, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	dbf1      	blt.n	8003aca <_write+0x12>
  }
  return len;
 8003ae6:	687b      	ldr	r3, [r7, #4]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_close>:

int _close(int file)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b18:	605a      	str	r2, [r3, #4]
  return 0;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_isatty>:

int _isatty(int file)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b60:	4a14      	ldr	r2, [pc, #80]	@ (8003bb4 <_sbrk+0x5c>)
 8003b62:	4b15      	ldr	r3, [pc, #84]	@ (8003bb8 <_sbrk+0x60>)
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <_sbrk+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <_sbrk+0x64>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	@ (8003bc0 <_sbrk+0x68>)
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7a:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b88:	f019 fcba 	bl	801d500 <__errno>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	220c      	movs	r2, #12
 8003b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e009      	b.n	8003bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b98:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a05      	ldr	r2, [pc, #20]	@ (8003bbc <_sbrk+0x64>)
 8003ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20018000 	.word	0x20018000
 8003bb8:	00000400 	.word	0x00000400
 8003bbc:	20001a54 	.word	0x20001a54
 8003bc0:	20003828 	.word	0x20003828

08003bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc8:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <SystemInit+0x20>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	4a05      	ldr	r2, [pc, #20]	@ (8003be4 <SystemInit+0x20>)
 8003bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bec:	480d      	ldr	r0, [pc, #52]	@ (8003c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bee:	490e      	ldr	r1, [pc, #56]	@ (8003c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8003c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf4:	e002      	b.n	8003bfc <LoopCopyDataInit>

08003bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfa:	3304      	adds	r3, #4

08003bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c00:	d3f9      	bcc.n	8003bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c02:	4a0b      	ldr	r2, [pc, #44]	@ (8003c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c04:	4c0b      	ldr	r4, [pc, #44]	@ (8003c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c08:	e001      	b.n	8003c0e <LoopFillZerobss>

08003c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c0c:	3204      	adds	r2, #4

08003c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c10:	d3fb      	bcc.n	8003c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c12:	f7ff ffd7 	bl	8003bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c16:	f019 fc79 	bl	801d50c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1a:	f7fe feaf 	bl	800297c <main>
  bx  lr    
 8003c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c24:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8003c28:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8003c2c:	08023314 	.word	0x08023314
  ldr r2, =_sbss
 8003c30:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8003c34:	20003824 	.word	0x20003824

08003c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c38:	e7fe      	b.n	8003c38 <ADC_IRQHandler>
	...

08003c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c40:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <HAL_Init+0x40>)
 8003c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <HAL_Init+0x40>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c58:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_Init+0x40>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	@ (8003c7c <HAL_Init+0x40>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c64:	2003      	movs	r0, #3
 8003c66:	f000 fe27 	bl	80048b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6a:	200f      	movs	r0, #15
 8003c6c:	f000 f808 	bl	8003c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c70:	f7ff fb08 	bl	8003284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00

08003c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c88:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <HAL_InitTick+0x54>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <HAL_InitTick+0x58>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fe51 	bl	8004946 <HAL_SYSTICK_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00e      	b.n	8003ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d80a      	bhi.n	8003cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	f000 fe07 	bl	80048ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc0:	4a06      	ldr	r2, [pc, #24]	@ (8003cdc <HAL_InitTick+0x5c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000014 	.word	0x20000014
 8003cd8:	2000001c 	.word	0x2000001c
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_IncTick+0x20>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_IncTick+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	@ (8003d04 <HAL_IncTick+0x24>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	20001a58 	.word	0x20001a58

08003d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_GetTick+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20001a58 	.word	0x20001a58

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff ffee 	bl	8003d08 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <HAL_Delay+0x44>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000001c 	.word	0x2000001c

08003d68 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_SuspendTick+0x1c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_SuspendTick+0x1c>)
 8003d72:	f023 0302 	bic.w	r3, r3, #2
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_ResumeTick+0x1c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a04      	ldr	r2, [pc, #16]	@ (8003da4 <HAL_ResumeTick+0x1c>)
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e010 	.word	0xe000e010

08003da8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_GetUIDw0+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	1fff7a10 	.word	0x1fff7a10

08003dc0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_GetUIDw1+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	1fff7a14 	.word	0x1fff7a14

08003dd8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_GetUIDw2+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	1fff7a18 	.word	0x1fff7a18

08003df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e033      	b.n	8003e6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fa60 	bl	80032d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e36:	f023 0302 	bic.w	r3, r3, #2
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 faec 	bl	8004420 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e5e:	e001      	b.n	8003e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e022      	b.n	8003ed2 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d108      	bne.n	8003ec8 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fa50 	bl	800335c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_Start+0x1a>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e097      	b.n	8004026 <HAL_ADC_Start+0x14a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d018      	beq.n	8003f3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f1c:	4b45      	ldr	r3, [pc, #276]	@ (8004034 <HAL_ADC_Start+0x158>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a45      	ldr	r2, [pc, #276]	@ (8004038 <HAL_ADC_Start+0x15c>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0c9a      	lsrs	r2, r3, #18
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f30:	e002      	b.n	8003f38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f9      	bne.n	8003f32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d15f      	bne.n	800400c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8a:	d106      	bne.n	8003f9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f90:	f023 0206 	bic.w	r2, r3, #6
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f98:	e002      	b.n	8003fa0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa8:	4b24      	ldr	r3, [pc, #144]	@ (800403c <HAL_ADC_Start+0x160>)
 8003faa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10f      	bne.n	8003fe2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d129      	bne.n	8004024 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	e020      	b.n	8004024 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <HAL_ADC_Start+0x164>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d11b      	bne.n	8004024 <HAL_ADC_Start+0x148>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d114      	bne.n	8004024 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	e00b      	b.n	8004024 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000014 	.word	0x20000014
 8004038:	431bde83 	.word	0x431bde83
 800403c:	40012300 	.word	0x40012300
 8004040:	40012000 	.word	0x40012000

08004044 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_ADC_Stop+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	e021      	b.n	800409e <HAL_ADC_Stop+0x5a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c6:	d113      	bne.n	80040f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d6:	d10b      	bne.n	80040f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e063      	b.n	80041b8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80040f0:	f7ff fe0a 	bl	8003d08 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040f6:	e021      	b.n	800413c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d01d      	beq.n	800413c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_ADC_PollForConversion+0x6c>
 8004106:	f7ff fdff 	bl	8003d08 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d212      	bcs.n	800413c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d00b      	beq.n	800413c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e03d      	b.n	80041b8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d1d6      	bne.n	80040f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0212 	mvn.w	r2, #18
 8004152:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d123      	bne.n	80041b6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11f      	bne.n	80041b6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800418e:	2b00      	cmp	r3, #0
 8004190:	d111      	bne.n	80041b6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x1c>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e105      	b.n	8004404 <HAL_ADC_ConfigChannel+0x228>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b09      	cmp	r3, #9
 8004206:	d925      	bls.n	8004254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	3b1e      	subs	r3, #30
 800421e:	2207      	movs	r2, #7
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43da      	mvns	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	400a      	ands	r2, r1
 800422c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68d9      	ldr	r1, [r3, #12]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	4618      	mov	r0, r3
 8004240:	4603      	mov	r3, r0
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4403      	add	r3, r0
 8004246:	3b1e      	subs	r3, #30
 8004248:	409a      	lsls	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e022      	b.n	800429a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6919      	ldr	r1, [r3, #16]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	2207      	movs	r2, #7
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	400a      	ands	r2, r1
 8004276:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	4603      	mov	r3, r0
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4403      	add	r3, r0
 8004290:	409a      	lsls	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d824      	bhi.n	80042ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	3b05      	subs	r3, #5
 80042b4:	221f      	movs	r2, #31
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	400a      	ands	r2, r1
 80042c2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	4618      	mov	r0, r3
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	3b05      	subs	r3, #5
 80042de:	fa00 f203 	lsl.w	r2, r0, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80042ea:	e04c      	b.n	8004386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d824      	bhi.n	800433e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	3b23      	subs	r3, #35	@ 0x23
 8004306:	221f      	movs	r2, #31
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43da      	mvns	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	400a      	ands	r2, r1
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	4618      	mov	r0, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	3b23      	subs	r3, #35	@ 0x23
 8004330:	fa00 f203 	lsl.w	r2, r0, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
 800433c:	e023      	b.n	8004386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	3b41      	subs	r3, #65	@ 0x41
 8004350:	221f      	movs	r2, #31
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43da      	mvns	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	400a      	ands	r2, r1
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	4618      	mov	r0, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	3b41      	subs	r3, #65	@ 0x41
 800437a:	fa00 f203 	lsl.w	r2, r0, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004386:	4b22      	ldr	r3, [pc, #136]	@ (8004410 <HAL_ADC_ConfigChannel+0x234>)
 8004388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a21      	ldr	r2, [pc, #132]	@ (8004414 <HAL_ADC_ConfigChannel+0x238>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d109      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x1cc>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b12      	cmp	r3, #18
 800439a:	d105      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <HAL_ADC_ConfigChannel+0x238>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d123      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x21e>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d003      	beq.n	80043c2 <HAL_ADC_ConfigChannel+0x1e6>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b11      	cmp	r3, #17
 80043c0:	d11b      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d111      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <HAL_ADC_ConfigChannel+0x23c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a10      	ldr	r2, [pc, #64]	@ (800441c <HAL_ADC_ConfigChannel+0x240>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	0c9a      	lsrs	r2, r3, #18
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043ec:	e002      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f9      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40012300 	.word	0x40012300
 8004414:	40012000 	.word	0x40012000
 8004418:	20000014 	.word	0x20000014
 800441c:	431bde83 	.word	0x431bde83

08004420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004428:	4b79      	ldr	r3, [pc, #484]	@ (8004610 <ADC_Init+0x1f0>)
 800442a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800449a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6899      	ldr	r1, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	4a58      	ldr	r2, [pc, #352]	@ (8004614 <ADC_Init+0x1f4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80044e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	e00f      	b.n	800451e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800450c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800451c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0202 	bic.w	r2, r2, #2
 800452c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6899      	ldr	r1, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7e1b      	ldrb	r3, [r3, #24]
 8004538:	005a      	lsls	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800455a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800456a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	3b01      	subs	r3, #1
 8004578:	035a      	lsls	r2, r3, #13
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e007      	b.n	8004594 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004592:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	051a      	lsls	r2, r3, #20
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6899      	ldr	r1, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045d6:	025a      	lsls	r2, r3, #9
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	029a      	lsls	r2, r3, #10
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012300 	.word	0x40012300
 8004614:	0f000001 	.word	0x0f000001

08004618 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800462c:	2302      	movs	r3, #2
 800462e:	e031      	b.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f023 021f 	bic.w	r2, r3, #31
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40012300 	.word	0x40012300

080046a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046c0:	4013      	ands	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046d6:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	60d3      	str	r3, [r2, #12]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <__NVIC_GetPriorityGrouping+0x18>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0307 	and.w	r3, r3, #7
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db0b      	blt.n	8004732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	4907      	ldr	r1, [pc, #28]	@ (8004740 <__NVIC_EnableIRQ+0x38>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2001      	movs	r0, #1
 800472a:	fa00 f202 	lsl.w	r2, r0, r2
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000e100 	.word	0xe000e100

08004744 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db12      	blt.n	800477c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	490a      	ldr	r1, [pc, #40]	@ (8004788 <__NVIC_DisableIRQ+0x44>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2001      	movs	r0, #1
 8004766:	fa00 f202 	lsl.w	r2, r0, r2
 800476a:	3320      	adds	r3, #32
 800476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004770:	f3bf 8f4f 	dsb	sy
}
 8004774:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004776:	f3bf 8f6f 	isb	sy
}
 800477a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000e100 	.word	0xe000e100

0800478c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db0a      	blt.n	80047b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	490c      	ldr	r1, [pc, #48]	@ (80047d8 <__NVIC_SetPriority+0x4c>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b4:	e00a      	b.n	80047cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4908      	ldr	r1, [pc, #32]	@ (80047dc <__NVIC_SetPriority+0x50>)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	3b04      	subs	r3, #4
 80047c4:	0112      	lsls	r2, r2, #4
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	440b      	add	r3, r1
 80047ca:	761a      	strb	r2, [r3, #24]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000e100 	.word	0xe000e100
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	@ 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f1c3 0307 	rsb	r3, r3, #7
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	bf28      	it	cs
 80047fe:	2304      	movcs	r3, #4
 8004800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3304      	adds	r3, #4
 8004806:	2b06      	cmp	r3, #6
 8004808:	d902      	bls.n	8004810 <NVIC_EncodePriority+0x30>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3b03      	subs	r3, #3
 800480e:	e000      	b.n	8004812 <NVIC_EncodePriority+0x32>
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004814:	f04f 32ff 	mov.w	r2, #4294967295
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	401a      	ands	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004828:	f04f 31ff 	mov.w	r1, #4294967295
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	43d9      	mvns	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	4313      	orrs	r3, r2
         );
}
 800483a:	4618      	mov	r0, r3
 800483c:	3724      	adds	r7, #36	@ 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800484c:	f3bf 8f4f 	dsb	sy
}
 8004850:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <__NVIC_SystemReset+0x24>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800485a:	4904      	ldr	r1, [pc, #16]	@ (800486c <__NVIC_SystemReset+0x24>)
 800485c:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <__NVIC_SystemReset+0x28>)
 800485e:	4313      	orrs	r3, r2
 8004860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004862:	f3bf 8f4f 	dsb	sy
}
 8004866:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <__NVIC_SystemReset+0x20>
 800486c:	e000ed00 	.word	0xe000ed00
 8004870:	05fa0004 	.word	0x05fa0004

08004874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004884:	d301      	bcc.n	800488a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004886:	2301      	movs	r3, #1
 8004888:	e00f      	b.n	80048aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800488a:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <SysTick_Config+0x40>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004892:	210f      	movs	r1, #15
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	f7ff ff78 	bl	800478c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <SysTick_Config+0x40>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048a2:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <SysTick_Config+0x40>)
 80048a4:	2207      	movs	r2, #7
 80048a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	e000e010 	.word	0xe000e010

080048b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff feef 	bl	80046a4 <__NVIC_SetPriorityGrouping>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e0:	f7ff ff04 	bl	80046ec <__NVIC_GetPriorityGrouping>
 80048e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff78 	bl	80047e0 <NVIC_EncodePriority>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff47 	bl	800478c <__NVIC_SetPriority>
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fef7 	bl	8004708 <__NVIC_EnableIRQ>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800492c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ff07 	bl	8004744 <__NVIC_DisableIRQ>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004942:	f7ff ff81 	bl	8004848 <__NVIC_SystemReset>

08004946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ff90 	bl	8004874 <SysTick_Config>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800496c:	f7ff f9cc 	bl	8003d08 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e099      	b.n	8004ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499c:	e00f      	b.n	80049be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800499e:	f7ff f9b3 	bl	8003d08 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d908      	bls.n	80049be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2203      	movs	r2, #3
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e078      	b.n	8004ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e8      	bne.n	800499e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4b38      	ldr	r3, [pc, #224]	@ (8004ab8 <HAL_DMA_Init+0x158>)
 80049d8:	4013      	ands	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d107      	bne.n	8004a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	4313      	orrs	r3, r2
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d117      	bne.n	8004a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb43 	bl	80050f0 <DMA_CheckFifoParam>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2240      	movs	r2, #64	@ 0x40
 8004a74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e016      	b.n	8004ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fafa 	bl	8005084 <DMA_CalcBaseAndBitshift>
 8004a90:	4603      	mov	r3, r0
 8004a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	223f      	movs	r2, #63	@ 0x3f
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	f010803f 	.word	0xf010803f

08004abc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e050      	b.n	8004b70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d101      	bne.n	8004ade <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
 8004adc:	e048      	b.n	8004b70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2221      	movs	r2, #33	@ 0x21
 8004b1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fab0 	bl	8005084 <DMA_CalcBaseAndBitshift>
 8004b24:	4603      	mov	r3, r0
 8004b26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b50:	223f      	movs	r2, #63	@ 0x3f
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_DMA_Start+0x20>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e026      	b.n	8004be6 <HAL_DMA_Start+0x6e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d115      	bne.n	8004bd8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fa31 	bl	8005028 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e005      	b.n	8004be4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bfc:	f7ff f884 	bl	8003d08 <HAL_GetTick>
 8004c00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d008      	beq.n	8004c20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2280      	movs	r2, #128	@ 0x80
 8004c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e052      	b.n	8004cc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0216 	bic.w	r2, r2, #22
 8004c2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <HAL_DMA_Abort+0x62>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0208 	bic.w	r2, r2, #8
 8004c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c70:	e013      	b.n	8004c9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c72:	f7ff f849 	bl	8003d08 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d90c      	bls.n	8004c9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e015      	b.n	8004cc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e4      	bne.n	8004c72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	223f      	movs	r2, #63	@ 0x3f
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d004      	beq.n	8004cec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2280      	movs	r2, #128	@ 0x80
 8004ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e00c      	b.n	8004d06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2205      	movs	r2, #5
 8004cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d20:	4b8e      	ldr	r3, [pc, #568]	@ (8004f5c <HAL_DMA_IRQHandler+0x248>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a8e      	ldr	r2, [pc, #568]	@ (8004f60 <HAL_DMA_IRQHandler+0x24c>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a9b      	lsrs	r3, r3, #10
 8004d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3e:	2208      	movs	r2, #8
 8004d40:	409a      	lsls	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01a      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d012      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da2:	2201      	movs	r2, #1
 8004da4:	409a      	lsls	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dae:	f043 0202 	orr.w	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dba:	2204      	movs	r2, #4
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d012      	beq.n	8004dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	2204      	movs	r2, #4
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de4:	f043 0204 	orr.w	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df0:	2210      	movs	r2, #16
 8004df2:	409a      	lsls	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d043      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d03c      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0e:	2210      	movs	r2, #16
 8004e10:	409a      	lsls	r2, r3
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d108      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d024      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
 8004e42:	e01f      	b.n	8004e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	e016      	b.n	8004e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0208 	bic.w	r2, r2, #8
 8004e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e88:	2220      	movs	r2, #32
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 808f 	beq.w	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8087 	beq.w	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	2220      	movs	r2, #32
 8004eac:	409a      	lsls	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d136      	bne.n	8004f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0216 	bic.w	r2, r2, #22
 8004ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_DMA_IRQHandler+0x1da>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0208 	bic.w	r2, r2, #8
 8004efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f02:	223f      	movs	r2, #63	@ 0x3f
 8004f04:	409a      	lsls	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d07e      	beq.n	8005020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
        }
        return;
 8004f2a:	e079      	b.n	8005020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01d      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10d      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d031      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	e02c      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
 8004f5a:	bf00      	nop
 8004f5c:	20000014 	.word	0x20000014
 8004f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d023      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
 8004f74:	e01e      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10f      	bne.n	8004fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0210 	bic.w	r2, r2, #16
 8004f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d032      	beq.n	8005022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d022      	beq.n	800500e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2205      	movs	r2, #5
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d307      	bcc.n	8004ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f2      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0x2cc>
 8004ffa:	e000      	b.n	8004ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	e000      	b.n	8005022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005020:	bf00      	nop
    }
  }
}
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b40      	cmp	r3, #64	@ 0x40
 8005054:	d108      	bne.n	8005068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005066:	e007      	b.n	8005078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	3b10      	subs	r3, #16
 8005094:	4a14      	ldr	r2, [pc, #80]	@ (80050e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <DMA_CalcBaseAndBitshift+0x68>)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d909      	bls.n	80050c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	1d1a      	adds	r2, r3, #4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80050c4:	e007      	b.n	80050d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	aaaaaaab 	.word	0xaaaaaaab
 80050ec:	080229ec 	.word	0x080229ec

080050f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11f      	bne.n	800514a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d856      	bhi.n	80051be <DMA_CheckFifoParam+0xce>
 8005110:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <DMA_CheckFifoParam+0x28>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005129 	.word	0x08005129
 800511c:	0800513b 	.word	0x0800513b
 8005120:	08005129 	.word	0x08005129
 8005124:	080051bf 	.word	0x080051bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d046      	beq.n	80051c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005138:	e043      	b.n	80051c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005142:	d140      	bne.n	80051c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005148:	e03d      	b.n	80051c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005152:	d121      	bne.n	8005198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d837      	bhi.n	80051ca <DMA_CheckFifoParam+0xda>
 800515a:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <DMA_CheckFifoParam+0x70>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005171 	.word	0x08005171
 8005164:	08005177 	.word	0x08005177
 8005168:	08005171 	.word	0x08005171
 800516c:	08005189 	.word	0x08005189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e030      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d025      	beq.n	80051ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005186:	e022      	b.n	80051ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005190:	d11f      	bne.n	80051d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005196:	e01c      	b.n	80051d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d903      	bls.n	80051a6 <DMA_CheckFifoParam+0xb6>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d003      	beq.n	80051ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051a4:	e018      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      break;
 80051aa:	e015      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00e      	beq.n	80051d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      break;
 80051bc:	e00b      	b.n	80051d6 <DMA_CheckFifoParam+0xe6>
      break;
 80051be:	bf00      	nop
 80051c0:	e00a      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051c2:	bf00      	nop
 80051c4:	e008      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051c6:	bf00      	nop
 80051c8:	e006      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051ca:	bf00      	nop
 80051cc:	e004      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051ce:	bf00      	nop
 80051d0:	e002      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051d6:	bf00      	nop
    }
  } 
  
  return status; 
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051fa:	4b23      	ldr	r3, [pc, #140]	@ (8005288 <HAL_FLASH_Program+0xa0>)
 80051fc:	7e1b      	ldrb	r3, [r3, #24]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_FLASH_Program+0x1e>
 8005202:	2302      	movs	r3, #2
 8005204:	e03b      	b.n	800527e <HAL_FLASH_Program+0x96>
 8005206:	4b20      	ldr	r3, [pc, #128]	@ (8005288 <HAL_FLASH_Program+0xa0>)
 8005208:	2201      	movs	r2, #1
 800520a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800520c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005210:	f000 f87c 	bl	800530c <FLASH_WaitForLastOperation>
 8005214:	4603      	mov	r3, r0
 8005216:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d12b      	bne.n	8005276 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005224:	783b      	ldrb	r3, [r7, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f000 f927 	bl	800547c <FLASH_Program_Byte>
 800522e:	e016      	b.n	800525e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005236:	883b      	ldrh	r3, [r7, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f000 f8fa 	bl	8005434 <FLASH_Program_HalfWord>
 8005240:	e00d      	b.n	800525e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d105      	bne.n	8005254 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	68b8      	ldr	r0, [r7, #8]
 800524e:	f000 f8cf 	bl	80053f0 <FLASH_Program_Word>
 8005252:	e004      	b.n	800525e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005258:	68b8      	ldr	r0, [r7, #8]
 800525a:	f000 f897 	bl	800538c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800525e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005262:	f000 f853 	bl	800530c <FLASH_WaitForLastOperation>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800526a:	4b08      	ldr	r3, [pc, #32]	@ (800528c <HAL_FLASH_Program+0xa4>)
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	4a07      	ldr	r2, [pc, #28]	@ (800528c <HAL_FLASH_Program+0xa4>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005276:	4b04      	ldr	r3, [pc, #16]	@ (8005288 <HAL_FLASH_Program+0xa0>)
 8005278:	2200      	movs	r2, #0
 800527a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20001a5c 	.word	0x20001a5c
 800528c:	40023c00 	.word	0x40023c00

08005290 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_FLASH_Unlock+0x38>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da0b      	bge.n	80052ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_FLASH_Unlock+0x38>)
 80052a4:	4a09      	ldr	r2, [pc, #36]	@ (80052cc <HAL_FLASH_Unlock+0x3c>)
 80052a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80052a8:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <HAL_FLASH_Unlock+0x38>)
 80052aa:	4a09      	ldr	r2, [pc, #36]	@ (80052d0 <HAL_FLASH_Unlock+0x40>)
 80052ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_FLASH_Unlock+0x38>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da01      	bge.n	80052ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80052ba:	79fb      	ldrb	r3, [r7, #7]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40023c00 	.word	0x40023c00
 80052cc:	45670123 	.word	0x45670123
 80052d0:	cdef89ab 	.word	0xcdef89ab

080052d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <HAL_FLASH_Lock+0x1c>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <HAL_FLASH_Lock+0x1c>)
 80052de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052e2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40023c00 	.word	0x40023c00

080052f4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80052f8:	4b03      	ldr	r3, [pc, #12]	@ (8005308 <HAL_FLASH_GetError+0x14>)
 80052fa:	69db      	ldr	r3, [r3, #28]
}  
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20001a5c 	.word	0x20001a5c

0800530c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <FLASH_WaitForLastOperation+0x78>)
 800531a:	2200      	movs	r2, #0
 800531c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800531e:	f7fe fcf3 	bl	8003d08 <HAL_GetTick>
 8005322:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005324:	e010      	b.n	8005348 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532c:	d00c      	beq.n	8005348 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <FLASH_WaitForLastOperation+0x38>
 8005334:	f7fe fce8 	bl	8003d08 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d201      	bcs.n	8005348 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e019      	b.n	800537c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005348:	4b0f      	ldr	r3, [pc, #60]	@ (8005388 <FLASH_WaitForLastOperation+0x7c>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e8      	bne.n	8005326 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005354:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <FLASH_WaitForLastOperation+0x7c>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005360:	4b09      	ldr	r3, [pc, #36]	@ (8005388 <FLASH_WaitForLastOperation+0x7c>)
 8005362:	2201      	movs	r2, #1
 8005364:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005366:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <FLASH_WaitForLastOperation+0x7c>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005372:	f000 f8a5 	bl	80054c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
  
}  
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20001a5c 	.word	0x20001a5c
 8005388:	40023c00 	.word	0x40023c00

0800538c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005398:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <FLASH_Program_DoubleWord+0x60>)
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <FLASH_Program_DoubleWord+0x60>)
 800539e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80053a4:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <FLASH_Program_DoubleWord+0x60>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4a10      	ldr	r2, [pc, #64]	@ (80053ec <FLASH_Program_DoubleWord+0x60>)
 80053aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80053ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053b0:	4b0e      	ldr	r3, [pc, #56]	@ (80053ec <FLASH_Program_DoubleWord+0x60>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	4a0d      	ldr	r2, [pc, #52]	@ (80053ec <FLASH_Program_DoubleWord+0x60>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80053c2:	f3bf 8f6f 	isb	sy
}
 80053c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80053c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	000a      	movs	r2, r1
 80053d6:	2300      	movs	r3, #0
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	3104      	adds	r1, #4
 80053dc:	4613      	mov	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40023c00 	.word	0x40023c00

080053f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <FLASH_Program_Word+0x40>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005430 <FLASH_Program_Word+0x40>)
 8005400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005406:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <FLASH_Program_Word+0x40>)
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <FLASH_Program_Word+0x40>)
 800540c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005410:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005412:	4b07      	ldr	r3, [pc, #28]	@ (8005430 <FLASH_Program_Word+0x40>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4a06      	ldr	r2, [pc, #24]	@ (8005430 <FLASH_Program_Word+0x40>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40023c00 	.word	0x40023c00

08005434 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005440:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <FLASH_Program_HalfWord+0x44>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	4a0c      	ldr	r2, [pc, #48]	@ (8005478 <FLASH_Program_HalfWord+0x44>)
 8005446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800544c:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <FLASH_Program_HalfWord+0x44>)
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <FLASH_Program_HalfWord+0x44>)
 8005452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005458:	4b07      	ldr	r3, [pc, #28]	@ (8005478 <FLASH_Program_HalfWord+0x44>)
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	4a06      	ldr	r2, [pc, #24]	@ (8005478 <FLASH_Program_HalfWord+0x44>)
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	801a      	strh	r2, [r3, #0]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40023c00 	.word	0x40023c00

0800547c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005488:	4b0c      	ldr	r3, [pc, #48]	@ (80054bc <FLASH_Program_Byte+0x40>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4a0b      	ldr	r2, [pc, #44]	@ (80054bc <FLASH_Program_Byte+0x40>)
 800548e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005494:	4b09      	ldr	r3, [pc, #36]	@ (80054bc <FLASH_Program_Byte+0x40>)
 8005496:	4a09      	ldr	r2, [pc, #36]	@ (80054bc <FLASH_Program_Byte+0x40>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800549c:	4b07      	ldr	r3, [pc, #28]	@ (80054bc <FLASH_Program_Byte+0x40>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	4a06      	ldr	r2, [pc, #24]	@ (80054bc <FLASH_Program_Byte+0x40>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	701a      	strb	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40023c00 	.word	0x40023c00

080054c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80054d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f043 0310 	orr.w	r3, r3, #16
 80054d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 80054da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80054dc:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 80054de:	2210      	movs	r2, #16
 80054e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80054e2:	4b28      	ldr	r3, [pc, #160]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d008      	beq.n	8005500 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f043 0308 	orr.w	r3, r3, #8
 80054f6:	4a24      	ldr	r2, [pc, #144]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 80054f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80054fa:	4b22      	ldr	r3, [pc, #136]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 80054fc:	2220      	movs	r2, #32
 80054fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005500:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800550c:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 8005516:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005518:	4b1a      	ldr	r3, [pc, #104]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 800551a:	2240      	movs	r2, #64	@ 0x40
 800551c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800551e:	4b19      	ldr	r3, [pc, #100]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	4a15      	ldr	r2, [pc, #84]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 8005534:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005536:	4b13      	ldr	r3, [pc, #76]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 8005538:	2280      	movs	r2, #128	@ 0x80
 800553a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800553c:	4b11      	ldr	r3, [pc, #68]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005548:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	4a0d      	ldr	r2, [pc, #52]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 8005552:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 8005556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800555a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800555c:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005568:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f043 0320 	orr.w	r3, r3, #32
 8005570:	4a05      	ldr	r2, [pc, #20]	@ (8005588 <FLASH_SetErrorCode+0xc8>)
 8005572:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005574:	4b03      	ldr	r3, [pc, #12]	@ (8005584 <FLASH_SetErrorCode+0xc4>)
 8005576:	2202      	movs	r2, #2
 8005578:	60da      	str	r2, [r3, #12]
  }
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40023c00 	.word	0x40023c00
 8005588:	20001a5c 	.word	0x20001a5c

0800558c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <HAL_FLASHEx_Erase+0xd8>)
 80055a0:	7e1b      	ldrb	r3, [r3, #24]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_FLASHEx_Erase+0x1e>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e058      	b.n	800565c <HAL_FLASHEx_Erase+0xd0>
 80055aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005664 <HAL_FLASHEx_Erase+0xd8>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055b4:	f7ff feaa 	bl	800530c <FLASH_WaitForLastOperation>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d148      	bne.n	8005654 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d115      	bne.n	80055fe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f000 f844 	bl	800566c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055e8:	f7ff fe90 	bl	800530c <FLASH_WaitForLastOperation>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80055f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <HAL_FLASHEx_Erase+0xdc>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <HAL_FLASHEx_Erase+0xdc>)
 80055f6:	f023 0304 	bic.w	r3, r3, #4
 80055fa:	6113      	str	r3, [r2, #16]
 80055fc:	e028      	b.n	8005650 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	e01c      	b.n	8005640 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	4619      	mov	r1, r3
 800560e:	68b8      	ldr	r0, [r7, #8]
 8005610:	f000 f850 	bl	80056b4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005614:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005618:	f7ff fe78 	bl	800530c <FLASH_WaitForLastOperation>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005620:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_FLASHEx_Erase+0xdc>)
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	4a10      	ldr	r2, [pc, #64]	@ (8005668 <HAL_FLASHEx_Erase+0xdc>)
 8005626:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800562a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	601a      	str	r2, [r3, #0]
          break;
 8005638:	e00a      	b.n	8005650 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3301      	adds	r3, #1
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4413      	add	r3, r2
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	d3da      	bcc.n	8005606 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005650:	f000 f878 	bl	8005744 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005654:	4b03      	ldr	r3, [pc, #12]	@ (8005664 <HAL_FLASHEx_Erase+0xd8>)
 8005656:	2200      	movs	r2, #0
 8005658:	761a      	strb	r2, [r3, #24]

  return status;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20001a5c 	.word	0x20001a5c
 8005668:	40023c00 	.word	0x40023c00

0800566c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	6039      	str	r1, [r7, #0]
 8005676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <FLASH_MassErase+0x44>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	4a0c      	ldr	r2, [pc, #48]	@ (80056b0 <FLASH_MassErase+0x44>)
 800567e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005684:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <FLASH_MassErase+0x44>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <FLASH_MassErase+0x44>)
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005690:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <FLASH_MassErase+0x44>)
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	4313      	orrs	r3, r2
 800569a:	4a05      	ldr	r2, [pc, #20]	@ (80056b0 <FLASH_MassErase+0x44>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a0:	6113      	str	r3, [r2, #16]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40023c00 	.word	0x40023c00

080056b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e010      	b.n	80056f2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d103      	bne.n	80056de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e009      	b.n	80056f2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d103      	bne.n	80056ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80056e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e002      	b.n	80056f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80056ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056f2:	4b13      	ldr	r3, [pc, #76]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	4a12      	ldr	r2, [pc, #72]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 80056f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80056fe:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	490f      	ldr	r1, [pc, #60]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	4a0c      	ldr	r2, [pc, #48]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 8005710:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4313      	orrs	r3, r2
 8005720:	4a07      	ldr	r2, [pc, #28]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4a04      	ldr	r2, [pc, #16]	@ (8005740 <FLASH_Erase_Sector+0x8c>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005732:	6113      	str	r3, [r2, #16]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40023c00 	.word	0x40023c00

08005744 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005748:	4b20      	ldr	r3, [pc, #128]	@ (80057cc <FLASH_FlushCaches+0x88>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005750:	2b00      	cmp	r3, #0
 8005752:	d017      	beq.n	8005784 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005754:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1c      	ldr	r2, [pc, #112]	@ (80057cc <FLASH_FlushCaches+0x88>)
 800575a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800575e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005760:	4b1a      	ldr	r3, [pc, #104]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a19      	ldr	r2, [pc, #100]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005766:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <FLASH_FlushCaches+0x88>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005776:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005778:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <FLASH_FlushCaches+0x88>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a13      	ldr	r2, [pc, #76]	@ (80057cc <FLASH_FlushCaches+0x88>)
 800577e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005782:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005784:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800578c:	2b00      	cmp	r3, #0
 800578e:	d017      	beq.n	80057c0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005790:	4b0e      	ldr	r3, [pc, #56]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0d      	ldr	r2, [pc, #52]	@ (80057cc <FLASH_FlushCaches+0x88>)
 8005796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800579a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800579c:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <FLASH_FlushCaches+0x88>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	@ (80057cc <FLASH_FlushCaches+0x88>)
 80057a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b08      	ldr	r3, [pc, #32]	@ (80057cc <FLASH_FlushCaches+0x88>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a07      	ldr	r2, [pc, #28]	@ (80057cc <FLASH_FlushCaches+0x88>)
 80057ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <FLASH_FlushCaches+0x88>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a04      	ldr	r2, [pc, #16]	@ (80057cc <FLASH_FlushCaches+0x88>)
 80057ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057be:	6013      	str	r3, [r2, #0]
  }
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40023c00 	.word	0x40023c00

080057d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	@ 0x24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e159      	b.n	8005aa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057ec:	2201      	movs	r2, #1
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	429a      	cmp	r2, r3
 8005806:	f040 8148 	bne.w	8005a9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d005      	beq.n	8005822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800581e:	2b02      	cmp	r3, #2
 8005820:	d130      	bne.n	8005884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005858:	2201      	movs	r2, #1
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 0201 	and.w	r2, r3, #1
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b03      	cmp	r3, #3
 800588e:	d017      	beq.n	80058c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	2203      	movs	r2, #3
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d123      	bne.n	8005914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	08da      	lsrs	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3208      	adds	r2, #8
 80058d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	220f      	movs	r2, #15
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	08da      	lsrs	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3208      	adds	r2, #8
 800590e:	69b9      	ldr	r1, [r7, #24]
 8005910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	2203      	movs	r2, #3
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 0203 	and.w	r2, r3, #3
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80a2 	beq.w	8005a9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	4b57      	ldr	r3, [pc, #348]	@ (8005ab8 <HAL_GPIO_Init+0x2e8>)
 800595c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595e:	4a56      	ldr	r2, [pc, #344]	@ (8005ab8 <HAL_GPIO_Init+0x2e8>)
 8005960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005964:	6453      	str	r3, [r2, #68]	@ 0x44
 8005966:	4b54      	ldr	r3, [pc, #336]	@ (8005ab8 <HAL_GPIO_Init+0x2e8>)
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005972:	4a52      	ldr	r2, [pc, #328]	@ (8005abc <HAL_GPIO_Init+0x2ec>)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	3302      	adds	r3, #2
 800597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	220f      	movs	r2, #15
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a49      	ldr	r2, [pc, #292]	@ (8005ac0 <HAL_GPIO_Init+0x2f0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d019      	beq.n	80059d2 <HAL_GPIO_Init+0x202>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a48      	ldr	r2, [pc, #288]	@ (8005ac4 <HAL_GPIO_Init+0x2f4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_GPIO_Init+0x1fe>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a47      	ldr	r2, [pc, #284]	@ (8005ac8 <HAL_GPIO_Init+0x2f8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00d      	beq.n	80059ca <HAL_GPIO_Init+0x1fa>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a46      	ldr	r2, [pc, #280]	@ (8005acc <HAL_GPIO_Init+0x2fc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <HAL_GPIO_Init+0x1f6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a45      	ldr	r2, [pc, #276]	@ (8005ad0 <HAL_GPIO_Init+0x300>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_GPIO_Init+0x1f2>
 80059be:	2304      	movs	r3, #4
 80059c0:	e008      	b.n	80059d4 <HAL_GPIO_Init+0x204>
 80059c2:	2307      	movs	r3, #7
 80059c4:	e006      	b.n	80059d4 <HAL_GPIO_Init+0x204>
 80059c6:	2303      	movs	r3, #3
 80059c8:	e004      	b.n	80059d4 <HAL_GPIO_Init+0x204>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e002      	b.n	80059d4 <HAL_GPIO_Init+0x204>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_GPIO_Init+0x204>
 80059d2:	2300      	movs	r3, #0
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	f002 0203 	and.w	r2, r2, #3
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	4093      	lsls	r3, r2
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059e4:	4935      	ldr	r1, [pc, #212]	@ (8005abc <HAL_GPIO_Init+0x2ec>)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	3302      	adds	r3, #2
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059f2:	4b38      	ldr	r3, [pc, #224]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a40:	4a24      	ldr	r2, [pc, #144]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a46:	4b23      	ldr	r3, [pc, #140]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a70:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a94:	4a0f      	ldr	r2, [pc, #60]	@ (8005ad4 <HAL_GPIO_Init+0x304>)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	f67f aea2 	bls.w	80057ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3724      	adds	r7, #36	@ 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40013800 	.word	0x40013800
 8005ac0:	40020000 	.word	0x40020000
 8005ac4:	40020400 	.word	0x40020400
 8005ac8:	40020800 	.word	0x40020800
 8005acc:	40020c00 	.word	0x40020c00
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	40013c00 	.word	0x40013c00

08005ad8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e0bb      	b.n	8005c6c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005af4:	2201      	movs	r2, #1
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4013      	ands	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	f040 80ab 	bne.w	8005c66 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b10:	4a5c      	ldr	r2, [pc, #368]	@ (8005c84 <HAL_GPIO_DeInit+0x1ac>)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	089b      	lsrs	r3, r3, #2
 8005b16:	3302      	adds	r3, #2
 8005b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	220f      	movs	r2, #15
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a54      	ldr	r2, [pc, #336]	@ (8005c88 <HAL_GPIO_DeInit+0x1b0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d019      	beq.n	8005b6e <HAL_GPIO_DeInit+0x96>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a53      	ldr	r2, [pc, #332]	@ (8005c8c <HAL_GPIO_DeInit+0x1b4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_GPIO_DeInit+0x92>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a52      	ldr	r2, [pc, #328]	@ (8005c90 <HAL_GPIO_DeInit+0x1b8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00d      	beq.n	8005b66 <HAL_GPIO_DeInit+0x8e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a51      	ldr	r2, [pc, #324]	@ (8005c94 <HAL_GPIO_DeInit+0x1bc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <HAL_GPIO_DeInit+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a50      	ldr	r2, [pc, #320]	@ (8005c98 <HAL_GPIO_DeInit+0x1c0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d101      	bne.n	8005b5e <HAL_GPIO_DeInit+0x86>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	e008      	b.n	8005b70 <HAL_GPIO_DeInit+0x98>
 8005b5e:	2307      	movs	r3, #7
 8005b60:	e006      	b.n	8005b70 <HAL_GPIO_DeInit+0x98>
 8005b62:	2303      	movs	r3, #3
 8005b64:	e004      	b.n	8005b70 <HAL_GPIO_DeInit+0x98>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e002      	b.n	8005b70 <HAL_GPIO_DeInit+0x98>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_GPIO_DeInit+0x98>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	f002 0203 	and.w	r2, r2, #3
 8005b76:	0092      	lsls	r2, r2, #2
 8005b78:	4093      	lsls	r3, r2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d132      	bne.n	8005be6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005b80:	4b46      	ldr	r3, [pc, #280]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	4944      	ldr	r1, [pc, #272]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005b8e:	4b43      	ldr	r3, [pc, #268]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	4941      	ldr	r1, [pc, #260]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	493d      	ldr	r1, [pc, #244]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005baa:	4b3c      	ldr	r3, [pc, #240]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	493a      	ldr	r1, [pc, #232]	@ (8005c9c <HAL_GPIO_DeInit+0x1c4>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c84 <HAL_GPIO_DeInit+0x1ac>)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3302      	adds	r3, #2
 8005bd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	482a      	ldr	r0, [pc, #168]	@ (8005c84 <HAL_GPIO_DeInit+0x1ac>)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	400a      	ands	r2, r1
 8005be0:	3302      	adds	r3, #2
 8005be2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	2103      	movs	r1, #3
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	08da      	lsrs	r2, r3, #3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3208      	adds	r2, #8
 8005c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	220f      	movs	r2, #15
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	08d2      	lsrs	r2, r2, #3
 8005c1c:	4019      	ands	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3208      	adds	r2, #8
 8005c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	2103      	movs	r1, #3
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	43db      	mvns	r3, r3
 8005c36:	401a      	ands	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	2101      	movs	r1, #1
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	2103      	movs	r1, #3
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	401a      	ands	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b0f      	cmp	r3, #15
 8005c70:	f67f af40 	bls.w	8005af4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40013800 	.word	0x40013800
 8005c88:	40020000 	.word	0x40020000
 8005c8c:	40020400 	.word	0x40020400
 8005c90:	40020800 	.word	0x40020800
 8005c94:	40020c00 	.word	0x40020c00
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40013c00 	.word	0x40013c00

08005ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
 8005cbc:	e001      	b.n	8005cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	807b      	strh	r3, [r7, #2]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ce0:	787b      	ldrb	r3, [r7, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cec:	e003      	b.n	8005cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	041a      	lsls	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d0e:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d1a:	4a05      	ldr	r2, [pc, #20]	@ (8005d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fd fa3e 	bl	80031a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40013c00 	.word	0x40013c00

08005d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e12b      	b.n	8005f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fd fb1c 	bl	8003398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2224      	movs	r2, #36	@ 0x24
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d98:	f003 f874 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a81      	ldr	r2, [pc, #516]	@ (8005fa8 <HAL_I2C_Init+0x274>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d807      	bhi.n	8005db8 <HAL_I2C_Init+0x84>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a80      	ldr	r2, [pc, #512]	@ (8005fac <HAL_I2C_Init+0x278>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bf94      	ite	ls
 8005db0:	2301      	movls	r3, #1
 8005db2:	2300      	movhi	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e006      	b.n	8005dc6 <HAL_I2C_Init+0x92>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a7d      	ldr	r2, [pc, #500]	@ (8005fb0 <HAL_I2C_Init+0x27c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	bf94      	ite	ls
 8005dc0:	2301      	movls	r3, #1
 8005dc2:	2300      	movhi	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0e7      	b.n	8005f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4a78      	ldr	r2, [pc, #480]	@ (8005fb4 <HAL_I2C_Init+0x280>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0c9b      	lsrs	r3, r3, #18
 8005dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8005fa8 <HAL_I2C_Init+0x274>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d802      	bhi.n	8005e08 <HAL_I2C_Init+0xd4>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	3301      	adds	r3, #1
 8005e06:	e009      	b.n	8005e1c <HAL_I2C_Init+0xe8>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	4a69      	ldr	r2, [pc, #420]	@ (8005fb8 <HAL_I2C_Init+0x284>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	495c      	ldr	r1, [pc, #368]	@ (8005fa8 <HAL_I2C_Init+0x274>)
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	d819      	bhi.n	8005e70 <HAL_I2C_Init+0x13c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1e59      	subs	r1, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e50:	400b      	ands	r3, r1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_I2C_Init+0x138>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1e59      	subs	r1, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e64:	3301      	adds	r3, #1
 8005e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6a:	e051      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	e04f      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d111      	bne.n	8005e9c <HAL_I2C_Init+0x168>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1e58      	subs	r0, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6859      	ldr	r1, [r3, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	440b      	add	r3, r1
 8005e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e012      	b.n	8005ec2 <HAL_I2C_Init+0x18e>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1e58      	subs	r0, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	0099      	lsls	r1, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bf0c      	ite	eq
 8005ebc:	2301      	moveq	r3, #1
 8005ebe:	2300      	movne	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_Init+0x196>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e022      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_I2C_Init+0x1bc>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1e58      	subs	r0, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	440b      	add	r3, r1
 8005ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eee:	e00f      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1e58      	subs	r0, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6859      	ldr	r1, [r3, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	0099      	lsls	r1, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f06:	3301      	adds	r3, #1
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	6809      	ldr	r1, [r1, #0]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6911      	ldr	r1, [r2, #16]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68d2      	ldr	r2, [r2, #12]
 8005f4a:	4311      	orrs	r1, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	000186a0 	.word	0x000186a0
 8005fac:	001e847f 	.word	0x001e847f
 8005fb0:	003d08ff 	.word	0x003d08ff
 8005fb4:	431bde83 	.word	0x431bde83
 8005fb8:	10624dd3 	.word	0x10624dd3

08005fbc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e021      	b.n	8006012 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2224      	movs	r2, #36	@ 0x24
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fd fa1e 	bl	8003428 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	461a      	mov	r2, r3
 8006028:	460b      	mov	r3, r1
 800602a:	817b      	strh	r3, [r7, #10]
 800602c:	4613      	mov	r3, r2
 800602e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006030:	f7fd fe6a 	bl	8003d08 <HAL_GetTick>
 8006034:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b20      	cmp	r3, #32
 8006040:	f040 80e0 	bne.w	8006204 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2319      	movs	r3, #25
 800604a:	2201      	movs	r2, #1
 800604c:	4970      	ldr	r1, [pc, #448]	@ (8006210 <HAL_I2C_Master_Transmit+0x1f4>)
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fd86 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800605a:	2302      	movs	r3, #2
 800605c:	e0d3      	b.n	8006206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_I2C_Master_Transmit+0x50>
 8006068:	2302      	movs	r3, #2
 800606a:	e0cc      	b.n	8006206 <HAL_I2C_Master_Transmit+0x1ea>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d007      	beq.n	8006092 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2221      	movs	r2, #33	@ 0x21
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2210      	movs	r2, #16
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	893a      	ldrh	r2, [r7, #8]
 80060c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a50      	ldr	r2, [pc, #320]	@ (8006214 <HAL_I2C_Master_Transmit+0x1f8>)
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060d4:	8979      	ldrh	r1, [r7, #10]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fbf0 	bl	80068c0 <I2C_MasterRequestWrite>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e08d      	b.n	8006206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006100:	e066      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	6a39      	ldr	r1, [r7, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fe00 	bl	8006d0c <I2C_WaitOnTXEFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b04      	cmp	r3, #4
 8006118:	d107      	bne.n	800612a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e06b      	b.n	8006206 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b04      	cmp	r3, #4
 800616a:	d11b      	bne.n	80061a4 <HAL_I2C_Master_Transmit+0x188>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	781a      	ldrb	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fdf0 	bl	8006d8e <I2C_WaitOnBTFFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d107      	bne.n	80061cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e01a      	b.n	8006206 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d194      	bne.n	8006102 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	00100002 	.word	0x00100002
 8006214:	ffff0000 	.word	0xffff0000

08006218 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	@ 0x30
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	461a      	mov	r2, r3
 8006224:	460b      	mov	r3, r1
 8006226:	817b      	strh	r3, [r7, #10]
 8006228:	4613      	mov	r3, r2
 800622a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800622c:	f7fd fd6c 	bl	8003d08 <HAL_GetTick>
 8006230:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	f040 820b 	bne.w	8006656 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2319      	movs	r3, #25
 8006246:	2201      	movs	r2, #1
 8006248:	497c      	ldr	r1, [pc, #496]	@ (800643c <HAL_I2C_Master_Receive+0x224>)
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fc88 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006256:	2302      	movs	r3, #2
 8006258:	e1fe      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_I2C_Master_Receive+0x50>
 8006264:	2302      	movs	r3, #2
 8006266:	e1f7      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b01      	cmp	r3, #1
 800627c:	d007      	beq.n	800628e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0201 	orr.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800629c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2222      	movs	r2, #34	@ 0x22
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2210      	movs	r2, #16
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	893a      	ldrh	r2, [r7, #8]
 80062be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006440 <HAL_I2C_Master_Receive+0x228>)
 80062ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062d0:	8979      	ldrh	r1, [r7, #10]
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fb74 	bl	80069c4 <I2C_MasterRequestRead>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e1b8      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ee:	2300      	movs	r3, #0
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e18c      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631a:	2b01      	cmp	r3, #1
 800631c:	d11b      	bne.n	8006356 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e16c      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	2b02      	cmp	r3, #2
 800635c:	d11b      	bne.n	8006396 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800636c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800637c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	e14c      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063bc:	e138      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	f200 80f1 	bhi.w	80065aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d123      	bne.n	8006418 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fd1b 	bl	8006e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e139      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006416:	e10b      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641c:	2b02      	cmp	r3, #2
 800641e:	d14e      	bne.n	80064be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	2200      	movs	r2, #0
 8006428:	4906      	ldr	r1, [pc, #24]	@ (8006444 <HAL_I2C_Master_Receive+0x22c>)
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fb98 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d008      	beq.n	8006448 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e10e      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
 800643a:	bf00      	nop
 800643c:	00100002 	.word	0x00100002
 8006440:	ffff0000 	.word	0xffff0000
 8006444:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064bc:	e0b8      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	2200      	movs	r2, #0
 80064c6:	4966      	ldr	r1, [pc, #408]	@ (8006660 <HAL_I2C_Master_Receive+0x448>)
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fb49 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0bf      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	2200      	movs	r2, #0
 8006522:	494f      	ldr	r1, [pc, #316]	@ (8006660 <HAL_I2C_Master_Receive+0x448>)
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fb1b 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e091      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065a8:	e042      	b.n	8006630 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fc2e 	bl	8006e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e04c      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d118      	bne.n	8006630 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006634:	2b00      	cmp	r3, #0
 8006636:	f47f aec2 	bne.w	80063be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	e000      	b.n	8006658 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006656:	2302      	movs	r3, #2
  }
}
 8006658:	4618      	mov	r0, r3
 800665a:	3728      	adds	r7, #40	@ 0x28
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	00010004 	.word	0x00010004

08006664 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	@ 0x28
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	460b      	mov	r3, r1
 8006672:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006674:	f7fd fb48 	bl	8003d08 <HAL_GetTick>
 8006678:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b20      	cmp	r3, #32
 8006688:	f040 8111 	bne.w	80068ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2319      	movs	r3, #25
 8006692:	2201      	movs	r2, #1
 8006694:	4988      	ldr	r1, [pc, #544]	@ (80068b8 <HAL_I2C_IsDeviceReady+0x254>)
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fa62 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80066a2:	2302      	movs	r3, #2
 80066a4:	e104      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_I2C_IsDeviceReady+0x50>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e0fd      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d007      	beq.n	80066da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2224      	movs	r2, #36	@ 0x24
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a70      	ldr	r2, [pc, #448]	@ (80068bc <HAL_I2C_IsDeviceReady+0x258>)
 80066fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800670c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2200      	movs	r2, #0
 8006716:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fa20 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006734:	d103      	bne.n	800673e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800673c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e0b6      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006742:	897b      	ldrh	r3, [r7, #10]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006750:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006752:	f7fd fad9 	bl	8003d08 <HAL_GetTick>
 8006756:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	bf0c      	ite	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	2300      	movne	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677c:	bf0c      	ite	eq
 800677e:	2301      	moveq	r3, #1
 8006780:	2300      	movne	r3, #0
 8006782:	b2db      	uxtb	r3, r3
 8006784:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006786:	e025      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006788:	f7fd fabe 	bl	8003d08 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <HAL_I2C_IsDeviceReady+0x13a>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	22a0      	movs	r2, #160	@ 0xa0
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ca:	bf0c      	ite	eq
 80067cc:	2301      	moveq	r3, #1
 80067ce:	2300      	movne	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2ba0      	cmp	r3, #160	@ 0xa0
 80067de:	d005      	beq.n	80067ec <HAL_I2C_IsDeviceReady+0x188>
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <HAL_I2C_IsDeviceReady+0x188>
 80067e6:	7dbb      	ldrb	r3, [r7, #22]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0cd      	beq.n	8006788 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d129      	bne.n	8006856 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006810:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006812:	2300      	movs	r3, #0
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2319      	movs	r3, #25
 800682e:	2201      	movs	r2, #1
 8006830:	4921      	ldr	r1, [pc, #132]	@ (80068b8 <HAL_I2C_IsDeviceReady+0x254>)
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f994 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e036      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e02c      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006864:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800686e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	2319      	movs	r3, #25
 8006876:	2201      	movs	r2, #1
 8006878:	490f      	ldr	r1, [pc, #60]	@ (80068b8 <HAL_I2C_IsDeviceReady+0x254>)
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f970 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e012      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	3301      	adds	r3, #1
 800688e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	f4ff af32 	bcc.w	80066fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	00100002 	.word	0x00100002
 80068bc:	ffff0000 	.word	0xffff0000

080068c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	460b      	mov	r3, r1
 80068ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d006      	beq.n	80068ea <I2C_MasterRequestWrite+0x2a>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d003      	beq.n	80068ea <I2C_MasterRequestWrite+0x2a>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068e8:	d108      	bne.n	80068fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e00b      	b.n	8006914 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	2b12      	cmp	r3, #18
 8006902:	d107      	bne.n	8006914 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f91d 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00d      	beq.n	8006948 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693a:	d103      	bne.n	8006944 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e035      	b.n	80069b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006950:	d108      	bne.n	8006964 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006952:	897b      	ldrh	r3, [r7, #10]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006960:	611a      	str	r2, [r3, #16]
 8006962:	e01b      	b.n	800699c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006964:	897b      	ldrh	r3, [r7, #10]
 8006966:	11db      	asrs	r3, r3, #7
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0306 	and.w	r3, r3, #6
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f063 030f 	orn	r3, r3, #15
 8006974:	b2da      	uxtb	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	490e      	ldr	r1, [pc, #56]	@ (80069bc <I2C_MasterRequestWrite+0xfc>)
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f943 	bl	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e010      	b.n	80069b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006992:	897b      	ldrh	r3, [r7, #10]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4907      	ldr	r1, [pc, #28]	@ (80069c0 <I2C_MasterRequestWrite+0x100>)
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f933 	bl	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	00010008 	.word	0x00010008
 80069c0:	00010002 	.word	0x00010002

080069c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	460b      	mov	r3, r1
 80069d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d006      	beq.n	80069fe <I2C_MasterRequestRead+0x3a>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d003      	beq.n	80069fe <I2C_MasterRequestRead+0x3a>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069fc:	d108      	bne.n	8006a10 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e00b      	b.n	8006a28 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	2b11      	cmp	r3, #17
 8006a16:	d107      	bne.n	8006a28 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f893 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00d      	beq.n	8006a5c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a4e:	d103      	bne.n	8006a58 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e079      	b.n	8006b50 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a64:	d108      	bne.n	8006a78 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	611a      	str	r2, [r3, #16]
 8006a76:	e05f      	b.n	8006b38 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a78:	897b      	ldrh	r3, [r7, #10]
 8006a7a:	11db      	asrs	r3, r3, #7
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f003 0306 	and.w	r3, r3, #6
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f063 030f 	orn	r3, r3, #15
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4930      	ldr	r1, [pc, #192]	@ (8006b58 <I2C_MasterRequestRead+0x194>)
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f8b9 	bl	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e054      	b.n	8006b50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4929      	ldr	r1, [pc, #164]	@ (8006b5c <I2C_MasterRequestRead+0x198>)
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f8a9 	bl	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e044      	b.n	8006b50 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006aea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f831 	bl	8006b60 <I2C_WaitOnFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b12:	d103      	bne.n	8006b1c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b1a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e017      	b.n	8006b50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b20:	897b      	ldrh	r3, [r7, #10]
 8006b22:	11db      	asrs	r3, r3, #7
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0306 	and.w	r3, r3, #6
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f063 030e 	orn	r3, r3, #14
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4907      	ldr	r1, [pc, #28]	@ (8006b5c <I2C_MasterRequestRead+0x198>)
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f865 	bl	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	00010008 	.word	0x00010008
 8006b5c:	00010002 	.word	0x00010002

08006b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b70:	e025      	b.n	8006bbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d021      	beq.n	8006bbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7a:	f7fd f8c5 	bl	8003d08 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d116      	bne.n	8006bbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e023      	b.n	8006c06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	0c1b      	lsrs	r3, r3, #16
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10d      	bne.n	8006be4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	43da      	mvns	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	e00c      	b.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	43da      	mvns	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d0b6      	beq.n	8006b72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c1c:	e051      	b.n	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2c:	d123      	bne.n	8006c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	f043 0204 	orr.w	r2, r3, #4
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e046      	b.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d021      	beq.n	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fd f843 	bl	8003d08 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d116      	bne.n	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e020      	b.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	0c1b      	lsrs	r3, r3, #16
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d10c      	bne.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	43da      	mvns	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf14      	ite	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	2300      	moveq	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	e00b      	b.n	8006cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	43da      	mvns	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf14      	ite	ne
 8006cf8:	2301      	movne	r3, #1
 8006cfa:	2300      	moveq	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d18d      	bne.n	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d18:	e02d      	b.n	8006d76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f8ce 	bl	8006ebc <I2C_IsAcknowledgeFailed>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e02d      	b.n	8006d86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d021      	beq.n	8006d76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fc ffe9 	bl	8003d08 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d116      	bne.n	8006d76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e007      	b.n	8006d86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d80:	2b80      	cmp	r3, #128	@ 0x80
 8006d82:	d1ca      	bne.n	8006d1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d9a:	e02d      	b.n	8006df8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f88d 	bl	8006ebc <I2C_IsAcknowledgeFailed>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e02d      	b.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d021      	beq.n	8006df8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db4:	f7fc ffa8 	bl	8003d08 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d302      	bcc.n	8006dca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d116      	bne.n	8006df8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e007      	b.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d1ca      	bne.n	8006d9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e1c:	e042      	b.n	8006ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d119      	bne.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0210 	mvn.w	r2, #16
 8006e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e029      	b.n	8006eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e60:	f7fc ff52 	bl	8003d08 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d302      	bcc.n	8006e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d116      	bne.n	8006ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e007      	b.n	8006eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eae:	2b40      	cmp	r3, #64	@ 0x40
 8006eb0:	d1b5      	bne.n	8006e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed2:	d11b      	bne.n	8006f0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006edc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef8:	f043 0204 	orr.w	r2, r3, #4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e034      	b.n	8006f96 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006f34:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006f3e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6852      	ldr	r2, [r2, #4]
 8006f48:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6892      	ldr	r2, [r2, #8]
 8006f52:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006f54:	f7fc fed8 	bl	8003d08 <HAL_GetTick>
 8006f58:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f5a:	e00f      	b.n	8006f7c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006f5c:	f7fc fed4 	bl	8003d08 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b31      	cmp	r3, #49	@ 0x31
 8006f68:	d908      	bls.n	8006f7c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e00c      	b.n	8006f96 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0303 	and.w	r3, r3, #3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e8      	bne.n	8006f5c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006f92:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006fae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc0:	b08f      	sub	sp, #60	@ 0x3c
 8006fc2:	af0a      	add	r7, sp, #40	@ 0x28
 8006fc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e10f      	b.n	80071f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f014 fb9a 	bl	801b724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f006 fc45 	bl	800d89e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	687e      	ldr	r6, [r7, #4]
 800701c:	466d      	mov	r5, sp
 800701e:	f106 0410 	add.w	r4, r6, #16
 8007022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800702a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800702e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007032:	1d33      	adds	r3, r6, #4
 8007034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007036:	6838      	ldr	r0, [r7, #0]
 8007038:	f006 fb1c 	bl	800d674 <USB_CoreInit>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e0d0      	b.n	80071f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f006 fc33 	bl	800d8c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
 800705e:	e04a      	b.n	80070f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007060:	7bfa      	ldrb	r2, [r7, #15]
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	333d      	adds	r3, #61	@ 0x3d
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	333c      	adds	r3, #60	@ 0x3c
 8007084:	7bfa      	ldrb	r2, [r7, #15]
 8007086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007088:	7bfa      	ldrb	r2, [r7, #15]
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	b298      	uxth	r0, r3
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	3344      	adds	r3, #68	@ 0x44
 800709c:	4602      	mov	r2, r0
 800709e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	3340      	adds	r3, #64	@ 0x40
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4613      	mov	r3, r2
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	3348      	adds	r3, #72	@ 0x48
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070c8:	7bfa      	ldrb	r2, [r7, #15]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	4613      	mov	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	334c      	adds	r3, #76	@ 0x4c
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070dc:	7bfa      	ldrb	r2, [r7, #15]
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	4613      	mov	r3, r2
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	3354      	adds	r3, #84	@ 0x54
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	3301      	adds	r3, #1
 80070f4:	73fb      	strb	r3, [r7, #15]
 80070f6:	7bfa      	ldrb	r2, [r7, #15]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d3af      	bcc.n	8007060 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
 8007104:	e044      	b.n	8007190 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800711c:	7bfa      	ldrb	r2, [r7, #15]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800712e:	7bfa      	ldrb	r2, [r7, #15]
 8007130:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007132:	7bfa      	ldrb	r2, [r7, #15]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007148:	7bfa      	ldrb	r2, [r7, #15]
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800715e:	7bfa      	ldrb	r2, [r7, #15]
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007174:	7bfa      	ldrb	r2, [r7, #15]
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	4613      	mov	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	3301      	adds	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	7bfa      	ldrb	r2, [r7, #15]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d3b5      	bcc.n	8007106 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	687e      	ldr	r6, [r7, #4]
 80071a2:	466d      	mov	r5, sp
 80071a4:	f106 0410 	add.w	r4, r6, #16
 80071a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80071b8:	1d33      	adds	r3, r6, #4
 80071ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071bc:	6838      	ldr	r0, [r7, #0]
 80071be:	f006 fbcb 	bl	800d958 <USB_DevInit>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e00d      	b.n	80071f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f007 fd69 	bl	800ecc0 <USB_DevDisconnect>

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071f8 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e015      	b.n	8007236 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2203      	movs	r2, #3
 800720e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f007 fcbc 	bl	800eb94 <USB_StopDevice>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e007      	b.n	8007236 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f014 fad0 	bl	801b7cc <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_PCD_Start+0x1c>
 8007256:	2302      	movs	r3, #2
 8007258:	e020      	b.n	800729c <HAL_PCD_Start+0x5e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007266:	2b01      	cmp	r3, #1
 8007268:	d109      	bne.n	800727e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800726e:	2b01      	cmp	r3, #1
 8007270:	d005      	beq.n	800727e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f006 fafa 	bl	800d87c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f007 fcf6 	bl	800ec7e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_PCD_Stop+0x1c>
 80072bc:	2302      	movs	r3, #2
 80072be:	e026      	b.n	800730e <HAL_PCD_Stop+0x6a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f006 fae6 	bl	800d89e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f007 fcf2 	bl	800ecc0 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2110      	movs	r1, #16
 80072e2:	4618      	mov	r0, r3
 80072e4:	f006 fc9c 	bl	800dc20 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d109      	bne.n	8007304 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d005      	beq.n	8007304 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007316:	b590      	push	{r4, r7, lr}
 8007318:	b08d      	sub	sp, #52	@ 0x34
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f007 fd7b 	bl	800ee28 <USB_GetMode>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 848a 	bne.w	8007c4e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f007 fcdf 	bl	800ed02 <USB_ReadInterrupts>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8480 	beq.w	8007c4c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	0a1b      	lsrs	r3, r3, #8
 8007356:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f007 fccc 	bl	800ed02 <USB_ReadInterrupts>
 800736a:	4603      	mov	r3, r0
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b02      	cmp	r3, #2
 8007372:	d107      	bne.n	8007384 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695a      	ldr	r2, [r3, #20]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f002 0202 	and.w	r2, r2, #2
 8007382:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f007 fcba 	bl	800ed02 <USB_ReadInterrupts>
 800738e:	4603      	mov	r3, r0
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b10      	cmp	r3, #16
 8007396:	d161      	bne.n	800745c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0210 	bic.w	r2, r2, #16
 80073a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	0c5b      	lsrs	r3, r3, #17
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d124      	bne.n	800741e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d035      	beq.n	800744c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	091b      	lsrs	r3, r3, #4
 80073e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80073ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	6a38      	ldr	r0, [r7, #32]
 80073f4:	f007 faa2 	bl	800e93c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	091b      	lsrs	r3, r3, #4
 8007400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007404:	441a      	add	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a1a      	ldr	r2, [r3, #32]
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	091b      	lsrs	r3, r3, #4
 8007412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007416:	441a      	add	r2, r3
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	621a      	str	r2, [r3, #32]
 800741c:	e016      	b.n	800744c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	0c5b      	lsrs	r3, r3, #17
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	2b06      	cmp	r3, #6
 8007428:	d110      	bne.n	800744c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007430:	2208      	movs	r2, #8
 8007432:	4619      	mov	r1, r3
 8007434:	6a38      	ldr	r0, [r7, #32]
 8007436:	f007 fa81 	bl	800e93c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007446:	441a      	add	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0210 	orr.w	r2, r2, #16
 800745a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f007 fc4e 	bl	800ed02 <USB_ReadInterrupts>
 8007466:	4603      	mov	r3, r0
 8007468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800746c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007470:	f040 80a7 	bne.w	80075c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f007 fc53 	bl	800ed28 <USB_ReadDevAllOutEpInterrupt>
 8007482:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007484:	e099      	b.n	80075ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 808e 	beq.w	80075ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f007 fc77 	bl	800ed90 <USB_ReadDevOutEPInterrupt>
 80074a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ba:	461a      	mov	r2, r3
 80074bc:	2301      	movs	r3, #1
 80074be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80074c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fef0 	bl	80082a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074de:	461a      	mov	r2, r3
 80074e0:	2308      	movs	r3, #8
 80074e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80074e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 ffc6 	bl	8008478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	2310      	movs	r3, #16
 8007506:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d030      	beq.n	8007574 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b80      	cmp	r3, #128	@ 0x80
 800751c:	d109      	bne.n	8007532 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800752c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007530:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	78db      	ldrb	r3, [r3, #3]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d108      	bne.n	8007562 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2200      	movs	r2, #0
 8007554:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	b2db      	uxtb	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f014 fa07 	bl	801b970 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756e:	461a      	mov	r2, r3
 8007570:	2302      	movs	r3, #2
 8007572:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800758a:	461a      	mov	r2, r3
 800758c:	2320      	movs	r3, #32
 800758e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a6:	461a      	mov	r2, r3
 80075a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80075ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	3301      	adds	r3, #1
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f47f af62 	bne.w	8007486 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f007 fb9b 	bl	800ed02 <USB_ReadInterrupts>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075d6:	f040 80db 	bne.w	8007790 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f007 fbbc 	bl	800ed5c <USB_ReadDevAllInEpInterrupt>
 80075e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80075ea:	e0cd      	b.n	8007788 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80075ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80c2 	beq.w	800777c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f007 fbe2 	bl	800edcc <USB_ReadDevInEPInterrupt>
 8007608:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d057      	beq.n	80076c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	2201      	movs	r2, #1
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	43db      	mvns	r3, r3
 800762e:	69f9      	ldr	r1, [r7, #28]
 8007630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007634:	4013      	ands	r3, r2
 8007636:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007644:	461a      	mov	r2, r3
 8007646:	2301      	movs	r3, #1
 8007648:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d132      	bne.n	80076b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007656:	4613      	mov	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	334c      	adds	r3, #76	@ 0x4c
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007668:	4613      	mov	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4403      	add	r3, r0
 8007672:	3348      	adds	r3, #72	@ 0x48
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4419      	add	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767c:	4613      	mov	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4403      	add	r3, r0
 8007686:	334c      	adds	r3, #76	@ 0x4c
 8007688:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d113      	bne.n	80076b8 <HAL_PCD_IRQHandler+0x3a2>
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007694:	4613      	mov	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	3354      	adds	r3, #84	@ 0x54
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d108      	bne.n	80076b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80076b0:	461a      	mov	r2, r3
 80076b2:	2101      	movs	r1, #1
 80076b4:	f007 fbea 	bl	800ee8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f014 f8d1 	bl	801b866 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076da:	461a      	mov	r2, r3
 80076dc:	2308      	movs	r3, #8
 80076de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f6:	461a      	mov	r2, r3
 80076f8:	2310      	movs	r3, #16
 80076fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007712:	461a      	mov	r2, r3
 8007714:	2340      	movs	r3, #64	@ 0x40
 8007716:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d023      	beq.n	800776a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007724:	6a38      	ldr	r0, [r7, #32]
 8007726:	f006 fa7b 	bl	800dc20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800772a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772c:	4613      	mov	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	3338      	adds	r3, #56	@ 0x38
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	3304      	adds	r3, #4
 800773c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d108      	bne.n	8007758 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2200      	movs	r2, #0
 800774a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f014 f91e 	bl	801b994 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007764:	461a      	mov	r2, r3
 8007766:	2302      	movs	r3, #2
 8007768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fd08 	bl	800818c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	3301      	adds	r3, #1
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	f47f af2e 	bne.w	80075ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f007 fab4 	bl	800ed02 <USB_ReadInterrupts>
 800779a:	4603      	mov	r3, r0
 800779c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a4:	d122      	bne.n	80077ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d108      	bne.n	80077d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80077cc:	2100      	movs	r1, #0
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fef0 	bl	80085b4 <HAL_PCDEx_LPM_Callback>
 80077d4:	e002      	b.n	80077dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f014 f8bc 	bl	801b954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80077ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f007 fa86 	bl	800ed02 <USB_ReadInterrupts>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007800:	d112      	bne.n	8007828 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b01      	cmp	r3, #1
 8007810:	d102      	bne.n	8007818 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f014 f878 	bl	801b908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007826:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f007 fa68 	bl	800ed02 <USB_ReadInterrupts>
 8007832:	4603      	mov	r3, r0
 8007834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800783c:	f040 80b7 	bne.w	80079ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2110      	movs	r1, #16
 800785a:	4618      	mov	r0, r3
 800785c:	f006 f9e0 	bl	800dc20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007860:	2300      	movs	r3, #0
 8007862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007864:	e046      	b.n	80078f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007872:	461a      	mov	r2, r3
 8007874:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007878:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007894:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007898:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a6:	461a      	mov	r2, r3
 80078a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f0:	3301      	adds	r3, #1
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3b3      	bcc.n	8007866 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800790c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007910:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800792a:	f043 030b 	orr.w	r3, r3, #11
 800792e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007940:	f043 030b 	orr.w	r3, r3, #11
 8007944:	6453      	str	r3, [r2, #68]	@ 0x44
 8007946:	e015      	b.n	8007974 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007956:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800795a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800795e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800796e:	f043 030b 	orr.w	r3, r3, #11
 8007972:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007982:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007986:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007998:	461a      	mov	r2, r3
 800799a:	f007 fa77 	bl	800ee8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695a      	ldr	r2, [r3, #20]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80079ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f007 f9a5 	bl	800ed02 <USB_ReadInterrupts>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079c2:	d124      	bne.n	8007a0e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f007 fa3b 	bl	800ee44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f006 f9a1 	bl	800dd1a <USB_GetDevSpeed>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681c      	ldr	r4, [r3, #0]
 80079e4:	f001 fa42 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 80079e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	4620      	mov	r0, r4
 80079f4:	f005 fea0 	bl	800d738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f013 ff5c 	bl	801b8b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695a      	ldr	r2, [r3, #20]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f007 f975 	bl	800ed02 <USB_ReadInterrupts>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d10a      	bne.n	8007a38 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f013 ff39 	bl	801b89a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f002 0208 	and.w	r2, r2, #8
 8007a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f007 f960 	bl	800ed02 <USB_ReadInterrupts>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a48:	2b80      	cmp	r3, #128	@ 0x80
 8007a4a:	d122      	bne.n	8007a92 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a58:	2301      	movs	r3, #1
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a5c:	e014      	b.n	8007a88 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a62:	4613      	mov	r3, r2
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d105      	bne.n	8007a82 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fb27 	bl	80080d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	3301      	adds	r3, #1
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d3e5      	bcc.n	8007a5e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f007 f933 	bl	800ed02 <USB_ReadInterrupts>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aa6:	d13b      	bne.n	8007b20 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aac:	e02b      	b.n	8007b06 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	3340      	adds	r3, #64	@ 0x40
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d115      	bne.n	8007b00 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007ad4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da12      	bge.n	8007b00 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	4613      	mov	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	333f      	adds	r3, #63	@ 0x3f
 8007aea:	2201      	movs	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fae8 	bl	80080d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	3301      	adds	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d3ce      	bcc.n	8007aae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695a      	ldr	r2, [r3, #20]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f007 f8ec 	bl	800ed02 <USB_ReadInterrupts>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b34:	d155      	bne.n	8007be2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b36:	2301      	movs	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b3a:	e045      	b.n	8007bc8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d12e      	bne.n	8007bc2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da2b      	bge.n	8007bc2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007b76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d121      	bne.n	8007bc2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b82:	4613      	mov	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007b90:	2201      	movs	r2, #1
 8007b92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bbe:	6053      	str	r3, [r2, #4]
            break;
 8007bc0:	e007      	b.n	8007bd2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d3b4      	bcc.n	8007b3c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695a      	ldr	r2, [r3, #20]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f007 f88b 	bl	800ed02 <USB_ReadInterrupts>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf6:	d10a      	bne.n	8007c0e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f013 fedd 	bl	801b9b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695a      	ldr	r2, [r3, #20]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f007 f875 	bl	800ed02 <USB_ReadInterrupts>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d115      	bne.n	8007c4e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f013 fecd 	bl	801b9d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6859      	ldr	r1, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e000      	b.n	8007c4e <HAL_PCD_IRQHandler+0x938>
      return;
 8007c4c:	bf00      	nop
    }
  }
}
 8007c4e:	3734      	adds	r7, #52	@ 0x34
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd90      	pop	{r4, r7, pc}

08007c54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_PCD_SetAddress+0x1a>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e013      	b.n	8007c96 <HAL_PCD_SetAddress+0x42>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f006 ffd3 	bl	800ec32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	461a      	mov	r2, r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	70fb      	strb	r3, [r7, #3]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	803b      	strh	r3, [r7, #0]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da0f      	bge.n	8007ce4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	f003 020f 	and.w	r2, r3, #15
 8007cca:	4613      	mov	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	3338      	adds	r3, #56	@ 0x38
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3304      	adds	r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	705a      	strb	r2, [r3, #1]
 8007ce2:	e00f      	b.n	8007d04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d10:	883a      	ldrh	r2, [r7, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	78ba      	ldrb	r2, [r7, #2]
 8007d1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d2e:	78bb      	ldrb	r3, [r7, #2]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d102      	bne.n	8007d3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_PCD_EP_Open+0xaa>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e00e      	b.n	8007d66 <HAL_PCD_EP_Open+0xc8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68f9      	ldr	r1, [r7, #12]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f006 f804 	bl	800dd64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007d64:	7afb      	ldrb	r3, [r7, #11]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da0f      	bge.n	8007da2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	f003 020f 	and.w	r2, r3, #15
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	3338      	adds	r3, #56	@ 0x38
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	3304      	adds	r3, #4
 8007d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	705a      	strb	r2, [r3, #1]
 8007da0:	e00f      	b.n	8007dc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	f003 020f 	and.w	r2, r3, #15
 8007da8:	4613      	mov	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	f003 030f 	and.w	r3, r3, #15
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_PCD_EP_Close+0x6e>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e00e      	b.n	8007dfa <HAL_PCD_EP_Close+0x8c>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68f9      	ldr	r1, [r7, #12]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f006 f842 	bl	800de74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	f003 020f 	and.w	r2, r3, #15
 8007e18:	4613      	mov	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	3304      	adds	r3, #4
 8007e2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2200      	movs	r2, #0
 8007e42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d102      	bne.n	8007e5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	6979      	ldr	r1, [r7, #20]
 8007e76:	f006 fb21 	bl	800e4bc <USB_EP0StartXfer>
 8007e7a:	e008      	b.n	8007e8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	461a      	mov	r2, r3
 8007e88:	6979      	ldr	r1, [r7, #20]
 8007e8a:	f006 f8cf 	bl	800e02c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	f003 020f 	and.w	r2, r3, #15
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8007eba:	681b      	ldr	r3, [r3, #0]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	f003 020f 	and.w	r2, r3, #15
 8007ede:	4613      	mov	r3, r2
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	3338      	adds	r3, #56	@ 0x38
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	3304      	adds	r3, #4
 8007eee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2200      	movs	r2, #0
 8007f00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2201      	movs	r2, #1
 8007f06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d102      	bne.n	8007f22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	6979      	ldr	r1, [r7, #20]
 8007f3a:	f006 fabf 	bl	800e4bc <USB_EP0StartXfer>
 8007f3e:	e008      	b.n	8007f52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6979      	ldr	r1, [r7, #20]
 8007f4e:	f006 f86d 	bl	800e02c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	f003 020f 	and.w	r2, r3, #15
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d901      	bls.n	8007f7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e050      	b.n	800801c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da0f      	bge.n	8007fa2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	f003 020f 	and.w	r2, r3, #15
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	3338      	adds	r3, #56	@ 0x38
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4413      	add	r3, r2
 8007f96:	3304      	adds	r3, #4
 8007f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	705a      	strb	r2, [r3, #1]
 8007fa0:	e00d      	b.n	8007fbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_PCD_EP_SetStall+0x82>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e01e      	b.n	800801c <HAL_PCD_EP_SetStall+0xc0>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f006 fcfd 	bl	800e9ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	b2d9      	uxtb	r1, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800800c:	461a      	mov	r2, r3
 800800e:	f006 ff3d 	bl	800ee8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	f003 020f 	and.w	r2, r3, #15
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	429a      	cmp	r2, r3
 800803c:	d901      	bls.n	8008042 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e042      	b.n	80080c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da0f      	bge.n	800806a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f003 020f 	and.w	r2, r3, #15
 8008050:	4613      	mov	r3, r2
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	3338      	adds	r3, #56	@ 0x38
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	3304      	adds	r3, #4
 8008060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	705a      	strb	r2, [r3, #1]
 8008068:	e00f      	b.n	800808a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	f003 020f 	and.w	r2, r3, #15
 8008070:	4613      	mov	r3, r2
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	4413      	add	r3, r2
 8008080:	3304      	adds	r3, #4
 8008082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	b2da      	uxtb	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_PCD_EP_ClrStall+0x86>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e00e      	b.n	80080c8 <HAL_PCD_EP_ClrStall+0xa4>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f006 fd05 	bl	800eac8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80080dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	da0c      	bge.n	80080fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	f003 020f 	and.w	r2, r3, #15
 80080ea:	4613      	mov	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	3338      	adds	r3, #56	@ 0x38
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	3304      	adds	r3, #4
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e00c      	b.n	8008118 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 020f 	and.w	r2, r3, #15
 8008104:	4613      	mov	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	4413      	add	r3, r2
 8008114:	3304      	adds	r3, #4
 8008116:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68f9      	ldr	r1, [r7, #12]
 800811e:	4618      	mov	r0, r3
 8008120:	f006 fb24 	bl	800e76c <USB_EPStopXfer>
 8008124:	4603      	mov	r3, r0
 8008126:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008128:	7afb      	ldrb	r3, [r7, #11]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_PCD_EP_Flush+0x1a>
 8008148:	2302      	movs	r3, #2
 800814a:	e01b      	b.n	8008184 <HAL_PCD_EP_Flush+0x52>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008158:	2b00      	cmp	r3, #0
 800815a:	da09      	bge.n	8008170 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f005 fd59 	bl	800dc20 <USB_FlushTxFifo>
 800816e:	e004      	b.n	800817a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f005 fd87 	bl	800dc88 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	@ 0x28
 8008190:	af02      	add	r7, sp, #8
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	4613      	mov	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	3338      	adds	r3, #56	@ 0x38
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	4413      	add	r3, r2
 80081b0:	3304      	adds	r3, #4
 80081b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d901      	bls.n	80081c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e06c      	b.n	800829e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	699a      	ldr	r2, [r3, #24]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d902      	bls.n	80081e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	3303      	adds	r3, #3
 80081e4:	089b      	lsrs	r3, r3, #2
 80081e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081e8:	e02b      	b.n	8008242 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d902      	bls.n	8008206 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	3303      	adds	r3, #3
 800820a:	089b      	lsrs	r3, r3, #2
 800820c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6919      	ldr	r1, [r3, #16]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	b2da      	uxtb	r2, r3
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800821e:	b2db      	uxtb	r3, r3
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4603      	mov	r3, r0
 8008224:	6978      	ldr	r0, [r7, #20]
 8008226:	f006 fb4b 	bl	800e8c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	691a      	ldr	r2, [r3, #16]
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1a      	ldr	r2, [r3, #32]
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	441a      	add	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	429a      	cmp	r2, r3
 8008256:	d809      	bhi.n	800826c <PCD_WriteEmptyTxFifo+0xe0>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a1a      	ldr	r2, [r3, #32]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008260:	429a      	cmp	r2, r3
 8008262:	d203      	bcs.n	800826c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1be      	bne.n	80081ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	429a      	cmp	r2, r3
 8008276:	d811      	bhi.n	800829c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	2201      	movs	r2, #1
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	43db      	mvns	r3, r3
 8008292:	6939      	ldr	r1, [r7, #16]
 8008294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008298:	4013      	ands	r3, r2
 800829a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	333c      	adds	r3, #60	@ 0x3c
 80082c0:	3304      	adds	r3, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d17b      	bne.n	80083d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d015      	beq.n	8008314 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	4a61      	ldr	r2, [pc, #388]	@ (8008470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	f240 80b9 	bls.w	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80b3 	beq.w	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830a:	461a      	mov	r2, r3
 800830c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008310:	6093      	str	r3, [r2, #8]
 8008312:	e0a7      	b.n	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832a:	461a      	mov	r2, r3
 800832c:	2320      	movs	r3, #32
 800832e:	6093      	str	r3, [r2, #8]
 8008330:	e098      	b.n	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8093 	bne.w	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4a4b      	ldr	r2, [pc, #300]	@ (8008470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d90f      	bls.n	8008366 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835c:	461a      	mov	r2, r3
 800835e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008362:	6093      	str	r3, [r2, #8]
 8008364:	e07e      	b.n	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4413      	add	r3, r2
 8008378:	3304      	adds	r3, #4
 800837a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	0159      	lsls	r1, r3, #5
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	440b      	add	r3, r1
 8008388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008392:	1ad2      	subs	r2, r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d114      	bne.n	80083c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80083b0:	461a      	mov	r2, r3
 80083b2:	2101      	movs	r1, #1
 80083b4:	f006 fd6a 	bl	800ee8c <USB_EP0_OutStart>
 80083b8:	e006      	b.n	80083c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	441a      	add	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f013 fa2e 	bl	801b830 <HAL_PCD_DataOutStageCallback>
 80083d4:	e046      	b.n	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	4a26      	ldr	r2, [pc, #152]	@ (8008474 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d124      	bne.n	8008428 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f4:	461a      	mov	r2, r3
 80083f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083fa:	6093      	str	r3, [r2, #8]
 80083fc:	e032      	b.n	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008414:	461a      	mov	r2, r3
 8008416:	2320      	movs	r3, #32
 8008418:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f013 fa05 	bl	801b830 <HAL_PCD_DataOutStageCallback>
 8008426:	e01d      	b.n	8008464 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d114      	bne.n	8008458 <PCD_EP_OutXfrComplete_int+0x1b0>
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	4613      	mov	r3, r2
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	440b      	add	r3, r1
 800843c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d108      	bne.n	8008458 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008450:	461a      	mov	r2, r3
 8008452:	2100      	movs	r1, #0
 8008454:	f006 fd1a 	bl	800ee8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f013 f9e6 	bl	801b830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	4f54300a 	.word	0x4f54300a
 8008474:	4f54310a 	.word	0x4f54310a

08008478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	333c      	adds	r3, #60	@ 0x3c
 8008490:	3304      	adds	r3, #4
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a15      	ldr	r2, [pc, #84]	@ (8008500 <PCD_EP_OutSetupPacket_int+0x88>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d90e      	bls.n	80084cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f013 f99d 	bl	801b80c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008500 <PCD_EP_OutSetupPacket_int+0x88>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d90c      	bls.n	80084f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d108      	bne.n	80084f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80084ec:	461a      	mov	r2, r3
 80084ee:	2101      	movs	r1, #1
 80084f0:	f006 fccc 	bl	800ee8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	4f54300a 	.word	0x4f54300a

08008504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	4613      	mov	r3, r2
 8008512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d107      	bne.n	8008532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008522:	883b      	ldrh	r3, [r7, #0]
 8008524:	0419      	lsls	r1, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	430a      	orrs	r2, r1
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008530:	e028      	b.n	8008584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	0c1b      	lsrs	r3, r3, #16
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
 8008544:	e00d      	b.n	8008562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	3340      	adds	r3, #64	@ 0x40
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	0c1b      	lsrs	r3, r3, #16
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	4413      	add	r3, r2
 800855a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	3301      	adds	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	7bfa      	ldrb	r2, [r7, #15]
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	3b01      	subs	r3, #1
 8008568:	429a      	cmp	r2, r3
 800856a:	d3ec      	bcc.n	8008546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800856c:	883b      	ldrh	r3, [r7, #0]
 800856e:	0418      	lsls	r0, r3, #16
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	3b01      	subs	r3, #1
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	4302      	orrs	r2, r0
 800857c:	3340      	adds	r3, #64	@ 0x40
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	887a      	ldrh	r2, [r7, #2]
 80085a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80085d8:	4b10      	ldr	r3, [pc, #64]	@ (800861c <HAL_PWR_EnterSTOPMode+0x50>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f023 0203 	bic.w	r2, r3, #3
 80085e0:	490e      	ldr	r1, [pc, #56]	@ (800861c <HAL_PWR_EnterSTOPMode+0x50>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80085e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <HAL_PWR_EnterSTOPMode+0x54>)
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008620 <HAL_PWR_EnterSTOPMode+0x54>)
 80085ee:	f043 0304 	orr.w	r3, r3, #4
 80085f2:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80085fa:	bf30      	wfi
 80085fc:	e002      	b.n	8008604 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80085fe:	bf40      	sev
    __WFE();
 8008600:	bf20      	wfe
    __WFE();
 8008602:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008604:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_PWR_EnterSTOPMode+0x54>)
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	4a05      	ldr	r2, [pc, #20]	@ (8008620 <HAL_PWR_EnterSTOPMode+0x54>)
 800860a:	f023 0304 	bic.w	r3, r3, #4
 800860e:	6113      	str	r3, [r2, #16]
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	40007000 	.word	0x40007000
 8008620:	e000ed00 	.word	0xe000ed00

08008624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e267      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d075      	beq.n	800872e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008642:	4b88      	ldr	r3, [pc, #544]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 030c 	and.w	r3, r3, #12
 800864a:	2b04      	cmp	r3, #4
 800864c:	d00c      	beq.n	8008668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800864e:	4b85      	ldr	r3, [pc, #532]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008656:	2b08      	cmp	r3, #8
 8008658:	d112      	bne.n	8008680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800865a:	4b82      	ldr	r3, [pc, #520]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008666:	d10b      	bne.n	8008680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008668:	4b7e      	ldr	r3, [pc, #504]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d05b      	beq.n	800872c <HAL_RCC_OscConfig+0x108>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d157      	bne.n	800872c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e242      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008688:	d106      	bne.n	8008698 <HAL_RCC_OscConfig+0x74>
 800868a:	4b76      	ldr	r3, [pc, #472]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a75      	ldr	r2, [pc, #468]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e01d      	b.n	80086d4 <HAL_RCC_OscConfig+0xb0>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086a0:	d10c      	bne.n	80086bc <HAL_RCC_OscConfig+0x98>
 80086a2:	4b70      	ldr	r3, [pc, #448]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a6f      	ldr	r2, [pc, #444]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	4b6d      	ldr	r3, [pc, #436]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a6c      	ldr	r2, [pc, #432]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	e00b      	b.n	80086d4 <HAL_RCC_OscConfig+0xb0>
 80086bc:	4b69      	ldr	r3, [pc, #420]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a68      	ldr	r2, [pc, #416]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	4b66      	ldr	r3, [pc, #408]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a65      	ldr	r2, [pc, #404]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d013      	beq.n	8008704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fb fb14 	bl	8003d08 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e4:	f7fb fb10 	bl	8003d08 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b64      	cmp	r3, #100	@ 0x64
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e207      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086f6:	4b5b      	ldr	r3, [pc, #364]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f0      	beq.n	80086e4 <HAL_RCC_OscConfig+0xc0>
 8008702:	e014      	b.n	800872e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008704:	f7fb fb00 	bl	8003d08 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800870c:	f7fb fafc 	bl	8003d08 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b64      	cmp	r3, #100	@ 0x64
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e1f3      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800871e:	4b51      	ldr	r3, [pc, #324]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f0      	bne.n	800870c <HAL_RCC_OscConfig+0xe8>
 800872a:	e000      	b.n	800872e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d063      	beq.n	8008802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800873a:	4b4a      	ldr	r3, [pc, #296]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00b      	beq.n	800875e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008746:	4b47      	ldr	r3, [pc, #284]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800874e:	2b08      	cmp	r3, #8
 8008750:	d11c      	bne.n	800878c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008752:	4b44      	ldr	r3, [pc, #272]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d116      	bne.n	800878c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875e:	4b41      	ldr	r3, [pc, #260]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <HAL_RCC_OscConfig+0x152>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d001      	beq.n	8008776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e1c7      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008776:	4b3b      	ldr	r3, [pc, #236]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	4937      	ldr	r1, [pc, #220]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008786:	4313      	orrs	r3, r2
 8008788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800878a:	e03a      	b.n	8008802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d020      	beq.n	80087d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008794:	4b34      	ldr	r3, [pc, #208]	@ (8008868 <HAL_RCC_OscConfig+0x244>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879a:	f7fb fab5 	bl	8003d08 <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a0:	e008      	b.n	80087b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a2:	f7fb fab1 	bl	8003d08 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e1a8      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0f0      	beq.n	80087a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c0:	4b28      	ldr	r3, [pc, #160]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4925      	ldr	r1, [pc, #148]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	600b      	str	r3, [r1, #0]
 80087d4:	e015      	b.n	8008802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087d6:	4b24      	ldr	r3, [pc, #144]	@ (8008868 <HAL_RCC_OscConfig+0x244>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087dc:	f7fb fa94 	bl	8003d08 <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087e4:	f7fb fa90 	bl	8003d08 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e187      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1f0      	bne.n	80087e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d036      	beq.n	800887c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008816:	4b15      	ldr	r3, [pc, #84]	@ (800886c <HAL_RCC_OscConfig+0x248>)
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800881c:	f7fb fa74 	bl	8003d08 <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008824:	f7fb fa70 	bl	8003d08 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e167      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008836:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x200>
 8008842:	e01b      	b.n	800887c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008844:	4b09      	ldr	r3, [pc, #36]	@ (800886c <HAL_RCC_OscConfig+0x248>)
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800884a:	f7fb fa5d 	bl	8003d08 <HAL_GetTick>
 800884e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008850:	e00e      	b.n	8008870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008852:	f7fb fa59 	bl	8003d08 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d907      	bls.n	8008870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e150      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
 8008864:	40023800 	.word	0x40023800
 8008868:	42470000 	.word	0x42470000
 800886c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008870:	4b88      	ldr	r3, [pc, #544]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1ea      	bne.n	8008852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8097 	beq.w	80089b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800888e:	4b81      	ldr	r3, [pc, #516]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10f      	bne.n	80088ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	4b7d      	ldr	r3, [pc, #500]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	4a7c      	ldr	r2, [pc, #496]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80088a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80088aa:	4b7a      	ldr	r3, [pc, #488]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088b2:	60bb      	str	r3, [r7, #8]
 80088b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088b6:	2301      	movs	r3, #1
 80088b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ba:	4b77      	ldr	r3, [pc, #476]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d118      	bne.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c6:	4b74      	ldr	r3, [pc, #464]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a73      	ldr	r2, [pc, #460]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088d2:	f7fb fa19 	bl	8003d08 <HAL_GetTick>
 80088d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d8:	e008      	b.n	80088ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088da:	f7fb fa15 	bl	8003d08 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e10c      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ec:	4b6a      	ldr	r3, [pc, #424]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d106      	bne.n	800890e <HAL_RCC_OscConfig+0x2ea>
 8008900:	4b64      	ldr	r3, [pc, #400]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008904:	4a63      	ldr	r2, [pc, #396]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	6713      	str	r3, [r2, #112]	@ 0x70
 800890c:	e01c      	b.n	8008948 <HAL_RCC_OscConfig+0x324>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b05      	cmp	r3, #5
 8008914:	d10c      	bne.n	8008930 <HAL_RCC_OscConfig+0x30c>
 8008916:	4b5f      	ldr	r3, [pc, #380]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891a:	4a5e      	ldr	r2, [pc, #376]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	6713      	str	r3, [r2, #112]	@ 0x70
 8008922:	4b5c      	ldr	r3, [pc, #368]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008926:	4a5b      	ldr	r2, [pc, #364]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6713      	str	r3, [r2, #112]	@ 0x70
 800892e:	e00b      	b.n	8008948 <HAL_RCC_OscConfig+0x324>
 8008930:	4b58      	ldr	r3, [pc, #352]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008934:	4a57      	ldr	r2, [pc, #348]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	6713      	str	r3, [r2, #112]	@ 0x70
 800893c:	4b55      	ldr	r3, [pc, #340]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 800893e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008940:	4a54      	ldr	r2, [pc, #336]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008942:	f023 0304 	bic.w	r3, r3, #4
 8008946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d015      	beq.n	800897c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008950:	f7fb f9da 	bl	8003d08 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008956:	e00a      	b.n	800896e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008958:	f7fb f9d6 	bl	8003d08 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e0cb      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800896e:	4b49      	ldr	r3, [pc, #292]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0ee      	beq.n	8008958 <HAL_RCC_OscConfig+0x334>
 800897a:	e014      	b.n	80089a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800897c:	f7fb f9c4 	bl	8003d08 <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008982:	e00a      	b.n	800899a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008984:	f7fb f9c0 	bl	8003d08 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e0b5      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800899a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1ee      	bne.n	8008984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d105      	bne.n	80089b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089ac:	4b39      	ldr	r3, [pc, #228]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b0:	4a38      	ldr	r2, [pc, #224]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 80a1 	beq.w	8008b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089c2:	4b34      	ldr	r3, [pc, #208]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f003 030c 	and.w	r3, r3, #12
 80089ca:	2b08      	cmp	r3, #8
 80089cc:	d05c      	beq.n	8008a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d141      	bne.n	8008a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d6:	4b31      	ldr	r3, [pc, #196]	@ (8008a9c <HAL_RCC_OscConfig+0x478>)
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089dc:	f7fb f994 	bl	8003d08 <HAL_GetTick>
 80089e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089e4:	f7fb f990 	bl	8003d08 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e087      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f6:	4b27      	ldr	r3, [pc, #156]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f0      	bne.n	80089e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69da      	ldr	r2, [r3, #28]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	019b      	lsls	r3, r3, #6
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	041b      	lsls	r3, r3, #16
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	491b      	ldr	r1, [pc, #108]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a9c <HAL_RCC_OscConfig+0x478>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a32:	f7fb f969 	bl	8003d08 <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a38:	e008      	b.n	8008a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a3a:	f7fb f965 	bl	8003d08 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e05c      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4c:	4b11      	ldr	r3, [pc, #68]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0f0      	beq.n	8008a3a <HAL_RCC_OscConfig+0x416>
 8008a58:	e054      	b.n	8008b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5a:	4b10      	ldr	r3, [pc, #64]	@ (8008a9c <HAL_RCC_OscConfig+0x478>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a60:	f7fb f952 	bl	8003d08 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a68:	f7fb f94e 	bl	8003d08 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e045      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a7a:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x444>
 8008a86:	e03d      	b.n	8008b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e038      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40007000 	.word	0x40007000
 8008a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <HAL_RCC_OscConfig+0x4ec>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d028      	beq.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d121      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d11a      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d111      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d107      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d001      	beq.n	8008b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40023800 	.word	0x40023800

08008b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0cc      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b28:	4b68      	ldr	r3, [pc, #416]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d90c      	bls.n	8008b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b36:	4b65      	ldr	r3, [pc, #404]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3e:	4b63      	ldr	r3, [pc, #396]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d001      	beq.n	8008b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0b8      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d020      	beq.n	8008b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b68:	4b59      	ldr	r3, [pc, #356]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	4a58      	ldr	r2, [pc, #352]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b80:	4b53      	ldr	r3, [pc, #332]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	4a52      	ldr	r2, [pc, #328]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b8c:	4b50      	ldr	r3, [pc, #320]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	494d      	ldr	r1, [pc, #308]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d044      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb2:	4b47      	ldr	r3, [pc, #284]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d119      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e07f      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d003      	beq.n	8008bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e06f      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be2:	4b3b      	ldr	r3, [pc, #236]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e067      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bf2:	4b37      	ldr	r3, [pc, #220]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f023 0203 	bic.w	r2, r3, #3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4934      	ldr	r1, [pc, #208]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c04:	f7fb f880 	bl	8003d08 <HAL_GetTick>
 8008c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c0a:	e00a      	b.n	8008c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c0c:	f7fb f87c 	bl	8003d08 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e04f      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c22:	4b2b      	ldr	r3, [pc, #172]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 020c 	and.w	r2, r3, #12
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d1eb      	bne.n	8008c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c34:	4b25      	ldr	r3, [pc, #148]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d20c      	bcs.n	8008c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c42:	4b22      	ldr	r3, [pc, #136]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4a:	4b20      	ldr	r3, [pc, #128]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d001      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e032      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d008      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c68:	4b19      	ldr	r3, [pc, #100]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4916      	ldr	r1, [pc, #88]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c86:	4b12      	ldr	r3, [pc, #72]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	490e      	ldr	r1, [pc, #56]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c9a:	f000 f821 	bl	8008ce0 <HAL_RCC_GetSysClockFreq>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	490a      	ldr	r1, [pc, #40]	@ (8008cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8008cac:	5ccb      	ldrb	r3, [r1, r3]
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	4a09      	ldr	r2, [pc, #36]	@ (8008cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cb6:	4b09      	ldr	r3, [pc, #36]	@ (8008cdc <HAL_RCC_ClockConfig+0x1c8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fa ffe0 	bl	8003c80 <HAL_InitTick>

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40023c00 	.word	0x40023c00
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	080229d4 	.word	0x080229d4
 8008cd8:	20000014 	.word	0x20000014
 8008cdc:	20000018 	.word	0x20000018

08008ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce4:	b090      	sub	sp, #64	@ 0x40
 8008ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cf8:	4b59      	ldr	r3, [pc, #356]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 030c 	and.w	r3, r3, #12
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d00d      	beq.n	8008d20 <HAL_RCC_GetSysClockFreq+0x40>
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	f200 80a1 	bhi.w	8008e4c <HAL_RCC_GetSysClockFreq+0x16c>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_RCC_GetSysClockFreq+0x34>
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d003      	beq.n	8008d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8008d12:	e09b      	b.n	8008e4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d14:	4b53      	ldr	r3, [pc, #332]	@ (8008e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d16:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008d18:	e09b      	b.n	8008e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d1a:	4b53      	ldr	r3, [pc, #332]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d1e:	e098      	b.n	8008e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d20:	4b4f      	ldr	r3, [pc, #316]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d028      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d36:	4b4a      	ldr	r3, [pc, #296]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	099b      	lsrs	r3, r3, #6
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	623b      	str	r3, [r7, #32]
 8008d40:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4b47      	ldr	r3, [pc, #284]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d4c:	fb03 f201 	mul.w	r2, r3, r1
 8008d50:	2300      	movs	r3, #0
 8008d52:	fb00 f303 	mul.w	r3, r0, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	4a43      	ldr	r2, [pc, #268]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d5a:	fba0 1202 	umull	r1, r2, r0, r2
 8008d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d60:	460a      	mov	r2, r1
 8008d62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d66:	4413      	add	r3, r2
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
 8008d70:	61fa      	str	r2, [r7, #28]
 8008d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d7a:	f7f7 ff9d 	bl	8000cb8 <__aeabi_uldivmod>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4613      	mov	r3, r2
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d86:	e053      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d88:	4b35      	ldr	r3, [pc, #212]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	099b      	lsrs	r3, r3, #6
 8008d8e:	2200      	movs	r2, #0
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	617a      	str	r2, [r7, #20]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d9a:	f04f 0b00 	mov.w	fp, #0
 8008d9e:	4652      	mov	r2, sl
 8008da0:	465b      	mov	r3, fp
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f04f 0100 	mov.w	r1, #0
 8008daa:	0159      	lsls	r1, r3, #5
 8008dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008db0:	0150      	lsls	r0, r2, #5
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	ebb2 080a 	subs.w	r8, r2, sl
 8008dba:	eb63 090b 	sbc.w	r9, r3, fp
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008dca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008dce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008dd2:	ebb2 0408 	subs.w	r4, r2, r8
 8008dd6:	eb63 0509 	sbc.w	r5, r3, r9
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	00eb      	lsls	r3, r5, #3
 8008de4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008de8:	00e2      	lsls	r2, r4, #3
 8008dea:	4614      	mov	r4, r2
 8008dec:	461d      	mov	r5, r3
 8008dee:	eb14 030a 	adds.w	r3, r4, sl
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	eb45 030b 	adc.w	r3, r5, fp
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e06:	4629      	mov	r1, r5
 8008e08:	028b      	lsls	r3, r1, #10
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e10:	4621      	mov	r1, r4
 8008e12:	028a      	lsls	r2, r1, #10
 8008e14:	4610      	mov	r0, r2
 8008e16:	4619      	mov	r1, r3
 8008e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	60fa      	str	r2, [r7, #12]
 8008e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e24:	f7f7 ff48 	bl	8000cb8 <__aeabi_uldivmod>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e30:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	0c1b      	lsrs	r3, r3, #16
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008e40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e4a:	e002      	b.n	8008e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e4c:	4b05      	ldr	r3, [pc, #20]	@ (8008e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3740      	adds	r7, #64	@ 0x40
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5e:	bf00      	nop
 8008e60:	40023800 	.word	0x40023800
 8008e64:	00f42400 	.word	0x00f42400
 8008e68:	017d7840 	.word	0x017d7840

08008e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e70:	4b03      	ldr	r3, [pc, #12]	@ (8008e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000014 	.word	0x20000014

08008e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e88:	f7ff fff0 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	0a9b      	lsrs	r3, r3, #10
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	4903      	ldr	r1, [pc, #12]	@ (8008ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e9a:	5ccb      	ldrb	r3, [r1, r3]
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	080229e4 	.word	0x080229e4

08008eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008eb0:	f7ff ffdc 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b05      	ldr	r3, [pc, #20]	@ (8008ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	0b5b      	lsrs	r3, r3, #13
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	4903      	ldr	r1, [pc, #12]	@ (8008ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ec2:	5ccb      	ldrb	r3, [r1, r3]
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	080229e4 	.word	0x080229e4

08008ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d035      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008efc:	4b67      	ldr	r3, [pc, #412]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f02:	f7fa ff01 	bl	8003d08 <HAL_GetTick>
 8008f06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f08:	e008      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f0a:	f7fa fefd 	bl	8003d08 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d901      	bls.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e0ba      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f1c:	4b60      	ldr	r3, [pc, #384]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1f0      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	019a      	lsls	r2, r3, #6
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	071b      	lsls	r3, r3, #28
 8008f34:	495a      	ldr	r1, [pc, #360]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008f3c:	4b57      	ldr	r3, [pc, #348]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f42:	f7fa fee1 	bl	8003d08 <HAL_GetTick>
 8008f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f48:	e008      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f4a:	f7fa fedd 	bl	8003d08 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d901      	bls.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e09a      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f5c:	4b50      	ldr	r3, [pc, #320]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f0      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0302 	and.w	r3, r3, #2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8083 	beq.w	800907c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	4b49      	ldr	r3, [pc, #292]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7e:	4a48      	ldr	r2, [pc, #288]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f86:	4b46      	ldr	r3, [pc, #280]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f92:	4b44      	ldr	r3, [pc, #272]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a43      	ldr	r2, [pc, #268]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f9e:	f7fa feb3 	bl	8003d08 <HAL_GetTick>
 8008fa2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008fa6:	f7fa feaf 	bl	8003d08 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e06c      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0f0      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fc4:	4b36      	ldr	r3, [pc, #216]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d02f      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d028      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008fec:	4b2e      	ldr	r3, [pc, #184]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008fee:	2201      	movs	r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ff8:	4a29      	ldr	r2, [pc, #164]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ffe:	4b28      	ldr	r3, [pc, #160]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b01      	cmp	r3, #1
 8009008:	d114      	bne.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800900a:	f7fa fe7d 	bl	8003d08 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009010:	e00a      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009012:	f7fa fe79 	bl	8003d08 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009020:	4293      	cmp	r3, r2
 8009022:	d901      	bls.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e034      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009028:	4b1d      	ldr	r3, [pc, #116]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800902a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0ee      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800903c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009040:	d10d      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009042:	4b17      	ldr	r3, [pc, #92]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009056:	4912      	ldr	r1, [pc, #72]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009058:	4313      	orrs	r3, r2
 800905a:	608b      	str	r3, [r1, #8]
 800905c:	e005      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800905e:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	4a0f      	ldr	r2, [pc, #60]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009064:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009068:	6093      	str	r3, [r2, #8]
 800906a:	4b0d      	ldr	r3, [pc, #52]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800906c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009076:	490a      	ldr	r1, [pc, #40]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009078:	4313      	orrs	r3, r2
 800907a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	7c1a      	ldrb	r2, [r3, #16]
 800908c:	4b07      	ldr	r3, [pc, #28]	@ (80090ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800908e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	42470068 	.word	0x42470068
 80090a0:	40023800 	.word	0x40023800
 80090a4:	40007000 	.word	0x40007000
 80090a8:	42470e40 	.word	0x42470e40
 80090ac:	424711e0 	.word	0x424711e0

080090b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e066      	b.n	8009194 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	7f5b      	ldrb	r3, [r3, #29]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d105      	bne.n	80090dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fa f9ca 	bl	8003470 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	22ca      	movs	r2, #202	@ 0xca
 80090e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2253      	movs	r2, #83	@ 0x53
 80090f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbce 	bl	8009894 <RTC_EnterInitMode>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d12c      	bne.n	800915c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009114:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6899      	ldr	r1, [r3, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68d2      	ldr	r2, [r2, #12]
 800913c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6919      	ldr	r1, [r3, #16]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	041a      	lsls	r2, r3, #16
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fbd5 	bl	8009902 <RTC_ExitInitMode>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d113      	bne.n	800918a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009170:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	22ff      	movs	r2, #255	@ 0xff
 8009190:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8009192:	7bfb      	ldrb	r3, [r7, #15]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	7f1b      	ldrb	r3, [r3, #28]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_RTC_SetTime+0x1c>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e087      	b.n	80092c8 <HAL_RTC_SetTime+0x12c>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2202      	movs	r2, #2
 80091c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d126      	bne.n	8009218 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fbb2 	bl	800994c <RTC_ByteToBcd2>
 80091e8:	4603      	mov	r3, r0
 80091ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fbab 	bl	800994c <RTC_ByteToBcd2>
 80091f6:	4603      	mov	r3, r0
 80091f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80091fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	789b      	ldrb	r3, [r3, #2]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fba3 	bl	800994c <RTC_ByteToBcd2>
 8009206:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009208:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	78db      	ldrb	r3, [r3, #3]
 8009210:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	e018      	b.n	800924a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2200      	movs	r2, #0
 800922a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009238:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800923e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	78db      	ldrb	r3, [r3, #3]
 8009244:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	22ca      	movs	r2, #202	@ 0xca
 8009250:	625a      	str	r2, [r3, #36]	@ 0x24
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2253      	movs	r2, #83	@ 0x53
 8009258:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fb1a 	bl	8009894 <RTC_EnterInitMode>
 8009260:	4603      	mov	r3, r0
 8009262:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009264:	7cfb      	ldrb	r3, [r7, #19]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d120      	bne.n	80092ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009274:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009278:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009288:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6899      	ldr	r1, [r3, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	431a      	orrs	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fb2d 	bl	8009902 <RTC_ExitInitMode>
 80092a8:	4603      	mov	r3, r0
 80092aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80092ac:	7cfb      	ldrb	r3, [r7, #19]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	22ff      	movs	r2, #255	@ 0xff
 80092be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	771a      	strb	r2, [r3, #28]

  return status;
 80092c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd90      	pop	{r4, r7, pc}

080092d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009302:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009306:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009312:	b2da      	uxtb	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009322:	b2da      	uxtb	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009330:	b2da      	uxtb	r2, r3
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	0d9b      	lsrs	r3, r3, #22
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	b2da      	uxtb	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11a      	bne.n	8009382 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb18 	bl	8009986 <RTC_Bcd2ToByte>
 8009356:	4603      	mov	r3, r0
 8009358:	461a      	mov	r2, r3
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	785b      	ldrb	r3, [r3, #1]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 fb0f 	bl	8009986 <RTC_Bcd2ToByte>
 8009368:	4603      	mov	r3, r0
 800936a:	461a      	mov	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	789b      	ldrb	r3, [r3, #2]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fb06 	bl	8009986 <RTC_Bcd2ToByte>
 800937a:	4603      	mov	r3, r0
 800937c:	461a      	mov	r2, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	7f1b      	ldrb	r3, [r3, #28]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_RTC_SetDate+0x1c>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e071      	b.n	800948c <HAL_RTC_SetDate+0x100>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2202      	movs	r2, #2
 80093b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10e      	bne.n	80093d8 <HAL_RTC_SetDate+0x4c>
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	f003 0310 	and.w	r3, r3, #16
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d008      	beq.n	80093d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	785b      	ldrb	r3, [r3, #1]
 80093ca:	f023 0310 	bic.w	r3, r3, #16
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	330a      	adds	r3, #10
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d11c      	bne.n	8009418 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	78db      	ldrb	r3, [r3, #3]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fab2 	bl	800994c <RTC_ByteToBcd2>
 80093e8:	4603      	mov	r3, r0
 80093ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 faab 	bl	800994c <RTC_ByteToBcd2>
 80093f6:	4603      	mov	r3, r0
 80093f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80093fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	789b      	ldrb	r3, [r3, #2]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 faa3 	bl	800994c <RTC_ByteToBcd2>
 8009406:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009408:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009412:	4313      	orrs	r3, r2
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e00e      	b.n	8009436 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	78db      	ldrb	r3, [r3, #3]
 800941c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	785b      	ldrb	r3, [r3, #1]
 8009422:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009424:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800942a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009432:	4313      	orrs	r3, r2
 8009434:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	22ca      	movs	r2, #202	@ 0xca
 800943c:	625a      	str	r2, [r3, #36]	@ 0x24
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2253      	movs	r2, #83	@ 0x53
 8009444:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 fa24 	bl	8009894 <RTC_EnterInitMode>
 800944c:	4603      	mov	r3, r0
 800944e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009450:	7cfb      	ldrb	r3, [r7, #19]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10c      	bne.n	8009470 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009460:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009464:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fa4b 	bl	8009902 <RTC_ExitInitMode>
 800946c:	4603      	mov	r3, r0
 800946e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009470:	7cfb      	ldrb	r3, [r7, #19]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d102      	bne.n	800947c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	22ff      	movs	r2, #255	@ 0xff
 8009482:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	771a      	strb	r2, [r3, #28]

  return status;
 800948a:	7cfb      	ldrb	r3, [r7, #19]
}
 800948c:	4618      	mov	r0, r3
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	bd90      	pop	{r4, r7, pc}

08009494 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80094ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	0a1b      	lsrs	r3, r3, #8
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 031f 	and.w	r3, r3, #31
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	0b5b      	lsrs	r3, r3, #13
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d11a      	bne.n	8009528 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	78db      	ldrb	r3, [r3, #3]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 fa45 	bl	8009986 <RTC_Bcd2ToByte>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fa3c 	bl	8009986 <RTC_Bcd2ToByte>
 800950e:	4603      	mov	r3, r0
 8009510:	461a      	mov	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	789b      	ldrb	r3, [r3, #2]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa33 	bl	8009986 <RTC_Bcd2ToByte>
 8009520:	4603      	mov	r3, r0
 8009522:	461a      	mov	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009534:	b590      	push	{r4, r7, lr}
 8009536:	b089      	sub	sp, #36	@ 0x24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009540:	4b9a      	ldr	r3, [pc, #616]	@ (80097ac <HAL_RTC_SetAlarm_IT+0x278>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a9a      	ldr	r2, [pc, #616]	@ (80097b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	0adb      	lsrs	r3, r3, #11
 800954c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009550:	fb02 f303 	mul.w	r3, r2, r3
 8009554:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	7f1b      	ldrb	r3, [r3, #28]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_RTC_SetAlarm_IT+0x36>
 8009566:	2302      	movs	r3, #2
 8009568:	e11c      	b.n	80097a4 <HAL_RTC_SetAlarm_IT+0x270>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2202      	movs	r2, #2
 8009574:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d137      	bne.n	80095ec <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 f9d9 	bl	800994c <RTC_ByteToBcd2>
 800959a:	4603      	mov	r3, r0
 800959c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f9d2 	bl	800994c <RTC_ByteToBcd2>
 80095a8:	4603      	mov	r3, r0
 80095aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80095ac:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	789b      	ldrb	r3, [r3, #2]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f9ca 	bl	800994c <RTC_ByteToBcd2>
 80095b8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80095ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	78db      	ldrb	r3, [r3, #3]
 80095c2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80095c4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f9bc 	bl	800994c <RTC_ByteToBcd2>
 80095d4:	4603      	mov	r3, r0
 80095d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80095d8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80095e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80095e6:	4313      	orrs	r3, r2
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	e023      	b.n	8009634 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d102      	bne.n	8009600 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2200      	movs	r2, #0
 80095fe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800960c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009612:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	78db      	ldrb	r3, [r3, #3]
 8009618:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800961a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009622:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009624:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800962a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009630:	4313      	orrs	r3, r2
 8009632:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800963c:	4313      	orrs	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	22ca      	movs	r2, #202	@ 0xca
 8009646:	625a      	str	r2, [r3, #36]	@ 0x24
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2253      	movs	r2, #83	@ 0x53
 800964e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009658:	d141      	bne.n	80096de <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009668:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	b2da      	uxtb	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800967a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	1e5a      	subs	r2, r3, #1
 8009680:	617a      	str	r2, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	22ff      	movs	r2, #255	@ 0xff
 800968c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2203      	movs	r2, #3
 8009692:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e082      	b.n	80097a4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0e7      	beq.n	800967c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096ca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689a      	ldr	r2, [r3, #8]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096da:	609a      	str	r2, [r3, #8]
 80096dc:	e04b      	b.n	8009776 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80096ec:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80096fe:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009700:	4b2a      	ldr	r3, [pc, #168]	@ (80097ac <HAL_RTC_SetAlarm_IT+0x278>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a2a      	ldr	r2, [pc, #168]	@ (80097b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009706:	fba2 2303 	umull	r2, r3, r2, r3
 800970a:	0adb      	lsrs	r3, r3, #11
 800970c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009710:	fb02 f303 	mul.w	r3, r2, r3
 8009714:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	1e5a      	subs	r2, r3, #1
 800971a:	617a      	str	r2, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	22ff      	movs	r2, #255	@ 0xff
 8009726:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2203      	movs	r2, #3
 800972c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e035      	b.n	80097a4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0e7      	beq.n	8009716 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69fa      	ldr	r2, [r7, #28]
 800974c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009764:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009774:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009776:	4b0f      	ldr	r3, [pc, #60]	@ (80097b4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a0e      	ldr	r2, [pc, #56]	@ (80097b4 <HAL_RTC_SetAlarm_IT+0x280>)
 800977c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009780:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009782:	4b0c      	ldr	r3, [pc, #48]	@ (80097b4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	4a0b      	ldr	r2, [pc, #44]	@ (80097b4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800978c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	22ff      	movs	r2, #255	@ 0xff
 8009794:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3724      	adds	r7, #36	@ 0x24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd90      	pop	{r4, r7, pc}
 80097ac:	20000014 	.word	0x20000014
 80097b0:	10624dd3 	.word	0x10624dd3
 80097b4:	40013c00 	.word	0x40013c00

080097b8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d012      	beq.n	80097f4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7f9 fd1b 	bl	8003218 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80097f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d012      	beq.n	8009828 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8d4 	bl	80099be <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	b2da      	uxtb	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009826:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009828:	4b05      	ldr	r3, [pc, #20]	@ (8009840 <HAL_RTC_AlarmIRQHandler+0x88>)
 800982a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800982e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	775a      	strb	r2, [r3, #29]
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	40013c00 	.word	0x40013c00

08009844 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68da      	ldr	r2, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800985e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009860:	f7fa fa52 	bl	8003d08 <HAL_GetTick>
 8009864:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009866:	e009      	b.n	800987c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009868:	f7fa fa4e 	bl	8003d08 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009876:	d901      	bls.n	800987c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e007      	b.n	800988c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0ee      	beq.n	8009868 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d122      	bne.n	80098f8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80098c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80098c2:	f7fa fa21 	bl	8003d08 <HAL_GetTick>
 80098c6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80098c8:	e00c      	b.n	80098e4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098ca:	f7fa fa1d 	bl	8003d08 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098d8:	d904      	bls.n	80098e4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2204      	movs	r2, #4
 80098de:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <RTC_EnterInitMode+0x64>
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d1e8      	bne.n	80098ca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800991c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f003 0320 	and.w	r3, r3, #32
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ff89 	bl	8009844 <HAL_RTC_WaitForSynchro>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2204      	movs	r2, #4
 800993c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800995a:	e005      	b.n	8009968 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	3301      	adds	r3, #1
 8009960:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	3b0a      	subs	r3, #10
 8009966:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	2b09      	cmp	r3, #9
 800996c:	d8f6      	bhi.n	800995c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	b2da      	uxtb	r2, r3
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	4313      	orrs	r3, r2
 8009978:	b2db      	uxtb	r3, r3
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	4603      	mov	r3, r0
 800998e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009994:	79fb      	ldrb	r3, [r7, #7]
 8009996:	091b      	lsrs	r3, r3, #4
 8009998:	b2db      	uxtb	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	0092      	lsls	r2, r2, #2
 800999e:	4413      	add	r3, r2
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	f003 030f 	and.w	r3, r3, #15
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4413      	add	r3, r2
 80099b0:	b2db      	uxtb	r3, r3
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e022      	b.n	8009a2a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d105      	bne.n	80099fc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7f9 fd6e 	bl	80034d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2203      	movs	r2, #3
 8009a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f815 	bl	8009a34 <HAL_SD_InitCard>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e00a      	b.n	8009a2a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a34:	b5b0      	push	{r4, r5, r7, lr}
 8009a36:	b08e      	sub	sp, #56	@ 0x38
 8009a38:	af04      	add	r7, sp, #16
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009a50:	2376      	movs	r3, #118	@ 0x76
 8009a52:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681d      	ldr	r5, [r3, #0]
 8009a58:	466c      	mov	r4, sp
 8009a5a:	f107 0314 	add.w	r3, r7, #20
 8009a5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a66:	f107 0308 	add.w	r3, r7, #8
 8009a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f003 f8cf 	bl	800cc10 <SDIO_Init>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e04f      	b.n	8009b24 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009a84:	4b29      	ldr	r3, [pc, #164]	@ (8009b2c <HAL_SD_InitCard+0xf8>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f003 f907 	bl	800cca2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009a94:	4b25      	ldr	r3, [pc, #148]	@ (8009b2c <HAL_SD_InitCard+0xf8>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009a9a:	2002      	movs	r0, #2
 8009a9c:	f7fa f940 	bl	8003d20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fe69 	bl	800a778 <SD_PowerON>
 8009aa6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e02e      	b.n	8009b24 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fd88 	bl	800a5dc <SD_InitCard>
 8009acc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e01b      	b.n	8009b24 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009af4:	4618      	mov	r0, r3
 8009af6:	f003 f966 	bl	800cdc6 <SDMMC_CmdBlockLength>
 8009afa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00f      	beq.n	8009b22 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a0a      	ldr	r2, [pc, #40]	@ (8009b30 <HAL_SD_InitCard+0xfc>)
 8009b08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	431a      	orrs	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3728      	adds	r7, #40	@ 0x28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b2c:	422580a0 	.word	0x422580a0
 8009b30:	004005ff 	.word	0x004005ff

08009b34 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b092      	sub	sp, #72	@ 0x48
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b42:	f7fa f8e1 	bl	8003d08 <HAL_GetTick>
 8009b46:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d107      	bne.n	8009b66 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e1bd      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	f040 81b0 	bne.w	8009ed4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	441a      	add	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d907      	bls.n	8009b98 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e1a4      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d002      	beq.n	8009bb6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb2:	025b      	lsls	r3, r3, #9
 8009bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	025b      	lsls	r3, r3, #9
 8009bc0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009bc2:	2390      	movs	r3, #144	@ 0x90
 8009bc4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f107 0214 	add.w	r2, r7, #20
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f003 f8c6 	bl	800cd6e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d90a      	bls.n	8009bfe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2202      	movs	r2, #2
 8009bec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f003 f92a 	bl	800ce4e <SDMMC_CmdReadMultiBlock>
 8009bfa:	6478      	str	r0, [r7, #68]	@ 0x44
 8009bfc:	e009      	b.n	8009c12 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f003 f8fd 	bl	800ce0a <SDMMC_CmdReadSingleBlock>
 8009c10:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d012      	beq.n	8009c3e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8009e08 <HAL_SD_ReadBlocks+0x2d4>)
 8009c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c26:	431a      	orrs	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e151      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009c42:	e061      	b.n	8009d08 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d03c      	beq.n	8009ccc <HAL_SD_ReadBlocks+0x198>
 8009c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d039      	beq.n	8009ccc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c5c:	e033      	b.n	8009cc6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f002 ffff 	bl	800cc66 <SDIO_ReadFIFO>
 8009c68:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c74:	3301      	adds	r3, #1
 8009c76:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c90:	3b01      	subs	r3, #1
 8009c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c96:	0c1b      	lsrs	r3, r3, #16
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cac:	0e1b      	lsrs	r3, r3, #24
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cc8:	2b07      	cmp	r3, #7
 8009cca:	d9c8      	bls.n	8009c5e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009ccc:	f7fa f81c 	bl	8003d08 <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d902      	bls.n	8009ce2 <HAL_SD_ReadBlocks+0x1ae>
 8009cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d112      	bne.n	8009d08 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a48      	ldr	r2, [pc, #288]	@ (8009e08 <HAL_SD_ReadBlocks+0x2d4>)
 8009ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e0ec      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0e:	f240 332a 	movw	r3, #810	@ 0x32a
 8009d12:	4013      	ands	r3, r2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d095      	beq.n	8009c44 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d022      	beq.n	8009d6c <HAL_SD_ReadBlocks+0x238>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d91f      	bls.n	8009d6c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d01b      	beq.n	8009d6c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f003 f8ef 	bl	800cf1c <SDMMC_CmdStopTransfer>
 8009d3e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d012      	beq.n	8009d6c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8009e08 <HAL_SD_ReadBlocks+0x2d4>)
 8009d4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e0ba      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d012      	beq.n	8009da0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a22      	ldr	r2, [pc, #136]	@ (8009e08 <HAL_SD_ReadBlocks+0x2d4>)
 8009d80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d86:	f043 0208 	orr.w	r2, r3, #8
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e0a0      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d012      	beq.n	8009dd4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a15      	ldr	r2, [pc, #84]	@ (8009e08 <HAL_SD_ReadBlocks+0x2d4>)
 8009db4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dba:	f043 0202 	orr.w	r2, r3, #2
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e086      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dda:	f003 0320 	and.w	r3, r3, #32
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d063      	beq.n	8009eaa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a08      	ldr	r2, [pc, #32]	@ (8009e08 <HAL_SD_ReadBlocks+0x2d4>)
 8009de8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e06c      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
 8009e08:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f002 ff28 	bl	800cc66 <SDIO_ReadFIFO>
 8009e16:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e22:	3301      	adds	r3, #1
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	0a1b      	lsrs	r3, r3, #8
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e34:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e38:	3301      	adds	r3, #1
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e44:	0c1b      	lsrs	r3, r3, #16
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4e:	3301      	adds	r3, #1
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e54:	3b01      	subs	r3, #1
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5a:	0e1b      	lsrs	r3, r3, #24
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e64:	3301      	adds	r3, #1
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009e6e:	f7f9 ff4b 	bl	8003d08 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d902      	bls.n	8009e84 <HAL_SD_ReadBlocks+0x350>
 8009e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d112      	bne.n	8009eaa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a18      	ldr	r2, [pc, #96]	@ (8009eec <HAL_SD_ReadBlocks+0x3b8>)
 8009e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e01b      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <HAL_SD_ReadBlocks+0x38a>
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1a6      	bne.n	8009e0c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e006      	b.n	8009ee2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3748      	adds	r7, #72	@ 0x48
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	004005ff 	.word	0x004005ff

08009ef0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b092      	sub	sp, #72	@ 0x48
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009efe:	f7f9 ff03 	bl	8003d08 <HAL_GetTick>
 8009f02:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d107      	bne.n	8009f22 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e166      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	f040 8159 	bne.w	800a1e2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	441a      	add	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d907      	bls.n	8009f54 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f48:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e14d      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2203      	movs	r2, #3
 8009f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2200      	movs	r2, #0
 8009f62:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d002      	beq.n	8009f72 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6e:	025b      	lsls	r3, r3, #9
 8009f70:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	025b      	lsls	r3, r3, #9
 8009f7c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009f7e:	2390      	movs	r3, #144	@ 0x90
 8009f80:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009f82:	2300      	movs	r3, #0
 8009f84:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f107 0218 	add.w	r2, r7, #24
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f002 fee8 	bl	800cd6e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d90a      	bls.n	8009fba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 ff90 	bl	800ced6 <SDMMC_CmdWriteMultiBlock>
 8009fb6:	6478      	str	r0, [r7, #68]	@ 0x44
 8009fb8:	e009      	b.n	8009fce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2210      	movs	r2, #16
 8009fbe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f002 ff63 	bl	800ce92 <SDMMC_CmdWriteSingleBlock>
 8009fcc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d012      	beq.n	8009ffa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a87      	ldr	r2, [pc, #540]	@ (800a1f8 <HAL_SD_WriteBlocks+0x308>)
 8009fda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e0fa      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009ffe:	e065      	b.n	800a0cc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d040      	beq.n	800a090 <HAL_SD_WriteBlocks+0x1a0>
 800a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d03d      	beq.n	800a090 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a014:	2300      	movs	r3, #0
 800a016:	643b      	str	r3, [r7, #64]	@ 0x40
 800a018:	e037      	b.n	800a08a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a022:	3301      	adds	r3, #1
 800a024:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a028:	3b01      	subs	r3, #1
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	021a      	lsls	r2, r3, #8
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a03a:	3301      	adds	r3, #1
 800a03c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a040:	3b01      	subs	r3, #1
 800a042:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	041a      	lsls	r2, r3, #16
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a052:	3301      	adds	r3, #1
 800a054:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a058:	3b01      	subs	r3, #1
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	061a      	lsls	r2, r3, #24
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	4313      	orrs	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06a:	3301      	adds	r3, #1
 800a06c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	3b01      	subs	r3, #1
 800a072:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f107 0214 	add.w	r2, r7, #20
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f002 fdfe 	bl	800cc80 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a086:	3301      	adds	r3, #1
 800a088:	643b      	str	r3, [r7, #64]	@ 0x40
 800a08a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a08c:	2b07      	cmp	r3, #7
 800a08e:	d9c4      	bls.n	800a01a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a090:	f7f9 fe3a 	bl	8003d08 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d902      	bls.n	800a0a6 <HAL_SD_WriteBlocks+0x1b6>
 800a0a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d112      	bne.n	800a0cc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a53      	ldr	r2, [pc, #332]	@ (800a1f8 <HAL_SD_WriteBlocks+0x308>)
 800a0ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e091      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0d2:	f240 331a 	movw	r3, #794	@ 0x31a
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d091      	beq.n	800a000 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d022      	beq.n	800a130 <HAL_SD_WriteBlocks+0x240>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d91f      	bls.n	800a130 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d01b      	beq.n	800a130 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f002 ff0d 	bl	800cf1c <SDMMC_CmdStopTransfer>
 800a102:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a106:	2b00      	cmp	r3, #0
 800a108:	d012      	beq.n	800a130 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a3a      	ldr	r2, [pc, #232]	@ (800a1f8 <HAL_SD_WriteBlocks+0x308>)
 800a110:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a118:	431a      	orrs	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e05f      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d012      	beq.n	800a164 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f8 <HAL_SD_WriteBlocks+0x308>)
 800a144:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14a:	f043 0208 	orr.w	r2, r3, #8
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e045      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d012      	beq.n	800a198 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a20      	ldr	r2, [pc, #128]	@ (800a1f8 <HAL_SD_WriteBlocks+0x308>)
 800a178:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17e:	f043 0202 	orr.w	r2, r3, #2
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e02b      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a19e:	f003 0310 	and.w	r3, r3, #16
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d012      	beq.n	800a1cc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a13      	ldr	r2, [pc, #76]	@ (800a1f8 <HAL_SD_WriteBlocks+0x308>)
 800a1ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b2:	f043 0210 	orr.w	r2, r3, #16
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e011      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a1d4:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e006      	b.n	800a1f0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
  }
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3748      	adds	r7, #72	@ 0x48
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	004005ff 	.word	0x004005ff

0800a1fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a20a:	0f9b      	lsrs	r3, r3, #30
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a216:	0e9b      	lsrs	r3, r3, #26
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 030f 	and.w	r3, r3, #15
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a228:	0e1b      	lsrs	r3, r3, #24
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a252:	b2da      	uxtb	r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a25c:	0d1b      	lsrs	r3, r3, #20
 800a25e:	b29a      	uxth	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 030f 	and.w	r3, r3, #15
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a27a:	0bdb      	lsrs	r3, r3, #15
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0301 	and.w	r3, r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a28c:	0b9b      	lsrs	r3, r3, #14
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	b2da      	uxtb	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a29e:	0b5b      	lsrs	r3, r3, #13
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2b0:	0b1b      	lsrs	r3, r3, #12
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d163      	bne.n	800a394 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2d0:	009a      	lsls	r2, r3, #2
 800a2d2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a2dc:	0f92      	lsrs	r2, r2, #30
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2e8:	0edb      	lsrs	r3, r3, #27
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2fa:	0e1b      	lsrs	r3, r3, #24
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	b2da      	uxtb	r2, r3
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a30c:	0d5b      	lsrs	r3, r3, #21
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	b2da      	uxtb	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a31e:	0c9b      	lsrs	r3, r3, #18
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	b2da      	uxtb	r2, r3
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a330:	0bdb      	lsrs	r3, r3, #15
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	7e1b      	ldrb	r3, [r3, #24]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	3302      	adds	r3, #2
 800a354:	2201      	movs	r2, #1
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a35e:	fb03 f202 	mul.w	r2, r3, r2
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	7a1b      	ldrb	r3, [r3, #8]
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	2201      	movs	r2, #1
 800a372:	409a      	lsls	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a380:	0a52      	lsrs	r2, r2, #9
 800a382:	fb03 f202 	mul.w	r2, r3, r2
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a390:	661a      	str	r2, [r3, #96]	@ 0x60
 800a392:	e031      	b.n	800a3f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d11d      	bne.n	800a3d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3a0:	041b      	lsls	r3, r3, #16
 800a3a2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3aa:	0c1b      	lsrs	r3, r3, #16
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	029a      	lsls	r2, r3, #10
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3cc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a3d6:	e00f      	b.n	800a3f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a58      	ldr	r2, [pc, #352]	@ (800a540 <HAL_SD_GetCardCSD+0x344>)
 800a3de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e09d      	b.n	800a534 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3fc:	0b9b      	lsrs	r3, r3, #14
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	b2da      	uxtb	r2, r3
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a40e:	09db      	lsrs	r3, r3, #7
 800a410:	b2db      	uxtb	r3, r3
 800a412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a416:	b2da      	uxtb	r2, r3
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a420:	b2db      	uxtb	r3, r3
 800a422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a426:	b2da      	uxtb	r2, r3
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a430:	0fdb      	lsrs	r3, r3, #31
 800a432:	b2da      	uxtb	r2, r3
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a43c:	0f5b      	lsrs	r3, r3, #29
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0303 	and.w	r3, r3, #3
 800a444:	b2da      	uxtb	r2, r3
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a44e:	0e9b      	lsrs	r3, r3, #26
 800a450:	b2db      	uxtb	r3, r3
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	b2da      	uxtb	r2, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a460:	0d9b      	lsrs	r3, r3, #22
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 030f 	and.w	r3, r3, #15
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a472:	0d5b      	lsrs	r3, r3, #21
 800a474:	b2db      	uxtb	r3, r3
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a48e:	0c1b      	lsrs	r3, r3, #16
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	b2da      	uxtb	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a2:	0bdb      	lsrs	r3, r3, #15
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4b6:	0b9b      	lsrs	r3, r3, #14
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ca:	0b5b      	lsrs	r3, r3, #13
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4de:	0b1b      	lsrs	r3, r3, #12
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4f2:	0a9b      	lsrs	r3, r3, #10
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f003 0303 	and.w	r3, r3, #3
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	004005ff 	.word	0x004005ff

0800a544 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a5a8:	f107 030c 	add.w	r3, r7, #12
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f970 	bl	800a894 <SD_SendStatus>
 800a5b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	0a5b      	lsrs	r3, r3, #9
 800a5cc:	f003 030f 	and.w	r3, r3, #15
 800a5d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a5d2:	693b      	ldr	r3, [r7, #16]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a5dc:	b5b0      	push	{r4, r5, r7, lr}
 800a5de:	b094      	sub	sp, #80	@ 0x50
 800a5e0:	af04      	add	r7, sp, #16
 800a5e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f002 fb66 	bl	800ccbe <SDIO_GetPowerState>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a5fc:	e0b8      	b.n	800a770 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a602:	2b03      	cmp	r3, #3
 800a604:	d02f      	beq.n	800a666 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f002 fd4d 	bl	800d0aa <SDMMC_CmdSendCID>
 800a610:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <SD_InitCard+0x40>
    {
      return errorstate;
 800a618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61a:	e0a9      	b.n	800a770 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2100      	movs	r1, #0
 800a622:	4618      	mov	r0, r3
 800a624:	f002 fb90 	bl	800cd48 <SDIO_GetResponse>
 800a628:	4602      	mov	r2, r0
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2104      	movs	r1, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f002 fb87 	bl	800cd48 <SDIO_GetResponse>
 800a63a:	4602      	mov	r2, r0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2108      	movs	r1, #8
 800a646:	4618      	mov	r0, r3
 800a648:	f002 fb7e 	bl	800cd48 <SDIO_GetResponse>
 800a64c:	4602      	mov	r2, r0
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	210c      	movs	r1, #12
 800a658:	4618      	mov	r0, r3
 800a65a:	f002 fb75 	bl	800cd48 <SDIO_GetResponse>
 800a65e:	4602      	mov	r2, r0
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d00d      	beq.n	800a68a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f107 020e 	add.w	r2, r7, #14
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f002 fd53 	bl	800d124 <SDMMC_CmdSetRelAdd>
 800a67e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <SD_InitCard+0xae>
    {
      return errorstate;
 800a686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a688:	e072      	b.n	800a770 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d036      	beq.n	800a700 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a692:	89fb      	ldrh	r3, [r7, #14]
 800a694:	461a      	mov	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a2:	041b      	lsls	r3, r3, #16
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	f002 fd1d 	bl	800d0e6 <SDMMC_CmdSendCSD>
 800a6ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	e05b      	b.n	800a770 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f002 fb42 	bl	800cd48 <SDIO_GetResponse>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 fb39 	bl	800cd48 <SDIO_GetResponse>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2108      	movs	r1, #8
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 fb30 	bl	800cd48 <SDIO_GetResponse>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	210c      	movs	r1, #12
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f002 fb27 	bl	800cd48 <SDIO_GetResponse>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2104      	movs	r1, #4
 800a706:	4618      	mov	r0, r3
 800a708:	f002 fb1e 	bl	800cd48 <SDIO_GetResponse>
 800a70c:	4603      	mov	r3, r0
 800a70e:	0d1a      	lsrs	r2, r3, #20
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a714:	f107 0310 	add.w	r3, r7, #16
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f7ff fd6e 	bl	800a1fc <HAL_SD_GetCardCSD>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a726:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a72a:	e021      	b.n	800a770 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6819      	ldr	r1, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a734:	041b      	lsls	r3, r3, #16
 800a736:	2200      	movs	r2, #0
 800a738:	461c      	mov	r4, r3
 800a73a:	4615      	mov	r5, r2
 800a73c:	4622      	mov	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	4608      	mov	r0, r1
 800a742:	f002 fc0d 	bl	800cf60 <SDMMC_CmdSelDesel>
 800a746:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <SD_InitCard+0x176>
  {
    return errorstate;
 800a74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a750:	e00e      	b.n	800a770 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681d      	ldr	r5, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	466c      	mov	r4, sp
 800a75a:	f103 0210 	add.w	r2, r3, #16
 800a75e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a764:	3304      	adds	r3, #4
 800a766:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a768:	4628      	mov	r0, r5
 800a76a:	f002 fa51 	bl	800cc10 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3740      	adds	r7, #64	@ 0x40
 800a774:	46bd      	mov	sp, r7
 800a776:	bdb0      	pop	{r4, r5, r7, pc}

0800a778 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f002 fc08 	bl	800cfa6 <SDMMC_CmdGoIdleState>
 800a796:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	e072      	b.n	800a888 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f002 fc1b 	bl	800cfe2 <SDMMC_CmdOperCond>
 800a7ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00d      	beq.n	800a7d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f002 fbf1 	bl	800cfa6 <SDMMC_CmdGoIdleState>
 800a7c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	e05b      	b.n	800a888 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d137      	bne.n	800a84e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f002 fc1b 	bl	800d020 <SDMMC_CmdAppCommand>
 800a7ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d02d      	beq.n	800a84e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a7f6:	e047      	b.n	800a888 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f002 fc0e 	bl	800d020 <SDMMC_CmdAppCommand>
 800a804:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <SD_PowerON+0x98>
    {
      return errorstate;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	e03b      	b.n	800a888 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	491e      	ldr	r1, [pc, #120]	@ (800a890 <SD_PowerON+0x118>)
 800a816:	4618      	mov	r0, r3
 800a818:	f002 fc24 	bl	800d064 <SDMMC_CmdAppOperCommand>
 800a81c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a824:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a828:	e02e      	b.n	800a888 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f002 fa89 	bl	800cd48 <SDIO_GetResponse>
 800a836:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	0fdb      	lsrs	r3, r3, #31
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <SD_PowerON+0xcc>
 800a840:	2301      	movs	r3, #1
 800a842:	e000      	b.n	800a846 <SD_PowerON+0xce>
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]

    count++;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a854:	4293      	cmp	r3, r2
 800a856:	d802      	bhi.n	800a85e <SD_PowerON+0xe6>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0cc      	beq.n	800a7f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a864:	4293      	cmp	r3, r2
 800a866:	d902      	bls.n	800a86e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a86c:	e00c      	b.n	800a888 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d003      	beq.n	800a880 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	645a      	str	r2, [r3, #68]	@ 0x44
 800a87e:	e002      	b.n	800a886 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	c1100000 	.word	0xc1100000

0800a894 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a8a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a8a8:	e018      	b.n	800a8dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b2:	041b      	lsls	r3, r3, #16
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f002 fc55 	bl	800d166 <SDMMC_CmdSendStatus>
 800a8bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	e009      	b.n	800a8dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f002 fa3a 	bl	800cd48 <SDIO_GetResponse>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e041      	b.n	800a97a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f8 fe4c 	bl	80035a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f000 fd30 	bl	800b388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a99c:	4013      	ands	r3, r2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10f      	bne.n	800a9c2 <HAL_TIM_Base_DeInit+0x40>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6a1a      	ldr	r2, [r3, #32]
 800a9a8:	f240 4344 	movw	r3, #1092	@ 0x444
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <HAL_TIM_Base_DeInit+0x40>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0201 	bic.w	r2, r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f8 feb0 	bl	8003728 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d001      	beq.n	800aa44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e03c      	b.n	800aabe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1e      	ldr	r2, [pc, #120]	@ (800aacc <HAL_TIM_Base_Start+0xa0>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d018      	beq.n	800aa88 <HAL_TIM_Base_Start+0x5c>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa5e:	d013      	beq.n	800aa88 <HAL_TIM_Base_Start+0x5c>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a1a      	ldr	r2, [pc, #104]	@ (800aad0 <HAL_TIM_Base_Start+0xa4>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00e      	beq.n	800aa88 <HAL_TIM_Base_Start+0x5c>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a19      	ldr	r2, [pc, #100]	@ (800aad4 <HAL_TIM_Base_Start+0xa8>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d009      	beq.n	800aa88 <HAL_TIM_Base_Start+0x5c>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a17      	ldr	r2, [pc, #92]	@ (800aad8 <HAL_TIM_Base_Start+0xac>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d004      	beq.n	800aa88 <HAL_TIM_Base_Start+0x5c>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a16      	ldr	r2, [pc, #88]	@ (800aadc <HAL_TIM_Base_Start+0xb0>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d111      	bne.n	800aaac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b06      	cmp	r3, #6
 800aa98:	d010      	beq.n	800aabc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaaa:	e007      	b.n	800aabc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40000c00 	.word	0x40000c00
 800aadc:	40014000 	.word	0x40014000

0800aae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d001      	beq.n	800aaf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e044      	b.n	800ab82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0201 	orr.w	r2, r2, #1
 800ab0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a1e      	ldr	r2, [pc, #120]	@ (800ab90 <HAL_TIM_Base_Start_IT+0xb0>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d018      	beq.n	800ab4c <HAL_TIM_Base_Start_IT+0x6c>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab22:	d013      	beq.n	800ab4c <HAL_TIM_Base_Start_IT+0x6c>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a1a      	ldr	r2, [pc, #104]	@ (800ab94 <HAL_TIM_Base_Start_IT+0xb4>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d00e      	beq.n	800ab4c <HAL_TIM_Base_Start_IT+0x6c>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a19      	ldr	r2, [pc, #100]	@ (800ab98 <HAL_TIM_Base_Start_IT+0xb8>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d009      	beq.n	800ab4c <HAL_TIM_Base_Start_IT+0x6c>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a17      	ldr	r2, [pc, #92]	@ (800ab9c <HAL_TIM_Base_Start_IT+0xbc>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d004      	beq.n	800ab4c <HAL_TIM_Base_Start_IT+0x6c>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a16      	ldr	r2, [pc, #88]	@ (800aba0 <HAL_TIM_Base_Start_IT+0xc0>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d111      	bne.n	800ab70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b06      	cmp	r3, #6
 800ab5c:	d010      	beq.n	800ab80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0201 	orr.w	r2, r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab6e:	e007      	b.n	800ab80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	40010000 	.word	0x40010000
 800ab94:	40000400 	.word	0x40000400
 800ab98:	40000800 	.word	0x40000800
 800ab9c:	40000c00 	.word	0x40000c00
 800aba0:	40014000 	.word	0x40014000

0800aba4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0201 	bic.w	r2, r2, #1
 800abba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6a1a      	ldr	r2, [r3, #32]
 800abc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800abc6:	4013      	ands	r3, r2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10f      	bne.n	800abec <HAL_TIM_Base_Stop_IT+0x48>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6a1a      	ldr	r2, [r3, #32]
 800abd2:	f240 4344 	movw	r3, #1092	@ 0x444
 800abd6:	4013      	ands	r3, r2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d107      	bne.n	800abec <HAL_TIM_Base_Stop_IT+0x48>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0201 	bic.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e041      	b.n	800ac98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d106      	bne.n	800ac2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 f839 	bl	800aca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2202      	movs	r2, #2
 800ac32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	f000 fba1 	bl	800b388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d109      	bne.n	800acd8 <HAL_TIM_PWM_Start+0x24>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b01      	cmp	r3, #1
 800acce:	bf14      	ite	ne
 800acd0:	2301      	movne	r3, #1
 800acd2:	2300      	moveq	r3, #0
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	e022      	b.n	800ad1e <HAL_TIM_PWM_Start+0x6a>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b04      	cmp	r3, #4
 800acdc:	d109      	bne.n	800acf2 <HAL_TIM_PWM_Start+0x3e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	bf14      	ite	ne
 800acea:	2301      	movne	r3, #1
 800acec:	2300      	moveq	r3, #0
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	e015      	b.n	800ad1e <HAL_TIM_PWM_Start+0x6a>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b08      	cmp	r3, #8
 800acf6:	d109      	bne.n	800ad0c <HAL_TIM_PWM_Start+0x58>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	bf14      	ite	ne
 800ad04:	2301      	movne	r3, #1
 800ad06:	2300      	moveq	r3, #0
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	e008      	b.n	800ad1e <HAL_TIM_PWM_Start+0x6a>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	bf14      	ite	ne
 800ad18:	2301      	movne	r3, #1
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e068      	b.n	800adf8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d104      	bne.n	800ad36 <HAL_TIM_PWM_Start+0x82>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad34:	e013      	b.n	800ad5e <HAL_TIM_PWM_Start+0xaa>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d104      	bne.n	800ad46 <HAL_TIM_PWM_Start+0x92>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad44:	e00b      	b.n	800ad5e <HAL_TIM_PWM_Start+0xaa>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d104      	bne.n	800ad56 <HAL_TIM_PWM_Start+0xa2>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad54:	e003      	b.n	800ad5e <HAL_TIM_PWM_Start+0xaa>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2201      	movs	r2, #1
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fdb4 	bl	800b8d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a23      	ldr	r2, [pc, #140]	@ (800ae00 <HAL_TIM_PWM_Start+0x14c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d107      	bne.n	800ad86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a1d      	ldr	r2, [pc, #116]	@ (800ae00 <HAL_TIM_PWM_Start+0x14c>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d018      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x10e>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad98:	d013      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x10e>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a19      	ldr	r2, [pc, #100]	@ (800ae04 <HAL_TIM_PWM_Start+0x150>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00e      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x10e>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a17      	ldr	r2, [pc, #92]	@ (800ae08 <HAL_TIM_PWM_Start+0x154>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d009      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x10e>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a16      	ldr	r2, [pc, #88]	@ (800ae0c <HAL_TIM_PWM_Start+0x158>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d004      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x10e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a14      	ldr	r2, [pc, #80]	@ (800ae10 <HAL_TIM_PWM_Start+0x15c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d111      	bne.n	800ade6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b06      	cmp	r3, #6
 800add2:	d010      	beq.n	800adf6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0201 	orr.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade4:	e007      	b.n	800adf6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0201 	orr.w	r2, r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	40010000 	.word	0x40010000
 800ae04:	40000400 	.word	0x40000400
 800ae08:	40000800 	.word	0x40000800
 800ae0c:	40000c00 	.word	0x40000c00
 800ae10:	40014000 	.word	0x40014000

0800ae14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	f003 0302 	and.w	r3, r3, #2
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d122      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d11b      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f06f 0202 	mvn.w	r2, #2
 800ae40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	f003 0303 	and.w	r3, r3, #3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fa77 	bl	800b34a <HAL_TIM_IC_CaptureCallback>
 800ae5c:	e005      	b.n	800ae6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fa69 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fa7a 	bl	800b35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	f003 0304 	and.w	r3, r3, #4
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d122      	bne.n	800aec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d11b      	bne.n	800aec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f06f 0204 	mvn.w	r2, #4
 800ae94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fa4d 	bl	800b34a <HAL_TIM_IC_CaptureCallback>
 800aeb0:	e005      	b.n	800aebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa3f 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fa50 	bl	800b35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	f003 0308 	and.w	r3, r3, #8
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d122      	bne.n	800af18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f003 0308 	and.w	r3, r3, #8
 800aedc:	2b08      	cmp	r3, #8
 800aede:	d11b      	bne.n	800af18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f06f 0208 	mvn.w	r2, #8
 800aee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2204      	movs	r2, #4
 800aeee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	f003 0303 	and.w	r3, r3, #3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fa23 	bl	800b34a <HAL_TIM_IC_CaptureCallback>
 800af04:	e005      	b.n	800af12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa15 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fa26 	bl	800b35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	f003 0310 	and.w	r3, r3, #16
 800af22:	2b10      	cmp	r3, #16
 800af24:	d122      	bne.n	800af6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	f003 0310 	and.w	r3, r3, #16
 800af30:	2b10      	cmp	r3, #16
 800af32:	d11b      	bne.n	800af6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f06f 0210 	mvn.w	r2, #16
 800af3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2208      	movs	r2, #8
 800af42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f9f9 	bl	800b34a <HAL_TIM_IC_CaptureCallback>
 800af58:	e005      	b.n	800af66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f9eb 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f9fc 	bl	800b35e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b01      	cmp	r3, #1
 800af78:	d10e      	bne.n	800af98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b01      	cmp	r3, #1
 800af86:	d107      	bne.n	800af98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f06f 0201 	mvn.w	r2, #1
 800af90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7f8 f8f6 	bl	8003184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afa2:	2b80      	cmp	r3, #128	@ 0x80
 800afa4:	d10e      	bne.n	800afc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb0:	2b80      	cmp	r3, #128	@ 0x80
 800afb2:	d107      	bne.n	800afc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800afbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fd26 	bl	800ba10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afce:	2b40      	cmp	r3, #64	@ 0x40
 800afd0:	d10e      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afdc:	2b40      	cmp	r3, #64	@ 0x40
 800afde:	d107      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800afe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f9c1 	bl	800b372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b20      	cmp	r3, #32
 800affc:	d10e      	bne.n	800b01c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f003 0320 	and.w	r3, r3, #32
 800b008:	2b20      	cmp	r3, #32
 800b00a:	d107      	bne.n	800b01c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0220 	mvn.w	r2, #32
 800b014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fcf0 	bl	800b9fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d101      	bne.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b03e:	2302      	movs	r3, #2
 800b040:	e0ae      	b.n	800b1a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b0c      	cmp	r3, #12
 800b04e:	f200 809f 	bhi.w	800b190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b052:	a201      	add	r2, pc, #4	@ (adr r2, 800b058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b058:	0800b08d 	.word	0x0800b08d
 800b05c:	0800b191 	.word	0x0800b191
 800b060:	0800b191 	.word	0x0800b191
 800b064:	0800b191 	.word	0x0800b191
 800b068:	0800b0cd 	.word	0x0800b0cd
 800b06c:	0800b191 	.word	0x0800b191
 800b070:	0800b191 	.word	0x0800b191
 800b074:	0800b191 	.word	0x0800b191
 800b078:	0800b10f 	.word	0x0800b10f
 800b07c:	0800b191 	.word	0x0800b191
 800b080:	0800b191 	.word	0x0800b191
 800b084:	0800b191 	.word	0x0800b191
 800b088:	0800b14f 	.word	0x0800b14f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	4618      	mov	r0, r3
 800b094:	f000 f9f8 	bl	800b488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0208 	orr.w	r2, r2, #8
 800b0a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0204 	bic.w	r2, r2, #4
 800b0b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6999      	ldr	r1, [r3, #24]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	691a      	ldr	r2, [r3, #16]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	619a      	str	r2, [r3, #24]
      break;
 800b0ca:	e064      	b.n	800b196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fa3e 	bl	800b554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6999      	ldr	r1, [r3, #24]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	021a      	lsls	r2, r3, #8
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	619a      	str	r2, [r3, #24]
      break;
 800b10c:	e043      	b.n	800b196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fa89 	bl	800b62c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f042 0208 	orr.w	r2, r2, #8
 800b128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69da      	ldr	r2, [r3, #28]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0204 	bic.w	r2, r2, #4
 800b138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69d9      	ldr	r1, [r3, #28]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	61da      	str	r2, [r3, #28]
      break;
 800b14c:	e023      	b.n	800b196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68b9      	ldr	r1, [r7, #8]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fad3 	bl	800b700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69da      	ldr	r2, [r3, #28]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69d9      	ldr	r1, [r3, #28]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	021a      	lsls	r2, r3, #8
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	61da      	str	r2, [r3, #28]
      break;
 800b18e:	e002      	b.n	800b196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	75fb      	strb	r3, [r7, #23]
      break;
 800b194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3718      	adds	r7, #24
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <HAL_TIM_ConfigClockSource+0x1c>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e0b4      	b.n	800b32e <HAL_TIM_ConfigClockSource+0x186>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1fc:	d03e      	beq.n	800b27c <HAL_TIM_ConfigClockSource+0xd4>
 800b1fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b202:	f200 8087 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b20a:	f000 8086 	beq.w	800b31a <HAL_TIM_ConfigClockSource+0x172>
 800b20e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b212:	d87f      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b214:	2b70      	cmp	r3, #112	@ 0x70
 800b216:	d01a      	beq.n	800b24e <HAL_TIM_ConfigClockSource+0xa6>
 800b218:	2b70      	cmp	r3, #112	@ 0x70
 800b21a:	d87b      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b21c:	2b60      	cmp	r3, #96	@ 0x60
 800b21e:	d050      	beq.n	800b2c2 <HAL_TIM_ConfigClockSource+0x11a>
 800b220:	2b60      	cmp	r3, #96	@ 0x60
 800b222:	d877      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b224:	2b50      	cmp	r3, #80	@ 0x50
 800b226:	d03c      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0xfa>
 800b228:	2b50      	cmp	r3, #80	@ 0x50
 800b22a:	d873      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b22c:	2b40      	cmp	r3, #64	@ 0x40
 800b22e:	d058      	beq.n	800b2e2 <HAL_TIM_ConfigClockSource+0x13a>
 800b230:	2b40      	cmp	r3, #64	@ 0x40
 800b232:	d86f      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b234:	2b30      	cmp	r3, #48	@ 0x30
 800b236:	d064      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b238:	2b30      	cmp	r3, #48	@ 0x30
 800b23a:	d86b      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b23c:	2b20      	cmp	r3, #32
 800b23e:	d060      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b240:	2b20      	cmp	r3, #32
 800b242:	d867      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d05c      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b248:	2b10      	cmp	r3, #16
 800b24a:	d05a      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b24c:	e062      	b.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	6899      	ldr	r1, [r3, #8]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f000 fb19 	bl	800b894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	609a      	str	r2, [r3, #8]
      break;
 800b27a:	e04f      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6818      	ldr	r0, [r3, #0]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	6899      	ldr	r1, [r3, #8]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f000 fb02 	bl	800b894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b29e:	609a      	str	r2, [r3, #8]
      break;
 800b2a0:	e03c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	6859      	ldr	r1, [r3, #4]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f000 fa76 	bl	800b7a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2150      	movs	r1, #80	@ 0x50
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 facf 	bl	800b85e <TIM_ITRx_SetConfig>
      break;
 800b2c0:	e02c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6859      	ldr	r1, [r3, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f000 fa95 	bl	800b7fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2160      	movs	r1, #96	@ 0x60
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fabf 	bl	800b85e <TIM_ITRx_SetConfig>
      break;
 800b2e0:	e01c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6859      	ldr	r1, [r3, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f000 fa56 	bl	800b7a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2140      	movs	r1, #64	@ 0x40
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 faaf 	bl	800b85e <TIM_ITRx_SetConfig>
      break;
 800b300:	e00c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f000 faa6 	bl	800b85e <TIM_ITRx_SetConfig>
      break;
 800b312:	e003      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	73fb      	strb	r3, [r7, #15]
      break;
 800b318:	e000      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b31a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b083      	sub	sp, #12
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a34      	ldr	r2, [pc, #208]	@ (800b46c <TIM_Base_SetConfig+0xe4>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00f      	beq.n	800b3c0 <TIM_Base_SetConfig+0x38>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3a6:	d00b      	beq.n	800b3c0 <TIM_Base_SetConfig+0x38>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a31      	ldr	r2, [pc, #196]	@ (800b470 <TIM_Base_SetConfig+0xe8>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d007      	beq.n	800b3c0 <TIM_Base_SetConfig+0x38>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a30      	ldr	r2, [pc, #192]	@ (800b474 <TIM_Base_SetConfig+0xec>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d003      	beq.n	800b3c0 <TIM_Base_SetConfig+0x38>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a2f      	ldr	r2, [pc, #188]	@ (800b478 <TIM_Base_SetConfig+0xf0>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d108      	bne.n	800b3d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a25      	ldr	r2, [pc, #148]	@ (800b46c <TIM_Base_SetConfig+0xe4>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d01b      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3e0:	d017      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a22      	ldr	r2, [pc, #136]	@ (800b470 <TIM_Base_SetConfig+0xe8>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d013      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a21      	ldr	r2, [pc, #132]	@ (800b474 <TIM_Base_SetConfig+0xec>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d00f      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a20      	ldr	r2, [pc, #128]	@ (800b478 <TIM_Base_SetConfig+0xf0>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d00b      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a1f      	ldr	r2, [pc, #124]	@ (800b47c <TIM_Base_SetConfig+0xf4>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d007      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a1e      	ldr	r2, [pc, #120]	@ (800b480 <TIM_Base_SetConfig+0xf8>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d003      	beq.n	800b412 <TIM_Base_SetConfig+0x8a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a1d      	ldr	r2, [pc, #116]	@ (800b484 <TIM_Base_SetConfig+0xfc>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d108      	bne.n	800b424 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a08      	ldr	r2, [pc, #32]	@ (800b46c <TIM_Base_SetConfig+0xe4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d103      	bne.n	800b458 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	691a      	ldr	r2, [r3, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	615a      	str	r2, [r3, #20]
}
 800b45e:	bf00      	nop
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	40010000 	.word	0x40010000
 800b470:	40000400 	.word	0x40000400
 800b474:	40000800 	.word	0x40000800
 800b478:	40000c00 	.word	0x40000c00
 800b47c:	40014000 	.word	0x40014000
 800b480:	40014400 	.word	0x40014400
 800b484:	40014800 	.word	0x40014800

0800b488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b488:	b480      	push	{r7}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	f023 0201 	bic.w	r2, r3, #1
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f023 0302 	bic.w	r3, r3, #2
 800b4d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a1c      	ldr	r2, [pc, #112]	@ (800b550 <TIM_OC1_SetConfig+0xc8>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d10c      	bne.n	800b4fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f023 0308 	bic.w	r3, r3, #8
 800b4ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f023 0304 	bic.w	r3, r3, #4
 800b4fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a13      	ldr	r2, [pc, #76]	@ (800b550 <TIM_OC1_SetConfig+0xc8>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d111      	bne.n	800b52a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b50c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	685a      	ldr	r2, [r3, #4]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	621a      	str	r2, [r3, #32]
}
 800b544:	bf00      	nop
 800b546:	371c      	adds	r7, #28
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	40010000 	.word	0x40010000

0800b554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	f023 0210 	bic.w	r2, r3, #16
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	021b      	lsls	r3, r3, #8
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	4313      	orrs	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f023 0320 	bic.w	r3, r3, #32
 800b59e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	011b      	lsls	r3, r3, #4
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b628 <TIM_OC2_SetConfig+0xd4>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d10d      	bne.n	800b5d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a15      	ldr	r2, [pc, #84]	@ (800b628 <TIM_OC2_SetConfig+0xd4>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d113      	bne.n	800b600 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	621a      	str	r2, [r3, #32]
}
 800b61a:	bf00      	nop
 800b61c:	371c      	adds	r7, #28
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	40010000 	.word	0x40010000

0800b62c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b087      	sub	sp, #28
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	4313      	orrs	r3, r2
 800b680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a1d      	ldr	r2, [pc, #116]	@ (800b6fc <TIM_OC3_SetConfig+0xd0>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d10d      	bne.n	800b6a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a14      	ldr	r2, [pc, #80]	@ (800b6fc <TIM_OC3_SetConfig+0xd0>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d113      	bne.n	800b6d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	621a      	str	r2, [r3, #32]
}
 800b6f0:	bf00      	nop
 800b6f2:	371c      	adds	r7, #28
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	40010000 	.word	0x40010000

0800b700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	4313      	orrs	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b74a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	031b      	lsls	r3, r3, #12
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	4313      	orrs	r3, r2
 800b756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a10      	ldr	r2, [pc, #64]	@ (800b79c <TIM_OC4_SetConfig+0x9c>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d109      	bne.n	800b774 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	019b      	lsls	r3, r3, #6
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	621a      	str	r2, [r3, #32]
}
 800b78e:	bf00      	nop
 800b790:	371c      	adds	r7, #28
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	40010000 	.word	0x40010000

0800b7a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b087      	sub	sp, #28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	f023 0201 	bic.w	r2, r3, #1
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	011b      	lsls	r3, r3, #4
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f023 030a 	bic.w	r3, r3, #10
 800b7dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	621a      	str	r2, [r3, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b087      	sub	sp, #28
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	f023 0210 	bic.w	r2, r3, #16
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	031b      	lsls	r3, r3, #12
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b83a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4313      	orrs	r3, r2
 800b844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	621a      	str	r2, [r3, #32]
}
 800b852:	bf00      	nop
 800b854:	371c      	adds	r7, #28
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b85e:	b480      	push	{r7}
 800b860:	b085      	sub	sp, #20
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	f043 0307 	orr.w	r3, r3, #7
 800b880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	609a      	str	r2, [r3, #8]
}
 800b888:	bf00      	nop
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	021a      	lsls	r2, r3, #8
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	609a      	str	r2, [r3, #8]
}
 800b8c8:	bf00      	nop
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f003 031f 	and.w	r3, r3, #31
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6a1a      	ldr	r2, [r3, #32]
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	43db      	mvns	r3, r3
 800b8f6:	401a      	ands	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6a1a      	ldr	r2, [r3, #32]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f003 031f 	and.w	r3, r3, #31
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	fa01 f303 	lsl.w	r3, r1, r3
 800b90c:	431a      	orrs	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	621a      	str	r2, [r3, #32]
}
 800b912:	bf00      	nop
 800b914:	371c      	adds	r7, #28
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
	...

0800b920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b930:	2b01      	cmp	r3, #1
 800b932:	d101      	bne.n	800b938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b934:	2302      	movs	r3, #2
 800b936:	e050      	b.n	800b9da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2202      	movs	r2, #2
 800b944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b95e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	4313      	orrs	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a1c      	ldr	r2, [pc, #112]	@ (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d018      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b984:	d013      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a18      	ldr	r2, [pc, #96]	@ (800b9ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d00e      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a16      	ldr	r2, [pc, #88]	@ (800b9f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d009      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a15      	ldr	r2, [pc, #84]	@ (800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d004      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a13      	ldr	r2, [pc, #76]	@ (800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d10c      	bne.n	800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3714      	adds	r7, #20
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	40010000 	.word	0x40010000
 800b9ec:	40000400 	.word	0x40000400
 800b9f0:	40000800 	.word	0x40000800
 800b9f4:	40000c00 	.word	0x40000c00
 800b9f8:	40014000 	.word	0x40014000

0800b9fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e03f      	b.n	800bab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7f7 fea6 	bl	800379c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2224      	movs	r2, #36	@ 0x24
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ba66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fe5d 	bl	800c728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	695a      	ldr	r2, [r3, #20]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68da      	ldr	r2, [r3, #12]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ba9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2220      	movs	r2, #32
 800bab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e021      	b.n	800bb14 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2224      	movs	r2, #36	@ 0x24
 800bad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bae6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7f7 fee5 	bl	80038b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08a      	sub	sp, #40	@ 0x28
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	603b      	str	r3, [r7, #0]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b20      	cmp	r3, #32
 800bb3a:	d17c      	bne.n	800bc36 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d002      	beq.n	800bb48 <HAL_UART_Transmit+0x2c>
 800bb42:	88fb      	ldrh	r3, [r7, #6]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e075      	b.n	800bc38 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <HAL_UART_Transmit+0x3e>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e06e      	b.n	800bc38 <HAL_UART_Transmit+0x11c>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2221      	movs	r2, #33	@ 0x21
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb70:	f7f8 f8ca 	bl	8003d08 <HAL_GetTick>
 800bb74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	88fa      	ldrh	r2, [r7, #6]
 800bb7a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	88fa      	ldrh	r2, [r7, #6]
 800bb80:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb8a:	d108      	bne.n	800bb9e <HAL_UART_Transmit+0x82>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d104      	bne.n	800bb9e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	61bb      	str	r3, [r7, #24]
 800bb9c:	e003      	b.n	800bba6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800bbae:	e02a      	b.n	800bc06 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2180      	movs	r1, #128	@ 0x80
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 fb6e 	bl	800c29c <UART_WaitOnFlagUntilTimeout>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e036      	b.n	800bc38 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10b      	bne.n	800bbe8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	3302      	adds	r3, #2
 800bbe4:	61bb      	str	r3, [r7, #24]
 800bbe6:	e007      	b.n	800bbf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	781a      	ldrb	r2, [r3, #0]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1cf      	bne.n	800bbb0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2200      	movs	r2, #0
 800bc18:	2140      	movs	r1, #64	@ 0x40
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 fb3e 	bl	800c29c <UART_WaitOnFlagUntilTimeout>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e006      	b.n	800bc38 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e000      	b.n	800bc38 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bc36:	2302      	movs	r3, #2
  }
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3720      	adds	r7, #32
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d11d      	bne.n	800bc96 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <HAL_UART_Receive_IT+0x26>
 800bc60:	88fb      	ldrh	r3, [r7, #6]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e016      	b.n	800bc98 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_UART_Receive_IT+0x38>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e00f      	b.n	800bc98 <HAL_UART_Receive_IT+0x58>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bc86:	88fb      	ldrh	r3, [r7, #6]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 fb73 	bl	800c378 <UART_Start_Receive_IT>
 800bc92:	4603      	mov	r3, r0
 800bc94:	e000      	b.n	800bc98 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bc96:	2302      	movs	r3, #2
  }
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08c      	sub	sp, #48	@ 0x30
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d152      	bne.n	800bd60 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800bcc0:	88fb      	ldrh	r3, [r7, #6]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e04b      	b.n	800bd62 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d101      	bne.n	800bcd8 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e044      	b.n	800bd62 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800bce6:	88fb      	ldrh	r3, [r7, #6]
 800bce8:	461a      	mov	r2, r3
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 fb43 	bl	800c378 <UART_Start_Receive_IT>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bcf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d12c      	bne.n	800bd5a <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d125      	bne.n	800bd54 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd08:	2300      	movs	r3, #0
 800bd0a:	613b      	str	r3, [r7, #16]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	330c      	adds	r3, #12
 800bd24:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	e853 3f00 	ldrex	r3, [r3]
 800bd2c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f043 0310 	orr.w	r3, r3, #16
 800bd34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	330c      	adds	r3, #12
 800bd3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd40:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd42:	6a39      	ldr	r1, [r7, #32]
 800bd44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd46:	e841 2300 	strex	r3, r2, [r1]
 800bd4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1e5      	bne.n	800bd1e <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800bd52:	e002      	b.n	800bd5a <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bd5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd5e:	e000      	b.n	800bd62 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800bd60:	2302      	movs	r3, #2
  }
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3730      	adds	r7, #48	@ 0x30
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b0ba      	sub	sp, #232	@ 0xe8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bdaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10f      	bne.n	800bdd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bdb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d009      	beq.n	800bdd2 <HAL_UART_IRQHandler+0x66>
 800bdbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fbf1 	bl	800c5b2 <UART_Receive_IT>
      return;
 800bdd0:	e256      	b.n	800c280 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bdd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 80de 	beq.w	800bf98 <HAL_UART_IRQHandler+0x22c>
 800bddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d106      	bne.n	800bdf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bde8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 80d1 	beq.w	800bf98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bdf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00b      	beq.n	800be1a <HAL_UART_IRQHandler+0xae>
 800be02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d005      	beq.n	800be1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be12:	f043 0201 	orr.w	r2, r3, #1
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be1e:	f003 0304 	and.w	r3, r3, #4
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00b      	beq.n	800be3e <HAL_UART_IRQHandler+0xd2>
 800be26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d005      	beq.n	800be3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be36:	f043 0202 	orr.w	r2, r3, #2
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be42:	f003 0302 	and.w	r3, r3, #2
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00b      	beq.n	800be62 <HAL_UART_IRQHandler+0xf6>
 800be4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d005      	beq.n	800be62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5a:	f043 0204 	orr.w	r2, r3, #4
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be66:	f003 0308 	and.w	r3, r3, #8
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d011      	beq.n	800be92 <HAL_UART_IRQHandler+0x126>
 800be6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	2b00      	cmp	r3, #0
 800be84:	d005      	beq.n	800be92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be8a:	f043 0208 	orr.w	r2, r3, #8
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 81ed 	beq.w	800c276 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea0:	f003 0320 	and.w	r3, r3, #32
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d008      	beq.n	800beba <HAL_UART_IRQHandler+0x14e>
 800bea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beac:	f003 0320 	and.w	r3, r3, #32
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fb7c 	bl	800c5b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bec4:	2b40      	cmp	r3, #64	@ 0x40
 800bec6:	bf0c      	ite	eq
 800bec8:	2301      	moveq	r3, #1
 800beca:	2300      	movne	r3, #0
 800becc:	b2db      	uxtb	r3, r3
 800bece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bed6:	f003 0308 	and.w	r3, r3, #8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d103      	bne.n	800bee6 <HAL_UART_IRQHandler+0x17a>
 800bede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d04f      	beq.n	800bf86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fa84 	bl	800c3f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bef6:	2b40      	cmp	r3, #64	@ 0x40
 800bef8:	d141      	bne.n	800bf7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3314      	adds	r3, #20
 800bf00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf08:	e853 3f00 	ldrex	r3, [r3]
 800bf0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bf10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3314      	adds	r3, #20
 800bf22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bf26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bf2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bf32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bf36:	e841 2300 	strex	r3, r2, [r1]
 800bf3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bf3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1d9      	bne.n	800befa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d013      	beq.n	800bf76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf52:	4a7d      	ldr	r2, [pc, #500]	@ (800c148 <HAL_UART_IRQHandler+0x3dc>)
 800bf54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f8 feb7 	bl	8004cce <HAL_DMA_Abort_IT>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d016      	beq.n	800bf94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf74:	e00e      	b.n	800bf94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7f7 f958 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf7c:	e00a      	b.n	800bf94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7f7 f954 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf84:	e006      	b.n	800bf94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7f7 f950 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800bf92:	e170      	b.n	800c276 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf94:	bf00      	nop
    return;
 800bf96:	e16e      	b.n	800c276 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	f040 814a 	bne.w	800c236 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa6:	f003 0310 	and.w	r3, r3, #16
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 8143 	beq.w	800c236 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfb4:	f003 0310 	and.w	r3, r3, #16
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 813c 	beq.w	800c236 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60bb      	str	r3, [r7, #8]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	60bb      	str	r3, [r7, #8]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	60bb      	str	r3, [r7, #8]
 800bfd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfde:	2b40      	cmp	r3, #64	@ 0x40
 800bfe0:	f040 80b4 	bne.w	800c14c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 8140 	beq.w	800c27a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c002:	429a      	cmp	r2, r3
 800c004:	f080 8139 	bcs.w	800c27a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c00e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c014:	69db      	ldr	r3, [r3, #28]
 800c016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c01a:	f000 8088 	beq.w	800c12e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	330c      	adds	r3, #12
 800c024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c034:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c03c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	330c      	adds	r3, #12
 800c046:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c04a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c04e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c052:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c056:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c05a:	e841 2300 	strex	r3, r2, [r1]
 800c05e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1d9      	bne.n	800c01e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3314      	adds	r3, #20
 800c070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c07a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c07c:	f023 0301 	bic.w	r3, r3, #1
 800c080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3314      	adds	r3, #20
 800c08a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c08e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c092:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c0a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e1      	bne.n	800c06a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3314      	adds	r3, #20
 800c0ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c0b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	3314      	adds	r3, #20
 800c0c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c0ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c0cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c0d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0d2:	e841 2300 	strex	r3, r2, [r1]
 800c0d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c0d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1e3      	bne.n	800c0a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0fe:	f023 0310 	bic.w	r3, r3, #16
 800c102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	330c      	adds	r3, #12
 800c10c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c110:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c112:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c118:	e841 2300 	strex	r3, r2, [r1]
 800c11c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e3      	bne.n	800c0ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c128:	4618      	mov	r0, r3
 800c12a:	f7f8 fd60 	bl	8004bee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c136:	b29b      	uxth	r3, r3
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f007 fe96 	bl	8013e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c144:	e099      	b.n	800c27a <HAL_UART_IRQHandler+0x50e>
 800c146:	bf00      	nop
 800c148:	0800c4bb 	.word	0x0800c4bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c154:	b29b      	uxth	r3, r3
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c160:	b29b      	uxth	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 808b 	beq.w	800c27e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 8086 	beq.w	800c27e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	330c      	adds	r3, #12
 800c178:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17c:	e853 3f00 	ldrex	r3, [r3]
 800c180:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	330c      	adds	r3, #12
 800c192:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c196:	647a      	str	r2, [r7, #68]	@ 0x44
 800c198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c19c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c19e:	e841 2300 	strex	r3, r2, [r1]
 800c1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1e3      	bne.n	800c172 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	3314      	adds	r3, #20
 800c1b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	f023 0301 	bic.w	r3, r3, #1
 800c1c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3314      	adds	r3, #20
 800c1ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c1ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d6:	e841 2300 	strex	r3, r2, [r1]
 800c1da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e3      	bne.n	800c1aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	330c      	adds	r3, #12
 800c1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f023 0310 	bic.w	r3, r3, #16
 800c206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	330c      	adds	r3, #12
 800c210:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c214:	61fa      	str	r2, [r7, #28]
 800c216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	69b9      	ldr	r1, [r7, #24]
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	617b      	str	r3, [r7, #20]
   return(result);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e3      	bne.n	800c1f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f007 fe1e 	bl	8013e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c234:	e023      	b.n	800c27e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c23a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d009      	beq.n	800c256 <HAL_UART_IRQHandler+0x4ea>
 800c242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f947 	bl	800c4e2 <UART_Transmit_IT>
    return;
 800c254:	e014      	b.n	800c280 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c25a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00e      	beq.n	800c280 <HAL_UART_IRQHandler+0x514>
 800c262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d008      	beq.n	800c280 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f987 	bl	800c582 <UART_EndTransmit_IT>
    return;
 800c274:	e004      	b.n	800c280 <HAL_UART_IRQHandler+0x514>
    return;
 800c276:	bf00      	nop
 800c278:	e002      	b.n	800c280 <HAL_UART_IRQHandler+0x514>
      return;
 800c27a:	bf00      	nop
 800c27c:	e000      	b.n	800c280 <HAL_UART_IRQHandler+0x514>
      return;
 800c27e:	bf00      	nop
  }
}
 800c280:	37e8      	adds	r7, #232	@ 0xe8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop

0800c288 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b090      	sub	sp, #64	@ 0x40
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2ac:	e050      	b.n	800c350 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b4:	d04c      	beq.n	800c350 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c2b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d007      	beq.n	800c2cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c2bc:	f7f7 fd24 	bl	8003d08 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d241      	bcs.n	800c350 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	330c      	adds	r3, #12
 800c2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2de:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c2ec:	637a      	str	r2, [r7, #52]	@ 0x34
 800c2ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c2f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e5      	bne.n	800c2cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3314      	adds	r3, #20
 800c306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	e853 3f00 	ldrex	r3, [r3]
 800c30e:	613b      	str	r3, [r7, #16]
   return(result);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f023 0301 	bic.w	r3, r3, #1
 800c316:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3314      	adds	r3, #20
 800c31e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c320:	623a      	str	r2, [r7, #32]
 800c322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c324:	69f9      	ldr	r1, [r7, #28]
 800c326:	6a3a      	ldr	r2, [r7, #32]
 800c328:	e841 2300 	strex	r3, r2, [r1]
 800c32c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1e5      	bne.n	800c300 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2220      	movs	r2, #32
 800c338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2220      	movs	r2, #32
 800c340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e00f      	b.n	800c370 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	4013      	ands	r3, r2
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	bf0c      	ite	eq
 800c360:	2301      	moveq	r3, #1
 800c362:	2300      	movne	r3, #0
 800c364:	b2db      	uxtb	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d09f      	beq.n	800c2ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3740      	adds	r7, #64	@ 0x40
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	4613      	mov	r3, r2
 800c384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	88fa      	ldrh	r2, [r7, #6]
 800c390:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2222      	movs	r2, #34	@ 0x22
 800c3a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d007      	beq.n	800c3c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68da      	ldr	r2, [r3, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	695a      	ldr	r2, [r3, #20]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0201 	orr.w	r2, r2, #1
 800c3d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68da      	ldr	r2, [r3, #12]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f042 0220 	orr.w	r2, r2, #32
 800c3e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b095      	sub	sp, #84	@ 0x54
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	330c      	adds	r3, #12
 800c402:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c406:	e853 3f00 	ldrex	r3, [r3]
 800c40a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	330c      	adds	r3, #12
 800c41a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c41c:	643a      	str	r2, [r7, #64]	@ 0x40
 800c41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c424:	e841 2300 	strex	r3, r2, [r1]
 800c428:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1e5      	bne.n	800c3fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3314      	adds	r3, #20
 800c436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	e853 3f00 	ldrex	r3, [r3]
 800c43e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	f023 0301 	bic.w	r3, r3, #1
 800c446:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3314      	adds	r3, #20
 800c44e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c458:	e841 2300 	strex	r3, r2, [r1]
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1e5      	bne.n	800c430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d119      	bne.n	800c4a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	330c      	adds	r3, #12
 800c472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	e853 3f00 	ldrex	r3, [r3]
 800c47a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f023 0310 	bic.w	r3, r3, #16
 800c482:	647b      	str	r3, [r7, #68]	@ 0x44
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	330c      	adds	r3, #12
 800c48a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c48c:	61ba      	str	r2, [r7, #24]
 800c48e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	6979      	ldr	r1, [r7, #20]
 800c492:	69ba      	ldr	r2, [r7, #24]
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	613b      	str	r3, [r7, #16]
   return(result);
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e5      	bne.n	800c46c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2220      	movs	r2, #32
 800c4a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c4ae:	bf00      	nop
 800c4b0:	3754      	adds	r7, #84	@ 0x54
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f7f6 fea9 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4da:	bf00      	nop
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b085      	sub	sp, #20
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b21      	cmp	r3, #33	@ 0x21
 800c4f4:	d13e      	bne.n	800c574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4fe:	d114      	bne.n	800c52a <UART_Transmit_IT+0x48>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d110      	bne.n	800c52a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a1b      	ldr	r3, [r3, #32]
 800c50c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	881b      	ldrh	r3, [r3, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c51c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	1c9a      	adds	r2, r3, #2
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	621a      	str	r2, [r3, #32]
 800c528:	e008      	b.n	800c53c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	1c59      	adds	r1, r3, #1
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	6211      	str	r1, [r2, #32]
 800c534:	781a      	ldrb	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c540:	b29b      	uxth	r3, r3
 800c542:	3b01      	subs	r3, #1
 800c544:	b29b      	uxth	r3, r3
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	4619      	mov	r1, r3
 800c54a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10f      	bne.n	800c570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c55e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c56e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	e000      	b.n	800c576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c574:	2302      	movs	r3, #2
  }
}
 800c576:	4618      	mov	r0, r3
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2220      	movs	r2, #32
 800c59e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fe70 	bl	800c288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b08c      	sub	sp, #48	@ 0x30
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b22      	cmp	r3, #34	@ 0x22
 800c5c4:	f040 80ab 	bne.w	800c71e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5d0:	d117      	bne.n	800c602 <UART_Receive_IT+0x50>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d113      	bne.n	800c602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fa:	1c9a      	adds	r2, r3, #2
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	629a      	str	r2, [r3, #40]	@ 0x28
 800c600:	e026      	b.n	800c650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c606:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c614:	d007      	beq.n	800c626 <UART_Receive_IT+0x74>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10a      	bne.n	800c634 <UART_Receive_IT+0x82>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	701a      	strb	r2, [r3, #0]
 800c632:	e008      	b.n	800c646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c640:	b2da      	uxtb	r2, r3
 800c642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c654:	b29b      	uxth	r3, r3
 800c656:	3b01      	subs	r3, #1
 800c658:	b29b      	uxth	r3, r3
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	4619      	mov	r1, r3
 800c65e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c660:	2b00      	cmp	r3, #0
 800c662:	d15a      	bne.n	800c71a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0220 	bic.w	r2, r2, #32
 800c672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68da      	ldr	r2, [r3, #12]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695a      	ldr	r2, [r3, #20]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f022 0201 	bic.w	r2, r2, #1
 800c692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d135      	bne.n	800c710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	330c      	adds	r3, #12
 800c6b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f023 0310 	bic.w	r3, r3, #16
 800c6c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	330c      	adds	r3, #12
 800c6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ca:	623a      	str	r2, [r7, #32]
 800c6cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	69f9      	ldr	r1, [r7, #28]
 800c6d0:	6a3a      	ldr	r2, [r7, #32]
 800c6d2:	e841 2300 	strex	r3, r2, [r1]
 800c6d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1e5      	bne.n	800c6aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f003 0310 	and.w	r3, r3, #16
 800c6e8:	2b10      	cmp	r3, #16
 800c6ea:	d10a      	bne.n	800c702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f007 fbb1 	bl	8013e70 <HAL_UARTEx_RxEventCallback>
 800c70e:	e002      	b.n	800c716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f002 fc4d 	bl	800efb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	e002      	b.n	800c720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	e000      	b.n	800c720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c71e:	2302      	movs	r3, #2
  }
}
 800c720:	4618      	mov	r0, r3
 800c722:	3730      	adds	r7, #48	@ 0x30
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c72c:	b0c0      	sub	sp, #256	@ 0x100
 800c72e:	af00      	add	r7, sp, #0
 800c730:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c744:	68d9      	ldr	r1, [r3, #12]
 800c746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	ea40 0301 	orr.w	r3, r0, r1
 800c750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c756:	689a      	ldr	r2, [r3, #8]
 800c758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	431a      	orrs	r2, r3
 800c760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	431a      	orrs	r2, r3
 800c768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	4313      	orrs	r3, r2
 800c770:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c780:	f021 010c 	bic.w	r1, r1, #12
 800c784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c78e:	430b      	orrs	r3, r1
 800c790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c79e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7a2:	6999      	ldr	r1, [r3, #24]
 800c7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	ea40 0301 	orr.w	r3, r0, r1
 800c7ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	4b8f      	ldr	r3, [pc, #572]	@ (800c9f4 <UART_SetConfig+0x2cc>)
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d005      	beq.n	800c7c8 <UART_SetConfig+0xa0>
 800c7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	4b8d      	ldr	r3, [pc, #564]	@ (800c9f8 <UART_SetConfig+0x2d0>)
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d104      	bne.n	800c7d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7c8:	f7fc fb70 	bl	8008eac <HAL_RCC_GetPCLK2Freq>
 800c7cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c7d0:	e003      	b.n	800c7da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c7d2:	f7fc fb57 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 800c7d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7e4:	f040 810c 	bne.w	800ca00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c7f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	462b      	mov	r3, r5
 800c7fe:	1891      	adds	r1, r2, r2
 800c800:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c802:	415b      	adcs	r3, r3
 800c804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c80a:	4621      	mov	r1, r4
 800c80c:	eb12 0801 	adds.w	r8, r2, r1
 800c810:	4629      	mov	r1, r5
 800c812:	eb43 0901 	adc.w	r9, r3, r1
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c82a:	4690      	mov	r8, r2
 800c82c:	4699      	mov	r9, r3
 800c82e:	4623      	mov	r3, r4
 800c830:	eb18 0303 	adds.w	r3, r8, r3
 800c834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c838:	462b      	mov	r3, r5
 800c83a:	eb49 0303 	adc.w	r3, r9, r3
 800c83e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c84e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c856:	460b      	mov	r3, r1
 800c858:	18db      	adds	r3, r3, r3
 800c85a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c85c:	4613      	mov	r3, r2
 800c85e:	eb42 0303 	adc.w	r3, r2, r3
 800c862:	657b      	str	r3, [r7, #84]	@ 0x54
 800c864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c86c:	f7f4 fa24 	bl	8000cb8 <__aeabi_uldivmod>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	4b61      	ldr	r3, [pc, #388]	@ (800c9fc <UART_SetConfig+0x2d4>)
 800c876:	fba3 2302 	umull	r2, r3, r3, r2
 800c87a:	095b      	lsrs	r3, r3, #5
 800c87c:	011c      	lsls	r4, r3, #4
 800c87e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c882:	2200      	movs	r2, #0
 800c884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c888:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c88c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c890:	4642      	mov	r2, r8
 800c892:	464b      	mov	r3, r9
 800c894:	1891      	adds	r1, r2, r2
 800c896:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c898:	415b      	adcs	r3, r3
 800c89a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c89c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	eb12 0a01 	adds.w	sl, r2, r1
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	eb43 0b01 	adc.w	fp, r3, r1
 800c8ac:	f04f 0200 	mov.w	r2, #0
 800c8b0:	f04f 0300 	mov.w	r3, #0
 800c8b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c8bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8c0:	4692      	mov	sl, r2
 800c8c2:	469b      	mov	fp, r3
 800c8c4:	4643      	mov	r3, r8
 800c8c6:	eb1a 0303 	adds.w	r3, sl, r3
 800c8ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8ce:	464b      	mov	r3, r9
 800c8d0:	eb4b 0303 	adc.w	r3, fp, r3
 800c8d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c8e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	18db      	adds	r3, r3, r3
 800c8f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	eb42 0303 	adc.w	r3, r2, r3
 800c8f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c8fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c902:	f7f4 f9d9 	bl	8000cb8 <__aeabi_uldivmod>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	4611      	mov	r1, r2
 800c90c:	4b3b      	ldr	r3, [pc, #236]	@ (800c9fc <UART_SetConfig+0x2d4>)
 800c90e:	fba3 2301 	umull	r2, r3, r3, r1
 800c912:	095b      	lsrs	r3, r3, #5
 800c914:	2264      	movs	r2, #100	@ 0x64
 800c916:	fb02 f303 	mul.w	r3, r2, r3
 800c91a:	1acb      	subs	r3, r1, r3
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c922:	4b36      	ldr	r3, [pc, #216]	@ (800c9fc <UART_SetConfig+0x2d4>)
 800c924:	fba3 2302 	umull	r2, r3, r3, r2
 800c928:	095b      	lsrs	r3, r3, #5
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c930:	441c      	add	r4, r3
 800c932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c936:	2200      	movs	r2, #0
 800c938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c93c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c944:	4642      	mov	r2, r8
 800c946:	464b      	mov	r3, r9
 800c948:	1891      	adds	r1, r2, r2
 800c94a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c94c:	415b      	adcs	r3, r3
 800c94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c954:	4641      	mov	r1, r8
 800c956:	1851      	adds	r1, r2, r1
 800c958:	6339      	str	r1, [r7, #48]	@ 0x30
 800c95a:	4649      	mov	r1, r9
 800c95c:	414b      	adcs	r3, r1
 800c95e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c96c:	4659      	mov	r1, fp
 800c96e:	00cb      	lsls	r3, r1, #3
 800c970:	4651      	mov	r1, sl
 800c972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c976:	4651      	mov	r1, sl
 800c978:	00ca      	lsls	r2, r1, #3
 800c97a:	4610      	mov	r0, r2
 800c97c:	4619      	mov	r1, r3
 800c97e:	4603      	mov	r3, r0
 800c980:	4642      	mov	r2, r8
 800c982:	189b      	adds	r3, r3, r2
 800c984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c988:	464b      	mov	r3, r9
 800c98a:	460a      	mov	r2, r1
 800c98c:	eb42 0303 	adc.w	r3, r2, r3
 800c990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c9a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c9a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	18db      	adds	r3, r3, r3
 800c9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	eb42 0303 	adc.w	r3, r2, r3
 800c9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c9ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c9be:	f7f4 f97b 	bl	8000cb8 <__aeabi_uldivmod>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c9fc <UART_SetConfig+0x2d4>)
 800c9c8:	fba3 1302 	umull	r1, r3, r3, r2
 800c9cc:	095b      	lsrs	r3, r3, #5
 800c9ce:	2164      	movs	r1, #100	@ 0x64
 800c9d0:	fb01 f303 	mul.w	r3, r1, r3
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	3332      	adds	r3, #50	@ 0x32
 800c9da:	4a08      	ldr	r2, [pc, #32]	@ (800c9fc <UART_SetConfig+0x2d4>)
 800c9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e0:	095b      	lsrs	r3, r3, #5
 800c9e2:	f003 0207 	and.w	r2, r3, #7
 800c9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4422      	add	r2, r4
 800c9ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c9f0:	e106      	b.n	800cc00 <UART_SetConfig+0x4d8>
 800c9f2:	bf00      	nop
 800c9f4:	40011000 	.word	0x40011000
 800c9f8:	40011400 	.word	0x40011400
 800c9fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca04:	2200      	movs	r2, #0
 800ca06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ca0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ca0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ca12:	4642      	mov	r2, r8
 800ca14:	464b      	mov	r3, r9
 800ca16:	1891      	adds	r1, r2, r2
 800ca18:	6239      	str	r1, [r7, #32]
 800ca1a:	415b      	adcs	r3, r3
 800ca1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca22:	4641      	mov	r1, r8
 800ca24:	1854      	adds	r4, r2, r1
 800ca26:	4649      	mov	r1, r9
 800ca28:	eb43 0501 	adc.w	r5, r3, r1
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	f04f 0300 	mov.w	r3, #0
 800ca34:	00eb      	lsls	r3, r5, #3
 800ca36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca3a:	00e2      	lsls	r2, r4, #3
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	461d      	mov	r5, r3
 800ca40:	4643      	mov	r3, r8
 800ca42:	18e3      	adds	r3, r4, r3
 800ca44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ca48:	464b      	mov	r3, r9
 800ca4a:	eb45 0303 	adc.w	r3, r5, r3
 800ca4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ca62:	f04f 0200 	mov.w	r2, #0
 800ca66:	f04f 0300 	mov.w	r3, #0
 800ca6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ca6e:	4629      	mov	r1, r5
 800ca70:	008b      	lsls	r3, r1, #2
 800ca72:	4621      	mov	r1, r4
 800ca74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca78:	4621      	mov	r1, r4
 800ca7a:	008a      	lsls	r2, r1, #2
 800ca7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ca80:	f7f4 f91a 	bl	8000cb8 <__aeabi_uldivmod>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4b60      	ldr	r3, [pc, #384]	@ (800cc0c <UART_SetConfig+0x4e4>)
 800ca8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca8e:	095b      	lsrs	r3, r3, #5
 800ca90:	011c      	lsls	r4, r3, #4
 800ca92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca96:	2200      	movs	r2, #0
 800ca98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ca9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800caa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800caa4:	4642      	mov	r2, r8
 800caa6:	464b      	mov	r3, r9
 800caa8:	1891      	adds	r1, r2, r2
 800caaa:	61b9      	str	r1, [r7, #24]
 800caac:	415b      	adcs	r3, r3
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cab4:	4641      	mov	r1, r8
 800cab6:	1851      	adds	r1, r2, r1
 800cab8:	6139      	str	r1, [r7, #16]
 800caba:	4649      	mov	r1, r9
 800cabc:	414b      	adcs	r3, r1
 800cabe:	617b      	str	r3, [r7, #20]
 800cac0:	f04f 0200 	mov.w	r2, #0
 800cac4:	f04f 0300 	mov.w	r3, #0
 800cac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cacc:	4659      	mov	r1, fp
 800cace:	00cb      	lsls	r3, r1, #3
 800cad0:	4651      	mov	r1, sl
 800cad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cad6:	4651      	mov	r1, sl
 800cad8:	00ca      	lsls	r2, r1, #3
 800cada:	4610      	mov	r0, r2
 800cadc:	4619      	mov	r1, r3
 800cade:	4603      	mov	r3, r0
 800cae0:	4642      	mov	r2, r8
 800cae2:	189b      	adds	r3, r3, r2
 800cae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cae8:	464b      	mov	r3, r9
 800caea:	460a      	mov	r2, r1
 800caec:	eb42 0303 	adc.w	r3, r2, r3
 800caf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800caf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cafe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cb00:	f04f 0200 	mov.w	r2, #0
 800cb04:	f04f 0300 	mov.w	r3, #0
 800cb08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	008b      	lsls	r3, r1, #2
 800cb10:	4641      	mov	r1, r8
 800cb12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb16:	4641      	mov	r1, r8
 800cb18:	008a      	lsls	r2, r1, #2
 800cb1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cb1e:	f7f4 f8cb 	bl	8000cb8 <__aeabi_uldivmod>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	4b38      	ldr	r3, [pc, #224]	@ (800cc0c <UART_SetConfig+0x4e4>)
 800cb2a:	fba3 2301 	umull	r2, r3, r3, r1
 800cb2e:	095b      	lsrs	r3, r3, #5
 800cb30:	2264      	movs	r2, #100	@ 0x64
 800cb32:	fb02 f303 	mul.w	r3, r2, r3
 800cb36:	1acb      	subs	r3, r1, r3
 800cb38:	011b      	lsls	r3, r3, #4
 800cb3a:	3332      	adds	r3, #50	@ 0x32
 800cb3c:	4a33      	ldr	r2, [pc, #204]	@ (800cc0c <UART_SetConfig+0x4e4>)
 800cb3e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb42:	095b      	lsrs	r3, r3, #5
 800cb44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb48:	441c      	add	r4, r3
 800cb4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb4e:	2200      	movs	r2, #0
 800cb50:	673b      	str	r3, [r7, #112]	@ 0x70
 800cb52:	677a      	str	r2, [r7, #116]	@ 0x74
 800cb54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cb58:	4642      	mov	r2, r8
 800cb5a:	464b      	mov	r3, r9
 800cb5c:	1891      	adds	r1, r2, r2
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	415b      	adcs	r3, r3
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb68:	4641      	mov	r1, r8
 800cb6a:	1851      	adds	r1, r2, r1
 800cb6c:	6039      	str	r1, [r7, #0]
 800cb6e:	4649      	mov	r1, r9
 800cb70:	414b      	adcs	r3, r1
 800cb72:	607b      	str	r3, [r7, #4]
 800cb74:	f04f 0200 	mov.w	r2, #0
 800cb78:	f04f 0300 	mov.w	r3, #0
 800cb7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb80:	4659      	mov	r1, fp
 800cb82:	00cb      	lsls	r3, r1, #3
 800cb84:	4651      	mov	r1, sl
 800cb86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb8a:	4651      	mov	r1, sl
 800cb8c:	00ca      	lsls	r2, r1, #3
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4619      	mov	r1, r3
 800cb92:	4603      	mov	r3, r0
 800cb94:	4642      	mov	r2, r8
 800cb96:	189b      	adds	r3, r3, r2
 800cb98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb9a:	464b      	mov	r3, r9
 800cb9c:	460a      	mov	r2, r1
 800cb9e:	eb42 0303 	adc.w	r3, r2, r3
 800cba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbae:	667a      	str	r2, [r7, #100]	@ 0x64
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	f04f 0300 	mov.w	r3, #0
 800cbb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	008b      	lsls	r3, r1, #2
 800cbc0:	4641      	mov	r1, r8
 800cbc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	008a      	lsls	r2, r1, #2
 800cbca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cbce:	f7f4 f873 	bl	8000cb8 <__aeabi_uldivmod>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cc0c <UART_SetConfig+0x4e4>)
 800cbd8:	fba3 1302 	umull	r1, r3, r3, r2
 800cbdc:	095b      	lsrs	r3, r3, #5
 800cbde:	2164      	movs	r1, #100	@ 0x64
 800cbe0:	fb01 f303 	mul.w	r3, r1, r3
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	011b      	lsls	r3, r3, #4
 800cbe8:	3332      	adds	r3, #50	@ 0x32
 800cbea:	4a08      	ldr	r2, [pc, #32]	@ (800cc0c <UART_SetConfig+0x4e4>)
 800cbec:	fba2 2303 	umull	r2, r3, r2, r3
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	f003 020f 	and.w	r2, r3, #15
 800cbf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4422      	add	r2, r4
 800cbfe:	609a      	str	r2, [r3, #8]
}
 800cc00:	bf00      	nop
 800cc02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cc06:	46bd      	mov	sp, r7
 800cc08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc0c:	51eb851f 	.word	0x51eb851f

0800cc10 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cc10:	b084      	sub	sp, #16
 800cc12:	b480      	push	{r7}
 800cc14:	b085      	sub	sp, #20
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	f107 001c 	add.w	r0, r7, #28
 800cc1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cc26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cc28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cc2a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cc2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cc32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cc36:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cc3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800cc4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	431a      	orrs	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3714      	adds	r7, #20
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	b004      	add	sp, #16
 800cc64:	4770      	bx	lr

0800cc66 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cca2:	b480      	push	{r7}
 800cca4:	b083      	sub	sp, #12
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2203      	movs	r2, #3
 800ccae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 0303 	and.w	r3, r3, #3
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	b085      	sub	sp, #20
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ccf8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ccfe:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cd04:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cd14:	f023 030f 	bic.w	r3, r3, #15
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	b2db      	uxtb	r3, r3
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	3314      	adds	r3, #20
 800cd56:	461a      	mov	r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
}  
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b085      	sub	sp, #20
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cd94:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cd9a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cda0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdac:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	431a      	orrs	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0

}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b088      	sub	sp, #32
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdd8:	2340      	movs	r3, #64	@ 0x40
 800cdda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cddc:	2300      	movs	r3, #0
 800cdde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cde0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cde4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cde6:	f107 0308 	add.w	r3, r7, #8
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff ff74 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cdf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdf6:	2110      	movs	r1, #16
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f9d7 	bl	800d1ac <SDMMC_GetCmdResp1>
 800cdfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce00:	69fb      	ldr	r3, [r7, #28]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3720      	adds	r7, #32
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b088      	sub	sp, #32
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ce18:	2311      	movs	r3, #17
 800ce1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce1c:	2340      	movs	r3, #64	@ 0x40
 800ce1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce20:	2300      	movs	r3, #0
 800ce22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce2a:	f107 0308 	add.w	r3, r7, #8
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff ff52 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ce36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce3a:	2111      	movs	r1, #17
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f9b5 	bl	800d1ac <SDMMC_GetCmdResp1>
 800ce42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce44:	69fb      	ldr	r3, [r7, #28]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3720      	adds	r7, #32
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b088      	sub	sp, #32
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ce5c:	2312      	movs	r3, #18
 800ce5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce60:	2340      	movs	r3, #64	@ 0x40
 800ce62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce64:	2300      	movs	r3, #0
 800ce66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff ff30 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ce7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce7e:	2112      	movs	r1, #18
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f993 	bl	800d1ac <SDMMC_GetCmdResp1>
 800ce86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce88:	69fb      	ldr	r3, [r7, #28]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b088      	sub	sp, #32
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cea0:	2318      	movs	r3, #24
 800cea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cea4:	2340      	movs	r3, #64	@ 0x40
 800cea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ceac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7ff ff0e 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cec2:	2118      	movs	r1, #24
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f971 	bl	800d1ac <SDMMC_GetCmdResp1>
 800ceca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cecc:	69fb      	ldr	r3, [r7, #28]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3720      	adds	r7, #32
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b088      	sub	sp, #32
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cee4:	2319      	movs	r3, #25
 800cee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cee8:	2340      	movs	r3, #64	@ 0x40
 800ceea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cef4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cef6:	f107 0308 	add.w	r3, r7, #8
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff feec 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cf02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf06:	2119      	movs	r1, #25
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f94f 	bl	800d1ac <SDMMC_GetCmdResp1>
 800cf0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf10:	69fb      	ldr	r3, [r7, #28]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cf28:	230c      	movs	r3, #12
 800cf2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf2c:	2340      	movs	r3, #64	@ 0x40
 800cf2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf30:	2300      	movs	r3, #0
 800cf32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf3a:	f107 0308 	add.w	r3, r7, #8
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7ff feca 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cf46:	4a05      	ldr	r2, [pc, #20]	@ (800cf5c <SDMMC_CmdStopTransfer+0x40>)
 800cf48:	210c      	movs	r1, #12
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f92e 	bl	800d1ac <SDMMC_GetCmdResp1>
 800cf50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf52:	69fb      	ldr	r3, [r7, #28]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3720      	adds	r7, #32
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	05f5e100 	.word	0x05f5e100

0800cf60 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08a      	sub	sp, #40	@ 0x28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cf70:	2307      	movs	r3, #7
 800cf72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf74:	2340      	movs	r3, #64	@ 0x40
 800cf76:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf80:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf82:	f107 0310 	add.w	r3, r7, #16
 800cf86:	4619      	mov	r1, r3
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7ff fea6 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cf8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf92:	2107      	movs	r1, #7
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f000 f909 	bl	800d1ac <SDMMC_GetCmdResp1>
 800cf9a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3728      	adds	r7, #40	@ 0x28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b088      	sub	sp, #32
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfc4:	f107 0308 	add.w	r3, r7, #8
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fe85 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fb23 	bl	800d61c <SDMMC_GetCmdError>
 800cfd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfd8:	69fb      	ldr	r3, [r7, #28]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3720      	adds	r7, #32
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b088      	sub	sp, #32
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cfea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cfee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cff0:	2308      	movs	r3, #8
 800cff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cff4:	2340      	movs	r3, #64	@ 0x40
 800cff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cff8:	2300      	movs	r3, #0
 800cffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d000:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d002:	f107 0308 	add.w	r3, r7, #8
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff fe66 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fab6 	bl	800d580 <SDMMC_GetCmdResp7>
 800d014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d016:	69fb      	ldr	r3, [r7, #28]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b088      	sub	sp, #32
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d02e:	2337      	movs	r3, #55	@ 0x37
 800d030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d032:	2340      	movs	r3, #64	@ 0x40
 800d034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d036:	2300      	movs	r3, #0
 800d038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d03a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d03e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d040:	f107 0308 	add.w	r3, r7, #8
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7ff fe47 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d04c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d050:	2137      	movs	r1, #55	@ 0x37
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 f8aa 	bl	800d1ac <SDMMC_GetCmdResp1>
 800d058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d05a:	69fb      	ldr	r3, [r7, #28]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3720      	adds	r7, #32
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d07a:	2329      	movs	r3, #41	@ 0x29
 800d07c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d07e:	2340      	movs	r3, #64	@ 0x40
 800d080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d082:	2300      	movs	r3, #0
 800d084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d08a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d08c:	f107 0308 	add.w	r3, r7, #8
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff fe21 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f9bd 	bl	800d418 <SDMMC_GetCmdResp3>
 800d09e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0a0:	69fb      	ldr	r3, [r7, #28]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3720      	adds	r7, #32
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b088      	sub	sp, #32
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d0ba:	23c0      	movs	r3, #192	@ 0xc0
 800d0bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0c8:	f107 0308 	add.w	r3, r7, #8
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff fe03 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f957 	bl	800d388 <SDMMC_GetCmdResp2>
 800d0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0dc:	69fb      	ldr	r3, [r7, #28]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3720      	adds	r7, #32
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b088      	sub	sp, #32
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d0f4:	2309      	movs	r3, #9
 800d0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d0f8:	23c0      	movs	r3, #192	@ 0xc0
 800d0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d104:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d106:	f107 0308 	add.w	r3, r7, #8
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff fde4 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f938 	bl	800d388 <SDMMC_GetCmdResp2>
 800d118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d11a:	69fb      	ldr	r3, [r7, #28]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3720      	adds	r7, #32
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d12e:	2300      	movs	r3, #0
 800d130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d132:	2303      	movs	r3, #3
 800d134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d136:	2340      	movs	r3, #64	@ 0x40
 800d138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d13e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d142:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d144:	f107 0308 	add.w	r3, r7, #8
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7ff fdc5 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	2103      	movs	r1, #3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f99d 	bl	800d494 <SDMMC_GetCmdResp6>
 800d15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d15c:	69fb      	ldr	r3, [r7, #28]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3720      	adds	r7, #32
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b088      	sub	sp, #32
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d174:	230d      	movs	r3, #13
 800d176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d178:	2340      	movs	r3, #64	@ 0x40
 800d17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d17c:	2300      	movs	r3, #0
 800d17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d186:	f107 0308 	add.w	r3, r7, #8
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fda4 	bl	800ccda <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d196:	210d      	movs	r1, #13
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f807 	bl	800d1ac <SDMMC_GetCmdResp1>
 800d19e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a0:	69fb      	ldr	r3, [r7, #28]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3720      	adds	r7, #32
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b088      	sub	sp, #32
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d1ba:	4b70      	ldr	r3, [pc, #448]	@ (800d37c <SDMMC_GetCmdResp1+0x1d0>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a70      	ldr	r2, [pc, #448]	@ (800d380 <SDMMC_GetCmdResp1+0x1d4>)
 800d1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c4:	0a5a      	lsrs	r2, r3, #9
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	fb02 f303 	mul.w	r3, r2, r3
 800d1cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	1e5a      	subs	r2, r3, #1
 800d1d2:	61fa      	str	r2, [r7, #28]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d102      	bne.n	800d1de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1dc:	e0c9      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0ef      	beq.n	800d1ce <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1ea      	bne.n	800d1ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b00      	cmp	r3, #0
 800d202:	d004      	beq.n	800d20e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2204      	movs	r2, #4
 800d208:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d20a:	2304      	movs	r3, #4
 800d20c:	e0b1      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d004      	beq.n	800d224 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2201      	movs	r2, #1
 800d21e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d220:	2301      	movs	r3, #1
 800d222:	e0a6      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	22c5      	movs	r2, #197	@ 0xc5
 800d228:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff fd7f 	bl	800cd2e <SDIO_GetCommandResponse>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	7afb      	ldrb	r3, [r7, #11]
 800d236:	4293      	cmp	r3, r2
 800d238:	d001      	beq.n	800d23e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e099      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d23e:	2100      	movs	r1, #0
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f7ff fd81 	bl	800cd48 <SDIO_GetResponse>
 800d246:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	4b4e      	ldr	r3, [pc, #312]	@ (800d384 <SDMMC_GetCmdResp1+0x1d8>)
 800d24c:	4013      	ands	r3, r2
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d252:	2300      	movs	r3, #0
 800d254:	e08d      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	da02      	bge.n	800d262 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d25c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d260:	e087      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d26c:	2340      	movs	r3, #64	@ 0x40
 800d26e:	e080      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d27a:	2380      	movs	r3, #128	@ 0x80
 800d27c:	e079      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d28c:	e071      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d002      	beq.n	800d29e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d29c:	e069      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d2a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ac:	e061      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d002      	beq.n	800d2be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d2b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d2bc:	e059      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d2c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2cc:	e051      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d2d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d2dc:	e049      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d2e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d2ec:	e041      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d2f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2fc:	e039      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d308:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d30c:	e031      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d318:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d31c:	e029      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d328:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d32c:	e021      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d334:	2b00      	cmp	r3, #0
 800d336:	d002      	beq.n	800d33e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d338:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d33c:	e019      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d34c:	e011      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d358:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d35c:	e009      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f003 0308 	and.w	r3, r3, #8
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d368:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d36c:	e001      	b.n	800d372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d36e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d372:	4618      	mov	r0, r3
 800d374:	3720      	adds	r7, #32
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20000014 	.word	0x20000014
 800d380:	10624dd3 	.word	0x10624dd3
 800d384:	fdffe008 	.word	0xfdffe008

0800d388 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d390:	4b1f      	ldr	r3, [pc, #124]	@ (800d410 <SDMMC_GetCmdResp2+0x88>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a1f      	ldr	r2, [pc, #124]	@ (800d414 <SDMMC_GetCmdResp2+0x8c>)
 800d396:	fba2 2303 	umull	r2, r3, r2, r3
 800d39a:	0a5b      	lsrs	r3, r3, #9
 800d39c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3a0:	fb02 f303 	mul.w	r3, r2, r3
 800d3a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	1e5a      	subs	r2, r3, #1
 800d3aa:	60fa      	str	r2, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d102      	bne.n	800d3b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3b4:	e026      	b.n	800d404 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0ef      	beq.n	800d3a6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1ea      	bne.n	800d3a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d004      	beq.n	800d3e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2204      	movs	r2, #4
 800d3e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3e2:	2304      	movs	r3, #4
 800d3e4:	e00e      	b.n	800d404 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e003      	b.n	800d404 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	22c5      	movs	r2, #197	@ 0xc5
 800d400:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	20000014 	.word	0x20000014
 800d414:	10624dd3 	.word	0x10624dd3

0800d418 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d420:	4b1a      	ldr	r3, [pc, #104]	@ (800d48c <SDMMC_GetCmdResp3+0x74>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a1a      	ldr	r2, [pc, #104]	@ (800d490 <SDMMC_GetCmdResp3+0x78>)
 800d426:	fba2 2303 	umull	r2, r3, r2, r3
 800d42a:	0a5b      	lsrs	r3, r3, #9
 800d42c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d430:	fb02 f303 	mul.w	r3, r2, r3
 800d434:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	1e5a      	subs	r2, r3, #1
 800d43a:	60fa      	str	r2, [r7, #12]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d440:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d444:	e01b      	b.n	800d47e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d44a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d452:	2b00      	cmp	r3, #0
 800d454:	d0ef      	beq.n	800d436 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1ea      	bne.n	800d436 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d464:	f003 0304 	and.w	r3, r3, #4
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d004      	beq.n	800d476 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2204      	movs	r2, #4
 800d470:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d472:	2304      	movs	r3, #4
 800d474:	e003      	b.n	800d47e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	22c5      	movs	r2, #197	@ 0xc5
 800d47a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	20000014 	.word	0x20000014
 800d490:	10624dd3 	.word	0x10624dd3

0800d494 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	460b      	mov	r3, r1
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4a2:	4b35      	ldr	r3, [pc, #212]	@ (800d578 <SDMMC_GetCmdResp6+0xe4>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a35      	ldr	r2, [pc, #212]	@ (800d57c <SDMMC_GetCmdResp6+0xe8>)
 800d4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ac:	0a5b      	lsrs	r3, r3, #9
 800d4ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4b2:	fb02 f303 	mul.w	r3, r2, r3
 800d4b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	1e5a      	subs	r2, r3, #1
 800d4bc:	61fa      	str	r2, [r7, #28]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d102      	bne.n	800d4c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4c6:	e052      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0ef      	beq.n	800d4b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1ea      	bne.n	800d4b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e6:	f003 0304 	and.w	r3, r3, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2204      	movs	r2, #4
 800d4f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4f4:	2304      	movs	r3, #4
 800d4f6:	e03a      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d004      	beq.n	800d50e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2201      	movs	r2, #1
 800d508:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e02f      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f7ff fc0d 	bl	800cd2e <SDIO_GetCommandResponse>
 800d514:	4603      	mov	r3, r0
 800d516:	461a      	mov	r2, r3
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d001      	beq.n	800d522 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d51e:	2301      	movs	r3, #1
 800d520:	e025      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	22c5      	movs	r2, #197	@ 0xc5
 800d526:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d528:	2100      	movs	r1, #0
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff fc0c 	bl	800cd48 <SDIO_GetResponse>
 800d530:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	0c1b      	lsrs	r3, r3, #16
 800d540:	b29a      	uxth	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d546:	2300      	movs	r3, #0
 800d548:	e011      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d558:	e009      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d568:	e001      	b.n	800d56e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d56a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3720      	adds	r7, #32
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20000014 	.word	0x20000014
 800d57c:	10624dd3 	.word	0x10624dd3

0800d580 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d588:	4b22      	ldr	r3, [pc, #136]	@ (800d614 <SDMMC_GetCmdResp7+0x94>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a22      	ldr	r2, [pc, #136]	@ (800d618 <SDMMC_GetCmdResp7+0x98>)
 800d58e:	fba2 2303 	umull	r2, r3, r2, r3
 800d592:	0a5b      	lsrs	r3, r3, #9
 800d594:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d598:	fb02 f303 	mul.w	r3, r2, r3
 800d59c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	1e5a      	subs	r2, r3, #1
 800d5a2:	60fa      	str	r2, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5ac:	e02c      	b.n	800d608 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0ef      	beq.n	800d59e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1ea      	bne.n	800d59e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2204      	movs	r2, #4
 800d5d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5da:	2304      	movs	r3, #4
 800d5dc:	e014      	b.n	800d608 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d004      	beq.n	800d5f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e009      	b.n	800d608 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2240      	movs	r2, #64	@ 0x40
 800d604:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d606:	2300      	movs	r3, #0
  
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20000014 	.word	0x20000014
 800d618:	10624dd3 	.word	0x10624dd3

0800d61c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d624:	4b11      	ldr	r3, [pc, #68]	@ (800d66c <SDMMC_GetCmdError+0x50>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a11      	ldr	r2, [pc, #68]	@ (800d670 <SDMMC_GetCmdError+0x54>)
 800d62a:	fba2 2303 	umull	r2, r3, r2, r3
 800d62e:	0a5b      	lsrs	r3, r3, #9
 800d630:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d634:	fb02 f303 	mul.w	r3, r2, r3
 800d638:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	1e5a      	subs	r2, r3, #1
 800d63e:	60fa      	str	r2, [r7, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d102      	bne.n	800d64a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d644:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d648:	e009      	b.n	800d65e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0f1      	beq.n	800d63a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	22c5      	movs	r2, #197	@ 0xc5
 800d65a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	20000014 	.word	0x20000014
 800d670:	10624dd3 	.word	0x10624dd3

0800d674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d674:	b084      	sub	sp, #16
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	f107 001c 	add.w	r0, r7, #28
 800d682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d122      	bne.n	800d6d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d690:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d6a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d6b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d105      	bne.n	800d6c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f001 fc3e 	bl	800ef48 <USB_CoreReset>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
 800d6d0:	e01a      	b.n	800d708 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f001 fc32 	bl	800ef48 <USB_CoreReset>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d6e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d106      	bne.n	800d6fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	639a      	str	r2, [r3, #56]	@ 0x38
 800d6fa:	e005      	b.n	800d708 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d700:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d10b      	bne.n	800d726 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f043 0206 	orr.w	r2, r3, #6
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	f043 0220 	orr.w	r2, r3, #32
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d732:	b004      	add	sp, #16
 800d734:	4770      	bx	lr
	...

0800d738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d738:	b480      	push	{r7}
 800d73a:	b087      	sub	sp, #28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	4613      	mov	r3, r2
 800d744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d165      	bne.n	800d818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	4a41      	ldr	r2, [pc, #260]	@ (800d854 <USB_SetTurnaroundTime+0x11c>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d906      	bls.n	800d762 <USB_SetTurnaroundTime+0x2a>
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	4a40      	ldr	r2, [pc, #256]	@ (800d858 <USB_SetTurnaroundTime+0x120>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d202      	bcs.n	800d762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d75c:	230f      	movs	r3, #15
 800d75e:	617b      	str	r3, [r7, #20]
 800d760:	e062      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	4a3c      	ldr	r2, [pc, #240]	@ (800d858 <USB_SetTurnaroundTime+0x120>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d306      	bcc.n	800d778 <USB_SetTurnaroundTime+0x40>
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	4a3b      	ldr	r2, [pc, #236]	@ (800d85c <USB_SetTurnaroundTime+0x124>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d202      	bcs.n	800d778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d772:	230e      	movs	r3, #14
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	e057      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	4a38      	ldr	r2, [pc, #224]	@ (800d85c <USB_SetTurnaroundTime+0x124>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d306      	bcc.n	800d78e <USB_SetTurnaroundTime+0x56>
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	4a37      	ldr	r2, [pc, #220]	@ (800d860 <USB_SetTurnaroundTime+0x128>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d202      	bcs.n	800d78e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d788:	230d      	movs	r3, #13
 800d78a:	617b      	str	r3, [r7, #20]
 800d78c:	e04c      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	4a33      	ldr	r2, [pc, #204]	@ (800d860 <USB_SetTurnaroundTime+0x128>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d306      	bcc.n	800d7a4 <USB_SetTurnaroundTime+0x6c>
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	4a32      	ldr	r2, [pc, #200]	@ (800d864 <USB_SetTurnaroundTime+0x12c>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d802      	bhi.n	800d7a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d79e:	230c      	movs	r3, #12
 800d7a0:	617b      	str	r3, [r7, #20]
 800d7a2:	e041      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	4a2f      	ldr	r2, [pc, #188]	@ (800d864 <USB_SetTurnaroundTime+0x12c>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d906      	bls.n	800d7ba <USB_SetTurnaroundTime+0x82>
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	4a2e      	ldr	r2, [pc, #184]	@ (800d868 <USB_SetTurnaroundTime+0x130>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d802      	bhi.n	800d7ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d7b4:	230b      	movs	r3, #11
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	e036      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	4a2a      	ldr	r2, [pc, #168]	@ (800d868 <USB_SetTurnaroundTime+0x130>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d906      	bls.n	800d7d0 <USB_SetTurnaroundTime+0x98>
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	4a29      	ldr	r2, [pc, #164]	@ (800d86c <USB_SetTurnaroundTime+0x134>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d802      	bhi.n	800d7d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d7ca:	230a      	movs	r3, #10
 800d7cc:	617b      	str	r3, [r7, #20]
 800d7ce:	e02b      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	4a26      	ldr	r2, [pc, #152]	@ (800d86c <USB_SetTurnaroundTime+0x134>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d906      	bls.n	800d7e6 <USB_SetTurnaroundTime+0xae>
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	4a25      	ldr	r2, [pc, #148]	@ (800d870 <USB_SetTurnaroundTime+0x138>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d202      	bcs.n	800d7e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d7e0:	2309      	movs	r3, #9
 800d7e2:	617b      	str	r3, [r7, #20]
 800d7e4:	e020      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	4a21      	ldr	r2, [pc, #132]	@ (800d870 <USB_SetTurnaroundTime+0x138>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d306      	bcc.n	800d7fc <USB_SetTurnaroundTime+0xc4>
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	4a20      	ldr	r2, [pc, #128]	@ (800d874 <USB_SetTurnaroundTime+0x13c>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d802      	bhi.n	800d7fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d7f6:	2308      	movs	r3, #8
 800d7f8:	617b      	str	r3, [r7, #20]
 800d7fa:	e015      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	4a1d      	ldr	r2, [pc, #116]	@ (800d874 <USB_SetTurnaroundTime+0x13c>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d906      	bls.n	800d812 <USB_SetTurnaroundTime+0xda>
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4a1c      	ldr	r2, [pc, #112]	@ (800d878 <USB_SetTurnaroundTime+0x140>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d202      	bcs.n	800d812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d80c:	2307      	movs	r3, #7
 800d80e:	617b      	str	r3, [r7, #20]
 800d810:	e00a      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d812:	2306      	movs	r3, #6
 800d814:	617b      	str	r3, [r7, #20]
 800d816:	e007      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d818:	79fb      	ldrb	r3, [r7, #7]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d102      	bne.n	800d824 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d81e:	2309      	movs	r3, #9
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	e001      	b.n	800d828 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d824:	2309      	movs	r3, #9
 800d826:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	68da      	ldr	r2, [r3, #12]
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	029b      	lsls	r3, r3, #10
 800d83c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d840:	431a      	orrs	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	371c      	adds	r7, #28
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	00d8acbf 	.word	0x00d8acbf
 800d858:	00e4e1c0 	.word	0x00e4e1c0
 800d85c:	00f42400 	.word	0x00f42400
 800d860:	01067380 	.word	0x01067380
 800d864:	011a499f 	.word	0x011a499f
 800d868:	01312cff 	.word	0x01312cff
 800d86c:	014ca43f 	.word	0x014ca43f
 800d870:	016e3600 	.word	0x016e3600
 800d874:	01a6ab1f 	.word	0x01a6ab1f
 800d878:	01e84800 	.word	0x01e84800

0800d87c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	f043 0201 	orr.w	r2, r3, #1
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d89e:	b480      	push	{r7}
 800d8a0:	b083      	sub	sp, #12
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	f023 0201 	bic.w	r2, r3, #1
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d8dc:	78fb      	ldrb	r3, [r7, #3]
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d115      	bne.n	800d90e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	f7f6 fa16 	bl	8003d20 <HAL_Delay>
      ms++;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f001 fa94 	bl	800ee28 <USB_GetMode>
 800d900:	4603      	mov	r3, r0
 800d902:	2b01      	cmp	r3, #1
 800d904:	d01e      	beq.n	800d944 <USB_SetCurrentMode+0x84>
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b31      	cmp	r3, #49	@ 0x31
 800d90a:	d9f0      	bls.n	800d8ee <USB_SetCurrentMode+0x2e>
 800d90c:	e01a      	b.n	800d944 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d90e:	78fb      	ldrb	r3, [r7, #3]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d115      	bne.n	800d940 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d920:	2001      	movs	r0, #1
 800d922:	f7f6 f9fd 	bl	8003d20 <HAL_Delay>
      ms++;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3301      	adds	r3, #1
 800d92a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 fa7b 	bl	800ee28 <USB_GetMode>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d005      	beq.n	800d944 <USB_SetCurrentMode+0x84>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b31      	cmp	r3, #49	@ 0x31
 800d93c:	d9f0      	bls.n	800d920 <USB_SetCurrentMode+0x60>
 800d93e:	e001      	b.n	800d944 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e005      	b.n	800d950 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b32      	cmp	r3, #50	@ 0x32
 800d948:	d101      	bne.n	800d94e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d958:	b084      	sub	sp, #16
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b086      	sub	sp, #24
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d972:	2300      	movs	r3, #0
 800d974:	613b      	str	r3, [r7, #16]
 800d976:	e009      	b.n	800d98c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	3340      	adds	r3, #64	@ 0x40
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	4413      	add	r3, r2
 800d982:	2200      	movs	r2, #0
 800d984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	3301      	adds	r3, #1
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2b0e      	cmp	r3, #14
 800d990:	d9f2      	bls.n	800d978 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d11c      	bne.n	800d9d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d9a6:	f043 0302 	orr.w	r3, r3, #2
 800d9aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9bc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9c8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800d9d0:	e00b      	b.n	800d9ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da04:	461a      	mov	r2, r3
 800da06:	680b      	ldr	r3, [r1, #0]
 800da08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d10c      	bne.n	800da2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	2b00      	cmp	r3, #0
 800da14:	d104      	bne.n	800da20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800da16:	2100      	movs	r1, #0
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f965 	bl	800dce8 <USB_SetDevSpeed>
 800da1e:	e008      	b.n	800da32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800da20:	2101      	movs	r1, #1
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f960 	bl	800dce8 <USB_SetDevSpeed>
 800da28:	e003      	b.n	800da32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800da2a:	2103      	movs	r1, #3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f95b 	bl	800dce8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da32:	2110      	movs	r1, #16
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f8f3 	bl	800dc20 <USB_FlushTxFifo>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f91f 	bl	800dc88 <USB_FlushRxFifo>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da5a:	461a      	mov	r2, r3
 800da5c:	2300      	movs	r3, #0
 800da5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da66:	461a      	mov	r2, r3
 800da68:	2300      	movs	r3, #0
 800da6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da72:	461a      	mov	r2, r3
 800da74:	2300      	movs	r3, #0
 800da76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da78:	2300      	movs	r3, #0
 800da7a:	613b      	str	r3, [r7, #16]
 800da7c:	e043      	b.n	800db06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	015a      	lsls	r2, r3, #5
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	4413      	add	r3, r2
 800da86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da94:	d118      	bne.n	800dac8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	015a      	lsls	r2, r3, #5
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	4413      	add	r3, r2
 800daa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daa8:	461a      	mov	r2, r3
 800daaa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	e013      	b.n	800dada <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dabe:	461a      	mov	r2, r3
 800dac0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dac4:	6013      	str	r3, [r2, #0]
 800dac6:	e008      	b.n	800dada <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	015a      	lsls	r2, r3, #5
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4413      	add	r3, r2
 800dad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dad4:	461a      	mov	r2, r3
 800dad6:	2300      	movs	r3, #0
 800dad8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	015a      	lsls	r2, r3, #5
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	4413      	add	r3, r2
 800dae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dae6:	461a      	mov	r2, r3
 800dae8:	2300      	movs	r3, #0
 800daea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	015a      	lsls	r2, r3, #5
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daf8:	461a      	mov	r2, r3
 800dafa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dafe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	3301      	adds	r3, #1
 800db04:	613b      	str	r3, [r7, #16]
 800db06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d3b7      	bcc.n	800da7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db0e:	2300      	movs	r3, #0
 800db10:	613b      	str	r3, [r7, #16]
 800db12:	e043      	b.n	800db9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	015a      	lsls	r2, r3, #5
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db2a:	d118      	bne.n	800db5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10a      	bne.n	800db48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db3e:	461a      	mov	r2, r3
 800db40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db44:	6013      	str	r3, [r2, #0]
 800db46:	e013      	b.n	800db70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	015a      	lsls	r2, r3, #5
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	4413      	add	r3, r2
 800db50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db54:	461a      	mov	r2, r3
 800db56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	e008      	b.n	800db70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	015a      	lsls	r2, r3, #5
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	4413      	add	r3, r2
 800db66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db6a:	461a      	mov	r2, r3
 800db6c:	2300      	movs	r3, #0
 800db6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db7c:	461a      	mov	r2, r3
 800db7e:	2300      	movs	r3, #0
 800db80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	015a      	lsls	r2, r3, #5
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	4413      	add	r3, r2
 800db8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db8e:	461a      	mov	r2, r3
 800db90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800db94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	3301      	adds	r3, #1
 800db9a:	613b      	str	r3, [r7, #16]
 800db9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d3b7      	bcc.n	800db14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dbc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d105      	bne.n	800dbd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	f043 0210 	orr.w	r2, r3, #16
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	699a      	ldr	r2, [r3, #24]
 800dbdc:	4b0f      	ldr	r3, [pc, #60]	@ (800dc1c <USB_DevInit+0x2c4>)
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d005      	beq.n	800dbf6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	f043 0208 	orr.w	r2, r3, #8
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dbf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d107      	bne.n	800dc0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc04:	f043 0304 	orr.w	r3, r3, #4
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc18:	b004      	add	sp, #16
 800dc1a:	4770      	bx	lr
 800dc1c:	803c3800 	.word	0x803c3800

0800dc20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3301      	adds	r3, #1
 800dc32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4a13      	ldr	r2, [pc, #76]	@ (800dc84 <USB_FlushTxFifo+0x64>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d901      	bls.n	800dc40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	e01b      	b.n	800dc78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	daf2      	bge.n	800dc2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	019b      	lsls	r3, r3, #6
 800dc50:	f043 0220 	orr.w	r2, r3, #32
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	4a08      	ldr	r2, [pc, #32]	@ (800dc84 <USB_FlushTxFifo+0x64>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d901      	bls.n	800dc6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e006      	b.n	800dc78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b20      	cmp	r3, #32
 800dc74:	d0f0      	beq.n	800dc58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	00030d40 	.word	0x00030d40

0800dc88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	3301      	adds	r3, #1
 800dc98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4a11      	ldr	r2, [pc, #68]	@ (800dce4 <USB_FlushRxFifo+0x5c>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d901      	bls.n	800dca6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dca2:	2303      	movs	r3, #3
 800dca4:	e018      	b.n	800dcd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	daf2      	bge.n	800dc94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2210      	movs	r2, #16
 800dcb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4a08      	ldr	r2, [pc, #32]	@ (800dce4 <USB_FlushRxFifo+0x5c>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d901      	bls.n	800dcca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	e006      	b.n	800dcd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	f003 0310 	and.w	r3, r3, #16
 800dcd2:	2b10      	cmp	r3, #16
 800dcd4:	d0f0      	beq.n	800dcb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	00030d40 	.word	0x00030d40

0800dce8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	78fb      	ldrb	r3, [r7, #3]
 800dd02:	68f9      	ldr	r1, [r7, #12]
 800dd04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dd1a:	b480      	push	{r7}
 800dd1c:	b087      	sub	sp, #28
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	f003 0306 	and.w	r3, r3, #6
 800dd32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d102      	bne.n	800dd40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	75fb      	strb	r3, [r7, #23]
 800dd3e:	e00a      	b.n	800dd56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d002      	beq.n	800dd4c <USB_GetDevSpeed+0x32>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2b06      	cmp	r3, #6
 800dd4a:	d102      	bne.n	800dd52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	75fb      	strb	r3, [r7, #23]
 800dd50:	e001      	b.n	800dd56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dd52:	230f      	movs	r3, #15
 800dd54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dd56:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	371c      	adds	r7, #28
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	785b      	ldrb	r3, [r3, #1]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d13a      	bne.n	800ddf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd86:	69da      	ldr	r2, [r3, #28]
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	2101      	movs	r1, #1
 800dd92:	fa01 f303 	lsl.w	r3, r1, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	68f9      	ldr	r1, [r7, #12]
 800dd9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	015a      	lsls	r2, r3, #5
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4413      	add	r3, r2
 800ddaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d155      	bne.n	800de64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	791b      	ldrb	r3, [r3, #4]
 800ddd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ddd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	059b      	lsls	r3, r3, #22
 800ddda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dddc:	4313      	orrs	r3, r2
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	0151      	lsls	r1, r2, #5
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	440a      	add	r2, r1
 800dde6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddf2:	6013      	str	r3, [r2, #0]
 800ddf4:	e036      	b.n	800de64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddfc:	69da      	ldr	r2, [r3, #28]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	f003 030f 	and.w	r3, r3, #15
 800de06:	2101      	movs	r1, #1
 800de08:	fa01 f303 	lsl.w	r3, r1, r3
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	68f9      	ldr	r1, [r7, #12]
 800de10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de14:	4313      	orrs	r3, r2
 800de16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d11a      	bne.n	800de64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	015a      	lsls	r2, r3, #5
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	4413      	add	r3, r2
 800de36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	791b      	ldrb	r3, [r3, #4]
 800de48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de4a:	430b      	orrs	r3, r1
 800de4c:	4313      	orrs	r3, r2
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	0151      	lsls	r1, r2, #5
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	440a      	add	r2, r1
 800de56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
	...

0800de74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d161      	bne.n	800df54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dea6:	d11f      	bne.n	800dee8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	015a      	lsls	r2, r3, #5
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4413      	add	r3, r2
 800deb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	0151      	lsls	r1, r2, #5
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	440a      	add	r2, r1
 800debe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dec6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	015a      	lsls	r2, r3, #5
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	0151      	lsls	r1, r2, #5
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	440a      	add	r2, r1
 800dede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	f003 030f 	and.w	r3, r3, #15
 800def8:	2101      	movs	r1, #1
 800defa:	fa01 f303 	lsl.w	r3, r1, r3
 800defe:	b29b      	uxth	r3, r3
 800df00:	43db      	mvns	r3, r3
 800df02:	68f9      	ldr	r1, [r7, #12]
 800df04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df08:	4013      	ands	r3, r2
 800df0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	f003 030f 	and.w	r3, r3, #15
 800df1c:	2101      	movs	r1, #1
 800df1e:	fa01 f303 	lsl.w	r3, r1, r3
 800df22:	b29b      	uxth	r3, r3
 800df24:	43db      	mvns	r3, r3
 800df26:	68f9      	ldr	r1, [r7, #12]
 800df28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df2c:	4013      	ands	r3, r2
 800df2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	015a      	lsls	r2, r3, #5
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4413      	add	r3, r2
 800df38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	0159      	lsls	r1, r3, #5
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	440b      	add	r3, r1
 800df46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df4a:	4619      	mov	r1, r3
 800df4c:	4b35      	ldr	r3, [pc, #212]	@ (800e024 <USB_DeactivateEndpoint+0x1b0>)
 800df4e:	4013      	ands	r3, r2
 800df50:	600b      	str	r3, [r1, #0]
 800df52:	e060      	b.n	800e016 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df6a:	d11f      	bne.n	800dfac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	015a      	lsls	r2, r3, #5
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	4413      	add	r3, r2
 800df74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	0151      	lsls	r1, r2, #5
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	440a      	add	r2, r1
 800df82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800df8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	0151      	lsls	r1, r2, #5
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	440a      	add	r2, r1
 800dfa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dfaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	f003 030f 	and.w	r3, r3, #15
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800dfc2:	041b      	lsls	r3, r3, #16
 800dfc4:	43db      	mvns	r3, r3
 800dfc6:	68f9      	ldr	r1, [r7, #12]
 800dfc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfcc:	4013      	ands	r3, r2
 800dfce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfd6:	69da      	ldr	r2, [r3, #28]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfe6:	041b      	lsls	r3, r3, #16
 800dfe8:	43db      	mvns	r3, r3
 800dfea:	68f9      	ldr	r1, [r7, #12]
 800dfec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dff0:	4013      	ands	r3, r2
 800dff2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	015a      	lsls	r2, r3, #5
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	4413      	add	r3, r2
 800dffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	0159      	lsls	r1, r3, #5
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	440b      	add	r3, r1
 800e00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e00e:	4619      	mov	r1, r3
 800e010:	4b05      	ldr	r3, [pc, #20]	@ (800e028 <USB_DeactivateEndpoint+0x1b4>)
 800e012:	4013      	ands	r3, r2
 800e014:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3714      	adds	r7, #20
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	ec337800 	.word	0xec337800
 800e028:	eff37800 	.word	0xeff37800

0800e02c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	@ 0x28
 800e030:	af02      	add	r7, sp, #8
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	4613      	mov	r3, r2
 800e038:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	f040 815c 	bne.w	800e306 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d132      	bne.n	800e0bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	015a      	lsls	r2, r3, #5
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	4413      	add	r3, r2
 800e05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	69ba      	ldr	r2, [r7, #24]
 800e066:	0151      	lsls	r1, r2, #5
 800e068:	69fa      	ldr	r2, [r7, #28]
 800e06a:	440a      	add	r2, r1
 800e06c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e070:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e074:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e078:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	015a      	lsls	r2, r3, #5
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	4413      	add	r3, r2
 800e082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	69ba      	ldr	r2, [r7, #24]
 800e08a:	0151      	lsls	r1, r2, #5
 800e08c:	69fa      	ldr	r2, [r7, #28]
 800e08e:	440a      	add	r2, r1
 800e090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e094:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e098:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	0151      	lsls	r1, r2, #5
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	440a      	add	r2, r1
 800e0b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0b4:	0cdb      	lsrs	r3, r3, #19
 800e0b6:	04db      	lsls	r3, r3, #19
 800e0b8:	6113      	str	r3, [r2, #16]
 800e0ba:	e074      	b.n	800e1a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	015a      	lsls	r2, r3, #5
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	0151      	lsls	r1, r2, #5
 800e0ce:	69fa      	ldr	r2, [r7, #28]
 800e0d0:	440a      	add	r2, r1
 800e0d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0d6:	0cdb      	lsrs	r3, r3, #19
 800e0d8:	04db      	lsls	r3, r3, #19
 800e0da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	015a      	lsls	r2, r3, #5
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	0151      	lsls	r1, r2, #5
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	440a      	add	r2, r1
 800e0f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e0fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e0fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	015a      	lsls	r2, r3, #5
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	4413      	add	r3, r2
 800e108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e10c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	6999      	ldr	r1, [r3, #24]
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	440b      	add	r3, r1
 800e118:	1e59      	subs	r1, r3, #1
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e122:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e124:	4b9d      	ldr	r3, [pc, #628]	@ (800e39c <USB_EPStartXfer+0x370>)
 800e126:	400b      	ands	r3, r1
 800e128:	69b9      	ldr	r1, [r7, #24]
 800e12a:	0148      	lsls	r0, r1, #5
 800e12c:	69f9      	ldr	r1, [r7, #28]
 800e12e:	4401      	add	r1, r0
 800e130:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e134:	4313      	orrs	r3, r2
 800e136:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e138:	69bb      	ldr	r3, [r7, #24]
 800e13a:	015a      	lsls	r2, r3, #5
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	4413      	add	r3, r2
 800e140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e144:	691a      	ldr	r2, [r3, #16]
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e14e:	69b9      	ldr	r1, [r7, #24]
 800e150:	0148      	lsls	r0, r1, #5
 800e152:	69f9      	ldr	r1, [r7, #28]
 800e154:	4401      	add	r1, r0
 800e156:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e15a:	4313      	orrs	r3, r2
 800e15c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	791b      	ldrb	r3, [r3, #4]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d11f      	bne.n	800e1a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	015a      	lsls	r2, r3, #5
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	4413      	add	r3, r2
 800e16e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	69ba      	ldr	r2, [r7, #24]
 800e176:	0151      	lsls	r1, r2, #5
 800e178:	69fa      	ldr	r2, [r7, #28]
 800e17a:	440a      	add	r2, r1
 800e17c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e180:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e184:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	4413      	add	r3, r2
 800e18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	69ba      	ldr	r2, [r7, #24]
 800e196:	0151      	lsls	r1, r2, #5
 800e198:	69fa      	ldr	r2, [r7, #28]
 800e19a:	440a      	add	r2, r1
 800e19c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e1a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d14b      	bne.n	800e244 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	695b      	ldr	r3, [r3, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d009      	beq.n	800e1c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	015a      	lsls	r2, r3, #5
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	791b      	ldrb	r3, [r3, #4]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d128      	bne.n	800e222 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d110      	bne.n	800e202 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	0151      	lsls	r1, r2, #5
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	440a      	add	r2, r1
 800e1f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	e00f      	b.n	800e222 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	0151      	lsls	r1, r2, #5
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	440a      	add	r2, r1
 800e218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e21c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e220:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	0151      	lsls	r1, r2, #5
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	440a      	add	r2, r1
 800e238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e23c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e240:	6013      	str	r3, [r2, #0]
 800e242:	e133      	b.n	800e4ac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	0151      	lsls	r1, r2, #5
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	440a      	add	r2, r1
 800e25a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e25e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e262:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	791b      	ldrb	r3, [r3, #4]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d015      	beq.n	800e298 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 811b 	beq.w	800e4ac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e27c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	f003 030f 	and.w	r3, r3, #15
 800e286:	2101      	movs	r1, #1
 800e288:	fa01 f303 	lsl.w	r3, r1, r3
 800e28c:	69f9      	ldr	r1, [r7, #28]
 800e28e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e292:	4313      	orrs	r3, r2
 800e294:	634b      	str	r3, [r1, #52]	@ 0x34
 800e296:	e109      	b.n	800e4ac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d110      	bne.n	800e2ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	015a      	lsls	r2, r3, #5
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	69ba      	ldr	r2, [r7, #24]
 800e2b8:	0151      	lsls	r1, r2, #5
 800e2ba:	69fa      	ldr	r2, [r7, #28]
 800e2bc:	440a      	add	r2, r1
 800e2be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e2c6:	6013      	str	r3, [r2, #0]
 800e2c8:	e00f      	b.n	800e2ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	0151      	lsls	r1, r2, #5
 800e2dc:	69fa      	ldr	r2, [r7, #28]
 800e2de:	440a      	add	r2, r1
 800e2e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e2e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	6919      	ldr	r1, [r3, #16]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	781a      	ldrb	r2, [r3, #0]
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	b298      	uxth	r0, r3
 800e2f8:	79fb      	ldrb	r3, [r7, #7]
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f000 fade 	bl	800e8c0 <USB_WritePacket>
 800e304:	e0d2      	b.n	800e4ac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	015a      	lsls	r2, r3, #5
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	4413      	add	r3, r2
 800e30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	0151      	lsls	r1, r2, #5
 800e318:	69fa      	ldr	r2, [r7, #28]
 800e31a:	440a      	add	r2, r1
 800e31c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e320:	0cdb      	lsrs	r3, r3, #19
 800e322:	04db      	lsls	r3, r3, #19
 800e324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	015a      	lsls	r2, r3, #5
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	4413      	add	r3, r2
 800e32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	69ba      	ldr	r2, [r7, #24]
 800e336:	0151      	lsls	r1, r2, #5
 800e338:	69fa      	ldr	r2, [r7, #28]
 800e33a:	440a      	add	r2, r1
 800e33c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e340:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e344:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e348:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d126      	bne.n	800e3a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	015a      	lsls	r2, r3, #5
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	4413      	add	r3, r2
 800e35a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e35e:	691a      	ldr	r2, [r3, #16]
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e368:	69b9      	ldr	r1, [r7, #24]
 800e36a:	0148      	lsls	r0, r1, #5
 800e36c:	69f9      	ldr	r1, [r7, #28]
 800e36e:	4401      	add	r1, r0
 800e370:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e374:	4313      	orrs	r3, r2
 800e376:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	0151      	lsls	r1, r2, #5
 800e38a:	69fa      	ldr	r2, [r7, #28]
 800e38c:	440a      	add	r2, r1
 800e38e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e392:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e396:	6113      	str	r3, [r2, #16]
 800e398:	e03a      	b.n	800e410 <USB_EPStartXfer+0x3e4>
 800e39a:	bf00      	nop
 800e39c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	699a      	ldr	r2, [r3, #24]
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	1e5a      	subs	r2, r3, #1
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	8afa      	ldrh	r2, [r7, #22]
 800e3bc:	fb03 f202 	mul.w	r2, r3, r2
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	015a      	lsls	r2, r3, #5
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3d0:	691a      	ldr	r2, [r3, #16]
 800e3d2:	8afb      	ldrh	r3, [r7, #22]
 800e3d4:	04d9      	lsls	r1, r3, #19
 800e3d6:	4b38      	ldr	r3, [pc, #224]	@ (800e4b8 <USB_EPStartXfer+0x48c>)
 800e3d8:	400b      	ands	r3, r1
 800e3da:	69b9      	ldr	r1, [r7, #24]
 800e3dc:	0148      	lsls	r0, r1, #5
 800e3de:	69f9      	ldr	r1, [r7, #28]
 800e3e0:	4401      	add	r1, r0
 800e3e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	015a      	lsls	r2, r3, #5
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3f6:	691a      	ldr	r2, [r3, #16]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	69db      	ldr	r3, [r3, #28]
 800e3fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e400:	69b9      	ldr	r1, [r7, #24]
 800e402:	0148      	lsls	r0, r1, #5
 800e404:	69f9      	ldr	r1, [r7, #28]
 800e406:	4401      	add	r1, r0
 800e408:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e40c:	4313      	orrs	r3, r2
 800e40e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d10d      	bne.n	800e432 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d009      	beq.n	800e432 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6919      	ldr	r1, [r3, #16]
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	015a      	lsls	r2, r3, #5
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	4413      	add	r3, r2
 800e42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e42e:	460a      	mov	r2, r1
 800e430:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	791b      	ldrb	r3, [r3, #4]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d128      	bne.n	800e48c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e446:	2b00      	cmp	r3, #0
 800e448:	d110      	bne.n	800e46c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	4413      	add	r3, r2
 800e452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	69ba      	ldr	r2, [r7, #24]
 800e45a:	0151      	lsls	r1, r2, #5
 800e45c:	69fa      	ldr	r2, [r7, #28]
 800e45e:	440a      	add	r2, r1
 800e460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e464:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e468:	6013      	str	r3, [r2, #0]
 800e46a:	e00f      	b.n	800e48c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	015a      	lsls	r2, r3, #5
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	4413      	add	r3, r2
 800e474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	69ba      	ldr	r2, [r7, #24]
 800e47c:	0151      	lsls	r1, r2, #5
 800e47e:	69fa      	ldr	r2, [r7, #28]
 800e480:	440a      	add	r2, r1
 800e482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e48a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	4413      	add	r3, r2
 800e494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	0151      	lsls	r1, r2, #5
 800e49e:	69fa      	ldr	r2, [r7, #28]
 800e4a0:	440a      	add	r2, r1
 800e4a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e4aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	1ff80000 	.word	0x1ff80000

0800e4bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	785b      	ldrb	r3, [r3, #1]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	f040 80ce 	bne.w	800e67a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d132      	bne.n	800e54c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	015a      	lsls	r2, r3, #5
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	0151      	lsls	r1, r2, #5
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	440a      	add	r2, r1
 800e4fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e500:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e504:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	015a      	lsls	r2, r3, #5
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	4413      	add	r3, r2
 800e512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e516:	691b      	ldr	r3, [r3, #16]
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	0151      	lsls	r1, r2, #5
 800e51c:	697a      	ldr	r2, [r7, #20]
 800e51e:	440a      	add	r2, r1
 800e520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e528:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	015a      	lsls	r2, r3, #5
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	4413      	add	r3, r2
 800e532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e536:	691b      	ldr	r3, [r3, #16]
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	0151      	lsls	r1, r2, #5
 800e53c:	697a      	ldr	r2, [r7, #20]
 800e53e:	440a      	add	r2, r1
 800e540:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e544:	0cdb      	lsrs	r3, r3, #19
 800e546:	04db      	lsls	r3, r3, #19
 800e548:	6113      	str	r3, [r2, #16]
 800e54a:	e04e      	b.n	800e5ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	015a      	lsls	r2, r3, #5
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	4413      	add	r3, r2
 800e554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	693a      	ldr	r2, [r7, #16]
 800e55c:	0151      	lsls	r1, r2, #5
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	440a      	add	r2, r1
 800e562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e566:	0cdb      	lsrs	r3, r3, #19
 800e568:	04db      	lsls	r3, r3, #19
 800e56a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	0151      	lsls	r1, r2, #5
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	440a      	add	r2, r1
 800e582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e586:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e58a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e58e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	699a      	ldr	r2, [r3, #24]
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d903      	bls.n	800e5a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	68da      	ldr	r2, [r3, #12]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	0151      	lsls	r1, r2, #5
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	440a      	add	r2, r1
 800e5ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e5c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	015a      	lsls	r2, r3, #5
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5d0:	691a      	ldr	r2, [r3, #16]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5da:	6939      	ldr	r1, [r7, #16]
 800e5dc:	0148      	lsls	r0, r1, #5
 800e5de:	6979      	ldr	r1, [r7, #20]
 800e5e0:	4401      	add	r1, r0
 800e5e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e5ea:	79fb      	ldrb	r3, [r7, #7]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d11e      	bne.n	800e62e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	695b      	ldr	r3, [r3, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e604:	461a      	mov	r2, r3
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	4413      	add	r3, r2
 800e614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	693a      	ldr	r2, [r7, #16]
 800e61c:	0151      	lsls	r1, r2, #5
 800e61e:	697a      	ldr	r2, [r7, #20]
 800e620:	440a      	add	r2, r1
 800e622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e626:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e62a:	6013      	str	r3, [r2, #0]
 800e62c:	e097      	b.n	800e75e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	015a      	lsls	r2, r3, #5
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	4413      	add	r3, r2
 800e636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	0151      	lsls	r1, r2, #5
 800e640:	697a      	ldr	r2, [r7, #20]
 800e642:	440a      	add	r2, r1
 800e644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e648:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e64c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 8083 	beq.w	800e75e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e65e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f003 030f 	and.w	r3, r3, #15
 800e668:	2101      	movs	r1, #1
 800e66a:	fa01 f303 	lsl.w	r3, r1, r3
 800e66e:	6979      	ldr	r1, [r7, #20]
 800e670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e674:	4313      	orrs	r3, r2
 800e676:	634b      	str	r3, [r1, #52]	@ 0x34
 800e678:	e071      	b.n	800e75e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	015a      	lsls	r2, r3, #5
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	4413      	add	r3, r2
 800e682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	693a      	ldr	r2, [r7, #16]
 800e68a:	0151      	lsls	r1, r2, #5
 800e68c:	697a      	ldr	r2, [r7, #20]
 800e68e:	440a      	add	r2, r1
 800e690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e694:	0cdb      	lsrs	r3, r3, #19
 800e696:	04db      	lsls	r3, r3, #19
 800e698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	015a      	lsls	r2, r3, #5
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	693a      	ldr	r2, [r7, #16]
 800e6aa:	0151      	lsls	r1, r2, #5
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	440a      	add	r2, r1
 800e6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e6b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e6bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d003      	beq.n	800e6ce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	68da      	ldr	r2, [r3, #12]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	68da      	ldr	r2, [r3, #12]
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	015a      	lsls	r2, r3, #5
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	4413      	add	r3, r2
 800e6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	693a      	ldr	r2, [r7, #16]
 800e6e6:	0151      	lsls	r1, r2, #5
 800e6e8:	697a      	ldr	r2, [r7, #20]
 800e6ea:	440a      	add	r2, r1
 800e6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	015a      	lsls	r2, r3, #5
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e702:	691a      	ldr	r2, [r3, #16]
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	69db      	ldr	r3, [r3, #28]
 800e708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e70c:	6939      	ldr	r1, [r7, #16]
 800e70e:	0148      	lsls	r0, r1, #5
 800e710:	6979      	ldr	r1, [r7, #20]
 800e712:	4401      	add	r1, r0
 800e714:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e718:	4313      	orrs	r3, r2
 800e71a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e71c:	79fb      	ldrb	r3, [r7, #7]
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d10d      	bne.n	800e73e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d009      	beq.n	800e73e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6919      	ldr	r1, [r3, #16]
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	4413      	add	r3, r2
 800e736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e73a:	460a      	mov	r2, r1
 800e73c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	015a      	lsls	r2, r3, #5
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	4413      	add	r3, r2
 800e746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	0151      	lsls	r1, r2, #5
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	440a      	add	r2, r1
 800e754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e758:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e75c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e776:	2300      	movs	r3, #0
 800e778:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e77a:	2300      	movs	r3, #0
 800e77c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	785b      	ldrb	r3, [r3, #1]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d14a      	bne.n	800e820 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e79e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7a2:	f040 8086 	bne.w	800e8b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	015a      	lsls	r2, r3, #5
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	7812      	ldrb	r2, [r2, #0]
 800e7ba:	0151      	lsls	r1, r2, #5
 800e7bc:	693a      	ldr	r2, [r7, #16]
 800e7be:	440a      	add	r2, r1
 800e7c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e7c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	015a      	lsls	r2, r3, #5
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	7812      	ldrb	r2, [r2, #0]
 800e7de:	0151      	lsls	r1, r2, #5
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	440a      	add	r2, r1
 800e7e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d902      	bls.n	800e804 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	75fb      	strb	r3, [r7, #23]
          break;
 800e802:	e056      	b.n	800e8b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	015a      	lsls	r2, r3, #5
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	4413      	add	r3, r2
 800e80e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e81c:	d0e7      	beq.n	800e7ee <USB_EPStopXfer+0x82>
 800e81e:	e048      	b.n	800e8b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	015a      	lsls	r2, r3, #5
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	4413      	add	r3, r2
 800e82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e838:	d13b      	bne.n	800e8b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	015a      	lsls	r2, r3, #5
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	4413      	add	r3, r2
 800e844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	7812      	ldrb	r2, [r2, #0]
 800e84e:	0151      	lsls	r1, r2, #5
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	440a      	add	r2, r1
 800e854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e858:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e85c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	015a      	lsls	r2, r3, #5
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	4413      	add	r3, r2
 800e868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	683a      	ldr	r2, [r7, #0]
 800e870:	7812      	ldrb	r2, [r2, #0]
 800e872:	0151      	lsls	r1, r2, #5
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	440a      	add	r2, r1
 800e878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e87c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	3301      	adds	r3, #1
 800e886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e88e:	4293      	cmp	r3, r2
 800e890:	d902      	bls.n	800e898 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	75fb      	strb	r3, [r7, #23]
          break;
 800e896:	e00c      	b.n	800e8b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	015a      	lsls	r2, r3, #5
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8b0:	d0e7      	beq.n	800e882 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	371c      	adds	r7, #28
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b089      	sub	sp, #36	@ 0x24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	71fb      	strb	r3, [r7, #7]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e8de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d123      	bne.n	800e92e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e8e6:	88bb      	ldrh	r3, [r7, #4]
 800e8e8:	3303      	adds	r3, #3
 800e8ea:	089b      	lsrs	r3, r3, #2
 800e8ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61bb      	str	r3, [r7, #24]
 800e8f2:	e018      	b.n	800e926 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	031a      	lsls	r2, r3, #12
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e900:	461a      	mov	r2, r3
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	3301      	adds	r3, #1
 800e90c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	3301      	adds	r3, #1
 800e912:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	3301      	adds	r3, #1
 800e918:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	3301      	adds	r3, #1
 800e91e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	3301      	adds	r3, #1
 800e924:	61bb      	str	r3, [r7, #24]
 800e926:	69ba      	ldr	r2, [r7, #24]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d3e2      	bcc.n	800e8f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3724      	adds	r7, #36	@ 0x24
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b08b      	sub	sp, #44	@ 0x2c
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	4613      	mov	r3, r2
 800e948:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e952:	88fb      	ldrh	r3, [r7, #6]
 800e954:	089b      	lsrs	r3, r3, #2
 800e956:	b29b      	uxth	r3, r3
 800e958:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e95a:	88fb      	ldrh	r3, [r7, #6]
 800e95c:	f003 0303 	and.w	r3, r3, #3
 800e960:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e962:	2300      	movs	r3, #0
 800e964:	623b      	str	r3, [r7, #32]
 800e966:	e014      	b.n	800e992 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e972:	601a      	str	r2, [r3, #0]
    pDest++;
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	3301      	adds	r3, #1
 800e978:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e97c:	3301      	adds	r3, #1
 800e97e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e982:	3301      	adds	r3, #1
 800e984:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e988:	3301      	adds	r3, #1
 800e98a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	3301      	adds	r3, #1
 800e990:	623b      	str	r3, [r7, #32]
 800e992:	6a3a      	ldr	r2, [r7, #32]
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	429a      	cmp	r2, r3
 800e998:	d3e6      	bcc.n	800e968 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e99a:	8bfb      	ldrh	r3, [r7, #30]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d01e      	beq.n	800e9de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f107 0310 	add.w	r3, r7, #16
 800e9b0:	6812      	ldr	r2, [r2, #0]
 800e9b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e9b4:	693a      	ldr	r2, [r7, #16]
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c4:	701a      	strb	r2, [r3, #0]
      i++;
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e9d2:	8bfb      	ldrh	r3, [r7, #30]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e9d8:	8bfb      	ldrh	r3, [r7, #30]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1ea      	bne.n	800e9b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	372c      	adds	r7, #44	@ 0x2c
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	785b      	ldrb	r3, [r3, #1]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d12c      	bne.n	800ea62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	015a      	lsls	r2, r3, #5
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	4413      	add	r3, r2
 800ea10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	db12      	blt.n	800ea40 <USB_EPSetStall+0x54>
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00f      	beq.n	800ea40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	015a      	lsls	r2, r3, #5
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4413      	add	r3, r2
 800ea28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	0151      	lsls	r1, r2, #5
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	440a      	add	r2, r1
 800ea36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	015a      	lsls	r2, r3, #5
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	4413      	add	r3, r2
 800ea48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	0151      	lsls	r1, r2, #5
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	440a      	add	r2, r1
 800ea56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ea5e:	6013      	str	r3, [r2, #0]
 800ea60:	e02b      	b.n	800eaba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	015a      	lsls	r2, r3, #5
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	4413      	add	r3, r2
 800ea6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	db12      	blt.n	800ea9a <USB_EPSetStall+0xae>
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00f      	beq.n	800ea9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	015a      	lsls	r2, r3, #5
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	4413      	add	r3, r2
 800ea82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	0151      	lsls	r1, r2, #5
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	440a      	add	r2, r1
 800ea90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	015a      	lsls	r2, r3, #5
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	0151      	lsls	r1, r2, #5
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	440a      	add	r2, r1
 800eab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eab4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eab8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	785b      	ldrb	r3, [r3, #1]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d128      	bne.n	800eb36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	015a      	lsls	r2, r3, #5
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	4413      	add	r3, r2
 800eaec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	0151      	lsls	r1, r2, #5
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	440a      	add	r2, r1
 800eafa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eafe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	791b      	ldrb	r3, [r3, #4]
 800eb08:	2b03      	cmp	r3, #3
 800eb0a:	d003      	beq.n	800eb14 <USB_EPClearStall+0x4c>
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	791b      	ldrb	r3, [r3, #4]
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	d138      	bne.n	800eb86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	015a      	lsls	r2, r3, #5
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	0151      	lsls	r1, r2, #5
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	440a      	add	r2, r1
 800eb2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	e027      	b.n	800eb86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	015a      	lsls	r2, r3, #5
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	0151      	lsls	r1, r2, #5
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	440a      	add	r2, r1
 800eb4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	791b      	ldrb	r3, [r3, #4]
 800eb5a:	2b03      	cmp	r3, #3
 800eb5c:	d003      	beq.n	800eb66 <USB_EPClearStall+0x9e>
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	791b      	ldrb	r3, [r3, #4]
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d10f      	bne.n	800eb86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	015a      	lsls	r2, r3, #5
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68ba      	ldr	r2, [r7, #8]
 800eb76:	0151      	lsls	r1, r2, #5
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	440a      	add	r2, r1
 800eb7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800eba0:	2300      	movs	r3, #0
 800eba2:	617b      	str	r3, [r7, #20]
 800eba4:	e016      	b.n	800ebd4 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	015a      	lsls	r2, r3, #5
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	4413      	add	r3, r2
 800ebae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ebb8:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ebcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	617b      	str	r3, [r7, #20]
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2b0e      	cmp	r3, #14
 800ebd8:	d9e5      	bls.n	800eba6 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebec:	461a      	mov	r2, r3
 800ebee:	2300      	movs	r3, #0
 800ebf0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff f842 	bl	800dc88 <USB_FlushRxFifo>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <USB_StopDevice+0x7e>
  {
    return ret;
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
 800ec10:	e00b      	b.n	800ec2a <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800ec12:	2110      	movs	r1, #16
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff f803 	bl	800dc20 <USB_FlushTxFifo>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800ec1e:	7bfb      	ldrb	r3, [r7, #15]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <USB_StopDevice+0x94>
  {
    return ret;
 800ec24:	7bfb      	ldrb	r3, [r7, #15]
 800ec26:	e000      	b.n	800ec2a <USB_StopDevice+0x96>
  }

  return ret;
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3718      	adds	r7, #24
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ec32:	b480      	push	{r7}
 800ec34:	b085      	sub	sp, #20
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec50:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ec54:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	78fb      	ldrb	r3, [r7, #3]
 800ec60:	011b      	lsls	r3, r3, #4
 800ec62:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ec66:	68f9      	ldr	r1, [r7, #12]
 800ec68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ec70:	2300      	movs	r3, #0
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3714      	adds	r7, #20
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr

0800ec7e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ec7e:	b480      	push	{r7}
 800ec80:	b085      	sub	sp, #20
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ec98:	f023 0303 	bic.w	r3, r3, #3
 800ec9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecac:	f023 0302 	bic.w	r3, r3, #2
 800ecb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ecda:	f023 0303 	bic.w	r3, r3, #3
 800ecde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecee:	f043 0302 	orr.w	r3, r3, #2
 800ecf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ed02:	b480      	push	{r7}
 800ed04:	b085      	sub	sp, #20
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	4013      	ands	r3, r2
 800ed18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed3a:	699b      	ldr	r3, [r3, #24]
 800ed3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed44:	69db      	ldr	r3, [r3, #28]
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	4013      	ands	r3, r2
 800ed4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	0c1b      	lsrs	r3, r3, #16
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3714      	adds	r7, #20
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	b29b      	uxth	r3, r3
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	015a      	lsls	r2, r3, #5
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	4413      	add	r3, r2
 800eda8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edb6:	695b      	ldr	r3, [r3, #20]
 800edb8:	68ba      	ldr	r2, [r7, #8]
 800edba:	4013      	ands	r3, r2
 800edbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800edbe:	68bb      	ldr	r3, [r7, #8]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800edcc:	b480      	push	{r7}
 800edce:	b087      	sub	sp, #28
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	f003 030f 	and.w	r3, r3, #15
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	fa22 f303 	lsr.w	r3, r2, r3
 800edfc:	01db      	lsls	r3, r3, #7
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ee06:	78fb      	ldrb	r3, [r7, #3]
 800ee08:	015a      	lsls	r2, r3, #5
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	4013      	ands	r3, r2
 800ee18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee1a:	68bb      	ldr	r3, [r7, #8]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	371c      	adds	r7, #28
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	f003 0301 	and.w	r3, r3, #1
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee5e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ee62:	f023 0307 	bic.w	r3, r3, #7
 800ee66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ee76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
	...

0800ee8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b087      	sub	sp, #28
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	460b      	mov	r3, r1
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	333c      	adds	r3, #60	@ 0x3c
 800eea2:	3304      	adds	r3, #4
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	4a26      	ldr	r2, [pc, #152]	@ (800ef44 <USB_EP0_OutStart+0xb8>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d90a      	bls.n	800eec6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eec0:	d101      	bne.n	800eec6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	e037      	b.n	800ef36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eecc:	461a      	mov	r2, r3
 800eece:	2300      	movs	r3, #0
 800eed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eef4:	f043 0318 	orr.w	r3, r3, #24
 800eef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	697a      	ldr	r2, [r7, #20]
 800ef04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef08:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ef0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ef0e:	7afb      	ldrb	r3, [r7, #11]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d10f      	bne.n	800ef34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	697a      	ldr	r2, [r7, #20]
 800ef2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef2e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ef32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	371c      	adds	r7, #28
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	4f54300a 	.word	0x4f54300a

0800ef48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef50:	2300      	movs	r3, #0
 800ef52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	3301      	adds	r3, #1
 800ef58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	4a13      	ldr	r2, [pc, #76]	@ (800efac <USB_CoreReset+0x64>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d901      	bls.n	800ef66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ef62:	2303      	movs	r3, #3
 800ef64:	e01b      	b.n	800ef9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	daf2      	bge.n	800ef54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	f043 0201 	orr.w	r2, r3, #1
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	3301      	adds	r3, #1
 800ef82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4a09      	ldr	r2, [pc, #36]	@ (800efac <USB_CoreReset+0x64>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d901      	bls.n	800ef90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ef8c:	2303      	movs	r3, #3
 800ef8e:	e006      	b.n	800ef9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	691b      	ldr	r3, [r3, #16]
 800ef94:	f003 0301 	and.w	r3, r3, #1
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d0f0      	beq.n	800ef7e <USB_CoreReset+0x36>

  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	00030d40 	.word	0x00030d40

0800efb0 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a13      	ldr	r2, [pc, #76]	@ (800f008 <HAL_UART_RxCpltCallback+0x58>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d11f      	bne.n	800f000 <HAL_UART_RxCpltCallback+0x50>
 800efc0:	4b12      	ldr	r3, [pc, #72]	@ (800f00c <HAL_UART_RxCpltCallback+0x5c>)
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d01b      	beq.n	800f000 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800efc8:	2201      	movs	r2, #1
 800efca:	4911      	ldr	r1, [pc, #68]	@ (800f010 <HAL_UART_RxCpltCallback+0x60>)
 800efcc:	480e      	ldr	r0, [pc, #56]	@ (800f008 <HAL_UART_RxCpltCallback+0x58>)
 800efce:	f7fc fe37 	bl	800bc40 <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800efd2:	4b10      	ldr	r3, [pc, #64]	@ (800f014 <HAL_UART_RxCpltCallback+0x64>)
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d10a      	bne.n	800eff0 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800efda:	4b0d      	ldr	r3, [pc, #52]	@ (800f010 <HAL_UART_RxCpltCallback+0x60>)
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800efe0:	4b0d      	ldr	r3, [pc, #52]	@ (800f018 <HAL_UART_RxCpltCallback+0x68>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	7bfa      	ldrb	r2, [r7, #15]
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f002 f90d 	bl	8011208 <embeddedCliReceiveChar>
 800efee:	e002      	b.n	800eff6 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800eff0:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <HAL_UART_RxCpltCallback+0x6c>)
 800eff2:	2201      	movs	r2, #1
 800eff4:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800eff6:	f7f4 fe87 	bl	8003d08 <HAL_GetTick>
 800effa:	4603      	mov	r3, r0
 800effc:	4a08      	ldr	r2, [pc, #32]	@ (800f020 <HAL_UART_RxCpltCallback+0x70>)
 800effe:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f000:	bf00      	nop
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	200019cc 	.word	0x200019cc
 800f00c:	20001a89 	.word	0x20001a89
 800f010:	20001a88 	.word	0x20001a88
 800f014:	20001a8a 	.word	0x20001a8a
 800f018:	20001a7c 	.word	0x20001a7c
 800f01c:	20001a8b 	.word	0x20001a8b
 800f020:	20001718 	.word	0x20001718

0800f024 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	460b      	mov	r3, r1
 800f02e:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f030:	78fb      	ldrb	r3, [r7, #3]
 800f032:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f034:	f107 010f 	add.w	r1, r7, #15
 800f038:	2364      	movs	r3, #100	@ 0x64
 800f03a:	2201      	movs	r2, #1
 800f03c:	4803      	ldr	r0, [pc, #12]	@ (800f04c <writeCharToCli+0x28>)
 800f03e:	f7fc fd6d 	bl	800bb1c <HAL_UART_Transmit>
}
 800f042:	bf00      	nop
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	200019cc 	.word	0x200019cc

0800f050 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f050:	b40e      	push	{r1, r2, r3}
 800f052:	b580      	push	{r7, lr}
 800f054:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f058:	af00      	add	r7, sp, #0
 800f05a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f05e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f062:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f064:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f068:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f06c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f070:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f072:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f076:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f07a:	f107 000c 	add.w	r0, r7, #12
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f084:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f088:	f00e f89c 	bl	801d1c4 <vsniprintf>
 800f08c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f090:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f094:	2b00      	cmp	r3, #0
 800f096:	da08      	bge.n	800f0aa <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f098:	4b0c      	ldr	r3, [pc, #48]	@ (800f0cc <cli_printf+0x7c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	221d      	movs	r2, #29
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	480b      	ldr	r0, [pc, #44]	@ (800f0d0 <cli_printf+0x80>)
 800f0a4:	f00d ff82 	bl	801cfac <fwrite>
 800f0a8:	e009      	b.n	800f0be <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f0aa:	f107 020c 	add.w	r2, r7, #12
 800f0ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f0b2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	f002 f98b 	bl	80113d4 <embeddedCliPrint>
}
 800f0be:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0c8:	b003      	add	sp, #12
 800f0ca:	4770      	bx	lr
 800f0cc:	20000174 	.word	0x20000174
 800f0d0:	080209c4 	.word	0x080209c4

0800f0d4 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b088      	sub	sp, #32
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f0e4:	f7f4 fe10 	bl	8003d08 <HAL_GetTick>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	4a5b      	ldr	r2, [pc, #364]	@ (800f258 <receiveString+0x184>)
 800f0ec:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f0ee:	4b5b      	ldr	r3, [pc, #364]	@ (800f25c <receiveString+0x188>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 80a0 	beq.w	800f238 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f0f8:	4b59      	ldr	r3, [pc, #356]	@ (800f260 <receiveString+0x18c>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	2b0d      	cmp	r3, #13
 800f0fe:	d004      	beq.n	800f10a <receiveString+0x36>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	3b01      	subs	r3, #1
 800f104:	69fa      	ldr	r2, [r7, #28]
 800f106:	429a      	cmp	r2, r3
 800f108:	d164      	bne.n	800f1d4 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	4413      	add	r3, r2
 800f110:	2200      	movs	r2, #0
 800f112:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f114:	4b51      	ldr	r3, [pc, #324]	@ (800f25c <receiveString+0x188>)
 800f116:	2200      	movs	r2, #0
 800f118:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f11a:	2300      	movs	r3, #0
 800f11c:	61bb      	str	r3, [r7, #24]
 800f11e:	e052      	b.n	800f1c6 <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	e00b      	b.n	800f13e <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	3301      	adds	r3, #1
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	441a      	add	r2, r3
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	68b9      	ldr	r1, [r7, #8]
 800f132:	440b      	add	r3, r1
 800f134:	7812      	ldrb	r2, [r2, #0]
 800f136:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	3301      	adds	r3, #1
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	4413      	add	r3, r2
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1ed      	bne.n	800f126 <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	4413      	add	r3, r2
 800f150:	2200      	movs	r2, #0
 800f152:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	4413      	add	r3, r2
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b60      	cmp	r3, #96	@ 0x60
 800f15e:	d905      	bls.n	800f16c <receiveString+0x98>
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	4413      	add	r3, r2
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	2b7a      	cmp	r3, #122	@ 0x7a
 800f16a:	d929      	bls.n	800f1c0 <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	4413      	add	r3, r2
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	2b40      	cmp	r3, #64	@ 0x40
 800f176:	d905      	bls.n	800f184 <receiveString+0xb0>
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	4413      	add	r3, r2
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	2b5a      	cmp	r3, #90	@ 0x5a
 800f182:	d91d      	bls.n	800f1c0 <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	4413      	add	r3, r2
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	2b5f      	cmp	r3, #95	@ 0x5f
 800f18e:	d017      	beq.n	800f1c0 <receiveString+0xec>
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	4413      	add	r3, r2
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2b3a      	cmp	r3, #58	@ 0x3a
 800f19a:	d011      	beq.n	800f1c0 <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800f1a6:	d905      	bls.n	800f1b4 <receiveString+0xe0>
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	2b39      	cmp	r3, #57	@ 0x39
 800f1b2:	d905      	bls.n	800f1c0 <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1af      	bne.n	800f120 <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	61bb      	str	r3, [r7, #24]
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1c0      	bne.n	800f154 <receiveString+0x80>
					}
				}
				break;
 800f1d2:	e03d      	b.n	800f250 <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f1d4:	4b22      	ldr	r3, [pc, #136]	@ (800f260 <receiveString+0x18c>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	d003      	beq.n	800f1e4 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f1dc:	4b20      	ldr	r3, [pc, #128]	@ (800f260 <receiveString+0x18c>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1e2:	d117      	bne.n	800f214 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2108      	movs	r1, #8
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2120      	movs	r1, #32
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2108      	movs	r1, #8
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	4798      	blx	r3
					--index;
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	3b01      	subs	r3, #1
 800f206:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	4413      	add	r3, r2
 800f20e:	2200      	movs	r2, #0
 800f210:	701a      	strb	r2, [r3, #0]
 800f212:	e00e      	b.n	800f232 <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	1c5a      	adds	r2, r3, #1
 800f218:	61fa      	str	r2, [r7, #28]
 800f21a:	68ba      	ldr	r2, [r7, #8]
 800f21c:	4413      	add	r3, r2
 800f21e:	4a10      	ldr	r2, [pc, #64]	@ (800f260 <receiveString+0x18c>)
 800f220:	7812      	ldrb	r2, [r2, #0]
 800f222:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a0d      	ldr	r2, [pc, #52]	@ (800f260 <receiveString+0x18c>)
 800f22a:	7812      	ldrb	r2, [r2, #0]
 800f22c:	4611      	mov	r1, r2
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f232:	4b0a      	ldr	r3, [pc, #40]	@ (800f25c <receiveString+0x188>)
 800f234:	2200      	movs	r2, #0
 800f236:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - prev_max_wait_time > max_wait_time) {
 800f238:	f7f4 fd66 	bl	8003d08 <HAL_GetTick>
 800f23c:	4602      	mov	r2, r0
 800f23e:	4b06      	ldr	r3, [pc, #24]	@ (800f258 <receiveString+0x184>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	1ad2      	subs	r2, r2, r3
 800f244:	4b07      	ldr	r3, [pc, #28]	@ (800f264 <receiveString+0x190>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d800      	bhi.n	800f24e <receiveString+0x17a>
		if (flag_cli) {
 800f24c:	e74f      	b.n	800f0ee <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
 800f24e:	bf00      	nop
		}

	}
}
 800f250:	bf00      	nop
 800f252:	3720      	adds	r7, #32
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20001a80 	.word	0x20001a80
 800f25c:	20001a8b 	.word	0x20001a8b
 800f260:	20001a88 	.word	0x20001a88
 800f264:	20000020 	.word	0x20000020

0800f268 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f274:	4903      	ldr	r1, [pc, #12]	@ (800f284 <onClearCLI+0x1c>)
 800f276:	68f8      	ldr	r0, [r7, #12]
 800f278:	f7ff feea 	bl	800f050 <cli_printf>
}
 800f27c:	bf00      	nop
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	080209e4 	.word	0x080209e4

0800f288 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f288:	b580      	push	{r7, lr}
 800f28a:	b092      	sub	sp, #72	@ 0x48
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f294:	4b24      	ldr	r3, [pc, #144]	@ (800f328 <debug_scd4x_PM25+0xa0>)
 800f296:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f298:	4924      	ldr	r1, [pc, #144]	@ (800f32c <debug_scd4x_PM25+0xa4>)
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7ff fed8 	bl	800f050 <cli_printf>

	cli_other = 1;
 800f2a0:	4b23      	ldr	r3, [pc, #140]	@ (800f330 <debug_scd4x_PM25+0xa8>)
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f2a6:	4b23      	ldr	r3, [pc, #140]	@ (800f334 <debug_scd4x_PM25+0xac>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f2ac:	f107 0310 	add.w	r3, r7, #16
 800f2b0:	2232      	movs	r2, #50	@ 0x32
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f7ff ff0d 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f2ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f2bc:	f7f0 fff0 	bl	80002a0 <strlen>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f2c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2ca:	481b      	ldr	r0, [pc, #108]	@ (800f338 <debug_scd4x_PM25+0xb0>)
 800f2cc:	f7fc fc26 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f2d0:	f107 0310 	add.w	r3, r7, #16
 800f2d4:	2179      	movs	r1, #121	@ 0x79
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f00e f838 	bl	801d34c <strchr>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d007      	beq.n	800f2f2 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f2e2:	4b16      	ldr	r3, [pc, #88]	@ (800f33c <debug_scd4x_PM25+0xb4>)
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f2e8:	4915      	ldr	r1, [pc, #84]	@ (800f340 <debug_scd4x_PM25+0xb8>)
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff feb0 	bl	800f050 <cli_printf>
 800f2f0:	e00f      	b.n	800f312 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f2f2:	f107 0310 	add.w	r3, r7, #16
 800f2f6:	216e      	movs	r1, #110	@ 0x6e
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f00e f827 	bl	801d34c <strchr>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d006      	beq.n	800f312 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f304:	4b0d      	ldr	r3, [pc, #52]	@ (800f33c <debug_scd4x_PM25+0xb4>)
 800f306:	2200      	movs	r2, #0
 800f308:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f30a:	490e      	ldr	r1, [pc, #56]	@ (800f344 <debug_scd4x_PM25+0xbc>)
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f7ff fe9f 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 800f312:	4b08      	ldr	r3, [pc, #32]	@ (800f334 <debug_scd4x_PM25+0xac>)
 800f314:	2200      	movs	r2, #0
 800f316:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f318:	4b05      	ldr	r3, [pc, #20]	@ (800f330 <debug_scd4x_PM25+0xa8>)
 800f31a:	2200      	movs	r2, #0
 800f31c:	701a      	strb	r2, [r3, #0]
}
 800f31e:	bf00      	nop
 800f320:	3748      	adds	r7, #72	@ 0x48
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	080209ec 	.word	0x080209ec
 800f32c:	080209f0 	.word	0x080209f0
 800f330:	20001a8a 	.word	0x20001a8a
 800f334:	20001a8b 	.word	0x20001a8b
 800f338:	200019cc 	.word	0x200019cc
 800f33c:	200014d0 	.word	0x200014d0
 800f340:	08020a24 	.word	0x08020a24
 800f344:	08020a34 	.word	0x08020a34

0800f348 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f354:	f7f3 f832 	bl	80023bc <ver_GetUid>
 800f358:	4603      	mov	r3, r0
 800f35a:	461a      	mov	r2, r3
 800f35c:	4903      	ldr	r1, [pc, #12]	@ (800f36c <DeviceSignature+0x24>)
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f7ff fe76 	bl	800f050 <cli_printf>
}
 800f364:	bf00      	nop
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	08020a44 	.word	0x08020a44

0800f370 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f370:	b580      	push	{r7, lr}
 800f372:	b092      	sub	sp, #72	@ 0x48
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f37c:	4b2d      	ldr	r3, [pc, #180]	@ (800f434 <SetID+0xc4>)
 800f37e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f380:	492d      	ldr	r1, [pc, #180]	@ (800f438 <SetID+0xc8>)
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7ff fe64 	bl	800f050 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f388:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f38a:	f7f0 ff89 	bl	80002a0 <strlen>
 800f38e:	4603      	mov	r3, r0
 800f390:	b29a      	uxth	r2, r3
 800f392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f396:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f398:	4828      	ldr	r0, [pc, #160]	@ (800f43c <SetID+0xcc>)
 800f39a:	f7fc fbbf 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f39e:	4928      	ldr	r1, [pc, #160]	@ (800f440 <SetID+0xd0>)
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff fe55 	bl	800f050 <cli_printf>
	cli_other = 1;
 800f3a6:	4b27      	ldr	r3, [pc, #156]	@ (800f444 <SetID+0xd4>)
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f3ac:	4b26      	ldr	r3, [pc, #152]	@ (800f448 <SetID+0xd8>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f3b2:	f107 0310 	add.w	r3, r7, #16
 800f3b6:	2232      	movs	r2, #50	@ 0x32
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	f7ff fe8a 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f3c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f3c2:	f7f0 ff6d 	bl	80002a0 <strlen>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f3ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3d0:	481a      	ldr	r0, [pc, #104]	@ (800f43c <SetID+0xcc>)
 800f3d2:	f7fc fba3 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f3d6:	f107 0310 	add.w	r3, r7, #16
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7f0 ff60 	bl	80002a0 <strlen>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f3e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f3ea:	2b1d      	cmp	r3, #29
 800f3ec:	d814      	bhi.n	800f418 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f3ee:	7c3b      	ldrb	r3, [r7, #16]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d015      	beq.n	800f420 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f3f4:	f107 0310 	add.w	r3, r7, #16
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4814      	ldr	r0, [pc, #80]	@ (800f44c <SetID+0xdc>)
 800f3fc:	f00e f8ad 	bl	801d55a <strcpy>
				set_param_flags();
 800f400:	4b13      	ldr	r3, [pc, #76]	@ (800f450 <SetID+0xe0>)
 800f402:	2201      	movs	r2, #1
 800f404:	701a      	strb	r2, [r3, #0]
 800f406:	4b13      	ldr	r3, [pc, #76]	@ (800f454 <SetID+0xe4>)
 800f408:	2201      	movs	r2, #1
 800f40a:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f40c:	4a0f      	ldr	r2, [pc, #60]	@ (800f44c <SetID+0xdc>)
 800f40e:	4912      	ldr	r1, [pc, #72]	@ (800f458 <SetID+0xe8>)
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7ff fe1d 	bl	800f050 <cli_printf>
 800f416:	e003      	b.n	800f420 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f418:	4910      	ldr	r1, [pc, #64]	@ (800f45c <SetID+0xec>)
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f7ff fe18 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 800f420:	4b09      	ldr	r3, [pc, #36]	@ (800f448 <SetID+0xd8>)
 800f422:	2200      	movs	r2, #0
 800f424:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f426:	4b07      	ldr	r3, [pc, #28]	@ (800f444 <SetID+0xd4>)
 800f428:	2200      	movs	r2, #0
 800f42a:	701a      	strb	r2, [r3, #0]

}
 800f42c:	bf00      	nop
 800f42e:	3748      	adds	r7, #72	@ 0x48
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	080209ec 	.word	0x080209ec
 800f438:	08020a60 	.word	0x08020a60
 800f43c:	200019cc 	.word	0x200019cc
 800f440:	08020a98 	.word	0x08020a98
 800f444:	20001a8a 	.word	0x20001a8a
 800f448:	20001a8b 	.word	0x20001a8b
 800f44c:	200013c1 	.word	0x200013c1
 800f450:	200014d1 	.word	0x200014d1
 800f454:	200014d2 	.word	0x200014d2
 800f458:	08020ac0 	.word	0x08020ac0
 800f45c:	08020ad4 	.word	0x08020ad4

0800f460 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b092      	sub	sp, #72	@ 0x48
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f46c:	4b2d      	ldr	r3, [pc, #180]	@ (800f524 <SetLocation+0xc4>)
 800f46e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f470:	492d      	ldr	r1, [pc, #180]	@ (800f528 <SetLocation+0xc8>)
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7ff fdec 	bl	800f050 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f478:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f47a:	f7f0 ff11 	bl	80002a0 <strlen>
 800f47e:	4603      	mov	r3, r0
 800f480:	b29a      	uxth	r2, r3
 800f482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f486:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f488:	4828      	ldr	r0, [pc, #160]	@ (800f52c <SetLocation+0xcc>)
 800f48a:	f7fc fb47 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f48e:	4928      	ldr	r1, [pc, #160]	@ (800f530 <SetLocation+0xd0>)
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	f7ff fddd 	bl	800f050 <cli_printf>
	cli_other = 1;
 800f496:	4b27      	ldr	r3, [pc, #156]	@ (800f534 <SetLocation+0xd4>)
 800f498:	2201      	movs	r2, #1
 800f49a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f49c:	4b26      	ldr	r3, [pc, #152]	@ (800f538 <SetLocation+0xd8>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f4a2:	f107 0310 	add.w	r3, r7, #16
 800f4a6:	2232      	movs	r2, #50	@ 0x32
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f7ff fe12 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f4b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f4b2:	f7f0 fef5 	bl	80002a0 <strlen>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f4be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f4c0:	481a      	ldr	r0, [pc, #104]	@ (800f52c <SetLocation+0xcc>)
 800f4c2:	f7fc fb2b 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f4c6:	f107 0310 	add.w	r3, r7, #16
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f0 fee8 	bl	80002a0 <strlen>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f4d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f4da:	2b0e      	cmp	r3, #14
 800f4dc:	d814      	bhi.n	800f508 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f4de:	7c3b      	ldrb	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d015      	beq.n	800f510 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f4e4:	f107 0310 	add.w	r3, r7, #16
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4814      	ldr	r0, [pc, #80]	@ (800f53c <SetLocation+0xdc>)
 800f4ec:	f00e f835 	bl	801d55a <strcpy>
				set_param_flags();
 800f4f0:	4b13      	ldr	r3, [pc, #76]	@ (800f540 <SetLocation+0xe0>)
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	4b13      	ldr	r3, [pc, #76]	@ (800f544 <SetLocation+0xe4>)
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f4fc:	4a0f      	ldr	r2, [pc, #60]	@ (800f53c <SetLocation+0xdc>)
 800f4fe:	4912      	ldr	r1, [pc, #72]	@ (800f548 <SetLocation+0xe8>)
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f7ff fda5 	bl	800f050 <cli_printf>
 800f506:	e003      	b.n	800f510 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f508:	4910      	ldr	r1, [pc, #64]	@ (800f54c <SetLocation+0xec>)
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f7ff fda0 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 800f510:	4b09      	ldr	r3, [pc, #36]	@ (800f538 <SetLocation+0xd8>)
 800f512:	2200      	movs	r2, #0
 800f514:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f516:	4b07      	ldr	r3, [pc, #28]	@ (800f534 <SetLocation+0xd4>)
 800f518:	2200      	movs	r2, #0
 800f51a:	701a      	strb	r2, [r3, #0]

}
 800f51c:	bf00      	nop
 800f51e:	3748      	adds	r7, #72	@ 0x48
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	080209ec 	.word	0x080209ec
 800f528:	08020a60 	.word	0x08020a60
 800f52c:	200019cc 	.word	0x200019cc
 800f530:	08020ae4 	.word	0x08020ae4
 800f534:	20001a8a 	.word	0x20001a8a
 800f538:	20001a8b 	.word	0x20001a8b
 800f53c:	200013f3 	.word	0x200013f3
 800f540:	200014d1 	.word	0x200014d1
 800f544:	200014d2 	.word	0x200014d2
 800f548:	08020b18 	.word	0x08020b18
 800f54c:	08020b30 	.word	0x08020b30

0800f550 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800f550:	b580      	push	{r7, lr}
 800f552:	b092      	sub	sp, #72	@ 0x48
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f55c:	4b2d      	ldr	r3, [pc, #180]	@ (800f614 <Setgroup+0xc4>)
 800f55e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f560:	492d      	ldr	r1, [pc, #180]	@ (800f618 <Setgroup+0xc8>)
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f7ff fd74 	bl	800f050 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f568:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f56a:	f7f0 fe99 	bl	80002a0 <strlen>
 800f56e:	4603      	mov	r3, r0
 800f570:	b29a      	uxth	r2, r3
 800f572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f576:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f578:	4828      	ldr	r0, [pc, #160]	@ (800f61c <Setgroup+0xcc>)
 800f57a:	f7fc facf 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800f57e:	4928      	ldr	r1, [pc, #160]	@ (800f620 <Setgroup+0xd0>)
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7ff fd65 	bl	800f050 <cli_printf>
	cli_other = 1;
 800f586:	4b27      	ldr	r3, [pc, #156]	@ (800f624 <Setgroup+0xd4>)
 800f588:	2201      	movs	r2, #1
 800f58a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f58c:	4b26      	ldr	r3, [pc, #152]	@ (800f628 <Setgroup+0xd8>)
 800f58e:	2200      	movs	r2, #0
 800f590:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f592:	f107 0310 	add.w	r3, r7, #16
 800f596:	2232      	movs	r2, #50	@ 0x32
 800f598:	4619      	mov	r1, r3
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f7ff fd9a 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f5a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f5a2:	f7f0 fe7d 	bl	80002a0 <strlen>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f5ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f5b0:	481a      	ldr	r0, [pc, #104]	@ (800f61c <Setgroup+0xcc>)
 800f5b2:	f7fc fab3 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f5b6:	f107 0310 	add.w	r3, r7, #16
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7f0 fe70 	bl	80002a0 <strlen>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f5c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f5ca:	2b0e      	cmp	r3, #14
 800f5cc:	d814      	bhi.n	800f5f8 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800f5ce:	7c3b      	ldrb	r3, [r7, #16]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d015      	beq.n	800f600 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800f5d4:	f107 0310 	add.w	r3, r7, #16
 800f5d8:	4619      	mov	r1, r3
 800f5da:	4814      	ldr	r0, [pc, #80]	@ (800f62c <Setgroup+0xdc>)
 800f5dc:	f00d ffbd 	bl	801d55a <strcpy>
				set_param_flags();
 800f5e0:	4b13      	ldr	r3, [pc, #76]	@ (800f630 <Setgroup+0xe0>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	701a      	strb	r2, [r3, #0]
 800f5e6:	4b13      	ldr	r3, [pc, #76]	@ (800f634 <Setgroup+0xe4>)
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800f5ec:	4a0f      	ldr	r2, [pc, #60]	@ (800f62c <Setgroup+0xdc>)
 800f5ee:	4912      	ldr	r1, [pc, #72]	@ (800f638 <Setgroup+0xe8>)
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f7ff fd2d 	bl	800f050 <cli_printf>
 800f5f6:	e003      	b.n	800f600 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800f5f8:	4910      	ldr	r1, [pc, #64]	@ (800f63c <Setgroup+0xec>)
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f7ff fd28 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 800f600:	4b09      	ldr	r3, [pc, #36]	@ (800f628 <Setgroup+0xd8>)
 800f602:	2200      	movs	r2, #0
 800f604:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f606:	4b07      	ldr	r3, [pc, #28]	@ (800f624 <Setgroup+0xd4>)
 800f608:	2200      	movs	r2, #0
 800f60a:	701a      	strb	r2, [r3, #0]

}
 800f60c:	bf00      	nop
 800f60e:	3748      	adds	r7, #72	@ 0x48
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	080209ec 	.word	0x080209ec
 800f618:	08020a60 	.word	0x08020a60
 800f61c:	200019cc 	.word	0x200019cc
 800f620:	08020b9c 	.word	0x08020b9c
 800f624:	20001a8a 	.word	0x20001a8a
 800f628:	20001a8b 	.word	0x20001a8b
 800f62c:	20001457 	.word	0x20001457
 800f630:	200014d1 	.word	0x200014d1
 800f634:	200014d2 	.word	0x200014d2
 800f638:	08020bcc 	.word	0x08020bcc
 800f63c:	08020be0 	.word	0x08020be0

0800f640 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800f64c:	4a04      	ldr	r2, [pc, #16]	@ (800f660 <GetID+0x20>)
 800f64e:	4905      	ldr	r1, [pc, #20]	@ (800f664 <GetID+0x24>)
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f7ff fcfd 	bl	800f050 <cli_printf>
}
 800f656:	bf00      	nop
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	200013c1 	.word	0x200013c1
 800f664:	08020bf4 	.word	0x08020bf4

0800f668 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800f674:	4a04      	ldr	r2, [pc, #16]	@ (800f688 <GetLocation+0x20>)
 800f676:	4905      	ldr	r1, [pc, #20]	@ (800f68c <GetLocation+0x24>)
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7ff fce9 	bl	800f050 <cli_printf>

}
 800f67e:	bf00      	nop
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	200013f3 	.word	0x200013f3
 800f68c:	08020bfc 	.word	0x08020bfc

0800f690 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800f69c:	4a04      	ldr	r2, [pc, #16]	@ (800f6b0 <Getgroup+0x20>)
 800f69e:	4905      	ldr	r1, [pc, #20]	@ (800f6b4 <Getgroup+0x24>)
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f7ff fcd5 	bl	800f050 <cli_printf>

}
 800f6a6:	bf00      	nop
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20001457 	.word	0x20001457
 800f6b4:	08020c18 	.word	0x08020c18

0800f6b8 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b09a      	sub	sp, #104	@ 0x68
 800f6bc:	af02      	add	r7, sp, #8
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f6c4:	4b26      	ldr	r3, [pc, #152]	@ (800f760 <SetDate+0xa8>)
 800f6c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800f6c8:	4926      	ldr	r1, [pc, #152]	@ (800f764 <SetDate+0xac>)
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	f7ff fcc0 	bl	800f050 <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800f6d0:	4b25      	ldr	r3, [pc, #148]	@ (800f768 <SetDate+0xb0>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f6d6:	4b25      	ldr	r3, [pc, #148]	@ (800f76c <SetDate+0xb4>)
 800f6d8:	2200      	movs	r2, #0
 800f6da:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f6dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f6e0:	2232      	movs	r2, #50	@ 0x32
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f7ff fcf5 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f6ea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f6ec:	f7f0 fdd8 	bl	80002a0 <strlen>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f6f8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f6fa:	481d      	ldr	r0, [pc, #116]	@ (800f770 <SetDate+0xb8>)
 800f6fc:	f7fc fa0e 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f700:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f704:	2b00      	cmp	r3, #0
 800f706:	d004      	beq.n	800f712 <SetDate+0x5a>
		Set_Date(buffer);
 800f708:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f70c:	4618      	mov	r0, r3
 800f70e:	f003 f92d 	bl	801296c <Set_Date>
	}
	flag_cli = 0;
 800f712:	4b16      	ldr	r3, [pc, #88]	@ (800f76c <SetDate+0xb4>)
 800f714:	2200      	movs	r2, #0
 800f716:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f718:	4b13      	ldr	r3, [pc, #76]	@ (800f768 <SetDate+0xb0>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f71e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f722:	2200      	movs	r2, #0
 800f724:	4619      	mov	r1, r3
 800f726:	4813      	ldr	r0, [pc, #76]	@ (800f774 <SetDate+0xbc>)
 800f728:	f7f9 feb4 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f72c:	f107 0310 	add.w	r3, r7, #16
 800f730:	2200      	movs	r2, #0
 800f732:	4619      	mov	r1, r3
 800f734:	480f      	ldr	r0, [pc, #60]	@ (800f774 <SetDate+0xbc>)
 800f736:	f7f9 fdcb 	bl	80092d0 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f73a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f73e:	461a      	mov	r2, r3
 800f740:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f744:	4619      	mov	r1, r3
			gDate.Year);
 800f746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	460b      	mov	r3, r1
 800f74e:	490a      	ldr	r1, [pc, #40]	@ (800f778 <SetDate+0xc0>)
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7ff fc7d 	bl	800f050 <cli_printf>

}
 800f756:	bf00      	nop
 800f758:	3760      	adds	r7, #96	@ 0x60
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	080209ec 	.word	0x080209ec
 800f764:	08020c24 	.word	0x08020c24
 800f768:	20001a8a 	.word	0x20001a8a
 800f76c:	20001a8b 	.word	0x20001a8b
 800f770:	200019cc 	.word	0x200019cc
 800f774:	200017f0 	.word	0x200017f0
 800f778:	08020c60 	.word	0x08020c60

0800f77c <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b09a      	sub	sp, #104	@ 0x68
 800f780:	af02      	add	r7, sp, #8
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f788:	4b26      	ldr	r3, [pc, #152]	@ (800f824 <SetTime+0xa8>)
 800f78a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800f78c:	4926      	ldr	r1, [pc, #152]	@ (800f828 <SetTime+0xac>)
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7ff fc5e 	bl	800f050 <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800f794:	4b25      	ldr	r3, [pc, #148]	@ (800f82c <SetTime+0xb0>)
 800f796:	2201      	movs	r2, #1
 800f798:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f79a:	4b25      	ldr	r3, [pc, #148]	@ (800f830 <SetTime+0xb4>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f7a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f7a4:	2232      	movs	r2, #50	@ 0x32
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	68f8      	ldr	r0, [r7, #12]
 800f7aa:	f7ff fc93 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f7ae:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f7b0:	f7f0 fd76 	bl	80002a0 <strlen>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7bc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f7be:	481d      	ldr	r0, [pc, #116]	@ (800f834 <SetTime+0xb8>)
 800f7c0:	f7fc f9ac 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f7c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d004      	beq.n	800f7d6 <SetTime+0x5a>
		Set_Time(buffer);
 800f7cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f003 f989 	bl	8012ae8 <Set_Time>
	}
	flag_cli = 0;
 800f7d6:	4b16      	ldr	r3, [pc, #88]	@ (800f830 <SetTime+0xb4>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f7dc:	4b13      	ldr	r3, [pc, #76]	@ (800f82c <SetTime+0xb0>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f7e2:	4b15      	ldr	r3, [pc, #84]	@ (800f838 <SetTime+0xbc>)
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f7e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	4812      	ldr	r0, [pc, #72]	@ (800f83c <SetTime+0xc0>)
 800f7f2:	f7f9 fe4f 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f7f6:	f107 0310 	add.w	r3, r7, #16
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	480f      	ldr	r0, [pc, #60]	@ (800f83c <SetTime+0xc0>)
 800f800:	f7f9 fd66 	bl	80092d0 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f804:	7c3b      	ldrb	r3, [r7, #16]
 800f806:	461a      	mov	r2, r3
 800f808:	7c7b      	ldrb	r3, [r7, #17]
 800f80a:	4619      	mov	r1, r3
			gTime.Seconds);
 800f80c:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	460b      	mov	r3, r1
 800f812:	490b      	ldr	r1, [pc, #44]	@ (800f840 <SetTime+0xc4>)
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	f7ff fc1b 	bl	800f050 <cli_printf>

}
 800f81a:	bf00      	nop
 800f81c:	3760      	adds	r7, #96	@ 0x60
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	080209ec 	.word	0x080209ec
 800f828:	08020c7c 	.word	0x08020c7c
 800f82c:	20001a8a 	.word	0x20001a8a
 800f830:	20001a8b 	.word	0x20001a8b
 800f834:	200019cc 	.word	0x200019cc
 800f838:	2000002d 	.word	0x2000002d
 800f83c:	200017f0 	.word	0x200017f0
 800f840:	08020cc0 	.word	0x08020cc0

0800f844 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f844:	b580      	push	{r7, lr}
 800f846:	b08c      	sub	sp, #48	@ 0x30
 800f848:	af02      	add	r7, sp, #8
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f854:	2200      	movs	r2, #0
 800f856:	4619      	mov	r1, r3
 800f858:	480f      	ldr	r0, [pc, #60]	@ (800f898 <GetDate+0x54>)
 800f85a:	f7f9 fe1b 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f85e:	f107 0310 	add.w	r3, r7, #16
 800f862:	2200      	movs	r2, #0
 800f864:	4619      	mov	r1, r3
 800f866:	480c      	ldr	r0, [pc, #48]	@ (800f898 <GetDate+0x54>)
 800f868:	f7f9 fd32 	bl	80092d0 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800f86c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f870:	461a      	mov	r2, r3
 800f872:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f876:	4619      	mov	r1, r3
 800f878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f87c:	9300      	str	r3, [sp, #0]
 800f87e:	460b      	mov	r3, r1
 800f880:	4906      	ldr	r1, [pc, #24]	@ (800f89c <GetDate+0x58>)
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f7ff fbe4 	bl	800f050 <cli_printf>
	HAL_Delay(100);
 800f888:	2064      	movs	r0, #100	@ 0x64
 800f88a:	f7f4 fa49 	bl	8003d20 <HAL_Delay>
}
 800f88e:	bf00      	nop
 800f890:	3728      	adds	r7, #40	@ 0x28
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	200017f0 	.word	0x200017f0
 800f89c:	08020cdc 	.word	0x08020cdc

0800f8a0 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b08c      	sub	sp, #48	@ 0x30
 800f8a4:	af02      	add	r7, sp, #8
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f8ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	480d      	ldr	r0, [pc, #52]	@ (800f8ec <GetTime+0x4c>)
 800f8b6:	f7f9 fded 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f8ba:	f107 0310 	add.w	r3, r7, #16
 800f8be:	2200      	movs	r2, #0
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	480a      	ldr	r0, [pc, #40]	@ (800f8ec <GetTime+0x4c>)
 800f8c4:	f7f9 fd04 	bl	80092d0 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f8c8:	7c3b      	ldrb	r3, [r7, #16]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	7c7b      	ldrb	r3, [r7, #17]
 800f8ce:	4619      	mov	r1, r3
			gTime.Seconds);
 800f8d0:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	4906      	ldr	r1, [pc, #24]	@ (800f8f0 <GetTime+0x50>)
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f7ff fbb9 	bl	800f050 <cli_printf>
	HAL_Delay(100);
 800f8de:	2064      	movs	r0, #100	@ 0x64
 800f8e0:	f7f4 fa1e 	bl	8003d20 <HAL_Delay>
}
 800f8e4:	bf00      	nop
 800f8e6:	3728      	adds	r7, #40	@ 0x28
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	200017f0 	.word	0x200017f0
 800f8f0:	08020cec 	.word	0x08020cec

0800f8f4 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b092      	sub	sp, #72	@ 0x48
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f900:	4b54      	ldr	r3, [pc, #336]	@ (800fa54 <SetInterval+0x160>)
 800f902:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f904:	4954      	ldr	r1, [pc, #336]	@ (800fa58 <SetInterval+0x164>)
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f7ff fba2 	bl	800f050 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f90c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f90e:	f7f0 fcc7 	bl	80002a0 <strlen>
 800f912:	4603      	mov	r3, r0
 800f914:	b29a      	uxth	r2, r3
 800f916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f91a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f91c:	484f      	ldr	r0, [pc, #316]	@ (800fa5c <SetInterval+0x168>)
 800f91e:	f7fc f8fd 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800f922:	494f      	ldr	r1, [pc, #316]	@ (800fa60 <SetInterval+0x16c>)
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	f7ff fb93 	bl	800f050 <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800f92a:	494e      	ldr	r1, [pc, #312]	@ (800fa64 <SetInterval+0x170>)
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f7ff fb8f 	bl	800f050 <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800f932:	494d      	ldr	r1, [pc, #308]	@ (800fa68 <SetInterval+0x174>)
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f7ff fb8b 	bl	800f050 <cli_printf>
	cli_printf(cli,
 800f93a:	494c      	ldr	r1, [pc, #304]	@ (800fa6c <SetInterval+0x178>)
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f7ff fb87 	bl	800f050 <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800f942:	4b4b      	ldr	r3, [pc, #300]	@ (800fa70 <SetInterval+0x17c>)
 800f944:	2201      	movs	r2, #1
 800f946:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f948:	4b4a      	ldr	r3, [pc, #296]	@ (800fa74 <SetInterval+0x180>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f94e:	f107 0310 	add.w	r3, r7, #16
 800f952:	2232      	movs	r2, #50	@ 0x32
 800f954:	4619      	mov	r1, r3
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f7ff fbbc 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f95c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f95e:	f7f0 fc9f 	bl	80002a0 <strlen>
 800f962:	4603      	mov	r3, r0
 800f964:	b29a      	uxth	r2, r3
 800f966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f96a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f96c:	483b      	ldr	r0, [pc, #236]	@ (800fa5c <SetInterval+0x168>)
 800f96e:	f7fc f8d5 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800f972:	f107 0310 	add.w	r3, r7, #16
 800f976:	2131      	movs	r1, #49	@ 0x31
 800f978:	4618      	mov	r0, r3
 800f97a:	f00d fce7 	bl	801d34c <strchr>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d015      	beq.n	800f9b0 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800f984:	4b3c      	ldr	r3, [pc, #240]	@ (800fa78 <SetInterval+0x184>)
 800f986:	2200      	movs	r2, #0
 800f988:	f042 0205 	orr.w	r2, r2, #5
 800f98c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800f990:	2200      	movs	r2, #0
 800f992:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800f996:	2200      	movs	r2, #0
 800f998:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800f9a2:	4b36      	ldr	r3, [pc, #216]	@ (800fa7c <SetInterval+0x188>)
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	701a      	strb	r2, [r3, #0]
 800f9a8:	4b35      	ldr	r3, [pc, #212]	@ (800fa80 <SetInterval+0x18c>)
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	701a      	strb	r2, [r3, #0]
 800f9ae:	e03c      	b.n	800fa2a <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800f9b0:	f107 0310 	add.w	r3, r7, #16
 800f9b4:	2132      	movs	r1, #50	@ 0x32
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f00d fcc8 	bl	801d34c <strchr>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d015      	beq.n	800f9ee <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800f9c2:	4b2d      	ldr	r3, [pc, #180]	@ (800fa78 <SetInterval+0x184>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f042 020f 	orr.w	r2, r2, #15
 800f9ca:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800f9e0:	4b26      	ldr	r3, [pc, #152]	@ (800fa7c <SetInterval+0x188>)
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	701a      	strb	r2, [r3, #0]
 800f9e6:	4b26      	ldr	r3, [pc, #152]	@ (800fa80 <SetInterval+0x18c>)
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	701a      	strb	r2, [r3, #0]
 800f9ec:	e01d      	b.n	800fa2a <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800f9ee:	f107 0310 	add.w	r3, r7, #16
 800f9f2:	2133      	movs	r1, #51	@ 0x33
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f00d fca9 	bl	801d34c <strchr>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d014      	beq.n	800fa2a <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800fa00:	4b1d      	ldr	r3, [pc, #116]	@ (800fa78 <SetInterval+0x184>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800fa08:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fa12:	2200      	movs	r2, #0
 800fa14:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fa1e:	4b17      	ldr	r3, [pc, #92]	@ (800fa7c <SetInterval+0x188>)
 800fa20:	2201      	movs	r2, #1
 800fa22:	701a      	strb	r2, [r3, #0]
 800fa24:	4b16      	ldr	r3, [pc, #88]	@ (800fa80 <SetInterval+0x18c>)
 800fa26:	2201      	movs	r2, #1
 800fa28:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800fa2a:	4b12      	ldr	r3, [pc, #72]	@ (800fa74 <SetInterval+0x180>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fa30:	4b0f      	ldr	r3, [pc, #60]	@ (800fa70 <SetInterval+0x17c>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800fa36:	4b10      	ldr	r3, [pc, #64]	@ (800fa78 <SetInterval+0x184>)
 800fa38:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4911      	ldr	r1, [pc, #68]	@ (800fa84 <SetInterval+0x190>)
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f7ff fb05 	bl	800f050 <cli_printf>
	set_alarm_Time = 1;
 800fa46:	4b10      	ldr	r3, [pc, #64]	@ (800fa88 <SetInterval+0x194>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	701a      	strb	r2, [r3, #0]
}
 800fa4c:	bf00      	nop
 800fa4e:	3748      	adds	r7, #72	@ 0x48
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	080209ec 	.word	0x080209ec
 800fa58:	08020a60 	.word	0x08020a60
 800fa5c:	200019cc 	.word	0x200019cc
 800fa60:	08020cfc 	.word	0x08020cfc
 800fa64:	08020d10 	.word	0x08020d10
 800fa68:	08020d24 	.word	0x08020d24
 800fa6c:	08020d38 	.word	0x08020d38
 800fa70:	20001a8a 	.word	0x20001a8a
 800fa74:	20001a8b 	.word	0x20001a8b
 800fa78:	200012f4 	.word	0x200012f4
 800fa7c:	200014d1 	.word	0x200014d1
 800fa80:	200014d2 	.word	0x200014d2
 800fa84:	08020d80 	.word	0x08020d80
 800fa88:	2000002d 	.word	0x2000002d

0800fa8c <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800fa98:	4b05      	ldr	r3, [pc, #20]	@ (800fab0 <GetInterval+0x24>)
 800fa9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fa9e:	461a      	mov	r2, r3
 800faa0:	4904      	ldr	r1, [pc, #16]	@ (800fab4 <GetInterval+0x28>)
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7ff fad4 	bl	800f050 <cli_printf>

}
 800faa8:	bf00      	nop
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	200012f4 	.word	0x200012f4
 800fab4:	08020d9c 	.word	0x08020d9c

0800fab8 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b09a      	sub	sp, #104	@ 0x68
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fac4:	4b40      	ldr	r3, [pc, #256]	@ (800fbc8 <SetFilename+0x110>)
 800fac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fac8:	4940      	ldr	r1, [pc, #256]	@ (800fbcc <SetFilename+0x114>)
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f7ff fac0 	bl	800f050 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fad0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fad2:	f7f0 fbe5 	bl	80002a0 <strlen>
 800fad6:	4603      	mov	r3, r0
 800fad8:	b29a      	uxth	r2, r3
 800fada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fade:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fae0:	483b      	ldr	r0, [pc, #236]	@ (800fbd0 <SetFilename+0x118>)
 800fae2:	f7fc f81b 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800fae6:	493b      	ldr	r1, [pc, #236]	@ (800fbd4 <SetFilename+0x11c>)
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7ff fab1 	bl	800f050 <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800faee:	493a      	ldr	r1, [pc, #232]	@ (800fbd8 <SetFilename+0x120>)
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f7ff faad 	bl	800f050 <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800faf6:	4b39      	ldr	r3, [pc, #228]	@ (800fbdc <SetFilename+0x124>)
 800faf8:	2201      	movs	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fafc:	4b38      	ldr	r3, [pc, #224]	@ (800fbe0 <SetFilename+0x128>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fb02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fb06:	2232      	movs	r2, #50	@ 0x32
 800fb08:	4619      	mov	r1, r3
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f7ff fae2 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fb10:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fb12:	f7f0 fbc5 	bl	80002a0 <strlen>
 800fb16:	4603      	mov	r3, r0
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb1e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fb20:	482b      	ldr	r0, [pc, #172]	@ (800fbd0 <SetFilename+0x118>)
 800fb22:	f7fb fffb 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fb26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f0 fbb8 	bl	80002a0 <strlen>
 800fb30:	4603      	mov	r3, r0
 800fb32:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 800fb36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800fb3a:	2b13      	cmp	r3, #19
 800fb3c:	d836      	bhi.n	800fbac <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 800fb3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d036      	beq.n	800fbb4 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 800fb46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4825      	ldr	r0, [pc, #148]	@ (800fbe4 <SetFilename+0x12c>)
 800fb4e:	f00d fd04 	bl	801d55a <strcpy>
				set_param_flags();
 800fb52:	4b25      	ldr	r3, [pc, #148]	@ (800fbe8 <SetFilename+0x130>)
 800fb54:	2201      	movs	r2, #1
 800fb56:	701a      	strb	r2, [r3, #0]
 800fb58:	4b24      	ldr	r3, [pc, #144]	@ (800fbec <SetFilename+0x134>)
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 800fb5e:	4b24      	ldr	r3, [pc, #144]	@ (800fbf0 <SetFilename+0x138>)
 800fb60:	2201      	movs	r2, #1
 800fb62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 800fb66:	4a1f      	ldr	r2, [pc, #124]	@ (800fbe4 <SetFilename+0x12c>)
 800fb68:	4922      	ldr	r1, [pc, #136]	@ (800fbf4 <SetFilename+0x13c>)
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f7ff fa70 	bl	800f050 <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800fb70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb74:	2200      	movs	r2, #0
 800fb76:	4619      	mov	r1, r3
 800fb78:	481f      	ldr	r0, [pc, #124]	@ (800fbf8 <SetFilename+0x140>)
 800fb7a:	f7f9 fc8b 	bl	8009494 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 800fb7e:	f107 0310 	add.w	r3, r7, #16
 800fb82:	2200      	movs	r2, #0
 800fb84:	4619      	mov	r1, r3
 800fb86:	481c      	ldr	r0, [pc, #112]	@ (800fbf8 <SetFilename+0x140>)
 800fb88:	f7f9 fba2 	bl	80092d0 <HAL_RTC_GetTime>


				sprintf(filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 800fb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb90:	4619      	mov	r1, r3
 800fb92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fb96:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fb9a:	9201      	str	r2, [sp, #4]
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4a10      	ldr	r2, [pc, #64]	@ (800fbe4 <SetFilename+0x12c>)
 800fba2:	4916      	ldr	r1, [pc, #88]	@ (800fbfc <SetFilename+0x144>)
 800fba4:	4816      	ldr	r0, [pc, #88]	@ (800fc00 <SetFilename+0x148>)
 800fba6:	f00d fa7f 	bl	801d0a8 <siprintf>
 800fbaa:	e003      	b.n	800fbb4 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 800fbac:	4915      	ldr	r1, [pc, #84]	@ (800fc04 <SetFilename+0x14c>)
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f7ff fa4e 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 800fbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe0 <SetFilename+0x128>)
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbba:	4b08      	ldr	r3, [pc, #32]	@ (800fbdc <SetFilename+0x124>)
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	701a      	strb	r2, [r3, #0]

}
 800fbc0:	bf00      	nop
 800fbc2:	3760      	adds	r7, #96	@ 0x60
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	080209ec 	.word	0x080209ec
 800fbcc:	08020a60 	.word	0x08020a60
 800fbd0:	200019cc 	.word	0x200019cc
 800fbd4:	08020db8 	.word	0x08020db8
 800fbd8:	08020e2c 	.word	0x08020e2c
 800fbdc:	20001a8a 	.word	0x20001a8a
 800fbe0:	20001a8b 	.word	0x20001a8b
 800fbe4:	200012f4 	.word	0x200012f4
 800fbe8:	200014d1 	.word	0x200014d1
 800fbec:	200014d2 	.word	0x200014d2
 800fbf0:	2000148c 	.word	0x2000148c
 800fbf4:	08020e6c 	.word	0x08020e6c
 800fbf8:	200017f0 	.word	0x200017f0
 800fbfc:	08020e84 	.word	0x08020e84
 800fc00:	200022d8 	.word	0x200022d8
 800fc04:	08020e98 	.word	0x08020e98

0800fc08 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", filename_ver_date);
 800fc14:	4a04      	ldr	r2, [pc, #16]	@ (800fc28 <GetFilename+0x20>)
 800fc16:	4905      	ldr	r1, [pc, #20]	@ (800fc2c <GetFilename+0x24>)
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f7ff fa19 	bl	800f050 <cli_printf>

}
 800fc1e:	bf00      	nop
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	200022d8 	.word	0x200022d8
 800fc2c:	08020e6c 	.word	0x08020e6c

0800fc30 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b092      	sub	sp, #72	@ 0x48
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fc3c:	4b41      	ldr	r3, [pc, #260]	@ (800fd44 <SetFileformat+0x114>)
 800fc3e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fc40:	4941      	ldr	r1, [pc, #260]	@ (800fd48 <SetFileformat+0x118>)
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f7ff fa04 	bl	800f050 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fc4a:	f7f0 fb29 	bl	80002a0 <strlen>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fc58:	483c      	ldr	r0, [pc, #240]	@ (800fd4c <SetFileformat+0x11c>)
 800fc5a:	f7fb ff5f 	bl	800bb1c <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 800fc5e:	493c      	ldr	r1, [pc, #240]	@ (800fd50 <SetFileformat+0x120>)
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f7ff f9f5 	bl	800f050 <cli_printf>
	cli_printf(cli, "1. (.csv)");
 800fc66:	493b      	ldr	r1, [pc, #236]	@ (800fd54 <SetFileformat+0x124>)
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f7ff f9f1 	bl	800f050 <cli_printf>
	cli_printf(cli, "2. (.json)");
 800fc6e:	493a      	ldr	r1, [pc, #232]	@ (800fd58 <SetFileformat+0x128>)
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7ff f9ed 	bl	800f050 <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 800fc76:	4939      	ldr	r1, [pc, #228]	@ (800fd5c <SetFileformat+0x12c>)
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff f9e9 	bl	800f050 <cli_printf>

	cli_other = 1;
 800fc7e:	4b38      	ldr	r3, [pc, #224]	@ (800fd60 <SetFileformat+0x130>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc84:	4b37      	ldr	r3, [pc, #220]	@ (800fd64 <SetFileformat+0x134>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc8a:	f107 0310 	add.w	r3, r7, #16
 800fc8e:	2232      	movs	r2, #50	@ 0x32
 800fc90:	4619      	mov	r1, r3
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f7ff fa1e 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc98:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fc9a:	f7f0 fb01 	bl	80002a0 <strlen>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fca6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fca8:	4828      	ldr	r0, [pc, #160]	@ (800fd4c <SetFileformat+0x11c>)
 800fcaa:	f7fb ff37 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fcae:	f107 0310 	add.w	r3, r7, #16
 800fcb2:	2131      	movs	r1, #49	@ 0x31
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f00d fb49 	bl	801d34c <strchr>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d014      	beq.n	800fcea <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 800fcc0:	4b29      	ldr	r3, [pc, #164]	@ (800fd68 <SetFileformat+0x138>)
 800fcc2:	4a2a      	ldr	r2, [pc, #168]	@ (800fd6c <SetFileformat+0x13c>)
 800fcc4:	6810      	ldr	r0, [r2, #0]
 800fcc6:	6018      	str	r0, [r3, #0]
 800fcc8:	7912      	ldrb	r2, [r2, #4]
 800fcca:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800fccc:	4b28      	ldr	r3, [pc, #160]	@ (800fd70 <SetFileformat+0x140>)
 800fcce:	2201      	movs	r2, #1
 800fcd0:	701a      	strb	r2, [r3, #0]
 800fcd2:	4b28      	ldr	r3, [pc, #160]	@ (800fd74 <SetFileformat+0x144>)
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fcd8:	4b27      	ldr	r3, [pc, #156]	@ (800fd78 <SetFileformat+0x148>)
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 800fce0:	4b25      	ldr	r3, [pc, #148]	@ (800fd78 <SetFileformat+0x148>)
 800fce2:	2201      	movs	r2, #1
 800fce4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800fce8:	e01c      	b.n	800fd24 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 800fcea:	f107 0310 	add.w	r3, r7, #16
 800fcee:	2132      	movs	r1, #50	@ 0x32
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f00d fb2b 	bl	801d34c <strchr>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d013      	beq.n	800fd24 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 800fcfc:	4b1a      	ldr	r3, [pc, #104]	@ (800fd68 <SetFileformat+0x138>)
 800fcfe:	4a1f      	ldr	r2, [pc, #124]	@ (800fd7c <SetFileformat+0x14c>)
 800fd00:	6810      	ldr	r0, [r2, #0]
 800fd02:	6018      	str	r0, [r3, #0]
 800fd04:	8892      	ldrh	r2, [r2, #4]
 800fd06:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800fd08:	4b19      	ldr	r3, [pc, #100]	@ (800fd70 <SetFileformat+0x140>)
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	701a      	strb	r2, [r3, #0]
 800fd0e:	4b19      	ldr	r3, [pc, #100]	@ (800fd74 <SetFileformat+0x144>)
 800fd10:	2201      	movs	r2, #1
 800fd12:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fd14:	4b18      	ldr	r3, [pc, #96]	@ (800fd78 <SetFileformat+0x148>)
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 800fd1c:	4b16      	ldr	r3, [pc, #88]	@ (800fd78 <SetFileformat+0x148>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 800fd24:	4b0f      	ldr	r3, [pc, #60]	@ (800fd64 <SetFileformat+0x134>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <SetFileformat+0x130>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fd30:	4a0d      	ldr	r2, [pc, #52]	@ (800fd68 <SetFileformat+0x138>)
 800fd32:	4913      	ldr	r1, [pc, #76]	@ (800fd80 <SetFileformat+0x150>)
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f7ff f98b 	bl	800f050 <cli_printf>

}
 800fd3a:	bf00      	nop
 800fd3c:	3748      	adds	r7, #72	@ 0x48
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	080209ec 	.word	0x080209ec
 800fd48:	08020a60 	.word	0x08020a60
 800fd4c:	200019cc 	.word	0x200019cc
 800fd50:	08020eb0 	.word	0x08020eb0
 800fd54:	08020ed4 	.word	0x08020ed4
 800fd58:	08020ee0 	.word	0x08020ee0
 800fd5c:	08020eec 	.word	0x08020eec
 800fd60:	20001a8a 	.word	0x20001a8a
 800fd64:	20001a8b 	.word	0x20001a8b
 800fd68:	20001358 	.word	0x20001358
 800fd6c:	08020f1c 	.word	0x08020f1c
 800fd70:	200014d1 	.word	0x200014d1
 800fd74:	200014d2 	.word	0x200014d2
 800fd78:	2000148c 	.word	0x2000148c
 800fd7c:	08020f24 	.word	0x08020f24
 800fd80:	08020f2c 	.word	0x08020f2c

0800fd84 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fd90:	4a04      	ldr	r2, [pc, #16]	@ (800fda4 <GetFileformat+0x20>)
 800fd92:	4905      	ldr	r1, [pc, #20]	@ (800fda8 <GetFileformat+0x24>)
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f7ff f95b 	bl	800f050 <cli_printf>

}
 800fd9a:	bf00      	nop
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	20001358 	.word	0x20001358
 800fda8:	08020f2c 	.word	0x08020f2c

0800fdac <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b096      	sub	sp, #88	@ 0x58
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fdb8:	4b48      	ldr	r3, [pc, #288]	@ (800fedc <fanclean+0x130>)
 800fdba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 800fdc0:	4b47      	ldr	r3, [pc, #284]	@ (800fee0 <fanclean+0x134>)
 800fdc2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 800fdca:	4946      	ldr	r1, [pc, #280]	@ (800fee4 <fanclean+0x138>)
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f7ff f93f 	bl	800f050 <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 800fdd2:	4b45      	ldr	r3, [pc, #276]	@ (800fee8 <fanclean+0x13c>)
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fdd8:	4b44      	ldr	r3, [pc, #272]	@ (800feec <fanclean+0x140>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fdde:	f107 0314 	add.w	r3, r7, #20
 800fde2:	2232      	movs	r2, #50	@ 0x32
 800fde4:	4619      	mov	r1, r3
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f7ff f974 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fdec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fdee:	f7f0 fa57 	bl	80002a0 <strlen>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdfa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fdfc:	483c      	ldr	r0, [pc, #240]	@ (800fef0 <fanclean+0x144>)
 800fdfe:	f7fb fe8d 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 800fe02:	f107 0314 	add.w	r3, r7, #20
 800fe06:	216e      	movs	r1, #110	@ 0x6e
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f00d fa9f 	bl	801d34c <strchr>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00f      	beq.n	800fe34 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 800fe14:	4b37      	ldr	r3, [pc, #220]	@ (800fef4 <fanclean+0x148>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 800fe1c:	4b36      	ldr	r3, [pc, #216]	@ (800fef8 <fanclean+0x14c>)
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 800fe24:	4935      	ldr	r1, [pc, #212]	@ (800fefc <fanclean+0x150>)
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff f912 	bl	800f050 <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800fe32:	e00f      	b.n	800fe54 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 800fe34:	f107 0314 	add.w	r3, r7, #20
 800fe38:	2179      	movs	r1, #121	@ 0x79
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f00d fa86 	bl	801d34c <strchr>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d006      	beq.n	800fe54 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 800fe46:	4b2c      	ldr	r3, [pc, #176]	@ (800fef8 <fanclean+0x14c>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 800fe54:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d135      	bne.n	800fec8 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe5c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fe5e:	f7f0 fa1f 	bl	80002a0 <strlen>
 800fe62:	4603      	mov	r3, r0
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe6a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fe6c:	4820      	ldr	r0, [pc, #128]	@ (800fef0 <fanclean+0x144>)
 800fe6e:	f7fb fe55 	bl	800bb1c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 800fe72:	4923      	ldr	r1, [pc, #140]	@ (800ff00 <fanclean+0x154>)
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7ff f8eb 	bl	800f050 <cli_printf>
		while (counter < 8) {
 800fe7a:	e013      	b.n	800fea4 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 800fe7c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fe7e:	f7f0 fa0f 	bl	80002a0 <strlen>
 800fe82:	4603      	mov	r3, r0
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fe8c:	4818      	ldr	r0, [pc, #96]	@ (800fef0 <fanclean+0x144>)
 800fe8e:	f7fb fe45 	bl	800bb1c <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 800fe92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800fe96:	f7f3 ff43 	bl	8003d20 <HAL_Delay>
			toggle_blue_led();
 800fe9a:	f7f1 f90f 	bl	80010bc <toggle_blue_led>
			counter++;
 800fe9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fea0:	3301      	adds	r3, #1
 800fea2:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 800fea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fea6:	2b07      	cmp	r3, #7
 800fea8:	dde8      	ble.n	800fe7c <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800feaa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800feac:	f7f0 f9f8 	bl	80002a0 <strlen>
 800feb0:	4603      	mov	r3, r0
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feb8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800feba:	480d      	ldr	r0, [pc, #52]	@ (800fef0 <fanclean+0x144>)
 800febc:	f7fb fe2e 	bl	800bb1c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 800fec0:	4910      	ldr	r1, [pc, #64]	@ (800ff04 <fanclean+0x158>)
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f7ff f8c4 	bl	800f050 <cli_printf>

	}

	flag_cli = 0;
 800fec8:	4b08      	ldr	r3, [pc, #32]	@ (800feec <fanclean+0x140>)
 800feca:	2200      	movs	r2, #0
 800fecc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fece:	4b06      	ldr	r3, [pc, #24]	@ (800fee8 <fanclean+0x13c>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	701a      	strb	r2, [r3, #0]
}
 800fed4:	bf00      	nop
 800fed6:	3758      	adds	r7, #88	@ 0x58
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	080209ec 	.word	0x080209ec
 800fee0:	08020f48 	.word	0x08020f48
 800fee4:	08020f54 	.word	0x08020f54
 800fee8:	20001a8a 	.word	0x20001a8a
 800feec:	20001a8b 	.word	0x20001a8b
 800fef0:	200019cc 	.word	0x200019cc
 800fef4:	200012f4 	.word	0x200012f4
 800fef8:	2000148c 	.word	0x2000148c
 800fefc:	08020f90 	.word	0x08020f90
 800ff00:	08020fb8 	.word	0x08020fb8
 800ff04:	08020ff0 	.word	0x08020ff0

0800ff08 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b096      	sub	sp, #88	@ 0x58
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800ff14:	4b55      	ldr	r3, [pc, #340]	@ (801006c <co2calibrate+0x164>)
 800ff16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 800ff1c:	4b54      	ldr	r3, [pc, #336]	@ (8010070 <co2calibrate+0x168>)
 800ff1e:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 800ff26:	4b53      	ldr	r3, [pc, #332]	@ (8010074 <co2calibrate+0x16c>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ff2c:	4b52      	ldr	r3, [pc, #328]	@ (8010078 <co2calibrate+0x170>)
 800ff2e:	2200      	movs	r2, #0
 800ff30:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 800ff32:	f107 0310 	add.w	r3, r7, #16
 800ff36:	2232      	movs	r2, #50	@ 0x32
 800ff38:	2100      	movs	r1, #0
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f00d f9fe 	bl	801d33c <memset>
	cli_printf(cli,
 800ff40:	494e      	ldr	r1, [pc, #312]	@ (801007c <co2calibrate+0x174>)
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f7ff f884 	bl	800f050 <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 800ff48:	494d      	ldr	r1, [pc, #308]	@ (8010080 <co2calibrate+0x178>)
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f7ff f880 	bl	800f050 <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 800ff50:	f107 0310 	add.w	r3, r7, #16
 800ff54:	2232      	movs	r2, #50	@ 0x32
 800ff56:	4619      	mov	r1, r3
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7ff f8bb 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ff60:	f7f0 f99e 	bl	80002a0 <strlen>
 800ff64:	4603      	mov	r3, r0
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff6c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ff6e:	4845      	ldr	r0, [pc, #276]	@ (8010084 <co2calibrate+0x17c>)
 800ff70:	f7fb fdd4 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 800ff74:	7c3b      	ldrb	r3, [r7, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d01e      	beq.n	800ffb8 <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 800ff7a:	4b43      	ldr	r3, [pc, #268]	@ (8010088 <co2calibrate+0x180>)
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 800ff82:	f107 0310 	add.w	r3, r7, #16
 800ff86:	4618      	mov	r0, r3
 800ff88:	f00b ff56 	bl	801be38 <atoi>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 800ff90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d803      	bhi.n	800ffa2 <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 800ff9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff9c:	b29a      	uxth	r2, r3
 800ff9e:	4b3a      	ldr	r3, [pc, #232]	@ (8010088 <co2calibrate+0x180>)
 800ffa0:	875a      	strh	r2, [r3, #58]	@ 0x3a
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 800ffa2:	4b39      	ldr	r3, [pc, #228]	@ (8010088 <co2calibrate+0x180>)
 800ffa4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
		cli_printf(cli,
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	4938      	ldr	r1, [pc, #224]	@ (801008c <co2calibrate+0x184>)
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f7ff f850 	bl	800f050 <cli_printf>
		do_Calibration = 1;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ffb6:	e00a      	b.n	800ffce <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 800ffb8:	4935      	ldr	r1, [pc, #212]	@ (8010090 <co2calibrate+0x188>)
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f7ff f848 	bl	800f050 <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 800ffc0:	4b31      	ldr	r3, [pc, #196]	@ (8010088 <co2calibrate+0x180>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 800ffce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d13f      	bne.n	8010056 <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffd6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ffd8:	f7f0 f962 	bl	80002a0 <strlen>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffe4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ffe6:	4827      	ldr	r0, [pc, #156]	@ (8010084 <co2calibrate+0x17c>)
 800ffe8:	f7fb fd98 	bl	800bb1c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 800ffec:	4929      	ldr	r1, [pc, #164]	@ (8010094 <co2calibrate+0x18c>)
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f7ff f82e 	bl	800f050 <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 800fff4:	4b24      	ldr	r3, [pc, #144]	@ (8010088 <co2calibrate+0x180>)
 800fff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d119      	bne.n	8010032 <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 800fffe:	4b22      	ldr	r3, [pc, #136]	@ (8010088 <co2calibrate+0x180>)
 8010000:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8010002:	4618      	mov	r0, r3
 8010004:	f003 f91e 	bl	8013244 <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 8010008:	e013      	b.n	8010032 <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801000a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801000c:	f7f0 f948 	bl	80002a0 <strlen>
 8010010:	4603      	mov	r3, r0
 8010012:	b29a      	uxth	r2, r3
 8010014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010018:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801001a:	481a      	ldr	r0, [pc, #104]	@ (8010084 <co2calibrate+0x17c>)
 801001c:	f7fb fd7e 	bl	800bb1c <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 8010020:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010024:	f7f3 fe7c 	bl	8003d20 <HAL_Delay>
			toggle_blue_led();
 8010028:	f7f1 f848 	bl	80010bc <toggle_blue_led>
			counter++;
 801002c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801002e:	3301      	adds	r3, #1
 8010030:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010034:	2b07      	cmp	r3, #7
 8010036:	dde8      	ble.n	801000a <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010038:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801003a:	f7f0 f931 	bl	80002a0 <strlen>
 801003e:	4603      	mov	r3, r0
 8010040:	b29a      	uxth	r2, r3
 8010042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010046:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010048:	480e      	ldr	r0, [pc, #56]	@ (8010084 <co2calibrate+0x17c>)
 801004a:	f7fb fd67 	bl	800bb1c <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 801004e:	4912      	ldr	r1, [pc, #72]	@ (8010098 <co2calibrate+0x190>)
 8010050:	68f8      	ldr	r0, [r7, #12]
 8010052:	f7fe fffd 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 8010056:	4b08      	ldr	r3, [pc, #32]	@ (8010078 <co2calibrate+0x170>)
 8010058:	2200      	movs	r2, #0
 801005a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801005c:	4b05      	ldr	r3, [pc, #20]	@ (8010074 <co2calibrate+0x16c>)
 801005e:	2200      	movs	r2, #0
 8010060:	701a      	strb	r2, [r3, #0]
}
 8010062:	bf00      	nop
 8010064:	3758      	adds	r7, #88	@ 0x58
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	080209ec 	.word	0x080209ec
 8010070:	08020f48 	.word	0x08020f48
 8010074:	20001a8a 	.word	0x20001a8a
 8010078:	20001a8b 	.word	0x20001a8b
 801007c:	08021004 	.word	0x08021004
 8010080:	08021048 	.word	0x08021048
 8010084:	200019cc 	.word	0x200019cc
 8010088:	2000148c 	.word	0x2000148c
 801008c:	0802109c 	.word	0x0802109c
 8010090:	080210ec 	.word	0x080210ec
 8010094:	0802110c 	.word	0x0802110c
 8010098:	08021130 	.word	0x08021130

0801009c <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 801009c:	b580      	push	{r7, lr}
 801009e:	b092      	sub	sp, #72	@ 0x48
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 80100a8:	4b22      	ldr	r3, [pc, #136]	@ (8010134 <SystemRestart+0x98>)
 80100aa:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 80100ac:	4922      	ldr	r1, [pc, #136]	@ (8010138 <SystemRestart+0x9c>)
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f7fe ffce 	bl	800f050 <cli_printf>

	cli_other = 1;
 80100b4:	4b21      	ldr	r3, [pc, #132]	@ (801013c <SystemRestart+0xa0>)
 80100b6:	2201      	movs	r2, #1
 80100b8:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80100ba:	4b21      	ldr	r3, [pc, #132]	@ (8010140 <SystemRestart+0xa4>)
 80100bc:	2200      	movs	r2, #0
 80100be:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 80100c0:	f107 0310 	add.w	r3, r7, #16
 80100c4:	2232      	movs	r2, #50	@ 0x32
 80100c6:	4619      	mov	r1, r3
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f7ff f803 	bl	800f0d4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80100ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80100d0:	f7f0 f8e6 	bl	80002a0 <strlen>
 80100d4:	4603      	mov	r3, r0
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80100dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80100de:	4819      	ldr	r0, [pc, #100]	@ (8010144 <SystemRestart+0xa8>)
 80100e0:	f7fb fd1c 	bl	800bb1c <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 80100e4:	f107 0310 	add.w	r3, r7, #16
 80100e8:	2179      	movs	r1, #121	@ 0x79
 80100ea:	4618      	mov	r0, r3
 80100ec:	f00d f92e 	bl	801d34c <strchr>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d006      	beq.n	8010104 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 80100f6:	4914      	ldr	r1, [pc, #80]	@ (8010148 <SystemRestart+0xac>)
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7fe ffa9 	bl	800f050 <cli_printf>
		HAL_NVIC_SystemReset();
 80100fe:	f7f4 fc1e 	bl	800493e <HAL_NVIC_SystemReset>
 8010102:	e00c      	b.n	801011e <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 8010104:	f107 0310 	add.w	r3, r7, #16
 8010108:	216e      	movs	r1, #110	@ 0x6e
 801010a:	4618      	mov	r0, r3
 801010c:	f00d f91e 	bl	801d34c <strchr>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d003      	beq.n	801011e <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 8010116:	490d      	ldr	r1, [pc, #52]	@ (801014c <SystemRestart+0xb0>)
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f7fe ff99 	bl	800f050 <cli_printf>
	}

	flag_cli = 0;
 801011e:	4b08      	ldr	r3, [pc, #32]	@ (8010140 <SystemRestart+0xa4>)
 8010120:	2200      	movs	r2, #0
 8010122:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010124:	4b05      	ldr	r3, [pc, #20]	@ (801013c <SystemRestart+0xa0>)
 8010126:	2200      	movs	r2, #0
 8010128:	701a      	strb	r2, [r3, #0]
}
 801012a:	bf00      	nop
 801012c:	3748      	adds	r7, #72	@ 0x48
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	080209ec 	.word	0x080209ec
 8010138:	0802114c 	.word	0x0802114c
 801013c:	20001a8a 	.word	0x20001a8a
 8010140:	20001a8b 	.word	0x20001a8b
 8010144:	200019cc 	.word	0x200019cc
 8010148:	08021174 	.word	0x08021174
 801014c:	08021190 	.word	0x08021190

08010150 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801015c:	4b0a      	ldr	r3, [pc, #40]	@ (8010188 <Co2Level+0x38>)
 801015e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 8010166:	f7f1 fa6f 	bl	8001648 <get_scd30_measurement>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 801016a:	4b07      	ldr	r3, [pc, #28]	@ (8010188 <Co2Level+0x38>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4618      	mov	r0, r3
 8010170:	f7f0 fa02 	bl	8000578 <__aeabi_f2d>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	4904      	ldr	r1, [pc, #16]	@ (801018c <Co2Level+0x3c>)
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f7fe ff68 	bl	800f050 <cli_printf>
#endif
}
 8010180:	bf00      	nop
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	2000148c 	.word	0x2000148c
 801018c:	080211a8 	.word	0x080211a8

08010190 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801019c:	4b0a      	ldr	r3, [pc, #40]	@ (80101c8 <TempLevel+0x38>)
 801019e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d101      	bne.n	80101aa <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 80101a6:	f7f1 fa4f 	bl	8001648 <get_scd30_measurement>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 80101aa:	4b07      	ldr	r3, [pc, #28]	@ (80101c8 <TempLevel+0x38>)
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7f0 f9e2 	bl	8000578 <__aeabi_f2d>
 80101b4:	4602      	mov	r2, r0
 80101b6:	460b      	mov	r3, r1
 80101b8:	4904      	ldr	r1, [pc, #16]	@ (80101cc <TempLevel+0x3c>)
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7fe ff48 	bl	800f050 <cli_printf>
#endif
}
 80101c0:	bf00      	nop
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	2000148c 	.word	0x2000148c
 80101cc:	080211b8 	.word	0x080211b8

080101d0 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80101dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010208 <HumidLevel+0x38>)
 80101de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 80101e6:	f7f1 fa2f 	bl	8001648 <get_scd30_measurement>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 80101ea:	4b07      	ldr	r3, [pc, #28]	@ (8010208 <HumidLevel+0x38>)
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7f0 f9c2 	bl	8000578 <__aeabi_f2d>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	4904      	ldr	r1, [pc, #16]	@ (801020c <HumidLevel+0x3c>)
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f7fe ff28 	bl	800f050 <cli_printf>
#endif
}
 8010200:	bf00      	nop
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	2000148c 	.word	0x2000148c
 801020c:	080211d4 	.word	0x080211d4

08010210 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 801021c:	491f      	ldr	r1, [pc, #124]	@ (801029c <MotionDetection+0x8c>)
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7fe ff16 	bl	800f050 <cli_printf>
	HAL_Delay(2000);
 8010224:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8010228:	f7f3 fd7a 	bl	8003d20 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 801022c:	f7f3 fd6c 	bl	8003d08 <HAL_GetTick>
 8010230:	4603      	mov	r3, r0
 8010232:	4a1b      	ldr	r2, [pc, #108]	@ (80102a0 <MotionDetection+0x90>)
 8010234:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 8010236:	4b1b      	ldr	r3, [pc, #108]	@ (80102a4 <MotionDetection+0x94>)
 8010238:	2200      	movs	r2, #0
 801023a:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 801023c:	e01c      	b.n	8010278 <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 801023e:	2101      	movs	r1, #1
 8010240:	4819      	ldr	r0, [pc, #100]	@ (80102a8 <MotionDetection+0x98>)
 8010242:	f7f5 fd2d 	bl	8005ca0 <HAL_GPIO_ReadPin>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d003      	beq.n	8010254 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 801024c:	4b17      	ldr	r3, [pc, #92]	@ (80102ac <MotionDetection+0x9c>)
 801024e:	2201      	movs	r2, #1
 8010250:	731a      	strb	r2, [r3, #12]
 8010252:	e002      	b.n	801025a <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 8010254:	4b15      	ldr	r3, [pc, #84]	@ (80102ac <MotionDetection+0x9c>)
 8010256:	2200      	movs	r2, #0
 8010258:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801025a:	4b14      	ldr	r3, [pc, #80]	@ (80102ac <MotionDetection+0x9c>)
 801025c:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 801025e:	2b01      	cmp	r3, #1
 8010260:	d101      	bne.n	8010266 <MotionDetection+0x56>
 8010262:	4b13      	ldr	r3, [pc, #76]	@ (80102b0 <MotionDetection+0xa0>)
 8010264:	e000      	b.n	8010268 <MotionDetection+0x58>
 8010266:	4b13      	ldr	r3, [pc, #76]	@ (80102b4 <MotionDetection+0xa4>)
 8010268:	461a      	mov	r2, r3
 801026a:	4913      	ldr	r1, [pc, #76]	@ (80102b8 <MotionDetection+0xa8>)
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7fe feef 	bl	800f050 <cli_printf>
//	         	}
		HAL_Delay(100);
 8010272:	2064      	movs	r0, #100	@ 0x64
 8010274:	f7f3 fd54 	bl	8003d20 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 8010278:	f7f3 fd46 	bl	8003d08 <HAL_GetTick>
 801027c:	4602      	mov	r2, r0
 801027e:	4b08      	ldr	r3, [pc, #32]	@ (80102a0 <MotionDetection+0x90>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	1ad2      	subs	r2, r2, r3
 8010284:	4b0d      	ldr	r3, [pc, #52]	@ (80102bc <MotionDetection+0xac>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	429a      	cmp	r2, r3
 801028a:	d3d8      	bcc.n	801023e <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 801028c:	490c      	ldr	r1, [pc, #48]	@ (80102c0 <MotionDetection+0xb0>)
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f7fe fede 	bl	800f050 <cli_printf>

}
 8010294:	bf00      	nop
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	080211ec 	.word	0x080211ec
 80102a0:	20001a84 	.word	0x20001a84
 80102a4:	20001a8c 	.word	0x20001a8c
 80102a8:	40020000 	.word	0x40020000
 80102ac:	2000148c 	.word	0x2000148c
 80102b0:	08021224 	.word	0x08021224
 80102b4:	0802122c 	.word	0x0802122c
 80102b8:	08021234 	.word	0x08021234
 80102bc:	20000024 	.word	0x20000024
 80102c0:	08021248 	.word	0x08021248

080102c4 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 80102d0:	4922      	ldr	r1, [pc, #136]	@ (801035c <AirQuality+0x98>)
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7fe febc 	bl	800f050 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80102d8:	4b21      	ldr	r3, [pc, #132]	@ (8010360 <AirQuality+0x9c>)
 80102da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d104      	bne.n	80102ec <AirQuality+0x28>
 80102e2:	4b1f      	ldr	r3, [pc, #124]	@ (8010360 <AirQuality+0x9c>)
 80102e4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d004      	beq.n	80102f6 <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 80102ec:	491d      	ldr	r1, [pc, #116]	@ (8010364 <AirQuality+0xa0>)
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7fe feae 	bl	800f050 <cli_printf>
 80102f4:	e02e      	b.n	8010354 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 80102f6:	f7f1 fa61 	bl	80017bc <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 80102fa:	4b19      	ldr	r3, [pc, #100]	@ (8010360 <AirQuality+0x9c>)
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	4618      	mov	r0, r3
 8010300:	f7f0 f93a 	bl	8000578 <__aeabi_f2d>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4917      	ldr	r1, [pc, #92]	@ (8010368 <AirQuality+0xa4>)
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f7fe fea0 	bl	800f050 <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8010310:	4b13      	ldr	r3, [pc, #76]	@ (8010360 <AirQuality+0x9c>)
 8010312:	695b      	ldr	r3, [r3, #20]
 8010314:	4618      	mov	r0, r3
 8010316:	f7f0 f92f 	bl	8000578 <__aeabi_f2d>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	4913      	ldr	r1, [pc, #76]	@ (801036c <AirQuality+0xa8>)
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f7fe fe95 	bl	800f050 <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 8010326:	4b0e      	ldr	r3, [pc, #56]	@ (8010360 <AirQuality+0x9c>)
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	4618      	mov	r0, r3
 801032c:	f7f0 f924 	bl	8000578 <__aeabi_f2d>
 8010330:	4602      	mov	r2, r0
 8010332:	460b      	mov	r3, r1
 8010334:	490e      	ldr	r1, [pc, #56]	@ (8010370 <AirQuality+0xac>)
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7fe fe8a 	bl	800f050 <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 801033c:	4b08      	ldr	r3, [pc, #32]	@ (8010360 <AirQuality+0x9c>)
 801033e:	69db      	ldr	r3, [r3, #28]
 8010340:	4618      	mov	r0, r3
 8010342:	f7f0 f919 	bl	8000578 <__aeabi_f2d>
 8010346:	4602      	mov	r2, r0
 8010348:	460b      	mov	r3, r1
 801034a:	490a      	ldr	r1, [pc, #40]	@ (8010374 <AirQuality+0xb0>)
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f7fe fe7f 	bl	800f050 <cli_printf>
	}

}
 8010352:	bf00      	nop
 8010354:	bf00      	nop
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	08021258 	.word	0x08021258
 8010360:	2000148c 	.word	0x2000148c
 8010364:	08021274 	.word	0x08021274
 8010368:	08021294 	.word	0x08021294
 801036c:	080212a0 	.word	0x080212a0
 8010370:	080212b0 	.word	0x080212b0
 8010374:	080212c0 	.word	0x080212c0

08010378 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8010384:	4808      	ldr	r0, [pc, #32]	@ (80103a8 <BattVolt+0x30>)
 8010386:	f002 fd3f 	bl	8012e08 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 801038a:	4b08      	ldr	r3, [pc, #32]	@ (80103ac <BattVolt+0x34>)
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	4618      	mov	r0, r3
 8010390:	f7f0 f8f2 	bl	8000578 <__aeabi_f2d>
 8010394:	4602      	mov	r2, r0
 8010396:	460b      	mov	r3, r1
 8010398:	4905      	ldr	r1, [pc, #20]	@ (80103b0 <BattVolt+0x38>)
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f7fe fe58 	bl	800f050 <cli_printf>

}
 80103a0:	bf00      	nop
 80103a2:	3710      	adds	r7, #16
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	200014ac 	.word	0x200014ac
 80103ac:	2000148c 	.word	0x2000148c
 80103b0:	080212d0 	.word	0x080212d0

080103b4 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 80103c0:	4903      	ldr	r1, [pc, #12]	@ (80103d0 <port+0x1c>)
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f7fe fe44 	bl	800f050 <cli_printf>
}
 80103c8:	bf00      	nop
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	080212e8 	.word	0x080212e8

080103d4 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 80103d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103d6:	b0a3      	sub	sp, #140	@ 0x8c
 80103d8:	af06      	add	r7, sp, #24
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80103e0:	4b95      	ldr	r3, [pc, #596]	@ (8010638 <showall+0x264>)
 80103e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d104      	bne.n	80103f4 <showall+0x20>
 80103ea:	4b93      	ldr	r3, [pc, #588]	@ (8010638 <showall+0x264>)
 80103ec:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d006      	beq.n	8010402 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 80103f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80103f8:	4990      	ldr	r1, [pc, #576]	@ (801063c <showall+0x268>)
 80103fa:	4618      	mov	r0, r3
 80103fc:	f00c fe54 	bl	801d0a8 <siprintf>
 8010400:	e00d      	b.n	801041e <showall+0x4a>
	} else {

		get_sps30_measurement();
 8010402:	f7f1 f9db 	bl	80017bc <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 8010406:	4b8c      	ldr	r3, [pc, #560]	@ (8010638 <showall+0x264>)
 8010408:	695b      	ldr	r3, [r3, #20]
 801040a:	4618      	mov	r0, r3
 801040c:	f7f0 f8b4 	bl	8000578 <__aeabi_f2d>
 8010410:	4602      	mov	r2, r0
 8010412:	460b      	mov	r3, r1
 8010414:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8010418:	4989      	ldr	r1, [pc, #548]	@ (8010640 <showall+0x26c>)
 801041a:	f00c fe45 	bl	801d0a8 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 801041e:	4889      	ldr	r0, [pc, #548]	@ (8010644 <showall+0x270>)
 8010420:	f002 fcf2 	bl	8012e08 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8010424:	2101      	movs	r1, #1
 8010426:	4888      	ldr	r0, [pc, #544]	@ (8010648 <showall+0x274>)
 8010428:	f7f5 fc3a 	bl	8005ca0 <HAL_GPIO_ReadPin>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d003      	beq.n	801043a <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 8010432:	4b81      	ldr	r3, [pc, #516]	@ (8010638 <showall+0x264>)
 8010434:	2201      	movs	r2, #1
 8010436:	731a      	strb	r2, [r3, #12]
 8010438:	e002      	b.n	8010440 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 801043a:	4b7f      	ldr	r3, [pc, #508]	@ (8010638 <showall+0x264>)
 801043c:	2200      	movs	r2, #0
 801043e:	731a      	strb	r2, [r3, #12]
	}

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010440:	4b7d      	ldr	r3, [pc, #500]	@ (8010638 <showall+0x264>)
 8010442:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010446:	2b00      	cmp	r3, #0
 8010448:	d101      	bne.n	801044e <showall+0x7a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 801044a:	f7f1 f8fd 	bl	8001648 <get_scd30_measurement>
#endif
	}

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 801044e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010452:	2200      	movs	r2, #0
 8010454:	4619      	mov	r1, r3
 8010456:	487d      	ldr	r0, [pc, #500]	@ (801064c <showall+0x278>)
 8010458:	f7f9 f81c 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 801045c:	f107 0310 	add.w	r3, r7, #16
 8010460:	2200      	movs	r2, #0
 8010462:	4619      	mov	r1, r3
 8010464:	4879      	ldr	r0, [pc, #484]	@ (801064c <showall+0x278>)
 8010466:	f7f8 ff33 	bl	80092d0 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 801046a:	4b79      	ldr	r3, [pc, #484]	@ (8010650 <showall+0x27c>)
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <showall+0xac>

		sprintf(buff_filewritten, "Data not written yet");
 8010472:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010476:	4977      	ldr	r1, [pc, #476]	@ (8010654 <showall+0x280>)
 8010478:	4618      	mov	r0, r3
 801047a:	f00c fe15 	bl	801d0a8 <siprintf>
 801047e:	e014      	b.n	80104aa <showall+0xd6>

	} else if (datawritten == 1) {
 8010480:	4b73      	ldr	r3, [pc, #460]	@ (8010650 <showall+0x27c>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b01      	cmp	r3, #1
 8010486:	d106      	bne.n	8010496 <showall+0xc2>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 8010488:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801048c:	4972      	ldr	r1, [pc, #456]	@ (8010658 <showall+0x284>)
 801048e:	4618      	mov	r0, r3
 8010490:	f00c fe0a 	bl	801d0a8 <siprintf>
 8010494:	e009      	b.n	80104aa <showall+0xd6>
	} else if (datawritten == 2) {
 8010496:	4b6e      	ldr	r3, [pc, #440]	@ (8010650 <showall+0x27c>)
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2b02      	cmp	r3, #2
 801049c:	d105      	bne.n	80104aa <showall+0xd6>

		sprintf(buff_filewritten, " **FAILED** ");
 801049e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104a2:	496e      	ldr	r1, [pc, #440]	@ (801065c <showall+0x288>)
 80104a4:	4618      	mov	r0, r3
 80104a6:	f00c fdff 	bl	801d0a8 <siprintf>
	}

	cli_printf(cli, "");
 80104aa:	496d      	ldr	r1, [pc, #436]	@ (8010660 <showall+0x28c>)
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7fe fdcf 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 80104b2:	496b      	ldr	r1, [pc, #428]	@ (8010660 <showall+0x28c>)
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f7fe fdcb 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 80104ba:	4969      	ldr	r1, [pc, #420]	@ (8010660 <showall+0x28c>)
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f7fe fdc7 	bl	800f050 <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 80104c2:	f7f1 ff7b 	bl	80023bc <ver_GetUid>
 80104c6:	4603      	mov	r3, r0
 80104c8:	461a      	mov	r2, r3
 80104ca:	4966      	ldr	r1, [pc, #408]	@ (8010664 <showall+0x290>)
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7fe fdbf 	bl	800f050 <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 80104d2:	4a65      	ldr	r2, [pc, #404]	@ (8010668 <showall+0x294>)
 80104d4:	4965      	ldr	r1, [pc, #404]	@ (801066c <showall+0x298>)
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f7fe fdba 	bl	800f050 <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80104dc:	7c3b      	ldrb	r3, [r7, #16]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80104de:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80104e0:	7c7b      	ldrb	r3, [r7, #17]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80104e2:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80104e4:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	460b      	mov	r3, r1
 80104ea:	4961      	ldr	r1, [pc, #388]	@ (8010670 <showall+0x29c>)
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f7fe fdaf 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 80104f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80104f6:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 80104f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80104fc:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 80104fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	460b      	mov	r3, r1
 8010506:	495b      	ldr	r1, [pc, #364]	@ (8010674 <showall+0x2a0>)
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f7fe fda1 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 801050e:	4a5a      	ldr	r2, [pc, #360]	@ (8010678 <showall+0x2a4>)
 8010510:	495a      	ldr	r1, [pc, #360]	@ (801067c <showall+0x2a8>)
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f7fe fd9c 	bl	800f050 <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 8010518:	4a59      	ldr	r2, [pc, #356]	@ (8010680 <showall+0x2ac>)
 801051a:	495a      	ldr	r1, [pc, #360]	@ (8010684 <showall+0x2b0>)
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f7fe fd97 	bl	800f050 <cli_printf>
			filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 8010522:	4a59      	ldr	r2, [pc, #356]	@ (8010688 <showall+0x2b4>)
 8010524:	4959      	ldr	r1, [pc, #356]	@ (801068c <showall+0x2b8>)
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7fe fd92 	bl	800f050 <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 801052c:	4a58      	ldr	r2, [pc, #352]	@ (8010690 <showall+0x2bc>)
 801052e:	4959      	ldr	r1, [pc, #356]	@ (8010694 <showall+0x2c0>)
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f7fe fd8d 	bl	800f050 <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 8010536:	4b58      	ldr	r3, [pc, #352]	@ (8010698 <showall+0x2c4>)
 8010538:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801053c:	461a      	mov	r2, r3
 801053e:	4957      	ldr	r1, [pc, #348]	@ (801069c <showall+0x2c8>)
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7fe fd85 	bl	800f050 <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 8010546:	4b3c      	ldr	r3, [pc, #240]	@ (8010638 <showall+0x264>)
 8010548:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 801054a:	4618      	mov	r0, r3
 801054c:	f7f0 f814 	bl	8000578 <__aeabi_f2d>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4952      	ldr	r1, [pc, #328]	@ (80106a0 <showall+0x2cc>)
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f7fe fd7a 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 801055c:	4b36      	ldr	r3, [pc, #216]	@ (8010638 <showall+0x264>)
 801055e:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 8010560:	4618      	mov	r0, r3
 8010562:	f7f0 f809 	bl	8000578 <__aeabi_f2d>
 8010566:	4602      	mov	r2, r0
 8010568:	460b      	mov	r3, r1
 801056a:	494e      	ldr	r1, [pc, #312]	@ (80106a4 <showall+0x2d0>)
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f7fe fd6f 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 8010572:	4b31      	ldr	r3, [pc, #196]	@ (8010638 <showall+0x264>)
 8010574:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 8010576:	4618      	mov	r0, r3
 8010578:	f7ef fffe 	bl	8000578 <__aeabi_f2d>
 801057c:	4602      	mov	r2, r0
 801057e:	460b      	mov	r3, r1
 8010580:	4949      	ldr	r1, [pc, #292]	@ (80106a8 <showall+0x2d4>)
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	f7fe fd64 	bl	800f050 <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8010588:	4b2b      	ldr	r3, [pc, #172]	@ (8010638 <showall+0x264>)
 801058a:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 801058c:	2b01      	cmp	r3, #1
 801058e:	d101      	bne.n	8010594 <showall+0x1c0>
 8010590:	4b46      	ldr	r3, [pc, #280]	@ (80106ac <showall+0x2d8>)
 8010592:	e000      	b.n	8010596 <showall+0x1c2>
 8010594:	4b46      	ldr	r3, [pc, #280]	@ (80106b0 <showall+0x2dc>)
 8010596:	461a      	mov	r2, r3
 8010598:	4946      	ldr	r1, [pc, #280]	@ (80106b4 <showall+0x2e0>)
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f7fe fd58 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 80105a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80105a4:	461a      	mov	r2, r3
 80105a6:	4944      	ldr	r1, [pc, #272]	@ (80106b8 <showall+0x2e4>)
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f7fe fd51 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 80105ae:	4943      	ldr	r1, [pc, #268]	@ (80106bc <showall+0x2e8>)
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f7fe fd4d 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 80105b6:	4b20      	ldr	r3, [pc, #128]	@ (8010638 <showall+0x264>)
 80105b8:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7ef ffdc 	bl	8000578 <__aeabi_f2d>
 80105c0:	4602      	mov	r2, r0
 80105c2:	460b      	mov	r3, r1
 80105c4:	493e      	ldr	r1, [pc, #248]	@ (80106c0 <showall+0x2ec>)
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7fe fd42 	bl	800f050 <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 80105cc:	4b3d      	ldr	r3, [pc, #244]	@ (80106c4 <showall+0x2f0>)
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	461d      	mov	r5, r3
 80105d2:	4b3d      	ldr	r3, [pc, #244]	@ (80106c8 <showall+0x2f4>)
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	461e      	mov	r6, r3
 80105d8:	4b3c      	ldr	r3, [pc, #240]	@ (80106cc <showall+0x2f8>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	461a      	mov	r2, r3
 80105de:	4b3c      	ldr	r3, [pc, #240]	@ (80106d0 <showall+0x2fc>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	4619      	mov	r1, r3
 80105e4:	4b3b      	ldr	r3, [pc, #236]	@ (80106d4 <showall+0x300>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	4618      	mov	r0, r3
 80105ea:	4b3b      	ldr	r3, [pc, #236]	@ (80106d8 <showall+0x304>)
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	461c      	mov	r4, r3
 80105f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80105f4:	9305      	str	r3, [sp, #20]
 80105f6:	4b22      	ldr	r3, [pc, #136]	@ (8010680 <showall+0x2ac>)
 80105f8:	9304      	str	r3, [sp, #16]
 80105fa:	9403      	str	r4, [sp, #12]
 80105fc:	9002      	str	r0, [sp, #8]
 80105fe:	9101      	str	r1, [sp, #4]
 8010600:	9200      	str	r2, [sp, #0]
 8010602:	4633      	mov	r3, r6
 8010604:	462a      	mov	r2, r5
 8010606:	4935      	ldr	r1, [pc, #212]	@ (80106dc <showall+0x308>)
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f7fe fd21 	bl	800f050 <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 801060e:	4a34      	ldr	r2, [pc, #208]	@ (80106e0 <showall+0x30c>)
 8010610:	4934      	ldr	r1, [pc, #208]	@ (80106e4 <showall+0x310>)
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f7fe fd1c 	bl	800f050 <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 8010618:	4911      	ldr	r1, [pc, #68]	@ (8010660 <showall+0x28c>)
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f7fe fd18 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 8010620:	490f      	ldr	r1, [pc, #60]	@ (8010660 <showall+0x28c>)
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f7fe fd14 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 8010628:	490d      	ldr	r1, [pc, #52]	@ (8010660 <showall+0x28c>)
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7fe fd10 	bl	800f050 <cli_printf>
}
 8010630:	bf00      	nop
 8010632:	3774      	adds	r7, #116	@ 0x74
 8010634:	46bd      	mov	sp, r7
 8010636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010638:	2000148c 	.word	0x2000148c
 801063c:	08021310 	.word	0x08021310
 8010640:	0802131c 	.word	0x0802131c
 8010644:	200014ac 	.word	0x200014ac
 8010648:	40020000 	.word	0x40020000
 801064c:	200017f0 	.word	0x200017f0
 8010650:	20002375 	.word	0x20002375
 8010654:	08021324 	.word	0x08021324
 8010658:	0802133c 	.word	0x0802133c
 801065c:	08021350 	.word	0x08021350
 8010660:	08021360 	.word	0x08021360
 8010664:	08021364 	.word	0x08021364
 8010668:	200013c1 	.word	0x200013c1
 801066c:	08021394 	.word	0x08021394
 8010670:	080213c4 	.word	0x080213c4
 8010674:	080213f4 	.word	0x080213f4
 8010678:	200013f3 	.word	0x200013f3
 801067c:	08021424 	.word	0x08021424
 8010680:	200022d8 	.word	0x200022d8
 8010684:	08021454 	.word	0x08021454
 8010688:	20001358 	.word	0x20001358
 801068c:	08021484 	.word	0x08021484
 8010690:	20001457 	.word	0x20001457
 8010694:	080214b4 	.word	0x080214b4
 8010698:	200012f4 	.word	0x200012f4
 801069c:	080214e4 	.word	0x080214e4
 80106a0:	08021518 	.word	0x08021518
 80106a4:	0802154c 	.word	0x0802154c
 80106a8:	08021580 	.word	0x08021580
 80106ac:	08021224 	.word	0x08021224
 80106b0:	0802122c 	.word	0x0802122c
 80106b4:	080215b4 	.word	0x080215b4
 80106b8:	080215e4 	.word	0x080215e4
 80106bc:	08021614 	.word	0x08021614
 80106c0:	08021644 	.word	0x08021644
 80106c4:	2000236f 	.word	0x2000236f
 80106c8:	20002370 	.word	0x20002370
 80106cc:	20002371 	.word	0x20002371
 80106d0:	20002372 	.word	0x20002372
 80106d4:	20002373 	.word	0x20002373
 80106d8:	20002374 	.word	0x20002374
 80106dc:	08021674 	.word	0x08021674
 80106e0:	20000030 	.word	0x20000030
 80106e4:	080216dc 	.word	0x080216dc

080106e8 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80106f4:	4911      	ldr	r1, [pc, #68]	@ (801073c <systemversion+0x54>)
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f7fe fcaa 	bl	800f050 <cli_printf>
		cli_printf(cli, "");
 80106fc:	490f      	ldr	r1, [pc, #60]	@ (801073c <systemversion+0x54>)
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	f7fe fca6 	bl	800f050 <cli_printf>
		cli_printf(cli, "");
 8010704:	490d      	ldr	r1, [pc, #52]	@ (801073c <systemversion+0x54>)
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7fe fca2 	bl	800f050 <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 801070c:	490c      	ldr	r1, [pc, #48]	@ (8010740 <systemversion+0x58>)
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f7fe fc9e 	bl	800f050 <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 8010714:	490b      	ldr	r1, [pc, #44]	@ (8010744 <systemversion+0x5c>)
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f7fe fc9a 	bl	800f050 <cli_printf>

		cli_printf(cli, "");
 801071c:	4907      	ldr	r1, [pc, #28]	@ (801073c <systemversion+0x54>)
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f7fe fc96 	bl	800f050 <cli_printf>
			cli_printf(cli, "");
 8010724:	4905      	ldr	r1, [pc, #20]	@ (801073c <systemversion+0x54>)
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f7fe fc92 	bl	800f050 <cli_printf>
			cli_printf(cli, "");
 801072c:	4903      	ldr	r1, [pc, #12]	@ (801073c <systemversion+0x54>)
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f7fe fc8e 	bl	800f050 <cli_printf>

}
 8010734:	bf00      	nop
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	08021360 	.word	0x08021360
 8010740:	0802170c 	.word	0x0802170c
 8010744:	08021744 	.word	0x08021744

08010748 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 8010754:	4917      	ldr	r1, [pc, #92]	@ (80107b4 <aboutDev+0x6c>)
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7fe fc7a 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 801075c:	4915      	ldr	r1, [pc, #84]	@ (80107b4 <aboutDev+0x6c>)
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	f7fe fc76 	bl	800f050 <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 8010764:	4914      	ldr	r1, [pc, #80]	@ (80107b8 <aboutDev+0x70>)
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f7fe fc72 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 801076c:	4911      	ldr	r1, [pc, #68]	@ (80107b4 <aboutDev+0x6c>)
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7fe fc6e 	bl	800f050 <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8010774:	4911      	ldr	r1, [pc, #68]	@ (80107bc <aboutDev+0x74>)
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f7fe fc6a 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 801077c:	490d      	ldr	r1, [pc, #52]	@ (80107b4 <aboutDev+0x6c>)
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f7fe fc66 	bl	800f050 <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 8010784:	490e      	ldr	r1, [pc, #56]	@ (80107c0 <aboutDev+0x78>)
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7fe fc62 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 801078c:	4909      	ldr	r1, [pc, #36]	@ (80107b4 <aboutDev+0x6c>)
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f7fe fc5e 	bl	800f050 <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 8010794:	490b      	ldr	r1, [pc, #44]	@ (80107c4 <aboutDev+0x7c>)
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f7fe fc5a 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 801079c:	4905      	ldr	r1, [pc, #20]	@ (80107b4 <aboutDev+0x6c>)
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7fe fc56 	bl	800f050 <cli_printf>
	cli_printf(cli, "");
 80107a4:	4903      	ldr	r1, [pc, #12]	@ (80107b4 <aboutDev+0x6c>)
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f7fe fc52 	bl	800f050 <cli_printf>
}
 80107ac:	bf00      	nop
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	08021360 	.word	0x08021360
 80107b8:	0802177c 	.word	0x0802177c
 80107bc:	080217a4 	.word	0x080217a4
 80107c0:	080217cc 	.word	0x080217cc
 80107c4:	080217e0 	.word	0x080217e0

080107c8 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80107c8:	b5b0      	push	{r4, r5, r7, lr}
 80107ca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80107ce:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80107d0:	f000 fd0f 	bl	80111f2 <embeddedCliNewDefault>
 80107d4:	4603      	mov	r3, r0
 80107d6:	4aaa      	ldr	r2, [pc, #680]	@ (8010a80 <initializeEmbeddedCli+0x2b8>)
 80107d8:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80107da:	4baa      	ldr	r3, [pc, #680]	@ (8010a84 <initializeEmbeddedCli+0x2bc>)
 80107dc:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 80107e0:	461d      	mov	r5, r3
 80107e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107e6:	682b      	ldr	r3, [r5, #0]
 80107e8:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80107ea:	4ba7      	ldr	r3, [pc, #668]	@ (8010a88 <initializeEmbeddedCli+0x2c0>)
 80107ec:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80107f0:	461d      	mov	r5, r3
 80107f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107f6:	682b      	ldr	r3, [r5, #0]
 80107f8:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80107fa:	4ba4      	ldr	r3, [pc, #656]	@ (8010a8c <initializeEmbeddedCli+0x2c4>)
 80107fc:	f507 7411 	add.w	r4, r7, #580	@ 0x244
 8010800:	461d      	mov	r5, r3
 8010802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010806:	682b      	ldr	r3, [r5, #0]
 8010808:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 801080a:	4ba1      	ldr	r3, [pc, #644]	@ (8010a90 <initializeEmbeddedCli+0x2c8>)
 801080c:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 8010810:	461d      	mov	r5, r3
 8010812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010816:	682b      	ldr	r3, [r5, #0]
 8010818:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 801081a:	4b9e      	ldr	r3, [pc, #632]	@ (8010a94 <initializeEmbeddedCli+0x2cc>)
 801081c:	f507 7407 	add.w	r4, r7, #540	@ 0x21c
 8010820:	461d      	mov	r5, r3
 8010822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010826:	682b      	ldr	r3, [r5, #0]
 8010828:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 801082a:	4b9b      	ldr	r3, [pc, #620]	@ (8010a98 <initializeEmbeddedCli+0x2d0>)
 801082c:	f507 7402 	add.w	r4, r7, #520	@ 0x208
 8010830:	461d      	mov	r5, r3
 8010832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010836:	682b      	ldr	r3, [r5, #0]
 8010838:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 801083a:	4b98      	ldr	r3, [pc, #608]	@ (8010a9c <initializeEmbeddedCli+0x2d4>)
 801083c:	f507 74fa 	add.w	r4, r7, #500	@ 0x1f4
 8010840:	461d      	mov	r5, r3
 8010842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010846:	682b      	ldr	r3, [r5, #0]
 8010848:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 801084a:	4b95      	ldr	r3, [pc, #596]	@ (8010aa0 <initializeEmbeddedCli+0x2d8>)
 801084c:	f507 74f0 	add.w	r4, r7, #480	@ 0x1e0
 8010850:	461d      	mov	r5, r3
 8010852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 801085a:	4b92      	ldr	r3, [pc, #584]	@ (8010aa4 <initializeEmbeddedCli+0x2dc>)
 801085c:	f507 74e6 	add.w	r4, r7, #460	@ 0x1cc
 8010860:	461d      	mov	r5, r3
 8010862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010866:	682b      	ldr	r3, [r5, #0]
 8010868:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 801086a:	4b8f      	ldr	r3, [pc, #572]	@ (8010aa8 <initializeEmbeddedCli+0x2e0>)
 801086c:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8010870:	461d      	mov	r5, r3
 8010872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010876:	682b      	ldr	r3, [r5, #0]
 8010878:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 801087a:	4b8c      	ldr	r3, [pc, #560]	@ (8010aac <initializeEmbeddedCli+0x2e4>)
 801087c:	f507 74d2 	add.w	r4, r7, #420	@ 0x1a4
 8010880:	461d      	mov	r5, r3
 8010882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010886:	682b      	ldr	r3, [r5, #0]
 8010888:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 801088a:	4b89      	ldr	r3, [pc, #548]	@ (8010ab0 <initializeEmbeddedCli+0x2e8>)
 801088c:	f507 74c8 	add.w	r4, r7, #400	@ 0x190
 8010890:	461d      	mov	r5, r3
 8010892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010896:	682b      	ldr	r3, [r5, #0]
 8010898:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 801089a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801089e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80108a2:	4a84      	ldr	r2, [pc, #528]	@ (8010ab4 <initializeEmbeddedCli+0x2ec>)
 80108a4:	461c      	mov	r4, r3
 80108a6:	4615      	mov	r5, r2
 80108a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 80108b0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80108b8:	4a7f      	ldr	r2, [pc, #508]	@ (8010ab8 <initializeEmbeddedCli+0x2f0>)
 80108ba:	461c      	mov	r4, r3
 80108bc:	4615      	mov	r5, r2
 80108be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108c2:	682b      	ldr	r3, [r5, #0]
 80108c4:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 80108c6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80108ce:	4a7b      	ldr	r2, [pc, #492]	@ (8010abc <initializeEmbeddedCli+0x2f4>)
 80108d0:	461c      	mov	r4, r3
 80108d2:	4615      	mov	r5, r2
 80108d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108d8:	682b      	ldr	r3, [r5, #0]
 80108da:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80108dc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80108e4:	4a76      	ldr	r2, [pc, #472]	@ (8010ac0 <initializeEmbeddedCli+0x2f8>)
 80108e6:	461c      	mov	r4, r3
 80108e8:	4615      	mov	r5, r2
 80108ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ee:	682b      	ldr	r3, [r5, #0]
 80108f0:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80108f2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80108fa:	4a72      	ldr	r2, [pc, #456]	@ (8010ac4 <initializeEmbeddedCli+0x2fc>)
 80108fc:	461c      	mov	r4, r3
 80108fe:	4615      	mov	r5, r2
 8010900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 8010908:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801090c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8010910:	4a6d      	ldr	r2, [pc, #436]	@ (8010ac8 <initializeEmbeddedCli+0x300>)
 8010912:	461c      	mov	r4, r3
 8010914:	4615      	mov	r5, r2
 8010916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801091a:	682b      	ldr	r3, [r5, #0]
 801091c:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 801091e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010922:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8010926:	4a69      	ldr	r2, [pc, #420]	@ (8010acc <initializeEmbeddedCli+0x304>)
 8010928:	461c      	mov	r4, r3
 801092a:	4615      	mov	r5, r2
 801092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801092e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8010934:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010938:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801093c:	4a64      	ldr	r2, [pc, #400]	@ (8010ad0 <initializeEmbeddedCli+0x308>)
 801093e:	461c      	mov	r4, r3
 8010940:	4615      	mov	r5, r2
 8010942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010946:	682b      	ldr	r3, [r5, #0]
 8010948:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 801094a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801094e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8010952:	4a60      	ldr	r2, [pc, #384]	@ (8010ad4 <initializeEmbeddedCli+0x30c>)
 8010954:	461c      	mov	r4, r3
 8010956:	4615      	mov	r5, r2
 8010958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801095a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801095c:	682b      	ldr	r3, [r5, #0]
 801095e:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8010960:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010964:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8010968:	4a5b      	ldr	r2, [pc, #364]	@ (8010ad8 <initializeEmbeddedCli+0x310>)
 801096a:	461c      	mov	r4, r3
 801096c:	4615      	mov	r5, r2
 801096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010972:	682b      	ldr	r3, [r5, #0]
 8010974:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8010976:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801097a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801097e:	4a57      	ldr	r2, [pc, #348]	@ (8010adc <initializeEmbeddedCli+0x314>)
 8010980:	461c      	mov	r4, r3
 8010982:	4615      	mov	r5, r2
 8010984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010988:	682b      	ldr	r3, [r5, #0]
 801098a:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 801098c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010990:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010994:	4a52      	ldr	r2, [pc, #328]	@ (8010ae0 <initializeEmbeddedCli+0x318>)
 8010996:	461c      	mov	r4, r3
 8010998:	4615      	mov	r5, r2
 801099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801099e:	682b      	ldr	r3, [r5, #0]
 80109a0:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 80109a2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109a6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80109aa:	4a4e      	ldr	r2, [pc, #312]	@ (8010ae4 <initializeEmbeddedCli+0x31c>)
 80109ac:	461c      	mov	r4, r3
 80109ae:	4615      	mov	r5, r2
 80109b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 80109b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109bc:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80109c0:	4a49      	ldr	r2, [pc, #292]	@ (8010ae8 <initializeEmbeddedCli+0x320>)
 80109c2:	461c      	mov	r4, r3
 80109c4:	4615      	mov	r5, r2
 80109c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109ca:	682b      	ldr	r3, [r5, #0]
 80109cc:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 80109ce:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109d2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80109d6:	4a45      	ldr	r2, [pc, #276]	@ (8010aec <initializeEmbeddedCli+0x324>)
 80109d8:	461c      	mov	r4, r3
 80109da:	4615      	mov	r5, r2
 80109dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 80109e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109e8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80109ec:	4a40      	ldr	r2, [pc, #256]	@ (8010af0 <initializeEmbeddedCli+0x328>)
 80109ee:	461c      	mov	r4, r3
 80109f0:	4615      	mov	r5, r2
 80109f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 80109fa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109fe:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8010a02:	4a3c      	ldr	r2, [pc, #240]	@ (8010af4 <initializeEmbeddedCli+0x32c>)
 8010a04:	461c      	mov	r4, r3
 8010a06:	4615      	mov	r5, r2
 8010a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8010a10:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a14:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8010a18:	4a37      	ldr	r2, [pc, #220]	@ (8010af8 <initializeEmbeddedCli+0x330>)
 8010a1a:	461c      	mov	r4, r3
 8010a1c:	4615      	mov	r5, r2
 8010a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a22:	682b      	ldr	r3, [r5, #0]
 8010a24:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8010a26:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a2a:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8010a2e:	4a33      	ldr	r2, [pc, #204]	@ (8010afc <initializeEmbeddedCli+0x334>)
 8010a30:	461c      	mov	r4, r3
 8010a32:	4615      	mov	r5, r2
 8010a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a38:	682b      	ldr	r3, [r5, #0]
 8010a3a:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8010a3c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a40:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010a44:	4a2e      	ldr	r2, [pc, #184]	@ (8010b00 <initializeEmbeddedCli+0x338>)
 8010a46:	461c      	mov	r4, r3
 8010a48:	4615      	mov	r5, r2
 8010a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a4e:	682b      	ldr	r3, [r5, #0]
 8010a50:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8010a52:	4b0b      	ldr	r3, [pc, #44]	@ (8010a80 <initializeEmbeddedCli+0x2b8>)
 8010a54:	681c      	ldr	r4, [r3, #0]
 8010a56:	466a      	mov	r2, sp
 8010a58:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8010a5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a60:	e882 0003 	stmia.w	r2, {r0, r1}
 8010a64:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8010a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f000 fc7f 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8010a70:	4b03      	ldr	r3, [pc, #12]	@ (8010a80 <initializeEmbeddedCli+0x2b8>)
 8010a72:	681c      	ldr	r4, [r3, #0]
 8010a74:	466a      	mov	r2, sp
 8010a76:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8010a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a7e:	e041      	b.n	8010b04 <initializeEmbeddedCli+0x33c>
 8010a80:	20001a7c 	.word	0x20001a7c
 8010a84:	08021818 	.word	0x08021818
 8010a88:	0802186c 	.word	0x0802186c
 8010a8c:	080218d4 	.word	0x080218d4
 8010a90:	08021914 	.word	0x08021914
 8010a94:	08021974 	.word	0x08021974
 8010a98:	080219c4 	.word	0x080219c4
 8010a9c:	080219e8 	.word	0x080219e8
 8010aa0:	08021a1c 	.word	0x08021a1c
 8010aa4:	08021a48 	.word	0x08021a48
 8010aa8:	08021a7c 	.word	0x08021a7c
 8010aac:	08021aa8 	.word	0x08021aa8
 8010ab0:	08021adc 	.word	0x08021adc
 8010ab4:	08021b10 	.word	0x08021b10
 8010ab8:	08021b5c 	.word	0x08021b5c
 8010abc:	08021b94 	.word	0x08021b94
 8010ac0:	08021bf8 	.word	0x08021bf8
 8010ac4:	08021c2c 	.word	0x08021c2c
 8010ac8:	08021c68 	.word	0x08021c68
 8010acc:	08021c9c 	.word	0x08021c9c
 8010ad0:	08021cdc 	.word	0x08021cdc
 8010ad4:	08021d1c 	.word	0x08021d1c
 8010ad8:	08021d54 	.word	0x08021d54
 8010adc:	08021d88 	.word	0x08021d88
 8010ae0:	08021dd0 	.word	0x08021dd0
 8010ae4:	08021e18 	.word	0x08021e18
 8010ae8:	08021e60 	.word	0x08021e60
 8010aec:	08021e98 	.word	0x08021e98
 8010af0:	08021efc 	.word	0x08021efc
 8010af4:	08021f28 	.word	0x08021f28
 8010af8:	08021f60 	.word	0x08021f60
 8010afc:	08021fa4 	.word	0x08021fa4
 8010b00:	08021fdc 	.word	0x08021fdc
 8010b04:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b08:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8010b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 fc2d 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8010b14:	4bd6      	ldr	r3, [pc, #856]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010b16:	681c      	ldr	r4, [r3, #0]
 8010b18:	466a      	mov	r2, sp
 8010b1a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8010b1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b22:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b26:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8010b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f000 fc1e 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8010b32:	4bcf      	ldr	r3, [pc, #828]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010b34:	681c      	ldr	r4, [r3, #0]
 8010b36:	466a      	mov	r2, sp
 8010b38:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8010b3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b40:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b44:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8010b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 fc0f 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8010b50:	4bc7      	ldr	r3, [pc, #796]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010b52:	681c      	ldr	r4, [r3, #0]
 8010b54:	466a      	mov	r2, sp
 8010b56:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8010b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b62:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8010b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f000 fc00 	bl	801136e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8010b6e:	4bc0      	ldr	r3, [pc, #768]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010b70:	681c      	ldr	r4, [r3, #0]
 8010b72:	466a      	mov	r2, sp
 8010b74:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8010b78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8010b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 fbf1 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8010b8c:	4bb8      	ldr	r3, [pc, #736]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010b8e:	681c      	ldr	r4, [r3, #0]
 8010b90:	466a      	mov	r2, sp
 8010b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8010b96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b9a:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b9e:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 8010ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f000 fbe2 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8010baa:	4bb1      	ldr	r3, [pc, #708]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010bac:	681c      	ldr	r4, [r3, #0]
 8010bae:	466a      	mov	r2, sp
 8010bb0:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8010bb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010bb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8010bbc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f000 fbd3 	bl	801136e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8010bc8:	4ba9      	ldr	r3, [pc, #676]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010bca:	681c      	ldr	r4, [r3, #0]
 8010bcc:	466a      	mov	r2, sp
 8010bce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010bd6:	e882 0003 	stmia.w	r2, {r0, r1}
 8010bda:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8010bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010be0:	4620      	mov	r0, r4
 8010be2:	f000 fbc4 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8010be6:	4ba2      	ldr	r3, [pc, #648]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010be8:	681c      	ldr	r4, [r3, #0]
 8010bea:	466a      	mov	r2, sp
 8010bec:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8010bf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010bf4:	e882 0003 	stmia.w	r2, {r0, r1}
 8010bf8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8010bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f000 fbb5 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8010c04:	4b9a      	ldr	r3, [pc, #616]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010c06:	681c      	ldr	r4, [r3, #0]
 8010c08:	466a      	mov	r2, sp
 8010c0a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8010c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c12:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c16:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8010c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 fba6 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8010c22:	4b93      	ldr	r3, [pc, #588]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010c24:	681c      	ldr	r4, [r3, #0]
 8010c26:	466a      	mov	r2, sp
 8010c28:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8010c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c30:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c34:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 fb97 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8010c40:	4b8b      	ldr	r3, [pc, #556]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010c42:	681c      	ldr	r4, [r3, #0]
 8010c44:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010c4c:	466d      	mov	r5, sp
 8010c4e:	f103 020c 	add.w	r2, r3, #12
 8010c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f000 fb86 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8010c62:	4b83      	ldr	r3, [pc, #524]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010c64:	681c      	ldr	r4, [r3, #0]
 8010c66:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c6a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010c6e:	466d      	mov	r5, sp
 8010c70:	f103 020c 	add.w	r2, r3, #12
 8010c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c78:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f000 fb75 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8010c84:	4b7a      	ldr	r3, [pc, #488]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010c86:	681c      	ldr	r4, [r3, #0]
 8010c88:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c90:	466d      	mov	r5, sp
 8010c92:	f103 020c 	add.w	r2, r3, #12
 8010c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f000 fb64 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8010ca6:	4b72      	ldr	r3, [pc, #456]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010ca8:	681c      	ldr	r4, [r3, #0]
 8010caa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010cae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010cb2:	466d      	mov	r5, sp
 8010cb4:	f103 020c 	add.w	r2, r3, #12
 8010cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8010cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f000 fb53 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010cc8:	4b69      	ldr	r3, [pc, #420]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010cca:	681c      	ldr	r4, [r3, #0]
 8010ccc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010cd0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8010cd4:	466d      	mov	r5, sp
 8010cd6:	f103 020c 	add.w	r2, r3, #12
 8010cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f000 fb42 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8010cea:	4b61      	ldr	r3, [pc, #388]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010cec:	681c      	ldr	r4, [r3, #0]
 8010cee:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010cf2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8010cf6:	466d      	mov	r5, sp
 8010cf8:	f103 020c 	add.w	r2, r3, #12
 8010cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d06:	4620      	mov	r0, r4
 8010d08:	f000 fb31 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8010d0c:	4b58      	ldr	r3, [pc, #352]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010d0e:	681c      	ldr	r4, [r3, #0]
 8010d10:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d14:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8010d18:	466d      	mov	r5, sp
 8010d1a:	f103 020c 	add.w	r2, r3, #12
 8010d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fb20 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8010d2e:	4b50      	ldr	r3, [pc, #320]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010d30:	681c      	ldr	r4, [r3, #0]
 8010d32:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010d3a:	466d      	mov	r5, sp
 8010d3c:	f103 020c 	add.w	r2, r3, #12
 8010d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d44:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	f000 fb0f 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8010d50:	4b47      	ldr	r3, [pc, #284]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010d52:	681c      	ldr	r4, [r3, #0]
 8010d54:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d58:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8010d5c:	466d      	mov	r5, sp
 8010d5e:	f103 020c 	add.w	r2, r3, #12
 8010d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f000 fafe 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8010d72:	4b3f      	ldr	r3, [pc, #252]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010d74:	681c      	ldr	r4, [r3, #0]
 8010d76:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d7a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8010d7e:	466d      	mov	r5, sp
 8010d80:	f103 020c 	add.w	r2, r3, #12
 8010d84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d88:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 faed 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8010d94:	4b36      	ldr	r3, [pc, #216]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010d96:	681c      	ldr	r4, [r3, #0]
 8010d98:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d9c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010da0:	466d      	mov	r5, sp
 8010da2:	f103 020c 	add.w	r2, r3, #12
 8010da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8010dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010db0:	4620      	mov	r0, r4
 8010db2:	f000 fadc 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8010db6:	4b2e      	ldr	r3, [pc, #184]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010db8:	681c      	ldr	r4, [r3, #0]
 8010dba:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010dbe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010dc2:	466d      	mov	r5, sp
 8010dc4:	f103 020c 	add.w	r2, r3, #12
 8010dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8010dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f000 facb 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8010dd8:	4b25      	ldr	r3, [pc, #148]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010dda:	681c      	ldr	r4, [r3, #0]
 8010ddc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010de0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8010de4:	466d      	mov	r5, sp
 8010de6:	f103 020c 	add.w	r2, r3, #12
 8010dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8010df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010df4:	4620      	mov	r0, r4
 8010df6:	f000 faba 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8010dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010dfc:	681c      	ldr	r4, [r3, #0]
 8010dfe:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e02:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8010e06:	466d      	mov	r5, sp
 8010e08:	f103 020c 	add.w	r2, r3, #12
 8010e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e10:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e16:	4620      	mov	r0, r4
 8010e18:	f000 faa9 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8010e1c:	4b14      	ldr	r3, [pc, #80]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010e1e:	681c      	ldr	r4, [r3, #0]
 8010e20:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e24:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8010e28:	466d      	mov	r5, sp
 8010e2a:	f103 020c 	add.w	r2, r3, #12
 8010e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f000 fa98 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8010e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010e40:	681c      	ldr	r4, [r3, #0]
 8010e42:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e46:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010e4a:	466d      	mov	r5, sp
 8010e4c:	f103 020c 	add.w	r2, r3, #12
 8010e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e54:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f000 fa87 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8010e60:	4b03      	ldr	r3, [pc, #12]	@ (8010e70 <initializeEmbeddedCli+0x6a8>)
 8010e62:	681c      	ldr	r4, [r3, #0]
 8010e64:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e68:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8010e6c:	e002      	b.n	8010e74 <initializeEmbeddedCli+0x6ac>
 8010e6e:	bf00      	nop
 8010e70:	20001a7c 	.word	0x20001a7c
 8010e74:	466d      	mov	r5, sp
 8010e76:	f103 020c 	add.w	r2, r3, #12
 8010e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e84:	4620      	mov	r0, r4
 8010e86:	f000 fa72 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 8010e8a:	4b21      	ldr	r3, [pc, #132]	@ (8010f10 <initializeEmbeddedCli+0x748>)
 8010e8c:	681c      	ldr	r4, [r3, #0]
 8010e8e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e92:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8010e96:	466d      	mov	r5, sp
 8010e98:	f103 020c 	add.w	r2, r3, #12
 8010e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f000 fa61 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 8010eac:	4b18      	ldr	r3, [pc, #96]	@ (8010f10 <initializeEmbeddedCli+0x748>)
 8010eae:	681c      	ldr	r4, [r3, #0]
 8010eb0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010eb4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8010eb8:	466d      	mov	r5, sp
 8010eba:	f103 020c 	add.w	r2, r3, #12
 8010ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ec2:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f000 fa50 	bl	801136e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 8010ece:	4b10      	ldr	r3, [pc, #64]	@ (8010f10 <initializeEmbeddedCli+0x748>)
 8010ed0:	681c      	ldr	r4, [r3, #0]
 8010ed2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010ed6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010eda:	466d      	mov	r5, sp
 8010edc:	f103 020c 	add.w	r2, r3, #12
 8010ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010eea:	4620      	mov	r0, r4
 8010eec:	f000 fa3f 	bl	801136e <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8010ef0:	4b07      	ldr	r3, [pc, #28]	@ (8010f10 <initializeEmbeddedCli+0x748>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a07      	ldr	r2, [pc, #28]	@ (8010f14 <initializeEmbeddedCli+0x74c>)
 8010ef6:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010ef8:	4b07      	ldr	r3, [pc, #28]	@ (8010f18 <initializeEmbeddedCli+0x750>)
 8010efa:	2201      	movs	r2, #1
 8010efc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010efe:	4b07      	ldr	r3, [pc, #28]	@ (8010f1c <initializeEmbeddedCli+0x754>)
 8010f00:	2200      	movs	r2, #0
 8010f02:	701a      	strb	r2, [r3, #0]
}
 8010f04:	bf00      	nop
 8010f06:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20001a7c 	.word	0x20001a7c
 8010f14:	0800f025 	.word	0x0800f025
 8010f18:	20001a89 	.word	0x20001a89
 8010f1c:	20001a8a 	.word	0x20001a8a

08010f20 <console_process>:

void console_process(void) {
 8010f20:	b580      	push	{r7, lr}
 8010f22:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010f24:	4b03      	ldr	r3, [pc, #12]	@ (8010f34 <console_process+0x14>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f000 f990 	bl	801124e <embeddedCliProcess>
}
 8010f2e:	bf00      	nop
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20001a7c 	.word	0x20001a7c

08010f38 <console_uart_deinit>:

void console_uart_deinit() {
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010f3c:	4803      	ldr	r0, [pc, #12]	@ (8010f4c <console_uart_deinit+0x14>)
 8010f3e:	f7fa fdbe 	bl	800babe <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8010f42:	4802      	ldr	r0, [pc, #8]	@ (8010f4c <console_uart_deinit+0x14>)
 8010f44:	f7f2 fcb8 	bl	80038b8 <HAL_UART_MspDeInit>
}
 8010f48:	bf00      	nop
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	200019cc 	.word	0x200019cc

08010f50 <console_uart_init>:
void console_uart_init() {
 8010f50:	b580      	push	{r7, lr}
 8010f52:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010f54:	4815      	ldr	r0, [pc, #84]	@ (8010fac <console_uart_init+0x5c>)
 8010f56:	f7fa fdb2 	bl	800babe <HAL_UART_DeInit>
	huart1.Instance = USART1;
 8010f5a:	4b14      	ldr	r3, [pc, #80]	@ (8010fac <console_uart_init+0x5c>)
 8010f5c:	4a14      	ldr	r2, [pc, #80]	@ (8010fb0 <console_uart_init+0x60>)
 8010f5e:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8010f60:	4b12      	ldr	r3, [pc, #72]	@ (8010fac <console_uart_init+0x5c>)
 8010f62:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8010f66:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010f68:	4b10      	ldr	r3, [pc, #64]	@ (8010fac <console_uart_init+0x5c>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8010f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8010fac <console_uart_init+0x5c>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8010f74:	4b0d      	ldr	r3, [pc, #52]	@ (8010fac <console_uart_init+0x5c>)
 8010f76:	2200      	movs	r2, #0
 8010f78:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8010f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8010fac <console_uart_init+0x5c>)
 8010f7c:	220c      	movs	r2, #12
 8010f7e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010f80:	4b0a      	ldr	r3, [pc, #40]	@ (8010fac <console_uart_init+0x5c>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010f86:	4b09      	ldr	r3, [pc, #36]	@ (8010fac <console_uart_init+0x5c>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8010f8c:	4807      	ldr	r0, [pc, #28]	@ (8010fac <console_uart_init+0x5c>)
 8010f8e:	f7fa fd49 	bl	800ba24 <HAL_UART_Init>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <console_uart_init+0x4c>
		Error_Handler();
 8010f98:	f7f2 f96c 	bl	8003274 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	4905      	ldr	r1, [pc, #20]	@ (8010fb4 <console_uart_init+0x64>)
 8010fa0:	4802      	ldr	r0, [pc, #8]	@ (8010fac <console_uart_init+0x5c>)
 8010fa2:	f7fa fe4d 	bl	800bc40 <HAL_UART_Receive_IT>
}
 8010fa6:	bf00      	nop
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	200019cc 	.word	0x200019cc
 8010fb0:	40011000 	.word	0x40011000
 8010fb4:	20001a88 	.word	0x20001a88

08010fb8 <console_init>:

void console_init(void) {
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
	console_uart_init();
 8010fbc:	f7ff ffc8 	bl	8010f50 <console_uart_init>
	initializeEmbeddedCli();
 8010fc0:	f7ff fc02 	bl	80107c8 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	4903      	ldr	r1, [pc, #12]	@ (8010fd4 <console_init+0x1c>)
 8010fc8:	4803      	ldr	r0, [pc, #12]	@ (8010fd8 <console_init+0x20>)
 8010fca:	f7fa fe39 	bl	800bc40 <HAL_UART_Receive_IT>
}
 8010fce:	bf00      	nop
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20001a88 	.word	0x20001a88
 8010fd8:	200019cc 	.word	0x200019cc

08010fdc <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8010fdc:	b480      	push	{r7}
 8010fde:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8010fe0:	4b0e      	ldr	r3, [pc, #56]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8010fe2:	2240      	movs	r2, #64	@ 0x40
 8010fe4:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8010fe6:	4b0d      	ldr	r3, [pc, #52]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8010fe8:	2240      	movs	r2, #64	@ 0x40
 8010fea:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8010fec:	4b0b      	ldr	r3, [pc, #44]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8010fee:	2280      	movs	r2, #128	@ 0x80
 8010ff0:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8010ff2:	4b0a      	ldr	r3, [pc, #40]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8010ff8:	4b08      	ldr	r3, [pc, #32]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 8010ffe:	4b07      	ldr	r3, [pc, #28]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8011000:	2232      	movs	r2, #50	@ 0x32
 8011002:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8011004:	4b05      	ldr	r3, [pc, #20]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 8011006:	2201      	movs	r2, #1
 8011008:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 801100a:	4b04      	ldr	r3, [pc, #16]	@ (801101c <embeddedCliDefaultConfig+0x40>)
 801100c:	4a04      	ldr	r2, [pc, #16]	@ (8011020 <embeddedCliDefaultConfig+0x44>)
 801100e:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8011010:	4b02      	ldr	r3, [pc, #8]	@ (801101c <embeddedCliDefaultConfig+0x40>)
}
 8011012:	4618      	mov	r0, r3
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	20001a90 	.word	0x20001a90
 8011020:	08021ff4 	.word	0x08021ff4

08011024 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8011024:	b480      	push	{r7}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	895b      	ldrh	r3, [r3, #10]
 8011030:	2201      	movs	r2, #1
 8011032:	4413      	add	r3, r2
 8011034:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	889b      	ldrh	r3, [r3, #4]
 801103a:	3303      	adds	r3, #3
 801103c:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	88db      	ldrh	r3, [r3, #6]
 8011042:	3303      	adds	r3, #3
 8011044:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8011046:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	891b      	ldrh	r3, [r3, #8]
 801104c:	3303      	adds	r3, #3
 801104e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8011050:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8011052:	89fa      	ldrh	r2, [r7, #14]
 8011054:	4613      	mov	r3, r2
 8011056:	009b      	lsls	r3, r3, #2
 8011058:	4413      	add	r3, r2
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	3303      	adds	r3, #3
 801105e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8011060:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8011062:	89fb      	ldrh	r3, [r7, #14]
 8011064:	3303      	adds	r3, #3
 8011066:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8011068:	4413      	add	r3, r2
 801106a:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 801106c:	b29b      	uxth	r3, r3
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	b29b      	uxth	r3, r3
}
 8011072:	4618      	mov	r0, r3
 8011074:	3714      	adds	r7, #20
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr

0801107e <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 801107e:	b580      	push	{r7, lr}
 8011080:	b088      	sub	sp, #32
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8011086:	2300      	movs	r3, #0
 8011088:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	895b      	ldrh	r3, [r3, #10]
 801108e:	2201      	movs	r2, #1
 8011090:	4413      	add	r3, r2
 8011092:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7ff ffc5 	bl	8011024 <embeddedCliRequiredSize>
 801109a:	4603      	mov	r3, r0
 801109c:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 801109e:	2300      	movs	r3, #0
 80110a0:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	68db      	ldr	r3, [r3, #12]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10f      	bne.n	80110ca <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 80110aa:	6938      	ldr	r0, [r7, #16]
 80110ac:	f00a fec8 	bl	801be40 <malloc>
 80110b0:	4603      	mov	r3, r0
 80110b2:	461a      	mov	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d101      	bne.n	80110c4 <embeddedCliNew+0x46>
            return NULL;
 80110c0:	2300      	movs	r3, #0
 80110c2:	e092      	b.n	80111ea <embeddedCliNew+0x16c>
        allocated = true;
 80110c4:	2301      	movs	r3, #1
 80110c6:	77fb      	strb	r3, [r7, #31]
 80110c8:	e007      	b.n	80110da <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8a1b      	ldrh	r3, [r3, #16]
 80110ce:	461a      	mov	r2, r3
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d901      	bls.n	80110da <embeddedCliNew+0x5c>
        return NULL;
 80110d6:	2300      	movs	r3, #0
 80110d8:	e087      	b.n	80111ea <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 80110e0:	693a      	ldr	r2, [r7, #16]
 80110e2:	2100      	movs	r1, #0
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f00c f929 	bl	801d33c <memset>

    cli = (EmbeddedCli *) buf;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3310      	adds	r3, #16
 80110f2:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80110f4:	69bb      	ldr	r3, [r7, #24]
 80110f6:	68fa      	ldr	r2, [r7, #12]
 80110f8:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3334      	adds	r3, #52	@ 0x34
 80110fe:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	889b      	ldrh	r3, [r3, #4]
 8011110:	3303      	adds	r3, #3
 8011112:	f023 0303 	bic.w	r3, r3, #3
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	4413      	add	r3, r2
 801111a:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	88db      	ldrh	r3, [r3, #6]
 8011126:	3303      	adds	r3, #3
 8011128:	f023 0303 	bic.w	r3, r3, #3
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	4413      	add	r3, r2
 8011130:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8011138:	8afa      	ldrh	r2, [r7, #22]
 801113a:	4613      	mov	r3, r2
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4413      	add	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	3303      	adds	r3, #3
 8011144:	f023 0303 	bic.w	r3, r3, #3
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	4413      	add	r3, r2
 801114c:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	68fa      	ldr	r2, [r7, #12]
 8011152:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8011154:	8afb      	ldrh	r3, [r7, #22]
 8011156:	3303      	adds	r3, #3
 8011158:	f023 0303 	bic.w	r3, r3, #3
 801115c:	68fa      	ldr	r2, [r7, #12]
 801115e:	4413      	add	r3, r2
 8011160:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	68fa      	ldr	r2, [r7, #12]
 8011166:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	891a      	ldrh	r2, [r3, #8]
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8011170:	7ffb      	ldrb	r3, [r7, #31]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d008      	beq.n	8011188 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801117c:	f043 0304 	orr.w	r3, r3, #4
 8011180:	b2da      	uxtb	r2, r3
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	7c9b      	ldrb	r3, [r3, #18]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d008      	beq.n	80111a2 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011196:	f043 0320 	orr.w	r3, r3, #32
 801119a:	b2da      	uxtb	r2, r3
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	889a      	ldrh	r2, [r3, #4]
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2200      	movs	r2, #0
 80111ae:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	2200      	movs	r2, #0
 80111b4:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	88da      	ldrh	r2, [r3, #6]
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	2200      	movs	r2, #0
 80111c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	895b      	ldrh	r3, [r3, #10]
 80111c8:	2201      	movs	r2, #1
 80111ca:	4413      	add	r3, r2
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 80111e2:	69b8      	ldr	r0, [r7, #24]
 80111e4:	f000 fc5e 	bl	8011aa4 <initInternalBindings>

    return cli;
 80111e8:	69bb      	ldr	r3, [r7, #24]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3720      	adds	r7, #32
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 80111f2:	b580      	push	{r7, lr}
 80111f4:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 80111f6:	f7ff fef1 	bl	8010fdc <embeddedCliDefaultConfig>
 80111fa:	4603      	mov	r3, r0
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7ff ff3e 	bl	801107e <embeddedCliNew>
 8011202:	4603      	mov	r3, r0
}
 8011204:	4618      	mov	r0, r3
 8011206:	bd80      	pop	{r7, pc}

08011208 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	460b      	mov	r3, r1
 8011212:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	3310      	adds	r3, #16
 801121e:	78fa      	ldrb	r2, [r7, #3]
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f001 f865 	bl	80122f2 <fifoBufPush>
 8011228:	4603      	mov	r3, r0
 801122a:	f083 0301 	eor.w	r3, r3, #1
 801122e:	b2db      	uxtb	r3, r3
 8011230:	2b00      	cmp	r3, #0
 8011232:	d008      	beq.n	8011246 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801123a:	f043 0301 	orr.w	r3, r3, #1
 801123e:	b2da      	uxtb	r2, r3
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8011246:	bf00      	nop
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	f000 8083 	beq.w	8011366 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801126c:	f003 0302 	and.w	r3, r3, #2
 8011270:	2b00      	cmp	r3, #0
 8011272:	d155      	bne.n	8011320 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801127a:	f043 0302 	orr.w	r3, r3, #2
 801127e:	b2da      	uxtb	r2, r3
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4619      	mov	r1, r3
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f000 ff8f 	bl	80121b0 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8011292:	e045      	b.n	8011320 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	3310      	adds	r3, #16
 8011298:	4618      	mov	r0, r3
 801129a:	f001 f802 	bl	80122a2 <fifoBufPop>
 801129e:	4603      	mov	r3, r0
 80112a0:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80112a8:	f003 0308 	and.w	r3, r3, #8
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d005      	beq.n	80112bc <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80112b0:	7afb      	ldrb	r3, [r7, #11]
 80112b2:	4619      	mov	r1, r3
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f000 fa17 	bl	80116e8 <onEscapedInput>
 80112ba:	e02a      	b.n	8011312 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80112c2:	2b1b      	cmp	r3, #27
 80112c4:	d10c      	bne.n	80112e0 <embeddedCliProcess+0x92>
 80112c6:	7afb      	ldrb	r3, [r7, #11]
 80112c8:	2b5b      	cmp	r3, #91	@ 0x5b
 80112ca:	d109      	bne.n	80112e0 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80112d2:	f043 0308 	orr.w	r3, r3, #8
 80112d6:	b2da      	uxtb	r2, r3
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80112de:	e018      	b.n	8011312 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 80112e0:	7afb      	ldrb	r3, [r7, #11]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f000 ff85 	bl	80121f2 <isControlChar>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d005      	beq.n	80112fa <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80112ee:	7afb      	ldrb	r3, [r7, #11]
 80112f0:	4619      	mov	r1, r3
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fa54 	bl	80117a0 <onControlInput>
 80112f8:	e00b      	b.n	8011312 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80112fa:	7afb      	ldrb	r3, [r7, #11]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f000 ff98 	bl	8012232 <isDisplayableChar>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d004      	beq.n	8011312 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8011308:	7afb      	ldrb	r3, [r7, #11]
 801130a:	4619      	mov	r1, r3
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fa17 	bl	8011740 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fe35 	bl	8011f82 <printLiveAutocompletion>

        impl->lastChar = c;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	7afa      	ldrb	r2, [r7, #11]
 801131c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	3310      	adds	r3, #16
 8011324:	4618      	mov	r0, r3
 8011326:	f000 ff9b 	bl	8012260 <fifoBufAvailable>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	d1b1      	bne.n	8011294 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011336:	f003 0301 	and.w	r3, r3, #1
 801133a:	2b00      	cmp	r3, #0
 801133c:	d014      	beq.n	8011368 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2200      	movs	r2, #0
 8011342:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	69db      	ldr	r3, [r3, #28]
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	8c12      	ldrh	r2, [r2, #32]
 801134c:	4413      	add	r3, r2
 801134e:	2200      	movs	r2, #0
 8011350:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011358:	f023 0301 	bic.w	r3, r3, #1
 801135c:	b2da      	uxtb	r2, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8011364:	e000      	b.n	8011368 <embeddedCliProcess+0x11a>
        return;
 8011366:	bf00      	nop
    }
}
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 801136e:	b084      	sub	sp, #16
 8011370:	b4b0      	push	{r4, r5, r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801137c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801138e:	429a      	cmp	r2, r3
 8011390:	d101      	bne.n	8011396 <embeddedCliAddBinding+0x28>
        return false;
 8011392:	2300      	movs	r3, #0
 8011394:	e017      	b.n	80113c6 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801139e:	4619      	mov	r1, r3
 80113a0:	460b      	mov	r3, r1
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	440b      	add	r3, r1
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	4413      	add	r3, r2
 80113aa:	461d      	mov	r5, r3
 80113ac:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80113b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113b4:	6823      	ldr	r3, [r4, #0]
 80113b6:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80113bc:	3301      	adds	r3, #1
 80113be:	b29a      	uxth	r2, r3
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 80113c4:	2301      	movs	r3, #1
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bcb0      	pop	{r4, r5, r7}
 80113ce:	b004      	add	sp, #16
 80113d0:	4770      	bx	lr
	...

080113d4 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d031      	beq.n	801144a <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80113f2:	f003 0310 	and.w	r3, r3, #16
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d102      	bne.n	8011400 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fea6 	bl	801214c <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8011400:	6839      	ldr	r1, [r7, #0]
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 fed4 	bl	80121b0 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8011408:	4b12      	ldr	r3, [pc, #72]	@ (8011454 <embeddedCliPrint+0x80>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4619      	mov	r1, r3
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 fece 	bl	80121b0 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801141a:	f003 0310 	and.w	r3, r3, #16
 801141e:	2b00      	cmp	r3, #0
 8011420:	d114      	bne.n	801144c <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4619      	mov	r1, r3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 fec1 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	69db      	ldr	r3, [r3, #28]
 8011432:	4619      	mov	r1, r3
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f000 febb 	bl	80121b0 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	8c1a      	ldrh	r2, [r3, #32]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fd9d 	bl	8011f82 <printLiveAutocompletion>
 8011448:	e000      	b.n	801144c <embeddedCliPrint+0x78>
        return;
 801144a:	bf00      	nop
    }
}
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	20000028 	.word	0x20000028

08011458 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d066      	beq.n	8011534 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8011466:	4b35      	ldr	r3, [pc, #212]	@ (801153c <embeddedCliTokenizeArgs+0xe4>)
 8011468:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 801146a:	2300      	movs	r3, #0
 801146c:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 801146e:	2300      	movs	r3, #0
 8011470:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8011472:	2300      	movs	r3, #0
 8011474:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8011476:	2300      	movs	r3, #0
 8011478:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 801147a:	e047      	b.n	801150c <embeddedCliTokenizeArgs+0xb4>
        ++i;
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	3301      	adds	r3, #1
 8011480:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8011482:	7fbb      	ldrb	r3, [r7, #30]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d002      	beq.n	801148e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8011488:	2300      	movs	r3, #0
 801148a:	77bb      	strb	r3, [r7, #30]
 801148c:	e029      	b.n	80114e2 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 801148e:	7cfb      	ldrb	r3, [r7, #19]
 8011490:	2b5c      	cmp	r3, #92	@ 0x5c
 8011492:	d102      	bne.n	801149a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8011494:	2301      	movs	r3, #1
 8011496:	77bb      	strb	r3, [r7, #30]
            continue;
 8011498:	e038      	b.n	801150c <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 801149a:	7cfb      	ldrb	r3, [r7, #19]
 801149c:	2b22      	cmp	r3, #34	@ 0x22
 801149e:	d110      	bne.n	80114c2 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80114a0:	7ffb      	ldrb	r3, [r7, #31]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	bf14      	ite	ne
 80114a6:	2301      	movne	r3, #1
 80114a8:	2300      	moveq	r3, #0
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	f083 0301 	eor.w	r3, r3, #1
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	77fb      	strb	r3, [r7, #31]
 80114b4:	7ffb      	ldrb	r3, [r7, #31]
 80114b6:	f003 0301 	and.w	r3, r3, #1
 80114ba:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 80114bc:	2300      	movs	r3, #0
 80114be:	74fb      	strb	r3, [r7, #19]
 80114c0:	e00f      	b.n	80114e2 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 80114c2:	7ffb      	ldrb	r3, [r7, #31]
 80114c4:	f083 0301 	eor.w	r3, r3, #1
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d009      	beq.n	80114e2 <embeddedCliTokenizeArgs+0x8a>
 80114ce:	7cfb      	ldrb	r3, [r7, #19]
 80114d0:	4619      	mov	r1, r3
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f00b ff3a 	bl	801d34c <strchr>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d001      	beq.n	80114e2 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 80114de:	2300      	movs	r3, #0
 80114e0:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 80114e2:	7cfb      	ldrb	r3, [r7, #19]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d109      	bne.n	80114fc <embeddedCliTokenizeArgs+0xa4>
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dd0e      	ble.n	801150c <embeddedCliTokenizeArgs+0xb4>
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	3b01      	subs	r3, #1
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	4413      	add	r3, r2
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d007      	beq.n	801150c <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	4413      	add	r3, r2
 8011502:	7cfa      	ldrb	r2, [r7, #19]
 8011504:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	3301      	adds	r3, #1
 801150a:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	4413      	add	r3, r2
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	74fb      	strb	r3, [r7, #19]
 8011516:	7cfb      	ldrb	r3, [r7, #19]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d1af      	bne.n	801147c <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	4413      	add	r3, r2
 8011522:	2200      	movs	r2, #0
 8011524:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	3301      	adds	r3, #1
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	4413      	add	r3, r2
 801152e:	2200      	movs	r2, #0
 8011530:	701a      	strb	r2, [r3, #0]
 8011532:	e000      	b.n	8011536 <embeddedCliTokenizeArgs+0xde>
        return;
 8011534:	bf00      	nop
}
 8011536:	3720      	adds	r7, #32
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	08021ff8 	.word	0x08021ff8

08011540 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 801154c:	887b      	ldrh	r3, [r7, #2]
 801154e:	4619      	mov	r1, r3
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f000 ffd5 	bl	8012500 <getTokenPosition>
 8011556:	4603      	mov	r3, r0
 8011558:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801155a:	89fb      	ldrh	r3, [r7, #14]
 801155c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011560:	4293      	cmp	r3, r2
 8011562:	d003      	beq.n	801156c <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8011564:	89fb      	ldrh	r3, [r7, #14]
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	4413      	add	r3, r2
 801156a:	e000      	b.n	801156e <embeddedCliGetToken+0x2e>
    else
        return NULL;
 801156c:	2300      	movs	r3, #0
}
 801156e:	4618      	mov	r0, r3
 8011570:	3710      	adds	r7, #16
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8011576:	b580      	push	{r7, lr}
 8011578:	b084      	sub	sp, #16
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	460b      	mov	r3, r1
 8011580:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8011582:	887b      	ldrh	r3, [r7, #2]
 8011584:	4619      	mov	r1, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 ffba 	bl	8012500 <getTokenPosition>
 801158c:	4603      	mov	r3, r0
 801158e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8011590:	89fb      	ldrh	r3, [r7, #14]
 8011592:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011596:	4293      	cmp	r3, r2
 8011598:	d003      	beq.n	80115a2 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 801159a:	89fb      	ldrh	r3, [r7, #14]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	4413      	add	r3, r2
 80115a0:	e000      	b.n	80115a4 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80115a2:	2300      	movs	r3, #0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80115ac:	b480      	push	{r7}
 80115ae:	b085      	sub	sp, #20
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d003      	beq.n	80115c2 <embeddedCliGetTokenCount+0x16>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <embeddedCliGetTokenCount+0x1a>
        return 0;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e019      	b.n	80115fa <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 80115c6:	2300      	movs	r3, #0
 80115c8:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 80115ca:	2301      	movs	r3, #1
 80115cc:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	4413      	add	r3, r2
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d109      	bne.n	80115ee <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	3301      	adds	r3, #1
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	4413      	add	r3, r2
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d006      	beq.n	80115f6 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80115e8:	897b      	ldrh	r3, [r7, #10]
 80115ea:	3301      	adds	r3, #1
 80115ec:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	3301      	adds	r3, #1
 80115f2:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80115f4:	e7eb      	b.n	80115ce <embeddedCliGetTokenCount+0x22>
                break;
 80115f6:	bf00      	nop
    }

    return tokenCount;
 80115f8:	897b      	ldrh	r3, [r7, #10]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3714      	adds	r7, #20
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
	...

08011608 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8011608:	b580      	push	{r7, lr}
 801160a:	b086      	sub	sp, #24
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	68db      	ldr	r3, [r3, #12]
 8011618:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	899b      	ldrh	r3, [r3, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d05c      	beq.n	80116dc <navigateHistory+0xd4>
 8011622:	78fb      	ldrb	r3, [r7, #3]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d005      	beq.n	8011634 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	895a      	ldrh	r2, [r3, #10]
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	899b      	ldrh	r3, [r3, #12]
 8011630:	429a      	cmp	r2, r3
 8011632:	d053      	beq.n	80116dc <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8011634:	78fb      	ldrb	r3, [r7, #3]
 8011636:	f083 0301 	eor.w	r3, r3, #1
 801163a:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 801163c:	2b00      	cmp	r3, #0
 801163e:	d003      	beq.n	8011648 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	895b      	ldrh	r3, [r3, #10]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d049      	beq.n	80116dc <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fd7f 	bl	801214c <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	4619      	mov	r1, r3
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f000 fdab 	bl	80121b0 <writeToOutput>

    if (navigateUp)
 801165a:	78fb      	ldrb	r3, [r7, #3]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d006      	beq.n	801166e <navigateHistory+0x66>
        ++impl->history.current;
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	895b      	ldrh	r3, [r3, #10]
 8011664:	3301      	adds	r3, #1
 8011666:	b29a      	uxth	r2, r3
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	815a      	strh	r2, [r3, #10]
 801166c:	e005      	b.n	801167a <navigateHistory+0x72>
    else
        --impl->history.current;
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	895b      	ldrh	r3, [r3, #10]
 8011672:	3b01      	subs	r3, #1
 8011674:	b29a      	uxth	r2, r3
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	1d1a      	adds	r2, r3, #4
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	895b      	ldrh	r3, [r3, #10]
 8011682:	4619      	mov	r1, r3
 8011684:	4610      	mov	r0, r2
 8011686:	f000 fec2 	bl	801240e <historyGet>
 801168a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d101      	bne.n	8011696 <navigateHistory+0x8e>
        item = "";
 8011692:	4b14      	ldr	r3, [pc, #80]	@ (80116e4 <navigateHistory+0xdc>)
 8011694:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8011696:	6978      	ldr	r0, [r7, #20]
 8011698:	f7ee fe02 	bl	80002a0 <strlen>
 801169c:	4603      	mov	r3, r0
 801169e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	69db      	ldr	r3, [r3, #28]
 80116a4:	89fa      	ldrh	r2, [r7, #14]
 80116a6:	6979      	ldr	r1, [r7, #20]
 80116a8:	4618      	mov	r0, r3
 80116aa:	f00b ff5e 	bl	801d56a <memcpy>
    impl->cmdBuffer[len] = '\0';
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	69da      	ldr	r2, [r3, #28]
 80116b2:	89fb      	ldrh	r3, [r7, #14]
 80116b4:	4413      	add	r3, r2
 80116b6:	2200      	movs	r2, #0
 80116b8:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	89fa      	ldrh	r2, [r7, #14]
 80116be:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	69db      	ldr	r3, [r3, #28]
 80116c4:	4619      	mov	r1, r3
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 fd72 	bl	80121b0 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	8c1a      	ldrh	r2, [r3, #32]
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 fc54 	bl	8011f82 <printLiveAutocompletion>
 80116da:	e000      	b.n	80116de <navigateHistory+0xd6>
        return;
 80116dc:	bf00      	nop
}
 80116de:	3718      	adds	r7, #24
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	08021ffc 	.word	0x08021ffc

080116e8 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	460b      	mov	r3, r1
 80116f2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80116fa:	78fb      	ldrb	r3, [r7, #3]
 80116fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80116fe:	d91b      	bls.n	8011738 <onEscapedInput+0x50>
 8011700:	78fb      	ldrb	r3, [r7, #3]
 8011702:	2b7e      	cmp	r3, #126	@ 0x7e
 8011704:	d818      	bhi.n	8011738 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801170c:	f023 0308 	bic.w	r3, r3, #8
 8011710:	b2da      	uxtb	r2, r3
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8011718:	78fb      	ldrb	r3, [r7, #3]
 801171a:	2b41      	cmp	r3, #65	@ 0x41
 801171c:	d002      	beq.n	8011724 <onEscapedInput+0x3c>
 801171e:	78fb      	ldrb	r3, [r7, #3]
 8011720:	2b42      	cmp	r3, #66	@ 0x42
 8011722:	d109      	bne.n	8011738 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8011724:	78fb      	ldrb	r3, [r7, #3]
 8011726:	2b41      	cmp	r3, #65	@ 0x41
 8011728:	bf0c      	ite	eq
 801172a:	2301      	moveq	r3, #1
 801172c:	2300      	movne	r3, #0
 801172e:	b2db      	uxtb	r3, r3
 8011730:	4619      	mov	r1, r3
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f7ff ff68 	bl	8011608 <navigateHistory>
        }
    }
}
 8011738:	bf00      	nop
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	68db      	ldr	r3, [r3, #12]
 8011750:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	8c1b      	ldrh	r3, [r3, #32]
 8011756:	3302      	adds	r3, #2
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801175c:	4293      	cmp	r3, r2
 801175e:	da1a      	bge.n	8011796 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	8c12      	ldrh	r2, [r2, #32]
 8011768:	4413      	add	r3, r2
 801176a:	78fa      	ldrb	r2, [r7, #3]
 801176c:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	8c1b      	ldrh	r3, [r3, #32]
 8011772:	3301      	adds	r3, #1
 8011774:	b29a      	uxth	r2, r3
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	69db      	ldr	r3, [r3, #28]
 801177e:	68fa      	ldr	r2, [r7, #12]
 8011780:	8c12      	ldrh	r2, [r2, #32]
 8011782:	4413      	add	r3, r2
 8011784:	2200      	movs	r2, #0
 8011786:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	78fa      	ldrb	r2, [r7, #3]
 801178e:	4611      	mov	r1, r2
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	4798      	blx	r3
 8011794:	e000      	b.n	8011798 <onCharInput+0x58>
        return;
 8011796:	bf00      	nop
}
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
	...

080117a0 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	68db      	ldr	r3, [r3, #12]
 80117b0:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80117b8:	2b0d      	cmp	r3, #13
 80117ba:	d102      	bne.n	80117c2 <onControlInput+0x22>
 80117bc:	78fb      	ldrb	r3, [r7, #3]
 80117be:	2b0a      	cmp	r3, #10
 80117c0:	d062      	beq.n	8011888 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 80117c8:	2b0a      	cmp	r3, #10
 80117ca:	d102      	bne.n	80117d2 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 80117cc:	78fb      	ldrb	r3, [r7, #3]
 80117ce:	2b0d      	cmp	r3, #13
 80117d0:	d05a      	beq.n	8011888 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 80117d2:	78fb      	ldrb	r3, [r7, #3]
 80117d4:	2b0d      	cmp	r3, #13
 80117d6:	d002      	beq.n	80117de <onControlInput+0x3e>
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	2b0a      	cmp	r3, #10
 80117dc:	d126      	bne.n	801182c <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fc2a 	bl	8012038 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 80117e4:	4b2a      	ldr	r3, [pc, #168]	@ (8011890 <onControlInput+0xf0>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4619      	mov	r1, r3
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 fce0 	bl	80121b0 <writeToOutput>

        if (impl->cmdSize > 0)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	8c1b      	ldrh	r3, [r3, #32]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <onControlInput+0x5e>
            parseCommand(cli);
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 f84b 	bl	8011894 <parseCommand>
        impl->cmdSize = 0;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2200      	movs	r2, #0
 8011802:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	69db      	ldr	r3, [r3, #28]
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	8c12      	ldrh	r2, [r2, #32]
 801180c:	4413      	add	r3, r2
 801180e:	2200      	movs	r2, #0
 8011810:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	2200      	movs	r2, #0
 8011816:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2200      	movs	r2, #0
 801181c:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4619      	mov	r1, r3
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f000 fcc3 	bl	80121b0 <writeToOutput>
 801182a:	e02e      	b.n	801188a <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 801182c:	78fb      	ldrb	r3, [r7, #3]
 801182e:	2b08      	cmp	r3, #8
 8011830:	d002      	beq.n	8011838 <onControlInput+0x98>
 8011832:	78fb      	ldrb	r3, [r7, #3]
 8011834:	2b7f      	cmp	r3, #127	@ 0x7f
 8011836:	d120      	bne.n	801187a <onControlInput+0xda>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	8c1b      	ldrh	r3, [r3, #32]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d01c      	beq.n	801187a <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2108      	movs	r1, #8
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2120      	movs	r1, #32
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2108      	movs	r1, #8
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	8c1b      	ldrh	r3, [r3, #32]
 8011862:	3b01      	subs	r3, #1
 8011864:	b29a      	uxth	r2, r3
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	69db      	ldr	r3, [r3, #28]
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	8c12      	ldrh	r2, [r2, #32]
 8011872:	4413      	add	r3, r2
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
 8011878:	e007      	b.n	801188a <onControlInput+0xea>
    } else if (c == '\t') {
 801187a:	78fb      	ldrb	r3, [r7, #3]
 801187c:	2b09      	cmp	r3, #9
 801187e:	d104      	bne.n	801188a <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 fbd9 	bl	8012038 <onAutocompleteRequest>
 8011886:	e000      	b.n	801188a <onControlInput+0xea>
        return;
 8011888:	bf00      	nop
    }

}
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	20000028 	.word	0x20000028

08011894 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8011894:	b590      	push	{r4, r7, lr}
 8011896:	b08f      	sub	sp, #60	@ 0x3c
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 80118a2:	2301      	movs	r3, #1
 80118a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 80118a8:	2300      	movs	r3, #0
 80118aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80118ac:	e00d      	b.n	80118ca <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	69da      	ldr	r2, [r3, #28]
 80118b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b4:	4413      	add	r3, r2
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	2b20      	cmp	r3, #32
 80118ba:	d003      	beq.n	80118c4 <parseCommand+0x30>
            isEmpty = false;
 80118bc:	2300      	movs	r3, #0
 80118be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80118c2:	e008      	b.n	80118d6 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 80118c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c6:	3301      	adds	r3, #1
 80118c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	8c1b      	ldrh	r3, [r3, #32]
 80118ce:	461a      	mov	r2, r3
 80118d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118d2:	4293      	cmp	r3, r2
 80118d4:	dbeb      	blt.n	80118ae <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 80118d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f040 80dc 	bne.w	8011a98 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	1d1a      	adds	r2, r3, #4
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	4619      	mov	r1, r3
 80118ea:	4610      	mov	r0, r2
 80118ec:	f000 fd2b 	bl	8012346 <historyPut>

    char *cmdName = NULL;
 80118f0:	2300      	movs	r3, #0
 80118f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 80118f4:	2300      	movs	r3, #0
 80118f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 80118f8:	2300      	movs	r3, #0
 80118fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80118fe:	2300      	movs	r3, #0
 8011900:	623b      	str	r3, [r7, #32]
 8011902:	e030      	b.n	8011966 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	69da      	ldr	r2, [r3, #28]
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	4413      	add	r3, r2
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	2b20      	cmp	r3, #32
 8011914:	d10f      	bne.n	8011936 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8011916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011918:	2b00      	cmp	r3, #0
 801191a:	d105      	bne.n	8011928 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	69da      	ldr	r2, [r3, #28]
 8011920:	6a3b      	ldr	r3, [r7, #32]
 8011922:	4413      	add	r3, r2
 8011924:	2200      	movs	r2, #0
 8011926:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8011928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801192a:	2b00      	cmp	r3, #0
 801192c:	d018      	beq.n	8011960 <parseCommand+0xcc>
                nameFinished = true;
 801192e:	2301      	movs	r3, #1
 8011930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011934:	e014      	b.n	8011960 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8011936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011938:	2b00      	cmp	r3, #0
 801193a:	d105      	bne.n	8011948 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	69da      	ldr	r2, [r3, #28]
 8011940:	6a3b      	ldr	r3, [r7, #32]
 8011942:	4413      	add	r3, r2
 8011944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011946:	e00b      	b.n	8011960 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8011948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801194a:	2b00      	cmp	r3, #0
 801194c:	d108      	bne.n	8011960 <parseCommand+0xcc>
 801194e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011952:	2b00      	cmp	r3, #0
 8011954:	d004      	beq.n	8011960 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	69da      	ldr	r2, [r3, #28]
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	4413      	add	r3, r2
 801195e:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	3301      	adds	r3, #1
 8011964:	623b      	str	r3, [r7, #32]
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	8c1b      	ldrh	r3, [r3, #32]
 801196a:	461a      	mov	r2, r3
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	4293      	cmp	r3, r2
 8011970:	dbc8      	blt.n	8011904 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	69da      	ldr	r2, [r3, #28]
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	8c1b      	ldrh	r3, [r3, #32]
 801197a:	3301      	adds	r3, #1
 801197c:	4413      	add	r3, r2
 801197e:	2200      	movs	r2, #0
 8011980:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8011982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011984:	2b00      	cmp	r3, #0
 8011986:	f000 8089 	beq.w	8011a9c <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801198a:	2300      	movs	r3, #0
 801198c:	61fb      	str	r3, [r7, #28]
 801198e:	e054      	b.n	8011a3a <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011994:	69fa      	ldr	r2, [r7, #28]
 8011996:	4613      	mov	r3, r2
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	440b      	add	r3, r1
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4619      	mov	r1, r3
 80119a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80119a6:	f7ee fc1b 	bl	80001e0 <strcmp>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d141      	bne.n	8011a34 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80119b4:	69fa      	ldr	r2, [r7, #28]
 80119b6:	4613      	mov	r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	440b      	add	r3, r1
 80119c0:	691b      	ldr	r3, [r3, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d040      	beq.n	8011a48 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80119ca:	69fa      	ldr	r2, [r7, #28]
 80119cc:	4613      	mov	r3, r2
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	4413      	add	r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	440b      	add	r3, r1
 80119d6:	7a1b      	ldrb	r3, [r3, #8]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 80119dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119de:	f7ff fd3b 	bl	8011458 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80119e8:	f043 0310 	orr.w	r3, r3, #16
 80119ec:	b2da      	uxtb	r2, r3
 80119ee:	69bb      	ldr	r3, [r7, #24]
 80119f0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80119f8:	69fa      	ldr	r2, [r7, #28]
 80119fa:	4613      	mov	r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	4413      	add	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	440b      	add	r3, r1
 8011a04:	691c      	ldr	r4, [r3, #16]
 8011a06:	69bb      	ldr	r3, [r7, #24]
 8011a08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011a0a:	69fa      	ldr	r2, [r7, #28]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	440b      	add	r3, r1
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011a26:	f023 0310 	bic.w	r3, r3, #16
 8011a2a:	b2da      	uxtb	r2, r3
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8011a32:	e034      	b.n	8011a9e <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011a34:	69fb      	ldr	r3, [r7, #28]
 8011a36:	3301      	adds	r3, #1
 8011a38:	61fb      	str	r3, [r7, #28]
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011a3e:	461a      	mov	r2, r3
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	4293      	cmp	r3, r2
 8011a44:	dba4      	blt.n	8011990 <parseCommand+0xfc>
 8011a46:	e000      	b.n	8011a4a <parseCommand+0x1b6>
                break;
 8011a48:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d01d      	beq.n	8011a8e <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8011a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a54:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8011a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a58:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011a5a:	69bb      	ldr	r3, [r7, #24]
 8011a5c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011a60:	f043 0310 	orr.w	r3, r3, #16
 8011a64:	b2da      	uxtb	r2, r3
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	f107 020c 	add.w	r2, r7, #12
 8011a74:	4611      	mov	r1, r2
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011a80:	f023 0310 	bic.w	r3, r3, #16
 8011a84:	b2da      	uxtb	r2, r3
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8011a8c:	e007      	b.n	8011a9e <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8011a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 f997 	bl	8011dc4 <onUnknownCommand>
 8011a96:	e002      	b.n	8011a9e <parseCommand+0x20a>
        return;
 8011a98:	bf00      	nop
 8011a9a:	e000      	b.n	8011a9e <parseCommand+0x20a>
        return;
 8011a9c:	bf00      	nop
    }
}
 8011a9e:	373c      	adds	r7, #60	@ 0x3c
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd90      	pop	{r4, r7, pc}

08011aa4 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8011aa4:	b5b0      	push	{r4, r5, r7, lr}
 8011aa6:	b08a      	sub	sp, #40	@ 0x28
 8011aa8:	af02      	add	r7, sp, #8
 8011aaa:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8011aac:	4b0c      	ldr	r3, [pc, #48]	@ (8011ae0 <initInternalBindings+0x3c>)
 8011aae:	f107 040c 	add.w	r4, r7, #12
 8011ab2:	461d      	mov	r5, r3
 8011ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8011abc:	466a      	mov	r2, sp
 8011abe:	f107 0318 	add.w	r3, r7, #24
 8011ac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ac6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011aca:	f107 030c 	add.w	r3, r7, #12
 8011ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7ff fc4c 	bl	801136e <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8011ad6:	bf00      	nop
 8011ad8:	3720      	adds	r7, #32
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bdb0      	pop	{r4, r5, r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	08022020 	.word	0x08022020

08011ae4 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b08c      	sub	sp, #48	@ 0x30
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	68db      	ldr	r3, [r3, #12]
 8011af4:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d10a      	bne.n	8011b14 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8011afe:	49a5      	ldr	r1, [pc, #660]	@ (8011d94 <onHelp+0x2b0>)
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f000 fb55 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b06:	4ba4      	ldr	r3, [pc, #656]	@ (8011d98 <onHelp+0x2b4>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	f000 fb4f 	bl	80121b0 <writeToOutput>
        return;
 8011b12:	e13b      	b.n	8011d8c <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8011b14:	4ba1      	ldr	r3, [pc, #644]	@ (8011d9c <onHelp+0x2b8>)
 8011b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d03d      	beq.n	8011b9a <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8011b1e:	4b9f      	ldr	r3, [pc, #636]	@ (8011d9c <onHelp+0x2b8>)
 8011b20:	2200      	movs	r2, #0
 8011b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8011b26:	4b9c      	ldr	r3, [pc, #624]	@ (8011d98 <onHelp+0x2b4>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	68f8      	ldr	r0, [r7, #12]
 8011b2e:	f000 fb3f 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b32:	4b99      	ldr	r3, [pc, #612]	@ (8011d98 <onHelp+0x2b4>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4619      	mov	r1, r3
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f000 fb39 	bl	80121b0 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8011b3e:	4998      	ldr	r1, [pc, #608]	@ (8011da0 <onHelp+0x2bc>)
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f000 fb35 	bl	80121b0 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8011b46:	4b94      	ldr	r3, [pc, #592]	@ (8011d98 <onHelp+0x2b4>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f000 fb2f 	bl	80121b0 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8011b52:	4994      	ldr	r1, [pc, #592]	@ (8011da4 <onHelp+0x2c0>)
 8011b54:	68f8      	ldr	r0, [r7, #12]
 8011b56:	f000 fb2b 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8011d98 <onHelp+0x2b4>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 fb25 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8011b66:	4990      	ldr	r1, [pc, #576]	@ (8011da8 <onHelp+0x2c4>)
 8011b68:	68f8      	ldr	r0, [r7, #12]
 8011b6a:	f000 fb21 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b6e:	4b8a      	ldr	r3, [pc, #552]	@ (8011d98 <onHelp+0x2b4>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4619      	mov	r1, r3
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f000 fb1b 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8011b7a:	498c      	ldr	r1, [pc, #560]	@ (8011dac <onHelp+0x2c8>)
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f000 fb17 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b82:	4b85      	ldr	r3, [pc, #532]	@ (8011d98 <onHelp+0x2b4>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4619      	mov	r1, r3
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f000 fb11 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b8e:	4b82      	ldr	r3, [pc, #520]	@ (8011d98 <onHelp+0x2b4>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4619      	mov	r1, r3
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f000 fb0b 	bl	80121b0 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8011b9a:	68b8      	ldr	r0, [r7, #8]
 8011b9c:	f7ff fd06 	bl	80115ac <embeddedCliGetTokenCount>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8011ba4:	8b7b      	ldrh	r3, [r7, #26]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d176      	bne.n	8011c98 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011baa:	2300      	movs	r3, #0
 8011bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bae:	e03c      	b.n	8011c2a <onHelp+0x146>
            writeToOutput(cli, " * ");
 8011bb0:	497f      	ldr	r1, [pc, #508]	@ (8011db0 <onHelp+0x2cc>)
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f000 fafc 	bl	80121b0 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	440b      	add	r3, r1
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4619      	mov	r1, r3
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f000 faef 	bl	80121b0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011bd2:	4b71      	ldr	r3, [pc, #452]	@ (8011d98 <onHelp+0x2b4>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f000 fae9 	bl	80121b0 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011be4:	4613      	mov	r3, r2
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	4413      	add	r3, r2
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	440b      	add	r3, r1
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d017      	beq.n	8011c24 <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	2109      	movs	r1, #9
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c04:	4613      	mov	r3, r2
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	4413      	add	r3, r2
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	440b      	add	r3, r1
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	4619      	mov	r1, r3
 8011c12:	68f8      	ldr	r0, [r7, #12]
 8011c14:	f000 facc 	bl	80121b0 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8011c18:	4b5f      	ldr	r3, [pc, #380]	@ (8011d98 <onHelp+0x2b4>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f000 fac6 	bl	80121b0 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c26:	3301      	adds	r3, #1
 8011c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011c2e:	461a      	mov	r2, r3
 8011c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c32:	4293      	cmp	r3, r2
 8011c34:	dbbc      	blt.n	8011bb0 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8011c36:	4b58      	ldr	r3, [pc, #352]	@ (8011d98 <onHelp+0x2b4>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f000 fab7 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c42:	4b55      	ldr	r3, [pc, #340]	@ (8011d98 <onHelp+0x2b4>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4619      	mov	r1, r3
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f000 fab1 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c4e:	4b52      	ldr	r3, [pc, #328]	@ (8011d98 <onHelp+0x2b4>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	4619      	mov	r1, r3
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f000 faab 	bl	80121b0 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8011c5a:	4956      	ldr	r1, [pc, #344]	@ (8011db4 <onHelp+0x2d0>)
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f000 faa7 	bl	80121b0 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8011c62:	4b4d      	ldr	r3, [pc, #308]	@ (8011d98 <onHelp+0x2b4>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	4619      	mov	r1, r3
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 faa1 	bl	80121b0 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8011c6e:	4952      	ldr	r1, [pc, #328]	@ (8011db8 <onHelp+0x2d4>)
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 fa9d 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c76:	4b48      	ldr	r3, [pc, #288]	@ (8011d98 <onHelp+0x2b4>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f000 fa97 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8011c82:	494e      	ldr	r1, [pc, #312]	@ (8011dbc <onHelp+0x2d8>)
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f000 fa93 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c8a:	4b43      	ldr	r3, [pc, #268]	@ (8011d98 <onHelp+0x2b4>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4619      	mov	r1, r3
 8011c90:	68f8      	ldr	r0, [r7, #12]
 8011c92:	f000 fa8d 	bl	80121b0 <writeToOutput>
 8011c96:	e079      	b.n	8011d8c <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8011c98:	8b7b      	ldrh	r3, [r7, #26]
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d16c      	bne.n	8011d78 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8011ca2:	2101      	movs	r1, #1
 8011ca4:	68b8      	ldr	r0, [r7, #8]
 8011ca6:	f7ff fc4b 	bl	8011540 <embeddedCliGetToken>
 8011caa:	6178      	str	r0, [r7, #20]
        bool found = false;
 8011cac:	2300      	movs	r3, #0
 8011cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	623b      	str	r3, [r7, #32]
 8011cb6:	e020      	b.n	8011cfa <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011cbc:	6a3a      	ldr	r2, [r7, #32]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	440b      	add	r3, r1
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	6979      	ldr	r1, [r7, #20]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7ee fa87 	bl	80001e0 <strcmp>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d10d      	bne.n	8011cf4 <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011cdc:	6a3a      	ldr	r2, [r7, #32]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	440b      	add	r3, r1
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8011cec:	2301      	movs	r3, #1
 8011cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8011cf2:	e008      	b.n	8011d06 <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	623b      	str	r3, [r7, #32]
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011cfe:	461a      	mov	r2, r3
 8011d00:	6a3b      	ldr	r3, [r7, #32]
 8011d02:	4293      	cmp	r3, r2
 8011d04:	dbd8      	blt.n	8011cb8 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 8011d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d020      	beq.n	8011d50 <onHelp+0x26c>
 8011d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d01d      	beq.n	8011d50 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 8011d14:	4926      	ldr	r1, [pc, #152]	@ (8011db0 <onHelp+0x2cc>)
 8011d16:	68f8      	ldr	r0, [r7, #12]
 8011d18:	f000 fa4a 	bl	80121b0 <writeToOutput>
            writeToOutput(cli, cmdName);
 8011d1c:	6979      	ldr	r1, [r7, #20]
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	f000 fa46 	bl	80121b0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011d24:	4b1c      	ldr	r3, [pc, #112]	@ (8011d98 <onHelp+0x2b4>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	f000 fa40 	bl	80121b0 <writeToOutput>
            cli->writeChar(cli, '\t');
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2109      	movs	r1, #9
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f000 fa37 	bl	80121b0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011d42:	4b15      	ldr	r3, [pc, #84]	@ (8011d98 <onHelp+0x2b4>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4619      	mov	r1, r3
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f000 fa31 	bl	80121b0 <writeToOutput>
 8011d4e:	e01d      	b.n	8011d8c <onHelp+0x2a8>
        } else if (found) {
 8011d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d00a      	beq.n	8011d6e <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 8011d58:	490e      	ldr	r1, [pc, #56]	@ (8011d94 <onHelp+0x2b0>)
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f000 fa28 	bl	80121b0 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011d60:	4b0d      	ldr	r3, [pc, #52]	@ (8011d98 <onHelp+0x2b4>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4619      	mov	r1, r3
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f000 fa22 	bl	80121b0 <writeToOutput>
 8011d6c:	e00e      	b.n	8011d8c <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 8011d6e:	6979      	ldr	r1, [r7, #20]
 8011d70:	68f8      	ldr	r0, [r7, #12]
 8011d72:	f000 f827 	bl	8011dc4 <onUnknownCommand>
 8011d76:	e009      	b.n	8011d8c <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011d78:	4911      	ldr	r1, [pc, #68]	@ (8011dc0 <onHelp+0x2dc>)
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	f000 fa18 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011d80:	4b05      	ldr	r3, [pc, #20]	@ (8011d98 <onHelp+0x2b4>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4619      	mov	r1, r3
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	f000 fa12 	bl	80121b0 <writeToOutput>
    }
}
 8011d8c:	3730      	adds	r7, #48	@ 0x30
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	08022034 	.word	0x08022034
 8011d98:	20000028 	.word	0x20000028
 8011d9c:	2000148c 	.word	0x2000148c
 8011da0:	0802204c 	.word	0x0802204c
 8011da4:	08022074 	.word	0x08022074
 8011da8:	0802209c 	.word	0x0802209c
 8011dac:	080220b0 	.word	0x080220b0
 8011db0:	080220cc 	.word	0x080220cc
 8011db4:	080220d0 	.word	0x080220d0
 8011db8:	080220f0 	.word	0x080220f0
 8011dbc:	08022114 	.word	0x08022114
 8011dc0:	08022128 	.word	0x08022128

08011dc4 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8011dce:	490b      	ldr	r1, [pc, #44]	@ (8011dfc <onUnknownCommand+0x38>)
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 f9ed 	bl	80121b0 <writeToOutput>
    writeToOutput(cli, name);
 8011dd6:	6839      	ldr	r1, [r7, #0]
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 f9e9 	bl	80121b0 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8011dde:	4908      	ldr	r1, [pc, #32]	@ (8011e00 <onUnknownCommand+0x3c>)
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 f9e5 	bl	80121b0 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8011de6:	4b07      	ldr	r3, [pc, #28]	@ (8011e04 <onUnknownCommand+0x40>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	4619      	mov	r1, r3
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 f9df 	bl	80121b0 <writeToOutput>
}
 8011df2:	bf00      	nop
 8011df4:	3708      	adds	r7, #8
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	08022158 	.word	0x08022158
 8011e00:	0802216c 	.word	0x0802216c
 8011e04:	20000028 	.word	0x20000028

08011e08 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b08e      	sub	sp, #56	@ 0x38
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8011e14:	2300      	movs	r3, #0
 8011e16:	613b      	str	r3, [r7, #16]
 8011e18:	2300      	movs	r3, #0
 8011e1a:	82bb      	strh	r3, [r7, #20]
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7ee fa3d 	bl	80002a0 <strlen>
 8011e26:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8011e2e:	6a3b      	ldr	r3, [r7, #32]
 8011e30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d002      	beq.n	8011e3c <getAutocompletedCommand+0x34>
 8011e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d108      	bne.n	8011e4e <getAutocompletedCommand+0x46>
        return cmd;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	f107 0310 	add.w	r3, r7, #16
 8011e44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e48:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e4c:	e095      	b.n	8011f7a <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011e4e:	2300      	movs	r3, #0
 8011e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e52:	e083      	b.n	8011f5c <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4413      	add	r3, r2
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	440b      	add	r3, r1
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8011e68:	69f8      	ldr	r0, [r7, #28]
 8011e6a:	f7ee fa19 	bl	80002a0 <strlen>
 8011e6e:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8011e70:	6a3b      	ldr	r3, [r7, #32]
 8011e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e76:	4413      	add	r3, r2
 8011e78:	781a      	ldrb	r2, [r3, #0]
 8011e7a:	6a3b      	ldr	r3, [r7, #32]
 8011e7c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e80:	440b      	add	r3, r1
 8011e82:	f022 0201 	bic.w	r2, r2, #1
 8011e86:	b2d2      	uxtb	r2, r2
 8011e88:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011e8a:	69ba      	ldr	r2, [r7, #24]
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d35e      	bcc.n	8011f50 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8011e92:	2301      	movs	r3, #1
 8011e94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011e98:	2300      	movs	r3, #0
 8011e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e9c:	e010      	b.n	8011ec0 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea2:	4413      	add	r3, r2
 8011ea4:	781a      	ldrb	r2, [r3, #0]
 8011ea6:	69f9      	ldr	r1, [r7, #28]
 8011ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eaa:	440b      	add	r3, r1
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d003      	beq.n	8011eba <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8011eb8:	e006      	b.n	8011ec8 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8011eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d3ea      	bcc.n	8011e9e <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8011ec8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011ecc:	f083 0301 	eor.w	r3, r3, #1
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d13e      	bne.n	8011f54 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8011ed6:	6a3b      	ldr	r3, [r7, #32]
 8011ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011edc:	4413      	add	r3, r2
 8011ede:	781a      	ldrb	r2, [r3, #0]
 8011ee0:	6a3b      	ldr	r3, [r7, #32]
 8011ee2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ee6:	440b      	add	r3, r1
 8011ee8:	f042 0201 	orr.w	r2, r2, #1
 8011eec:	b2d2      	uxtb	r2, r2
 8011eee:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8011ef0:	8afb      	ldrh	r3, [r7, #22]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d004      	beq.n	8011f00 <getAutocompletedCommand+0xf8>
 8011ef6:	8abb      	ldrh	r3, [r7, #20]
 8011ef8:	461a      	mov	r2, r3
 8011efa:	69bb      	ldr	r3, [r7, #24]
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d202      	bcs.n	8011f06 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8011f06:	8afb      	ldrh	r3, [r7, #22]
 8011f08:	3301      	adds	r3, #1
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011f0e:	8afb      	ldrh	r3, [r7, #22]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d102      	bne.n	8011f1a <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	613b      	str	r3, [r7, #16]
            continue;
 8011f18:	e01d      	b.n	8011f56 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	8c1b      	ldrh	r3, [r3, #32]
 8011f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f20:	e010      	b.n	8011f44 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8011f22:	693a      	ldr	r2, [r7, #16]
 8011f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f26:	4413      	add	r3, r2
 8011f28:	781a      	ldrb	r2, [r3, #0]
 8011f2a:	69f9      	ldr	r1, [r7, #28]
 8011f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f2e:	440b      	add	r3, r1
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d003      	beq.n	8011f3e <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8011f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	82bb      	strh	r3, [r7, #20]
                break;
 8011f3c:	e00b      	b.n	8011f56 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f40:	3301      	adds	r3, #1
 8011f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f44:	8abb      	ldrh	r3, [r7, #20]
 8011f46:	461a      	mov	r2, r3
 8011f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d3e9      	bcc.n	8011f22 <getAutocompletedCommand+0x11a>
 8011f4e:	e002      	b.n	8011f56 <getAutocompletedCommand+0x14e>
            continue;
 8011f50:	bf00      	nop
 8011f52:	e000      	b.n	8011f56 <getAutocompletedCommand+0x14e>
            continue;
 8011f54:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f58:	3301      	adds	r3, #1
 8011f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011f60:	461a      	mov	r2, r3
 8011f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f64:	4293      	cmp	r3, r2
 8011f66:	f6ff af75 	blt.w	8011e54 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	f107 0310 	add.w	r3, r7, #16
 8011f72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f76:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011f7a:	68f8      	ldr	r0, [r7, #12]
 8011f7c:	3738      	adds	r7, #56	@ 0x38
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}

08011f82 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8011f82:	b580      	push	{r7, lr}
 8011f84:	b088      	sub	sp, #32
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011f96:	f003 0320 	and.w	r3, r3, #32
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d048      	beq.n	8012030 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	69da      	ldr	r2, [r3, #28]
 8011fa2:	f107 030c 	add.w	r3, r7, #12
 8011fa6:	6879      	ldr	r1, [r7, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff ff2d 	bl	8011e08 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8011fae:	8a7b      	ldrh	r3, [r7, #18]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d102      	bne.n	8011fba <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	8c1b      	ldrh	r3, [r3, #32]
 8011fb8:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	8c1b      	ldrh	r3, [r3, #32]
 8011fbe:	61fb      	str	r3, [r7, #28]
 8011fc0:	e00b      	b.n	8011fda <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	68f9      	ldr	r1, [r7, #12]
 8011fc8:	69fa      	ldr	r2, [r7, #28]
 8011fca:	440a      	add	r2, r1
 8011fcc:	7812      	ldrb	r2, [r2, #0]
 8011fce:	4611      	mov	r1, r2
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	61fb      	str	r3, [r7, #28]
 8011fda:	8a3b      	ldrh	r3, [r7, #16]
 8011fdc:	461a      	mov	r2, r3
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	d3ee      	bcc.n	8011fc2 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011fe4:	8a3b      	ldrh	r3, [r7, #16]
 8011fe6:	61bb      	str	r3, [r7, #24]
 8011fe8:	e007      	b.n	8011ffa <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2120      	movs	r1, #32
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011ff4:	69bb      	ldr	r3, [r7, #24]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	61bb      	str	r3, [r7, #24]
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8011ffe:	461a      	mov	r2, r3
 8012000:	69bb      	ldr	r3, [r7, #24]
 8012002:	4293      	cmp	r3, r2
 8012004:	d3f1      	bcc.n	8011fea <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8012006:	8a3a      	ldrh	r2, [r7, #16]
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	210d      	movs	r1, #13
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4619      	mov	r1, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 f8c7 	bl	80121b0 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	69db      	ldr	r3, [r3, #28]
 8012026:	4619      	mov	r1, r3
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 f8c1 	bl	80121b0 <writeToOutput>
 801202e:	e000      	b.n	8012032 <printLiveAutocompletion+0xb0>
        return;
 8012030:	bf00      	nop
}
 8012032:	3720      	adds	r7, #32
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8012038:	b580      	push	{r7, lr}
 801203a:	b088      	sub	sp, #32
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	69da      	ldr	r2, [r3, #28]
 801204a:	f107 030c 	add.w	r3, r7, #12
 801204e:	6879      	ldr	r1, [r7, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	f7ff fed9 	bl	8011e08 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8012056:	8a7b      	ldrh	r3, [r7, #18]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d071      	beq.n	8012140 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 801205c:	8a7b      	ldrh	r3, [r7, #18]
 801205e:	2b01      	cmp	r3, #1
 8012060:	d004      	beq.n	801206c <onAutocompleteRequest+0x34>
 8012062:	8a3a      	ldrh	r2, [r7, #16]
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	8c1b      	ldrh	r3, [r3, #32]
 8012068:	429a      	cmp	r2, r3
 801206a:	d92a      	bls.n	80120c2 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 801206c:	69bb      	ldr	r3, [r7, #24]
 801206e:	69db      	ldr	r3, [r3, #28]
 8012070:	68f9      	ldr	r1, [r7, #12]
 8012072:	8a3a      	ldrh	r2, [r7, #16]
 8012074:	4618      	mov	r0, r3
 8012076:	f00b fa78 	bl	801d56a <memcpy>
        if (cmd.candidateCount == 1) {
 801207a:	8a7b      	ldrh	r3, [r7, #18]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d109      	bne.n	8012094 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	69db      	ldr	r3, [r3, #28]
 8012084:	8a3a      	ldrh	r2, [r7, #16]
 8012086:	4413      	add	r3, r2
 8012088:	2220      	movs	r2, #32
 801208a:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 801208c:	8a3b      	ldrh	r3, [r7, #16]
 801208e:	3301      	adds	r3, #1
 8012090:	b29b      	uxth	r3, r3
 8012092:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8012094:	69bb      	ldr	r3, [r7, #24]
 8012096:	69db      	ldr	r3, [r3, #28]
 8012098:	8a3a      	ldrh	r2, [r7, #16]
 801209a:	4413      	add	r3, r2
 801209c:	2200      	movs	r2, #0
 801209e:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	69db      	ldr	r3, [r3, #28]
 80120a4:	69ba      	ldr	r2, [r7, #24]
 80120a6:	8c12      	ldrh	r2, [r2, #32]
 80120a8:	4413      	add	r3, r2
 80120aa:	4619      	mov	r1, r3
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f87f 	bl	80121b0 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80120b2:	8a3a      	ldrh	r2, [r7, #16]
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	8c1a      	ldrh	r2, [r3, #32]
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 80120c0:	e03f      	b.n	8012142 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f842 	bl	801214c <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80120c8:	2300      	movs	r3, #0
 80120ca:	61fb      	str	r3, [r7, #28]
 80120cc:	e021      	b.n	8012112 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80120d2:	69fb      	ldr	r3, [r7, #28]
 80120d4:	4413      	add	r3, r2
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	f003 0301 	and.w	r3, r3, #1
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d014      	beq.n	801210a <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80120e4:	69fa      	ldr	r2, [r7, #28]
 80120e6:	4613      	mov	r3, r2
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	4413      	add	r3, r2
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	440b      	add	r3, r1
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80120f4:	6979      	ldr	r1, [r7, #20]
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 f85a 	bl	80121b0 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80120fc:	4b12      	ldr	r3, [pc, #72]	@ (8012148 <onAutocompleteRequest+0x110>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4619      	mov	r1, r3
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f000 f854 	bl	80121b0 <writeToOutput>
 8012108:	e000      	b.n	801210c <onAutocompleteRequest+0xd4>
            continue;
 801210a:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	3301      	adds	r3, #1
 8012110:	61fb      	str	r3, [r7, #28]
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012116:	461a      	mov	r2, r3
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	4293      	cmp	r3, r2
 801211c:	dbd7      	blt.n	80120ce <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	4619      	mov	r1, r3
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 f843 	bl	80121b0 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	4619      	mov	r1, r3
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f000 f83d 	bl	80121b0 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	8c1a      	ldrh	r2, [r3, #32]
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801213e:	e000      	b.n	8012142 <onAutocompleteRequest+0x10a>
        return;
 8012140:	bf00      	nop
}
 8012142:	3720      	adds	r7, #32
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	20000028 	.word	0x20000028

0801214c <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 801214c:	b590      	push	{r4, r7, lr}
 801214e:	b087      	sub	sp, #28
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801215e:	461c      	mov	r4, r3
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	4618      	mov	r0, r3
 8012166:	f7ee f89b 	bl	80002a0 <strlen>
 801216a:	4603      	mov	r3, r0
 801216c:	4423      	add	r3, r4
 801216e:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	210d      	movs	r1, #13
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801217a:	2300      	movs	r3, #0
 801217c:	617b      	str	r3, [r7, #20]
 801217e:	e007      	b.n	8012190 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2120      	movs	r1, #32
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	3301      	adds	r3, #1
 801218e:	617b      	str	r3, [r7, #20]
 8012190:	697a      	ldr	r2, [r7, #20]
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	429a      	cmp	r2, r3
 8012196:	d3f3      	bcc.n	8012180 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	210d      	movs	r1, #13
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	4798      	blx	r3
    impl->inputLineLength = 0;
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	2200      	movs	r2, #0
 80121a6:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 80121a8:	bf00      	nop
 80121aa:	371c      	adds	r7, #28
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd90      	pop	{r4, r7, pc}

080121b0 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80121ba:	6838      	ldr	r0, [r7, #0]
 80121bc:	f7ee f870 	bl	80002a0 <strlen>
 80121c0:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80121c2:	2300      	movs	r3, #0
 80121c4:	60fb      	str	r3, [r7, #12]
 80121c6:	e00b      	b.n	80121e0 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	6839      	ldr	r1, [r7, #0]
 80121ce:	68fa      	ldr	r2, [r7, #12]
 80121d0:	440a      	add	r2, r1
 80121d2:	7812      	ldrb	r2, [r2, #0]
 80121d4:	4611      	mov	r1, r2
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	3301      	adds	r3, #1
 80121de:	60fb      	str	r3, [r7, #12]
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d3ef      	bcc.n	80121c8 <writeToOutput+0x18>
    }
}
 80121e8:	bf00      	nop
 80121ea:	bf00      	nop
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <isControlChar>:

static bool isControlChar(char c) {
 80121f2:	b480      	push	{r7}
 80121f4:	b083      	sub	sp, #12
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	4603      	mov	r3, r0
 80121fa:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80121fc:	79fb      	ldrb	r3, [r7, #7]
 80121fe:	2b0d      	cmp	r3, #13
 8012200:	d00b      	beq.n	801221a <isControlChar+0x28>
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	2b0a      	cmp	r3, #10
 8012206:	d008      	beq.n	801221a <isControlChar+0x28>
 8012208:	79fb      	ldrb	r3, [r7, #7]
 801220a:	2b08      	cmp	r3, #8
 801220c:	d005      	beq.n	801221a <isControlChar+0x28>
 801220e:	79fb      	ldrb	r3, [r7, #7]
 8012210:	2b09      	cmp	r3, #9
 8012212:	d002      	beq.n	801221a <isControlChar+0x28>
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	2b7f      	cmp	r3, #127	@ 0x7f
 8012218:	d101      	bne.n	801221e <isControlChar+0x2c>
 801221a:	2301      	movs	r3, #1
 801221c:	e000      	b.n	8012220 <isControlChar+0x2e>
 801221e:	2300      	movs	r3, #0
 8012220:	f003 0301 	and.w	r3, r3, #1
 8012224:	b2db      	uxtb	r3, r3
}
 8012226:	4618      	mov	r0, r3
 8012228:	370c      	adds	r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr

08012232 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8012232:	b480      	push	{r7}
 8012234:	b083      	sub	sp, #12
 8012236:	af00      	add	r7, sp, #0
 8012238:	4603      	mov	r3, r0
 801223a:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 801223c:	79fb      	ldrb	r3, [r7, #7]
 801223e:	2b1f      	cmp	r3, #31
 8012240:	d904      	bls.n	801224c <isDisplayableChar+0x1a>
 8012242:	79fb      	ldrb	r3, [r7, #7]
 8012244:	2b7e      	cmp	r3, #126	@ 0x7e
 8012246:	d801      	bhi.n	801224c <isDisplayableChar+0x1a>
 8012248:	2301      	movs	r3, #1
 801224a:	e000      	b.n	801224e <isDisplayableChar+0x1c>
 801224c:	2300      	movs	r3, #0
 801224e:	f003 0301 	and.w	r3, r3, #1
 8012252:	b2db      	uxtb	r3, r3
}
 8012254:	4618      	mov	r0, r3
 8012256:	370c      	adds	r7, #12
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8012260:	b480      	push	{r7}
 8012262:	b083      	sub	sp, #12
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	88da      	ldrh	r2, [r3, #6]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	889b      	ldrh	r3, [r3, #4]
 8012270:	429a      	cmp	r2, r3
 8012272:	d306      	bcc.n	8012282 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	88da      	ldrh	r2, [r3, #6]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	889b      	ldrh	r3, [r3, #4]
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	b29b      	uxth	r3, r3
 8012280:	e009      	b.n	8012296 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	891a      	ldrh	r2, [r3, #8]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	889b      	ldrh	r3, [r3, #4]
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	b29a      	uxth	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	88db      	ldrh	r3, [r3, #6]
 8012292:	4413      	add	r3, r2
 8012294:	b29b      	uxth	r3, r3
}
 8012296:	4618      	mov	r0, r3
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr

080122a2 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80122a2:	b480      	push	{r7}
 80122a4:	b085      	sub	sp, #20
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80122aa:	2300      	movs	r3, #0
 80122ac:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	889a      	ldrh	r2, [r3, #4]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	88db      	ldrh	r3, [r3, #6]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d014      	beq.n	80122e4 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	8892      	ldrh	r2, [r2, #4]
 80122c2:	4413      	add	r3, r2
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	889b      	ldrh	r3, [r3, #4]
 80122cc:	3301      	adds	r3, #1
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	8912      	ldrh	r2, [r2, #8]
 80122d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80122d8:	fb01 f202 	mul.w	r2, r1, r2
 80122dc:	1a9b      	subs	r3, r3, r2
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3714      	adds	r7, #20
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80122f2:	b480      	push	{r7}
 80122f4:	b085      	sub	sp, #20
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	460b      	mov	r3, r1
 80122fc:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	88db      	ldrh	r3, [r3, #6]
 8012302:	3301      	adds	r3, #1
 8012304:	b29b      	uxth	r3, r3
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	8912      	ldrh	r2, [r2, #8]
 801230a:	fbb3 f1f2 	udiv	r1, r3, r2
 801230e:	fb01 f202 	mul.w	r2, r1, r2
 8012312:	1a9b      	subs	r3, r3, r2
 8012314:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	889b      	ldrh	r3, [r3, #4]
 801231a:	89fa      	ldrh	r2, [r7, #14]
 801231c:	429a      	cmp	r2, r3
 801231e:	d00b      	beq.n	8012338 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	88d2      	ldrh	r2, [r2, #6]
 8012328:	4413      	add	r3, r2
 801232a:	78fa      	ldrb	r2, [r7, #3]
 801232c:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	89fa      	ldrh	r2, [r7, #14]
 8012332:	80da      	strh	r2, [r3, #6]
        return true;
 8012334:	2301      	movs	r3, #1
 8012336:	e000      	b.n	801233a <fifoBufPush+0x48>
    }
    return false;
 8012338:	2300      	movs	r3, #0
}
 801233a:	4618      	mov	r0, r3
 801233c:	3714      	adds	r7, #20
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr

08012346 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8012346:	b580      	push	{r7, lr}
 8012348:	b088      	sub	sp, #32
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
 801234e:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8012350:	6838      	ldr	r0, [r7, #0]
 8012352:	f7ed ffa5 	bl	80002a0 <strlen>
 8012356:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	889b      	ldrh	r3, [r3, #4]
 801235c:	461a      	mov	r2, r3
 801235e:	69bb      	ldr	r3, [r7, #24]
 8012360:	3301      	adds	r3, #1
 8012362:	429a      	cmp	r2, r3
 8012364:	d201      	bcs.n	801236a <historyPut+0x24>
        return false;
 8012366:	2300      	movs	r3, #0
 8012368:	e04d      	b.n	8012406 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 801236a:	6839      	ldr	r1, [r7, #0]
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 f86a 	bl	8012446 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8012372:	e024      	b.n	80123be <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	891b      	ldrh	r3, [r3, #8]
 8012378:	4619      	mov	r1, r3
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 f847 	bl	801240e <historyGet>
 8012380:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8012382:	6978      	ldr	r0, [r7, #20]
 8012384:	f7ed ff8c 	bl	80002a0 <strlen>
 8012388:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	697a      	ldr	r2, [r7, #20]
 8012390:	1ad3      	subs	r3, r2, r3
 8012392:	461a      	mov	r2, r3
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	4413      	add	r3, r2
 8012398:	3301      	adds	r3, #1
 801239a:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	889b      	ldrh	r3, [r3, #4]
 80123a0:	461a      	mov	r2, r3
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	3301      	adds	r3, #1
 80123ac:	68fa      	ldr	r2, [r7, #12]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d20a      	bcs.n	80123c8 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	891b      	ldrh	r3, [r3, #8]
 80123b6:	3b01      	subs	r3, #1
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	891b      	ldrh	r3, [r3, #8]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1d6      	bne.n	8012374 <historyPut+0x2e>
 80123c6:	e000      	b.n	80123ca <historyPut+0x84>
            break;
 80123c8:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	891b      	ldrh	r3, [r3, #8]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00a      	beq.n	80123e8 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	3301      	adds	r3, #1
 80123da:	18d0      	adds	r0, r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	69fa      	ldr	r2, [r7, #28]
 80123e2:	4619      	mov	r1, r3
 80123e4:	f00a ff90 	bl	801d308 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6818      	ldr	r0, [r3, #0]
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	3301      	adds	r3, #1
 80123f0:	461a      	mov	r2, r3
 80123f2:	6839      	ldr	r1, [r7, #0]
 80123f4:	f00b f8b9 	bl	801d56a <memcpy>
    ++history->itemsCount;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	891b      	ldrh	r3, [r3, #8]
 80123fc:	3301      	adds	r3, #1
 80123fe:	b29a      	uxth	r2, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	811a      	strh	r2, [r3, #8]

    return true;
 8012404:	2301      	movs	r3, #1
}
 8012406:	4618      	mov	r0, r3
 8012408:	3720      	adds	r7, #32
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 801240e:	b580      	push	{r7, lr}
 8012410:	b082      	sub	sp, #8
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
 8012416:	460b      	mov	r3, r1
 8012418:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 801241a:	887b      	ldrh	r3, [r7, #2]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d004      	beq.n	801242a <historyGet+0x1c>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	891b      	ldrh	r3, [r3, #8]
 8012424:	887a      	ldrh	r2, [r7, #2]
 8012426:	429a      	cmp	r2, r3
 8012428:	d901      	bls.n	801242e <historyGet+0x20>
        return NULL;
 801242a:	2300      	movs	r3, #0
 801242c:	e007      	b.n	801243e <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	887a      	ldrh	r2, [r7, #2]
 8012434:	4611      	mov	r1, r2
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff f882 	bl	8011540 <embeddedCliGetToken>
 801243c:	4603      	mov	r3, r0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8012446:	b580      	push	{r7, lr}
 8012448:	b086      	sub	sp, #24
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d04c      	beq.n	80124f0 <historyRemove+0xaa>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	891b      	ldrh	r3, [r3, #8]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d048      	beq.n	80124f0 <historyRemove+0xaa>
        return;
    char *item = NULL;
 801245e:	2300      	movs	r3, #0
 8012460:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8012462:	2301      	movs	r3, #1
 8012464:	827b      	strh	r3, [r7, #18]
 8012466:	e013      	b.n	8012490 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	8a7a      	ldrh	r2, [r7, #18]
 801246e:	4611      	mov	r1, r2
 8012470:	4618      	mov	r0, r3
 8012472:	f7ff f880 	bl	8011576 <embeddedCliGetTokenVariable>
 8012476:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8012478:	6839      	ldr	r1, [r7, #0]
 801247a:	6978      	ldr	r0, [r7, #20]
 801247c:	f7ed feb0 	bl	80001e0 <strcmp>
 8012480:	4603      	mov	r3, r0
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00a      	beq.n	801249c <historyRemove+0x56>
            break;
        }
        item = NULL;
 8012486:	2300      	movs	r3, #0
 8012488:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801248a:	8a7b      	ldrh	r3, [r7, #18]
 801248c:	3301      	adds	r3, #1
 801248e:	827b      	strh	r3, [r7, #18]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	891b      	ldrh	r3, [r3, #8]
 8012494:	8a7a      	ldrh	r2, [r7, #18]
 8012496:	429a      	cmp	r2, r3
 8012498:	d9e6      	bls.n	8012468 <historyRemove+0x22>
 801249a:	e000      	b.n	801249e <historyRemove+0x58>
            break;
 801249c:	bf00      	nop
    }
    if (item == NULL)
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d027      	beq.n	80124f4 <historyRemove+0xae>
        return;

    --history->itemsCount;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	891b      	ldrh	r3, [r3, #8]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80124b0:	8a7a      	ldrh	r2, [r7, #18]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	891b      	ldrh	r3, [r3, #8]
 80124b6:	3301      	adds	r3, #1
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d01d      	beq.n	80124f8 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 80124bc:	6978      	ldr	r0, [r7, #20]
 80124be:	f7ed feef 	bl	80002a0 <strlen>
 80124c2:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	889b      	ldrh	r3, [r3, #4]
 80124c8:	4619      	mov	r1, r3
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3301      	adds	r3, #1
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	441a      	add	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	1ad3      	subs	r3, r2, r3
 80124d8:	1acb      	subs	r3, r1, r3
 80124da:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	3301      	adds	r3, #1
 80124e0:	697a      	ldr	r2, [r7, #20]
 80124e2:	4413      	add	r3, r2
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	4619      	mov	r1, r3
 80124e8:	6978      	ldr	r0, [r7, #20]
 80124ea:	f00a ff0d 	bl	801d308 <memmove>
 80124ee:	e004      	b.n	80124fa <historyRemove+0xb4>
        return;
 80124f0:	bf00      	nop
 80124f2:	e002      	b.n	80124fa <historyRemove+0xb4>
        return;
 80124f4:	bf00      	nop
 80124f6:	e000      	b.n	80124fa <historyRemove+0xb4>
        return;
 80124f8:	bf00      	nop
}
 80124fa:	3718      	adds	r7, #24
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8012500:	b480      	push	{r7}
 8012502:	b085      	sub	sp, #20
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	460b      	mov	r3, r1
 801250a:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d002      	beq.n	8012518 <getTokenPosition+0x18>
 8012512:	887b      	ldrh	r3, [r7, #2]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d102      	bne.n	801251e <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8012518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801251c:	e028      	b.n	8012570 <getTokenPosition+0x70>
    uint16_t i = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8012522:	2301      	movs	r3, #1
 8012524:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8012526:	89ba      	ldrh	r2, [r7, #12]
 8012528:	887b      	ldrh	r3, [r7, #2]
 801252a:	429a      	cmp	r2, r3
 801252c:	d013      	beq.n	8012556 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 801252e:	89fb      	ldrh	r3, [r7, #14]
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	4413      	add	r3, r2
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d109      	bne.n	801254e <getTokenPosition+0x4e>
            ++tokenCount;
 801253a:	89bb      	ldrh	r3, [r7, #12]
 801253c:	3301      	adds	r3, #1
 801253e:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8012540:	89fb      	ldrh	r3, [r7, #14]
 8012542:	3301      	adds	r3, #1
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	4413      	add	r3, r2
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d005      	beq.n	801255a <getTokenPosition+0x5a>
                break;
        }

        ++i;
 801254e:	89fb      	ldrh	r3, [r7, #14]
 8012550:	3301      	adds	r3, #1
 8012552:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8012554:	e7e7      	b.n	8012526 <getTokenPosition+0x26>
            break;
 8012556:	bf00      	nop
 8012558:	e000      	b.n	801255c <getTokenPosition+0x5c>
                break;
 801255a:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 801255c:	89fb      	ldrh	r3, [r7, #14]
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	4413      	add	r3, r2
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d001      	beq.n	801256c <getTokenPosition+0x6c>
        return i;
 8012568:	89fb      	ldrh	r3, [r7, #14]
 801256a:	e001      	b.n	8012570 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 801256c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8012570:	4618      	mov	r0, r3
 8012572:	3714      	adds	r7, #20
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012580:	4904      	ldr	r1, [pc, #16]	@ (8012594 <MX_FATFS_Init+0x18>)
 8012582:	4805      	ldr	r0, [pc, #20]	@ (8012598 <MX_FATFS_Init+0x1c>)
 8012584:	f007 ff92 	bl	801a4ac <FATFS_LinkDriver>
 8012588:	4603      	mov	r3, r0
 801258a:	461a      	mov	r2, r3
 801258c:	4b03      	ldr	r3, [pc, #12]	@ (801259c <MX_FATFS_Init+0x20>)
 801258e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012590:	bf00      	nop
 8012592:	bd80      	pop	{r7, pc}
 8012594:	20001aa8 	.word	0x20001aa8
 8012598:	080229f4 	.word	0x080229f4
 801259c:	20001aa4 	.word	0x20001aa4

080125a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80125a0:	b480      	push	{r7}
 80125a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80125a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80125ba:	f000 f86b 	bl	8012694 <BSP_SD_IsDetected>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d001      	beq.n	80125c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80125c4:	2301      	movs	r3, #1
 80125c6:	e005      	b.n	80125d4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80125c8:	4804      	ldr	r0, [pc, #16]	@ (80125dc <BSP_SD_Init+0x2c>)
 80125ca:	f7f7 fa02 	bl	80099d2 <HAL_SD_Init>
 80125ce:	4603      	mov	r3, r0
 80125d0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80125d2:	79fb      	ldrb	r3, [r7, #7]
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	20001810 	.word	0x20001810

080125e0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b088      	sub	sp, #32
 80125e4:	af02      	add	r7, sp, #8
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
 80125ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80125ee:	2300      	movs	r3, #0
 80125f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	68ba      	ldr	r2, [r7, #8]
 80125fa:	68f9      	ldr	r1, [r7, #12]
 80125fc:	4806      	ldr	r0, [pc, #24]	@ (8012618 <BSP_SD_ReadBlocks+0x38>)
 80125fe:	f7f7 fa99 	bl	8009b34 <HAL_SD_ReadBlocks>
 8012602:	4603      	mov	r3, r0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d001      	beq.n	801260c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012608:	2301      	movs	r3, #1
 801260a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801260c:	7dfb      	ldrb	r3, [r7, #23]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	20001810 	.word	0x20001810

0801261c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b088      	sub	sp, #32
 8012620:	af02      	add	r7, sp, #8
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801262a:	2300      	movs	r3, #0
 801262c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	68f9      	ldr	r1, [r7, #12]
 8012638:	4806      	ldr	r0, [pc, #24]	@ (8012654 <BSP_SD_WriteBlocks+0x38>)
 801263a:	f7f7 fc59 	bl	8009ef0 <HAL_SD_WriteBlocks>
 801263e:	4603      	mov	r3, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d001      	beq.n	8012648 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012644:	2301      	movs	r3, #1
 8012646:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012648:	7dfb      	ldrb	r3, [r7, #23]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	20001810 	.word	0x20001810

08012658 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801265c:	4805      	ldr	r0, [pc, #20]	@ (8012674 <BSP_SD_GetCardState+0x1c>)
 801265e:	f7f7 ff9d 	bl	800a59c <HAL_SD_GetCardState>
 8012662:	4603      	mov	r3, r0
 8012664:	2b04      	cmp	r3, #4
 8012666:	bf14      	ite	ne
 8012668:	2301      	movne	r3, #1
 801266a:	2300      	moveq	r3, #0
 801266c:	b2db      	uxtb	r3, r3
}
 801266e:	4618      	mov	r0, r3
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	20001810 	.word	0x20001810

08012678 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012680:	6879      	ldr	r1, [r7, #4]
 8012682:	4803      	ldr	r0, [pc, #12]	@ (8012690 <BSP_SD_GetCardInfo+0x18>)
 8012684:	f7f7 ff5e 	bl	800a544 <HAL_SD_GetCardInfo>
}
 8012688:	bf00      	nop
 801268a:	3708      	adds	r7, #8
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	20001810 	.word	0x20001810

08012694 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801269a:	2301      	movs	r3, #1
 801269c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 801269e:	79fb      	ldrb	r3, [r7, #7]
 80126a0:	b2db      	uxtb	r3, r3
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
	...

080126b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	4603      	mov	r3, r0
 80126b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80126ba:	4b0b      	ldr	r3, [pc, #44]	@ (80126e8 <SD_CheckStatus+0x38>)
 80126bc:	2201      	movs	r2, #1
 80126be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80126c0:	f7ff ffca 	bl	8012658 <BSP_SD_GetCardState>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d107      	bne.n	80126da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80126ca:	4b07      	ldr	r3, [pc, #28]	@ (80126e8 <SD_CheckStatus+0x38>)
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f023 0301 	bic.w	r3, r3, #1
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	4b04      	ldr	r3, [pc, #16]	@ (80126e8 <SD_CheckStatus+0x38>)
 80126d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80126da:	4b03      	ldr	r3, [pc, #12]	@ (80126e8 <SD_CheckStatus+0x38>)
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	b2db      	uxtb	r3, r3
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	2000002c 	.word	0x2000002c

080126ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	4603      	mov	r3, r0
 80126f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80126f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012724 <SD_initialize+0x38>)
 80126f8:	2201      	movs	r2, #1
 80126fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80126fc:	f7ff ff58 	bl	80125b0 <BSP_SD_Init>
 8012700:	4603      	mov	r3, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d107      	bne.n	8012716 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8012706:	79fb      	ldrb	r3, [r7, #7]
 8012708:	4618      	mov	r0, r3
 801270a:	f7ff ffd1 	bl	80126b0 <SD_CheckStatus>
 801270e:	4603      	mov	r3, r0
 8012710:	461a      	mov	r2, r3
 8012712:	4b04      	ldr	r3, [pc, #16]	@ (8012724 <SD_initialize+0x38>)
 8012714:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012716:	4b03      	ldr	r3, [pc, #12]	@ (8012724 <SD_initialize+0x38>)
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	b2db      	uxtb	r3, r3
}
 801271c:	4618      	mov	r0, r3
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	2000002c 	.word	0x2000002c

08012728 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	4603      	mov	r3, r0
 8012730:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012732:	79fb      	ldrb	r3, [r7, #7]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff ffbb 	bl	80126b0 <SD_CheckStatus>
 801273a:	4603      	mov	r3, r0
}
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b086      	sub	sp, #24
 8012748:	af00      	add	r7, sp, #0
 801274a:	60b9      	str	r1, [r7, #8]
 801274c:	607a      	str	r2, [r7, #4]
 801274e:	603b      	str	r3, [r7, #0]
 8012750:	4603      	mov	r3, r0
 8012752:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012754:	2301      	movs	r3, #1
 8012756:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8012758:	f04f 33ff 	mov.w	r3, #4294967295
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	6879      	ldr	r1, [r7, #4]
 8012760:	68b8      	ldr	r0, [r7, #8]
 8012762:	f7ff ff3d 	bl	80125e0 <BSP_SD_ReadBlocks>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d107      	bne.n	801277c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 801276c:	bf00      	nop
 801276e:	f7ff ff73 	bl	8012658 <BSP_SD_GetCardState>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1fa      	bne.n	801276e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8012778:	2300      	movs	r3, #0
 801277a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801277c:	7dfb      	ldrb	r3, [r7, #23]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3718      	adds	r7, #24
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}

08012786 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012786:	b580      	push	{r7, lr}
 8012788:	b086      	sub	sp, #24
 801278a:	af00      	add	r7, sp, #0
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
 8012790:	603b      	str	r3, [r7, #0]
 8012792:	4603      	mov	r3, r0
 8012794:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012796:	2301      	movs	r3, #1
 8012798:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801279a:	f04f 33ff 	mov.w	r3, #4294967295
 801279e:	683a      	ldr	r2, [r7, #0]
 80127a0:	6879      	ldr	r1, [r7, #4]
 80127a2:	68b8      	ldr	r0, [r7, #8]
 80127a4:	f7ff ff3a 	bl	801261c <BSP_SD_WriteBlocks>
 80127a8:	4603      	mov	r3, r0
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d107      	bne.n	80127be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80127ae:	bf00      	nop
 80127b0:	f7ff ff52 	bl	8012658 <BSP_SD_GetCardState>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d1fa      	bne.n	80127b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80127be:	7dfb      	ldrb	r3, [r7, #23]
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3718      	adds	r7, #24
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b08c      	sub	sp, #48	@ 0x30
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	4603      	mov	r3, r0
 80127d0:	603a      	str	r2, [r7, #0]
 80127d2:	71fb      	strb	r3, [r7, #7]
 80127d4:	460b      	mov	r3, r1
 80127d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80127d8:	2301      	movs	r3, #1
 80127da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80127de:	4b25      	ldr	r3, [pc, #148]	@ (8012874 <SD_ioctl+0xac>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f003 0301 	and.w	r3, r3, #1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <SD_ioctl+0x28>
 80127ec:	2303      	movs	r3, #3
 80127ee:	e03c      	b.n	801286a <SD_ioctl+0xa2>

  switch (cmd)
 80127f0:	79bb      	ldrb	r3, [r7, #6]
 80127f2:	2b03      	cmp	r3, #3
 80127f4:	d834      	bhi.n	8012860 <SD_ioctl+0x98>
 80127f6:	a201      	add	r2, pc, #4	@ (adr r2, 80127fc <SD_ioctl+0x34>)
 80127f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127fc:	0801280d 	.word	0x0801280d
 8012800:	08012815 	.word	0x08012815
 8012804:	0801282d 	.word	0x0801282d
 8012808:	08012847 	.word	0x08012847
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801280c:	2300      	movs	r3, #0
 801280e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012812:	e028      	b.n	8012866 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012814:	f107 030c 	add.w	r3, r7, #12
 8012818:	4618      	mov	r0, r3
 801281a:	f7ff ff2d 	bl	8012678 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801281e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801282a:	e01c      	b.n	8012866 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801282c:	f107 030c 	add.w	r3, r7, #12
 8012830:	4618      	mov	r0, r3
 8012832:	f7ff ff21 	bl	8012678 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012838:	b29a      	uxth	r2, r3
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801283e:	2300      	movs	r3, #0
 8012840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012844:	e00f      	b.n	8012866 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012846:	f107 030c 	add.w	r3, r7, #12
 801284a:	4618      	mov	r0, r3
 801284c:	f7ff ff14 	bl	8012678 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012852:	0a5a      	lsrs	r2, r3, #9
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012858:	2300      	movs	r3, #0
 801285a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801285e:	e002      	b.n	8012866 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012860:	2304      	movs	r3, #4
 8012862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801286a:	4618      	mov	r0, r3
 801286c:	3730      	adds	r7, #48	@ 0x30
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	2000002c 	.word	0x2000002c

08012878 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8012878:	b480      	push	{r7}
 801287a:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 801287c:	4b03      	ldr	r3, [pc, #12]	@ (801288c <RtcInt+0x14>)
 801287e:	2201      	movs	r2, #1
 8012880:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8012882:	bf00      	nop
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr
 801288c:	2000002d 	.word	0x2000002d

08012890 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8012890:	b480      	push	{r7}
 8012892:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8012894:	4b06      	ldr	r3, [pc, #24]	@ (80128b0 <Rtc_Alarm_watchdog_disable+0x20>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	689a      	ldr	r2, [r3, #8]
 801289a:	4b05      	ldr	r3, [pc, #20]	@ (80128b0 <Rtc_Alarm_watchdog_disable+0x20>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80128a2:	609a      	str	r2, [r3, #8]
}
 80128a4:	bf00      	nop
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	200017f0 	.word	0x200017f0

080128b4 <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b092      	sub	sp, #72	@ 0x48
 80128b8:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80128ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80128be:	2200      	movs	r2, #0
 80128c0:	4619      	mov	r1, r3
 80128c2:	4828      	ldr	r0, [pc, #160]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 80128c4:	f7f6 fd04 	bl	80092d0 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80128c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80128cc:	2200      	movs	r2, #0
 80128ce:	4619      	mov	r1, r3
 80128d0:	4824      	ldr	r0, [pc, #144]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 80128d2:	f7f6 fddf 	bl	8009494 <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 80128d6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80128da:	3319      	adds	r3, #25
 80128dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 80128e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80128e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80128e6:	d902      	bls.n	80128ee <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 80128e8:	2300      	movs	r3, #0
 80128ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 80128ee:	1d3b      	adds	r3, r7, #4
 80128f0:	2228      	movs	r2, #40	@ 0x28
 80128f2:	2100      	movs	r1, #0
 80128f4:	4618      	mov	r0, r3
 80128f6:	f00a fd21 	bl	801d33c <memset>
	  sAlarm.AlarmTime.Hours = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8012902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012906:	b2db      	uxtb	r3, r3
 8012908:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801290e:	2300      	movs	r3, #0
 8012910:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012912:	2300      	movs	r3, #0
 8012914:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8012916:	4b14      	ldr	r3, [pc, #80]	@ (8012968 <Rtc_Alarm_watchdog+0xb4>)
 8012918:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801291a:	2300      	movs	r3, #0
 801291c:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801291e:	2300      	movs	r3, #0
 8012920:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8012922:	2301      	movs	r3, #1
 8012924:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8012928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801292c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 801292e:	1d3b      	adds	r3, r7, #4
 8012930:	2200      	movs	r2, #0
 8012932:	4619      	mov	r1, r3
 8012934:	480b      	ldr	r0, [pc, #44]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 8012936:	f7f6 fdfd 	bl	8009534 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 801293a:	4b0a      	ldr	r3, [pc, #40]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	689a      	ldr	r2, [r3, #8]
 8012940:	4b08      	ldr	r3, [pc, #32]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012948:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 801294a:	4b06      	ldr	r3, [pc, #24]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	b2da      	uxtb	r2, r3
 8012952:	4b04      	ldr	r3, [pc, #16]	@ (8012964 <Rtc_Alarm_watchdog+0xb0>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 801295a:	60da      	str	r2, [r3, #12]

}
 801295c:	bf00      	nop
 801295e:	3748      	adds	r7, #72	@ 0x48
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	200017f0 	.word	0x200017f0
 8012968:	80808000 	.word	0x80808000

0801296c <Set_Date>:

void Set_Date(char *Datebuffer) {
 801296c:	b580      	push	{r7, lr}
 801296e:	b088      	sub	sp, #32
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8012974:	f107 030c 	add.w	r3, r7, #12
 8012978:	4619      	mov	r1, r3
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f8e4 	bl	8012b48 <Parse_Date>
 8012980:	4603      	mov	r3, r0
 8012982:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8012984:	7ffb      	ldrb	r3, [r7, #31]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d10c      	bne.n	80129a4 <Set_Date+0x38>
		sDate.Date = date[0];
 801298a:	7b3b      	ldrb	r3, [r7, #12]
 801298c:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 801298e:	7b7b      	ldrb	r3, [r7, #13]
 8012990:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8012992:	7bbb      	ldrb	r3, [r7, #14]
 8012994:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8012996:	f107 0318 	add.w	r3, r7, #24
 801299a:	2200      	movs	r2, #0
 801299c:	4619      	mov	r1, r3
 801299e:	4805      	ldr	r0, [pc, #20]	@ (80129b4 <Set_Date+0x48>)
 80129a0:	f7f6 fcf4 	bl	800938c <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 80129a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80129a8:	f7f1 f9ba 	bl	8003d20 <HAL_Delay>
}
 80129ac:	bf00      	nop
 80129ae:	3720      	adds	r7, #32
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	200017f0 	.word	0x200017f0

080129b8 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b094      	sub	sp, #80	@ 0x50
 80129bc:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 80129be:	4b44      	ldr	r3, [pc, #272]	@ (8012ad0 <Rtc_set_alarm+0x118>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d07f      	beq.n	8012ac6 <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80129cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80129d0:	2200      	movs	r2, #0
 80129d2:	4619      	mov	r1, r3
 80129d4:	483f      	ldr	r0, [pc, #252]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 80129d6:	f7f6 fc7b 	bl	80092d0 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80129da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129de:	2200      	movs	r2, #0
 80129e0:	4619      	mov	r1, r3
 80129e2:	483c      	ldr	r0, [pc, #240]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 80129e4:	f7f6 fd56 	bl	8009494 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 80129e8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80129ec:	461a      	mov	r2, r3
 80129ee:	4b3a      	ldr	r3, [pc, #232]	@ (8012ad8 <Rtc_set_alarm+0x120>)
 80129f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	4413      	add	r3, r2
 80129f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 80129fc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012a00:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8012a04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a08:	2b3b      	cmp	r3, #59	@ 0x3b
 8012a0a:	d917      	bls.n	8012a3c <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8012a0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a10:	4a31      	ldr	r2, [pc, #196]	@ (8012ad8 <Rtc_set_alarm+0x120>)
 8012a12:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8012a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a1a:	fb01 f202 	mul.w	r2, r1, r2
 8012a1e:	1a9b      	subs	r3, r3, r2
 8012a20:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8012a24:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012a28:	3301      	adds	r3, #1
 8012a2a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8012a2e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012a32:	2b17      	cmp	r3, #23
 8012a34:	d902      	bls.n	8012a3c <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8012a36:	2300      	movs	r3, #0
 8012a38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8012a3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8012a40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a44:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8012a48:	9100      	str	r1, [sp, #0]
 8012a4a:	4924      	ldr	r1, [pc, #144]	@ (8012adc <Rtc_set_alarm+0x124>)
 8012a4c:	4824      	ldr	r0, [pc, #144]	@ (8012ae0 <Rtc_set_alarm+0x128>)
 8012a4e:	f00a fb2b 	bl	801d0a8 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8012a52:	1d3b      	adds	r3, r7, #4
 8012a54:	2228      	movs	r2, #40	@ 0x28
 8012a56:	2100      	movs	r1, #0
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f00a fc6f 	bl	801d33c <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8012a62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012a72:	2300      	movs	r3, #0
 8012a74:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012a76:	2300      	movs	r3, #0
 8012a78:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8012a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8012ae4 <Rtc_set_alarm+0x12c>)
 8012a7c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012a82:	2300      	movs	r3, #0
 8012a84:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8012a86:	2301      	movs	r3, #1
 8012a88:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8012a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012a90:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8012a92:	1d3b      	adds	r3, r7, #4
 8012a94:	2200      	movs	r2, #0
 8012a96:	4619      	mov	r1, r3
 8012a98:	480e      	ldr	r0, [pc, #56]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 8012a9a:	f7f6 fd4b 	bl	8009534 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8012a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	689a      	ldr	r2, [r3, #8]
 8012aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012aac:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8012aae:	4b09      	ldr	r3, [pc, #36]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	4b07      	ldr	r3, [pc, #28]	@ (8012ad4 <Rtc_set_alarm+0x11c>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8012abe:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8012ac0:	4b03      	ldr	r3, [pc, #12]	@ (8012ad0 <Rtc_set_alarm+0x118>)
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8012ac6:	bf00      	nop
 8012ac8:	3748      	adds	r7, #72	@ 0x48
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	2000002d 	.word	0x2000002d
 8012ad4:	200017f0 	.word	0x200017f0
 8012ad8:	200012f4 	.word	0x200012f4
 8012adc:	080221a0 	.word	0x080221a0
 8012ae0:	20000030 	.word	0x20000030
 8012ae4:	80800080 	.word	0x80800080

08012ae8 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08c      	sub	sp, #48	@ 0x30
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8012af0:	f107 030c 	add.w	r3, r7, #12
 8012af4:	4619      	mov	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 f890 	bl	8012c1c <Parse_Time>
 8012afc:	4603      	mov	r3, r0
 8012afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8012b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d113      	bne.n	8012b32 <Set_Time+0x4a>
		sTime.Hours = time[0];
 8012b0a:	7b3b      	ldrb	r3, [r7, #12]
 8012b0c:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8012b0e:	7b7b      	ldrb	r3, [r7, #13]
 8012b10:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8012b12:	7bbb      	ldrb	r3, [r7, #14]
 8012b14:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012b16:	2300      	movs	r3, #0
 8012b18:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8012b1e:	f107 0318 	add.w	r3, r7, #24
 8012b22:	2200      	movs	r2, #0
 8012b24:	4619      	mov	r1, r3
 8012b26:	4807      	ldr	r0, [pc, #28]	@ (8012b44 <Set_Time+0x5c>)
 8012b28:	f7f6 fb38 	bl	800919c <HAL_RTC_SetTime>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8012b32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012b36:	f7f1 f8f3 	bl	8003d20 <HAL_Delay>

}
 8012b3a:	bf00      	nop
 8012b3c:	3730      	adds	r7, #48	@ 0x30
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	200017f0 	.word	0x200017f0

08012b48 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8012b5a:	492e      	ldr	r1, [pc, #184]	@ (8012c14 <Parse_Date+0xcc>)
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f00a fc03 	bl	801d368 <strtok>
 8012b62:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d14b      	bne.n	8012c02 <Parse_Date+0xba>
		{
			return 1;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e04d      	b.n	8012c0a <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8012b6e:	68b8      	ldr	r0, [r7, #8]
 8012b70:	f009 f962 	bl	801be38 <atoi>
 8012b74:	4603      	mov	r3, r0
 8012b76:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8012b78:	89fb      	ldrh	r3, [r7, #14]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d10a      	bne.n	8012b94 <Parse_Date+0x4c>
 8012b7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b82:	2b1f      	cmp	r3, #31
 8012b84:	dc03      	bgt.n	8012b8e <Parse_Date+0x46>
 8012b86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	dc02      	bgt.n	8012b94 <Parse_Date+0x4c>
			{
				val= 1;
 8012b8e:	2301      	movs	r3, #1
 8012b90:	81bb      	strh	r3, [r7, #12]
 8012b92:	e028      	b.n	8012be6 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8012b94:	89fb      	ldrh	r3, [r7, #14]
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d10a      	bne.n	8012bb0 <Parse_Date+0x68>
 8012b9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b9e:	2b0c      	cmp	r3, #12
 8012ba0:	dc03      	bgt.n	8012baa <Parse_Date+0x62>
 8012ba2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	dc02      	bgt.n	8012bb0 <Parse_Date+0x68>
			{
				val= 1;
 8012baa:	2301      	movs	r3, #1
 8012bac:	81bb      	strh	r3, [r7, #12]
 8012bae:	e01a      	b.n	8012be6 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8012bb0:	89fb      	ldrh	r3, [r7, #14]
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	d112      	bne.n	8012bdc <Parse_Date+0x94>
 8012bb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012bba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012bbe:	dd0d      	ble.n	8012bdc <Parse_Date+0x94>
			{
				val=val%100;
 8012bc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012bc4:	4a14      	ldr	r2, [pc, #80]	@ (8012c18 <Parse_Date+0xd0>)
 8012bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8012bca:	1151      	asrs	r1, r2, #5
 8012bcc:	17da      	asrs	r2, r3, #31
 8012bce:	1a8a      	subs	r2, r1, r2
 8012bd0:	2164      	movs	r1, #100	@ 0x64
 8012bd2:	fb01 f202 	mul.w	r2, r1, r2
 8012bd6:	1a9b      	subs	r3, r3, r2
 8012bd8:	81bb      	strh	r3, [r7, #12]
 8012bda:	e004      	b.n	8012be6 <Parse_Date+0x9e>
			}
			else if(i > 2)
 8012bdc:	89fb      	ldrh	r3, [r7, #14]
 8012bde:	2b02      	cmp	r3, #2
 8012be0:	d901      	bls.n	8012be6 <Parse_Date+0x9e>
			{
				return 1;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e011      	b.n	8012c0a <Parse_Date+0xc2>
			}


		   date[i] =val;
 8012be6:	89fb      	ldrh	r3, [r7, #14]
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	4413      	add	r3, r2
 8012bec:	89ba      	ldrh	r2, [r7, #12]
 8012bee:	b2d2      	uxtb	r2, r2
 8012bf0:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8012bf2:	4908      	ldr	r1, [pc, #32]	@ (8012c14 <Parse_Date+0xcc>)
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	f00a fbb7 	bl	801d368 <strtok>
 8012bfa:	60b8      	str	r0, [r7, #8]
		i++;
 8012bfc:	89fb      	ldrh	r3, [r7, #14]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d1b2      	bne.n	8012b6e <Parse_Date+0x26>
	}

	}

	return 0;
 8012c08:	2300      	movs	r3, #0

}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	080221b0 	.word	0x080221b0
 8012c18:	51eb851f 	.word	0x51eb851f

08012c1c <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b084      	sub	sp, #16
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012c26:	2300      	movs	r3, #0
 8012c28:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8012c2e:	492a      	ldr	r1, [pc, #168]	@ (8012cd8 <Parse_Time+0xbc>)
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f00a fb99 	bl	801d368 <strtok>
 8012c36:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d143      	bne.n	8012cc6 <Parse_Time+0xaa>
			{
				return 1;
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e045      	b.n	8012cce <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8012c42:	68b8      	ldr	r0, [r7, #8]
 8012c44:	f009 f8f8 	bl	801be38 <atoi>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8012c4c:	89fb      	ldrh	r3, [r7, #14]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d10a      	bne.n	8012c68 <Parse_Time+0x4c>
 8012c52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c56:	2b18      	cmp	r3, #24
 8012c58:	dc03      	bgt.n	8012c62 <Parse_Time+0x46>
 8012c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	da02      	bge.n	8012c68 <Parse_Time+0x4c>
				{
					val= 24;
 8012c62:	2318      	movs	r3, #24
 8012c64:	81bb      	strh	r3, [r7, #12]
 8012c66:	e020      	b.n	8012caa <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8012c68:	89fb      	ldrh	r3, [r7, #14]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d10a      	bne.n	8012c84 <Parse_Time+0x68>
 8012c6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c72:	2b3b      	cmp	r3, #59	@ 0x3b
 8012c74:	dc03      	bgt.n	8012c7e <Parse_Time+0x62>
 8012c76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	da02      	bge.n	8012c84 <Parse_Time+0x68>
				{
					val= 59;
 8012c7e:	233b      	movs	r3, #59	@ 0x3b
 8012c80:	81bb      	strh	r3, [r7, #12]
 8012c82:	e012      	b.n	8012caa <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8012c84:	89fb      	ldrh	r3, [r7, #14]
 8012c86:	2b02      	cmp	r3, #2
 8012c88:	d10a      	bne.n	8012ca0 <Parse_Time+0x84>
 8012c8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c8e:	2b3b      	cmp	r3, #59	@ 0x3b
 8012c90:	dc03      	bgt.n	8012c9a <Parse_Time+0x7e>
 8012c92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	da02      	bge.n	8012ca0 <Parse_Time+0x84>
				{
					val=59;
 8012c9a:	233b      	movs	r3, #59	@ 0x3b
 8012c9c:	81bb      	strh	r3, [r7, #12]
 8012c9e:	e004      	b.n	8012caa <Parse_Time+0x8e>
				}
				else if(i > 2)
 8012ca0:	89fb      	ldrh	r3, [r7, #14]
 8012ca2:	2b02      	cmp	r3, #2
 8012ca4:	d901      	bls.n	8012caa <Parse_Time+0x8e>
				{
					return 1;
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	e011      	b.n	8012cce <Parse_Time+0xb2>
				}


				time[i] =val;
 8012caa:	89fb      	ldrh	r3, [r7, #14]
 8012cac:	683a      	ldr	r2, [r7, #0]
 8012cae:	4413      	add	r3, r2
 8012cb0:	89ba      	ldrh	r2, [r7, #12]
 8012cb2:	b2d2      	uxtb	r2, r2
 8012cb4:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8012cb6:	4908      	ldr	r1, [pc, #32]	@ (8012cd8 <Parse_Time+0xbc>)
 8012cb8:	2000      	movs	r0, #0
 8012cba:	f00a fb55 	bl	801d368 <strtok>
 8012cbe:	60b8      	str	r0, [r7, #8]
			i++;
 8012cc0:	89fb      	ldrh	r3, [r7, #14]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d1ba      	bne.n	8012c42 <Parse_Time+0x26>
		}

		}

		return 0;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	080221b0 	.word	0x080221b0

08012cdc <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	460b      	mov	r3, r1
 8012ce6:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8012ce8:	78fb      	ldrb	r3, [r7, #3]
 8012cea:	091b      	lsrs	r3, r3, #4
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	4619      	mov	r1, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	607a      	str	r2, [r7, #4]
 8012cf6:	4a08      	ldr	r2, [pc, #32]	@ (8012d18 <CharToHexasc+0x3c>)
 8012cf8:	5c52      	ldrb	r2, [r2, r1]
 8012cfa:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8012cfc:	78fb      	ldrb	r3, [r7, #3]
 8012cfe:	f003 030f 	and.w	r3, r3, #15
 8012d02:	4a05      	ldr	r2, [pc, #20]	@ (8012d18 <CharToHexasc+0x3c>)
 8012d04:	5cd2      	ldrb	r2, [r2, r3]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	701a      	strb	r2, [r3, #0]
}
 8012d0a:	bf00      	nop
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	08022a08 	.word	0x08022a08

08012d1c <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b088      	sub	sp, #32
 8012d20:	af00      	add	r7, sp, #0
	adc_Disable();
 8012d22:	4830      	ldr	r0, [pc, #192]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d24:	f7f1 f8a7 	bl	8003e76 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8012d28:	f107 0314 	add.w	r3, r7, #20
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	601a      	str	r2, [r3, #0]
 8012d30:	605a      	str	r2, [r3, #4]
 8012d32:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8012d34:	4b2b      	ldr	r3, [pc, #172]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d36:	4a2c      	ldr	r2, [pc, #176]	@ (8012de8 <adc_InitOneShotMode+0xcc>)
 8012d38:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012d40:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012d42:	4b28      	ldr	r3, [pc, #160]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d44:	2200      	movs	r2, #0
 8012d46:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8012d48:	4b26      	ldr	r3, [pc, #152]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8012d4e:	4b25      	ldr	r3, [pc, #148]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d50:	2200      	movs	r2, #0
 8012d52:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012d54:	4b23      	ldr	r3, [pc, #140]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d56:	2200      	movs	r2, #0
 8012d58:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012d5c:	4b21      	ldr	r3, [pc, #132]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d5e:	2200      	movs	r2, #0
 8012d60:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012d62:	4b20      	ldr	r3, [pc, #128]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d64:	4a21      	ldr	r2, [pc, #132]	@ (8012dec <adc_InitOneShotMode+0xd0>)
 8012d66:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012d68:	4b1e      	ldr	r3, [pc, #120]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8012d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d70:	2201      	movs	r2, #1
 8012d72:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8012d74:	4b1b      	ldr	r3, [pc, #108]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d76:	2200      	movs	r2, #0
 8012d78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012d7c:	4b19      	ldr	r3, [pc, #100]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d7e:	2201      	movs	r2, #1
 8012d80:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012d82:	4818      	ldr	r0, [pc, #96]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d84:	f7f1 f834 	bl	8003df0 <HAL_ADC_Init>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d001      	beq.n	8012d92 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8012d8e:	f7f0 fa71 	bl	8003274 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012d96:	f107 0314 	add.w	r3, r7, #20
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	4811      	ldr	r0, [pc, #68]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012d9e:	f7f1 fc3b 	bl	8004618 <HAL_ADCEx_MultiModeConfigChannel>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d001      	beq.n	8012dac <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8012da8:	f7f0 fa64 	bl	8003274 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8012dac:	1d3b      	adds	r3, r7, #4
 8012dae:	2200      	movs	r2, #0
 8012db0:	601a      	str	r2, [r3, #0]
 8012db2:	605a      	str	r2, [r3, #4]
 8012db4:	609a      	str	r2, [r3, #8]
 8012db6:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8012db8:	230a      	movs	r3, #10
 8012dba:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8012dc0:	2302      	movs	r3, #2
 8012dc2:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012dc8:	1d3b      	adds	r3, r7, #4
 8012dca:	4619      	mov	r1, r3
 8012dcc:	4805      	ldr	r0, [pc, #20]	@ (8012de4 <adc_InitOneShotMode+0xc8>)
 8012dce:	f7f1 fa05 	bl	80041dc <HAL_ADC_ConfigChannel>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d001      	beq.n	8012ddc <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8012dd8:	f7f0 fa4c 	bl	8003274 <Error_Handler>
		  }



}
 8012ddc:	bf00      	nop
 8012dde:	3720      	adds	r7, #32
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	20001748 	.word	0x20001748
 8012de8:	40012000 	.word	0x40012000
 8012dec:	0f000001 	.word	0x0f000001

08012df0 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8012df4:	4802      	ldr	r0, [pc, #8]	@ (8012e00 <adc_Getval+0x10>)
 8012df6:	f7f1 f9e3 	bl	80041c0 <HAL_ADC_GetValue>
 8012dfa:	4603      	mov	r3, r0

}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	20001748 	.word	0x20001748
 8012e04:	00000000 	.word	0x00000000

08012e08 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8012e10:	f7ff ff84 	bl	8012d1c <adc_InitOneShotMode>
	HAL_Delay(1);
 8012e14:	2001      	movs	r0, #1
 8012e16:	f7f0 ff83 	bl	8003d20 <HAL_Delay>
	adc_Start();
 8012e1a:	4847      	ldr	r0, [pc, #284]	@ (8012f38 <adc_Measure+0x130>)
 8012e1c:	f7f1 f85e 	bl	8003edc <HAL_ADC_Start>
	HAL_Delay(1);
 8012e20:	2001      	movs	r0, #1
 8012e22:	f7f0 ff7d 	bl	8003d20 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012e26:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012e2a:	4843      	ldr	r0, [pc, #268]	@ (8012f38 <adc_Measure+0x130>)
 8012e2c:	f7f1 f93d 	bl	80040aa <HAL_ADC_PollForConversion>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d01d      	beq.n	8012e72 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8012e36:	2001      	movs	r0, #1
 8012e38:	f7f0 ff72 	bl	8003d20 <HAL_Delay>
		   adc_Start();
 8012e3c:	483e      	ldr	r0, [pc, #248]	@ (8012f38 <adc_Measure+0x130>)
 8012e3e:	f7f1 f84d 	bl	8003edc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012e42:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012e46:	483c      	ldr	r0, [pc, #240]	@ (8012f38 <adc_Measure+0x130>)
 8012e48:	f7f1 f92f 	bl	80040aa <HAL_ADC_PollForConversion>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00f      	beq.n	8012e72 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8012e52:	2001      	movs	r0, #1
 8012e54:	f7f0 ff64 	bl	8003d20 <HAL_Delay>
				adc_Start();
 8012e58:	4837      	ldr	r0, [pc, #220]	@ (8012f38 <adc_Measure+0x130>)
 8012e5a:	f7f1 f83f 	bl	8003edc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012e5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012e62:	4835      	ldr	r0, [pc, #212]	@ (8012f38 <adc_Measure+0x130>)
 8012e64:	f7f1 f921 	bl	80040aa <HAL_ADC_PollForConversion>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <adc_Measure+0x6a>
				{
					return 0;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e05a      	b.n	8012f28 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012e72:	4831      	ldr	r0, [pc, #196]	@ (8012f38 <adc_Measure+0x130>)
 8012e74:	f7f1 f8e6 	bl	8004044 <HAL_ADC_Stop>

	val = adc_Getval();
 8012e78:	f7ff ffba 	bl	8012df0 <adc_Getval>
 8012e7c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8012e7e:	2001      	movs	r0, #1
 8012e80:	f7f0 ff4e 	bl	8003d20 <HAL_Delay>
	adc_Start();
 8012e84:	482c      	ldr	r0, [pc, #176]	@ (8012f38 <adc_Measure+0x130>)
 8012e86:	f7f1 f829 	bl	8003edc <HAL_ADC_Start>
	HAL_Delay(1);
 8012e8a:	2001      	movs	r0, #1
 8012e8c:	f7f0 ff48 	bl	8003d20 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012e90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012e94:	4828      	ldr	r0, [pc, #160]	@ (8012f38 <adc_Measure+0x130>)
 8012e96:	f7f1 f908 	bl	80040aa <HAL_ADC_PollForConversion>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d01d      	beq.n	8012edc <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012ea0:	2001      	movs	r0, #1
 8012ea2:	f7f0 ff3d 	bl	8003d20 <HAL_Delay>
		   adc_Start();
 8012ea6:	4824      	ldr	r0, [pc, #144]	@ (8012f38 <adc_Measure+0x130>)
 8012ea8:	f7f1 f818 	bl	8003edc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012eac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012eb0:	4821      	ldr	r0, [pc, #132]	@ (8012f38 <adc_Measure+0x130>)
 8012eb2:	f7f1 f8fa 	bl	80040aa <HAL_ADC_PollForConversion>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d00f      	beq.n	8012edc <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8012ebc:	2001      	movs	r0, #1
 8012ebe:	f7f0 ff2f 	bl	8003d20 <HAL_Delay>
				adc_Start();
 8012ec2:	481d      	ldr	r0, [pc, #116]	@ (8012f38 <adc_Measure+0x130>)
 8012ec4:	f7f1 f80a 	bl	8003edc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012ec8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012ecc:	481a      	ldr	r0, [pc, #104]	@ (8012f38 <adc_Measure+0x130>)
 8012ece:	f7f1 f8ec 	bl	80040aa <HAL_ADC_PollForConversion>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d001      	beq.n	8012edc <adc_Measure+0xd4>
				{
					return 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	e025      	b.n	8012f28 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012edc:	4816      	ldr	r0, [pc, #88]	@ (8012f38 <adc_Measure+0x130>)
 8012ede:	f7f1 f8b1 	bl	8004044 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8012ee2:	f7ff ff85 	bl	8012df0 <adc_Getval>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4413      	add	r3, r2
 8012eec:	085b      	lsrs	r3, r3, #1
 8012eee:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	ee07 3a90 	vmov	s15, r3
 8012ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012efa:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8012f3c <adc_Measure+0x134>
 8012efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f02:	ee17 0a90 	vmov	r0, s15
 8012f06:	f7ed fb37 	bl	8000578 <__aeabi_f2d>
 8012f0a:	a309      	add	r3, pc, #36	@ (adr r3, 8012f30 <adc_Measure+0x128>)
 8012f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f10:	f7ed fb8a 	bl	8000628 <__aeabi_dmul>
 8012f14:	4602      	mov	r2, r0
 8012f16:	460b      	mov	r3, r1
 8012f18:	4610      	mov	r0, r2
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	f7ed fe7c 	bl	8000c18 <__aeabi_d2f>
 8012f20:	4602      	mov	r2, r0
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	601a      	str	r2, [r3, #0]


	return 1;
 8012f26:	2301      	movs	r3, #1


}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	851eb852 	.word	0x851eb852
 8012f34:	3ff451eb 	.word	0x3ff451eb
 8012f38:	20001748 	.word	0x20001748
 8012f3c:	3a533333 	.word	0x3a533333

08012f40 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8012f40:	b480      	push	{r7}
 8012f42:	b083      	sub	sp, #12
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	4603      	mov	r3, r0
 8012f48:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 8012f4a:	4a04      	ldr	r2, [pc, #16]	@ (8012f5c <init_driver+0x1c>)
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	7013      	strb	r3, [r2, #0]
}
 8012f50:	bf00      	nop
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5a:	4770      	bx	lr
 8012f5c:	20001aac 	.word	0x20001aac

08012f60 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 8012f66:	2300      	movs	r3, #0
 8012f68:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 8012f6e:	1d3b      	adds	r3, r7, #4
 8012f70:	4618      	mov	r0, r3
 8012f72:	f000 f8ab 	bl	80130cc <scd30_get_data_ready>
 8012f76:	4603      	mov	r3, r0
 8012f78:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8012f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d012      	beq.n	8012fa8 <scd30_await_data_ready+0x48>
        return local_error;
 8012f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f86:	e014      	b.n	8012fb2 <scd30_await_data_ready+0x52>
    }
    while (data_ready == 0) {
        sensirion_hal_sleep_us(100000);
 8012f88:	480c      	ldr	r0, [pc, #48]	@ (8012fbc <scd30_await_data_ready+0x5c>)
 8012f8a:	f000 fbb9 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
        local_error = scd30_get_data_ready(&data_ready);
 8012f8e:	1d3b      	adds	r3, r7, #4
 8012f90:	4618      	mov	r0, r3
 8012f92:	f000 f89b 	bl	80130cc <scd30_get_data_ready>
 8012f96:	4603      	mov	r3, r0
 8012f98:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 8012f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d002      	beq.n	8012fa8 <scd30_await_data_ready+0x48>
            return local_error;
 8012fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fa6:	e004      	b.n	8012fb2 <scd30_await_data_ready+0x52>
    while (data_ready == 0) {
 8012fa8:	88bb      	ldrh	r3, [r7, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d0ec      	beq.n	8012f88 <scd30_await_data_ready+0x28>
        }
    }
    return local_error;
 8012fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3708      	adds	r7, #8
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	000186a0 	.word	0x000186a0

08012fc0 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 8012fd0:	f7ff ffc6 	bl	8012f60 <scd30_await_data_ready>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8012fd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 8012fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fe4:	e008      	b.n	8012ff8 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	68b9      	ldr	r1, [r7, #8]
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f000 f8be 	bl	801316c <scd30_read_measurement_data>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	82fb      	strh	r3, [r7, #22]
    return local_error;
 8012ff4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3718      	adds	r7, #24
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 8013000:	b580      	push	{r7, lr}
 8013002:	b086      	sub	sp, #24
 8013004:	af00      	add	r7, sp, #0
 8013006:	4603      	mov	r3, r0
 8013008:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801300a:	2300      	movs	r3, #0
 801300c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801300e:	2300      	movs	r3, #0
 8013010:	60fb      	str	r3, [r7, #12]
 8013012:	2300      	movs	r3, #0
 8013014:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8013016:	2300      	movs	r3, #0
 8013018:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 801301a:	8ab9      	ldrh	r1, [r7, #20]
 801301c:	f107 030c 	add.w	r3, r7, #12
 8013020:	2210      	movs	r2, #16
 8013022:	4618      	mov	r0, r3
 8013024:	f000 fa2c 	bl	8013480 <sensirion_i2c_add_command_to_buffer>
 8013028:	4603      	mov	r3, r0
 801302a:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801302c:	88fa      	ldrh	r2, [r7, #6]
 801302e:	8ab9      	ldrh	r1, [r7, #20]
 8013030:	f107 030c 	add.w	r3, r7, #12
 8013034:	4618      	mov	r0, r3
 8013036:	f000 fa46 	bl	80134c6 <sensirion_i2c_add_uint16_t_to_buffer>
 801303a:	4603      	mov	r3, r0
 801303c:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801303e:	4b0b      	ldr	r3, [pc, #44]	@ (801306c <scd30_start_periodic_measurement+0x6c>)
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	8aba      	ldrh	r2, [r7, #20]
 8013044:	f107 010c 	add.w	r1, r7, #12
 8013048:	4618      	mov	r0, r3
 801304a:	f000 fa6c 	bl	8013526 <sensirion_i2c_write_data>
 801304e:	4603      	mov	r3, r0
 8013050:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8013052:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d002      	beq.n	8013060 <scd30_start_periodic_measurement+0x60>
        return local_error;
 801305a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801305e:	e001      	b.n	8013064 <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 8013060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8013064:	4618      	mov	r0, r3
 8013066:	3718      	adds	r7, #24
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	20001aac 	.word	0x20001aac

08013070 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8013076:	2300      	movs	r3, #0
 8013078:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 801307a:	2300      	movs	r3, #0
 801307c:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 801307e:	2300      	movs	r3, #0
 8013080:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 8013082:	88b9      	ldrh	r1, [r7, #4]
 8013084:	463b      	mov	r3, r7
 8013086:	f44f 7282 	mov.w	r2, #260	@ 0x104
 801308a:	4618      	mov	r0, r3
 801308c:	f000 f9f8 	bl	8013480 <sensirion_i2c_add_command_to_buffer>
 8013090:	4603      	mov	r3, r0
 8013092:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8013094:	4b0c      	ldr	r3, [pc, #48]	@ (80130c8 <scd30_stop_periodic_measurement+0x58>)
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	88ba      	ldrh	r2, [r7, #4]
 801309a:	4639      	mov	r1, r7
 801309c:	4618      	mov	r0, r3
 801309e:	f000 fa42 	bl	8013526 <sensirion_i2c_write_data>
 80130a2:	4603      	mov	r3, r0
 80130a4:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 80130a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d002      	beq.n	80130b4 <scd30_stop_periodic_measurement+0x44>
        return local_error;
 80130ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130b2:	e005      	b.n	80130c0 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80130b4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80130b8:	f000 fb22 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80130bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	20001aac 	.word	0x20001aac

080130cc <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80130d4:	2300      	movs	r3, #0
 80130d6:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80130d8:	4b22      	ldr	r3, [pc, #136]	@ (8013164 <scd30_get_data_ready+0x98>)
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	813b      	strh	r3, [r7, #8]
 80130de:	2300      	movs	r3, #0
 80130e0:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80130e2:	2300      	movs	r3, #0
 80130e4:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 80130e6:	89b9      	ldrh	r1, [r7, #12]
 80130e8:	f107 0308 	add.w	r3, r7, #8
 80130ec:	f240 2202 	movw	r2, #514	@ 0x202
 80130f0:	4618      	mov	r0, r3
 80130f2:	f000 f9c5 	bl	8013480 <sensirion_i2c_add_command_to_buffer>
 80130f6:	4603      	mov	r3, r0
 80130f8:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80130fa:	4b1b      	ldr	r3, [pc, #108]	@ (8013168 <scd30_get_data_ready+0x9c>)
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	89ba      	ldrh	r2, [r7, #12]
 8013100:	f107 0108 	add.w	r1, r7, #8
 8013104:	4618      	mov	r0, r3
 8013106:	f000 fa0e 	bl	8013526 <sensirion_i2c_write_data>
 801310a:	4603      	mov	r3, r0
 801310c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801310e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <scd30_get_data_ready+0x50>
        return local_error;
 8013116:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801311a:	e01f      	b.n	801315c <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801311c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8013120:	f000 faee 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8013124:	4b10      	ldr	r3, [pc, #64]	@ (8013168 <scd30_get_data_ready+0x9c>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	f107 0108 	add.w	r1, r7, #8
 801312c:	2202      	movs	r2, #2
 801312e:	4618      	mov	r0, r3
 8013130:	f000 fa0c 	bl	801354c <sensirion_i2c_read_data_inplace>
 8013134:	4603      	mov	r3, r0
 8013136:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8013138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d002      	beq.n	8013146 <scd30_get_data_ready+0x7a>
        return local_error;
 8013140:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013144:	e00a      	b.n	801315c <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8013146:	f107 0308 	add.w	r3, r7, #8
 801314a:	4618      	mov	r0, r3
 801314c:	f000 f906 	bl	801335c <sensirion_common_bytes_to_uint16_t>
 8013150:	4603      	mov	r3, r0
 8013152:	461a      	mov	r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	801a      	strh	r2, [r3, #0]
    return local_error;
 8013158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	080221b4 	.word	0x080221b4
 8013168:	20001aac 	.word	0x20001aac

0801316c <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 801316c:	b580      	push	{r7, lr}
 801316e:	b08a      	sub	sp, #40	@ 0x28
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 8013178:	2300      	movs	r3, #0
 801317a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 801317c:	2300      	movs	r3, #0
 801317e:	613b      	str	r3, [r7, #16]
 8013180:	f107 0314 	add.w	r3, r7, #20
 8013184:	2200      	movs	r2, #0
 8013186:	601a      	str	r2, [r3, #0]
 8013188:	605a      	str	r2, [r3, #4]
 801318a:	609a      	str	r2, [r3, #8]
 801318c:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 8013192:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8013194:	f107 0310 	add.w	r3, r7, #16
 8013198:	f44f 7240 	mov.w	r2, #768	@ 0x300
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f96f 	bl	8013480 <sensirion_i2c_add_command_to_buffer>
 80131a2:	4603      	mov	r3, r0
 80131a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80131a6:	4b26      	ldr	r3, [pc, #152]	@ (8013240 <scd30_read_measurement_data+0xd4>)
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80131ac:	f107 0110 	add.w	r1, r7, #16
 80131b0:	4618      	mov	r0, r3
 80131b2:	f000 f9b8 	bl	8013526 <sensirion_i2c_write_data>
 80131b6:	4603      	mov	r3, r0
 80131b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80131ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d002      	beq.n	80131c8 <scd30_read_measurement_data+0x5c>
        return local_error;
 80131c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80131c6:	e036      	b.n	8013236 <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80131c8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80131cc:	f000 fa98 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 80131d0:	4b1b      	ldr	r3, [pc, #108]	@ (8013240 <scd30_read_measurement_data+0xd4>)
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	f107 0110 	add.w	r1, r7, #16
 80131d8:	220c      	movs	r2, #12
 80131da:	4618      	mov	r0, r3
 80131dc:	f000 f9b6 	bl	801354c <sensirion_i2c_read_data_inplace>
 80131e0:	4603      	mov	r3, r0
 80131e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80131e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <scd30_read_measurement_data+0x86>
        return local_error;
 80131ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80131f0:	e021      	b.n	8013236 <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 80131f2:	f107 0310 	add.w	r3, r7, #16
 80131f6:	4618      	mov	r0, r3
 80131f8:	f000 f8e0 	bl	80133bc <sensirion_common_bytes_to_float>
 80131fc:	eef0 7a40 	vmov.f32	s15, s0
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 8013206:	f107 0310 	add.w	r3, r7, #16
 801320a:	3304      	adds	r3, #4
 801320c:	4618      	mov	r0, r3
 801320e:	f000 f8d5 	bl	80133bc <sensirion_common_bytes_to_float>
 8013212:	eef0 7a40 	vmov.f32	s15, s0
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 801321c:	f107 0310 	add.w	r3, r7, #16
 8013220:	3308      	adds	r3, #8
 8013222:	4618      	mov	r0, r3
 8013224:	f000 f8ca 	bl	80133bc <sensirion_common_bytes_to_float>
 8013228:	eef0 7a40 	vmov.f32	s15, s0
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 8013232:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8013236:	4618      	mov	r0, r3
 8013238:	3728      	adds	r7, #40	@ 0x28
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	20001aac 	.word	0x20001aac

08013244 <scd30_force_recalibration>:
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 8013244:	b580      	push	{r7, lr}
 8013246:	b086      	sub	sp, #24
 8013248:	af00      	add	r7, sp, #0
 801324a:	4603      	mov	r3, r0
 801324c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801324e:	2300      	movs	r3, #0
 8013250:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8013252:	2300      	movs	r3, #0
 8013254:	60fb      	str	r3, [r7, #12]
 8013256:	2300      	movs	r3, #0
 8013258:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801325a:	2300      	movs	r3, #0
 801325c:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 801325e:	8ab9      	ldrh	r1, [r7, #20]
 8013260:	f107 030c 	add.w	r3, r7, #12
 8013264:	f245 2204 	movw	r2, #20996	@ 0x5204
 8013268:	4618      	mov	r0, r3
 801326a:	f000 f909 	bl	8013480 <sensirion_i2c_add_command_to_buffer>
 801326e:	4603      	mov	r3, r0
 8013270:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8013272:	88fa      	ldrh	r2, [r7, #6]
 8013274:	8ab9      	ldrh	r1, [r7, #20]
 8013276:	f107 030c 	add.w	r3, r7, #12
 801327a:	4618      	mov	r0, r3
 801327c:	f000 f923 	bl	80134c6 <sensirion_i2c_add_uint16_t_to_buffer>
 8013280:	4603      	mov	r3, r0
 8013282:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8013284:	4b0d      	ldr	r3, [pc, #52]	@ (80132bc <scd30_force_recalibration+0x78>)
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	8aba      	ldrh	r2, [r7, #20]
 801328a:	f107 010c 	add.w	r1, r7, #12
 801328e:	4618      	mov	r0, r3
 8013290:	f000 f949 	bl	8013526 <sensirion_i2c_write_data>
 8013294:	4603      	mov	r3, r0
 8013296:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8013298:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d002      	beq.n	80132a6 <scd30_force_recalibration+0x62>
        return local_error;
 80132a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80132a4:	e005      	b.n	80132b2 <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80132a6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80132aa:	f000 fa29 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80132ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3718      	adds	r7, #24
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20001aac 	.word	0x20001aac

080132c0 <scd30_read_firmware_version>:
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
    return local_error;
}

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80132ca:	2300      	movs	r3, #0
 80132cc:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80132ce:	4b21      	ldr	r3, [pc, #132]	@ (8013354 <scd30_read_firmware_version+0x94>)
 80132d0:	881b      	ldrh	r3, [r3, #0]
 80132d2:	813b      	strh	r3, [r7, #8]
 80132d4:	2300      	movs	r3, #0
 80132d6:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80132d8:	2300      	movs	r3, #0
 80132da:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 80132dc:	89b9      	ldrh	r1, [r7, #12]
 80132de:	f107 0308 	add.w	r3, r7, #8
 80132e2:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 f8ca 	bl	8013480 <sensirion_i2c_add_command_to_buffer>
 80132ec:	4603      	mov	r3, r0
 80132ee:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80132f0:	4b19      	ldr	r3, [pc, #100]	@ (8013358 <scd30_read_firmware_version+0x98>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	89ba      	ldrh	r2, [r7, #12]
 80132f6:	f107 0108 	add.w	r1, r7, #8
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 f913 	bl	8013526 <sensirion_i2c_write_data>
 8013300:	4603      	mov	r3, r0
 8013302:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8013304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <scd30_read_firmware_version+0x52>
        return local_error;
 801330c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013310:	e01c      	b.n	801334c <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8013312:	f242 7010 	movw	r0, #10000	@ 0x2710
 8013316:	f000 f9f3 	bl	8013700 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801331a:	4b0f      	ldr	r3, [pc, #60]	@ (8013358 <scd30_read_firmware_version+0x98>)
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	f107 0108 	add.w	r1, r7, #8
 8013322:	2202      	movs	r2, #2
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f911 	bl	801354c <sensirion_i2c_read_data_inplace>
 801332a:	4603      	mov	r3, r0
 801332c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801332e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d002      	beq.n	801333c <scd30_read_firmware_version+0x7c>
        return local_error;
 8013336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801333a:	e007      	b.n	801334c <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 801333c:	7a3a      	ldrb	r2, [r7, #8]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8013342:	7a7a      	ldrb	r2, [r7, #9]
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	701a      	strb	r2, [r3, #0]
    return local_error;
 8013348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801334c:	4618      	mov	r0, r3
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	080221b4 	.word	0x080221b4
 8013358:	20001aac 	.word	0x20001aac

0801335c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	021b      	lsls	r3, r3, #8
 801336a:	b21a      	sxth	r2, r3
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	3301      	adds	r3, #1
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	b21b      	sxth	r3, r3
 8013374:	4313      	orrs	r3, r2
 8013376:	b21b      	sxth	r3, r3
 8013378:	b29b      	uxth	r3, r3
}
 801337a:	4618      	mov	r0, r3
 801337c:	370c      	adds	r7, #12
 801337e:	46bd      	mov	sp, r7
 8013380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013384:	4770      	bx	lr

08013386 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8013386:	b480      	push	{r7}
 8013388:	b083      	sub	sp, #12
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	061a      	lsls	r2, r3, #24
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3301      	adds	r3, #1
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	041b      	lsls	r3, r3, #16
 801339c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3302      	adds	r3, #2
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80133a6:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	3203      	adds	r2, #3
 80133ac:	7812      	ldrb	r2, [r2, #0]
 80133ae:	4313      	orrs	r3, r2
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	370c      	adds	r7, #12
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr

080133bc <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f7ff ffde 	bl	8013386 <sensirion_common_bytes_to_uint32_t>
 80133ca:	4603      	mov	r3, r0
 80133cc:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	ee07 3a90 	vmov	s15, r3
}
 80133d4:	eeb0 0a67 	vmov.f32	s0, s15
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}

080133de <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80133de:	b480      	push	{r7}
 80133e0:	b085      	sub	sp, #20
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
 80133e6:	460b      	mov	r3, r1
 80133e8:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80133ea:	23ff      	movs	r3, #255	@ 0xff
 80133ec:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80133ee:	2300      	movs	r3, #0
 80133f0:	81fb      	strh	r3, [r7, #14]
 80133f2:	e021      	b.n	8013438 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80133f4:	89fb      	ldrh	r3, [r7, #14]
 80133f6:	687a      	ldr	r2, [r7, #4]
 80133f8:	4413      	add	r3, r2
 80133fa:	781a      	ldrb	r2, [r3, #0]
 80133fc:	7b7b      	ldrb	r3, [r7, #13]
 80133fe:	4053      	eors	r3, r2
 8013400:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8013402:	2308      	movs	r3, #8
 8013404:	733b      	strb	r3, [r7, #12]
 8013406:	e011      	b.n	801342c <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8013408:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801340c:	2b00      	cmp	r3, #0
 801340e:	da07      	bge.n	8013420 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8013410:	7b7b      	ldrb	r3, [r7, #13]
 8013412:	005b      	lsls	r3, r3, #1
 8013414:	b25b      	sxtb	r3, r3
 8013416:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 801341a:	b25b      	sxtb	r3, r3
 801341c:	737b      	strb	r3, [r7, #13]
 801341e:	e002      	b.n	8013426 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8013420:	7b7b      	ldrb	r3, [r7, #13]
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8013426:	7b3b      	ldrb	r3, [r7, #12]
 8013428:	3b01      	subs	r3, #1
 801342a:	733b      	strb	r3, [r7, #12]
 801342c:	7b3b      	ldrb	r3, [r7, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d1ea      	bne.n	8013408 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8013432:	89fb      	ldrh	r3, [r7, #14]
 8013434:	3301      	adds	r3, #1
 8013436:	81fb      	strh	r3, [r7, #14]
 8013438:	89fa      	ldrh	r2, [r7, #14]
 801343a:	887b      	ldrh	r3, [r7, #2]
 801343c:	429a      	cmp	r2, r3
 801343e:	d3d9      	bcc.n	80133f4 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8013440:	7b7b      	ldrb	r3, [r7, #13]
}
 8013442:	4618      	mov	r0, r3
 8013444:	3714      	adds	r7, #20
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr

0801344e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 801344e:	b580      	push	{r7, lr}
 8013450:	b082      	sub	sp, #8
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
 8013456:	460b      	mov	r3, r1
 8013458:	807b      	strh	r3, [r7, #2]
 801345a:	4613      	mov	r3, r2
 801345c:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 801345e:	887b      	ldrh	r3, [r7, #2]
 8013460:	4619      	mov	r1, r3
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff ffbb 	bl	80133de <sensirion_i2c_generate_crc>
 8013468:	4603      	mov	r3, r0
 801346a:	461a      	mov	r2, r3
 801346c:	787b      	ldrb	r3, [r7, #1]
 801346e:	4293      	cmp	r3, r2
 8013470:	d001      	beq.n	8013476 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8013472:	2301      	movs	r3, #1
 8013474:	e000      	b.n	8013478 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8013476:	2300      	movs	r3, #0
}
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8013480:	b480      	push	{r7}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	460b      	mov	r3, r1
 801348a:	807b      	strh	r3, [r7, #2]
 801348c:	4613      	mov	r3, r2
 801348e:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8013490:	883b      	ldrh	r3, [r7, #0]
 8013492:	0a1b      	lsrs	r3, r3, #8
 8013494:	b29a      	uxth	r2, r3
 8013496:	887b      	ldrh	r3, [r7, #2]
 8013498:	1c59      	adds	r1, r3, #1
 801349a:	8079      	strh	r1, [r7, #2]
 801349c:	4619      	mov	r1, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	440b      	add	r3, r1
 80134a2:	b2d2      	uxtb	r2, r2
 80134a4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 80134a6:	887b      	ldrh	r3, [r7, #2]
 80134a8:	1c5a      	adds	r2, r3, #1
 80134aa:	807a      	strh	r2, [r7, #2]
 80134ac:	461a      	mov	r2, r3
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4413      	add	r3, r2
 80134b2:	883a      	ldrh	r2, [r7, #0]
 80134b4:	b2d2      	uxtb	r2, r2
 80134b6:	701a      	strb	r2, [r3, #0]
    return offset;
 80134b8:	887b      	ldrh	r3, [r7, #2]
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	370c      	adds	r7, #12
 80134be:	46bd      	mov	sp, r7
 80134c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c4:	4770      	bx	lr

080134c6 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 80134c6:	b590      	push	{r4, r7, lr}
 80134c8:	b083      	sub	sp, #12
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
 80134ce:	460b      	mov	r3, r1
 80134d0:	807b      	strh	r3, [r7, #2]
 80134d2:	4613      	mov	r3, r2
 80134d4:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80134d6:	883b      	ldrh	r3, [r7, #0]
 80134d8:	0a1b      	lsrs	r3, r3, #8
 80134da:	b29a      	uxth	r2, r3
 80134dc:	887b      	ldrh	r3, [r7, #2]
 80134de:	1c59      	adds	r1, r3, #1
 80134e0:	8079      	strh	r1, [r7, #2]
 80134e2:	4619      	mov	r1, r3
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	440b      	add	r3, r1
 80134e8:	b2d2      	uxtb	r2, r2
 80134ea:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 80134ec:	887b      	ldrh	r3, [r7, #2]
 80134ee:	1c5a      	adds	r2, r3, #1
 80134f0:	807a      	strh	r2, [r7, #2]
 80134f2:	461a      	mov	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	4413      	add	r3, r2
 80134f8:	883a      	ldrh	r2, [r7, #0]
 80134fa:	b2d2      	uxtb	r2, r2
 80134fc:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 80134fe:	887b      	ldrh	r3, [r7, #2]
 8013500:	3b02      	subs	r3, #2
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8013506:	887b      	ldrh	r3, [r7, #2]
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	18d4      	adds	r4, r2, r3
 801350c:	2102      	movs	r1, #2
 801350e:	f7ff ff66 	bl	80133de <sensirion_i2c_generate_crc>
 8013512:	4603      	mov	r3, r0
 8013514:	7023      	strb	r3, [r4, #0]
    offset++;
 8013516:	887b      	ldrh	r3, [r7, #2]
 8013518:	3301      	adds	r3, #1
 801351a:	807b      	strh	r3, [r7, #2]

    return offset;
 801351c:	887b      	ldrh	r3, [r7, #2]
}
 801351e:	4618      	mov	r0, r3
 8013520:	370c      	adds	r7, #12
 8013522:	46bd      	mov	sp, r7
 8013524:	bd90      	pop	{r4, r7, pc}

08013526 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8013526:	b580      	push	{r7, lr}
 8013528:	b082      	sub	sp, #8
 801352a:	af00      	add	r7, sp, #0
 801352c:	4603      	mov	r3, r0
 801352e:	6039      	str	r1, [r7, #0]
 8013530:	71fb      	strb	r3, [r7, #7]
 8013532:	4613      	mov	r3, r2
 8013534:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8013536:	88ba      	ldrh	r2, [r7, #4]
 8013538:	79fb      	ldrb	r3, [r7, #7]
 801353a:	6839      	ldr	r1, [r7, #0]
 801353c:	4618      	mov	r0, r3
 801353e:	f000 f8c3 	bl	80136c8 <sensirion_i2c_hal_write>
 8013542:	4603      	mov	r3, r0
}
 8013544:	4618      	mov	r0, r3
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	6039      	str	r1, [r7, #0]
 8013556:	71fb      	strb	r3, [r7, #7]
 8013558:	4613      	mov	r3, r2
 801355a:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 801355c:	88bb      	ldrh	r3, [r7, #4]
 801355e:	085b      	lsrs	r3, r3, #1
 8013560:	b29b      	uxth	r3, r3
 8013562:	461a      	mov	r2, r3
 8013564:	0052      	lsls	r2, r2, #1
 8013566:	4413      	add	r3, r2
 8013568:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 801356a:	88bb      	ldrh	r3, [r7, #4]
 801356c:	f003 0301 	and.w	r3, r3, #1
 8013570:	b29b      	uxth	r3, r3
 8013572:	2b00      	cmp	r3, #0
 8013574:	d001      	beq.n	801357a <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8013576:	2304      	movs	r3, #4
 8013578:	e047      	b.n	801360a <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 801357a:	897a      	ldrh	r2, [r7, #10]
 801357c:	79fb      	ldrb	r3, [r7, #7]
 801357e:	6839      	ldr	r1, [r7, #0]
 8013580:	4618      	mov	r0, r3
 8013582:	f000 f885 	bl	8013690 <sensirion_i2c_hal_read>
 8013586:	4603      	mov	r3, r0
 8013588:	813b      	strh	r3, [r7, #8]
    if (error) {
 801358a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d002      	beq.n	8013598 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8013592:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013596:	e038      	b.n	801360a <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8013598:	2300      	movs	r3, #0
 801359a:	81fb      	strh	r3, [r7, #14]
 801359c:	2300      	movs	r3, #0
 801359e:	81bb      	strh	r3, [r7, #12]
 80135a0:	e02e      	b.n	8013600 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80135a2:	89fb      	ldrh	r3, [r7, #14]
 80135a4:	683a      	ldr	r2, [r7, #0]
 80135a6:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80135a8:	89fb      	ldrh	r3, [r7, #14]
 80135aa:	3302      	adds	r3, #2
 80135ac:	683a      	ldr	r2, [r7, #0]
 80135ae:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	461a      	mov	r2, r3
 80135b4:	2102      	movs	r1, #2
 80135b6:	f7ff ff4a 	bl	801344e <sensirion_i2c_check_crc>
 80135ba:	4603      	mov	r3, r0
 80135bc:	813b      	strh	r3, [r7, #8]
        if (error) {
 80135be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d002      	beq.n	80135cc <sensirion_i2c_read_data_inplace+0x80>
            return error;
 80135c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80135ca:	e01e      	b.n	801360a <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80135cc:	89fb      	ldrh	r3, [r7, #14]
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	441a      	add	r2, r3
 80135d2:	89bb      	ldrh	r3, [r7, #12]
 80135d4:	1c59      	adds	r1, r3, #1
 80135d6:	81b9      	strh	r1, [r7, #12]
 80135d8:	4619      	mov	r1, r3
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	440b      	add	r3, r1
 80135de:	7812      	ldrb	r2, [r2, #0]
 80135e0:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80135e2:	89fb      	ldrh	r3, [r7, #14]
 80135e4:	3301      	adds	r3, #1
 80135e6:	683a      	ldr	r2, [r7, #0]
 80135e8:	441a      	add	r2, r3
 80135ea:	89bb      	ldrh	r3, [r7, #12]
 80135ec:	1c59      	adds	r1, r3, #1
 80135ee:	81b9      	strh	r1, [r7, #12]
 80135f0:	4619      	mov	r1, r3
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	440b      	add	r3, r1
 80135f6:	7812      	ldrb	r2, [r2, #0]
 80135f8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80135fa:	89fb      	ldrh	r3, [r7, #14]
 80135fc:	3303      	adds	r3, #3
 80135fe:	81fb      	strh	r3, [r7, #14]
 8013600:	89fa      	ldrh	r2, [r7, #14]
 8013602:	897b      	ldrh	r3, [r7, #10]
 8013604:	429a      	cmp	r2, r3
 8013606:	d3cc      	bcc.n	80135a2 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8013608:	2300      	movs	r3, #0
}
 801360a:	4618      	mov	r0, r3
 801360c:	3710      	adds	r7, #16
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
	...

08013614 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8013614:	b580      	push	{r7, lr}
 8013616:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8013618:	4814      	ldr	r0, [pc, #80]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 801361a:	f7f2 fccf 	bl	8005fbc <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 801361e:	4b13      	ldr	r3, [pc, #76]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013620:	4a13      	ldr	r2, [pc, #76]	@ (8013670 <sensirion_i2c_hal_init+0x5c>)
 8013622:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8013624:	4b11      	ldr	r3, [pc, #68]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013626:	4a13      	ldr	r2, [pc, #76]	@ (8013674 <sensirion_i2c_hal_init+0x60>)
 8013628:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801362a:	4b10      	ldr	r3, [pc, #64]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 801362c:	2200      	movs	r2, #0
 801362e:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8013630:	4b0e      	ldr	r3, [pc, #56]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013632:	2200      	movs	r2, #0
 8013634:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013636:	4b0d      	ldr	r3, [pc, #52]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013638:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801363c:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801363e:	4b0b      	ldr	r3, [pc, #44]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013640:	2200      	movs	r2, #0
 8013642:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8013644:	4b09      	ldr	r3, [pc, #36]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013646:	2200      	movs	r2, #0
 8013648:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801364a:	4b08      	ldr	r3, [pc, #32]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 801364c:	2200      	movs	r2, #0
 801364e:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013650:	4b06      	ldr	r3, [pc, #24]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013652:	2200      	movs	r2, #0
 8013654:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013656:	4805      	ldr	r0, [pc, #20]	@ (801366c <sensirion_i2c_hal_init+0x58>)
 8013658:	f7f2 fb6c 	bl	8005d34 <HAL_I2C_Init>
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	d001      	beq.n	8013666 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8013662:	f7ef fe07 	bl	8003274 <Error_Handler>
	  }
}
 8013666:	bf00      	nop
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	20001790 	.word	0x20001790
 8013670:	40005400 	.word	0x40005400
 8013674:	000186a0 	.word	0x000186a0

08013678 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8013678:	b580      	push	{r7, lr}
 801367a:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 801367c:	4803      	ldr	r0, [pc, #12]	@ (801368c <sensirion_i2c_hal_free+0x14>)
 801367e:	f7f2 fc9d 	bl	8005fbc <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8013682:	4802      	ldr	r0, [pc, #8]	@ (801368c <sensirion_i2c_hal_free+0x14>)
 8013684:	f7ef fed0 	bl	8003428 <HAL_I2C_MspDeInit>
}
 8013688:	bf00      	nop
 801368a:	bd80      	pop	{r7, pc}
 801368c:	20001790 	.word	0x20001790

08013690 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af02      	add	r7, sp, #8
 8013696:	4603      	mov	r3, r0
 8013698:	6039      	str	r1, [r7, #0]
 801369a:	71fb      	strb	r3, [r7, #7]
 801369c:	4613      	mov	r3, r2
 801369e:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 80136a0:	79fb      	ldrb	r3, [r7, #7]
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	005b      	lsls	r3, r3, #1
 80136a6:	b299      	uxth	r1, r3
 80136a8:	88bb      	ldrh	r3, [r7, #4]
 80136aa:	f04f 32ff 	mov.w	r2, #4294967295
 80136ae:	9200      	str	r2, [sp, #0]
 80136b0:	683a      	ldr	r2, [r7, #0]
 80136b2:	4804      	ldr	r0, [pc, #16]	@ (80136c4 <sensirion_i2c_hal_read+0x34>)
 80136b4:	f7f2 fdb0 	bl	8006218 <HAL_I2C_Master_Receive>
 80136b8:	4603      	mov	r3, r0
 80136ba:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	20001790 	.word	0x20001790

080136c8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b084      	sub	sp, #16
 80136cc:	af02      	add	r7, sp, #8
 80136ce:	4603      	mov	r3, r0
 80136d0:	6039      	str	r1, [r7, #0]
 80136d2:	71fb      	strb	r3, [r7, #7]
 80136d4:	4613      	mov	r3, r2
 80136d6:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 80136d8:	79fb      	ldrb	r3, [r7, #7]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	b299      	uxth	r1, r3
 80136e0:	88bb      	ldrh	r3, [r7, #4]
 80136e2:	f04f 32ff 	mov.w	r2, #4294967295
 80136e6:	9200      	str	r2, [sp, #0]
 80136e8:	683a      	ldr	r2, [r7, #0]
 80136ea:	4804      	ldr	r0, [pc, #16]	@ (80136fc <sensirion_i2c_hal_write+0x34>)
 80136ec:	f7f2 fc96 	bl	800601c <HAL_I2C_Master_Transmit>
 80136f0:	4603      	mov	r3, r0
 80136f2:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	20001790 	.word	0x20001790

08013700 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	4a0d      	ldr	r2, [pc, #52]	@ (8013740 <sensirion_i2c_hal_sleep_usec+0x40>)
 801370c:	fba2 2303 	umull	r2, r3, r2, r3
 8013710:	099b      	lsrs	r3, r3, #6
 8013712:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	4b0a      	ldr	r3, [pc, #40]	@ (8013740 <sensirion_i2c_hal_sleep_usec+0x40>)
 8013718:	fba3 1302 	umull	r1, r3, r3, r2
 801371c:	099b      	lsrs	r3, r3, #6
 801371e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013722:	fb01 f303 	mul.w	r3, r1, r3
 8013726:	1ad3      	subs	r3, r2, r3
 8013728:	2b00      	cmp	r3, #0
 801372a:	d002      	beq.n	8013732 <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	3301      	adds	r3, #1
 8013730:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 8013732:	68f8      	ldr	r0, [r7, #12]
 8013734:	f7f0 faf4 	bl	8003d20 <HAL_Delay>
}
 8013738:	bf00      	nop
 801373a:	3710      	adds	r7, #16
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	10624dd3 	.word	0x10624dd3

08013744 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	061a      	lsls	r2, r3, #24
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	3301      	adds	r3, #1
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	041b      	lsls	r3, r3, #16
 801375a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	3302      	adds	r3, #2
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013764:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013766:	687a      	ldr	r2, [r7, #4]
 8013768:	3203      	adds	r2, #3
 801376a:	7812      	ldrb	r2, [r2, #0]
 801376c:	4313      	orrs	r3, r2
}
 801376e:	4618      	mov	r0, r3
 8013770:	370c      	adds	r7, #12
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr

0801377a <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 801377a:	b580      	push	{r7, lr}
 801377c:	b084      	sub	sp, #16
 801377e:	af00      	add	r7, sp, #0
 8013780:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7ff ffde 	bl	8013744 <sensirion_bytes_to_uint32_t>
 8013788:	4603      	mov	r3, r0
 801378a:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	ee07 3a90 	vmov	s15, r3
}
 8013792:	eeb0 0a67 	vmov.f32	s0, s15
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	4603      	mov	r3, r0
 80137a4:	603a      	str	r2, [r7, #0]
 80137a6:	71fb      	strb	r3, [r7, #7]
 80137a8:	460b      	mov	r3, r1
 80137aa:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 80137ac:	79fa      	ldrb	r2, [r7, #7]
 80137ae:	79bb      	ldrb	r3, [r7, #6]
 80137b0:	4413      	add	r3, r2
 80137b2:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 80137b4:	e006      	b.n	80137c4 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	1c5a      	adds	r2, r3, #1
 80137ba:	603a      	str	r2, [r7, #0]
 80137bc:	781a      	ldrb	r2, [r3, #0]
 80137be:	79fb      	ldrb	r3, [r7, #7]
 80137c0:	4413      	add	r3, r2
 80137c2:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 80137c4:	79bb      	ldrb	r3, [r7, #6]
 80137c6:	1e5a      	subs	r2, r3, #1
 80137c8:	71ba      	strb	r2, [r7, #6]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d1f3      	bne.n	80137b6 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 80137ce:	79fb      	ldrb	r3, [r7, #7]
 80137d0:	43db      	mvns	r3, r3
 80137d2:	b2db      	uxtb	r3, r3
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 80137e0:	b480      	push	{r7}
 80137e2:	b087      	sub	sp, #28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	4603      	mov	r3, r0
 80137e8:	60b9      	str	r1, [r7, #8]
 80137ea:	607a      	str	r2, [r7, #4]
 80137ec:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80137ee:	2300      	movs	r3, #0
 80137f0:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80137f2:	e026      	b.n	8013842 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	1c5a      	adds	r2, r3, #1
 80137f8:	60ba      	str	r2, [r7, #8]
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80137fe:	7d7b      	ldrb	r3, [r7, #21]
 8013800:	2b7e      	cmp	r3, #126	@ 0x7e
 8013802:	dc16      	bgt.n	8013832 <sensirion_shdlc_stuff_data+0x52>
 8013804:	2b7d      	cmp	r3, #125	@ 0x7d
 8013806:	da03      	bge.n	8013810 <sensirion_shdlc_stuff_data+0x30>
 8013808:	2b11      	cmp	r3, #17
 801380a:	d001      	beq.n	8013810 <sensirion_shdlc_stuff_data+0x30>
 801380c:	2b13      	cmp	r3, #19
 801380e:	d110      	bne.n	8013832 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	1c5a      	adds	r2, r3, #1
 8013814:	607a      	str	r2, [r7, #4]
 8013816:	227d      	movs	r2, #125	@ 0x7d
 8013818:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	1c5a      	adds	r2, r3, #1
 801381e:	607a      	str	r2, [r7, #4]
 8013820:	7d7a      	ldrb	r2, [r7, #21]
 8013822:	f082 0220 	eor.w	r2, r2, #32
 8013826:	b2d2      	uxtb	r2, r2
 8013828:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 801382a:	8afb      	ldrh	r3, [r7, #22]
 801382c:	3302      	adds	r3, #2
 801382e:	82fb      	strh	r3, [r7, #22]
                break;
 8013830:	e007      	b.n	8013842 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	1c5a      	adds	r2, r3, #1
 8013836:	607a      	str	r2, [r7, #4]
 8013838:	7d7a      	ldrb	r2, [r7, #21]
 801383a:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 801383c:	8afb      	ldrh	r3, [r7, #22]
 801383e:	3301      	adds	r3, #1
 8013840:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8013842:	7bfb      	ldrb	r3, [r7, #15]
 8013844:	1e5a      	subs	r2, r3, #1
 8013846:	73fa      	strb	r2, [r7, #15]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d1d3      	bne.n	80137f4 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 801384c:	8afb      	ldrh	r3, [r7, #22]
}
 801384e:	4618      	mov	r0, r3
 8013850:	371c      	adds	r7, #28
 8013852:	46bd      	mov	sp, r7
 8013854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013858:	4770      	bx	lr

0801385a <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 801385a:	b480      	push	{r7}
 801385c:	b083      	sub	sp, #12
 801385e:	af00      	add	r7, sp, #0
 8013860:	4603      	mov	r3, r0
 8013862:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8013864:	79fb      	ldrb	r3, [r7, #7]
 8013866:	2b7d      	cmp	r3, #125	@ 0x7d
 8013868:	bf0c      	ite	eq
 801386a:	2301      	moveq	r3, #1
 801386c:	2300      	movne	r3, #0
 801386e:	b2db      	uxtb	r3, r3
}
 8013870:	4618      	mov	r0, r3
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr

0801387c <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 801387c:	b480      	push	{r7}
 801387e:	b083      	sub	sp, #12
 8013880:	af00      	add	r7, sp, #0
 8013882:	4603      	mov	r3, r0
 8013884:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8013886:	79fb      	ldrb	r3, [r7, #7]
 8013888:	2b5e      	cmp	r3, #94	@ 0x5e
 801388a:	d010      	beq.n	80138ae <sensirion_shdlc_unstuff_byte+0x32>
 801388c:	2b5e      	cmp	r3, #94	@ 0x5e
 801388e:	dc10      	bgt.n	80138b2 <sensirion_shdlc_unstuff_byte+0x36>
 8013890:	2b5d      	cmp	r3, #93	@ 0x5d
 8013892:	d00a      	beq.n	80138aa <sensirion_shdlc_unstuff_byte+0x2e>
 8013894:	2b5d      	cmp	r3, #93	@ 0x5d
 8013896:	dc0c      	bgt.n	80138b2 <sensirion_shdlc_unstuff_byte+0x36>
 8013898:	2b31      	cmp	r3, #49	@ 0x31
 801389a:	d002      	beq.n	80138a2 <sensirion_shdlc_unstuff_byte+0x26>
 801389c:	2b33      	cmp	r3, #51	@ 0x33
 801389e:	d002      	beq.n	80138a6 <sensirion_shdlc_unstuff_byte+0x2a>
 80138a0:	e007      	b.n	80138b2 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 80138a2:	2311      	movs	r3, #17
 80138a4:	e006      	b.n	80138b4 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 80138a6:	2313      	movs	r3, #19
 80138a8:	e004      	b.n	80138b4 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 80138aa:	237d      	movs	r3, #125	@ 0x7d
 80138ac:	e002      	b.n	80138b4 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 80138ae:	237e      	movs	r3, #126	@ 0x7e
 80138b0:	e000      	b.n	80138b4 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 80138b2:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	370c      	adds	r7, #12
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	603b      	str	r3, [r7, #0]
 80138c8:	4603      	mov	r3, r0
 80138ca:	71fb      	strb	r3, [r7, #7]
 80138cc:	460b      	mov	r3, r1
 80138ce:	71bb      	strb	r3, [r7, #6]
 80138d0:	4613      	mov	r3, r2
 80138d2:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 80138d4:	797a      	ldrb	r2, [r7, #5]
 80138d6:	79b9      	ldrb	r1, [r7, #6]
 80138d8:	79f8      	ldrb	r0, [r7, #7]
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	f000 f818 	bl	8013910 <sensirion_shdlc_tx>
 80138e0:	4603      	mov	r3, r0
 80138e2:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 80138e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d002      	beq.n	80138f2 <sensirion_shdlc_xcv+0x32>
        return ret;
 80138ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80138f0:	e00a      	b.n	8013908 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80138f2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80138f6:	f000 fb07 	bl	8013f08 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80138fa:	7e3b      	ldrb	r3, [r7, #24]
 80138fc:	6a3a      	ldr	r2, [r7, #32]
 80138fe:	69f9      	ldr	r1, [r7, #28]
 8013900:	4618      	mov	r0, r3
 8013902:	f000 f8d7 	bl	8013ab4 <sensirion_shdlc_rx>
 8013906:	4603      	mov	r3, r0
}
 8013908:	4618      	mov	r0, r3
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8013910:	b590      	push	{r4, r7, lr}
 8013912:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8013916:	af00      	add	r7, sp, #0
 8013918:	4604      	mov	r4, r0
 801391a:	4608      	mov	r0, r1
 801391c:	4611      	mov	r1, r2
 801391e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8013922:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8013926:	6013      	str	r3, [r2, #0]
 8013928:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801392c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8013930:	4622      	mov	r2, r4
 8013932:	701a      	strb	r2, [r3, #0]
 8013934:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013938:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 801393c:	4602      	mov	r2, r0
 801393e:	701a      	strb	r2, [r3, #0]
 8013940:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013944:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013948:	460a      	mov	r2, r1
 801394a:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 801394c:	2300      	movs	r3, #0
 801394e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8013952:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013956:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 801395a:	781a      	ldrb	r2, [r3, #0]
 801395c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013960:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	4413      	add	r3, r2
 8013968:	b2d8      	uxtb	r0, r3
 801396a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801396e:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013972:	7819      	ldrb	r1, [r3, #0]
 8013974:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013978:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	f7ff ff0d 	bl	801379c <sensirion_shdlc_crc>
 8013982:	4603      	mov	r3, r0
 8013984:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8013988:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801398c:	1c5a      	adds	r2, r3, #1
 801398e:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8013992:	461a      	mov	r2, r3
 8013994:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013998:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801399c:	217e      	movs	r1, #126	@ 0x7e
 801399e:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 80139a0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80139a4:	f107 0208 	add.w	r2, r7, #8
 80139a8:	441a      	add	r2, r3
 80139aa:	1dfb      	adds	r3, r7, #7
 80139ac:	4619      	mov	r1, r3
 80139ae:	2001      	movs	r0, #1
 80139b0:	f7ff ff16 	bl	80137e0 <sensirion_shdlc_stuff_data>
 80139b4:	4603      	mov	r3, r0
 80139b6:	461a      	mov	r2, r3
 80139b8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80139bc:	4413      	add	r3, r2
 80139be:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 80139c2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80139c6:	f107 0208 	add.w	r2, r7, #8
 80139ca:	441a      	add	r2, r3
 80139cc:	1dbb      	adds	r3, r7, #6
 80139ce:	4619      	mov	r1, r3
 80139d0:	2001      	movs	r0, #1
 80139d2:	f7ff ff05 	bl	80137e0 <sensirion_shdlc_stuff_data>
 80139d6:	4603      	mov	r3, r0
 80139d8:	461a      	mov	r2, r3
 80139da:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80139de:	4413      	add	r3, r2
 80139e0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 80139e4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80139e8:	f107 0208 	add.w	r2, r7, #8
 80139ec:	441a      	add	r2, r3
 80139ee:	1d7b      	adds	r3, r7, #5
 80139f0:	4619      	mov	r1, r3
 80139f2:	2001      	movs	r0, #1
 80139f4:	f7ff fef4 	bl	80137e0 <sensirion_shdlc_stuff_data>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a00:	4413      	add	r3, r2
 8013a02:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8013a06:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a0a:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013a0e:	7818      	ldrb	r0, [r3, #0]
 8013a10:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a14:	f107 0208 	add.w	r2, r7, #8
 8013a18:	441a      	add	r2, r3
 8013a1a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a1e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8013a22:	6819      	ldr	r1, [r3, #0]
 8013a24:	f7ff fedc 	bl	80137e0 <sensirion_shdlc_stuff_data>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a30:	4413      	add	r3, r2
 8013a32:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8013a36:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a3a:	f107 0208 	add.w	r2, r7, #8
 8013a3e:	441a      	add	r2, r3
 8013a40:	f207 2313 	addw	r3, r7, #531	@ 0x213
 8013a44:	4619      	mov	r1, r3
 8013a46:	2001      	movs	r0, #1
 8013a48:	f7ff feca 	bl	80137e0 <sensirion_shdlc_stuff_data>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	461a      	mov	r2, r3
 8013a50:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a54:	4413      	add	r3, r2
 8013a56:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8013a5a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a5e:	1c5a      	adds	r2, r3, #1
 8013a60:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8013a64:	461a      	mov	r2, r3
 8013a66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a6a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8013a6e:	217e      	movs	r1, #126	@ 0x7e
 8013a70:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8013a72:	f107 0208 	add.w	r2, r7, #8
 8013a76:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f000 f9db 	bl	8013e38 <sensirion_uart_tx>
 8013a82:	4603      	mov	r3, r0
 8013a84:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 8013a88:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	da02      	bge.n	8013a96 <sensirion_shdlc_tx+0x186>
        return ret;
 8013a90:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8013a94:	e009      	b.n	8013aaa <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8013a96:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 8013a9a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d002      	beq.n	8013aa8 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8013aa2:	f06f 0305 	mvn.w	r3, #5
 8013aa6:	e000      	b.n	8013aaa <sensirion_shdlc_tx+0x19a>
    return 0;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd90      	pop	{r4, r7, pc}

08013ab4 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8013ab4:	b590      	push	{r4, r7, lr}
 8013ab6:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013ac0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013ac4:	6019      	str	r1, [r3, #0]
 8013ac6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013aca:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013ace:	601a      	str	r2, [r3, #0]
 8013ad0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013ad4:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8013ad8:	4602      	mov	r2, r0
 8013ada:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8013adc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013ae0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8013aea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013aee:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	3306      	adds	r3, #6
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	f107 0210 	add.w	r2, r7, #16
 8013b00:	4611      	mov	r1, r2
 8013b02:	4618      	mov	r0, r3
 8013b04:	f000 f9d2 	bl	8013eac <sensirion_uart_rx>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8013b0e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	dd03      	ble.n	8013b1e <sensirion_shdlc_rx+0x6a>
 8013b16:	4ba0      	ldr	r3, [pc, #640]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	2b7e      	cmp	r3, #126	@ 0x7e
 8013b1c:	d002      	beq.n	8013b24 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8013b1e:	f06f 0301 	mvn.w	r3, #1
 8013b22:	e133      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013b24:	2300      	movs	r3, #0
 8013b26:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013b30:	2300      	movs	r3, #0
 8013b32:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8013b36:	e03a      	b.n	8013bae <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8013b38:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d015      	beq.n	8013b6c <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013b40:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013b44:	4a94      	ldr	r2, [pc, #592]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013b46:	5cd2      	ldrb	r2, [r2, r3]
 8013b48:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013b4c:	1c59      	adds	r1, r3, #1
 8013b4e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013b52:	4619      	mov	r1, r3
 8013b54:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8013b58:	185c      	adds	r4, r3, r1
 8013b5a:	4610      	mov	r0, r2
 8013b5c:	f7ff fe8e 	bl	801387c <sensirion_shdlc_unstuff_byte>
 8013b60:	4603      	mov	r3, r0
 8013b62:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013b64:	2300      	movs	r3, #0
 8013b66:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013b6a:	e01b      	b.n	8013ba4 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013b6c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013b70:	4a89      	ldr	r2, [pc, #548]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013b72:	5cd3      	ldrb	r3, [r2, r3]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7ff fe70 	bl	801385a <sensirion_shdlc_check_unstuff>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8013b80:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d10d      	bne.n	8013ba4 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8013b88:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013b8c:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013b90:	1c59      	adds	r1, r3, #1
 8013b92:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013b96:	4619      	mov	r1, r3
 8013b98:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8013b9c:	440b      	add	r3, r1
 8013b9e:	497e      	ldr	r1, [pc, #504]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013ba0:	5c8a      	ldrb	r2, [r1, r2]
 8013ba2:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013ba4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013ba8:	3301      	adds	r3, #1
 8013baa:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013bae:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013bb2:	2b03      	cmp	r3, #3
 8013bb4:	d806      	bhi.n	8013bc4 <sensirion_shdlc_rx+0x110>
 8013bb6:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013bba:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013bbe:	3b02      	subs	r3, #2
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	dbb9      	blt.n	8013b38 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8013bc4:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013bc8:	2b04      	cmp	r3, #4
 8013bca:	d103      	bne.n	8013bd4 <sensirion_shdlc_rx+0x120>
 8013bcc:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013bd4:	f06f 0304 	mvn.w	r3, #4
 8013bd8:	e0d8      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8013bda:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013bde:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	78db      	ldrb	r3, [r3, #3]
 8013be6:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8013bea:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8013bee:	7812      	ldrb	r2, [r2, #0]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d202      	bcs.n	8013bfa <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8013bf4:	f06f 0306 	mvn.w	r3, #6
 8013bf8:	e0c8      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013c00:	2300      	movs	r3, #0
 8013c02:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8013c06:	e040      	b.n	8013c8a <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8013c08:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d018      	beq.n	8013c42 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013c10:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013c14:	4a60      	ldr	r2, [pc, #384]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013c16:	5cd2      	ldrb	r2, [r2, r3]
 8013c18:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013c1c:	1c59      	adds	r1, r3, #1
 8013c1e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013c22:	4619      	mov	r1, r3
 8013c24:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013c28:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	185c      	adds	r4, r3, r1
 8013c30:	4610      	mov	r0, r2
 8013c32:	f7ff fe23 	bl	801387c <sensirion_shdlc_unstuff_byte>
 8013c36:	4603      	mov	r3, r0
 8013c38:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013c40:	e01e      	b.n	8013c80 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013c42:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013c46:	4a54      	ldr	r2, [pc, #336]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013c48:	5cd3      	ldrb	r3, [r2, r3]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7ff fe05 	bl	801385a <sensirion_shdlc_check_unstuff>
 8013c50:	4603      	mov	r3, r0
 8013c52:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8013c56:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d110      	bne.n	8013c80 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8013c5e:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013c62:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013c66:	1c59      	adds	r1, r3, #1
 8013c68:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013c72:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	440b      	add	r3, r1
 8013c7a:	4947      	ldr	r1, [pc, #284]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013c7c:	5c8a      	ldrb	r2, [r1, r2]
 8013c7e:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8013c80:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013c84:	3301      	adds	r3, #1
 8013c86:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013c8a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013c8e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	78db      	ldrb	r3, [r3, #3]
 8013c96:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d206      	bcs.n	8013cac <sensirion_shdlc_rx+0x1f8>
 8013c9e:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013ca2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013ca6:	3b02      	subs	r3, #2
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	dbad      	blt.n	8013c08 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8013cac:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d002      	beq.n	8013cba <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013cb4:	f06f 0304 	mvn.w	r3, #4
 8013cb8:	e068      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8013cba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013cbe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	78db      	ldrb	r3, [r3, #3]
 8013cc6:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d202      	bcs.n	8013cd4 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013cce:	f06f 0304 	mvn.w	r3, #4
 8013cd2:	e05b      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8013cd4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013cd8:	1c5a      	adds	r2, r3, #1
 8013cda:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8013cde:	461a      	mov	r2, r3
 8013ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013ce2:	5c9b      	ldrb	r3, [r3, r2]
 8013ce4:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8013ce8:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fdb4 	bl	801385a <sensirion_shdlc_check_unstuff>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00d      	beq.n	8013d14 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8013cf8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013cfc:	1c5a      	adds	r2, r3, #1
 8013cfe:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8013d02:	461a      	mov	r2, r3
 8013d04:	4b24      	ldr	r3, [pc, #144]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013d06:	5c9b      	ldrb	r3, [r3, r2]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7ff fdb7 	bl	801387c <sensirion_shdlc_unstuff_byte>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8013d14:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d18:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	781a      	ldrb	r2, [r3, #0]
 8013d20:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	785b      	ldrb	r3, [r3, #1]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d34:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	789b      	ldrb	r3, [r3, #2]
 8013d3c:	4413      	add	r3, r2
 8013d3e:	b2d8      	uxtb	r0, r3
 8013d40:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d44:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	78d9      	ldrb	r1, [r3, #3]
 8013d4c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d50:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	f7ff fd21 	bl	801379c <sensirion_shdlc_crc>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d002      	beq.n	8013d6c <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8013d66:	f06f 0303 	mvn.w	r3, #3
 8013d6a:	e00f      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8013d6c:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013d70:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013d74:	429a      	cmp	r2, r3
 8013d76:	da05      	bge.n	8013d84 <sensirion_shdlc_rx+0x2d0>
 8013d78:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013d7c:	4a06      	ldr	r2, [pc, #24]	@ (8013d98 <sensirion_shdlc_rx+0x2e4>)
 8013d7e:	5cd3      	ldrb	r3, [r2, r3]
 8013d80:	2b7e      	cmp	r3, #126	@ 0x7e
 8013d82:	d002      	beq.n	8013d8a <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8013d84:	f06f 0302 	mvn.w	r3, #2
 8013d88:	e000      	b.n	8013d8c <sensirion_shdlc_rx+0x2d8>

    return 0;
 8013d8a:	2300      	movs	r3, #0
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd90      	pop	{r4, r7, pc}
 8013d96:	bf00      	nop
 8013d98:	200014e4 	.word	0x200014e4

08013d9c <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8013da0:	4819      	ldr	r0, [pc, #100]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013da2:	f7f7 fe8c 	bl	800babe <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8013da6:	4b18      	ldr	r3, [pc, #96]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013da8:	4a18      	ldr	r2, [pc, #96]	@ (8013e0c <sensirion_uart_open+0x70>)
 8013daa:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8013dac:	4b16      	ldr	r3, [pc, #88]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8013db2:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013db4:	4b14      	ldr	r3, [pc, #80]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013db6:	2200      	movs	r2, #0
 8013db8:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8013dba:	4b13      	ldr	r3, [pc, #76]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8013dc0:	4b11      	ldr	r3, [pc, #68]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8013dc6:	4b10      	ldr	r3, [pc, #64]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dc8:	220c      	movs	r2, #12
 8013dca:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013dd8:	480b      	ldr	r0, [pc, #44]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013dda:	f7f7 fe23 	bl	800ba24 <HAL_UART_Init>
 8013dde:	4603      	mov	r3, r0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d001      	beq.n	8013de8 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8013de4:	f7ef fa46 	bl	8003274 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8013de8:	f240 220a 	movw	r2, #522	@ 0x20a
 8013dec:	4908      	ldr	r1, [pc, #32]	@ (8013e10 <sensirion_uart_open+0x74>)
 8013dee:	4806      	ldr	r0, [pc, #24]	@ (8013e08 <sensirion_uart_open+0x6c>)
 8013df0:	f7f7 ff56 	bl	800bca0 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8013df4:	4b07      	ldr	r3, [pc, #28]	@ (8013e14 <sensirion_uart_open+0x78>)
 8013df6:	2200      	movs	r2, #0
 8013df8:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8013dfa:	4b07      	ldr	r3, [pc, #28]	@ (8013e18 <sensirion_uart_open+0x7c>)
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	20001a10 	.word	0x20001a10
 8013e0c:	40004400 	.word	0x40004400
 8013e10:	200014e4 	.word	0x200014e4
 8013e14:	20001aae 	.word	0x20001aae
 8013e18:	20001ab0 	.word	0x20001ab0

08013e1c <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8013e20:	4804      	ldr	r0, [pc, #16]	@ (8013e34 <sensirion_uart_close+0x18>)
 8013e22:	f7f7 fe4c 	bl	800babe <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8013e26:	4803      	ldr	r0, [pc, #12]	@ (8013e34 <sensirion_uart_close+0x18>)
 8013e28:	f7ef fd46 	bl	80038b8 <HAL_UART_MspDeInit>
    return 0;
 8013e2c:	2300      	movs	r3, #0
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	20001a10 	.word	0x20001a10

08013e38 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	4603      	mov	r3, r0
 8013e40:	6039      	str	r1, [r7, #0]
 8013e42:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013e44:	88fa      	ldrh	r2, [r7, #6]
 8013e46:	f04f 33ff 	mov.w	r3, #4294967295
 8013e4a:	6839      	ldr	r1, [r7, #0]
 8013e4c:	4807      	ldr	r0, [pc, #28]	@ (8013e6c <sensirion_uart_tx+0x34>)
 8013e4e:	f7f7 fe65 	bl	800bb1c <HAL_UART_Transmit>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d102      	bne.n	8013e5e <sensirion_uart_tx+0x26>
		{
			return data_len;
 8013e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013e5c:	e001      	b.n	8013e62 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8013e5e:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3708      	adds	r7, #8
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20001a10 	.word	0x20001a10

08013e70 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	460b      	mov	r3, r1
 8013e7a:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013e7c:	4a07      	ldr	r2, [pc, #28]	@ (8013e9c <HAL_UARTEx_RxEventCallback+0x2c>)
 8013e7e:	887b      	ldrh	r3, [r7, #2]
 8013e80:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8013e82:	4b07      	ldr	r3, [pc, #28]	@ (8013ea0 <HAL_UARTEx_RxEventCallback+0x30>)
 8013e84:	2201      	movs	r2, #1
 8013e86:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8013e88:	f240 220a 	movw	r2, #522	@ 0x20a
 8013e8c:	4905      	ldr	r1, [pc, #20]	@ (8013ea4 <HAL_UARTEx_RxEventCallback+0x34>)
 8013e8e:	4806      	ldr	r0, [pc, #24]	@ (8013ea8 <HAL_UARTEx_RxEventCallback+0x38>)
 8013e90:	f7f7 ff06 	bl	800bca0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013e94:	bf00      	nop
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	20001aae 	.word	0x20001aae
 8013ea0:	20001ab2 	.word	0x20001ab2
 8013ea4:	200014e4 	.word	0x200014e4
 8013ea8:	20001a10 	.word	0x20001a10

08013eac <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	6039      	str	r1, [r7, #0]
 8013eb6:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013ebc:	e005      	b.n	8013eca <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013ec4:	200a      	movs	r0, #10
 8013ec6:	f7ef ff2b 	bl	8003d20 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8013eca:	4b0b      	ldr	r3, [pc, #44]	@ (8013ef8 <sensirion_uart_rx+0x4c>)
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d102      	bne.n	8013ed8 <sensirion_uart_rx+0x2c>
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	d9f2      	bls.n	8013ebe <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8013ed8:	4b07      	ldr	r3, [pc, #28]	@ (8013ef8 <sensirion_uart_rx+0x4c>)
 8013eda:	2200      	movs	r2, #0
 8013edc:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8013ede:	4b07      	ldr	r3, [pc, #28]	@ (8013efc <sensirion_uart_rx+0x50>)
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8013ee4:	4b06      	ldr	r3, [pc, #24]	@ (8013f00 <sensirion_uart_rx+0x54>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8013eea:	4b06      	ldr	r3, [pc, #24]	@ (8013f04 <sensirion_uart_rx+0x58>)
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	b21b      	sxth	r3, r3
	//return i;
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3710      	adds	r7, #16
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	20001ab2 	.word	0x20001ab2
 8013efc:	20001ab4 	.word	0x20001ab4
 8013f00:	20001ab0 	.word	0x20001ab0
 8013f04:	20001aae 	.word	0x20001aae

08013f08 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	4a06      	ldr	r2, [pc, #24]	@ (8013f2c <sensirion_sleep_usec+0x24>)
 8013f14:	fba2 2303 	umull	r2, r3, r2, r3
 8013f18:	099b      	lsrs	r3, r3, #6
 8013f1a:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7ef feff 	bl	8003d20 <HAL_Delay>
}
 8013f22:	bf00      	nop
 8013f24:	3708      	adds	r7, #8
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	10624dd3 	.word	0x10624dd3

08013f30 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b08a      	sub	sp, #40	@ 0x28
 8013f34:	af04      	add	r7, sp, #16
 8013f36:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8013f38:	2303      	movs	r3, #3
 8013f3a:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8013f3c:	f107 020c 	add.w	r2, r7, #12
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	9302      	str	r3, [sp, #8]
 8013f44:	f107 0310 	add.w	r3, r7, #16
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	2320      	movs	r3, #32
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	2201      	movs	r2, #1
 8013f52:	21d0      	movs	r1, #208	@ 0xd0
 8013f54:	2000      	movs	r0, #0
 8013f56:	f7ff fcb3 	bl	80138c0 <sensirion_shdlc_xcv>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8013f5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	da02      	bge.n	8013f6c <sps30_get_serial+0x3c>
        return ret;
 8013f66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f6a:	e009      	b.n	8013f80 <sps30_get_serial+0x50>

    if (header.state)
 8013f6c:	7cbb      	ldrb	r3, [r7, #18]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d005      	beq.n	8013f7e <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8013f72:	7cbb      	ldrb	r3, [r7, #18]
 8013f74:	b21b      	sxth	r3, r3
 8013f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013f7a:	b21b      	sxth	r3, r3
 8013f7c:	e000      	b.n	8013f80 <sps30_get_serial+0x50>

    return 0;
 8013f7e:	2300      	movs	r3, #0
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3718      	adds	r7, #24
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b086      	sub	sp, #24
 8013f8c:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8013f8e:	f240 3301 	movw	r3, #769	@ 0x301
 8013f92:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8013f94:	463a      	mov	r2, r7
 8013f96:	2300      	movs	r3, #0
 8013f98:	9302      	str	r3, [sp, #8]
 8013f9a:	1d3b      	adds	r3, r7, #4
 8013f9c:	9301      	str	r3, [sp, #4]
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	9300      	str	r3, [sp, #0]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	2202      	movs	r2, #2
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	2000      	movs	r0, #0
 8013faa:	f7ff fc89 	bl	80138c0 <sensirion_shdlc_xcv>
 8013fae:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3708      	adds	r7, #8
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b086      	sub	sp, #24
 8013fbc:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	9302      	str	r3, [sp, #8]
 8013fc2:	1d3b      	adds	r3, r7, #4
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	9300      	str	r3, [sp, #0]
 8013fca:	2300      	movs	r3, #0
 8013fcc:	2200      	movs	r2, #0
 8013fce:	2101      	movs	r1, #1
 8013fd0:	2000      	movs	r0, #0
 8013fd2:	f7ff fc75 	bl	80138c0 <sensirion_shdlc_xcv>
 8013fd6:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3708      	adds	r7, #8
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b092      	sub	sp, #72	@ 0x48
 8013fe4:	af04      	add	r7, sp, #16
 8013fe6:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8013fe8:	f107 0308 	add.w	r3, r7, #8
 8013fec:	9302      	str	r3, [sp, #8]
 8013fee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013ff2:	9301      	str	r3, [sp, #4]
 8013ff4:	2328      	movs	r3, #40	@ 0x28
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	2103      	movs	r1, #3
 8013ffe:	2000      	movs	r0, #0
 8014000:	f7ff fc5e 	bl	80138c0 <sensirion_shdlc_xcv>
 8014004:	4603      	mov	r3, r0
 8014006:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8014008:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 801400c:	2b00      	cmp	r3, #0
 801400e:	d002      	beq.n	8014016 <sps30_read_measurement+0x36>
        return error;
 8014010:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8014014:	e07f      	b.n	8014116 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8014016:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801401a:	2b28      	cmp	r3, #40	@ 0x28
 801401c:	d002      	beq.n	8014024 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801401e:	f04f 33ff 	mov.w	r3, #4294967295
 8014022:	e078      	b.n	8014116 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8014024:	f107 0308 	add.w	r3, r7, #8
 8014028:	4618      	mov	r0, r3
 801402a:	f7ff fba6 	bl	801377a <sensirion_bytes_to_float>
 801402e:	eef0 7a40 	vmov.f32	s15, s0
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8014038:	f107 0308 	add.w	r3, r7, #8
 801403c:	3304      	adds	r3, #4
 801403e:	4618      	mov	r0, r3
 8014040:	f7ff fb9b 	bl	801377a <sensirion_bytes_to_float>
 8014044:	eef0 7a40 	vmov.f32	s15, s0
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 801404e:	f107 0308 	add.w	r3, r7, #8
 8014052:	3308      	adds	r3, #8
 8014054:	4618      	mov	r0, r3
 8014056:	f7ff fb90 	bl	801377a <sensirion_bytes_to_float>
 801405a:	eef0 7a40 	vmov.f32	s15, s0
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8014064:	f107 0308 	add.w	r3, r7, #8
 8014068:	330c      	adds	r3, #12
 801406a:	4618      	mov	r0, r3
 801406c:	f7ff fb85 	bl	801377a <sensirion_bytes_to_float>
 8014070:	eef0 7a40 	vmov.f32	s15, s0
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 801407a:	f107 0308 	add.w	r3, r7, #8
 801407e:	3310      	adds	r3, #16
 8014080:	4618      	mov	r0, r3
 8014082:	f7ff fb7a 	bl	801377a <sensirion_bytes_to_float>
 8014086:	eef0 7a40 	vmov.f32	s15, s0
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8014090:	f107 0308 	add.w	r3, r7, #8
 8014094:	3314      	adds	r3, #20
 8014096:	4618      	mov	r0, r3
 8014098:	f7ff fb6f 	bl	801377a <sensirion_bytes_to_float>
 801409c:	eef0 7a40 	vmov.f32	s15, s0
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 80140a6:	f107 0308 	add.w	r3, r7, #8
 80140aa:	3318      	adds	r3, #24
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7ff fb64 	bl	801377a <sensirion_bytes_to_float>
 80140b2:	eef0 7a40 	vmov.f32	s15, s0
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 80140bc:	f107 0308 	add.w	r3, r7, #8
 80140c0:	331c      	adds	r3, #28
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7ff fb59 	bl	801377a <sensirion_bytes_to_float>
 80140c8:	eef0 7a40 	vmov.f32	s15, s0
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 80140d2:	f107 0308 	add.w	r3, r7, #8
 80140d6:	3320      	adds	r3, #32
 80140d8:	4618      	mov	r0, r3
 80140da:	f7ff fb4e 	bl	801377a <sensirion_bytes_to_float>
 80140de:	eef0 7a40 	vmov.f32	s15, s0
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 80140e8:	f107 0308 	add.w	r3, r7, #8
 80140ec:	3324      	adds	r3, #36	@ 0x24
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7ff fb43 	bl	801377a <sensirion_bytes_to_float>
 80140f4:	eef0 7a40 	vmov.f32	s15, s0
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 80140fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8014102:	2b00      	cmp	r3, #0
 8014104:	d006      	beq.n	8014114 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8014106:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801410a:	b21b      	sxth	r3, r3
 801410c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014110:	b21b      	sxth	r3, r3
 8014112:	e000      	b.n	8014116 <sps30_read_measurement+0x136>
    }

    return 0;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	3738      	adds	r7, #56	@ 0x38
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}

0801411e <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 801411e:	b580      	push	{r7, lr}
 8014120:	b086      	sub	sp, #24
 8014122:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8014124:	2300      	movs	r3, #0
 8014126:	9302      	str	r3, [sp, #8]
 8014128:	1d3b      	adds	r3, r7, #4
 801412a:	9301      	str	r3, [sp, #4]
 801412c:	2300      	movs	r3, #0
 801412e:	9300      	str	r3, [sp, #0]
 8014130:	2300      	movs	r3, #0
 8014132:	2200      	movs	r2, #0
 8014134:	2156      	movs	r1, #86	@ 0x56
 8014136:	2000      	movs	r0, #0
 8014138:	f7ff fbc2 	bl	80138c0 <sensirion_shdlc_xcv>
 801413c:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 801413e:	4618      	mov	r0, r3
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8014146:	b580      	push	{r7, lr}
 8014148:	b08a      	sub	sp, #40	@ 0x28
 801414a:	af04      	add	r7, sp, #16
 801414c:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 801414e:	f107 0308 	add.w	r3, r7, #8
 8014152:	9302      	str	r3, [sp, #8]
 8014154:	f107 0310 	add.w	r3, r7, #16
 8014158:	9301      	str	r3, [sp, #4]
 801415a:	2307      	movs	r3, #7
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	2300      	movs	r3, #0
 8014160:	2200      	movs	r2, #0
 8014162:	21d1      	movs	r1, #209	@ 0xd1
 8014164:	2000      	movs	r0, #0
 8014166:	f7ff fbab 	bl	80138c0 <sensirion_shdlc_xcv>
 801416a:	4603      	mov	r3, r0
 801416c:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 801416e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d002      	beq.n	801417c <sps30_read_version+0x36>
        return error;
 8014176:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801417a:	e01f      	b.n	80141bc <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 801417c:	7cfb      	ldrb	r3, [r7, #19]
 801417e:	2b07      	cmp	r3, #7
 8014180:	d002      	beq.n	8014188 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8014182:	f04f 33ff 	mov.w	r3, #4294967295
 8014186:	e019      	b.n	80141bc <sps30_read_version+0x76>
    }

    if (header.state) {
 8014188:	7cbb      	ldrb	r3, [r7, #18]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d005      	beq.n	801419a <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 801418e:	7cbb      	ldrb	r3, [r7, #18]
 8014190:	b21b      	sxth	r3, r3
 8014192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014196:	b21b      	sxth	r3, r3
 8014198:	e010      	b.n	80141bc <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 801419a:	7a3a      	ldrb	r2, [r7, #8]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 80141a0:	7a7a      	ldrb	r2, [r7, #9]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 80141a6:	7afa      	ldrb	r2, [r7, #11]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 80141ac:	7b7a      	ldrb	r2, [r7, #13]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 80141b2:	7bba      	ldrb	r2, [r7, #14]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	711a      	strb	r2, [r3, #4]

    return error;
 80141b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3718      	adds	r7, #24
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b084      	sub	sp, #16
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	460b      	mov	r3, r1
 80141ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80141d0:	f640 0074 	movw	r0, #2164	@ 0x874
 80141d4:	f007 fdec 	bl	801bdb0 <USBD_static_malloc>
 80141d8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d109      	bne.n	80141f4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	32b0      	adds	r2, #176	@ 0xb0
 80141ea:	2100      	movs	r1, #0
 80141ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80141f0:	2302      	movs	r3, #2
 80141f2:	e06e      	b.n	80142d2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	32b0      	adds	r2, #176	@ 0xb0
 80141fe:	68f9      	ldr	r1, [r7, #12]
 8014200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	32b0      	adds	r2, #176	@ 0xb0
 801420e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	7c1b      	ldrb	r3, [r3, #16]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d12b      	bne.n	8014278 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8014220:	4b2e      	ldr	r3, [pc, #184]	@ (80142dc <USBD_MSC_Init+0x118>)
 8014222:	7819      	ldrb	r1, [r3, #0]
 8014224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014228:	2202      	movs	r2, #2
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f007 fc7d 	bl	801bb2a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8014230:	4b2a      	ldr	r3, [pc, #168]	@ (80142dc <USBD_MSC_Init+0x118>)
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	f003 020f 	and.w	r2, r3, #15
 8014238:	6879      	ldr	r1, [r7, #4]
 801423a:	4613      	mov	r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	4413      	add	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	440b      	add	r3, r1
 8014244:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014248:	2201      	movs	r2, #1
 801424a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801424c:	4b24      	ldr	r3, [pc, #144]	@ (80142e0 <USBD_MSC_Init+0x11c>)
 801424e:	7819      	ldrb	r1, [r3, #0]
 8014250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014254:	2202      	movs	r2, #2
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f007 fc67 	bl	801bb2a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801425c:	4b20      	ldr	r3, [pc, #128]	@ (80142e0 <USBD_MSC_Init+0x11c>)
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	f003 020f 	and.w	r2, r3, #15
 8014264:	6879      	ldr	r1, [r7, #4]
 8014266:	4613      	mov	r3, r2
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	4413      	add	r3, r2
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	440b      	add	r3, r1
 8014270:	3324      	adds	r3, #36	@ 0x24
 8014272:	2201      	movs	r2, #1
 8014274:	801a      	strh	r2, [r3, #0]
 8014276:	e028      	b.n	80142ca <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8014278:	4b18      	ldr	r3, [pc, #96]	@ (80142dc <USBD_MSC_Init+0x118>)
 801427a:	7819      	ldrb	r1, [r3, #0]
 801427c:	2340      	movs	r3, #64	@ 0x40
 801427e:	2202      	movs	r2, #2
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f007 fc52 	bl	801bb2a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8014286:	4b15      	ldr	r3, [pc, #84]	@ (80142dc <USBD_MSC_Init+0x118>)
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	f003 020f 	and.w	r2, r3, #15
 801428e:	6879      	ldr	r1, [r7, #4]
 8014290:	4613      	mov	r3, r2
 8014292:	009b      	lsls	r3, r3, #2
 8014294:	4413      	add	r3, r2
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	440b      	add	r3, r1
 801429a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801429e:	2201      	movs	r2, #1
 80142a0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80142a2:	4b0f      	ldr	r3, [pc, #60]	@ (80142e0 <USBD_MSC_Init+0x11c>)
 80142a4:	7819      	ldrb	r1, [r3, #0]
 80142a6:	2340      	movs	r3, #64	@ 0x40
 80142a8:	2202      	movs	r2, #2
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f007 fc3d 	bl	801bb2a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80142b0:	4b0b      	ldr	r3, [pc, #44]	@ (80142e0 <USBD_MSC_Init+0x11c>)
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	f003 020f 	and.w	r2, r3, #15
 80142b8:	6879      	ldr	r1, [r7, #4]
 80142ba:	4613      	mov	r3, r2
 80142bc:	009b      	lsls	r3, r3, #2
 80142be:	4413      	add	r3, r2
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	440b      	add	r3, r1
 80142c4:	3324      	adds	r3, #36	@ 0x24
 80142c6:	2201      	movs	r2, #1
 80142c8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f000 fa2c 	bl	8014728 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80142d0:	2300      	movs	r3, #0
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3710      	adds	r7, #16
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	200000b3 	.word	0x200000b3
 80142e0:	200000b2 	.word	0x200000b2

080142e4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	460b      	mov	r3, r1
 80142ee:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80142f0:	4b26      	ldr	r3, [pc, #152]	@ (801438c <USBD_MSC_DeInit+0xa8>)
 80142f2:	781b      	ldrb	r3, [r3, #0]
 80142f4:	4619      	mov	r1, r3
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f007 fc3d 	bl	801bb76 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80142fc:	4b23      	ldr	r3, [pc, #140]	@ (801438c <USBD_MSC_DeInit+0xa8>)
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	f003 020f 	and.w	r2, r3, #15
 8014304:	6879      	ldr	r1, [r7, #4]
 8014306:	4613      	mov	r3, r2
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	4413      	add	r3, r2
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	440b      	add	r3, r1
 8014310:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014314:	2200      	movs	r2, #0
 8014316:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8014318:	4b1d      	ldr	r3, [pc, #116]	@ (8014390 <USBD_MSC_DeInit+0xac>)
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	4619      	mov	r1, r3
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f007 fc29 	bl	801bb76 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8014324:	4b1a      	ldr	r3, [pc, #104]	@ (8014390 <USBD_MSC_DeInit+0xac>)
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	f003 020f 	and.w	r2, r3, #15
 801432c:	6879      	ldr	r1, [r7, #4]
 801432e:	4613      	mov	r3, r2
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	4413      	add	r3, r2
 8014334:	009b      	lsls	r3, r3, #2
 8014336:	440b      	add	r3, r1
 8014338:	3324      	adds	r3, #36	@ 0x24
 801433a:	2200      	movs	r2, #0
 801433c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	32b0      	adds	r2, #176	@ 0xb0
 8014348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d018      	beq.n	8014382 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f000 fa67 	bl	8014824 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	32b0      	adds	r2, #176	@ 0xb0
 8014360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014364:	4618      	mov	r0, r3
 8014366:	f007 fd31 	bl	801bdcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	32b0      	adds	r2, #176	@ 0xb0
 8014374:	2100      	movs	r1, #0
 8014376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014382:	2300      	movs	r3, #0
}
 8014384:	4618      	mov	r0, r3
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	200000b3 	.word	0x200000b3
 8014390:	200000b2 	.word	0x200000b2

08014394 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	32b0      	adds	r2, #176	@ 0xb0
 80143a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ac:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80143ae:	2300      	movs	r3, #0
 80143b0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80143b2:	2300      	movs	r3, #0
 80143b4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d101      	bne.n	80143c0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80143bc:	2303      	movs	r3, #3
 80143be:	e0e1      	b.n	8014584 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d053      	beq.n	8014474 <USBD_MSC_Setup+0xe0>
 80143cc:	2b20      	cmp	r3, #32
 80143ce:	f040 80d1 	bne.w	8014574 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	785b      	ldrb	r3, [r3, #1]
 80143d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80143d8:	d002      	beq.n	80143e0 <USBD_MSC_Setup+0x4c>
 80143da:	2bff      	cmp	r3, #255	@ 0xff
 80143dc:	d02a      	beq.n	8014434 <USBD_MSC_Setup+0xa0>
 80143de:	e041      	b.n	8014464 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	885b      	ldrh	r3, [r3, #2]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d11e      	bne.n	8014426 <USBD_MSC_Setup+0x92>
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	88db      	ldrh	r3, [r3, #6]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d11a      	bne.n	8014426 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	da15      	bge.n	8014426 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	33b0      	adds	r3, #176	@ 0xb0
 8014404:	009b      	lsls	r3, r3, #2
 8014406:	4413      	add	r3, r2
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	699b      	ldr	r3, [r3, #24]
 801440c:	4798      	blx	r3
 801440e:	4603      	mov	r3, r0
 8014410:	461a      	mov	r2, r3
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	2201      	movs	r2, #1
 801441a:	4619      	mov	r1, r3
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f003 f945 	bl	80176ac <USBD_CtlSendData>
 8014422:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014424:	e025      	b.n	8014472 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8014426:	6839      	ldr	r1, [r7, #0]
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f003 f8ce 	bl	80175ca <USBD_CtlError>
            ret = USBD_FAIL;
 801442e:	2303      	movs	r3, #3
 8014430:	75fb      	strb	r3, [r7, #23]
          break;
 8014432:	e01e      	b.n	8014472 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	885b      	ldrh	r3, [r3, #2]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d10c      	bne.n	8014456 <USBD_MSC_Setup+0xc2>
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	88db      	ldrh	r3, [r3, #6]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d108      	bne.n	8014456 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801444a:	2b00      	cmp	r3, #0
 801444c:	db03      	blt.n	8014456 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 f9b4 	bl	80147bc <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014454:	e00d      	b.n	8014472 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8014456:	6839      	ldr	r1, [r7, #0]
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f003 f8b6 	bl	80175ca <USBD_CtlError>
            ret = USBD_FAIL;
 801445e:	2303      	movs	r3, #3
 8014460:	75fb      	strb	r3, [r7, #23]
          break;
 8014462:	e006      	b.n	8014472 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8014464:	6839      	ldr	r1, [r7, #0]
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f003 f8af 	bl	80175ca <USBD_CtlError>
          ret = USBD_FAIL;
 801446c:	2303      	movs	r3, #3
 801446e:	75fb      	strb	r3, [r7, #23]
          break;
 8014470:	bf00      	nop
      }
      break;
 8014472:	e086      	b.n	8014582 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	785b      	ldrb	r3, [r3, #1]
 8014478:	2b0b      	cmp	r3, #11
 801447a:	d872      	bhi.n	8014562 <USBD_MSC_Setup+0x1ce>
 801447c:	a201      	add	r2, pc, #4	@ (adr r2, 8014484 <USBD_MSC_Setup+0xf0>)
 801447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014482:	bf00      	nop
 8014484:	080144b5 	.word	0x080144b5
 8014488:	08014531 	.word	0x08014531
 801448c:	08014563 	.word	0x08014563
 8014490:	08014563 	.word	0x08014563
 8014494:	08014563 	.word	0x08014563
 8014498:	08014563 	.word	0x08014563
 801449c:	08014563 	.word	0x08014563
 80144a0:	08014563 	.word	0x08014563
 80144a4:	08014563 	.word	0x08014563
 80144a8:	08014563 	.word	0x08014563
 80144ac:	080144df 	.word	0x080144df
 80144b0:	08014509 	.word	0x08014509
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b03      	cmp	r3, #3
 80144be:	d107      	bne.n	80144d0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80144c0:	f107 030e 	add.w	r3, r7, #14
 80144c4:	2202      	movs	r2, #2
 80144c6:	4619      	mov	r1, r3
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f003 f8ef 	bl	80176ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80144ce:	e050      	b.n	8014572 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f003 f879 	bl	80175ca <USBD_CtlError>
            ret = USBD_FAIL;
 80144d8:	2303      	movs	r3, #3
 80144da:	75fb      	strb	r3, [r7, #23]
          break;
 80144dc:	e049      	b.n	8014572 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144e4:	b2db      	uxtb	r3, r3
 80144e6:	2b03      	cmp	r3, #3
 80144e8:	d107      	bne.n	80144fa <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	3304      	adds	r3, #4
 80144ee:	2201      	movs	r2, #1
 80144f0:	4619      	mov	r1, r3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f003 f8da 	bl	80176ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80144f8:	e03b      	b.n	8014572 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80144fa:	6839      	ldr	r1, [r7, #0]
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f003 f864 	bl	80175ca <USBD_CtlError>
            ret = USBD_FAIL;
 8014502:	2303      	movs	r3, #3
 8014504:	75fb      	strb	r3, [r7, #23]
          break;
 8014506:	e034      	b.n	8014572 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801450e:	b2db      	uxtb	r3, r3
 8014510:	2b03      	cmp	r3, #3
 8014512:	d106      	bne.n	8014522 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	885b      	ldrh	r3, [r3, #2]
 8014518:	b2db      	uxtb	r3, r3
 801451a:	461a      	mov	r2, r3
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014520:	e027      	b.n	8014572 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8014522:	6839      	ldr	r1, [r7, #0]
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f003 f850 	bl	80175ca <USBD_CtlError>
            ret = USBD_FAIL;
 801452a:	2303      	movs	r3, #3
 801452c:	75fb      	strb	r3, [r7, #23]
          break;
 801452e:	e020      	b.n	8014572 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014536:	b2db      	uxtb	r3, r3
 8014538:	2b03      	cmp	r3, #3
 801453a:	d119      	bne.n	8014570 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	885b      	ldrh	r3, [r3, #2]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d115      	bne.n	8014570 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	889b      	ldrh	r3, [r3, #4]
 8014548:	b2db      	uxtb	r3, r3
 801454a:	4619      	mov	r1, r3
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f007 fb31 	bl	801bbb4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	889b      	ldrh	r3, [r3, #4]
 8014556:	b2db      	uxtb	r3, r3
 8014558:	4619      	mov	r1, r3
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 fb2e 	bl	8014bbc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8014560:	e006      	b.n	8014570 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8014562:	6839      	ldr	r1, [r7, #0]
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f003 f830 	bl	80175ca <USBD_CtlError>
          ret = USBD_FAIL;
 801456a:	2303      	movs	r3, #3
 801456c:	75fb      	strb	r3, [r7, #23]
          break;
 801456e:	e000      	b.n	8014572 <USBD_MSC_Setup+0x1de>
          break;
 8014570:	bf00      	nop
      }
      break;
 8014572:	e006      	b.n	8014582 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8014574:	6839      	ldr	r1, [r7, #0]
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f003 f827 	bl	80175ca <USBD_CtlError>
      ret = USBD_FAIL;
 801457c:	2303      	movs	r3, #3
 801457e:	75fb      	strb	r3, [r7, #23]
      break;
 8014580:	bf00      	nop
  }

  return (uint8_t)ret;
 8014582:	7dfb      	ldrb	r3, [r7, #23]
}
 8014584:	4618      	mov	r0, r3
 8014586:	3718      	adds	r7, #24
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	460b      	mov	r3, r1
 8014596:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8014598:	78fb      	ldrb	r3, [r7, #3]
 801459a:	4619      	mov	r1, r3
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f000 f959 	bl	8014854 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	460b      	mov	r3, r1
 80145b6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80145b8:	78fb      	ldrb	r3, [r7, #3]
 80145ba:	4619      	mov	r1, r3
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f000 f983 	bl	80148c8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80145c2:	2300      	movs	r3, #0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80145d4:	2181      	movs	r1, #129	@ 0x81
 80145d6:	4812      	ldr	r0, [pc, #72]	@ (8014620 <USBD_MSC_GetHSCfgDesc+0x54>)
 80145d8:	f002 f9c1 	bl	801695e <USBD_GetEpDesc>
 80145dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80145de:	2101      	movs	r1, #1
 80145e0:	480f      	ldr	r0, [pc, #60]	@ (8014620 <USBD_MSC_GetHSCfgDesc+0x54>)
 80145e2:	f002 f9bc 	bl	801695e <USBD_GetEpDesc>
 80145e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d006      	beq.n	80145fc <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2200      	movs	r2, #0
 80145f2:	711a      	strb	r2, [r3, #4]
 80145f4:	2200      	movs	r2, #0
 80145f6:	f042 0202 	orr.w	r2, r2, #2
 80145fa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d006      	beq.n	8014610 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	2200      	movs	r2, #0
 8014606:	711a      	strb	r2, [r3, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	f042 0202 	orr.w	r2, r2, #2
 801460e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2220      	movs	r2, #32
 8014614:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8014616:	4b02      	ldr	r3, [pc, #8]	@ (8014620 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8014618:	4618      	mov	r0, r3
 801461a:	3710      	adds	r7, #16
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	20000088 	.word	0x20000088

08014624 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b084      	sub	sp, #16
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801462c:	2181      	movs	r1, #129	@ 0x81
 801462e:	4812      	ldr	r0, [pc, #72]	@ (8014678 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014630:	f002 f995 	bl	801695e <USBD_GetEpDesc>
 8014634:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8014636:	2101      	movs	r1, #1
 8014638:	480f      	ldr	r0, [pc, #60]	@ (8014678 <USBD_MSC_GetFSCfgDesc+0x54>)
 801463a:	f002 f990 	bl	801695e <USBD_GetEpDesc>
 801463e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d006      	beq.n	8014654 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2200      	movs	r2, #0
 801464a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801464e:	711a      	strb	r2, [r3, #4]
 8014650:	2200      	movs	r2, #0
 8014652:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d006      	beq.n	8014668 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	2200      	movs	r2, #0
 801465e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014662:	711a      	strb	r2, [r3, #4]
 8014664:	2200      	movs	r2, #0
 8014666:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2220      	movs	r2, #32
 801466c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801466e:	4b02      	ldr	r3, [pc, #8]	@ (8014678 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8014670:	4618      	mov	r0, r3
 8014672:	3710      	adds	r7, #16
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	20000088 	.word	0x20000088

0801467c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8014684:	2181      	movs	r1, #129	@ 0x81
 8014686:	4812      	ldr	r0, [pc, #72]	@ (80146d0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014688:	f002 f969 	bl	801695e <USBD_GetEpDesc>
 801468c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801468e:	2101      	movs	r1, #1
 8014690:	480f      	ldr	r0, [pc, #60]	@ (80146d0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014692:	f002 f964 	bl	801695e <USBD_GetEpDesc>
 8014696:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d006      	beq.n	80146ac <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	2200      	movs	r2, #0
 80146a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80146a6:	711a      	strb	r2, [r3, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d006      	beq.n	80146c0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	2200      	movs	r2, #0
 80146b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80146ba:	711a      	strb	r2, [r3, #4]
 80146bc:	2200      	movs	r2, #0
 80146be:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2220      	movs	r2, #32
 80146c4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80146c6:	4b02      	ldr	r3, [pc, #8]	@ (80146d0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3710      	adds	r7, #16
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	20000088 	.word	0x20000088

080146d4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	220a      	movs	r2, #10
 80146e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80146e2:	4b03      	ldr	r3, [pc, #12]	@ (80146f0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	370c      	adds	r7, #12
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr
 80146f0:	200000a8 	.word	0x200000a8

080146f4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d101      	bne.n	8014708 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014704:	2303      	movs	r3, #3
 8014706:	e009      	b.n	801471c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	33b0      	adds	r3, #176	@ 0xb0
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	4413      	add	r3, r2
 8014716:	683a      	ldr	r2, [r7, #0]
 8014718:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801471a:	2300      	movs	r3, #0
}
 801471c:	4618      	mov	r0, r3
 801471e:	370c      	adds	r7, #12
 8014720:	46bd      	mov	sp, r7
 8014722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014726:	4770      	bx	lr

08014728 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	32b0      	adds	r2, #176	@ 0xb0
 801473a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801473e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d032      	beq.n	80147ac <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2200      	movs	r2, #0
 801474a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2200      	movs	r2, #0
 8014750:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	2200      	movs	r2, #0
 8014756:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2200      	movs	r2, #0
 801475e:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	2200      	movs	r2, #0
 8014766:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	33b0      	adds	r3, #176	@ 0xb0
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	4413      	add	r3, r2
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2000      	movs	r0, #0
 801477e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8014780:	4b0c      	ldr	r3, [pc, #48]	@ (80147b4 <MSC_BOT_Init+0x8c>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	4619      	mov	r1, r3
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f007 fa14 	bl	801bbb4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 801478c:	4b0a      	ldr	r3, [pc, #40]	@ (80147b8 <MSC_BOT_Init+0x90>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	4619      	mov	r1, r3
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f007 fa0e 	bl	801bbb4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014798:	4b06      	ldr	r3, [pc, #24]	@ (80147b4 <MSC_BOT_Init+0x8c>)
 801479a:	7819      	ldrb	r1, [r3, #0]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80147a2:	231f      	movs	r3, #31
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f007 face 	bl	801bd46 <USBD_LL_PrepareReceive>
 80147aa:	e000      	b.n	80147ae <MSC_BOT_Init+0x86>
    return;
 80147ac:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80147ae:	3710      	adds	r7, #16
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	200000b3 	.word	0x200000b3
 80147b8:	200000b2 	.word	0x200000b2

080147bc <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	32b0      	adds	r2, #176	@ 0xb0
 80147ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d01b      	beq.n	8014812 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2200      	movs	r2, #0
 80147de:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2201      	movs	r2, #1
 80147e4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80147e6:	4b0d      	ldr	r3, [pc, #52]	@ (801481c <MSC_BOT_Reset+0x60>)
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	4619      	mov	r1, r3
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f007 fa1f 	bl	801bc30 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80147f2:	4b0b      	ldr	r3, [pc, #44]	@ (8014820 <MSC_BOT_Reset+0x64>)
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	4619      	mov	r1, r3
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f007 fa19 	bl	801bc30 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80147fe:	4b08      	ldr	r3, [pc, #32]	@ (8014820 <MSC_BOT_Reset+0x64>)
 8014800:	7819      	ldrb	r1, [r3, #0]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8014808:	231f      	movs	r3, #31
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f007 fa9b 	bl	801bd46 <USBD_LL_PrepareReceive>
 8014810:	e000      	b.n	8014814 <MSC_BOT_Reset+0x58>
    return;
 8014812:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	200000b2 	.word	0x200000b2
 8014820:	200000b3 	.word	0x200000b3

08014824 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8014824:	b480      	push	{r7}
 8014826:	b085      	sub	sp, #20
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	32b0      	adds	r2, #176	@ 0xb0
 8014836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801483a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d002      	beq.n	8014848 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2200      	movs	r2, #0
 8014846:	721a      	strb	r2, [r3, #8]
  }
}
 8014848:	bf00      	nop
 801484a:	3714      	adds	r7, #20
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr

08014854 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	460b      	mov	r3, r1
 801485e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	32b0      	adds	r2, #176	@ 0xb0
 801486a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801486e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d020      	beq.n	80148b8 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	7a1b      	ldrb	r3, [r3, #8]
 801487a:	2b02      	cmp	r3, #2
 801487c:	d005      	beq.n	801488a <MSC_BOT_DataIn+0x36>
 801487e:	2b02      	cmp	r3, #2
 8014880:	db1c      	blt.n	80148bc <MSC_BOT_DataIn+0x68>
 8014882:	3b03      	subs	r3, #3
 8014884:	2b01      	cmp	r3, #1
 8014886:	d819      	bhi.n	80148bc <MSC_BOT_DataIn+0x68>
 8014888:	e011      	b.n	80148ae <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8014896:	461a      	mov	r2, r3
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 f9c9 	bl	8014c30 <SCSI_ProcessCmd>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	da0d      	bge.n	80148c0 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80148a4:	2101      	movs	r1, #1
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 f90c 	bl	8014ac4 <MSC_BOT_SendCSW>
      }
      break;
 80148ac:	e008      	b.n	80148c0 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80148ae:	2100      	movs	r1, #0
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 f907 	bl	8014ac4 <MSC_BOT_SendCSW>
      break;
 80148b6:	e004      	b.n	80148c2 <MSC_BOT_DataIn+0x6e>
    return;
 80148b8:	bf00      	nop
 80148ba:	e002      	b.n	80148c2 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80148bc:	bf00      	nop
 80148be:	e000      	b.n	80148c2 <MSC_BOT_DataIn+0x6e>
      break;
 80148c0:	bf00      	nop
  }
}
 80148c2:	3710      	adds	r7, #16
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	460b      	mov	r3, r1
 80148d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	32b0      	adds	r2, #176	@ 0xb0
 80148de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d01c      	beq.n	8014924 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	7a1b      	ldrb	r3, [r3, #8]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d002      	beq.n	80148f8 <MSC_BOT_DataOut+0x30>
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	d004      	beq.n	8014900 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80148f6:	e018      	b.n	801492a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f819 	bl	8014930 <MSC_BOT_CBW_Decode>
      break;
 80148fe:	e014      	b.n	801492a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801490c:	461a      	mov	r2, r3
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 f98e 	bl	8014c30 <SCSI_ProcessCmd>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	da06      	bge.n	8014928 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801491a:	2101      	movs	r1, #1
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 f8d1 	bl	8014ac4 <MSC_BOT_SendCSW>
      break;
 8014922:	e001      	b.n	8014928 <MSC_BOT_DataOut+0x60>
    return;
 8014924:	bf00      	nop
 8014926:	e000      	b.n	801492a <MSC_BOT_DataOut+0x62>
      break;
 8014928:	bf00      	nop
  }
}
 801492a:	3710      	adds	r7, #16
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	32b0      	adds	r2, #176	@ 0xb0
 8014942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014946:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d079      	beq.n	8014a42 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014966:	4b3a      	ldr	r3, [pc, #232]	@ (8014a50 <MSC_BOT_CBW_Decode+0x120>)
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	4619      	mov	r1, r3
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f007 fa0b 	bl	801bd88 <USBD_LL_GetRxDataSize>
 8014972:	4603      	mov	r3, r0
 8014974:	2b1f      	cmp	r3, #31
 8014976:	d114      	bne.n	80149a2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801497e:	4a35      	ldr	r2, [pc, #212]	@ (8014a54 <MSC_BOT_CBW_Decode+0x124>)
 8014980:	4293      	cmp	r3, r2
 8014982:	d10e      	bne.n	80149a2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801498a:	2b01      	cmp	r3, #1
 801498c:	d809      	bhi.n	80149a2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 8014994:	2b00      	cmp	r3, #0
 8014996:	d004      	beq.n	80149a2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801499e:	2b10      	cmp	r3, #16
 80149a0:	d90e      	bls.n	80149c0 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80149a8:	2320      	movs	r3, #32
 80149aa:	2205      	movs	r2, #5
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f000 fe29 	bl	8015604 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2202      	movs	r2, #2
 80149b6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f000 f8bd 	bl	8014b38 <MSC_BOT_Abort>
 80149be:	e043      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80149cc:	461a      	mov	r2, r3
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 f92e 	bl	8014c30 <SCSI_ProcessCmd>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	da0c      	bge.n	80149f4 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	7a1b      	ldrb	r3, [r3, #8]
 80149de:	2b05      	cmp	r3, #5
 80149e0:	d104      	bne.n	80149ec <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80149e2:	2101      	movs	r1, #1
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 f86d 	bl	8014ac4 <MSC_BOT_SendCSW>
 80149ea:	e02d      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f8a3 	bl	8014b38 <MSC_BOT_Abort>
 80149f2:	e029      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	7a1b      	ldrb	r3, [r3, #8]
 80149f8:	2b02      	cmp	r3, #2
 80149fa:	d024      	beq.n	8014a46 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d020      	beq.n	8014a46 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014a08:	2b03      	cmp	r3, #3
 8014a0a:	d01c      	beq.n	8014a46 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	68db      	ldr	r3, [r3, #12]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d009      	beq.n	8014a28 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	f103 0110 	add.w	r1, r3, #16
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	68db      	ldr	r3, [r3, #12]
 8014a1e:	461a      	mov	r2, r3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f000 f819 	bl	8014a58 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8014a26:	e00f      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	68db      	ldr	r3, [r3, #12]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d104      	bne.n	8014a3a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014a30:	2100      	movs	r1, #0
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 f846 	bl	8014ac4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8014a38:	e006      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 f87c 	bl	8014b38 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014a40:	e002      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
    return;
 8014a42:	bf00      	nop
 8014a44:	e000      	b.n	8014a48 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8014a46:	bf00      	nop
    }
  }
}
 8014a48:	3710      	adds	r7, #16
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	200000b3 	.word	0x200000b3
 8014a54:	43425355 	.word	0x43425355

08014a58 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b086      	sub	sp, #24
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	32b0      	adds	r2, #176	@ 0xb0
 8014a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a72:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d01e      	beq.n	8014ab8 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	4293      	cmp	r3, r2
 8014a84:	bf28      	it	cs
 8014a86:	4613      	movcs	r3, r2
 8014a88:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	1ad2      	subs	r2, r2, r3
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	2204      	movs	r2, #4
 8014aa6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8014aa8:	4b05      	ldr	r3, [pc, #20]	@ (8014ac0 <MSC_BOT_SendData+0x68>)
 8014aaa:	7819      	ldrb	r1, [r3, #0]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	68ba      	ldr	r2, [r7, #8]
 8014ab0:	68f8      	ldr	r0, [r7, #12]
 8014ab2:	f007 f927 	bl	801bd04 <USBD_LL_Transmit>
 8014ab6:	e000      	b.n	8014aba <MSC_BOT_SendData+0x62>
    return;
 8014ab8:	bf00      	nop
}
 8014aba:	3718      	adds	r7, #24
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	200000b2 	.word	0x200000b2

08014ac4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	460b      	mov	r3, r1
 8014ace:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	32b0      	adds	r2, #176	@ 0xb0
 8014ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ade:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d01d      	beq.n	8014b22 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	4a10      	ldr	r2, [pc, #64]	@ (8014b2c <MSC_BOT_SendCSW+0x68>)
 8014aea:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	78fa      	ldrb	r2, [r7, #3]
 8014af2:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2200      	movs	r2, #0
 8014afa:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8014afc:	4b0c      	ldr	r3, [pc, #48]	@ (8014b30 <MSC_BOT_SendCSW+0x6c>)
 8014afe:	7819      	ldrb	r1, [r3, #0]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 8014b06:	230d      	movs	r3, #13
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f007 f8fb 	bl	801bd04 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014b0e:	4b09      	ldr	r3, [pc, #36]	@ (8014b34 <MSC_BOT_SendCSW+0x70>)
 8014b10:	7819      	ldrb	r1, [r3, #0]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8014b18:	231f      	movs	r3, #31
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f007 f913 	bl	801bd46 <USBD_LL_PrepareReceive>
 8014b20:	e000      	b.n	8014b24 <MSC_BOT_SendCSW+0x60>
    return;
 8014b22:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014b24:	3710      	adds	r7, #16
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	53425355 	.word	0x53425355
 8014b30:	200000b2 	.word	0x200000b2
 8014b34:	200000b3 	.word	0x200000b3

08014b38 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b084      	sub	sp, #16
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	32b0      	adds	r2, #176	@ 0xb0
 8014b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b4e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d02a      	beq.n	8014bac <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d10e      	bne.n	8014b7e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d009      	beq.n	8014b7e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d105      	bne.n	8014b7e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014b72:	4b10      	ldr	r3, [pc, #64]	@ (8014bb4 <MSC_BOT_Abort+0x7c>)
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	4619      	mov	r1, r3
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f007 f83a 	bl	801bbf2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8014bb8 <MSC_BOT_Abort+0x80>)
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	4619      	mov	r1, r3
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f007 f834 	bl	801bbf2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	7a5b      	ldrb	r3, [r3, #9]
 8014b8e:	2b02      	cmp	r3, #2
 8014b90:	d10d      	bne.n	8014bae <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014b92:	4b09      	ldr	r3, [pc, #36]	@ (8014bb8 <MSC_BOT_Abort+0x80>)
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	4619      	mov	r1, r3
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f007 f82a 	bl	801bbf2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014b9e:	4b05      	ldr	r3, [pc, #20]	@ (8014bb4 <MSC_BOT_Abort+0x7c>)
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f007 f824 	bl	801bbf2 <USBD_LL_StallEP>
 8014baa:	e000      	b.n	8014bae <MSC_BOT_Abort+0x76>
    return;
 8014bac:	bf00      	nop
  }
}
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}
 8014bb4:	200000b3 	.word	0x200000b3
 8014bb8:	200000b2 	.word	0x200000b2

08014bbc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	32b0      	adds	r2, #176	@ 0xb0
 8014bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bd6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d01d      	beq.n	8014c1a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	7a5b      	ldrb	r3, [r3, #9]
 8014be2:	2b02      	cmp	r3, #2
 8014be4:	d10c      	bne.n	8014c00 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014be6:	4b10      	ldr	r3, [pc, #64]	@ (8014c28 <MSC_BOT_CplClrFeature+0x6c>)
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	4619      	mov	r1, r3
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f007 f800 	bl	801bbf2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8014c2c <MSC_BOT_CplClrFeature+0x70>)
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f006 fffa 	bl	801bbf2 <USBD_LL_StallEP>
 8014bfe:	e00f      	b.n	8014c20 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8014c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	da0a      	bge.n	8014c1e <MSC_BOT_CplClrFeature+0x62>
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	7a5b      	ldrb	r3, [r3, #9]
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d006      	beq.n	8014c1e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014c10:	2101      	movs	r1, #1
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f7ff ff56 	bl	8014ac4 <MSC_BOT_SendCSW>
 8014c18:	e002      	b.n	8014c20 <MSC_BOT_CplClrFeature+0x64>
    return;
 8014c1a:	bf00      	nop
 8014c1c:	e000      	b.n	8014c20 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8014c1e:	bf00      	nop
  }
}
 8014c20:	3710      	adds	r7, #16
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	200000b2 	.word	0x200000b2
 8014c2c:	200000b3 	.word	0x200000b3

08014c30 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b086      	sub	sp, #24
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	60f8      	str	r0, [r7, #12]
 8014c38:	460b      	mov	r3, r1
 8014c3a:	607a      	str	r2, [r7, #4]
 8014c3c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	32b0      	adds	r2, #176	@ 0xb0
 8014c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c4c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d102      	bne.n	8014c5a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014c54:	f04f 33ff 	mov.w	r3, #4294967295
 8014c58:	e168      	b.n	8014f2c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	2baa      	cmp	r3, #170	@ 0xaa
 8014c60:	f000 8144 	beq.w	8014eec <SCSI_ProcessCmd+0x2bc>
 8014c64:	2baa      	cmp	r3, #170	@ 0xaa
 8014c66:	f300 8153 	bgt.w	8014f10 <SCSI_ProcessCmd+0x2e0>
 8014c6a:	2ba8      	cmp	r3, #168	@ 0xa8
 8014c6c:	f000 812c 	beq.w	8014ec8 <SCSI_ProcessCmd+0x298>
 8014c70:	2ba8      	cmp	r3, #168	@ 0xa8
 8014c72:	f300 814d 	bgt.w	8014f10 <SCSI_ProcessCmd+0x2e0>
 8014c76:	2b5a      	cmp	r3, #90	@ 0x5a
 8014c78:	f300 80c0 	bgt.w	8014dfc <SCSI_ProcessCmd+0x1cc>
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f2c0 8147 	blt.w	8014f10 <SCSI_ProcessCmd+0x2e0>
 8014c82:	2b5a      	cmp	r3, #90	@ 0x5a
 8014c84:	f200 8144 	bhi.w	8014f10 <SCSI_ProcessCmd+0x2e0>
 8014c88:	a201      	add	r2, pc, #4	@ (adr r2, 8014c90 <SCSI_ProcessCmd+0x60>)
 8014c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c8e:	bf00      	nop
 8014c90:	08014e03 	.word	0x08014e03
 8014c94:	08014f11 	.word	0x08014f11
 8014c98:	08014f11 	.word	0x08014f11
 8014c9c:	08014e15 	.word	0x08014e15
 8014ca0:	08014f11 	.word	0x08014f11
 8014ca4:	08014f11 	.word	0x08014f11
 8014ca8:	08014f11 	.word	0x08014f11
 8014cac:	08014f11 	.word	0x08014f11
 8014cb0:	08014f11 	.word	0x08014f11
 8014cb4:	08014f11 	.word	0x08014f11
 8014cb8:	08014f11 	.word	0x08014f11
 8014cbc:	08014f11 	.word	0x08014f11
 8014cc0:	08014f11 	.word	0x08014f11
 8014cc4:	08014f11 	.word	0x08014f11
 8014cc8:	08014f11 	.word	0x08014f11
 8014ccc:	08014f11 	.word	0x08014f11
 8014cd0:	08014f11 	.word	0x08014f11
 8014cd4:	08014f11 	.word	0x08014f11
 8014cd8:	08014e27 	.word	0x08014e27
 8014cdc:	08014f11 	.word	0x08014f11
 8014ce0:	08014f11 	.word	0x08014f11
 8014ce4:	08014f11 	.word	0x08014f11
 8014ce8:	08014f11 	.word	0x08014f11
 8014cec:	08014f11 	.word	0x08014f11
 8014cf0:	08014f11 	.word	0x08014f11
 8014cf4:	08014f11 	.word	0x08014f11
 8014cf8:	08014e5d 	.word	0x08014e5d
 8014cfc:	08014e39 	.word	0x08014e39
 8014d00:	08014f11 	.word	0x08014f11
 8014d04:	08014f11 	.word	0x08014f11
 8014d08:	08014e4b 	.word	0x08014e4b
 8014d0c:	08014f11 	.word	0x08014f11
 8014d10:	08014f11 	.word	0x08014f11
 8014d14:	08014f11 	.word	0x08014f11
 8014d18:	08014f11 	.word	0x08014f11
 8014d1c:	08014e81 	.word	0x08014e81
 8014d20:	08014f11 	.word	0x08014f11
 8014d24:	08014e93 	.word	0x08014e93
 8014d28:	08014f11 	.word	0x08014f11
 8014d2c:	08014f11 	.word	0x08014f11
 8014d30:	08014eb7 	.word	0x08014eb7
 8014d34:	08014f11 	.word	0x08014f11
 8014d38:	08014edb 	.word	0x08014edb
 8014d3c:	08014f11 	.word	0x08014f11
 8014d40:	08014f11 	.word	0x08014f11
 8014d44:	08014f11 	.word	0x08014f11
 8014d48:	08014f11 	.word	0x08014f11
 8014d4c:	08014eff 	.word	0x08014eff
 8014d50:	08014f11 	.word	0x08014f11
 8014d54:	08014f11 	.word	0x08014f11
 8014d58:	08014f11 	.word	0x08014f11
 8014d5c:	08014f11 	.word	0x08014f11
 8014d60:	08014f11 	.word	0x08014f11
 8014d64:	08014f11 	.word	0x08014f11
 8014d68:	08014f11 	.word	0x08014f11
 8014d6c:	08014f11 	.word	0x08014f11
 8014d70:	08014f11 	.word	0x08014f11
 8014d74:	08014f11 	.word	0x08014f11
 8014d78:	08014f11 	.word	0x08014f11
 8014d7c:	08014f11 	.word	0x08014f11
 8014d80:	08014f11 	.word	0x08014f11
 8014d84:	08014f11 	.word	0x08014f11
 8014d88:	08014f11 	.word	0x08014f11
 8014d8c:	08014f11 	.word	0x08014f11
 8014d90:	08014f11 	.word	0x08014f11
 8014d94:	08014f11 	.word	0x08014f11
 8014d98:	08014f11 	.word	0x08014f11
 8014d9c:	08014f11 	.word	0x08014f11
 8014da0:	08014f11 	.word	0x08014f11
 8014da4:	08014f11 	.word	0x08014f11
 8014da8:	08014f11 	.word	0x08014f11
 8014dac:	08014f11 	.word	0x08014f11
 8014db0:	08014f11 	.word	0x08014f11
 8014db4:	08014f11 	.word	0x08014f11
 8014db8:	08014f11 	.word	0x08014f11
 8014dbc:	08014f11 	.word	0x08014f11
 8014dc0:	08014f11 	.word	0x08014f11
 8014dc4:	08014f11 	.word	0x08014f11
 8014dc8:	08014f11 	.word	0x08014f11
 8014dcc:	08014f11 	.word	0x08014f11
 8014dd0:	08014f11 	.word	0x08014f11
 8014dd4:	08014f11 	.word	0x08014f11
 8014dd8:	08014f11 	.word	0x08014f11
 8014ddc:	08014f11 	.word	0x08014f11
 8014de0:	08014f11 	.word	0x08014f11
 8014de4:	08014f11 	.word	0x08014f11
 8014de8:	08014f11 	.word	0x08014f11
 8014dec:	08014f11 	.word	0x08014f11
 8014df0:	08014f11 	.word	0x08014f11
 8014df4:	08014f11 	.word	0x08014f11
 8014df8:	08014e6f 	.word	0x08014e6f
 8014dfc:	2b9e      	cmp	r3, #158	@ 0x9e
 8014dfe:	d051      	beq.n	8014ea4 <SCSI_ProcessCmd+0x274>
 8014e00:	e086      	b.n	8014f10 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8014e02:	7afb      	ldrb	r3, [r7, #11]
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	4619      	mov	r1, r3
 8014e08:	68f8      	ldr	r0, [r7, #12]
 8014e0a:	f000 f893 	bl	8014f34 <SCSI_TestUnitReady>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	75fb      	strb	r3, [r7, #23]
      break;
 8014e12:	e089      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014e14:	7afb      	ldrb	r3, [r7, #11]
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	4619      	mov	r1, r3
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f000 fb6c 	bl	80154f8 <SCSI_RequestSense>
 8014e20:	4603      	mov	r3, r0
 8014e22:	75fb      	strb	r3, [r7, #23]
      break;
 8014e24:	e080      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8014e26:	7afb      	ldrb	r3, [r7, #11]
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	68f8      	ldr	r0, [r7, #12]
 8014e2e:	f000 f8db 	bl	8014fe8 <SCSI_Inquiry>
 8014e32:	4603      	mov	r3, r0
 8014e34:	75fb      	strb	r3, [r7, #23]
      break;
 8014e36:	e077      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014e38:	7afb      	ldrb	r3, [r7, #11]
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	68f8      	ldr	r0, [r7, #12]
 8014e40:	f000 fc2e 	bl	80156a0 <SCSI_StartStopUnit>
 8014e44:	4603      	mov	r3, r0
 8014e46:	75fb      	strb	r3, [r7, #23]
      break;
 8014e48:	e06e      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014e4a:	7afb      	ldrb	r3, [r7, #11]
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	4619      	mov	r1, r3
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	f000 fc7a 	bl	801574a <SCSI_AllowPreventRemovable>
 8014e56:	4603      	mov	r3, r0
 8014e58:	75fb      	strb	r3, [r7, #23]
      break;
 8014e5a:	e065      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014e5c:	7afb      	ldrb	r3, [r7, #11]
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	4619      	mov	r1, r3
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f000 fae8 	bl	8015438 <SCSI_ModeSense6>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8014e6c:	e05c      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014e6e:	7afb      	ldrb	r3, [r7, #11]
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	4619      	mov	r1, r3
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f000 fb0f 	bl	8015498 <SCSI_ModeSense10>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8014e7e:	e053      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014e80:	7afb      	ldrb	r3, [r7, #11]
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	4619      	mov	r1, r3
 8014e86:	68f8      	ldr	r0, [r7, #12]
 8014e88:	f000 fa5b 	bl	8015342 <SCSI_ReadFormatCapacity>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8014e90:	e04a      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014e92:	7afb      	ldrb	r3, [r7, #11]
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	4619      	mov	r1, r3
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f000 f921 	bl	80150e0 <SCSI_ReadCapacity10>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8014ea2:	e041      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014ea4:	7afb      	ldrb	r3, [r7, #11]
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	68f8      	ldr	r0, [r7, #12]
 8014eac:	f000 f996 	bl	80151dc <SCSI_ReadCapacity16>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8014eb4:	e038      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014eb6:	7afb      	ldrb	r3, [r7, #11]
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f000 fc71 	bl	80157a4 <SCSI_Read10>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8014ec6:	e02f      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014ec8:	7afb      	ldrb	r3, [r7, #11]
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f000 fd12 	bl	80158f8 <SCSI_Read12>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8014ed8:	e026      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014eda:	7afb      	ldrb	r3, [r7, #11]
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	4619      	mov	r1, r3
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f000 fdbd 	bl	8015a60 <SCSI_Write10>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8014eea:	e01d      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8014eec:	7afb      	ldrb	r3, [r7, #11]
 8014eee:	687a      	ldr	r2, [r7, #4]
 8014ef0:	4619      	mov	r1, r3
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f000 fe8a 	bl	8015c0c <SCSI_Write12>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	75fb      	strb	r3, [r7, #23]
      break;
 8014efc:	e014      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8014efe:	7afb      	ldrb	r3, [r7, #11]
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	4619      	mov	r1, r3
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f000 ff67 	bl	8015dd8 <SCSI_Verify10>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8014f0e:	e00b      	b.n	8014f28 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014f10:	7af9      	ldrb	r1, [r7, #11]
 8014f12:	2320      	movs	r3, #32
 8014f14:	2205      	movs	r2, #5
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f000 fb74 	bl	8015604 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	2202      	movs	r2, #2
 8014f20:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8014f22:	23ff      	movs	r3, #255	@ 0xff
 8014f24:	75fb      	strb	r3, [r7, #23]
      break;
 8014f26:	bf00      	nop
  }

  return ret;
 8014f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b086      	sub	sp, #24
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	607a      	str	r2, [r7, #4]
 8014f40:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	32b0      	adds	r2, #176	@ 0xb0
 8014f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d102      	bne.n	8014f5e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8014f58:	f04f 33ff 	mov.w	r3, #4294967295
 8014f5c:	e03f      	b.n	8014fde <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d00a      	beq.n	8014f7e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014f6e:	2320      	movs	r3, #32
 8014f70:	2205      	movs	r2, #5
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f000 fb46 	bl	8015604 <SCSI_SenseCode>

    return -1;
 8014f78:	f04f 33ff 	mov.w	r3, #4294967295
 8014f7c:	e02f      	b.n	8014fde <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8014f84:	2b02      	cmp	r3, #2
 8014f86:	d10b      	bne.n	8014fa0 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014f88:	7af9      	ldrb	r1, [r7, #11]
 8014f8a:	233a      	movs	r3, #58	@ 0x3a
 8014f8c:	2202      	movs	r2, #2
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	f000 fb38 	bl	8015604 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	2205      	movs	r2, #5
 8014f98:	721a      	strb	r2, [r3, #8]
    return -1;
 8014f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f9e:	e01e      	b.n	8014fde <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014fa6:	68fa      	ldr	r2, [r7, #12]
 8014fa8:	33b0      	adds	r3, #176	@ 0xb0
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	4413      	add	r3, r2
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	689b      	ldr	r3, [r3, #8]
 8014fb2:	7afa      	ldrb	r2, [r7, #11]
 8014fb4:	4610      	mov	r0, r2
 8014fb6:	4798      	blx	r3
 8014fb8:	4603      	mov	r3, r0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d00b      	beq.n	8014fd6 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014fbe:	7af9      	ldrb	r1, [r7, #11]
 8014fc0:	233a      	movs	r3, #58	@ 0x3a
 8014fc2:	2202      	movs	r2, #2
 8014fc4:	68f8      	ldr	r0, [r7, #12]
 8014fc6:	f000 fb1d 	bl	8015604 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	2205      	movs	r2, #5
 8014fce:	721a      	strb	r2, [r3, #8]

    return -1;
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd4:	e003      	b.n	8014fde <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	60da      	str	r2, [r3, #12]

  return 0;
 8014fdc:	2300      	movs	r3, #0
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3718      	adds	r7, #24
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
	...

08014fe8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b088      	sub	sp, #32
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	460b      	mov	r3, r1
 8014ff2:	607a      	str	r2, [r7, #4]
 8014ff4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	32b0      	adds	r2, #176	@ 0xb0
 8015000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015004:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d102      	bne.n	8015012 <SCSI_Inquiry+0x2a>
  {
    return -1;
 801500c:	f04f 33ff 	mov.w	r3, #4294967295
 8015010:	e05e      	b.n	80150d0 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015018:	2b00      	cmp	r3, #0
 801501a:	d10a      	bne.n	8015032 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801501c:	69bb      	ldr	r3, [r7, #24]
 801501e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015022:	2320      	movs	r3, #32
 8015024:	2205      	movs	r2, #5
 8015026:	68f8      	ldr	r0, [r7, #12]
 8015028:	f000 faec 	bl	8015604 <SCSI_SenseCode>
    return -1;
 801502c:	f04f 33ff 	mov.w	r3, #4294967295
 8015030:	e04e      	b.n	80150d0 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	3301      	adds	r3, #1
 8015036:	781b      	ldrb	r3, [r3, #0]
 8015038:	f003 0301 	and.w	r3, r3, #1
 801503c:	2b00      	cmp	r3, #0
 801503e:	d020      	beq.n	8015082 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	3302      	adds	r3, #2
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d105      	bne.n	8015056 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801504a:	2206      	movs	r2, #6
 801504c:	4922      	ldr	r1, [pc, #136]	@ (80150d8 <SCSI_Inquiry+0xf0>)
 801504e:	69b8      	ldr	r0, [r7, #24]
 8015050:	f001 f848 	bl	80160e4 <SCSI_UpdateBotData>
 8015054:	e03b      	b.n	80150ce <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	3302      	adds	r3, #2
 801505a:	781b      	ldrb	r3, [r3, #0]
 801505c:	2b80      	cmp	r3, #128	@ 0x80
 801505e:	d105      	bne.n	801506c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8015060:	2208      	movs	r2, #8
 8015062:	491e      	ldr	r1, [pc, #120]	@ (80150dc <SCSI_Inquiry+0xf4>)
 8015064:	69b8      	ldr	r0, [r7, #24]
 8015066:	f001 f83d 	bl	80160e4 <SCSI_UpdateBotData>
 801506a:	e030      	b.n	80150ce <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801506c:	69bb      	ldr	r3, [r7, #24]
 801506e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015072:	2324      	movs	r3, #36	@ 0x24
 8015074:	2205      	movs	r2, #5
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	f000 fac4 	bl	8015604 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801507c:	f04f 33ff 	mov.w	r3, #4294967295
 8015080:	e026      	b.n	80150d0 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015088:	68fa      	ldr	r2, [r7, #12]
 801508a:	33b0      	adds	r3, #176	@ 0xb0
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	4413      	add	r3, r2
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	69d9      	ldr	r1, [r3, #28]
 8015094:	7afa      	ldrb	r2, [r7, #11]
 8015096:	4613      	mov	r3, r2
 8015098:	00db      	lsls	r3, r3, #3
 801509a:	4413      	add	r3, r2
 801509c:	009b      	lsls	r3, r3, #2
 801509e:	440b      	add	r3, r1
 80150a0:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	3304      	adds	r3, #4
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	3305      	adds	r3, #5
 80150aa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	3304      	adds	r3, #4
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	461a      	mov	r2, r3
 80150b4:	8bfb      	ldrh	r3, [r7, #30]
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d303      	bcc.n	80150c2 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	3304      	adds	r3, #4
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80150c2:	8bfb      	ldrh	r3, [r7, #30]
 80150c4:	461a      	mov	r2, r3
 80150c6:	6979      	ldr	r1, [r7, #20]
 80150c8:	69b8      	ldr	r0, [r7, #24]
 80150ca:	f001 f80b 	bl	80160e4 <SCSI_UpdateBotData>
  }

  return 0;
 80150ce:	2300      	movs	r3, #0
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3720      	adds	r7, #32
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	200000b4 	.word	0x200000b4
 80150dc:	200000bc 	.word	0x200000bc

080150e0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b086      	sub	sp, #24
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	460b      	mov	r3, r1
 80150ea:	607a      	str	r2, [r7, #4]
 80150ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	32b0      	adds	r2, #176	@ 0xb0
 80150f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d102      	bne.n	801510a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8015104:	f04f 33ff 	mov.w	r3, #4294967295
 8015108:	e064      	b.n	80151d4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	33b0      	adds	r3, #176	@ 0xb0
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	4413      	add	r3, r2
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	697a      	ldr	r2, [r7, #20]
 801511e:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8015122:	697a      	ldr	r2, [r7, #20]
 8015124:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8015128:	7af8      	ldrb	r0, [r7, #11]
 801512a:	4798      	blx	r3
 801512c:	4603      	mov	r3, r0
 801512e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8015130:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d104      	bne.n	8015142 <SCSI_ReadCapacity10+0x62>
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801513e:	2b02      	cmp	r3, #2
 8015140:	d108      	bne.n	8015154 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015142:	7af9      	ldrb	r1, [r7, #11]
 8015144:	233a      	movs	r3, #58	@ 0x3a
 8015146:	2202      	movs	r2, #2
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f000 fa5b 	bl	8015604 <SCSI_SenseCode>
    return -1;
 801514e:	f04f 33ff 	mov.w	r3, #4294967295
 8015152:	e03f      	b.n	80151d4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801515a:	3b01      	subs	r3, #1
 801515c:	0e1b      	lsrs	r3, r3, #24
 801515e:	b2da      	uxtb	r2, r3
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801516a:	3b01      	subs	r3, #1
 801516c:	0c1b      	lsrs	r3, r3, #16
 801516e:	b2da      	uxtb	r2, r3
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801517a:	3b01      	subs	r3, #1
 801517c:	0a1b      	lsrs	r3, r3, #8
 801517e:	b2da      	uxtb	r2, r3
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801518a:	b2db      	uxtb	r3, r3
 801518c:	3b01      	subs	r3, #1
 801518e:	b2da      	uxtb	r2, r3
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801519a:	161b      	asrs	r3, r3, #24
 801519c:	b2da      	uxtb	r2, r3
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80151a8:	141b      	asrs	r3, r3, #16
 80151aa:	b2da      	uxtb	r2, r3
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80151b6:	0a1b      	lsrs	r3, r3, #8
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	b2da      	uxtb	r2, r3
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80151c6:	b2da      	uxtb	r2, r3
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	2208      	movs	r2, #8
 80151d0:	60da      	str	r2, [r3, #12]

  return 0;
 80151d2:	2300      	movs	r3, #0

}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3718      	adds	r7, #24
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b088      	sub	sp, #32
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	460b      	mov	r3, r1
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	32b0      	adds	r2, #176	@ 0xb0
 80151f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151f8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d102      	bne.n	8015206 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8015200:	f04f 33ff 	mov.w	r3, #4294967295
 8015204:	e099      	b.n	801533a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801520c:	68fa      	ldr	r2, [r7, #12]
 801520e:	33b0      	adds	r3, #176	@ 0xb0
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	4413      	add	r3, r2
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	69ba      	ldr	r2, [r7, #24]
 801521a:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 801521e:	69ba      	ldr	r2, [r7, #24]
 8015220:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8015224:	7af8      	ldrb	r0, [r7, #11]
 8015226:	4798      	blx	r3
 8015228:	4603      	mov	r3, r0
 801522a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801522c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d104      	bne.n	801523e <SCSI_ReadCapacity16+0x62>
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801523a:	2b02      	cmp	r3, #2
 801523c:	d108      	bne.n	8015250 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801523e:	7af9      	ldrb	r1, [r7, #11]
 8015240:	233a      	movs	r3, #58	@ 0x3a
 8015242:	2202      	movs	r2, #2
 8015244:	68f8      	ldr	r0, [r7, #12]
 8015246:	f000 f9dd 	bl	8015604 <SCSI_SenseCode>
    return -1;
 801524a:	f04f 33ff 	mov.w	r3, #4294967295
 801524e:	e074      	b.n	801533a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	330a      	adds	r3, #10
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	330b      	adds	r3, #11
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015260:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	330c      	adds	r3, #12
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801526a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	320d      	adds	r2, #13
 8015270:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8015272:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015278:	2300      	movs	r3, #0
 801527a:	77fb      	strb	r3, [r7, #31]
 801527c:	e007      	b.n	801528e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 801527e:	7ffb      	ldrb	r3, [r7, #31]
 8015280:	69ba      	ldr	r2, [r7, #24]
 8015282:	4413      	add	r3, r2
 8015284:	2200      	movs	r2, #0
 8015286:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015288:	7ffb      	ldrb	r3, [r7, #31]
 801528a:	3301      	adds	r3, #1
 801528c:	77fb      	strb	r3, [r7, #31]
 801528e:	7ffa      	ldrb	r2, [r7, #31]
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	429a      	cmp	r2, r3
 8015296:	d3f2      	bcc.n	801527e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8015298:	69bb      	ldr	r3, [r7, #24]
 801529a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801529e:	3b01      	subs	r3, #1
 80152a0:	0e1b      	lsrs	r3, r3, #24
 80152a2:	b2da      	uxtb	r2, r3
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 80152ae:	3b01      	subs	r3, #1
 80152b0:	0c1b      	lsrs	r3, r3, #16
 80152b2:	b2da      	uxtb	r2, r3
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 80152be:	3b01      	subs	r3, #1
 80152c0:	0a1b      	lsrs	r3, r3, #8
 80152c2:	b2da      	uxtb	r2, r3
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80152c8:	69bb      	ldr	r3, [r7, #24]
 80152ca:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	3b01      	subs	r3, #1
 80152d2:	b2da      	uxtb	r2, r3
 80152d4:	69bb      	ldr	r3, [r7, #24]
 80152d6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80152de:	161b      	asrs	r3, r3, #24
 80152e0:	b2da      	uxtb	r2, r3
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80152ec:	141b      	asrs	r3, r3, #16
 80152ee:	b2da      	uxtb	r2, r3
 80152f0:	69bb      	ldr	r3, [r7, #24]
 80152f2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80152f4:	69bb      	ldr	r3, [r7, #24]
 80152f6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80152fa:	0a1b      	lsrs	r3, r3, #8
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	b2da      	uxtb	r2, r3
 8015300:	69bb      	ldr	r3, [r7, #24]
 8015302:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8015304:	69bb      	ldr	r3, [r7, #24]
 8015306:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801530a:	b2da      	uxtb	r2, r3
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	330a      	adds	r3, #10
 8015314:	781b      	ldrb	r3, [r3, #0]
 8015316:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	330b      	adds	r3, #11
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015320:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	330c      	adds	r3, #12
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801532a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	320d      	adds	r2, #13
 8015330:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8015332:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	60da      	str	r2, [r3, #12]

  return 0;
 8015338:	2300      	movs	r3, #0
}
 801533a:	4618      	mov	r0, r3
 801533c:	3720      	adds	r7, #32
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}

08015342 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015342:	b580      	push	{r7, lr}
 8015344:	b088      	sub	sp, #32
 8015346:	af00      	add	r7, sp, #0
 8015348:	60f8      	str	r0, [r7, #12]
 801534a:	460b      	mov	r3, r1
 801534c:	607a      	str	r2, [r7, #4]
 801534e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	32b0      	adds	r2, #176	@ 0xb0
 801535a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801535e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8015360:	69bb      	ldr	r3, [r7, #24]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d102      	bne.n	801536c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8015366:	f04f 33ff 	mov.w	r3, #4294967295
 801536a:	e061      	b.n	8015430 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015372:	68fa      	ldr	r2, [r7, #12]
 8015374:	33b0      	adds	r3, #176	@ 0xb0
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	4413      	add	r3, r2
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	f107 0214 	add.w	r2, r7, #20
 8015382:	f107 0110 	add.w	r1, r7, #16
 8015386:	7af8      	ldrb	r0, [r7, #11]
 8015388:	4798      	blx	r3
 801538a:	4603      	mov	r3, r0
 801538c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801538e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d104      	bne.n	80153a0 <SCSI_ReadFormatCapacity+0x5e>
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801539c:	2b02      	cmp	r3, #2
 801539e:	d108      	bne.n	80153b2 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80153a0:	7af9      	ldrb	r1, [r7, #11]
 80153a2:	233a      	movs	r3, #58	@ 0x3a
 80153a4:	2202      	movs	r2, #2
 80153a6:	68f8      	ldr	r0, [r7, #12]
 80153a8:	f000 f92c 	bl	8015604 <SCSI_SenseCode>
    return -1;
 80153ac:	f04f 33ff 	mov.w	r3, #4294967295
 80153b0:	e03e      	b.n	8015430 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80153b2:	2300      	movs	r3, #0
 80153b4:	83fb      	strh	r3, [r7, #30]
 80153b6:	e007      	b.n	80153c8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80153b8:	8bfb      	ldrh	r3, [r7, #30]
 80153ba:	69ba      	ldr	r2, [r7, #24]
 80153bc:	4413      	add	r3, r2
 80153be:	2200      	movs	r2, #0
 80153c0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80153c2:	8bfb      	ldrh	r3, [r7, #30]
 80153c4:	3301      	adds	r3, #1
 80153c6:	83fb      	strh	r3, [r7, #30]
 80153c8:	8bfb      	ldrh	r3, [r7, #30]
 80153ca:	2b0b      	cmp	r3, #11
 80153cc:	d9f4      	bls.n	80153b8 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	2208      	movs	r2, #8
 80153d2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	3b01      	subs	r3, #1
 80153d8:	0e1b      	lsrs	r3, r3, #24
 80153da:	b2da      	uxtb	r2, r3
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	3b01      	subs	r3, #1
 80153e4:	0c1b      	lsrs	r3, r3, #16
 80153e6:	b2da      	uxtb	r2, r3
 80153e8:	69bb      	ldr	r3, [r7, #24]
 80153ea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	3b01      	subs	r3, #1
 80153f0:	0a1b      	lsrs	r3, r3, #8
 80153f2:	b2da      	uxtb	r2, r3
 80153f4:	69bb      	ldr	r3, [r7, #24]
 80153f6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	3b01      	subs	r3, #1
 80153fe:	b2da      	uxtb	r2, r3
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8015404:	69bb      	ldr	r3, [r7, #24]
 8015406:	2202      	movs	r2, #2
 8015408:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801540a:	8abb      	ldrh	r3, [r7, #20]
 801540c:	141b      	asrs	r3, r3, #16
 801540e:	b2da      	uxtb	r2, r3
 8015410:	69bb      	ldr	r3, [r7, #24]
 8015412:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8015414:	8abb      	ldrh	r3, [r7, #20]
 8015416:	0a1b      	lsrs	r3, r3, #8
 8015418:	b29b      	uxth	r3, r3
 801541a:	b2da      	uxtb	r2, r3
 801541c:	69bb      	ldr	r3, [r7, #24]
 801541e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8015420:	8abb      	ldrh	r3, [r7, #20]
 8015422:	b2da      	uxtb	r2, r3
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	220c      	movs	r2, #12
 801542c:	60da      	str	r2, [r3, #12]

  return 0;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3720      	adds	r7, #32
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b086      	sub	sp, #24
 801543c:	af00      	add	r7, sp, #0
 801543e:	60f8      	str	r0, [r7, #12]
 8015440:	460b      	mov	r3, r1
 8015442:	607a      	str	r2, [r7, #4]
 8015444:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	32b0      	adds	r2, #176	@ 0xb0
 8015450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015454:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8015456:	2317      	movs	r3, #23
 8015458:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d102      	bne.n	8015466 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8015460:	f04f 33ff 	mov.w	r3, #4294967295
 8015464:	e011      	b.n	801548a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	3304      	adds	r3, #4
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	461a      	mov	r2, r3
 801546e:	8afb      	ldrh	r3, [r7, #22]
 8015470:	4293      	cmp	r3, r2
 8015472:	d303      	bcc.n	801547c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	3304      	adds	r3, #4
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801547c:	8afb      	ldrh	r3, [r7, #22]
 801547e:	461a      	mov	r2, r3
 8015480:	4904      	ldr	r1, [pc, #16]	@ (8015494 <SCSI_ModeSense6+0x5c>)
 8015482:	6938      	ldr	r0, [r7, #16]
 8015484:	f000 fe2e 	bl	80160e4 <SCSI_UpdateBotData>

  return 0;
 8015488:	2300      	movs	r3, #0
}
 801548a:	4618      	mov	r0, r3
 801548c:	3718      	adds	r7, #24
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	200000c4 	.word	0x200000c4

08015498 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b086      	sub	sp, #24
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	460b      	mov	r3, r1
 80154a2:	607a      	str	r2, [r7, #4]
 80154a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	32b0      	adds	r2, #176	@ 0xb0
 80154b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80154b6:	231b      	movs	r3, #27
 80154b8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d102      	bne.n	80154c6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80154c0:	f04f 33ff 	mov.w	r3, #4294967295
 80154c4:	e011      	b.n	80154ea <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	3308      	adds	r3, #8
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	461a      	mov	r2, r3
 80154ce:	8afb      	ldrh	r3, [r7, #22]
 80154d0:	4293      	cmp	r3, r2
 80154d2:	d303      	bcc.n	80154dc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	3308      	adds	r3, #8
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80154dc:	8afb      	ldrh	r3, [r7, #22]
 80154de:	461a      	mov	r2, r3
 80154e0:	4904      	ldr	r1, [pc, #16]	@ (80154f4 <SCSI_ModeSense10+0x5c>)
 80154e2:	6938      	ldr	r0, [r7, #16]
 80154e4:	f000 fdfe 	bl	80160e4 <SCSI_UpdateBotData>

  return 0;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3718      	adds	r7, #24
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	200000dc 	.word	0x200000dc

080154f8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b086      	sub	sp, #24
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	460b      	mov	r3, r1
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	32b0      	adds	r2, #176	@ 0xb0
 8015510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015514:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d102      	bne.n	8015522 <SCSI_RequestSense+0x2a>
  {
    return -1;
 801551c:	f04f 33ff 	mov.w	r3, #4294967295
 8015520:	e06c      	b.n	80155fc <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10a      	bne.n	8015542 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015532:	2320      	movs	r3, #32
 8015534:	2205      	movs	r2, #5
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f000 f864 	bl	8015604 <SCSI_SenseCode>
    return -1;
 801553c:	f04f 33ff 	mov.w	r3, #4294967295
 8015540:	e05c      	b.n	80155fc <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8015542:	2300      	movs	r3, #0
 8015544:	75fb      	strb	r3, [r7, #23]
 8015546:	e007      	b.n	8015558 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8015548:	7dfb      	ldrb	r3, [r7, #23]
 801554a:	693a      	ldr	r2, [r7, #16]
 801554c:	4413      	add	r3, r2
 801554e:	2200      	movs	r2, #0
 8015550:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8015552:	7dfb      	ldrb	r3, [r7, #23]
 8015554:	3301      	adds	r3, #1
 8015556:	75fb      	strb	r3, [r7, #23]
 8015558:	7dfb      	ldrb	r3, [r7, #23]
 801555a:	2b11      	cmp	r3, #17
 801555c:	d9f4      	bls.n	8015548 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	2270      	movs	r2, #112	@ 0x70
 8015562:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	220c      	movs	r2, #12
 8015568:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015576:	429a      	cmp	r2, r3
 8015578:	d031      	beq.n	80155de <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8015580:	461a      	mov	r2, r3
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8015588:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8015596:	693a      	ldr	r2, [r7, #16]
 8015598:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801559c:	00db      	lsls	r3, r3, #3
 801559e:	4413      	add	r3, r2
 80155a0:	791a      	ldrb	r2, [r3, #4]
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 80155ac:	693a      	ldr	r2, [r7, #16]
 80155ae:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80155b2:	00db      	lsls	r3, r3, #3
 80155b4:	4413      	add	r3, r2
 80155b6:	795a      	ldrb	r2, [r3, #5]
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80155bc:	693b      	ldr	r3, [r7, #16]
 80155be:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 80155c2:	3301      	adds	r3, #1
 80155c4:	b2da      	uxtb	r2, r3
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 80155d2:	2b04      	cmp	r3, #4
 80155d4:	d103      	bne.n	80155de <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 80155d6:	693b      	ldr	r3, [r7, #16]
 80155d8:	2200      	movs	r2, #0
 80155da:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	2212      	movs	r2, #18
 80155e2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	3304      	adds	r3, #4
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	2b12      	cmp	r3, #18
 80155ec:	d805      	bhi.n	80155fa <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	3304      	adds	r3, #4
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	461a      	mov	r2, r3
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80155fa:	2300      	movs	r3, #0
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3718      	adds	r7, #24
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}

08015604 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8015604:	b480      	push	{r7}
 8015606:	b085      	sub	sp, #20
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	4608      	mov	r0, r1
 801560e:	4611      	mov	r1, r2
 8015610:	461a      	mov	r2, r3
 8015612:	4603      	mov	r3, r0
 8015614:	70fb      	strb	r3, [r7, #3]
 8015616:	460b      	mov	r3, r1
 8015618:	70bb      	strb	r3, [r7, #2]
 801561a:	4613      	mov	r3, r2
 801561c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	32b0      	adds	r2, #176	@ 0xb0
 8015628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d02f      	beq.n	8015694 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801563a:	461a      	mov	r2, r3
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8015642:	78b9      	ldrb	r1, [r7, #2]
 8015644:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801564e:	68fa      	ldr	r2, [r7, #12]
 8015650:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015654:	00db      	lsls	r3, r3, #3
 8015656:	4413      	add	r3, r2
 8015658:	787a      	ldrb	r2, [r7, #1]
 801565a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015662:	68fa      	ldr	r2, [r7, #12]
 8015664:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015668:	00db      	lsls	r3, r3, #3
 801566a:	4413      	add	r3, r2
 801566c:	2200      	movs	r2, #0
 801566e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015676:	3301      	adds	r3, #1
 8015678:	b2da      	uxtb	r2, r3
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015686:	2b04      	cmp	r3, #4
 8015688:	d105      	bne.n	8015696 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2200      	movs	r2, #0
 801568e:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 8015692:	e000      	b.n	8015696 <SCSI_SenseCode+0x92>
    return;
 8015694:	bf00      	nop
  }
}
 8015696:	3714      	adds	r7, #20
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr

080156a0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	460b      	mov	r3, r1
 80156aa:	607a      	str	r2, [r7, #4]
 80156ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	32b0      	adds	r2, #176	@ 0xb0
 80156b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d102      	bne.n	80156ca <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80156c4:	f04f 33ff 	mov.w	r3, #4294967295
 80156c8:	e03b      	b.n	8015742 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d10f      	bne.n	80156f4 <SCSI_StartStopUnit+0x54>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	3304      	adds	r3, #4
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	f003 0303 	and.w	r3, r3, #3
 80156de:	2b02      	cmp	r3, #2
 80156e0:	d108      	bne.n	80156f4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80156e2:	7af9      	ldrb	r1, [r7, #11]
 80156e4:	2324      	movs	r3, #36	@ 0x24
 80156e6:	2205      	movs	r2, #5
 80156e8:	68f8      	ldr	r0, [r7, #12]
 80156ea:	f7ff ff8b 	bl	8015604 <SCSI_SenseCode>

    return -1;
 80156ee:	f04f 33ff 	mov.w	r3, #4294967295
 80156f2:	e026      	b.n	8015742 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	3304      	adds	r3, #4
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f003 0303 	and.w	r3, r3, #3
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d104      	bne.n	801570c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	2200      	movs	r2, #0
 8015706:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801570a:	e016      	b.n	801573a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	3304      	adds	r3, #4
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	f003 0303 	and.w	r3, r3, #3
 8015716:	2b02      	cmp	r3, #2
 8015718:	d104      	bne.n	8015724 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	2202      	movs	r2, #2
 801571e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8015722:	e00a      	b.n	801573a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	3304      	adds	r3, #4
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	f003 0303 	and.w	r3, r3, #3
 801572e:	2b03      	cmp	r3, #3
 8015730:	d103      	bne.n	801573a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	2200      	movs	r2, #0
 8015736:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	2200      	movs	r2, #0
 801573e:	60da      	str	r2, [r3, #12]

  return 0;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3718      	adds	r7, #24
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801574a:	b480      	push	{r7}
 801574c:	b087      	sub	sp, #28
 801574e:	af00      	add	r7, sp, #0
 8015750:	60f8      	str	r0, [r7, #12]
 8015752:	460b      	mov	r3, r1
 8015754:	607a      	str	r2, [r7, #4]
 8015756:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	32b0      	adds	r2, #176	@ 0xb0
 8015762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015766:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d102      	bne.n	8015774 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801576e:	f04f 33ff 	mov.w	r3, #4294967295
 8015772:	e011      	b.n	8015798 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	3304      	adds	r3, #4
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d104      	bne.n	8015788 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	2200      	movs	r2, #0
 8015782:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8015786:	e003      	b.n	8015790 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	2201      	movs	r2, #1
 801578c:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	2200      	movs	r2, #0
 8015794:	60da      	str	r2, [r3, #12]

  return 0;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	371c      	adds	r7, #28
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b086      	sub	sp, #24
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	60f8      	str	r0, [r7, #12]
 80157ac:	460b      	mov	r3, r1
 80157ae:	607a      	str	r2, [r7, #4]
 80157b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	32b0      	adds	r2, #176	@ 0xb0
 80157bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d102      	bne.n	80157ce <SCSI_Read10+0x2a>
  {
    return -1;
 80157c8:	f04f 33ff 	mov.w	r3, #4294967295
 80157cc:	e090      	b.n	80158f0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	7a1b      	ldrb	r3, [r3, #8]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	f040 8082 	bne.w	80158dc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80157de:	b25b      	sxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	db0a      	blt.n	80157fa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80157ea:	2320      	movs	r3, #32
 80157ec:	2205      	movs	r2, #5
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f7ff ff08 	bl	8015604 <SCSI_SenseCode>
      return -1;
 80157f4:	f04f 33ff 	mov.w	r3, #4294967295
 80157f8:	e07a      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015800:	2b02      	cmp	r3, #2
 8015802:	d108      	bne.n	8015816 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015804:	7af9      	ldrb	r1, [r7, #11]
 8015806:	233a      	movs	r3, #58	@ 0x3a
 8015808:	2202      	movs	r2, #2
 801580a:	68f8      	ldr	r0, [r7, #12]
 801580c:	f7ff fefa 	bl	8015604 <SCSI_SenseCode>

      return -1;
 8015810:	f04f 33ff 	mov.w	r3, #4294967295
 8015814:	e06c      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	33b0      	adds	r3, #176	@ 0xb0
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	4413      	add	r3, r2
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	7afa      	ldrb	r2, [r7, #11]
 801582a:	4610      	mov	r0, r2
 801582c:	4798      	blx	r3
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d008      	beq.n	8015846 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015834:	7af9      	ldrb	r1, [r7, #11]
 8015836:	233a      	movs	r3, #58	@ 0x3a
 8015838:	2202      	movs	r2, #2
 801583a:	68f8      	ldr	r0, [r7, #12]
 801583c:	f7ff fee2 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015840:	f04f 33ff 	mov.w	r3, #4294967295
 8015844:	e054      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	3302      	adds	r3, #2
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	3303      	adds	r3, #3
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015856:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	3304      	adds	r3, #4
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015860:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	3205      	adds	r2, #5
 8015866:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015868:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	3307      	adds	r3, #7
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	021b      	lsls	r3, r3, #8
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	3208      	adds	r2, #8
 801587c:	7812      	ldrb	r2, [r2, #0]
 801587e:	431a      	orrs	r2, r3
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015892:	7af9      	ldrb	r1, [r7, #11]
 8015894:	68f8      	ldr	r0, [r7, #12]
 8015896:	f000 fadc 	bl	8015e52 <SCSI_CheckAddressRange>
 801589a:	4603      	mov	r3, r0
 801589c:	2b00      	cmp	r3, #0
 801589e:	da02      	bge.n	80158a6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80158a0:	f04f 33ff 	mov.w	r3, #4294967295
 80158a4:	e024      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80158b2:	6979      	ldr	r1, [r7, #20]
 80158b4:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80158b8:	fb01 f303 	mul.w	r3, r1, r3
 80158bc:	429a      	cmp	r2, r3
 80158be:	d00a      	beq.n	80158d6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80158c6:	2320      	movs	r3, #32
 80158c8:	2205      	movs	r2, #5
 80158ca:	68f8      	ldr	r0, [r7, #12]
 80158cc:	f7ff fe9a 	bl	8015604 <SCSI_SenseCode>
      return -1;
 80158d0:	f04f 33ff 	mov.w	r3, #4294967295
 80158d4:	e00c      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	2202      	movs	r2, #2
 80158da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80158dc:	697b      	ldr	r3, [r7, #20]
 80158de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80158e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80158e4:	7afb      	ldrb	r3, [r7, #11]
 80158e6:	4619      	mov	r1, r3
 80158e8:	68f8      	ldr	r0, [r7, #12]
 80158ea:	f000 fadf 	bl	8015eac <SCSI_ProcessRead>
 80158ee:	4603      	mov	r3, r0
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3718      	adds	r7, #24
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b086      	sub	sp, #24
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	460b      	mov	r3, r1
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	32b0      	adds	r2, #176	@ 0xb0
 8015910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015914:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d102      	bne.n	8015922 <SCSI_Read12+0x2a>
  {
    return -1;
 801591c:	f04f 33ff 	mov.w	r3, #4294967295
 8015920:	e09a      	b.n	8015a58 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	7a1b      	ldrb	r3, [r3, #8]
 8015926:	2b00      	cmp	r3, #0
 8015928:	f040 808c 	bne.w	8015a44 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015932:	b25b      	sxtb	r3, r3
 8015934:	2b00      	cmp	r3, #0
 8015936:	db0a      	blt.n	801594e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801593e:	2320      	movs	r3, #32
 8015940:	2205      	movs	r2, #5
 8015942:	68f8      	ldr	r0, [r7, #12]
 8015944:	f7ff fe5e 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015948:	f04f 33ff 	mov.w	r3, #4294967295
 801594c:	e084      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015954:	2b02      	cmp	r3, #2
 8015956:	d108      	bne.n	801596a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015958:	7af9      	ldrb	r1, [r7, #11]
 801595a:	233a      	movs	r3, #58	@ 0x3a
 801595c:	2202      	movs	r2, #2
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	f7ff fe50 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015964:	f04f 33ff 	mov.w	r3, #4294967295
 8015968:	e076      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015970:	68fa      	ldr	r2, [r7, #12]
 8015972:	33b0      	adds	r3, #176	@ 0xb0
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	4413      	add	r3, r2
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	7afa      	ldrb	r2, [r7, #11]
 801597e:	4610      	mov	r0, r2
 8015980:	4798      	blx	r3
 8015982:	4603      	mov	r3, r0
 8015984:	2b00      	cmp	r3, #0
 8015986:	d008      	beq.n	801599a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015988:	7af9      	ldrb	r1, [r7, #11]
 801598a:	233a      	movs	r3, #58	@ 0x3a
 801598c:	2202      	movs	r2, #2
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f7ff fe38 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015994:	f04f 33ff 	mov.w	r3, #4294967295
 8015998:	e05e      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	3302      	adds	r3, #2
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	3303      	adds	r3, #3
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80159aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	3304      	adds	r3, #4
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80159b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	3205      	adds	r2, #5
 80159ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80159bc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	3306      	adds	r3, #6
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	3307      	adds	r3, #7
 80159d0:	781b      	ldrb	r3, [r3, #0]
 80159d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80159d4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	3308      	adds	r3, #8
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80159de:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	3209      	adds	r2, #9
 80159e4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80159e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80159fa:	7af9      	ldrb	r1, [r7, #11]
 80159fc:	68f8      	ldr	r0, [r7, #12]
 80159fe:	f000 fa28 	bl	8015e52 <SCSI_CheckAddressRange>
 8015a02:	4603      	mov	r3, r0
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	da02      	bge.n	8015a0e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015a08:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0c:	e024      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8015a14:	697b      	ldr	r3, [r7, #20]
 8015a16:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015a1a:	6979      	ldr	r1, [r7, #20]
 8015a1c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8015a20:	fb01 f303 	mul.w	r3, r1, r3
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d00a      	beq.n	8015a3e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015a2e:	2320      	movs	r3, #32
 8015a30:	2205      	movs	r2, #5
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7ff fde6 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015a38:	f04f 33ff 	mov.w	r3, #4294967295
 8015a3c:	e00c      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	2202      	movs	r2, #2
 8015a42:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015a4a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015a4c:	7afb      	ldrb	r3, [r7, #11]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	68f8      	ldr	r0, [r7, #12]
 8015a52:	f000 fa2b 	bl	8015eac <SCSI_ProcessRead>
 8015a56:	4603      	mov	r3, r0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3718      	adds	r7, #24
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	460b      	mov	r3, r1
 8015a6a:	607a      	str	r2, [r7, #4]
 8015a6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	32b0      	adds	r2, #176	@ 0xb0
 8015a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d102      	bne.n	8015a8a <SCSI_Write10+0x2a>
  {
    return -1;
 8015a84:	f04f 33ff 	mov.w	r3, #4294967295
 8015a88:	e0ba      	b.n	8015c00 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	7a1b      	ldrb	r3, [r3, #8]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	f040 80b0 	bne.w	8015bf4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d10a      	bne.n	8015ab4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015aa4:	2320      	movs	r3, #32
 8015aa6:	2205      	movs	r2, #5
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f7ff fdab 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015aae:	f04f 33ff 	mov.w	r3, #4294967295
 8015ab2:	e0a5      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015ab4:	697b      	ldr	r3, [r7, #20]
 8015ab6:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015aba:	b25b      	sxtb	r3, r3
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	da0a      	bge.n	8015ad6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015ac6:	2320      	movs	r3, #32
 8015ac8:	2205      	movs	r2, #5
 8015aca:	68f8      	ldr	r0, [r7, #12]
 8015acc:	f7ff fd9a 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ad4:	e094      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015adc:	68fa      	ldr	r2, [r7, #12]
 8015ade:	33b0      	adds	r3, #176	@ 0xb0
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	7afa      	ldrb	r2, [r7, #11]
 8015aea:	4610      	mov	r0, r2
 8015aec:	4798      	blx	r3
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d008      	beq.n	8015b06 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015af4:	7af9      	ldrb	r1, [r7, #11]
 8015af6:	233a      	movs	r3, #58	@ 0x3a
 8015af8:	2202      	movs	r2, #2
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	f7ff fd82 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015b00:	f04f 33ff 	mov.w	r3, #4294967295
 8015b04:	e07c      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b0c:	68fa      	ldr	r2, [r7, #12]
 8015b0e:	33b0      	adds	r3, #176	@ 0xb0
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	4413      	add	r3, r2
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	68db      	ldr	r3, [r3, #12]
 8015b18:	7afa      	ldrb	r2, [r7, #11]
 8015b1a:	4610      	mov	r0, r2
 8015b1c:	4798      	blx	r3
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d008      	beq.n	8015b36 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015b24:	7af9      	ldrb	r1, [r7, #11]
 8015b26:	2327      	movs	r3, #39	@ 0x27
 8015b28:	2202      	movs	r2, #2
 8015b2a:	68f8      	ldr	r0, [r7, #12]
 8015b2c:	f7ff fd6a 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015b30:	f04f 33ff 	mov.w	r3, #4294967295
 8015b34:	e064      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3302      	adds	r3, #2
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	3303      	adds	r3, #3
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b46:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	3304      	adds	r3, #4
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015b50:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	3205      	adds	r2, #5
 8015b56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015b58:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	3307      	adds	r3, #7
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	3208      	adds	r2, #8
 8015b6c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015b6e:	431a      	orrs	r2, r3
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015b82:	7af9      	ldrb	r1, [r7, #11]
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f000 f964 	bl	8015e52 <SCSI_CheckAddressRange>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	da02      	bge.n	8015b96 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015b90:	f04f 33ff 	mov.w	r3, #4294967295
 8015b94:	e034      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015b9c:	697a      	ldr	r2, [r7, #20]
 8015b9e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015ba2:	fb02 f303 	mul.w	r3, r2, r3
 8015ba6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015bae:	693a      	ldr	r2, [r7, #16]
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d00a      	beq.n	8015bca <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015bba:	2320      	movs	r3, #32
 8015bbc:	2205      	movs	r2, #5
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	f7ff fd20 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc8:	e01a      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015bd0:	bf28      	it	cs
 8015bd2:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015bd6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015bde:	4b0a      	ldr	r3, [pc, #40]	@ (8015c08 <SCSI_Write10+0x1a8>)
 8015be0:	7819      	ldrb	r1, [r3, #0]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	f103 0210 	add.w	r2, r3, #16
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f006 f8ab 	bl	801bd46 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e005      	b.n	8015c00 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8015bf4:	7afb      	ldrb	r3, [r7, #11]
 8015bf6:	4619      	mov	r1, r3
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f000 f9dd 	bl	8015fb8 <SCSI_ProcessWrite>
 8015bfe:	4603      	mov	r3, r0
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3718      	adds	r7, #24
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	200000b3 	.word	0x200000b3

08015c0c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b086      	sub	sp, #24
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	460b      	mov	r3, r1
 8015c16:	607a      	str	r2, [r7, #4]
 8015c18:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	32b0      	adds	r2, #176	@ 0xb0
 8015c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c28:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d102      	bne.n	8015c36 <SCSI_Write12+0x2a>
  {
    return -1;
 8015c30:	f04f 33ff 	mov.w	r3, #4294967295
 8015c34:	e0ca      	b.n	8015dcc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	7a1b      	ldrb	r3, [r3, #8]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f040 80c0 	bne.w	8015dc0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d10a      	bne.n	8015c60 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015c50:	2320      	movs	r3, #32
 8015c52:	2205      	movs	r2, #5
 8015c54:	68f8      	ldr	r0, [r7, #12]
 8015c56:	f7ff fcd5 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c5e:	e0b5      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015c66:	b25b      	sxtb	r3, r3
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	da0a      	bge.n	8015c82 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015c72:	2320      	movs	r3, #32
 8015c74:	2205      	movs	r2, #5
 8015c76:	68f8      	ldr	r0, [r7, #12]
 8015c78:	f7ff fcc4 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c80:	e0a4      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c88:	68fa      	ldr	r2, [r7, #12]
 8015c8a:	33b0      	adds	r3, #176	@ 0xb0
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	4413      	add	r3, r2
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	689b      	ldr	r3, [r3, #8]
 8015c94:	7afa      	ldrb	r2, [r7, #11]
 8015c96:	4610      	mov	r0, r2
 8015c98:	4798      	blx	r3
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d00b      	beq.n	8015cb8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015ca0:	7af9      	ldrb	r1, [r7, #11]
 8015ca2:	233a      	movs	r3, #58	@ 0x3a
 8015ca4:	2202      	movs	r2, #2
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f7ff fcac 	bl	8015604 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	2205      	movs	r2, #5
 8015cb0:	721a      	strb	r2, [r3, #8]
      return -1;
 8015cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8015cb6:	e089      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	33b0      	adds	r3, #176	@ 0xb0
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	4413      	add	r3, r2
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	68db      	ldr	r3, [r3, #12]
 8015cca:	7afa      	ldrb	r2, [r7, #11]
 8015ccc:	4610      	mov	r0, r2
 8015cce:	4798      	blx	r3
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d00b      	beq.n	8015cee <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015cd6:	7af9      	ldrb	r1, [r7, #11]
 8015cd8:	2327      	movs	r3, #39	@ 0x27
 8015cda:	2202      	movs	r2, #2
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f7ff fc91 	bl	8015604 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	2205      	movs	r2, #5
 8015ce6:	721a      	strb	r2, [r3, #8]
      return -1;
 8015ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cec:	e06e      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	3302      	adds	r3, #2
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	3303      	adds	r3, #3
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015cfe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	3304      	adds	r3, #4
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015d08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015d0a:	687a      	ldr	r2, [r7, #4]
 8015d0c:	3205      	adds	r2, #5
 8015d0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015d10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	3306      	adds	r3, #6
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	3307      	adds	r3, #7
 8015d24:	781b      	ldrb	r3, [r3, #0]
 8015d26:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d28:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	3308      	adds	r3, #8
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015d32:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	3209      	adds	r2, #9
 8015d38:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015d3a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015d4e:	7af9      	ldrb	r1, [r7, #11]
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	f000 f87e 	bl	8015e52 <SCSI_CheckAddressRange>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	da02      	bge.n	8015d62 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d60:	e034      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015d68:	697a      	ldr	r2, [r7, #20]
 8015d6a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015d6e:	fb02 f303 	mul.w	r3, r2, r3
 8015d72:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015d7a:	693a      	ldr	r2, [r7, #16]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d00a      	beq.n	8015d96 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015d86:	2320      	movs	r3, #32
 8015d88:	2205      	movs	r2, #5
 8015d8a:	68f8      	ldr	r0, [r7, #12]
 8015d8c:	f7ff fc3a 	bl	8015604 <SCSI_SenseCode>
      return -1;
 8015d90:	f04f 33ff 	mov.w	r3, #4294967295
 8015d94:	e01a      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015d9c:	bf28      	it	cs
 8015d9e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015da2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	2201      	movs	r2, #1
 8015da8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015daa:	4b0a      	ldr	r3, [pc, #40]	@ (8015dd4 <SCSI_Write12+0x1c8>)
 8015dac:	7819      	ldrb	r1, [r3, #0]
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	f103 0210 	add.w	r2, r3, #16
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	68f8      	ldr	r0, [r7, #12]
 8015db8:	f005 ffc5 	bl	801bd46 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	e005      	b.n	8015dcc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8015dc0:	7afb      	ldrb	r3, [r7, #11]
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f000 f8f7 	bl	8015fb8 <SCSI_ProcessWrite>
 8015dca:	4603      	mov	r3, r0
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3718      	adds	r7, #24
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	200000b3 	.word	0x200000b3

08015dd8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	460b      	mov	r3, r1
 8015de2:	607a      	str	r2, [r7, #4]
 8015de4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	32b0      	adds	r2, #176	@ 0xb0
 8015df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015df4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d102      	bne.n	8015e02 <SCSI_Verify10+0x2a>
  {
    return -1;
 8015dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015e00:	e023      	b.n	8015e4a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	3301      	adds	r3, #1
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	f003 0302 	and.w	r3, r3, #2
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d008      	beq.n	8015e22 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015e10:	7af9      	ldrb	r1, [r7, #11]
 8015e12:	2324      	movs	r3, #36	@ 0x24
 8015e14:	2205      	movs	r2, #5
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7ff fbf4 	bl	8015604 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e20:	e013      	b.n	8015e4a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015e2e:	7af9      	ldrb	r1, [r7, #11]
 8015e30:	68f8      	ldr	r0, [r7, #12]
 8015e32:	f000 f80e 	bl	8015e52 <SCSI_CheckAddressRange>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	da02      	bge.n	8015e42 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8015e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e40:	e003      	b.n	8015e4a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	2200      	movs	r2, #0
 8015e46:	60da      	str	r2, [r3, #12]

  return 0;
 8015e48:	2300      	movs	r3, #0
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3718      	adds	r7, #24
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b086      	sub	sp, #24
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	60f8      	str	r0, [r7, #12]
 8015e5a:	607a      	str	r2, [r7, #4]
 8015e5c:	603b      	str	r3, [r7, #0]
 8015e5e:	460b      	mov	r3, r1
 8015e60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	32b0      	adds	r2, #176	@ 0xb0
 8015e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d102      	bne.n	8015e7e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015e78:	f04f 33ff 	mov.w	r3, #4294967295
 8015e7c:	e011      	b.n	8015ea2 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	441a      	add	r2, r3
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d908      	bls.n	8015ea0 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015e8e:	7af9      	ldrb	r1, [r7, #11]
 8015e90:	2321      	movs	r3, #33	@ 0x21
 8015e92:	2205      	movs	r2, #5
 8015e94:	68f8      	ldr	r0, [r7, #12]
 8015e96:	f7ff fbb5 	bl	8015604 <SCSI_SenseCode>
    return -1;
 8015e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e9e:	e000      	b.n	8015ea2 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015ea0:	2300      	movs	r3, #0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3718      	adds	r7, #24
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}
	...

08015eac <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015eac:	b590      	push	{r4, r7, lr}
 8015eae:	b085      	sub	sp, #20
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	32b0      	adds	r2, #176	@ 0xb0
 8015ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d102      	bne.n	8015ed4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8015ece:	f04f 33ff 	mov.w	r3, #4294967295
 8015ed2:	e06a      	b.n	8015faa <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015eda:	68fa      	ldr	r2, [r7, #12]
 8015edc:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015ee0:	fb02 f303 	mul.w	r3, r2, r3
 8015ee4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015eec:	bf28      	it	cs
 8015eee:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015ef2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	33b0      	adds	r3, #176	@ 0xb0
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4413      	add	r3, r2
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	691c      	ldr	r4, [r3, #16]
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	f103 0110 	add.w	r1, r3, #16
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015f18:	4618      	mov	r0, r3
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015f20:	b29b      	uxth	r3, r3
 8015f22:	78f8      	ldrb	r0, [r7, #3]
 8015f24:	47a0      	blx	r4
 8015f26:	4603      	mov	r3, r0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	da08      	bge.n	8015f3e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015f2c:	78f9      	ldrb	r1, [r7, #3]
 8015f2e:	2311      	movs	r3, #17
 8015f30:	2204      	movs	r2, #4
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ff fb66 	bl	8015604 <SCSI_SenseCode>
    return -1;
 8015f38:	f04f 33ff 	mov.w	r3, #4294967295
 8015f3c:	e035      	b.n	8015faa <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8015f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8015fb4 <SCSI_ProcessRead+0x108>)
 8015f40:	7819      	ldrb	r1, [r3, #0]
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f103 0210 	add.w	r2, r3, #16
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f005 feda 	bl	801bd04 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f64:	441a      	add	r2, r3
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015f78:	4619      	mov	r1, r3
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f80:	1ad2      	subs	r2, r2, r3
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	1ad2      	subs	r2, r2, r3
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d102      	bne.n	8015fa8 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	2203      	movs	r2, #3
 8015fa6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015fa8:	2300      	movs	r3, #0
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3714      	adds	r7, #20
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd90      	pop	{r4, r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	200000b2 	.word	0x200000b2

08015fb8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015fb8:	b590      	push	{r4, r7, lr}
 8015fba:	b085      	sub	sp, #20
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	32b0      	adds	r2, #176	@ 0xb0
 8015fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fd2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d102      	bne.n	8015fe0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015fda:	f04f 33ff 	mov.w	r3, #4294967295
 8015fde:	e07a      	b.n	80160d6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015fe6:	68fa      	ldr	r2, [r7, #12]
 8015fe8:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015fec:	fb02 f303 	mul.w	r3, r2, r3
 8015ff0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015ff8:	bf28      	it	cs
 8015ffa:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015ffe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	33b0      	adds	r3, #176	@ 0xb0
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	4413      	add	r3, r2
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	695c      	ldr	r4, [r3, #20]
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f103 0110 	add.w	r1, r3, #16
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016024:	4618      	mov	r0, r3
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801602c:	b29b      	uxth	r3, r3
 801602e:	78f8      	ldrb	r0, [r7, #3]
 8016030:	47a0      	blx	r4
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	da08      	bge.n	801604a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8016038:	78f9      	ldrb	r1, [r7, #3]
 801603a:	2303      	movs	r3, #3
 801603c:	2204      	movs	r2, #4
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7ff fae0 	bl	8015604 <SCSI_SenseCode>
    return -1;
 8016044:	f04f 33ff 	mov.w	r3, #4294967295
 8016048:	e045      	b.n	80160d6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016056:	4619      	mov	r1, r3
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	fbb3 f3f1 	udiv	r3, r3, r1
 801605e:	441a      	add	r2, r3
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016072:	4619      	mov	r1, r3
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	fbb3 f3f1 	udiv	r3, r3, r1
 801607a:	1ad2      	subs	r2, r2, r3
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	1ad2      	subs	r2, r2, r3
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8016098:	2b00      	cmp	r3, #0
 801609a:	d104      	bne.n	80160a6 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801609c:	2100      	movs	r1, #0
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7fe fd10 	bl	8014ac4 <MSC_BOT_SendCSW>
 80160a4:	e016      	b.n	80160d4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80160ac:	68fa      	ldr	r2, [r7, #12]
 80160ae:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80160b2:	fb02 f303 	mul.w	r3, r2, r3
 80160b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80160ba:	bf28      	it	cs
 80160bc:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80160c0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80160c2:	4b07      	ldr	r3, [pc, #28]	@ (80160e0 <SCSI_ProcessWrite+0x128>)
 80160c4:	7819      	ldrb	r1, [r3, #0]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	f103 0210 	add.w	r2, r3, #16
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f005 fe39 	bl	801bd46 <USBD_LL_PrepareReceive>
  }

  return 0;
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3714      	adds	r7, #20
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd90      	pop	{r4, r7, pc}
 80160de:	bf00      	nop
 80160e0:	200000b3 	.word	0x200000b3

080160e4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b087      	sub	sp, #28
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	60b9      	str	r1, [r7, #8]
 80160ee:	4613      	mov	r3, r2
 80160f0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80160f2:	88fb      	ldrh	r3, [r7, #6]
 80160f4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d102      	bne.n	8016102 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80160fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016100:	e013      	b.n	801612a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8016102:	8afa      	ldrh	r2, [r7, #22]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8016108:	e00b      	b.n	8016122 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801610a:	8afb      	ldrh	r3, [r7, #22]
 801610c:	3b01      	subs	r3, #1
 801610e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8016110:	8afb      	ldrh	r3, [r7, #22]
 8016112:	68ba      	ldr	r2, [r7, #8]
 8016114:	441a      	add	r2, r3
 8016116:	8afb      	ldrh	r3, [r7, #22]
 8016118:	7811      	ldrb	r1, [r2, #0]
 801611a:	68fa      	ldr	r2, [r7, #12]
 801611c:	4413      	add	r3, r2
 801611e:	460a      	mov	r2, r1
 8016120:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8016122:	8afb      	ldrh	r3, [r7, #22]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d1f0      	bne.n	801610a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8016128:	2300      	movs	r3, #0
}
 801612a:	4618      	mov	r0, r3
 801612c:	371c      	adds	r7, #28
 801612e:	46bd      	mov	sp, r7
 8016130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016134:	4770      	bx	lr

08016136 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b086      	sub	sp, #24
 801613a:	af00      	add	r7, sp, #0
 801613c:	60f8      	str	r0, [r7, #12]
 801613e:	60b9      	str	r1, [r7, #8]
 8016140:	4613      	mov	r3, r2
 8016142:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d101      	bne.n	801614e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801614a:	2303      	movs	r3, #3
 801614c:	e01f      	b.n	801618e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2200      	movs	r2, #0
 8016152:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2200      	movs	r2, #0
 801615a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d003      	beq.n	8016174 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2201      	movs	r2, #1
 8016178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	79fa      	ldrb	r2, [r7, #7]
 8016180:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f005 fc34 	bl	801b9f0 <USBD_LL_Init>
 8016188:	4603      	mov	r3, r0
 801618a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801618c:	7dfb      	ldrb	r3, [r7, #23]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3718      	adds	r7, #24
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8016196:	b580      	push	{r7, lr}
 8016198:	b084      	sub	sp, #16
 801619a:	af00      	add	r7, sp, #0
 801619c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f005 fca8 	bl	801baf4 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2201      	movs	r2, #1
 80161a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d009      	beq.n	80161ca <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	6852      	ldr	r2, [r2, #4]
 80161c2:	b2d2      	uxtb	r2, r2
 80161c4:	4611      	mov	r1, r2
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2200      	movs	r2, #0
 80161d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2200      	movs	r2, #0
 80161de:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f005 fc50 	bl	801ba88 <USBD_LL_DeInit>
 80161e8:	4603      	mov	r3, r0
 80161ea:	73fb      	strb	r3, [r7, #15]

  return ret;
 80161ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b084      	sub	sp, #16
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
 80161fe:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016200:	2300      	movs	r3, #0
 8016202:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d101      	bne.n	801620e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801620a:	2303      	movs	r3, #3
 801620c:	e025      	b.n	801625a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	683a      	ldr	r2, [r7, #0]
 8016212:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	32ae      	adds	r2, #174	@ 0xae
 8016220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00f      	beq.n	801624a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	32ae      	adds	r2, #174	@ 0xae
 8016234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801623a:	f107 020e 	add.w	r2, r7, #14
 801623e:	4610      	mov	r0, r2
 8016240:	4798      	blx	r3
 8016242:	4602      	mov	r2, r0
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016250:	1c5a      	adds	r2, r3, #1
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016258:	2300      	movs	r3, #0
}
 801625a:	4618      	mov	r0, r3
 801625c:	3710      	adds	r7, #16
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}

08016262 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016262:	b580      	push	{r7, lr}
 8016264:	b082      	sub	sp, #8
 8016266:	af00      	add	r7, sp, #0
 8016268:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f005 fc27 	bl	801babe <USBD_LL_Start>
 8016270:	4603      	mov	r3, r0
}
 8016272:	4618      	mov	r0, r3
 8016274:	3708      	adds	r7, #8
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}

0801627a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 801627a:	b580      	push	{r7, lr}
 801627c:	b082      	sub	sp, #8
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f005 fc36 	bl	801baf4 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801628e:	2b00      	cmp	r3, #0
 8016290:	d009      	beq.n	80162a6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	6852      	ldr	r2, [r2, #4]
 801629e:	b2d2      	uxtb	r2, r2
 80162a0:	4611      	mov	r1, r2
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 80162a6:	2300      	movs	r3, #0
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b083      	sub	sp, #12
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80162b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	370c      	adds	r7, #12
 80162be:	46bd      	mov	sp, r7
 80162c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c4:	4770      	bx	lr

080162c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80162c6:	b580      	push	{r7, lr}
 80162c8:	b084      	sub	sp, #16
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
 80162ce:	460b      	mov	r3, r1
 80162d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80162d2:	2300      	movs	r3, #0
 80162d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d009      	beq.n	80162f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	78fa      	ldrb	r2, [r7, #3]
 80162ea:	4611      	mov	r1, r2
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	4798      	blx	r3
 80162f0:	4603      	mov	r3, r0
 80162f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b084      	sub	sp, #16
 8016302:	af00      	add	r7, sp, #0
 8016304:	6078      	str	r0, [r7, #4]
 8016306:	460b      	mov	r3, r1
 8016308:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801630a:	2300      	movs	r3, #0
 801630c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	78fa      	ldrb	r2, [r7, #3]
 8016318:	4611      	mov	r1, r2
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	4798      	blx	r3
 801631e:	4603      	mov	r3, r0
 8016320:	2b00      	cmp	r3, #0
 8016322:	d001      	beq.n	8016328 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016324:	2303      	movs	r3, #3
 8016326:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016328:	7bfb      	ldrb	r3, [r7, #15]
}
 801632a:	4618      	mov	r0, r3
 801632c:	3710      	adds	r7, #16
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b084      	sub	sp, #16
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016342:	6839      	ldr	r1, [r7, #0]
 8016344:	4618      	mov	r0, r3
 8016346:	f001 f906 	bl	8017556 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2201      	movs	r2, #1
 801634e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016358:	461a      	mov	r2, r3
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016366:	f003 031f 	and.w	r3, r3, #31
 801636a:	2b02      	cmp	r3, #2
 801636c:	d01a      	beq.n	80163a4 <USBD_LL_SetupStage+0x72>
 801636e:	2b02      	cmp	r3, #2
 8016370:	d822      	bhi.n	80163b8 <USBD_LL_SetupStage+0x86>
 8016372:	2b00      	cmp	r3, #0
 8016374:	d002      	beq.n	801637c <USBD_LL_SetupStage+0x4a>
 8016376:	2b01      	cmp	r3, #1
 8016378:	d00a      	beq.n	8016390 <USBD_LL_SetupStage+0x5e>
 801637a:	e01d      	b.n	80163b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016382:	4619      	mov	r1, r3
 8016384:	6878      	ldr	r0, [r7, #4]
 8016386:	f000 fb5d 	bl	8016a44 <USBD_StdDevReq>
 801638a:	4603      	mov	r3, r0
 801638c:	73fb      	strb	r3, [r7, #15]
      break;
 801638e:	e020      	b.n	80163d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016396:	4619      	mov	r1, r3
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 fbc5 	bl	8016b28 <USBD_StdItfReq>
 801639e:	4603      	mov	r3, r0
 80163a0:	73fb      	strb	r3, [r7, #15]
      break;
 80163a2:	e016      	b.n	80163d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80163aa:	4619      	mov	r1, r3
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fc27 	bl	8016c00 <USBD_StdEPReq>
 80163b2:	4603      	mov	r3, r0
 80163b4:	73fb      	strb	r3, [r7, #15]
      break;
 80163b6:	e00c      	b.n	80163d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80163be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	4619      	mov	r1, r3
 80163c6:	6878      	ldr	r0, [r7, #4]
 80163c8:	f005 fc13 	bl	801bbf2 <USBD_LL_StallEP>
 80163cc:	4603      	mov	r3, r0
 80163ce:	73fb      	strb	r3, [r7, #15]
      break;
 80163d0:	bf00      	nop
  }

  return ret;
 80163d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3710      	adds	r7, #16
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b086      	sub	sp, #24
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	60f8      	str	r0, [r7, #12]
 80163e4:	460b      	mov	r3, r1
 80163e6:	607a      	str	r2, [r7, #4]
 80163e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80163ea:	2300      	movs	r3, #0
 80163ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80163ee:	7afb      	ldrb	r3, [r7, #11]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d16e      	bne.n	80164d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80163fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016402:	2b03      	cmp	r3, #3
 8016404:	f040 8098 	bne.w	8016538 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016408:	693b      	ldr	r3, [r7, #16]
 801640a:	689a      	ldr	r2, [r3, #8]
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	68db      	ldr	r3, [r3, #12]
 8016410:	429a      	cmp	r2, r3
 8016412:	d913      	bls.n	801643c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016414:	693b      	ldr	r3, [r7, #16]
 8016416:	689a      	ldr	r2, [r3, #8]
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	1ad2      	subs	r2, r2, r3
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	68da      	ldr	r2, [r3, #12]
 8016426:	693b      	ldr	r3, [r7, #16]
 8016428:	689b      	ldr	r3, [r3, #8]
 801642a:	4293      	cmp	r3, r2
 801642c:	bf28      	it	cs
 801642e:	4613      	movcs	r3, r2
 8016430:	461a      	mov	r2, r3
 8016432:	6879      	ldr	r1, [r7, #4]
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f001 f965 	bl	8017704 <USBD_CtlContinueRx>
 801643a:	e07d      	b.n	8016538 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016442:	f003 031f 	and.w	r3, r3, #31
 8016446:	2b02      	cmp	r3, #2
 8016448:	d014      	beq.n	8016474 <USBD_LL_DataOutStage+0x98>
 801644a:	2b02      	cmp	r3, #2
 801644c:	d81d      	bhi.n	801648a <USBD_LL_DataOutStage+0xae>
 801644e:	2b00      	cmp	r3, #0
 8016450:	d002      	beq.n	8016458 <USBD_LL_DataOutStage+0x7c>
 8016452:	2b01      	cmp	r3, #1
 8016454:	d003      	beq.n	801645e <USBD_LL_DataOutStage+0x82>
 8016456:	e018      	b.n	801648a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016458:	2300      	movs	r3, #0
 801645a:	75bb      	strb	r3, [r7, #22]
            break;
 801645c:	e018      	b.n	8016490 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016464:	b2db      	uxtb	r3, r3
 8016466:	4619      	mov	r1, r3
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f000 fa5e 	bl	801692a <USBD_CoreFindIF>
 801646e:	4603      	mov	r3, r0
 8016470:	75bb      	strb	r3, [r7, #22]
            break;
 8016472:	e00d      	b.n	8016490 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801647a:	b2db      	uxtb	r3, r3
 801647c:	4619      	mov	r1, r3
 801647e:	68f8      	ldr	r0, [r7, #12]
 8016480:	f000 fa60 	bl	8016944 <USBD_CoreFindEP>
 8016484:	4603      	mov	r3, r0
 8016486:	75bb      	strb	r3, [r7, #22]
            break;
 8016488:	e002      	b.n	8016490 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801648a:	2300      	movs	r3, #0
 801648c:	75bb      	strb	r3, [r7, #22]
            break;
 801648e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016490:	7dbb      	ldrb	r3, [r7, #22]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d119      	bne.n	80164ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801649c:	b2db      	uxtb	r3, r3
 801649e:	2b03      	cmp	r3, #3
 80164a0:	d113      	bne.n	80164ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80164a2:	7dba      	ldrb	r2, [r7, #22]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	32ae      	adds	r2, #174	@ 0xae
 80164a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ac:	691b      	ldr	r3, [r3, #16]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d00b      	beq.n	80164ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80164b2:	7dba      	ldrb	r2, [r7, #22]
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80164ba:	7dba      	ldrb	r2, [r7, #22]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	32ae      	adds	r2, #174	@ 0xae
 80164c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164c4:	691b      	ldr	r3, [r3, #16]
 80164c6:	68f8      	ldr	r0, [r7, #12]
 80164c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80164ca:	68f8      	ldr	r0, [r7, #12]
 80164cc:	f001 f92b 	bl	8017726 <USBD_CtlSendStatus>
 80164d0:	e032      	b.n	8016538 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80164d2:	7afb      	ldrb	r3, [r7, #11]
 80164d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80164d8:	b2db      	uxtb	r3, r3
 80164da:	4619      	mov	r1, r3
 80164dc:	68f8      	ldr	r0, [r7, #12]
 80164de:	f000 fa31 	bl	8016944 <USBD_CoreFindEP>
 80164e2:	4603      	mov	r3, r0
 80164e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80164e6:	7dbb      	ldrb	r3, [r7, #22]
 80164e8:	2bff      	cmp	r3, #255	@ 0xff
 80164ea:	d025      	beq.n	8016538 <USBD_LL_DataOutStage+0x15c>
 80164ec:	7dbb      	ldrb	r3, [r7, #22]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d122      	bne.n	8016538 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80164f8:	b2db      	uxtb	r3, r3
 80164fa:	2b03      	cmp	r3, #3
 80164fc:	d117      	bne.n	801652e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80164fe:	7dba      	ldrb	r2, [r7, #22]
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	32ae      	adds	r2, #174	@ 0xae
 8016504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016508:	699b      	ldr	r3, [r3, #24]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d00f      	beq.n	801652e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801650e:	7dba      	ldrb	r2, [r7, #22]
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016516:	7dba      	ldrb	r2, [r7, #22]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	32ae      	adds	r2, #174	@ 0xae
 801651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016520:	699b      	ldr	r3, [r3, #24]
 8016522:	7afa      	ldrb	r2, [r7, #11]
 8016524:	4611      	mov	r1, r2
 8016526:	68f8      	ldr	r0, [r7, #12]
 8016528:	4798      	blx	r3
 801652a:	4603      	mov	r3, r0
 801652c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801652e:	7dfb      	ldrb	r3, [r7, #23]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016534:	7dfb      	ldrb	r3, [r7, #23]
 8016536:	e000      	b.n	801653a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016538:	2300      	movs	r3, #0
}
 801653a:	4618      	mov	r0, r3
 801653c:	3718      	adds	r7, #24
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}

08016542 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016542:	b580      	push	{r7, lr}
 8016544:	b086      	sub	sp, #24
 8016546:	af00      	add	r7, sp, #0
 8016548:	60f8      	str	r0, [r7, #12]
 801654a:	460b      	mov	r3, r1
 801654c:	607a      	str	r2, [r7, #4]
 801654e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016550:	7afb      	ldrb	r3, [r7, #11]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d16f      	bne.n	8016636 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	3314      	adds	r3, #20
 801655a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016562:	2b02      	cmp	r3, #2
 8016564:	d15a      	bne.n	801661c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	689a      	ldr	r2, [r3, #8]
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	429a      	cmp	r2, r3
 8016570:	d914      	bls.n	801659c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	689a      	ldr	r2, [r3, #8]
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	68db      	ldr	r3, [r3, #12]
 801657a:	1ad2      	subs	r2, r2, r3
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016580:	693b      	ldr	r3, [r7, #16]
 8016582:	689b      	ldr	r3, [r3, #8]
 8016584:	461a      	mov	r2, r3
 8016586:	6879      	ldr	r1, [r7, #4]
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f001 f8aa 	bl	80176e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801658e:	2300      	movs	r3, #0
 8016590:	2200      	movs	r2, #0
 8016592:	2100      	movs	r1, #0
 8016594:	68f8      	ldr	r0, [r7, #12]
 8016596:	f005 fbd6 	bl	801bd46 <USBD_LL_PrepareReceive>
 801659a:	e03f      	b.n	801661c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	68da      	ldr	r2, [r3, #12]
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	689b      	ldr	r3, [r3, #8]
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d11c      	bne.n	80165e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	685a      	ldr	r2, [r3, #4]
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d316      	bcc.n	80165e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	685a      	ldr	r2, [r3, #4]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80165be:	429a      	cmp	r2, r3
 80165c0:	d20f      	bcs.n	80165e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80165c2:	2200      	movs	r2, #0
 80165c4:	2100      	movs	r1, #0
 80165c6:	68f8      	ldr	r0, [r7, #12]
 80165c8:	f001 f88b 	bl	80176e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	2200      	movs	r2, #0
 80165d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80165d4:	2300      	movs	r3, #0
 80165d6:	2200      	movs	r2, #0
 80165d8:	2100      	movs	r1, #0
 80165da:	68f8      	ldr	r0, [r7, #12]
 80165dc:	f005 fbb3 	bl	801bd46 <USBD_LL_PrepareReceive>
 80165e0:	e01c      	b.n	801661c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	2b03      	cmp	r3, #3
 80165ec:	d10f      	bne.n	801660e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d009      	beq.n	801660e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2200      	movs	r2, #0
 80165fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016608:	68db      	ldr	r3, [r3, #12]
 801660a:	68f8      	ldr	r0, [r7, #12]
 801660c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801660e:	2180      	movs	r1, #128	@ 0x80
 8016610:	68f8      	ldr	r0, [r7, #12]
 8016612:	f005 faee 	bl	801bbf2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016616:	68f8      	ldr	r0, [r7, #12]
 8016618:	f001 f898 	bl	801774c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8016622:	2b00      	cmp	r3, #0
 8016624:	d03a      	beq.n	801669c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016626:	68f8      	ldr	r0, [r7, #12]
 8016628:	f7ff fe42 	bl	80162b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2200      	movs	r2, #0
 8016630:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016634:	e032      	b.n	801669c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016636:	7afb      	ldrb	r3, [r7, #11]
 8016638:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801663c:	b2db      	uxtb	r3, r3
 801663e:	4619      	mov	r1, r3
 8016640:	68f8      	ldr	r0, [r7, #12]
 8016642:	f000 f97f 	bl	8016944 <USBD_CoreFindEP>
 8016646:	4603      	mov	r3, r0
 8016648:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801664a:	7dfb      	ldrb	r3, [r7, #23]
 801664c:	2bff      	cmp	r3, #255	@ 0xff
 801664e:	d025      	beq.n	801669c <USBD_LL_DataInStage+0x15a>
 8016650:	7dfb      	ldrb	r3, [r7, #23]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d122      	bne.n	801669c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801665c:	b2db      	uxtb	r3, r3
 801665e:	2b03      	cmp	r3, #3
 8016660:	d11c      	bne.n	801669c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016662:	7dfa      	ldrb	r2, [r7, #23]
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	32ae      	adds	r2, #174	@ 0xae
 8016668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801666c:	695b      	ldr	r3, [r3, #20]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d014      	beq.n	801669c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016672:	7dfa      	ldrb	r2, [r7, #23]
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801667a:	7dfa      	ldrb	r2, [r7, #23]
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	32ae      	adds	r2, #174	@ 0xae
 8016680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016684:	695b      	ldr	r3, [r3, #20]
 8016686:	7afa      	ldrb	r2, [r7, #11]
 8016688:	4611      	mov	r1, r2
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	4798      	blx	r3
 801668e:	4603      	mov	r3, r0
 8016690:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016692:	7dbb      	ldrb	r3, [r7, #22]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d001      	beq.n	801669c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016698:	7dbb      	ldrb	r3, [r7, #22]
 801669a:	e000      	b.n	801669e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801669c:	2300      	movs	r3, #0
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3718      	adds	r7, #24
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}

080166a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80166a6:	b580      	push	{r7, lr}
 80166a8:	b084      	sub	sp, #16
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80166ae:	2300      	movs	r3, #0
 80166b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2201      	movs	r2, #1
 80166b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2200      	movs	r2, #0
 80166c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2200      	movs	r2, #0
 80166d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d014      	beq.n	801670c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d00e      	beq.n	801670c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	6852      	ldr	r2, [r2, #4]
 80166fa:	b2d2      	uxtb	r2, r2
 80166fc:	4611      	mov	r1, r2
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	4798      	blx	r3
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	d001      	beq.n	801670c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016708:	2303      	movs	r3, #3
 801670a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801670c:	2340      	movs	r3, #64	@ 0x40
 801670e:	2200      	movs	r2, #0
 8016710:	2100      	movs	r1, #0
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f005 fa09 	bl	801bb2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2201      	movs	r2, #1
 801671c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2240      	movs	r2, #64	@ 0x40
 8016724:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016728:	2340      	movs	r3, #64	@ 0x40
 801672a:	2200      	movs	r2, #0
 801672c:	2180      	movs	r1, #128	@ 0x80
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f005 f9fb 	bl	801bb2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	2201      	movs	r2, #1
 8016738:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	2240      	movs	r2, #64	@ 0x40
 801673e:	621a      	str	r2, [r3, #32]

  return ret;
 8016740:	7bfb      	ldrb	r3, [r7, #15]
}
 8016742:	4618      	mov	r0, r3
 8016744:	3710      	adds	r7, #16
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}

0801674a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801674a:	b480      	push	{r7}
 801674c:	b083      	sub	sp, #12
 801674e:	af00      	add	r7, sp, #0
 8016750:	6078      	str	r0, [r7, #4]
 8016752:	460b      	mov	r3, r1
 8016754:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	78fa      	ldrb	r2, [r7, #3]
 801675a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801675c:	2300      	movs	r3, #0
}
 801675e:	4618      	mov	r0, r3
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr

0801676a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801676a:	b480      	push	{r7}
 801676c:	b083      	sub	sp, #12
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016778:	b2da      	uxtb	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2204      	movs	r2, #4
 8016784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016788:	2300      	movs	r3, #0
}
 801678a:	4618      	mov	r0, r3
 801678c:	370c      	adds	r7, #12
 801678e:	46bd      	mov	sp, r7
 8016790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016794:	4770      	bx	lr

08016796 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016796:	b480      	push	{r7}
 8016798:	b083      	sub	sp, #12
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	2b04      	cmp	r3, #4
 80167a8:	d106      	bne.n	80167b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80167b0:	b2da      	uxtb	r2, r3
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80167b8:	2300      	movs	r3, #0
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	370c      	adds	r7, #12
 80167be:	46bd      	mov	sp, r7
 80167c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c4:	4770      	bx	lr

080167c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b082      	sub	sp, #8
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	2b03      	cmp	r3, #3
 80167d8:	d110      	bne.n	80167fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d00b      	beq.n	80167fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167ea:	69db      	ldr	r3, [r3, #28]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d005      	beq.n	80167fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167f6:	69db      	ldr	r3, [r3, #28]
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80167fc:	2300      	movs	r3, #0
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016806:	b580      	push	{r7, lr}
 8016808:	b082      	sub	sp, #8
 801680a:	af00      	add	r7, sp, #0
 801680c:	6078      	str	r0, [r7, #4]
 801680e:	460b      	mov	r3, r1
 8016810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	32ae      	adds	r2, #174	@ 0xae
 801681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016824:	2303      	movs	r3, #3
 8016826:	e01c      	b.n	8016862 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2b03      	cmp	r3, #3
 8016832:	d115      	bne.n	8016860 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	32ae      	adds	r2, #174	@ 0xae
 801683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016842:	6a1b      	ldr	r3, [r3, #32]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d00b      	beq.n	8016860 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	32ae      	adds	r2, #174	@ 0xae
 8016852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016856:	6a1b      	ldr	r3, [r3, #32]
 8016858:	78fa      	ldrb	r2, [r7, #3]
 801685a:	4611      	mov	r1, r2
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016860:	2300      	movs	r3, #0
}
 8016862:	4618      	mov	r0, r3
 8016864:	3708      	adds	r7, #8
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801686a:	b580      	push	{r7, lr}
 801686c:	b082      	sub	sp, #8
 801686e:	af00      	add	r7, sp, #0
 8016870:	6078      	str	r0, [r7, #4]
 8016872:	460b      	mov	r3, r1
 8016874:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	32ae      	adds	r2, #174	@ 0xae
 8016880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d101      	bne.n	801688c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016888:	2303      	movs	r3, #3
 801688a:	e01c      	b.n	80168c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016892:	b2db      	uxtb	r3, r3
 8016894:	2b03      	cmp	r3, #3
 8016896:	d115      	bne.n	80168c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	32ae      	adds	r2, #174	@ 0xae
 80168a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00b      	beq.n	80168c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	32ae      	adds	r2, #174	@ 0xae
 80168b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168bc:	78fa      	ldrb	r2, [r7, #3]
 80168be:	4611      	mov	r1, r2
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80168c4:	2300      	movs	r3, #0
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	3708      	adds	r7, #8
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}

080168ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80168ce:	b480      	push	{r7}
 80168d0:	b083      	sub	sp, #12
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80168d6:	2300      	movs	r3, #0
}
 80168d8:	4618      	mov	r0, r3
 80168da:	370c      	adds	r7, #12
 80168dc:	46bd      	mov	sp, r7
 80168de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e2:	4770      	bx	lr

080168e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80168ec:	2300      	movs	r3, #0
 80168ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2201      	movs	r2, #1
 80168f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d00e      	beq.n	8016920 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016908:	685b      	ldr	r3, [r3, #4]
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	6852      	ldr	r2, [r2, #4]
 801690e:	b2d2      	uxtb	r2, r2
 8016910:	4611      	mov	r1, r2
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	4798      	blx	r3
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d001      	beq.n	8016920 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801691c:	2303      	movs	r3, #3
 801691e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016920:	7bfb      	ldrb	r3, [r7, #15]
}
 8016922:	4618      	mov	r0, r3
 8016924:	3710      	adds	r7, #16
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}

0801692a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801692a:	b480      	push	{r7}
 801692c:	b083      	sub	sp, #12
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
 8016932:	460b      	mov	r3, r1
 8016934:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016936:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016938:	4618      	mov	r0, r3
 801693a:	370c      	adds	r7, #12
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr

08016944 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	460b      	mov	r3, r1
 801694e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016950:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016952:	4618      	mov	r0, r3
 8016954:	370c      	adds	r7, #12
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr

0801695e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801695e:	b580      	push	{r7, lr}
 8016960:	b086      	sub	sp, #24
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
 8016966:	460b      	mov	r3, r1
 8016968:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016972:	2300      	movs	r3, #0
 8016974:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	885b      	ldrh	r3, [r3, #2]
 801697a:	b29b      	uxth	r3, r3
 801697c:	68fa      	ldr	r2, [r7, #12]
 801697e:	7812      	ldrb	r2, [r2, #0]
 8016980:	4293      	cmp	r3, r2
 8016982:	d91f      	bls.n	80169c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801698a:	e013      	b.n	80169b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801698c:	f107 030a 	add.w	r3, r7, #10
 8016990:	4619      	mov	r1, r3
 8016992:	6978      	ldr	r0, [r7, #20]
 8016994:	f000 f81b 	bl	80169ce <USBD_GetNextDesc>
 8016998:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	785b      	ldrb	r3, [r3, #1]
 801699e:	2b05      	cmp	r3, #5
 80169a0:	d108      	bne.n	80169b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80169a6:	693b      	ldr	r3, [r7, #16]
 80169a8:	789b      	ldrb	r3, [r3, #2]
 80169aa:	78fa      	ldrb	r2, [r7, #3]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d008      	beq.n	80169c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80169b0:	2300      	movs	r3, #0
 80169b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	885b      	ldrh	r3, [r3, #2]
 80169b8:	b29a      	uxth	r2, r3
 80169ba:	897b      	ldrh	r3, [r7, #10]
 80169bc:	429a      	cmp	r2, r3
 80169be:	d8e5      	bhi.n	801698c <USBD_GetEpDesc+0x2e>
 80169c0:	e000      	b.n	80169c4 <USBD_GetEpDesc+0x66>
          break;
 80169c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80169c4:	693b      	ldr	r3, [r7, #16]
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3718      	adds	r7, #24
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}

080169ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80169ce:	b480      	push	{r7}
 80169d0:	b085      	sub	sp, #20
 80169d2:	af00      	add	r7, sp, #0
 80169d4:	6078      	str	r0, [r7, #4]
 80169d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	881b      	ldrh	r3, [r3, #0]
 80169e0:	68fa      	ldr	r2, [r7, #12]
 80169e2:	7812      	ldrb	r2, [r2, #0]
 80169e4:	4413      	add	r3, r2
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	461a      	mov	r2, r3
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	4413      	add	r3, r2
 80169f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80169f8:	68fb      	ldr	r3, [r7, #12]
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3714      	adds	r7, #20
 80169fe:	46bd      	mov	sp, r7
 8016a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a04:	4770      	bx	lr

08016a06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016a06:	b480      	push	{r7}
 8016a08:	b087      	sub	sp, #28
 8016a0a:	af00      	add	r7, sp, #0
 8016a0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016a18:	697b      	ldr	r3, [r7, #20]
 8016a1a:	3301      	adds	r3, #1
 8016a1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	781b      	ldrb	r3, [r3, #0]
 8016a22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016a24:	8a3b      	ldrh	r3, [r7, #16]
 8016a26:	021b      	lsls	r3, r3, #8
 8016a28:	b21a      	sxth	r2, r3
 8016a2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	b21b      	sxth	r3, r3
 8016a32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016a34:	89fb      	ldrh	r3, [r7, #14]
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	371c      	adds	r7, #28
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
	...

08016a44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b084      	sub	sp, #16
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a5a:	2b40      	cmp	r3, #64	@ 0x40
 8016a5c:	d005      	beq.n	8016a6a <USBD_StdDevReq+0x26>
 8016a5e:	2b40      	cmp	r3, #64	@ 0x40
 8016a60:	d857      	bhi.n	8016b12 <USBD_StdDevReq+0xce>
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d00f      	beq.n	8016a86 <USBD_StdDevReq+0x42>
 8016a66:	2b20      	cmp	r3, #32
 8016a68:	d153      	bne.n	8016b12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	32ae      	adds	r2, #174	@ 0xae
 8016a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a78:	689b      	ldr	r3, [r3, #8]
 8016a7a:	6839      	ldr	r1, [r7, #0]
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	4798      	blx	r3
 8016a80:	4603      	mov	r3, r0
 8016a82:	73fb      	strb	r3, [r7, #15]
      break;
 8016a84:	e04a      	b.n	8016b1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	785b      	ldrb	r3, [r3, #1]
 8016a8a:	2b09      	cmp	r3, #9
 8016a8c:	d83b      	bhi.n	8016b06 <USBD_StdDevReq+0xc2>
 8016a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8016a94 <USBD_StdDevReq+0x50>)
 8016a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a94:	08016ae9 	.word	0x08016ae9
 8016a98:	08016afd 	.word	0x08016afd
 8016a9c:	08016b07 	.word	0x08016b07
 8016aa0:	08016af3 	.word	0x08016af3
 8016aa4:	08016b07 	.word	0x08016b07
 8016aa8:	08016ac7 	.word	0x08016ac7
 8016aac:	08016abd 	.word	0x08016abd
 8016ab0:	08016b07 	.word	0x08016b07
 8016ab4:	08016adf 	.word	0x08016adf
 8016ab8:	08016ad1 	.word	0x08016ad1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016abc:	6839      	ldr	r1, [r7, #0]
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f000 fa3c 	bl	8016f3c <USBD_GetDescriptor>
          break;
 8016ac4:	e024      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016ac6:	6839      	ldr	r1, [r7, #0]
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f000 fba1 	bl	8017210 <USBD_SetAddress>
          break;
 8016ace:	e01f      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016ad0:	6839      	ldr	r1, [r7, #0]
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f000 fbe0 	bl	8017298 <USBD_SetConfig>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	73fb      	strb	r3, [r7, #15]
          break;
 8016adc:	e018      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016ade:	6839      	ldr	r1, [r7, #0]
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f000 fc83 	bl	80173ec <USBD_GetConfig>
          break;
 8016ae6:	e013      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016ae8:	6839      	ldr	r1, [r7, #0]
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f000 fcb4 	bl	8017458 <USBD_GetStatus>
          break;
 8016af0:	e00e      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016af2:	6839      	ldr	r1, [r7, #0]
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f000 fce3 	bl	80174c0 <USBD_SetFeature>
          break;
 8016afa:	e009      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016afc:	6839      	ldr	r1, [r7, #0]
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f000 fd07 	bl	8017512 <USBD_ClrFeature>
          break;
 8016b04:	e004      	b.n	8016b10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016b06:	6839      	ldr	r1, [r7, #0]
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	f000 fd5e 	bl	80175ca <USBD_CtlError>
          break;
 8016b0e:	bf00      	nop
      }
      break;
 8016b10:	e004      	b.n	8016b1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016b12:	6839      	ldr	r1, [r7, #0]
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f000 fd58 	bl	80175ca <USBD_CtlError>
      break;
 8016b1a:	bf00      	nop
  }

  return ret;
 8016b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3710      	adds	r7, #16
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}
 8016b26:	bf00      	nop

08016b28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b32:	2300      	movs	r3, #0
 8016b34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016b3e:	2b40      	cmp	r3, #64	@ 0x40
 8016b40:	d005      	beq.n	8016b4e <USBD_StdItfReq+0x26>
 8016b42:	2b40      	cmp	r3, #64	@ 0x40
 8016b44:	d852      	bhi.n	8016bec <USBD_StdItfReq+0xc4>
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d001      	beq.n	8016b4e <USBD_StdItfReq+0x26>
 8016b4a:	2b20      	cmp	r3, #32
 8016b4c:	d14e      	bne.n	8016bec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b54:	b2db      	uxtb	r3, r3
 8016b56:	3b01      	subs	r3, #1
 8016b58:	2b02      	cmp	r3, #2
 8016b5a:	d840      	bhi.n	8016bde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	889b      	ldrh	r3, [r3, #4]
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	2b01      	cmp	r3, #1
 8016b64:	d836      	bhi.n	8016bd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	889b      	ldrh	r3, [r3, #4]
 8016b6a:	b2db      	uxtb	r3, r3
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7ff fedb 	bl	801692a <USBD_CoreFindIF>
 8016b74:	4603      	mov	r3, r0
 8016b76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016b78:	7bbb      	ldrb	r3, [r7, #14]
 8016b7a:	2bff      	cmp	r3, #255	@ 0xff
 8016b7c:	d01d      	beq.n	8016bba <USBD_StdItfReq+0x92>
 8016b7e:	7bbb      	ldrb	r3, [r7, #14]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d11a      	bne.n	8016bba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016b84:	7bba      	ldrb	r2, [r7, #14]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	32ae      	adds	r2, #174	@ 0xae
 8016b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b8e:	689b      	ldr	r3, [r3, #8]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d00f      	beq.n	8016bb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016b94:	7bba      	ldrb	r2, [r7, #14]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b9c:	7bba      	ldrb	r2, [r7, #14]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	32ae      	adds	r2, #174	@ 0xae
 8016ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ba6:	689b      	ldr	r3, [r3, #8]
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	4798      	blx	r3
 8016bae:	4603      	mov	r3, r0
 8016bb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016bb2:	e004      	b.n	8016bbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016bb4:	2303      	movs	r3, #3
 8016bb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016bb8:	e001      	b.n	8016bbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016bba:	2303      	movs	r3, #3
 8016bbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	88db      	ldrh	r3, [r3, #6]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d110      	bne.n	8016be8 <USBD_StdItfReq+0xc0>
 8016bc6:	7bfb      	ldrb	r3, [r7, #15]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d10d      	bne.n	8016be8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f000 fdaa 	bl	8017726 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016bd2:	e009      	b.n	8016be8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016bd4:	6839      	ldr	r1, [r7, #0]
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 fcf7 	bl	80175ca <USBD_CtlError>
          break;
 8016bdc:	e004      	b.n	8016be8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016bde:	6839      	ldr	r1, [r7, #0]
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f000 fcf2 	bl	80175ca <USBD_CtlError>
          break;
 8016be6:	e000      	b.n	8016bea <USBD_StdItfReq+0xc2>
          break;
 8016be8:	bf00      	nop
      }
      break;
 8016bea:	e004      	b.n	8016bf6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016bec:	6839      	ldr	r1, [r7, #0]
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f000 fceb 	bl	80175ca <USBD_CtlError>
      break;
 8016bf4:	bf00      	nop
  }

  return ret;
 8016bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3710      	adds	r7, #16
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	889b      	ldrh	r3, [r3, #4]
 8016c12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c1c:	2b40      	cmp	r3, #64	@ 0x40
 8016c1e:	d007      	beq.n	8016c30 <USBD_StdEPReq+0x30>
 8016c20:	2b40      	cmp	r3, #64	@ 0x40
 8016c22:	f200 817f 	bhi.w	8016f24 <USBD_StdEPReq+0x324>
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d02a      	beq.n	8016c80 <USBD_StdEPReq+0x80>
 8016c2a:	2b20      	cmp	r3, #32
 8016c2c:	f040 817a 	bne.w	8016f24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016c30:	7bbb      	ldrb	r3, [r7, #14]
 8016c32:	4619      	mov	r1, r3
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f7ff fe85 	bl	8016944 <USBD_CoreFindEP>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c3e:	7b7b      	ldrb	r3, [r7, #13]
 8016c40:	2bff      	cmp	r3, #255	@ 0xff
 8016c42:	f000 8174 	beq.w	8016f2e <USBD_StdEPReq+0x32e>
 8016c46:	7b7b      	ldrb	r3, [r7, #13]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f040 8170 	bne.w	8016f2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016c4e:	7b7a      	ldrb	r2, [r7, #13]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016c56:	7b7a      	ldrb	r2, [r7, #13]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	32ae      	adds	r2, #174	@ 0xae
 8016c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c60:	689b      	ldr	r3, [r3, #8]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f000 8163 	beq.w	8016f2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016c68:	7b7a      	ldrb	r2, [r7, #13]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	32ae      	adds	r2, #174	@ 0xae
 8016c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c72:	689b      	ldr	r3, [r3, #8]
 8016c74:	6839      	ldr	r1, [r7, #0]
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	4798      	blx	r3
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016c7e:	e156      	b.n	8016f2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	785b      	ldrb	r3, [r3, #1]
 8016c84:	2b03      	cmp	r3, #3
 8016c86:	d008      	beq.n	8016c9a <USBD_StdEPReq+0x9a>
 8016c88:	2b03      	cmp	r3, #3
 8016c8a:	f300 8145 	bgt.w	8016f18 <USBD_StdEPReq+0x318>
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	f000 809b 	beq.w	8016dca <USBD_StdEPReq+0x1ca>
 8016c94:	2b01      	cmp	r3, #1
 8016c96:	d03c      	beq.n	8016d12 <USBD_StdEPReq+0x112>
 8016c98:	e13e      	b.n	8016f18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	2b02      	cmp	r3, #2
 8016ca4:	d002      	beq.n	8016cac <USBD_StdEPReq+0xac>
 8016ca6:	2b03      	cmp	r3, #3
 8016ca8:	d016      	beq.n	8016cd8 <USBD_StdEPReq+0xd8>
 8016caa:	e02c      	b.n	8016d06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016cac:	7bbb      	ldrb	r3, [r7, #14]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d00d      	beq.n	8016cce <USBD_StdEPReq+0xce>
 8016cb2:	7bbb      	ldrb	r3, [r7, #14]
 8016cb4:	2b80      	cmp	r3, #128	@ 0x80
 8016cb6:	d00a      	beq.n	8016cce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016cb8:	7bbb      	ldrb	r3, [r7, #14]
 8016cba:	4619      	mov	r1, r3
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f004 ff98 	bl	801bbf2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016cc2:	2180      	movs	r1, #128	@ 0x80
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f004 ff94 	bl	801bbf2 <USBD_LL_StallEP>
 8016cca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016ccc:	e020      	b.n	8016d10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016cce:	6839      	ldr	r1, [r7, #0]
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f000 fc7a 	bl	80175ca <USBD_CtlError>
              break;
 8016cd6:	e01b      	b.n	8016d10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	885b      	ldrh	r3, [r3, #2]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d10e      	bne.n	8016cfe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016ce0:	7bbb      	ldrb	r3, [r7, #14]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d00b      	beq.n	8016cfe <USBD_StdEPReq+0xfe>
 8016ce6:	7bbb      	ldrb	r3, [r7, #14]
 8016ce8:	2b80      	cmp	r3, #128	@ 0x80
 8016cea:	d008      	beq.n	8016cfe <USBD_StdEPReq+0xfe>
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	88db      	ldrh	r3, [r3, #6]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d104      	bne.n	8016cfe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016cf4:	7bbb      	ldrb	r3, [r7, #14]
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f004 ff7a 	bl	801bbf2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f000 fd11 	bl	8017726 <USBD_CtlSendStatus>

              break;
 8016d04:	e004      	b.n	8016d10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016d06:	6839      	ldr	r1, [r7, #0]
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f000 fc5e 	bl	80175ca <USBD_CtlError>
              break;
 8016d0e:	bf00      	nop
          }
          break;
 8016d10:	e107      	b.n	8016f22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	2b02      	cmp	r3, #2
 8016d1c:	d002      	beq.n	8016d24 <USBD_StdEPReq+0x124>
 8016d1e:	2b03      	cmp	r3, #3
 8016d20:	d016      	beq.n	8016d50 <USBD_StdEPReq+0x150>
 8016d22:	e04b      	b.n	8016dbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d24:	7bbb      	ldrb	r3, [r7, #14]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d00d      	beq.n	8016d46 <USBD_StdEPReq+0x146>
 8016d2a:	7bbb      	ldrb	r3, [r7, #14]
 8016d2c:	2b80      	cmp	r3, #128	@ 0x80
 8016d2e:	d00a      	beq.n	8016d46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016d30:	7bbb      	ldrb	r3, [r7, #14]
 8016d32:	4619      	mov	r1, r3
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f004 ff5c 	bl	801bbf2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d3a:	2180      	movs	r1, #128	@ 0x80
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f004 ff58 	bl	801bbf2 <USBD_LL_StallEP>
 8016d42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016d44:	e040      	b.n	8016dc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016d46:	6839      	ldr	r1, [r7, #0]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f000 fc3e 	bl	80175ca <USBD_CtlError>
              break;
 8016d4e:	e03b      	b.n	8016dc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	885b      	ldrh	r3, [r3, #2]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d136      	bne.n	8016dc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016d58:	7bbb      	ldrb	r3, [r7, #14]
 8016d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d004      	beq.n	8016d6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016d62:	7bbb      	ldrb	r3, [r7, #14]
 8016d64:	4619      	mov	r1, r3
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f004 ff62 	bl	801bc30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f000 fcda 	bl	8017726 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016d72:	7bbb      	ldrb	r3, [r7, #14]
 8016d74:	4619      	mov	r1, r3
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f7ff fde4 	bl	8016944 <USBD_CoreFindEP>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d80:	7b7b      	ldrb	r3, [r7, #13]
 8016d82:	2bff      	cmp	r3, #255	@ 0xff
 8016d84:	d01f      	beq.n	8016dc6 <USBD_StdEPReq+0x1c6>
 8016d86:	7b7b      	ldrb	r3, [r7, #13]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d11c      	bne.n	8016dc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016d8c:	7b7a      	ldrb	r2, [r7, #13]
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016d94:	7b7a      	ldrb	r2, [r7, #13]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	32ae      	adds	r2, #174	@ 0xae
 8016d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d9e:	689b      	ldr	r3, [r3, #8]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d010      	beq.n	8016dc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016da4:	7b7a      	ldrb	r2, [r7, #13]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	32ae      	adds	r2, #174	@ 0xae
 8016daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dae:	689b      	ldr	r3, [r3, #8]
 8016db0:	6839      	ldr	r1, [r7, #0]
 8016db2:	6878      	ldr	r0, [r7, #4]
 8016db4:	4798      	blx	r3
 8016db6:	4603      	mov	r3, r0
 8016db8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016dba:	e004      	b.n	8016dc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016dbc:	6839      	ldr	r1, [r7, #0]
 8016dbe:	6878      	ldr	r0, [r7, #4]
 8016dc0:	f000 fc03 	bl	80175ca <USBD_CtlError>
              break;
 8016dc4:	e000      	b.n	8016dc8 <USBD_StdEPReq+0x1c8>
              break;
 8016dc6:	bf00      	nop
          }
          break;
 8016dc8:	e0ab      	b.n	8016f22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016dd0:	b2db      	uxtb	r3, r3
 8016dd2:	2b02      	cmp	r3, #2
 8016dd4:	d002      	beq.n	8016ddc <USBD_StdEPReq+0x1dc>
 8016dd6:	2b03      	cmp	r3, #3
 8016dd8:	d032      	beq.n	8016e40 <USBD_StdEPReq+0x240>
 8016dda:	e097      	b.n	8016f0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ddc:	7bbb      	ldrb	r3, [r7, #14]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d007      	beq.n	8016df2 <USBD_StdEPReq+0x1f2>
 8016de2:	7bbb      	ldrb	r3, [r7, #14]
 8016de4:	2b80      	cmp	r3, #128	@ 0x80
 8016de6:	d004      	beq.n	8016df2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016de8:	6839      	ldr	r1, [r7, #0]
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f000 fbed 	bl	80175ca <USBD_CtlError>
                break;
 8016df0:	e091      	b.n	8016f16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	da0b      	bge.n	8016e12 <USBD_StdEPReq+0x212>
 8016dfa:	7bbb      	ldrb	r3, [r7, #14]
 8016dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016e00:	4613      	mov	r3, r2
 8016e02:	009b      	lsls	r3, r3, #2
 8016e04:	4413      	add	r3, r2
 8016e06:	009b      	lsls	r3, r3, #2
 8016e08:	3310      	adds	r3, #16
 8016e0a:	687a      	ldr	r2, [r7, #4]
 8016e0c:	4413      	add	r3, r2
 8016e0e:	3304      	adds	r3, #4
 8016e10:	e00b      	b.n	8016e2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016e12:	7bbb      	ldrb	r3, [r7, #14]
 8016e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e18:	4613      	mov	r3, r2
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	4413      	add	r3, r2
 8016e1e:	009b      	lsls	r3, r3, #2
 8016e20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	4413      	add	r3, r2
 8016e28:	3304      	adds	r3, #4
 8016e2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	2202      	movs	r2, #2
 8016e36:	4619      	mov	r1, r3
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f000 fc37 	bl	80176ac <USBD_CtlSendData>
              break;
 8016e3e:	e06a      	b.n	8016f16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	da11      	bge.n	8016e6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
 8016e4a:	f003 020f 	and.w	r2, r3, #15
 8016e4e:	6879      	ldr	r1, [r7, #4]
 8016e50:	4613      	mov	r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	4413      	add	r3, r2
 8016e56:	009b      	lsls	r3, r3, #2
 8016e58:	440b      	add	r3, r1
 8016e5a:	3324      	adds	r3, #36	@ 0x24
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d117      	bne.n	8016e92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016e62:	6839      	ldr	r1, [r7, #0]
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f000 fbb0 	bl	80175ca <USBD_CtlError>
                  break;
 8016e6a:	e054      	b.n	8016f16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016e6c:	7bbb      	ldrb	r3, [r7, #14]
 8016e6e:	f003 020f 	and.w	r2, r3, #15
 8016e72:	6879      	ldr	r1, [r7, #4]
 8016e74:	4613      	mov	r3, r2
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	4413      	add	r3, r2
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	440b      	add	r3, r1
 8016e7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016e82:	881b      	ldrh	r3, [r3, #0]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d104      	bne.n	8016e92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016e88:	6839      	ldr	r1, [r7, #0]
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	f000 fb9d 	bl	80175ca <USBD_CtlError>
                  break;
 8016e90:	e041      	b.n	8016f16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	da0b      	bge.n	8016eb2 <USBD_StdEPReq+0x2b2>
 8016e9a:	7bbb      	ldrb	r3, [r7, #14]
 8016e9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	009b      	lsls	r3, r3, #2
 8016ea4:	4413      	add	r3, r2
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	3310      	adds	r3, #16
 8016eaa:	687a      	ldr	r2, [r7, #4]
 8016eac:	4413      	add	r3, r2
 8016eae:	3304      	adds	r3, #4
 8016eb0:	e00b      	b.n	8016eca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016eb2:	7bbb      	ldrb	r3, [r7, #14]
 8016eb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016eb8:	4613      	mov	r3, r2
 8016eba:	009b      	lsls	r3, r3, #2
 8016ebc:	4413      	add	r3, r2
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016ec4:	687a      	ldr	r2, [r7, #4]
 8016ec6:	4413      	add	r3, r2
 8016ec8:	3304      	adds	r3, #4
 8016eca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ecc:	7bbb      	ldrb	r3, [r7, #14]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d002      	beq.n	8016ed8 <USBD_StdEPReq+0x2d8>
 8016ed2:	7bbb      	ldrb	r3, [r7, #14]
 8016ed4:	2b80      	cmp	r3, #128	@ 0x80
 8016ed6:	d103      	bne.n	8016ee0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	2200      	movs	r2, #0
 8016edc:	601a      	str	r2, [r3, #0]
 8016ede:	e00e      	b.n	8016efe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ee0:	7bbb      	ldrb	r3, [r7, #14]
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f004 fec2 	bl	801bc6e <USBD_LL_IsStallEP>
 8016eea:	4603      	mov	r3, r0
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d003      	beq.n	8016ef8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	2201      	movs	r2, #1
 8016ef4:	601a      	str	r2, [r3, #0]
 8016ef6:	e002      	b.n	8016efe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016ef8:	68bb      	ldr	r3, [r7, #8]
 8016efa:	2200      	movs	r2, #0
 8016efc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	2202      	movs	r2, #2
 8016f02:	4619      	mov	r1, r3
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f000 fbd1 	bl	80176ac <USBD_CtlSendData>
              break;
 8016f0a:	e004      	b.n	8016f16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016f0c:	6839      	ldr	r1, [r7, #0]
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f000 fb5b 	bl	80175ca <USBD_CtlError>
              break;
 8016f14:	bf00      	nop
          }
          break;
 8016f16:	e004      	b.n	8016f22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016f18:	6839      	ldr	r1, [r7, #0]
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	f000 fb55 	bl	80175ca <USBD_CtlError>
          break;
 8016f20:	bf00      	nop
      }
      break;
 8016f22:	e005      	b.n	8016f30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016f24:	6839      	ldr	r1, [r7, #0]
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f000 fb4f 	bl	80175ca <USBD_CtlError>
      break;
 8016f2c:	e000      	b.n	8016f30 <USBD_StdEPReq+0x330>
      break;
 8016f2e:	bf00      	nop
  }

  return ret;
 8016f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3710      	adds	r7, #16
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
	...

08016f3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
 8016f44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016f46:	2300      	movs	r3, #0
 8016f48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	885b      	ldrh	r3, [r3, #2]
 8016f56:	0a1b      	lsrs	r3, r3, #8
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	3b01      	subs	r3, #1
 8016f5c:	2b06      	cmp	r3, #6
 8016f5e:	f200 8128 	bhi.w	80171b2 <USBD_GetDescriptor+0x276>
 8016f62:	a201      	add	r2, pc, #4	@ (adr r2, 8016f68 <USBD_GetDescriptor+0x2c>)
 8016f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f68:	08016f85 	.word	0x08016f85
 8016f6c:	08016f9d 	.word	0x08016f9d
 8016f70:	08016fdd 	.word	0x08016fdd
 8016f74:	080171b3 	.word	0x080171b3
 8016f78:	080171b3 	.word	0x080171b3
 8016f7c:	08017153 	.word	0x08017153
 8016f80:	0801717f 	.word	0x0801717f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	7c12      	ldrb	r2, [r2, #16]
 8016f90:	f107 0108 	add.w	r1, r7, #8
 8016f94:	4610      	mov	r0, r2
 8016f96:	4798      	blx	r3
 8016f98:	60f8      	str	r0, [r7, #12]
      break;
 8016f9a:	e112      	b.n	80171c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	7c1b      	ldrb	r3, [r3, #16]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d10d      	bne.n	8016fc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fac:	f107 0208 	add.w	r2, r7, #8
 8016fb0:	4610      	mov	r0, r2
 8016fb2:	4798      	blx	r3
 8016fb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	3301      	adds	r3, #1
 8016fba:	2202      	movs	r2, #2
 8016fbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016fbe:	e100      	b.n	80171c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fc8:	f107 0208 	add.w	r2, r7, #8
 8016fcc:	4610      	mov	r0, r2
 8016fce:	4798      	blx	r3
 8016fd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	2202      	movs	r2, #2
 8016fd8:	701a      	strb	r2, [r3, #0]
      break;
 8016fda:	e0f2      	b.n	80171c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	885b      	ldrh	r3, [r3, #2]
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	2b05      	cmp	r3, #5
 8016fe4:	f200 80ac 	bhi.w	8017140 <USBD_GetDescriptor+0x204>
 8016fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8016ff0 <USBD_GetDescriptor+0xb4>)
 8016fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fee:	bf00      	nop
 8016ff0:	08017009 	.word	0x08017009
 8016ff4:	0801703d 	.word	0x0801703d
 8016ff8:	08017071 	.word	0x08017071
 8016ffc:	080170a5 	.word	0x080170a5
 8017000:	080170d9 	.word	0x080170d9
 8017004:	0801710d 	.word	0x0801710d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801700e:	685b      	ldr	r3, [r3, #4]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d00b      	beq.n	801702c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	687a      	ldr	r2, [r7, #4]
 801701e:	7c12      	ldrb	r2, [r2, #16]
 8017020:	f107 0108 	add.w	r1, r7, #8
 8017024:	4610      	mov	r0, r2
 8017026:	4798      	blx	r3
 8017028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801702a:	e091      	b.n	8017150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801702c:	6839      	ldr	r1, [r7, #0]
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f000 facb 	bl	80175ca <USBD_CtlError>
            err++;
 8017034:	7afb      	ldrb	r3, [r7, #11]
 8017036:	3301      	adds	r3, #1
 8017038:	72fb      	strb	r3, [r7, #11]
          break;
 801703a:	e089      	b.n	8017150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017042:	689b      	ldr	r3, [r3, #8]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d00b      	beq.n	8017060 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801704e:	689b      	ldr	r3, [r3, #8]
 8017050:	687a      	ldr	r2, [r7, #4]
 8017052:	7c12      	ldrb	r2, [r2, #16]
 8017054:	f107 0108 	add.w	r1, r7, #8
 8017058:	4610      	mov	r0, r2
 801705a:	4798      	blx	r3
 801705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801705e:	e077      	b.n	8017150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017060:	6839      	ldr	r1, [r7, #0]
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f000 fab1 	bl	80175ca <USBD_CtlError>
            err++;
 8017068:	7afb      	ldrb	r3, [r7, #11]
 801706a:	3301      	adds	r3, #1
 801706c:	72fb      	strb	r3, [r7, #11]
          break;
 801706e:	e06f      	b.n	8017150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017076:	68db      	ldr	r3, [r3, #12]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d00b      	beq.n	8017094 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017082:	68db      	ldr	r3, [r3, #12]
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	7c12      	ldrb	r2, [r2, #16]
 8017088:	f107 0108 	add.w	r1, r7, #8
 801708c:	4610      	mov	r0, r2
 801708e:	4798      	blx	r3
 8017090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017092:	e05d      	b.n	8017150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017094:	6839      	ldr	r1, [r7, #0]
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f000 fa97 	bl	80175ca <USBD_CtlError>
            err++;
 801709c:	7afb      	ldrb	r3, [r7, #11]
 801709e:	3301      	adds	r3, #1
 80170a0:	72fb      	strb	r3, [r7, #11]
          break;
 80170a2:	e055      	b.n	8017150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170aa:	691b      	ldr	r3, [r3, #16]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d00b      	beq.n	80170c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170b6:	691b      	ldr	r3, [r3, #16]
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	7c12      	ldrb	r2, [r2, #16]
 80170bc:	f107 0108 	add.w	r1, r7, #8
 80170c0:	4610      	mov	r0, r2
 80170c2:	4798      	blx	r3
 80170c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170c6:	e043      	b.n	8017150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80170c8:	6839      	ldr	r1, [r7, #0]
 80170ca:	6878      	ldr	r0, [r7, #4]
 80170cc:	f000 fa7d 	bl	80175ca <USBD_CtlError>
            err++;
 80170d0:	7afb      	ldrb	r3, [r7, #11]
 80170d2:	3301      	adds	r3, #1
 80170d4:	72fb      	strb	r3, [r7, #11]
          break;
 80170d6:	e03b      	b.n	8017150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170de:	695b      	ldr	r3, [r3, #20]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00b      	beq.n	80170fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ea:	695b      	ldr	r3, [r3, #20]
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	7c12      	ldrb	r2, [r2, #16]
 80170f0:	f107 0108 	add.w	r1, r7, #8
 80170f4:	4610      	mov	r0, r2
 80170f6:	4798      	blx	r3
 80170f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170fa:	e029      	b.n	8017150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80170fc:	6839      	ldr	r1, [r7, #0]
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 fa63 	bl	80175ca <USBD_CtlError>
            err++;
 8017104:	7afb      	ldrb	r3, [r7, #11]
 8017106:	3301      	adds	r3, #1
 8017108:	72fb      	strb	r3, [r7, #11]
          break;
 801710a:	e021      	b.n	8017150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017112:	699b      	ldr	r3, [r3, #24]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d00b      	beq.n	8017130 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801711e:	699b      	ldr	r3, [r3, #24]
 8017120:	687a      	ldr	r2, [r7, #4]
 8017122:	7c12      	ldrb	r2, [r2, #16]
 8017124:	f107 0108 	add.w	r1, r7, #8
 8017128:	4610      	mov	r0, r2
 801712a:	4798      	blx	r3
 801712c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801712e:	e00f      	b.n	8017150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017130:	6839      	ldr	r1, [r7, #0]
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f000 fa49 	bl	80175ca <USBD_CtlError>
            err++;
 8017138:	7afb      	ldrb	r3, [r7, #11]
 801713a:	3301      	adds	r3, #1
 801713c:	72fb      	strb	r3, [r7, #11]
          break;
 801713e:	e007      	b.n	8017150 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017140:	6839      	ldr	r1, [r7, #0]
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f000 fa41 	bl	80175ca <USBD_CtlError>
          err++;
 8017148:	7afb      	ldrb	r3, [r7, #11]
 801714a:	3301      	adds	r3, #1
 801714c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801714e:	bf00      	nop
      }
      break;
 8017150:	e037      	b.n	80171c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	7c1b      	ldrb	r3, [r3, #16]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d109      	bne.n	801716e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017162:	f107 0208 	add.w	r2, r7, #8
 8017166:	4610      	mov	r0, r2
 8017168:	4798      	blx	r3
 801716a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801716c:	e029      	b.n	80171c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801716e:	6839      	ldr	r1, [r7, #0]
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f000 fa2a 	bl	80175ca <USBD_CtlError>
        err++;
 8017176:	7afb      	ldrb	r3, [r7, #11]
 8017178:	3301      	adds	r3, #1
 801717a:	72fb      	strb	r3, [r7, #11]
      break;
 801717c:	e021      	b.n	80171c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	7c1b      	ldrb	r3, [r3, #16]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d10d      	bne.n	80171a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801718e:	f107 0208 	add.w	r2, r7, #8
 8017192:	4610      	mov	r0, r2
 8017194:	4798      	blx	r3
 8017196:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	3301      	adds	r3, #1
 801719c:	2207      	movs	r2, #7
 801719e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80171a0:	e00f      	b.n	80171c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80171a2:	6839      	ldr	r1, [r7, #0]
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	f000 fa10 	bl	80175ca <USBD_CtlError>
        err++;
 80171aa:	7afb      	ldrb	r3, [r7, #11]
 80171ac:	3301      	adds	r3, #1
 80171ae:	72fb      	strb	r3, [r7, #11]
      break;
 80171b0:	e007      	b.n	80171c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80171b2:	6839      	ldr	r1, [r7, #0]
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 fa08 	bl	80175ca <USBD_CtlError>
      err++;
 80171ba:	7afb      	ldrb	r3, [r7, #11]
 80171bc:	3301      	adds	r3, #1
 80171be:	72fb      	strb	r3, [r7, #11]
      break;
 80171c0:	bf00      	nop
  }

  if (err != 0U)
 80171c2:	7afb      	ldrb	r3, [r7, #11]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d11e      	bne.n	8017206 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	88db      	ldrh	r3, [r3, #6]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d016      	beq.n	80171fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80171d0:	893b      	ldrh	r3, [r7, #8]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d00e      	beq.n	80171f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	88da      	ldrh	r2, [r3, #6]
 80171da:	893b      	ldrh	r3, [r7, #8]
 80171dc:	4293      	cmp	r3, r2
 80171de:	bf28      	it	cs
 80171e0:	4613      	movcs	r3, r2
 80171e2:	b29b      	uxth	r3, r3
 80171e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80171e6:	893b      	ldrh	r3, [r7, #8]
 80171e8:	461a      	mov	r2, r3
 80171ea:	68f9      	ldr	r1, [r7, #12]
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f000 fa5d 	bl	80176ac <USBD_CtlSendData>
 80171f2:	e009      	b.n	8017208 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80171f4:	6839      	ldr	r1, [r7, #0]
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 f9e7 	bl	80175ca <USBD_CtlError>
 80171fc:	e004      	b.n	8017208 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f000 fa91 	bl	8017726 <USBD_CtlSendStatus>
 8017204:	e000      	b.n	8017208 <USBD_GetDescriptor+0x2cc>
    return;
 8017206:	bf00      	nop
  }
}
 8017208:	3710      	adds	r7, #16
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}
 801720e:	bf00      	nop

08017210 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b084      	sub	sp, #16
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	889b      	ldrh	r3, [r3, #4]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d131      	bne.n	8017286 <USBD_SetAddress+0x76>
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	88db      	ldrh	r3, [r3, #6]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d12d      	bne.n	8017286 <USBD_SetAddress+0x76>
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	885b      	ldrh	r3, [r3, #2]
 801722e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017230:	d829      	bhi.n	8017286 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	885b      	ldrh	r3, [r3, #2]
 8017236:	b2db      	uxtb	r3, r3
 8017238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801723c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017244:	b2db      	uxtb	r3, r3
 8017246:	2b03      	cmp	r3, #3
 8017248:	d104      	bne.n	8017254 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801724a:	6839      	ldr	r1, [r7, #0]
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f000 f9bc 	bl	80175ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017252:	e01d      	b.n	8017290 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	7bfa      	ldrb	r2, [r7, #15]
 8017258:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801725c:	7bfb      	ldrb	r3, [r7, #15]
 801725e:	4619      	mov	r1, r3
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f004 fd30 	bl	801bcc6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f000 fa5d 	bl	8017726 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801726c:	7bfb      	ldrb	r3, [r7, #15]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d004      	beq.n	801727c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2202      	movs	r2, #2
 8017276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801727a:	e009      	b.n	8017290 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2201      	movs	r2, #1
 8017280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017284:	e004      	b.n	8017290 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017286:	6839      	ldr	r1, [r7, #0]
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f000 f99e 	bl	80175ca <USBD_CtlError>
  }
}
 801728e:	bf00      	nop
 8017290:	bf00      	nop
 8017292:	3710      	adds	r7, #16
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b084      	sub	sp, #16
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80172a2:	2300      	movs	r3, #0
 80172a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	885b      	ldrh	r3, [r3, #2]
 80172aa:	b2da      	uxtb	r2, r3
 80172ac:	4b4e      	ldr	r3, [pc, #312]	@ (80173e8 <USBD_SetConfig+0x150>)
 80172ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80172b0:	4b4d      	ldr	r3, [pc, #308]	@ (80173e8 <USBD_SetConfig+0x150>)
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d905      	bls.n	80172c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80172b8:	6839      	ldr	r1, [r7, #0]
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f000 f985 	bl	80175ca <USBD_CtlError>
    return USBD_FAIL;
 80172c0:	2303      	movs	r3, #3
 80172c2:	e08c      	b.n	80173de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	d002      	beq.n	80172d6 <USBD_SetConfig+0x3e>
 80172d0:	2b03      	cmp	r3, #3
 80172d2:	d029      	beq.n	8017328 <USBD_SetConfig+0x90>
 80172d4:	e075      	b.n	80173c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80172d6:	4b44      	ldr	r3, [pc, #272]	@ (80173e8 <USBD_SetConfig+0x150>)
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d020      	beq.n	8017320 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80172de:	4b42      	ldr	r3, [pc, #264]	@ (80173e8 <USBD_SetConfig+0x150>)
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	461a      	mov	r2, r3
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80172e8:	4b3f      	ldr	r3, [pc, #252]	@ (80173e8 <USBD_SetConfig+0x150>)
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	4619      	mov	r1, r3
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f7fe ffe9 	bl	80162c6 <USBD_SetClassConfig>
 80172f4:	4603      	mov	r3, r0
 80172f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80172f8:	7bfb      	ldrb	r3, [r7, #15]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d008      	beq.n	8017310 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80172fe:	6839      	ldr	r1, [r7, #0]
 8017300:	6878      	ldr	r0, [r7, #4]
 8017302:	f000 f962 	bl	80175ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2202      	movs	r2, #2
 801730a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801730e:	e065      	b.n	80173dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f000 fa08 	bl	8017726 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2203      	movs	r2, #3
 801731a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801731e:	e05d      	b.n	80173dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f000 fa00 	bl	8017726 <USBD_CtlSendStatus>
      break;
 8017326:	e059      	b.n	80173dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017328:	4b2f      	ldr	r3, [pc, #188]	@ (80173e8 <USBD_SetConfig+0x150>)
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d112      	bne.n	8017356 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2202      	movs	r2, #2
 8017334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017338:	4b2b      	ldr	r3, [pc, #172]	@ (80173e8 <USBD_SetConfig+0x150>)
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	461a      	mov	r2, r3
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017342:	4b29      	ldr	r3, [pc, #164]	@ (80173e8 <USBD_SetConfig+0x150>)
 8017344:	781b      	ldrb	r3, [r3, #0]
 8017346:	4619      	mov	r1, r3
 8017348:	6878      	ldr	r0, [r7, #4]
 801734a:	f7fe ffd8 	bl	80162fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f000 f9e9 	bl	8017726 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017354:	e042      	b.n	80173dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017356:	4b24      	ldr	r3, [pc, #144]	@ (80173e8 <USBD_SetConfig+0x150>)
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	461a      	mov	r2, r3
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	429a      	cmp	r2, r3
 8017362:	d02a      	beq.n	80173ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	b2db      	uxtb	r3, r3
 801736a:	4619      	mov	r1, r3
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f7fe ffc6 	bl	80162fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017372:	4b1d      	ldr	r3, [pc, #116]	@ (80173e8 <USBD_SetConfig+0x150>)
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	461a      	mov	r2, r3
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801737c:	4b1a      	ldr	r3, [pc, #104]	@ (80173e8 <USBD_SetConfig+0x150>)
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	4619      	mov	r1, r3
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f7fe ff9f 	bl	80162c6 <USBD_SetClassConfig>
 8017388:	4603      	mov	r3, r0
 801738a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801738c:	7bfb      	ldrb	r3, [r7, #15]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d00f      	beq.n	80173b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017392:	6839      	ldr	r1, [r7, #0]
 8017394:	6878      	ldr	r0, [r7, #4]
 8017396:	f000 f918 	bl	80175ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	4619      	mov	r1, r3
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f7fe ffab 	bl	80162fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2202      	movs	r2, #2
 80173ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80173b0:	e014      	b.n	80173dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 f9b7 	bl	8017726 <USBD_CtlSendStatus>
      break;
 80173b8:	e010      	b.n	80173dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	f000 f9b3 	bl	8017726 <USBD_CtlSendStatus>
      break;
 80173c0:	e00c      	b.n	80173dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80173c2:	6839      	ldr	r1, [r7, #0]
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f000 f900 	bl	80175ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80173ca:	4b07      	ldr	r3, [pc, #28]	@ (80173e8 <USBD_SetConfig+0x150>)
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	4619      	mov	r1, r3
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f7fe ff94 	bl	80162fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80173d6:	2303      	movs	r3, #3
 80173d8:	73fb      	strb	r3, [r7, #15]
      break;
 80173da:	bf00      	nop
  }

  return ret;
 80173dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3710      	adds	r7, #16
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}
 80173e6:	bf00      	nop
 80173e8:	20001ab6 	.word	0x20001ab6

080173ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b082      	sub	sp, #8
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	88db      	ldrh	r3, [r3, #6]
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	d004      	beq.n	8017408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 f8e2 	bl	80175ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017406:	e023      	b.n	8017450 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801740e:	b2db      	uxtb	r3, r3
 8017410:	2b02      	cmp	r3, #2
 8017412:	dc02      	bgt.n	801741a <USBD_GetConfig+0x2e>
 8017414:	2b00      	cmp	r3, #0
 8017416:	dc03      	bgt.n	8017420 <USBD_GetConfig+0x34>
 8017418:	e015      	b.n	8017446 <USBD_GetConfig+0x5a>
 801741a:	2b03      	cmp	r3, #3
 801741c:	d00b      	beq.n	8017436 <USBD_GetConfig+0x4a>
 801741e:	e012      	b.n	8017446 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2200      	movs	r2, #0
 8017424:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	3308      	adds	r3, #8
 801742a:	2201      	movs	r2, #1
 801742c:	4619      	mov	r1, r3
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f000 f93c 	bl	80176ac <USBD_CtlSendData>
        break;
 8017434:	e00c      	b.n	8017450 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	3304      	adds	r3, #4
 801743a:	2201      	movs	r2, #1
 801743c:	4619      	mov	r1, r3
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 f934 	bl	80176ac <USBD_CtlSendData>
        break;
 8017444:	e004      	b.n	8017450 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f000 f8be 	bl	80175ca <USBD_CtlError>
        break;
 801744e:	bf00      	nop
}
 8017450:	bf00      	nop
 8017452:	3708      	adds	r7, #8
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}

08017458 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017468:	b2db      	uxtb	r3, r3
 801746a:	3b01      	subs	r3, #1
 801746c:	2b02      	cmp	r3, #2
 801746e:	d81e      	bhi.n	80174ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	88db      	ldrh	r3, [r3, #6]
 8017474:	2b02      	cmp	r3, #2
 8017476:	d004      	beq.n	8017482 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017478:	6839      	ldr	r1, [r7, #0]
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f000 f8a5 	bl	80175ca <USBD_CtlError>
        break;
 8017480:	e01a      	b.n	80174b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2201      	movs	r2, #1
 8017486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801748e:	2b00      	cmp	r3, #0
 8017490:	d005      	beq.n	801749e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	f043 0202 	orr.w	r2, r3, #2
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	330c      	adds	r3, #12
 80174a2:	2202      	movs	r2, #2
 80174a4:	4619      	mov	r1, r3
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f000 f900 	bl	80176ac <USBD_CtlSendData>
      break;
 80174ac:	e004      	b.n	80174b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80174ae:	6839      	ldr	r1, [r7, #0]
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f000 f88a 	bl	80175ca <USBD_CtlError>
      break;
 80174b6:	bf00      	nop
  }
}
 80174b8:	bf00      	nop
 80174ba:	3708      	adds	r7, #8
 80174bc:	46bd      	mov	sp, r7
 80174be:	bd80      	pop	{r7, pc}

080174c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
 80174c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	885b      	ldrh	r3, [r3, #2]
 80174ce:	2b01      	cmp	r3, #1
 80174d0:	d107      	bne.n	80174e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2201      	movs	r2, #1
 80174d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f000 f923 	bl	8017726 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80174e0:	e013      	b.n	801750a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	885b      	ldrh	r3, [r3, #2]
 80174e6:	2b02      	cmp	r3, #2
 80174e8:	d10b      	bne.n	8017502 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80174ea:	683b      	ldr	r3, [r7, #0]
 80174ec:	889b      	ldrh	r3, [r3, #4]
 80174ee:	0a1b      	lsrs	r3, r3, #8
 80174f0:	b29b      	uxth	r3, r3
 80174f2:	b2da      	uxtb	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f000 f913 	bl	8017726 <USBD_CtlSendStatus>
}
 8017500:	e003      	b.n	801750a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017502:	6839      	ldr	r1, [r7, #0]
 8017504:	6878      	ldr	r0, [r7, #4]
 8017506:	f000 f860 	bl	80175ca <USBD_CtlError>
}
 801750a:	bf00      	nop
 801750c:	3708      	adds	r7, #8
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}

08017512 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017512:	b580      	push	{r7, lr}
 8017514:	b082      	sub	sp, #8
 8017516:	af00      	add	r7, sp, #0
 8017518:	6078      	str	r0, [r7, #4]
 801751a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017522:	b2db      	uxtb	r3, r3
 8017524:	3b01      	subs	r3, #1
 8017526:	2b02      	cmp	r3, #2
 8017528:	d80b      	bhi.n	8017542 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	885b      	ldrh	r3, [r3, #2]
 801752e:	2b01      	cmp	r3, #1
 8017530:	d10c      	bne.n	801754c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	2200      	movs	r2, #0
 8017536:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f000 f8f3 	bl	8017726 <USBD_CtlSendStatus>
      }
      break;
 8017540:	e004      	b.n	801754c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017542:	6839      	ldr	r1, [r7, #0]
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f000 f840 	bl	80175ca <USBD_CtlError>
      break;
 801754a:	e000      	b.n	801754e <USBD_ClrFeature+0x3c>
      break;
 801754c:	bf00      	nop
  }
}
 801754e:	bf00      	nop
 8017550:	3708      	adds	r7, #8
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}

08017556 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017556:	b580      	push	{r7, lr}
 8017558:	b084      	sub	sp, #16
 801755a:	af00      	add	r7, sp, #0
 801755c:	6078      	str	r0, [r7, #4]
 801755e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	781a      	ldrb	r2, [r3, #0]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	3301      	adds	r3, #1
 8017570:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	781a      	ldrb	r2, [r3, #0]
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	3301      	adds	r3, #1
 801757e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f7ff fa40 	bl	8016a06 <SWAPBYTE>
 8017586:	4603      	mov	r3, r0
 8017588:	461a      	mov	r2, r3
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	3301      	adds	r3, #1
 8017592:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	3301      	adds	r3, #1
 8017598:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801759a:	68f8      	ldr	r0, [r7, #12]
 801759c:	f7ff fa33 	bl	8016a06 <SWAPBYTE>
 80175a0:	4603      	mov	r3, r0
 80175a2:	461a      	mov	r2, r3
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	3301      	adds	r3, #1
 80175ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	3301      	adds	r3, #1
 80175b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f7ff fa26 	bl	8016a06 <SWAPBYTE>
 80175ba:	4603      	mov	r3, r0
 80175bc:	461a      	mov	r2, r3
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	80da      	strh	r2, [r3, #6]
}
 80175c2:	bf00      	nop
 80175c4:	3710      	adds	r7, #16
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}

080175ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175ca:	b580      	push	{r7, lr}
 80175cc:	b082      	sub	sp, #8
 80175ce:	af00      	add	r7, sp, #0
 80175d0:	6078      	str	r0, [r7, #4]
 80175d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80175d4:	2180      	movs	r1, #128	@ 0x80
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f004 fb0b 	bl	801bbf2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80175dc:	2100      	movs	r1, #0
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f004 fb07 	bl	801bbf2 <USBD_LL_StallEP>
}
 80175e4:	bf00      	nop
 80175e6:	3708      	adds	r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}

080175ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b086      	sub	sp, #24
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	60f8      	str	r0, [r7, #12]
 80175f4:	60b9      	str	r1, [r7, #8]
 80175f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80175f8:	2300      	movs	r3, #0
 80175fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d036      	beq.n	8017670 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017606:	6938      	ldr	r0, [r7, #16]
 8017608:	f000 f836 	bl	8017678 <USBD_GetLen>
 801760c:	4603      	mov	r3, r0
 801760e:	3301      	adds	r3, #1
 8017610:	b29b      	uxth	r3, r3
 8017612:	005b      	lsls	r3, r3, #1
 8017614:	b29a      	uxth	r2, r3
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801761a:	7dfb      	ldrb	r3, [r7, #23]
 801761c:	68ba      	ldr	r2, [r7, #8]
 801761e:	4413      	add	r3, r2
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	7812      	ldrb	r2, [r2, #0]
 8017624:	701a      	strb	r2, [r3, #0]
  idx++;
 8017626:	7dfb      	ldrb	r3, [r7, #23]
 8017628:	3301      	adds	r3, #1
 801762a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801762c:	7dfb      	ldrb	r3, [r7, #23]
 801762e:	68ba      	ldr	r2, [r7, #8]
 8017630:	4413      	add	r3, r2
 8017632:	2203      	movs	r2, #3
 8017634:	701a      	strb	r2, [r3, #0]
  idx++;
 8017636:	7dfb      	ldrb	r3, [r7, #23]
 8017638:	3301      	adds	r3, #1
 801763a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801763c:	e013      	b.n	8017666 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801763e:	7dfb      	ldrb	r3, [r7, #23]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	4413      	add	r3, r2
 8017644:	693a      	ldr	r2, [r7, #16]
 8017646:	7812      	ldrb	r2, [r2, #0]
 8017648:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	3301      	adds	r3, #1
 801764e:	613b      	str	r3, [r7, #16]
    idx++;
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	3301      	adds	r3, #1
 8017654:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017656:	7dfb      	ldrb	r3, [r7, #23]
 8017658:	68ba      	ldr	r2, [r7, #8]
 801765a:	4413      	add	r3, r2
 801765c:	2200      	movs	r2, #0
 801765e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017660:	7dfb      	ldrb	r3, [r7, #23]
 8017662:	3301      	adds	r3, #1
 8017664:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d1e7      	bne.n	801763e <USBD_GetString+0x52>
 801766e:	e000      	b.n	8017672 <USBD_GetString+0x86>
    return;
 8017670:	bf00      	nop
  }
}
 8017672:	3718      	adds	r7, #24
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}

08017678 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017678:	b480      	push	{r7}
 801767a:	b085      	sub	sp, #20
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017680:	2300      	movs	r3, #0
 8017682:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017688:	e005      	b.n	8017696 <USBD_GetLen+0x1e>
  {
    len++;
 801768a:	7bfb      	ldrb	r3, [r7, #15]
 801768c:	3301      	adds	r3, #1
 801768e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	3301      	adds	r3, #1
 8017694:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	781b      	ldrb	r3, [r3, #0]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d1f5      	bne.n	801768a <USBD_GetLen+0x12>
  }

  return len;
 801769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	3714      	adds	r7, #20
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2202      	movs	r2, #2
 80176bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	687a      	ldr	r2, [r7, #4]
 80176c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	68ba      	ldr	r2, [r7, #8]
 80176d0:	2100      	movs	r1, #0
 80176d2:	68f8      	ldr	r0, [r7, #12]
 80176d4:	f004 fb16 	bl	801bd04 <USBD_LL_Transmit>

  return USBD_OK;
 80176d8:	2300      	movs	r3, #0
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3710      	adds	r7, #16
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80176e2:	b580      	push	{r7, lr}
 80176e4:	b084      	sub	sp, #16
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	60f8      	str	r0, [r7, #12]
 80176ea:	60b9      	str	r1, [r7, #8]
 80176ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	68ba      	ldr	r2, [r7, #8]
 80176f2:	2100      	movs	r1, #0
 80176f4:	68f8      	ldr	r0, [r7, #12]
 80176f6:	f004 fb05 	bl	801bd04 <USBD_LL_Transmit>

  return USBD_OK;
 80176fa:	2300      	movs	r3, #0
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	3710      	adds	r7, #16
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}

08017704 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	68ba      	ldr	r2, [r7, #8]
 8017714:	2100      	movs	r1, #0
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f004 fb15 	bl	801bd46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801771c:	2300      	movs	r3, #0
}
 801771e:	4618      	mov	r0, r3
 8017720:	3710      	adds	r7, #16
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}

08017726 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017726:	b580      	push	{r7, lr}
 8017728:	b082      	sub	sp, #8
 801772a:	af00      	add	r7, sp, #0
 801772c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	2204      	movs	r2, #4
 8017732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017736:	2300      	movs	r3, #0
 8017738:	2200      	movs	r2, #0
 801773a:	2100      	movs	r1, #0
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f004 fae1 	bl	801bd04 <USBD_LL_Transmit>

  return USBD_OK;
 8017742:	2300      	movs	r3, #0
}
 8017744:	4618      	mov	r0, r3
 8017746:	3708      	adds	r7, #8
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	2205      	movs	r2, #5
 8017758:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801775c:	2300      	movs	r3, #0
 801775e:	2200      	movs	r2, #0
 8017760:	2100      	movs	r1, #0
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f004 faef 	bl	801bd46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017768:	2300      	movs	r3, #0
}
 801776a:	4618      	mov	r0, r3
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}
	...

08017774 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b084      	sub	sp, #16
 8017778:	af00      	add	r7, sp, #0
 801777a:	4603      	mov	r3, r0
 801777c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801777e:	79fb      	ldrb	r3, [r7, #7]
 8017780:	4a08      	ldr	r2, [pc, #32]	@ (80177a4 <disk_status+0x30>)
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	4413      	add	r3, r2
 8017786:	685b      	ldr	r3, [r3, #4]
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	79fa      	ldrb	r2, [r7, #7]
 801778c:	4905      	ldr	r1, [pc, #20]	@ (80177a4 <disk_status+0x30>)
 801778e:	440a      	add	r2, r1
 8017790:	7a12      	ldrb	r2, [r2, #8]
 8017792:	4610      	mov	r0, r2
 8017794:	4798      	blx	r3
 8017796:	4603      	mov	r3, r0
 8017798:	73fb      	strb	r3, [r7, #15]
  return stat;
 801779a:	7bfb      	ldrb	r3, [r7, #15]
}
 801779c:	4618      	mov	r0, r3
 801779e:	3710      	adds	r7, #16
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	20001ce0 	.word	0x20001ce0

080177a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b084      	sub	sp, #16
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4603      	mov	r3, r0
 80177b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80177b2:	2300      	movs	r3, #0
 80177b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80177b6:	79fb      	ldrb	r3, [r7, #7]
 80177b8:	4a0d      	ldr	r2, [pc, #52]	@ (80177f0 <disk_initialize+0x48>)
 80177ba:	5cd3      	ldrb	r3, [r2, r3]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d111      	bne.n	80177e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80177c0:	79fb      	ldrb	r3, [r7, #7]
 80177c2:	4a0b      	ldr	r2, [pc, #44]	@ (80177f0 <disk_initialize+0x48>)
 80177c4:	2101      	movs	r1, #1
 80177c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80177c8:	79fb      	ldrb	r3, [r7, #7]
 80177ca:	4a09      	ldr	r2, [pc, #36]	@ (80177f0 <disk_initialize+0x48>)
 80177cc:	009b      	lsls	r3, r3, #2
 80177ce:	4413      	add	r3, r2
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	79fa      	ldrb	r2, [r7, #7]
 80177d6:	4906      	ldr	r1, [pc, #24]	@ (80177f0 <disk_initialize+0x48>)
 80177d8:	440a      	add	r2, r1
 80177da:	7a12      	ldrb	r2, [r2, #8]
 80177dc:	4610      	mov	r0, r2
 80177de:	4798      	blx	r3
 80177e0:	4603      	mov	r3, r0
 80177e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80177e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3710      	adds	r7, #16
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	20001ce0 	.word	0x20001ce0

080177f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80177f4:	b590      	push	{r4, r7, lr}
 80177f6:	b087      	sub	sp, #28
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60b9      	str	r1, [r7, #8]
 80177fc:	607a      	str	r2, [r7, #4]
 80177fe:	603b      	str	r3, [r7, #0]
 8017800:	4603      	mov	r3, r0
 8017802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017804:	7bfb      	ldrb	r3, [r7, #15]
 8017806:	4a0a      	ldr	r2, [pc, #40]	@ (8017830 <disk_read+0x3c>)
 8017808:	009b      	lsls	r3, r3, #2
 801780a:	4413      	add	r3, r2
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	689c      	ldr	r4, [r3, #8]
 8017810:	7bfb      	ldrb	r3, [r7, #15]
 8017812:	4a07      	ldr	r2, [pc, #28]	@ (8017830 <disk_read+0x3c>)
 8017814:	4413      	add	r3, r2
 8017816:	7a18      	ldrb	r0, [r3, #8]
 8017818:	683b      	ldr	r3, [r7, #0]
 801781a:	687a      	ldr	r2, [r7, #4]
 801781c:	68b9      	ldr	r1, [r7, #8]
 801781e:	47a0      	blx	r4
 8017820:	4603      	mov	r3, r0
 8017822:	75fb      	strb	r3, [r7, #23]
  return res;
 8017824:	7dfb      	ldrb	r3, [r7, #23]
}
 8017826:	4618      	mov	r0, r3
 8017828:	371c      	adds	r7, #28
 801782a:	46bd      	mov	sp, r7
 801782c:	bd90      	pop	{r4, r7, pc}
 801782e:	bf00      	nop
 8017830:	20001ce0 	.word	0x20001ce0

08017834 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017834:	b590      	push	{r4, r7, lr}
 8017836:	b087      	sub	sp, #28
 8017838:	af00      	add	r7, sp, #0
 801783a:	60b9      	str	r1, [r7, #8]
 801783c:	607a      	str	r2, [r7, #4]
 801783e:	603b      	str	r3, [r7, #0]
 8017840:	4603      	mov	r3, r0
 8017842:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017844:	7bfb      	ldrb	r3, [r7, #15]
 8017846:	4a0a      	ldr	r2, [pc, #40]	@ (8017870 <disk_write+0x3c>)
 8017848:	009b      	lsls	r3, r3, #2
 801784a:	4413      	add	r3, r2
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	68dc      	ldr	r4, [r3, #12]
 8017850:	7bfb      	ldrb	r3, [r7, #15]
 8017852:	4a07      	ldr	r2, [pc, #28]	@ (8017870 <disk_write+0x3c>)
 8017854:	4413      	add	r3, r2
 8017856:	7a18      	ldrb	r0, [r3, #8]
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	687a      	ldr	r2, [r7, #4]
 801785c:	68b9      	ldr	r1, [r7, #8]
 801785e:	47a0      	blx	r4
 8017860:	4603      	mov	r3, r0
 8017862:	75fb      	strb	r3, [r7, #23]
  return res;
 8017864:	7dfb      	ldrb	r3, [r7, #23]
}
 8017866:	4618      	mov	r0, r3
 8017868:	371c      	adds	r7, #28
 801786a:	46bd      	mov	sp, r7
 801786c:	bd90      	pop	{r4, r7, pc}
 801786e:	bf00      	nop
 8017870:	20001ce0 	.word	0x20001ce0

08017874 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b084      	sub	sp, #16
 8017878:	af00      	add	r7, sp, #0
 801787a:	4603      	mov	r3, r0
 801787c:	603a      	str	r2, [r7, #0]
 801787e:	71fb      	strb	r3, [r7, #7]
 8017880:	460b      	mov	r3, r1
 8017882:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017884:	79fb      	ldrb	r3, [r7, #7]
 8017886:	4a09      	ldr	r2, [pc, #36]	@ (80178ac <disk_ioctl+0x38>)
 8017888:	009b      	lsls	r3, r3, #2
 801788a:	4413      	add	r3, r2
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	691b      	ldr	r3, [r3, #16]
 8017890:	79fa      	ldrb	r2, [r7, #7]
 8017892:	4906      	ldr	r1, [pc, #24]	@ (80178ac <disk_ioctl+0x38>)
 8017894:	440a      	add	r2, r1
 8017896:	7a10      	ldrb	r0, [r2, #8]
 8017898:	79b9      	ldrb	r1, [r7, #6]
 801789a:	683a      	ldr	r2, [r7, #0]
 801789c:	4798      	blx	r3
 801789e:	4603      	mov	r3, r0
 80178a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80178a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3710      	adds	r7, #16
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}
 80178ac:	20001ce0 	.word	0x20001ce0

080178b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80178b0:	b480      	push	{r7}
 80178b2:	b085      	sub	sp, #20
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	3301      	adds	r3, #1
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80178c0:	89fb      	ldrh	r3, [r7, #14]
 80178c2:	021b      	lsls	r3, r3, #8
 80178c4:	b21a      	sxth	r2, r3
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	b21b      	sxth	r3, r3
 80178cc:	4313      	orrs	r3, r2
 80178ce:	b21b      	sxth	r3, r3
 80178d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80178d2:	89fb      	ldrh	r3, [r7, #14]
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3714      	adds	r7, #20
 80178d8:	46bd      	mov	sp, r7
 80178da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178de:	4770      	bx	lr

080178e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80178e0:	b480      	push	{r7}
 80178e2:	b085      	sub	sp, #20
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	3303      	adds	r3, #3
 80178ec:	781b      	ldrb	r3, [r3, #0]
 80178ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	021b      	lsls	r3, r3, #8
 80178f4:	687a      	ldr	r2, [r7, #4]
 80178f6:	3202      	adds	r2, #2
 80178f8:	7812      	ldrb	r2, [r2, #0]
 80178fa:	4313      	orrs	r3, r2
 80178fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	021b      	lsls	r3, r3, #8
 8017902:	687a      	ldr	r2, [r7, #4]
 8017904:	3201      	adds	r2, #1
 8017906:	7812      	ldrb	r2, [r2, #0]
 8017908:	4313      	orrs	r3, r2
 801790a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	021b      	lsls	r3, r3, #8
 8017910:	687a      	ldr	r2, [r7, #4]
 8017912:	7812      	ldrb	r2, [r2, #0]
 8017914:	4313      	orrs	r3, r2
 8017916:	60fb      	str	r3, [r7, #12]
	return rv;
 8017918:	68fb      	ldr	r3, [r7, #12]
}
 801791a:	4618      	mov	r0, r3
 801791c:	3714      	adds	r7, #20
 801791e:	46bd      	mov	sp, r7
 8017920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017924:	4770      	bx	lr

08017926 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017926:	b480      	push	{r7}
 8017928:	b083      	sub	sp, #12
 801792a:	af00      	add	r7, sp, #0
 801792c:	6078      	str	r0, [r7, #4]
 801792e:	460b      	mov	r3, r1
 8017930:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	1c5a      	adds	r2, r3, #1
 8017936:	607a      	str	r2, [r7, #4]
 8017938:	887a      	ldrh	r2, [r7, #2]
 801793a:	b2d2      	uxtb	r2, r2
 801793c:	701a      	strb	r2, [r3, #0]
 801793e:	887b      	ldrh	r3, [r7, #2]
 8017940:	0a1b      	lsrs	r3, r3, #8
 8017942:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	1c5a      	adds	r2, r3, #1
 8017948:	607a      	str	r2, [r7, #4]
 801794a:	887a      	ldrh	r2, [r7, #2]
 801794c:	b2d2      	uxtb	r2, r2
 801794e:	701a      	strb	r2, [r3, #0]
}
 8017950:	bf00      	nop
 8017952:	370c      	adds	r7, #12
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr

0801795c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801795c:	b480      	push	{r7}
 801795e:	b083      	sub	sp, #12
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	1c5a      	adds	r2, r3, #1
 801796a:	607a      	str	r2, [r7, #4]
 801796c:	683a      	ldr	r2, [r7, #0]
 801796e:	b2d2      	uxtb	r2, r2
 8017970:	701a      	strb	r2, [r3, #0]
 8017972:	683b      	ldr	r3, [r7, #0]
 8017974:	0a1b      	lsrs	r3, r3, #8
 8017976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	1c5a      	adds	r2, r3, #1
 801797c:	607a      	str	r2, [r7, #4]
 801797e:	683a      	ldr	r2, [r7, #0]
 8017980:	b2d2      	uxtb	r2, r2
 8017982:	701a      	strb	r2, [r3, #0]
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	0a1b      	lsrs	r3, r3, #8
 8017988:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	1c5a      	adds	r2, r3, #1
 801798e:	607a      	str	r2, [r7, #4]
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	b2d2      	uxtb	r2, r2
 8017994:	701a      	strb	r2, [r3, #0]
 8017996:	683b      	ldr	r3, [r7, #0]
 8017998:	0a1b      	lsrs	r3, r3, #8
 801799a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	1c5a      	adds	r2, r3, #1
 80179a0:	607a      	str	r2, [r7, #4]
 80179a2:	683a      	ldr	r2, [r7, #0]
 80179a4:	b2d2      	uxtb	r2, r2
 80179a6:	701a      	strb	r2, [r3, #0]
}
 80179a8:	bf00      	nop
 80179aa:	370c      	adds	r7, #12
 80179ac:	46bd      	mov	sp, r7
 80179ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b2:	4770      	bx	lr

080179b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80179b4:	b480      	push	{r7}
 80179b6:	b087      	sub	sp, #28
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	60f8      	str	r0, [r7, #12]
 80179bc:	60b9      	str	r1, [r7, #8]
 80179be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d00d      	beq.n	80179ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80179ce:	693a      	ldr	r2, [r7, #16]
 80179d0:	1c53      	adds	r3, r2, #1
 80179d2:	613b      	str	r3, [r7, #16]
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	1c59      	adds	r1, r3, #1
 80179d8:	6179      	str	r1, [r7, #20]
 80179da:	7812      	ldrb	r2, [r2, #0]
 80179dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	3b01      	subs	r3, #1
 80179e2:	607b      	str	r3, [r7, #4]
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d1f1      	bne.n	80179ce <mem_cpy+0x1a>
	}
}
 80179ea:	bf00      	nop
 80179ec:	371c      	adds	r7, #28
 80179ee:	46bd      	mov	sp, r7
 80179f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f4:	4770      	bx	lr

080179f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80179f6:	b480      	push	{r7}
 80179f8:	b087      	sub	sp, #28
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	60f8      	str	r0, [r7, #12]
 80179fe:	60b9      	str	r1, [r7, #8]
 8017a00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	1c5a      	adds	r2, r3, #1
 8017a0a:	617a      	str	r2, [r7, #20]
 8017a0c:	68ba      	ldr	r2, [r7, #8]
 8017a0e:	b2d2      	uxtb	r2, r2
 8017a10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	3b01      	subs	r3, #1
 8017a16:	607b      	str	r3, [r7, #4]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d1f3      	bne.n	8017a06 <mem_set+0x10>
}
 8017a1e:	bf00      	nop
 8017a20:	bf00      	nop
 8017a22:	371c      	adds	r7, #28
 8017a24:	46bd      	mov	sp, r7
 8017a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2a:	4770      	bx	lr

08017a2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017a2c:	b480      	push	{r7}
 8017a2e:	b089      	sub	sp, #36	@ 0x24
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	61fb      	str	r3, [r7, #28]
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017a40:	2300      	movs	r3, #0
 8017a42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	1c5a      	adds	r2, r3, #1
 8017a48:	61fa      	str	r2, [r7, #28]
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	69bb      	ldr	r3, [r7, #24]
 8017a50:	1c5a      	adds	r2, r3, #1
 8017a52:	61ba      	str	r2, [r7, #24]
 8017a54:	781b      	ldrb	r3, [r3, #0]
 8017a56:	1acb      	subs	r3, r1, r3
 8017a58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	3b01      	subs	r3, #1
 8017a5e:	607b      	str	r3, [r7, #4]
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d002      	beq.n	8017a6c <mem_cmp+0x40>
 8017a66:	697b      	ldr	r3, [r7, #20]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d0eb      	beq.n	8017a44 <mem_cmp+0x18>

	return r;
 8017a6c:	697b      	ldr	r3, [r7, #20]
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3724      	adds	r7, #36	@ 0x24
 8017a72:	46bd      	mov	sp, r7
 8017a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a78:	4770      	bx	lr

08017a7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017a7a:	b480      	push	{r7}
 8017a7c:	b083      	sub	sp, #12
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
 8017a82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017a84:	e002      	b.n	8017a8c <chk_chr+0x12>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	607b      	str	r3, [r7, #4]
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	781b      	ldrb	r3, [r3, #0]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d005      	beq.n	8017aa0 <chk_chr+0x26>
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	461a      	mov	r2, r3
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	4293      	cmp	r3, r2
 8017a9e:	d1f2      	bne.n	8017a86 <chk_chr+0xc>
	return *str;
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	781b      	ldrb	r3, [r3, #0]
}
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	370c      	adds	r7, #12
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aae:	4770      	bx	lr

08017ab0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017ab0:	b480      	push	{r7}
 8017ab2:	b085      	sub	sp, #20
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
 8017ab8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017aba:	2300      	movs	r3, #0
 8017abc:	60bb      	str	r3, [r7, #8]
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	60fb      	str	r3, [r7, #12]
 8017ac2:	e029      	b.n	8017b18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017ac4:	4a27      	ldr	r2, [pc, #156]	@ (8017b64 <chk_lock+0xb4>)
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	011b      	lsls	r3, r3, #4
 8017aca:	4413      	add	r3, r2
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d01d      	beq.n	8017b0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017ad2:	4a24      	ldr	r2, [pc, #144]	@ (8017b64 <chk_lock+0xb4>)
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	011b      	lsls	r3, r3, #4
 8017ad8:	4413      	add	r3, r2
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d116      	bne.n	8017b12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8017b64 <chk_lock+0xb4>)
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	011b      	lsls	r3, r3, #4
 8017aea:	4413      	add	r3, r2
 8017aec:	3304      	adds	r3, #4
 8017aee:	681a      	ldr	r2, [r3, #0]
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d10c      	bne.n	8017b12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017af8:	4a1a      	ldr	r2, [pc, #104]	@ (8017b64 <chk_lock+0xb4>)
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	011b      	lsls	r3, r3, #4
 8017afe:	4413      	add	r3, r2
 8017b00:	3308      	adds	r3, #8
 8017b02:	681a      	ldr	r2, [r3, #0]
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d102      	bne.n	8017b12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017b0c:	e007      	b.n	8017b1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	3301      	adds	r3, #1
 8017b16:	60fb      	str	r3, [r7, #12]
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	2b01      	cmp	r3, #1
 8017b1c:	d9d2      	bls.n	8017ac4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	2b02      	cmp	r3, #2
 8017b22:	d109      	bne.n	8017b38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017b24:	68bb      	ldr	r3, [r7, #8]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d102      	bne.n	8017b30 <chk_lock+0x80>
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	2b02      	cmp	r3, #2
 8017b2e:	d101      	bne.n	8017b34 <chk_lock+0x84>
 8017b30:	2300      	movs	r3, #0
 8017b32:	e010      	b.n	8017b56 <chk_lock+0xa6>
 8017b34:	2312      	movs	r3, #18
 8017b36:	e00e      	b.n	8017b56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d108      	bne.n	8017b50 <chk_lock+0xa0>
 8017b3e:	4a09      	ldr	r2, [pc, #36]	@ (8017b64 <chk_lock+0xb4>)
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	011b      	lsls	r3, r3, #4
 8017b44:	4413      	add	r3, r2
 8017b46:	330c      	adds	r3, #12
 8017b48:	881b      	ldrh	r3, [r3, #0]
 8017b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017b4e:	d101      	bne.n	8017b54 <chk_lock+0xa4>
 8017b50:	2310      	movs	r3, #16
 8017b52:	e000      	b.n	8017b56 <chk_lock+0xa6>
 8017b54:	2300      	movs	r3, #0
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3714      	adds	r7, #20
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b60:	4770      	bx	lr
 8017b62:	bf00      	nop
 8017b64:	20001ac0 	.word	0x20001ac0

08017b68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b083      	sub	sp, #12
 8017b6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017b6e:	2300      	movs	r3, #0
 8017b70:	607b      	str	r3, [r7, #4]
 8017b72:	e002      	b.n	8017b7a <enq_lock+0x12>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	3301      	adds	r3, #1
 8017b78:	607b      	str	r3, [r7, #4]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d806      	bhi.n	8017b8e <enq_lock+0x26>
 8017b80:	4a09      	ldr	r2, [pc, #36]	@ (8017ba8 <enq_lock+0x40>)
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	011b      	lsls	r3, r3, #4
 8017b86:	4413      	add	r3, r2
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d1f2      	bne.n	8017b74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2b02      	cmp	r3, #2
 8017b92:	bf14      	ite	ne
 8017b94:	2301      	movne	r3, #1
 8017b96:	2300      	moveq	r3, #0
 8017b98:	b2db      	uxtb	r3, r3
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	370c      	adds	r7, #12
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	20001ac0 	.word	0x20001ac0

08017bac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017bac:	b480      	push	{r7}
 8017bae:	b085      	sub	sp, #20
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	60fb      	str	r3, [r7, #12]
 8017bba:	e01f      	b.n	8017bfc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017bbc:	4a41      	ldr	r2, [pc, #260]	@ (8017cc4 <inc_lock+0x118>)
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	011b      	lsls	r3, r3, #4
 8017bc2:	4413      	add	r3, r2
 8017bc4:	681a      	ldr	r2, [r3, #0]
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d113      	bne.n	8017bf6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017bce:	4a3d      	ldr	r2, [pc, #244]	@ (8017cc4 <inc_lock+0x118>)
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	011b      	lsls	r3, r3, #4
 8017bd4:	4413      	add	r3, r2
 8017bd6:	3304      	adds	r3, #4
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d109      	bne.n	8017bf6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017be2:	4a38      	ldr	r2, [pc, #224]	@ (8017cc4 <inc_lock+0x118>)
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	011b      	lsls	r3, r3, #4
 8017be8:	4413      	add	r3, r2
 8017bea:	3308      	adds	r3, #8
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d006      	beq.n	8017c04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	3301      	adds	r3, #1
 8017bfa:	60fb      	str	r3, [r7, #12]
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2b01      	cmp	r3, #1
 8017c00:	d9dc      	bls.n	8017bbc <inc_lock+0x10>
 8017c02:	e000      	b.n	8017c06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017c04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	2b02      	cmp	r3, #2
 8017c0a:	d132      	bne.n	8017c72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	60fb      	str	r3, [r7, #12]
 8017c10:	e002      	b.n	8017c18 <inc_lock+0x6c>
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	3301      	adds	r3, #1
 8017c16:	60fb      	str	r3, [r7, #12]
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d806      	bhi.n	8017c2c <inc_lock+0x80>
 8017c1e:	4a29      	ldr	r2, [pc, #164]	@ (8017cc4 <inc_lock+0x118>)
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	011b      	lsls	r3, r3, #4
 8017c24:	4413      	add	r3, r2
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d1f2      	bne.n	8017c12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	2b02      	cmp	r3, #2
 8017c30:	d101      	bne.n	8017c36 <inc_lock+0x8a>
 8017c32:	2300      	movs	r3, #0
 8017c34:	e040      	b.n	8017cb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	4922      	ldr	r1, [pc, #136]	@ (8017cc4 <inc_lock+0x118>)
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	011b      	lsls	r3, r3, #4
 8017c40:	440b      	add	r3, r1
 8017c42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	689a      	ldr	r2, [r3, #8]
 8017c48:	491e      	ldr	r1, [pc, #120]	@ (8017cc4 <inc_lock+0x118>)
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	011b      	lsls	r3, r3, #4
 8017c4e:	440b      	add	r3, r1
 8017c50:	3304      	adds	r3, #4
 8017c52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	695a      	ldr	r2, [r3, #20]
 8017c58:	491a      	ldr	r1, [pc, #104]	@ (8017cc4 <inc_lock+0x118>)
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	011b      	lsls	r3, r3, #4
 8017c5e:	440b      	add	r3, r1
 8017c60:	3308      	adds	r3, #8
 8017c62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017c64:	4a17      	ldr	r2, [pc, #92]	@ (8017cc4 <inc_lock+0x118>)
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	011b      	lsls	r3, r3, #4
 8017c6a:	4413      	add	r3, r2
 8017c6c:	330c      	adds	r3, #12
 8017c6e:	2200      	movs	r2, #0
 8017c70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017c72:	683b      	ldr	r3, [r7, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d009      	beq.n	8017c8c <inc_lock+0xe0>
 8017c78:	4a12      	ldr	r2, [pc, #72]	@ (8017cc4 <inc_lock+0x118>)
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	011b      	lsls	r3, r3, #4
 8017c7e:	4413      	add	r3, r2
 8017c80:	330c      	adds	r3, #12
 8017c82:	881b      	ldrh	r3, [r3, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d001      	beq.n	8017c8c <inc_lock+0xe0>
 8017c88:	2300      	movs	r3, #0
 8017c8a:	e015      	b.n	8017cb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d108      	bne.n	8017ca4 <inc_lock+0xf8>
 8017c92:	4a0c      	ldr	r2, [pc, #48]	@ (8017cc4 <inc_lock+0x118>)
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	011b      	lsls	r3, r3, #4
 8017c98:	4413      	add	r3, r2
 8017c9a:	330c      	adds	r3, #12
 8017c9c:	881b      	ldrh	r3, [r3, #0]
 8017c9e:	3301      	adds	r3, #1
 8017ca0:	b29a      	uxth	r2, r3
 8017ca2:	e001      	b.n	8017ca8 <inc_lock+0xfc>
 8017ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017ca8:	4906      	ldr	r1, [pc, #24]	@ (8017cc4 <inc_lock+0x118>)
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	011b      	lsls	r3, r3, #4
 8017cae:	440b      	add	r3, r1
 8017cb0:	330c      	adds	r3, #12
 8017cb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	3301      	adds	r3, #1
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3714      	adds	r7, #20
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr
 8017cc4:	20001ac0 	.word	0x20001ac0

08017cc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b085      	sub	sp, #20
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	3b01      	subs	r3, #1
 8017cd4:	607b      	str	r3, [r7, #4]
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	d825      	bhi.n	8017d28 <dec_lock+0x60>
		n = Files[i].ctr;
 8017cdc:	4a17      	ldr	r2, [pc, #92]	@ (8017d3c <dec_lock+0x74>)
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	011b      	lsls	r3, r3, #4
 8017ce2:	4413      	add	r3, r2
 8017ce4:	330c      	adds	r3, #12
 8017ce6:	881b      	ldrh	r3, [r3, #0]
 8017ce8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017cea:	89fb      	ldrh	r3, [r7, #14]
 8017cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017cf0:	d101      	bne.n	8017cf6 <dec_lock+0x2e>
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017cf6:	89fb      	ldrh	r3, [r7, #14]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d002      	beq.n	8017d02 <dec_lock+0x3a>
 8017cfc:	89fb      	ldrh	r3, [r7, #14]
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017d02:	4a0e      	ldr	r2, [pc, #56]	@ (8017d3c <dec_lock+0x74>)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	011b      	lsls	r3, r3, #4
 8017d08:	4413      	add	r3, r2
 8017d0a:	330c      	adds	r3, #12
 8017d0c:	89fa      	ldrh	r2, [r7, #14]
 8017d0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017d10:	89fb      	ldrh	r3, [r7, #14]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d105      	bne.n	8017d22 <dec_lock+0x5a>
 8017d16:	4a09      	ldr	r2, [pc, #36]	@ (8017d3c <dec_lock+0x74>)
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	011b      	lsls	r3, r3, #4
 8017d1c:	4413      	add	r3, r2
 8017d1e:	2200      	movs	r2, #0
 8017d20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017d22:	2300      	movs	r3, #0
 8017d24:	737b      	strb	r3, [r7, #13]
 8017d26:	e001      	b.n	8017d2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017d28:	2302      	movs	r3, #2
 8017d2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017d2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017d2e:	4618      	mov	r0, r3
 8017d30:	3714      	adds	r7, #20
 8017d32:	46bd      	mov	sp, r7
 8017d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d38:	4770      	bx	lr
 8017d3a:	bf00      	nop
 8017d3c:	20001ac0 	.word	0x20001ac0

08017d40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017d40:	b480      	push	{r7}
 8017d42:	b085      	sub	sp, #20
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017d48:	2300      	movs	r3, #0
 8017d4a:	60fb      	str	r3, [r7, #12]
 8017d4c:	e010      	b.n	8017d70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8017d84 <clear_lock+0x44>)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	011b      	lsls	r3, r3, #4
 8017d54:	4413      	add	r3, r2
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	687a      	ldr	r2, [r7, #4]
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d105      	bne.n	8017d6a <clear_lock+0x2a>
 8017d5e:	4a09      	ldr	r2, [pc, #36]	@ (8017d84 <clear_lock+0x44>)
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	011b      	lsls	r3, r3, #4
 8017d64:	4413      	add	r3, r2
 8017d66:	2200      	movs	r2, #0
 8017d68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	60fb      	str	r3, [r7, #12]
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	2b01      	cmp	r3, #1
 8017d74:	d9eb      	bls.n	8017d4e <clear_lock+0xe>
	}
}
 8017d76:	bf00      	nop
 8017d78:	bf00      	nop
 8017d7a:	3714      	adds	r7, #20
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d82:	4770      	bx	lr
 8017d84:	20001ac0 	.word	0x20001ac0

08017d88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b086      	sub	sp, #24
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017d90:	2300      	movs	r3, #0
 8017d92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	78db      	ldrb	r3, [r3, #3]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d034      	beq.n	8017e06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017da0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	7858      	ldrb	r0, [r3, #1]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017dac:	2301      	movs	r3, #1
 8017dae:	697a      	ldr	r2, [r7, #20]
 8017db0:	f7ff fd40 	bl	8017834 <disk_write>
 8017db4:	4603      	mov	r3, r0
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d002      	beq.n	8017dc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017dba:	2301      	movs	r3, #1
 8017dbc:	73fb      	strb	r3, [r7, #15]
 8017dbe:	e022      	b.n	8017e06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dca:	697a      	ldr	r2, [r7, #20]
 8017dcc:	1ad2      	subs	r2, r2, r3
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	69db      	ldr	r3, [r3, #28]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d217      	bcs.n	8017e06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	789b      	ldrb	r3, [r3, #2]
 8017dda:	613b      	str	r3, [r7, #16]
 8017ddc:	e010      	b.n	8017e00 <sync_window+0x78>
					wsect += fs->fsize;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	69db      	ldr	r3, [r3, #28]
 8017de2:	697a      	ldr	r2, [r7, #20]
 8017de4:	4413      	add	r3, r2
 8017de6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	7858      	ldrb	r0, [r3, #1]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017df2:	2301      	movs	r3, #1
 8017df4:	697a      	ldr	r2, [r7, #20]
 8017df6:	f7ff fd1d 	bl	8017834 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	3b01      	subs	r3, #1
 8017dfe:	613b      	str	r3, [r7, #16]
 8017e00:	693b      	ldr	r3, [r7, #16]
 8017e02:	2b01      	cmp	r3, #1
 8017e04:	d8eb      	bhi.n	8017dde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e08:	4618      	mov	r0, r3
 8017e0a:	3718      	adds	r7, #24
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
 8017e18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e22:	683a      	ldr	r2, [r7, #0]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d01b      	beq.n	8017e60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7ff ffad 	bl	8017d88 <sync_window>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017e32:	7bfb      	ldrb	r3, [r7, #15]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d113      	bne.n	8017e60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	7858      	ldrb	r0, [r3, #1]
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017e42:	2301      	movs	r3, #1
 8017e44:	683a      	ldr	r2, [r7, #0]
 8017e46:	f7ff fcd5 	bl	80177f4 <disk_read>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d004      	beq.n	8017e5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017e50:	f04f 33ff 	mov.w	r3, #4294967295
 8017e54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017e56:	2301      	movs	r3, #1
 8017e58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	683a      	ldr	r2, [r7, #0]
 8017e5e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8017e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	3710      	adds	r7, #16
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}
	...

08017e6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b084      	sub	sp, #16
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f7ff ff87 	bl	8017d88 <sync_window>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017e7e:	7bfb      	ldrb	r3, [r7, #15]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d158      	bne.n	8017f36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	2b03      	cmp	r3, #3
 8017e8a:	d148      	bne.n	8017f1e <sync_fs+0xb2>
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	791b      	ldrb	r3, [r3, #4]
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d144      	bne.n	8017f1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	3334      	adds	r3, #52	@ 0x34
 8017e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7ff fda9 	bl	80179f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	3334      	adds	r3, #52	@ 0x34
 8017ea8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017eac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7ff fd38 	bl	8017926 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	3334      	adds	r3, #52	@ 0x34
 8017eba:	4921      	ldr	r1, [pc, #132]	@ (8017f40 <sync_fs+0xd4>)
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f7ff fd4d 	bl	801795c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	3334      	adds	r3, #52	@ 0x34
 8017ec6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8017eca:	491e      	ldr	r1, [pc, #120]	@ (8017f44 <sync_fs+0xd8>)
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f7ff fd45 	bl	801795c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	3334      	adds	r3, #52	@ 0x34
 8017ed6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	695b      	ldr	r3, [r3, #20]
 8017ede:	4619      	mov	r1, r3
 8017ee0:	4610      	mov	r0, r2
 8017ee2:	f7ff fd3b 	bl	801795c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	3334      	adds	r3, #52	@ 0x34
 8017eea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	691b      	ldr	r3, [r3, #16]
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	f7ff fd31 	bl	801795c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	6a1b      	ldr	r3, [r3, #32]
 8017efe:	1c5a      	adds	r2, r3, #1
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	7858      	ldrb	r0, [r3, #1]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017f12:	2301      	movs	r3, #1
 8017f14:	f7ff fc8e 	bl	8017834 <disk_write>
			fs->fsi_flag = 0;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	785b      	ldrb	r3, [r3, #1]
 8017f22:	2200      	movs	r2, #0
 8017f24:	2100      	movs	r1, #0
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7ff fca4 	bl	8017874 <disk_ioctl>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d001      	beq.n	8017f36 <sync_fs+0xca>
 8017f32:	2301      	movs	r3, #1
 8017f34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	41615252 	.word	0x41615252
 8017f44:	61417272 	.word	0x61417272

08017f48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b083      	sub	sp, #12
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	3b02      	subs	r3, #2
 8017f56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	699b      	ldr	r3, [r3, #24]
 8017f5c:	3b02      	subs	r3, #2
 8017f5e:	683a      	ldr	r2, [r7, #0]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d301      	bcc.n	8017f68 <clust2sect+0x20>
 8017f64:	2300      	movs	r3, #0
 8017f66:	e008      	b.n	8017f7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	895b      	ldrh	r3, [r3, #10]
 8017f6c:	461a      	mov	r2, r3
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	fb03 f202 	mul.w	r2, r3, r2
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f78:	4413      	add	r3, r2
}
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	370c      	adds	r7, #12
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f84:	4770      	bx	lr

08017f86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017f86:	b580      	push	{r7, lr}
 8017f88:	b086      	sub	sp, #24
 8017f8a:	af00      	add	r7, sp, #0
 8017f8c:	6078      	str	r0, [r7, #4]
 8017f8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	d904      	bls.n	8017fa6 <get_fat+0x20>
 8017f9c:	693b      	ldr	r3, [r7, #16]
 8017f9e:	699b      	ldr	r3, [r3, #24]
 8017fa0:	683a      	ldr	r2, [r7, #0]
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d302      	bcc.n	8017fac <get_fat+0x26>
		val = 1;	/* Internal error */
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	617b      	str	r3, [r7, #20]
 8017faa:	e08e      	b.n	80180ca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017fac:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d061      	beq.n	801807e <get_fat+0xf8>
 8017fba:	2b03      	cmp	r3, #3
 8017fbc:	dc7b      	bgt.n	80180b6 <get_fat+0x130>
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	d002      	beq.n	8017fc8 <get_fat+0x42>
 8017fc2:	2b02      	cmp	r3, #2
 8017fc4:	d041      	beq.n	801804a <get_fat+0xc4>
 8017fc6:	e076      	b.n	80180b6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	60fb      	str	r3, [r7, #12]
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	085b      	lsrs	r3, r3, #1
 8017fd0:	68fa      	ldr	r2, [r7, #12]
 8017fd2:	4413      	add	r3, r2
 8017fd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	0a5b      	lsrs	r3, r3, #9
 8017fde:	4413      	add	r3, r2
 8017fe0:	4619      	mov	r1, r3
 8017fe2:	6938      	ldr	r0, [r7, #16]
 8017fe4:	f7ff ff14 	bl	8017e10 <move_window>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d166      	bne.n	80180bc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	1c5a      	adds	r2, r3, #1
 8017ff2:	60fa      	str	r2, [r7, #12]
 8017ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ff8:	693a      	ldr	r2, [r7, #16]
 8017ffa:	4413      	add	r3, r2
 8017ffc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018000:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	0a5b      	lsrs	r3, r3, #9
 801800a:	4413      	add	r3, r2
 801800c:	4619      	mov	r1, r3
 801800e:	6938      	ldr	r0, [r7, #16]
 8018010:	f7ff fefe 	bl	8017e10 <move_window>
 8018014:	4603      	mov	r3, r0
 8018016:	2b00      	cmp	r3, #0
 8018018:	d152      	bne.n	80180c0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018020:	693a      	ldr	r2, [r7, #16]
 8018022:	4413      	add	r3, r2
 8018024:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018028:	021b      	lsls	r3, r3, #8
 801802a:	68ba      	ldr	r2, [r7, #8]
 801802c:	4313      	orrs	r3, r2
 801802e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	f003 0301 	and.w	r3, r3, #1
 8018036:	2b00      	cmp	r3, #0
 8018038:	d002      	beq.n	8018040 <get_fat+0xba>
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	091b      	lsrs	r3, r3, #4
 801803e:	e002      	b.n	8018046 <get_fat+0xc0>
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018046:	617b      	str	r3, [r7, #20]
			break;
 8018048:	e03f      	b.n	80180ca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801804a:	693b      	ldr	r3, [r7, #16]
 801804c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	0a1b      	lsrs	r3, r3, #8
 8018052:	4413      	add	r3, r2
 8018054:	4619      	mov	r1, r3
 8018056:	6938      	ldr	r0, [r7, #16]
 8018058:	f7ff feda 	bl	8017e10 <move_window>
 801805c:	4603      	mov	r3, r0
 801805e:	2b00      	cmp	r3, #0
 8018060:	d130      	bne.n	80180c4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	005b      	lsls	r3, r3, #1
 801806c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018070:	4413      	add	r3, r2
 8018072:	4618      	mov	r0, r3
 8018074:	f7ff fc1c 	bl	80178b0 <ld_word>
 8018078:	4603      	mov	r3, r0
 801807a:	617b      	str	r3, [r7, #20]
			break;
 801807c:	e025      	b.n	80180ca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018082:	683b      	ldr	r3, [r7, #0]
 8018084:	09db      	lsrs	r3, r3, #7
 8018086:	4413      	add	r3, r2
 8018088:	4619      	mov	r1, r3
 801808a:	6938      	ldr	r0, [r7, #16]
 801808c:	f7ff fec0 	bl	8017e10 <move_window>
 8018090:	4603      	mov	r3, r0
 8018092:	2b00      	cmp	r3, #0
 8018094:	d118      	bne.n	80180c8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018096:	693b      	ldr	r3, [r7, #16]
 8018098:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801809c:	683b      	ldr	r3, [r7, #0]
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80180a4:	4413      	add	r3, r2
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7ff fc1a 	bl	80178e0 <ld_dword>
 80180ac:	4603      	mov	r3, r0
 80180ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80180b2:	617b      	str	r3, [r7, #20]
			break;
 80180b4:	e009      	b.n	80180ca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80180b6:	2301      	movs	r3, #1
 80180b8:	617b      	str	r3, [r7, #20]
 80180ba:	e006      	b.n	80180ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80180bc:	bf00      	nop
 80180be:	e004      	b.n	80180ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80180c0:	bf00      	nop
 80180c2:	e002      	b.n	80180ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80180c4:	bf00      	nop
 80180c6:	e000      	b.n	80180ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80180c8:	bf00      	nop
		}
	}

	return val;
 80180ca:	697b      	ldr	r3, [r7, #20]
}
 80180cc:	4618      	mov	r0, r3
 80180ce:	3718      	adds	r7, #24
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}

080180d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80180d4:	b590      	push	{r4, r7, lr}
 80180d6:	b089      	sub	sp, #36	@ 0x24
 80180d8:	af00      	add	r7, sp, #0
 80180da:	60f8      	str	r0, [r7, #12]
 80180dc:	60b9      	str	r1, [r7, #8]
 80180de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80180e0:	2302      	movs	r3, #2
 80180e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	f240 80d9 	bls.w	801829e <put_fat+0x1ca>
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	699b      	ldr	r3, [r3, #24]
 80180f0:	68ba      	ldr	r2, [r7, #8]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	f080 80d3 	bcs.w	801829e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	2b03      	cmp	r3, #3
 80180fe:	f000 8096 	beq.w	801822e <put_fat+0x15a>
 8018102:	2b03      	cmp	r3, #3
 8018104:	f300 80cb 	bgt.w	801829e <put_fat+0x1ca>
 8018108:	2b01      	cmp	r3, #1
 801810a:	d002      	beq.n	8018112 <put_fat+0x3e>
 801810c:	2b02      	cmp	r3, #2
 801810e:	d06e      	beq.n	80181ee <put_fat+0x11a>
 8018110:	e0c5      	b.n	801829e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	61bb      	str	r3, [r7, #24]
 8018116:	69bb      	ldr	r3, [r7, #24]
 8018118:	085b      	lsrs	r3, r3, #1
 801811a:	69ba      	ldr	r2, [r7, #24]
 801811c:	4413      	add	r3, r2
 801811e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018124:	69bb      	ldr	r3, [r7, #24]
 8018126:	0a5b      	lsrs	r3, r3, #9
 8018128:	4413      	add	r3, r2
 801812a:	4619      	mov	r1, r3
 801812c:	68f8      	ldr	r0, [r7, #12]
 801812e:	f7ff fe6f 	bl	8017e10 <move_window>
 8018132:	4603      	mov	r3, r0
 8018134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018136:	7ffb      	ldrb	r3, [r7, #31]
 8018138:	2b00      	cmp	r3, #0
 801813a:	f040 80a9 	bne.w	8018290 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018144:	69bb      	ldr	r3, [r7, #24]
 8018146:	1c59      	adds	r1, r3, #1
 8018148:	61b9      	str	r1, [r7, #24]
 801814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801814e:	4413      	add	r3, r2
 8018150:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018152:	68bb      	ldr	r3, [r7, #8]
 8018154:	f003 0301 	and.w	r3, r3, #1
 8018158:	2b00      	cmp	r3, #0
 801815a:	d00d      	beq.n	8018178 <put_fat+0xa4>
 801815c:	697b      	ldr	r3, [r7, #20]
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	b25b      	sxtb	r3, r3
 8018162:	f003 030f 	and.w	r3, r3, #15
 8018166:	b25a      	sxtb	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	b2db      	uxtb	r3, r3
 801816c:	011b      	lsls	r3, r3, #4
 801816e:	b25b      	sxtb	r3, r3
 8018170:	4313      	orrs	r3, r2
 8018172:	b25b      	sxtb	r3, r3
 8018174:	b2db      	uxtb	r3, r3
 8018176:	e001      	b.n	801817c <put_fat+0xa8>
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	b2db      	uxtb	r3, r3
 801817c:	697a      	ldr	r2, [r7, #20]
 801817e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	2201      	movs	r2, #1
 8018184:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	0a5b      	lsrs	r3, r3, #9
 801818e:	4413      	add	r3, r2
 8018190:	4619      	mov	r1, r3
 8018192:	68f8      	ldr	r0, [r7, #12]
 8018194:	f7ff fe3c 	bl	8017e10 <move_window>
 8018198:	4603      	mov	r3, r0
 801819a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801819c:	7ffb      	ldrb	r3, [r7, #31]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d178      	bne.n	8018294 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80181a8:	69bb      	ldr	r3, [r7, #24]
 80181aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181ae:	4413      	add	r3, r2
 80181b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	f003 0301 	and.w	r3, r3, #1
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d003      	beq.n	80181c4 <put_fat+0xf0>
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	091b      	lsrs	r3, r3, #4
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	e00e      	b.n	80181e2 <put_fat+0x10e>
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	b25b      	sxtb	r3, r3
 80181ca:	f023 030f 	bic.w	r3, r3, #15
 80181ce:	b25a      	sxtb	r2, r3
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	0a1b      	lsrs	r3, r3, #8
 80181d4:	b25b      	sxtb	r3, r3
 80181d6:	f003 030f 	and.w	r3, r3, #15
 80181da:	b25b      	sxtb	r3, r3
 80181dc:	4313      	orrs	r3, r2
 80181de:	b25b      	sxtb	r3, r3
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	697a      	ldr	r2, [r7, #20]
 80181e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	2201      	movs	r2, #1
 80181ea:	70da      	strb	r2, [r3, #3]
			break;
 80181ec:	e057      	b.n	801829e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80181f2:	68bb      	ldr	r3, [r7, #8]
 80181f4:	0a1b      	lsrs	r3, r3, #8
 80181f6:	4413      	add	r3, r2
 80181f8:	4619      	mov	r1, r3
 80181fa:	68f8      	ldr	r0, [r7, #12]
 80181fc:	f7ff fe08 	bl	8017e10 <move_window>
 8018200:	4603      	mov	r3, r0
 8018202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018204:	7ffb      	ldrb	r3, [r7, #31]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d146      	bne.n	8018298 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	005b      	lsls	r3, r3, #1
 8018214:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018218:	4413      	add	r3, r2
 801821a:	687a      	ldr	r2, [r7, #4]
 801821c:	b292      	uxth	r2, r2
 801821e:	4611      	mov	r1, r2
 8018220:	4618      	mov	r0, r3
 8018222:	f7ff fb80 	bl	8017926 <st_word>
			fs->wflag = 1;
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	2201      	movs	r2, #1
 801822a:	70da      	strb	r2, [r3, #3]
			break;
 801822c:	e037      	b.n	801829e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	09db      	lsrs	r3, r3, #7
 8018236:	4413      	add	r3, r2
 8018238:	4619      	mov	r1, r3
 801823a:	68f8      	ldr	r0, [r7, #12]
 801823c:	f7ff fde8 	bl	8017e10 <move_window>
 8018240:	4603      	mov	r3, r0
 8018242:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018244:	7ffb      	ldrb	r3, [r7, #31]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d128      	bne.n	801829c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	009b      	lsls	r3, r3, #2
 801825a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801825e:	4413      	add	r3, r2
 8018260:	4618      	mov	r0, r3
 8018262:	f7ff fb3d 	bl	80178e0 <ld_dword>
 8018266:	4603      	mov	r3, r0
 8018268:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801826c:	4323      	orrs	r3, r4
 801826e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	009b      	lsls	r3, r3, #2
 801827a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801827e:	4413      	add	r3, r2
 8018280:	6879      	ldr	r1, [r7, #4]
 8018282:	4618      	mov	r0, r3
 8018284:	f7ff fb6a 	bl	801795c <st_dword>
			fs->wflag = 1;
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	2201      	movs	r2, #1
 801828c:	70da      	strb	r2, [r3, #3]
			break;
 801828e:	e006      	b.n	801829e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018290:	bf00      	nop
 8018292:	e004      	b.n	801829e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018294:	bf00      	nop
 8018296:	e002      	b.n	801829e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018298:	bf00      	nop
 801829a:	e000      	b.n	801829e <put_fat+0x1ca>
			if (res != FR_OK) break;
 801829c:	bf00      	nop
		}
	}
	return res;
 801829e:	7ffb      	ldrb	r3, [r7, #31]
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	3724      	adds	r7, #36	@ 0x24
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd90      	pop	{r4, r7, pc}

080182a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b088      	sub	sp, #32
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80182b4:	2300      	movs	r3, #0
 80182b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	2b01      	cmp	r3, #1
 80182c2:	d904      	bls.n	80182ce <remove_chain+0x26>
 80182c4:	69bb      	ldr	r3, [r7, #24]
 80182c6:	699b      	ldr	r3, [r3, #24]
 80182c8:	68ba      	ldr	r2, [r7, #8]
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d301      	bcc.n	80182d2 <remove_chain+0x2a>
 80182ce:	2302      	movs	r3, #2
 80182d0:	e04b      	b.n	801836a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d00c      	beq.n	80182f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80182d8:	f04f 32ff 	mov.w	r2, #4294967295
 80182dc:	6879      	ldr	r1, [r7, #4]
 80182de:	69b8      	ldr	r0, [r7, #24]
 80182e0:	f7ff fef8 	bl	80180d4 <put_fat>
 80182e4:	4603      	mov	r3, r0
 80182e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80182e8:	7ffb      	ldrb	r3, [r7, #31]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d001      	beq.n	80182f2 <remove_chain+0x4a>
 80182ee:	7ffb      	ldrb	r3, [r7, #31]
 80182f0:	e03b      	b.n	801836a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80182f2:	68b9      	ldr	r1, [r7, #8]
 80182f4:	68f8      	ldr	r0, [r7, #12]
 80182f6:	f7ff fe46 	bl	8017f86 <get_fat>
 80182fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80182fc:	697b      	ldr	r3, [r7, #20]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d031      	beq.n	8018366 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018302:	697b      	ldr	r3, [r7, #20]
 8018304:	2b01      	cmp	r3, #1
 8018306:	d101      	bne.n	801830c <remove_chain+0x64>
 8018308:	2302      	movs	r3, #2
 801830a:	e02e      	b.n	801836a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801830c:	697b      	ldr	r3, [r7, #20]
 801830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018312:	d101      	bne.n	8018318 <remove_chain+0x70>
 8018314:	2301      	movs	r3, #1
 8018316:	e028      	b.n	801836a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018318:	2200      	movs	r2, #0
 801831a:	68b9      	ldr	r1, [r7, #8]
 801831c:	69b8      	ldr	r0, [r7, #24]
 801831e:	f7ff fed9 	bl	80180d4 <put_fat>
 8018322:	4603      	mov	r3, r0
 8018324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018326:	7ffb      	ldrb	r3, [r7, #31]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d001      	beq.n	8018330 <remove_chain+0x88>
 801832c:	7ffb      	ldrb	r3, [r7, #31]
 801832e:	e01c      	b.n	801836a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018330:	69bb      	ldr	r3, [r7, #24]
 8018332:	695a      	ldr	r2, [r3, #20]
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	699b      	ldr	r3, [r3, #24]
 8018338:	3b02      	subs	r3, #2
 801833a:	429a      	cmp	r2, r3
 801833c:	d20b      	bcs.n	8018356 <remove_chain+0xae>
			fs->free_clst++;
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	695b      	ldr	r3, [r3, #20]
 8018342:	1c5a      	adds	r2, r3, #1
 8018344:	69bb      	ldr	r3, [r7, #24]
 8018346:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8018348:	69bb      	ldr	r3, [r7, #24]
 801834a:	791b      	ldrb	r3, [r3, #4]
 801834c:	f043 0301 	orr.w	r3, r3, #1
 8018350:	b2da      	uxtb	r2, r3
 8018352:	69bb      	ldr	r3, [r7, #24]
 8018354:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018356:	697b      	ldr	r3, [r7, #20]
 8018358:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801835a:	69bb      	ldr	r3, [r7, #24]
 801835c:	699b      	ldr	r3, [r3, #24]
 801835e:	68ba      	ldr	r2, [r7, #8]
 8018360:	429a      	cmp	r2, r3
 8018362:	d3c6      	bcc.n	80182f2 <remove_chain+0x4a>
 8018364:	e000      	b.n	8018368 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018366:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018368:	2300      	movs	r3, #0
}
 801836a:	4618      	mov	r0, r3
 801836c:	3720      	adds	r7, #32
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}

08018372 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018372:	b580      	push	{r7, lr}
 8018374:	b088      	sub	sp, #32
 8018376:	af00      	add	r7, sp, #0
 8018378:	6078      	str	r0, [r7, #4]
 801837a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d10d      	bne.n	80183a4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018388:	693b      	ldr	r3, [r7, #16]
 801838a:	691b      	ldr	r3, [r3, #16]
 801838c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d004      	beq.n	801839e <create_chain+0x2c>
 8018394:	693b      	ldr	r3, [r7, #16]
 8018396:	699b      	ldr	r3, [r3, #24]
 8018398:	69ba      	ldr	r2, [r7, #24]
 801839a:	429a      	cmp	r2, r3
 801839c:	d31b      	bcc.n	80183d6 <create_chain+0x64>
 801839e:	2301      	movs	r3, #1
 80183a0:	61bb      	str	r3, [r7, #24]
 80183a2:	e018      	b.n	80183d6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80183a4:	6839      	ldr	r1, [r7, #0]
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7ff fded 	bl	8017f86 <get_fat>
 80183ac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	2b01      	cmp	r3, #1
 80183b2:	d801      	bhi.n	80183b8 <create_chain+0x46>
 80183b4:	2301      	movs	r3, #1
 80183b6:	e070      	b.n	801849a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183be:	d101      	bne.n	80183c4 <create_chain+0x52>
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	e06a      	b.n	801849a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80183c4:	693b      	ldr	r3, [r7, #16]
 80183c6:	699b      	ldr	r3, [r3, #24]
 80183c8:	68fa      	ldr	r2, [r7, #12]
 80183ca:	429a      	cmp	r2, r3
 80183cc:	d201      	bcs.n	80183d2 <create_chain+0x60>
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	e063      	b.n	801849a <create_chain+0x128>
		scl = clst;
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80183d6:	69bb      	ldr	r3, [r7, #24]
 80183d8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80183da:	69fb      	ldr	r3, [r7, #28]
 80183dc:	3301      	adds	r3, #1
 80183de:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80183e0:	693b      	ldr	r3, [r7, #16]
 80183e2:	699b      	ldr	r3, [r3, #24]
 80183e4:	69fa      	ldr	r2, [r7, #28]
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d307      	bcc.n	80183fa <create_chain+0x88>
				ncl = 2;
 80183ea:	2302      	movs	r3, #2
 80183ec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80183ee:	69fa      	ldr	r2, [r7, #28]
 80183f0:	69bb      	ldr	r3, [r7, #24]
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d901      	bls.n	80183fa <create_chain+0x88>
 80183f6:	2300      	movs	r3, #0
 80183f8:	e04f      	b.n	801849a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80183fa:	69f9      	ldr	r1, [r7, #28]
 80183fc:	6878      	ldr	r0, [r7, #4]
 80183fe:	f7ff fdc2 	bl	8017f86 <get_fat>
 8018402:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d00e      	beq.n	8018428 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	2b01      	cmp	r3, #1
 801840e:	d003      	beq.n	8018418 <create_chain+0xa6>
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018416:	d101      	bne.n	801841c <create_chain+0xaa>
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	e03e      	b.n	801849a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801841c:	69fa      	ldr	r2, [r7, #28]
 801841e:	69bb      	ldr	r3, [r7, #24]
 8018420:	429a      	cmp	r2, r3
 8018422:	d1da      	bne.n	80183da <create_chain+0x68>
 8018424:	2300      	movs	r3, #0
 8018426:	e038      	b.n	801849a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018428:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801842a:	f04f 32ff 	mov.w	r2, #4294967295
 801842e:	69f9      	ldr	r1, [r7, #28]
 8018430:	6938      	ldr	r0, [r7, #16]
 8018432:	f7ff fe4f 	bl	80180d4 <put_fat>
 8018436:	4603      	mov	r3, r0
 8018438:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801843a:	7dfb      	ldrb	r3, [r7, #23]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d109      	bne.n	8018454 <create_chain+0xe2>
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d006      	beq.n	8018454 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018446:	69fa      	ldr	r2, [r7, #28]
 8018448:	6839      	ldr	r1, [r7, #0]
 801844a:	6938      	ldr	r0, [r7, #16]
 801844c:	f7ff fe42 	bl	80180d4 <put_fat>
 8018450:	4603      	mov	r3, r0
 8018452:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018454:	7dfb      	ldrb	r3, [r7, #23]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d116      	bne.n	8018488 <create_chain+0x116>
		fs->last_clst = ncl;
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	69fa      	ldr	r2, [r7, #28]
 801845e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018460:	693b      	ldr	r3, [r7, #16]
 8018462:	695a      	ldr	r2, [r3, #20]
 8018464:	693b      	ldr	r3, [r7, #16]
 8018466:	699b      	ldr	r3, [r3, #24]
 8018468:	3b02      	subs	r3, #2
 801846a:	429a      	cmp	r2, r3
 801846c:	d804      	bhi.n	8018478 <create_chain+0x106>
 801846e:	693b      	ldr	r3, [r7, #16]
 8018470:	695b      	ldr	r3, [r3, #20]
 8018472:	1e5a      	subs	r2, r3, #1
 8018474:	693b      	ldr	r3, [r7, #16]
 8018476:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	791b      	ldrb	r3, [r3, #4]
 801847c:	f043 0301 	orr.w	r3, r3, #1
 8018480:	b2da      	uxtb	r2, r3
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	711a      	strb	r2, [r3, #4]
 8018486:	e007      	b.n	8018498 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018488:	7dfb      	ldrb	r3, [r7, #23]
 801848a:	2b01      	cmp	r3, #1
 801848c:	d102      	bne.n	8018494 <create_chain+0x122>
 801848e:	f04f 33ff 	mov.w	r3, #4294967295
 8018492:	e000      	b.n	8018496 <create_chain+0x124>
 8018494:	2301      	movs	r3, #1
 8018496:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018498:	69fb      	ldr	r3, [r7, #28]
}
 801849a:	4618      	mov	r0, r3
 801849c:	3720      	adds	r7, #32
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}

080184a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80184a2:	b480      	push	{r7}
 80184a4:	b087      	sub	sp, #28
 80184a6:	af00      	add	r7, sp, #0
 80184a8:	6078      	str	r0, [r7, #4]
 80184aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184b6:	3304      	adds	r3, #4
 80184b8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80184ba:	683b      	ldr	r3, [r7, #0]
 80184bc:	0a5b      	lsrs	r3, r3, #9
 80184be:	68fa      	ldr	r2, [r7, #12]
 80184c0:	8952      	ldrh	r2, [r2, #10]
 80184c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80184c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80184c8:	693b      	ldr	r3, [r7, #16]
 80184ca:	1d1a      	adds	r2, r3, #4
 80184cc:	613a      	str	r2, [r7, #16]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d101      	bne.n	80184dc <clmt_clust+0x3a>
 80184d8:	2300      	movs	r3, #0
 80184da:	e010      	b.n	80184fe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80184dc:	697a      	ldr	r2, [r7, #20]
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d307      	bcc.n	80184f4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80184e4:	697a      	ldr	r2, [r7, #20]
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	1ad3      	subs	r3, r2, r3
 80184ea:	617b      	str	r3, [r7, #20]
 80184ec:	693b      	ldr	r3, [r7, #16]
 80184ee:	3304      	adds	r3, #4
 80184f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80184f2:	e7e9      	b.n	80184c8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80184f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	681a      	ldr	r2, [r3, #0]
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	4413      	add	r3, r2
}
 80184fe:	4618      	mov	r0, r3
 8018500:	371c      	adds	r7, #28
 8018502:	46bd      	mov	sp, r7
 8018504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018508:	4770      	bx	lr

0801850a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801850a:	b580      	push	{r7, lr}
 801850c:	b086      	sub	sp, #24
 801850e:	af00      	add	r7, sp, #0
 8018510:	6078      	str	r0, [r7, #4]
 8018512:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018520:	d204      	bcs.n	801852c <dir_sdi+0x22>
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	f003 031f 	and.w	r3, r3, #31
 8018528:	2b00      	cmp	r3, #0
 801852a:	d001      	beq.n	8018530 <dir_sdi+0x26>
		return FR_INT_ERR;
 801852c:	2302      	movs	r3, #2
 801852e:	e063      	b.n	80185f8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	683a      	ldr	r2, [r7, #0]
 8018534:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	689b      	ldr	r3, [r3, #8]
 801853a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801853c:	697b      	ldr	r3, [r7, #20]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d106      	bne.n	8018550 <dir_sdi+0x46>
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	2b02      	cmp	r3, #2
 8018548:	d902      	bls.n	8018550 <dir_sdi+0x46>
		clst = fs->dirbase;
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801854e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018550:	697b      	ldr	r3, [r7, #20]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d10c      	bne.n	8018570 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	095b      	lsrs	r3, r3, #5
 801855a:	693a      	ldr	r2, [r7, #16]
 801855c:	8912      	ldrh	r2, [r2, #8]
 801855e:	4293      	cmp	r3, r2
 8018560:	d301      	bcc.n	8018566 <dir_sdi+0x5c>
 8018562:	2302      	movs	r3, #2
 8018564:	e048      	b.n	80185f8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8018566:	693b      	ldr	r3, [r7, #16]
 8018568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	61da      	str	r2, [r3, #28]
 801856e:	e029      	b.n	80185c4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	895b      	ldrh	r3, [r3, #10]
 8018574:	025b      	lsls	r3, r3, #9
 8018576:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018578:	e019      	b.n	80185ae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	6979      	ldr	r1, [r7, #20]
 801857e:	4618      	mov	r0, r3
 8018580:	f7ff fd01 	bl	8017f86 <get_fat>
 8018584:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801858c:	d101      	bne.n	8018592 <dir_sdi+0x88>
 801858e:	2301      	movs	r3, #1
 8018590:	e032      	b.n	80185f8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018592:	697b      	ldr	r3, [r7, #20]
 8018594:	2b01      	cmp	r3, #1
 8018596:	d904      	bls.n	80185a2 <dir_sdi+0x98>
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	699b      	ldr	r3, [r3, #24]
 801859c:	697a      	ldr	r2, [r7, #20]
 801859e:	429a      	cmp	r2, r3
 80185a0:	d301      	bcc.n	80185a6 <dir_sdi+0x9c>
 80185a2:	2302      	movs	r3, #2
 80185a4:	e028      	b.n	80185f8 <dir_sdi+0xee>
			ofs -= csz;
 80185a6:	683a      	ldr	r2, [r7, #0]
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	1ad3      	subs	r3, r2, r3
 80185ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80185ae:	683a      	ldr	r2, [r7, #0]
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d2e1      	bcs.n	801857a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80185b6:	6979      	ldr	r1, [r7, #20]
 80185b8:	6938      	ldr	r0, [r7, #16]
 80185ba:	f7ff fcc5 	bl	8017f48 <clust2sect>
 80185be:	4602      	mov	r2, r0
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	697a      	ldr	r2, [r7, #20]
 80185c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	69db      	ldr	r3, [r3, #28]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d101      	bne.n	80185d6 <dir_sdi+0xcc>
 80185d2:	2302      	movs	r3, #2
 80185d4:	e010      	b.n	80185f8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	69da      	ldr	r2, [r3, #28]
 80185da:	683b      	ldr	r3, [r7, #0]
 80185dc:	0a5b      	lsrs	r3, r3, #9
 80185de:	441a      	add	r2, r3
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80185e4:	693b      	ldr	r3, [r7, #16]
 80185e6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185f0:	441a      	add	r2, r3
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80185f6:	2300      	movs	r3, #0
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3718      	adds	r7, #24
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}

08018600 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018600:	b580      	push	{r7, lr}
 8018602:	b086      	sub	sp, #24
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	695b      	ldr	r3, [r3, #20]
 8018614:	3320      	adds	r3, #32
 8018616:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	69db      	ldr	r3, [r3, #28]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d003      	beq.n	8018628 <dir_next+0x28>
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018626:	d301      	bcc.n	801862c <dir_next+0x2c>
 8018628:	2304      	movs	r3, #4
 801862a:	e0aa      	b.n	8018782 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018632:	2b00      	cmp	r3, #0
 8018634:	f040 8098 	bne.w	8018768 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	69db      	ldr	r3, [r3, #28]
 801863c:	1c5a      	adds	r2, r3, #1
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	699b      	ldr	r3, [r3, #24]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d10b      	bne.n	8018662 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	095b      	lsrs	r3, r3, #5
 801864e:	68fa      	ldr	r2, [r7, #12]
 8018650:	8912      	ldrh	r2, [r2, #8]
 8018652:	4293      	cmp	r3, r2
 8018654:	f0c0 8088 	bcc.w	8018768 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	2200      	movs	r2, #0
 801865c:	61da      	str	r2, [r3, #28]
 801865e:	2304      	movs	r3, #4
 8018660:	e08f      	b.n	8018782 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	0a5b      	lsrs	r3, r3, #9
 8018666:	68fa      	ldr	r2, [r7, #12]
 8018668:	8952      	ldrh	r2, [r2, #10]
 801866a:	3a01      	subs	r2, #1
 801866c:	4013      	ands	r3, r2
 801866e:	2b00      	cmp	r3, #0
 8018670:	d17a      	bne.n	8018768 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018672:	687a      	ldr	r2, [r7, #4]
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	699b      	ldr	r3, [r3, #24]
 8018678:	4619      	mov	r1, r3
 801867a:	4610      	mov	r0, r2
 801867c:	f7ff fc83 	bl	8017f86 <get_fat>
 8018680:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	2b01      	cmp	r3, #1
 8018686:	d801      	bhi.n	801868c <dir_next+0x8c>
 8018688:	2302      	movs	r3, #2
 801868a:	e07a      	b.n	8018782 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018692:	d101      	bne.n	8018698 <dir_next+0x98>
 8018694:	2301      	movs	r3, #1
 8018696:	e074      	b.n	8018782 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	699b      	ldr	r3, [r3, #24]
 801869c:	697a      	ldr	r2, [r7, #20]
 801869e:	429a      	cmp	r2, r3
 80186a0:	d358      	bcc.n	8018754 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d104      	bne.n	80186b2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	2200      	movs	r2, #0
 80186ac:	61da      	str	r2, [r3, #28]
 80186ae:	2304      	movs	r3, #4
 80186b0:	e067      	b.n	8018782 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	699b      	ldr	r3, [r3, #24]
 80186b8:	4619      	mov	r1, r3
 80186ba:	4610      	mov	r0, r2
 80186bc:	f7ff fe59 	bl	8018372 <create_chain>
 80186c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d101      	bne.n	80186cc <dir_next+0xcc>
 80186c8:	2307      	movs	r3, #7
 80186ca:	e05a      	b.n	8018782 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80186cc:	697b      	ldr	r3, [r7, #20]
 80186ce:	2b01      	cmp	r3, #1
 80186d0:	d101      	bne.n	80186d6 <dir_next+0xd6>
 80186d2:	2302      	movs	r3, #2
 80186d4:	e055      	b.n	8018782 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186dc:	d101      	bne.n	80186e2 <dir_next+0xe2>
 80186de:	2301      	movs	r3, #1
 80186e0:	e04f      	b.n	8018782 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80186e2:	68f8      	ldr	r0, [r7, #12]
 80186e4:	f7ff fb50 	bl	8017d88 <sync_window>
 80186e8:	4603      	mov	r3, r0
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d001      	beq.n	80186f2 <dir_next+0xf2>
 80186ee:	2301      	movs	r3, #1
 80186f0:	e047      	b.n	8018782 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	3334      	adds	r3, #52	@ 0x34
 80186f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80186fa:	2100      	movs	r1, #0
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7ff f97a 	bl	80179f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018702:	2300      	movs	r3, #0
 8018704:	613b      	str	r3, [r7, #16]
 8018706:	6979      	ldr	r1, [r7, #20]
 8018708:	68f8      	ldr	r0, [r7, #12]
 801870a:	f7ff fc1d 	bl	8017f48 <clust2sect>
 801870e:	4602      	mov	r2, r0
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	631a      	str	r2, [r3, #48]	@ 0x30
 8018714:	e012      	b.n	801873c <dir_next+0x13c>
						fs->wflag = 1;
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	2201      	movs	r2, #1
 801871a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801871c:	68f8      	ldr	r0, [r7, #12]
 801871e:	f7ff fb33 	bl	8017d88 <sync_window>
 8018722:	4603      	mov	r3, r0
 8018724:	2b00      	cmp	r3, #0
 8018726:	d001      	beq.n	801872c <dir_next+0x12c>
 8018728:	2301      	movs	r3, #1
 801872a:	e02a      	b.n	8018782 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	3301      	adds	r3, #1
 8018730:	613b      	str	r3, [r7, #16]
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018736:	1c5a      	adds	r2, r3, #1
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	631a      	str	r2, [r3, #48]	@ 0x30
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	895b      	ldrh	r3, [r3, #10]
 8018740:	461a      	mov	r2, r3
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	4293      	cmp	r3, r2
 8018746:	d3e6      	bcc.n	8018716 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	1ad2      	subs	r2, r2, r3
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	697a      	ldr	r2, [r7, #20]
 8018758:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801875a:	6979      	ldr	r1, [r7, #20]
 801875c:	68f8      	ldr	r0, [r7, #12]
 801875e:	f7ff fbf3 	bl	8017f48 <clust2sect>
 8018762:	4602      	mov	r2, r0
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	68ba      	ldr	r2, [r7, #8]
 801876c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801877a:	441a      	add	r2, r3
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018780:	2300      	movs	r3, #0
}
 8018782:	4618      	mov	r0, r3
 8018784:	3718      	adds	r7, #24
 8018786:	46bd      	mov	sp, r7
 8018788:	bd80      	pop	{r7, pc}

0801878a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801878a:	b580      	push	{r7, lr}
 801878c:	b086      	sub	sp, #24
 801878e:	af00      	add	r7, sp, #0
 8018790:	6078      	str	r0, [r7, #4]
 8018792:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801879a:	2100      	movs	r1, #0
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f7ff feb4 	bl	801850a <dir_sdi>
 80187a2:	4603      	mov	r3, r0
 80187a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80187a6:	7dfb      	ldrb	r3, [r7, #23]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d12b      	bne.n	8018804 <dir_alloc+0x7a>
		n = 0;
 80187ac:	2300      	movs	r3, #0
 80187ae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	69db      	ldr	r3, [r3, #28]
 80187b4:	4619      	mov	r1, r3
 80187b6:	68f8      	ldr	r0, [r7, #12]
 80187b8:	f7ff fb2a 	bl	8017e10 <move_window>
 80187bc:	4603      	mov	r3, r0
 80187be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80187c0:	7dfb      	ldrb	r3, [r7, #23]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d11d      	bne.n	8018802 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	6a1b      	ldr	r3, [r3, #32]
 80187ca:	781b      	ldrb	r3, [r3, #0]
 80187cc:	2be5      	cmp	r3, #229	@ 0xe5
 80187ce:	d004      	beq.n	80187da <dir_alloc+0x50>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6a1b      	ldr	r3, [r3, #32]
 80187d4:	781b      	ldrb	r3, [r3, #0]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d107      	bne.n	80187ea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	3301      	adds	r3, #1
 80187de:	613b      	str	r3, [r7, #16]
 80187e0:	693a      	ldr	r2, [r7, #16]
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d102      	bne.n	80187ee <dir_alloc+0x64>
 80187e8:	e00c      	b.n	8018804 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80187ea:	2300      	movs	r3, #0
 80187ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80187ee:	2101      	movs	r1, #1
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f7ff ff05 	bl	8018600 <dir_next>
 80187f6:	4603      	mov	r3, r0
 80187f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80187fa:	7dfb      	ldrb	r3, [r7, #23]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d0d7      	beq.n	80187b0 <dir_alloc+0x26>
 8018800:	e000      	b.n	8018804 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018802:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018804:	7dfb      	ldrb	r3, [r7, #23]
 8018806:	2b04      	cmp	r3, #4
 8018808:	d101      	bne.n	801880e <dir_alloc+0x84>
 801880a:	2307      	movs	r3, #7
 801880c:	75fb      	strb	r3, [r7, #23]
	return res;
 801880e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018810:	4618      	mov	r0, r3
 8018812:	3718      	adds	r7, #24
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}

08018818 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b084      	sub	sp, #16
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
 8018820:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	331a      	adds	r3, #26
 8018826:	4618      	mov	r0, r3
 8018828:	f7ff f842 	bl	80178b0 <ld_word>
 801882c:	4603      	mov	r3, r0
 801882e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	781b      	ldrb	r3, [r3, #0]
 8018834:	2b03      	cmp	r3, #3
 8018836:	d109      	bne.n	801884c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	3314      	adds	r3, #20
 801883c:	4618      	mov	r0, r3
 801883e:	f7ff f837 	bl	80178b0 <ld_word>
 8018842:	4603      	mov	r3, r0
 8018844:	041b      	lsls	r3, r3, #16
 8018846:	68fa      	ldr	r2, [r7, #12]
 8018848:	4313      	orrs	r3, r2
 801884a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801884c:	68fb      	ldr	r3, [r7, #12]
}
 801884e:	4618      	mov	r0, r3
 8018850:	3710      	adds	r7, #16
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}

08018856 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018856:	b580      	push	{r7, lr}
 8018858:	b084      	sub	sp, #16
 801885a:	af00      	add	r7, sp, #0
 801885c:	60f8      	str	r0, [r7, #12]
 801885e:	60b9      	str	r1, [r7, #8]
 8018860:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	331a      	adds	r3, #26
 8018866:	687a      	ldr	r2, [r7, #4]
 8018868:	b292      	uxth	r2, r2
 801886a:	4611      	mov	r1, r2
 801886c:	4618      	mov	r0, r3
 801886e:	f7ff f85a 	bl	8017926 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	781b      	ldrb	r3, [r3, #0]
 8018876:	2b03      	cmp	r3, #3
 8018878:	d109      	bne.n	801888e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801887a:	68bb      	ldr	r3, [r7, #8]
 801887c:	f103 0214 	add.w	r2, r3, #20
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	0c1b      	lsrs	r3, r3, #16
 8018884:	b29b      	uxth	r3, r3
 8018886:	4619      	mov	r1, r3
 8018888:	4610      	mov	r0, r2
 801888a:	f7ff f84c 	bl	8017926 <st_word>
	}
}
 801888e:	bf00      	nop
 8018890:	3710      	adds	r7, #16
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}
	...

08018898 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018898:	b590      	push	{r4, r7, lr}
 801889a:	b087      	sub	sp, #28
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	331a      	adds	r3, #26
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7ff f802 	bl	80178b0 <ld_word>
 80188ac:	4603      	mov	r3, r0
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d001      	beq.n	80188b6 <cmp_lfn+0x1e>
 80188b2:	2300      	movs	r3, #0
 80188b4:	e059      	b.n	801896a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80188be:	1e5a      	subs	r2, r3, #1
 80188c0:	4613      	mov	r3, r2
 80188c2:	005b      	lsls	r3, r3, #1
 80188c4:	4413      	add	r3, r2
 80188c6:	009b      	lsls	r3, r3, #2
 80188c8:	4413      	add	r3, r2
 80188ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80188cc:	2301      	movs	r3, #1
 80188ce:	81fb      	strh	r3, [r7, #14]
 80188d0:	2300      	movs	r3, #0
 80188d2:	613b      	str	r3, [r7, #16]
 80188d4:	e033      	b.n	801893e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80188d6:	4a27      	ldr	r2, [pc, #156]	@ (8018974 <cmp_lfn+0xdc>)
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	4413      	add	r3, r2
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	461a      	mov	r2, r3
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	4413      	add	r3, r2
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7fe ffe3 	bl	80178b0 <ld_word>
 80188ea:	4603      	mov	r3, r0
 80188ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80188ee:	89fb      	ldrh	r3, [r7, #14]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d01a      	beq.n	801892a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80188f4:	697b      	ldr	r3, [r7, #20]
 80188f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80188f8:	d812      	bhi.n	8018920 <cmp_lfn+0x88>
 80188fa:	89bb      	ldrh	r3, [r7, #12]
 80188fc:	4618      	mov	r0, r3
 80188fe:	f001 fe21 	bl	801a544 <ff_wtoupper>
 8018902:	4603      	mov	r3, r0
 8018904:	461c      	mov	r4, r3
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	1c5a      	adds	r2, r3, #1
 801890a:	617a      	str	r2, [r7, #20]
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	687a      	ldr	r2, [r7, #4]
 8018910:	4413      	add	r3, r2
 8018912:	881b      	ldrh	r3, [r3, #0]
 8018914:	4618      	mov	r0, r3
 8018916:	f001 fe15 	bl	801a544 <ff_wtoupper>
 801891a:	4603      	mov	r3, r0
 801891c:	429c      	cmp	r4, r3
 801891e:	d001      	beq.n	8018924 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018920:	2300      	movs	r3, #0
 8018922:	e022      	b.n	801896a <cmp_lfn+0xd2>
			}
			wc = uc;
 8018924:	89bb      	ldrh	r3, [r7, #12]
 8018926:	81fb      	strh	r3, [r7, #14]
 8018928:	e006      	b.n	8018938 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801892a:	89bb      	ldrh	r3, [r7, #12]
 801892c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018930:	4293      	cmp	r3, r2
 8018932:	d001      	beq.n	8018938 <cmp_lfn+0xa0>
 8018934:	2300      	movs	r3, #0
 8018936:	e018      	b.n	801896a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	3301      	adds	r3, #1
 801893c:	613b      	str	r3, [r7, #16]
 801893e:	693b      	ldr	r3, [r7, #16]
 8018940:	2b0c      	cmp	r3, #12
 8018942:	d9c8      	bls.n	80188d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018944:	683b      	ldr	r3, [r7, #0]
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801894c:	2b00      	cmp	r3, #0
 801894e:	d00b      	beq.n	8018968 <cmp_lfn+0xd0>
 8018950:	89fb      	ldrh	r3, [r7, #14]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d008      	beq.n	8018968 <cmp_lfn+0xd0>
 8018956:	697b      	ldr	r3, [r7, #20]
 8018958:	005b      	lsls	r3, r3, #1
 801895a:	687a      	ldr	r2, [r7, #4]
 801895c:	4413      	add	r3, r2
 801895e:	881b      	ldrh	r3, [r3, #0]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d001      	beq.n	8018968 <cmp_lfn+0xd0>
 8018964:	2300      	movs	r3, #0
 8018966:	e000      	b.n	801896a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018968:	2301      	movs	r3, #1
}
 801896a:	4618      	mov	r0, r3
 801896c:	371c      	adds	r7, #28
 801896e:	46bd      	mov	sp, r7
 8018970:	bd90      	pop	{r4, r7, pc}
 8018972:	bf00      	nop
 8018974:	08022a98 	.word	0x08022a98

08018978 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b088      	sub	sp, #32
 801897c:	af00      	add	r7, sp, #0
 801897e:	60f8      	str	r0, [r7, #12]
 8018980:	60b9      	str	r1, [r7, #8]
 8018982:	4611      	mov	r1, r2
 8018984:	461a      	mov	r2, r3
 8018986:	460b      	mov	r3, r1
 8018988:	71fb      	strb	r3, [r7, #7]
 801898a:	4613      	mov	r3, r2
 801898c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801898e:	68bb      	ldr	r3, [r7, #8]
 8018990:	330d      	adds	r3, #13
 8018992:	79ba      	ldrb	r2, [r7, #6]
 8018994:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	330b      	adds	r3, #11
 801899a:	220f      	movs	r2, #15
 801899c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	330c      	adds	r3, #12
 80189a2:	2200      	movs	r2, #0
 80189a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80189a6:	68bb      	ldr	r3, [r7, #8]
 80189a8:	331a      	adds	r3, #26
 80189aa:	2100      	movs	r1, #0
 80189ac:	4618      	mov	r0, r3
 80189ae:	f7fe ffba 	bl	8017926 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80189b2:	79fb      	ldrb	r3, [r7, #7]
 80189b4:	1e5a      	subs	r2, r3, #1
 80189b6:	4613      	mov	r3, r2
 80189b8:	005b      	lsls	r3, r3, #1
 80189ba:	4413      	add	r3, r2
 80189bc:	009b      	lsls	r3, r3, #2
 80189be:	4413      	add	r3, r2
 80189c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80189c2:	2300      	movs	r3, #0
 80189c4:	82fb      	strh	r3, [r7, #22]
 80189c6:	2300      	movs	r3, #0
 80189c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80189ca:	8afb      	ldrh	r3, [r7, #22]
 80189cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80189d0:	4293      	cmp	r3, r2
 80189d2:	d007      	beq.n	80189e4 <put_lfn+0x6c>
 80189d4:	69fb      	ldr	r3, [r7, #28]
 80189d6:	1c5a      	adds	r2, r3, #1
 80189d8:	61fa      	str	r2, [r7, #28]
 80189da:	005b      	lsls	r3, r3, #1
 80189dc:	68fa      	ldr	r2, [r7, #12]
 80189de:	4413      	add	r3, r2
 80189e0:	881b      	ldrh	r3, [r3, #0]
 80189e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80189e4:	4a17      	ldr	r2, [pc, #92]	@ (8018a44 <put_lfn+0xcc>)
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	4413      	add	r3, r2
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	461a      	mov	r2, r3
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	4413      	add	r3, r2
 80189f2:	8afa      	ldrh	r2, [r7, #22]
 80189f4:	4611      	mov	r1, r2
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7fe ff95 	bl	8017926 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80189fc:	8afb      	ldrh	r3, [r7, #22]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d102      	bne.n	8018a08 <put_lfn+0x90>
 8018a02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018a06:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018a08:	69bb      	ldr	r3, [r7, #24]
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	61bb      	str	r3, [r7, #24]
 8018a0e:	69bb      	ldr	r3, [r7, #24]
 8018a10:	2b0c      	cmp	r3, #12
 8018a12:	d9da      	bls.n	80189ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018a14:	8afb      	ldrh	r3, [r7, #22]
 8018a16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018a1a:	4293      	cmp	r3, r2
 8018a1c:	d006      	beq.n	8018a2c <put_lfn+0xb4>
 8018a1e:	69fb      	ldr	r3, [r7, #28]
 8018a20:	005b      	lsls	r3, r3, #1
 8018a22:	68fa      	ldr	r2, [r7, #12]
 8018a24:	4413      	add	r3, r2
 8018a26:	881b      	ldrh	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d103      	bne.n	8018a34 <put_lfn+0xbc>
 8018a2c:	79fb      	ldrb	r3, [r7, #7]
 8018a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a32:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	79fa      	ldrb	r2, [r7, #7]
 8018a38:	701a      	strb	r2, [r3, #0]
}
 8018a3a:	bf00      	nop
 8018a3c:	3720      	adds	r7, #32
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
 8018a42:	bf00      	nop
 8018a44:	08022a98 	.word	0x08022a98

08018a48 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b08c      	sub	sp, #48	@ 0x30
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	60f8      	str	r0, [r7, #12]
 8018a50:	60b9      	str	r1, [r7, #8]
 8018a52:	607a      	str	r2, [r7, #4]
 8018a54:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018a56:	220b      	movs	r2, #11
 8018a58:	68b9      	ldr	r1, [r7, #8]
 8018a5a:	68f8      	ldr	r0, [r7, #12]
 8018a5c:	f7fe ffaa 	bl	80179b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	2b05      	cmp	r3, #5
 8018a64:	d92b      	bls.n	8018abe <gen_numname+0x76>
		sr = seq;
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018a6a:	e022      	b.n	8018ab2 <gen_numname+0x6a>
			wc = *lfn++;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	1c9a      	adds	r2, r3, #2
 8018a70:	607a      	str	r2, [r7, #4]
 8018a72:	881b      	ldrh	r3, [r3, #0]
 8018a74:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8018a76:	2300      	movs	r3, #0
 8018a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a7a:	e017      	b.n	8018aac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8018a7c:	69fb      	ldr	r3, [r7, #28]
 8018a7e:	005a      	lsls	r2, r3, #1
 8018a80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a82:	f003 0301 	and.w	r3, r3, #1
 8018a86:	4413      	add	r3, r2
 8018a88:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018a8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a8c:	085b      	lsrs	r3, r3, #1
 8018a8e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018a90:	69fb      	ldr	r3, [r7, #28]
 8018a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d005      	beq.n	8018aa6 <gen_numname+0x5e>
 8018a9a:	69fb      	ldr	r3, [r7, #28]
 8018a9c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8018aa0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8018aa4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aae:	2b0f      	cmp	r3, #15
 8018ab0:	d9e4      	bls.n	8018a7c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	881b      	ldrh	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d1d8      	bne.n	8018a6c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018aba:	69fb      	ldr	r3, [r7, #28]
 8018abc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018abe:	2307      	movs	r3, #7
 8018ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	f003 030f 	and.w	r3, r3, #15
 8018aca:	b2db      	uxtb	r3, r3
 8018acc:	3330      	adds	r3, #48	@ 0x30
 8018ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8018ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018ad6:	2b39      	cmp	r3, #57	@ 0x39
 8018ad8:	d904      	bls.n	8018ae4 <gen_numname+0x9c>
 8018ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018ade:	3307      	adds	r3, #7
 8018ae0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8018ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ae6:	1e5a      	subs	r2, r3, #1
 8018ae8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8018aea:	3330      	adds	r3, #48	@ 0x30
 8018aec:	443b      	add	r3, r7
 8018aee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8018af2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	091b      	lsrs	r3, r3, #4
 8018afa:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d1df      	bne.n	8018ac2 <gen_numname+0x7a>
	ns[i] = '~';
 8018b02:	f107 0214 	add.w	r2, r7, #20
 8018b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b08:	4413      	add	r3, r2
 8018b0a:	227e      	movs	r2, #126	@ 0x7e
 8018b0c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018b0e:	2300      	movs	r3, #0
 8018b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b12:	e002      	b.n	8018b1a <gen_numname+0xd2>
 8018b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b16:	3301      	adds	r3, #1
 8018b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d205      	bcs.n	8018b2e <gen_numname+0xe6>
 8018b22:	68fa      	ldr	r2, [r7, #12]
 8018b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b26:	4413      	add	r3, r2
 8018b28:	781b      	ldrb	r3, [r3, #0]
 8018b2a:	2b20      	cmp	r3, #32
 8018b2c:	d1f2      	bne.n	8018b14 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b30:	2b07      	cmp	r3, #7
 8018b32:	d807      	bhi.n	8018b44 <gen_numname+0xfc>
 8018b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b36:	1c5a      	adds	r2, r3, #1
 8018b38:	62ba      	str	r2, [r7, #40]	@ 0x28
 8018b3a:	3330      	adds	r3, #48	@ 0x30
 8018b3c:	443b      	add	r3, r7
 8018b3e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018b42:	e000      	b.n	8018b46 <gen_numname+0xfe>
 8018b44:	2120      	movs	r1, #32
 8018b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b48:	1c5a      	adds	r2, r3, #1
 8018b4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	4413      	add	r3, r2
 8018b50:	460a      	mov	r2, r1
 8018b52:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b56:	2b07      	cmp	r3, #7
 8018b58:	d9e9      	bls.n	8018b2e <gen_numname+0xe6>
}
 8018b5a:	bf00      	nop
 8018b5c:	bf00      	nop
 8018b5e:	3730      	adds	r7, #48	@ 0x30
 8018b60:	46bd      	mov	sp, r7
 8018b62:	bd80      	pop	{r7, pc}

08018b64 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018b64:	b480      	push	{r7}
 8018b66:	b085      	sub	sp, #20
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018b70:	230b      	movs	r3, #11
 8018b72:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018b74:	7bfb      	ldrb	r3, [r7, #15]
 8018b76:	b2da      	uxtb	r2, r3
 8018b78:	0852      	lsrs	r2, r2, #1
 8018b7a:	01db      	lsls	r3, r3, #7
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	b2da      	uxtb	r2, r3
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	1c59      	adds	r1, r3, #1
 8018b84:	6079      	str	r1, [r7, #4]
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	4413      	add	r3, r2
 8018b8a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018b8c:	68bb      	ldr	r3, [r7, #8]
 8018b8e:	3b01      	subs	r3, #1
 8018b90:	60bb      	str	r3, [r7, #8]
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d1ed      	bne.n	8018b74 <sum_sfn+0x10>
	return sum;
 8018b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	3714      	adds	r7, #20
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba4:	4770      	bx	lr

08018ba6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018ba6:	b580      	push	{r7, lr}
 8018ba8:	b086      	sub	sp, #24
 8018baa:	af00      	add	r7, sp, #0
 8018bac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018bb4:	2100      	movs	r1, #0
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	f7ff fca7 	bl	801850a <dir_sdi>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018bc0:	7dfb      	ldrb	r3, [r7, #23]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d001      	beq.n	8018bca <dir_find+0x24>
 8018bc6:	7dfb      	ldrb	r3, [r7, #23]
 8018bc8:	e0a9      	b.n	8018d1e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018bca:	23ff      	movs	r3, #255	@ 0xff
 8018bcc:	753b      	strb	r3, [r7, #20]
 8018bce:	7d3b      	ldrb	r3, [r7, #20]
 8018bd0:	757b      	strb	r3, [r7, #21]
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8018bd8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	69db      	ldr	r3, [r3, #28]
 8018bde:	4619      	mov	r1, r3
 8018be0:	6938      	ldr	r0, [r7, #16]
 8018be2:	f7ff f915 	bl	8017e10 <move_window>
 8018be6:	4603      	mov	r3, r0
 8018be8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018bea:	7dfb      	ldrb	r3, [r7, #23]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	f040 8090 	bne.w	8018d12 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	6a1b      	ldr	r3, [r3, #32]
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018bfa:	7dbb      	ldrb	r3, [r7, #22]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d102      	bne.n	8018c06 <dir_find+0x60>
 8018c00:	2304      	movs	r3, #4
 8018c02:	75fb      	strb	r3, [r7, #23]
 8018c04:	e08a      	b.n	8018d1c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	6a1b      	ldr	r3, [r3, #32]
 8018c0a:	330b      	adds	r3, #11
 8018c0c:	781b      	ldrb	r3, [r3, #0]
 8018c0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018c12:	73fb      	strb	r3, [r7, #15]
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	7bfa      	ldrb	r2, [r7, #15]
 8018c18:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018c1a:	7dbb      	ldrb	r3, [r7, #22]
 8018c1c:	2be5      	cmp	r3, #229	@ 0xe5
 8018c1e:	d007      	beq.n	8018c30 <dir_find+0x8a>
 8018c20:	7bfb      	ldrb	r3, [r7, #15]
 8018c22:	f003 0308 	and.w	r3, r3, #8
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d009      	beq.n	8018c3e <dir_find+0x98>
 8018c2a:	7bfb      	ldrb	r3, [r7, #15]
 8018c2c:	2b0f      	cmp	r3, #15
 8018c2e:	d006      	beq.n	8018c3e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018c30:	23ff      	movs	r3, #255	@ 0xff
 8018c32:	757b      	strb	r3, [r7, #21]
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f04f 32ff 	mov.w	r2, #4294967295
 8018c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8018c3c:	e05e      	b.n	8018cfc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018c3e:	7bfb      	ldrb	r3, [r7, #15]
 8018c40:	2b0f      	cmp	r3, #15
 8018c42:	d136      	bne.n	8018cb2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d154      	bne.n	8018cfc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018c52:	7dbb      	ldrb	r3, [r7, #22]
 8018c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d00d      	beq.n	8018c78 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	6a1b      	ldr	r3, [r3, #32]
 8018c60:	7b5b      	ldrb	r3, [r3, #13]
 8018c62:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018c64:	7dbb      	ldrb	r3, [r7, #22]
 8018c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018c6a:	75bb      	strb	r3, [r7, #22]
 8018c6c:	7dbb      	ldrb	r3, [r7, #22]
 8018c6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	695a      	ldr	r2, [r3, #20]
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018c78:	7dba      	ldrb	r2, [r7, #22]
 8018c7a:	7d7b      	ldrb	r3, [r7, #21]
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d115      	bne.n	8018cac <dir_find+0x106>
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6a1b      	ldr	r3, [r3, #32]
 8018c84:	330d      	adds	r3, #13
 8018c86:	781b      	ldrb	r3, [r3, #0]
 8018c88:	7d3a      	ldrb	r2, [r7, #20]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d10e      	bne.n	8018cac <dir_find+0x106>
 8018c8e:	693b      	ldr	r3, [r7, #16]
 8018c90:	68da      	ldr	r2, [r3, #12]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6a1b      	ldr	r3, [r3, #32]
 8018c96:	4619      	mov	r1, r3
 8018c98:	4610      	mov	r0, r2
 8018c9a:	f7ff fdfd 	bl	8018898 <cmp_lfn>
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d003      	beq.n	8018cac <dir_find+0x106>
 8018ca4:	7d7b      	ldrb	r3, [r7, #21]
 8018ca6:	3b01      	subs	r3, #1
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	e000      	b.n	8018cae <dir_find+0x108>
 8018cac:	23ff      	movs	r3, #255	@ 0xff
 8018cae:	757b      	strb	r3, [r7, #21]
 8018cb0:	e024      	b.n	8018cfc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018cb2:	7d7b      	ldrb	r3, [r7, #21]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d109      	bne.n	8018ccc <dir_find+0x126>
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6a1b      	ldr	r3, [r3, #32]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7ff ff51 	bl	8018b64 <sum_sfn>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	7d3b      	ldrb	r3, [r7, #20]
 8018cc8:	4293      	cmp	r3, r2
 8018cca:	d024      	beq.n	8018d16 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018cd2:	f003 0301 	and.w	r3, r3, #1
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d10a      	bne.n	8018cf0 <dir_find+0x14a>
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	6a18      	ldr	r0, [r3, #32]
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	3324      	adds	r3, #36	@ 0x24
 8018ce2:	220b      	movs	r2, #11
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	f7fe fea1 	bl	8017a2c <mem_cmp>
 8018cea:	4603      	mov	r3, r0
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d014      	beq.n	8018d1a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018cf0:	23ff      	movs	r3, #255	@ 0xff
 8018cf2:	757b      	strb	r3, [r7, #21]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8018cfa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	6878      	ldr	r0, [r7, #4]
 8018d00:	f7ff fc7e 	bl	8018600 <dir_next>
 8018d04:	4603      	mov	r3, r0
 8018d06:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018d08:	7dfb      	ldrb	r3, [r7, #23]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	f43f af65 	beq.w	8018bda <dir_find+0x34>
 8018d10:	e004      	b.n	8018d1c <dir_find+0x176>
		if (res != FR_OK) break;
 8018d12:	bf00      	nop
 8018d14:	e002      	b.n	8018d1c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018d16:	bf00      	nop
 8018d18:	e000      	b.n	8018d1c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018d1a:	bf00      	nop

	return res;
 8018d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3718      	adds	r7, #24
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}
	...

08018d28 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b08c      	sub	sp, #48	@ 0x30
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018d3c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d001      	beq.n	8018d48 <dir_register+0x20>
 8018d44:	2306      	movs	r3, #6
 8018d46:	e0e0      	b.n	8018f0a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018d48:	2300      	movs	r3, #0
 8018d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d4c:	e002      	b.n	8018d54 <dir_register+0x2c>
 8018d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d50:	3301      	adds	r3, #1
 8018d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	68da      	ldr	r2, [r3, #12]
 8018d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	4413      	add	r3, r2
 8018d5e:	881b      	ldrh	r3, [r3, #0]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d1f4      	bne.n	8018d4e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8018d6a:	f107 030c 	add.w	r3, r7, #12
 8018d6e:	220c      	movs	r2, #12
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7fe fe1f 	bl	80179b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018d76:	7dfb      	ldrb	r3, [r7, #23]
 8018d78:	f003 0301 	and.w	r3, r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d032      	beq.n	8018de6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2240      	movs	r2, #64	@ 0x40
 8018d84:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8018d88:	2301      	movs	r3, #1
 8018d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018d8c:	e016      	b.n	8018dbc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8018d94:	69fb      	ldr	r3, [r7, #28]
 8018d96:	68da      	ldr	r2, [r3, #12]
 8018d98:	f107 010c 	add.w	r1, r7, #12
 8018d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d9e:	f7ff fe53 	bl	8018a48 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ff feff 	bl	8018ba6 <dir_find>
 8018da8:	4603      	mov	r3, r0
 8018daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8018dae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d106      	bne.n	8018dc4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018db8:	3301      	adds	r3, #1
 8018dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018dbe:	2b63      	cmp	r3, #99	@ 0x63
 8018dc0:	d9e5      	bls.n	8018d8e <dir_register+0x66>
 8018dc2:	e000      	b.n	8018dc6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018dc4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018dc8:	2b64      	cmp	r3, #100	@ 0x64
 8018dca:	d101      	bne.n	8018dd0 <dir_register+0xa8>
 8018dcc:	2307      	movs	r3, #7
 8018dce:	e09c      	b.n	8018f0a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018dd4:	2b04      	cmp	r3, #4
 8018dd6:	d002      	beq.n	8018dde <dir_register+0xb6>
 8018dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018ddc:	e095      	b.n	8018f0a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018dde:	7dfa      	ldrb	r2, [r7, #23]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018de6:	7dfb      	ldrb	r3, [r7, #23]
 8018de8:	f003 0302 	and.w	r3, r3, #2
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d007      	beq.n	8018e00 <dir_register+0xd8>
 8018df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018df2:	330c      	adds	r3, #12
 8018df4:	4a47      	ldr	r2, [pc, #284]	@ (8018f14 <dir_register+0x1ec>)
 8018df6:	fba2 2303 	umull	r2, r3, r2, r3
 8018dfa:	089b      	lsrs	r3, r3, #2
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	e000      	b.n	8018e02 <dir_register+0xda>
 8018e00:	2301      	movs	r3, #1
 8018e02:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018e04:	6a39      	ldr	r1, [r7, #32]
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f7ff fcbf 	bl	801878a <dir_alloc>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018e12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d148      	bne.n	8018eac <dir_register+0x184>
 8018e1a:	6a3b      	ldr	r3, [r7, #32]
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	623b      	str	r3, [r7, #32]
 8018e20:	6a3b      	ldr	r3, [r7, #32]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d042      	beq.n	8018eac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	695a      	ldr	r2, [r3, #20]
 8018e2a:	6a3b      	ldr	r3, [r7, #32]
 8018e2c:	015b      	lsls	r3, r3, #5
 8018e2e:	1ad3      	subs	r3, r2, r3
 8018e30:	4619      	mov	r1, r3
 8018e32:	6878      	ldr	r0, [r7, #4]
 8018e34:	f7ff fb69 	bl	801850a <dir_sdi>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8018e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d132      	bne.n	8018eac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	3324      	adds	r3, #36	@ 0x24
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7ff fe8a 	bl	8018b64 <sum_sfn>
 8018e50:	4603      	mov	r3, r0
 8018e52:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	69db      	ldr	r3, [r3, #28]
 8018e58:	4619      	mov	r1, r3
 8018e5a:	69f8      	ldr	r0, [r7, #28]
 8018e5c:	f7fe ffd8 	bl	8017e10 <move_window>
 8018e60:	4603      	mov	r3, r0
 8018e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8018e66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d11d      	bne.n	8018eaa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018e6e:	69fb      	ldr	r3, [r7, #28]
 8018e70:	68d8      	ldr	r0, [r3, #12]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6a19      	ldr	r1, [r3, #32]
 8018e76:	6a3b      	ldr	r3, [r7, #32]
 8018e78:	b2da      	uxtb	r2, r3
 8018e7a:	7efb      	ldrb	r3, [r7, #27]
 8018e7c:	f7ff fd7c 	bl	8018978 <put_lfn>
				fs->wflag = 1;
 8018e80:	69fb      	ldr	r3, [r7, #28]
 8018e82:	2201      	movs	r2, #1
 8018e84:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018e86:	2100      	movs	r1, #0
 8018e88:	6878      	ldr	r0, [r7, #4]
 8018e8a:	f7ff fbb9 	bl	8018600 <dir_next>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8018e94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d107      	bne.n	8018eac <dir_register+0x184>
 8018e9c:	6a3b      	ldr	r3, [r7, #32]
 8018e9e:	3b01      	subs	r3, #1
 8018ea0:	623b      	str	r3, [r7, #32]
 8018ea2:	6a3b      	ldr	r3, [r7, #32]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d1d5      	bne.n	8018e54 <dir_register+0x12c>
 8018ea8:	e000      	b.n	8018eac <dir_register+0x184>
				if (res != FR_OK) break;
 8018eaa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018eac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d128      	bne.n	8018f06 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	69db      	ldr	r3, [r3, #28]
 8018eb8:	4619      	mov	r1, r3
 8018eba:	69f8      	ldr	r0, [r7, #28]
 8018ebc:	f7fe ffa8 	bl	8017e10 <move_window>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8018ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d11b      	bne.n	8018f06 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6a1b      	ldr	r3, [r3, #32]
 8018ed2:	2220      	movs	r2, #32
 8018ed4:	2100      	movs	r1, #0
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f7fe fd8d 	bl	80179f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6a18      	ldr	r0, [r3, #32]
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	3324      	adds	r3, #36	@ 0x24
 8018ee4:	220b      	movs	r2, #11
 8018ee6:	4619      	mov	r1, r3
 8018ee8:	f7fe fd64 	bl	80179b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6a1b      	ldr	r3, [r3, #32]
 8018ef6:	330c      	adds	r3, #12
 8018ef8:	f002 0218 	and.w	r2, r2, #24
 8018efc:	b2d2      	uxtb	r2, r2
 8018efe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018f00:	69fb      	ldr	r3, [r7, #28]
 8018f02:	2201      	movs	r2, #1
 8018f04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018f06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3730      	adds	r7, #48	@ 0x30
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}
 8018f12:	bf00      	nop
 8018f14:	4ec4ec4f 	.word	0x4ec4ec4f

08018f18 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b088      	sub	sp, #32
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
 8018f20:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	69db      	ldr	r3, [r3, #28]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	f000 80ca 	beq.w	80190cc <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f40:	d032      	beq.n	8018fa8 <get_fileinfo+0x90>
			i = j = 0;
 8018f42:	2300      	movs	r3, #0
 8018f44:	61bb      	str	r3, [r7, #24]
 8018f46:	69bb      	ldr	r3, [r7, #24]
 8018f48:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018f4a:	e01b      	b.n	8018f84 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8018f4c:	89fb      	ldrh	r3, [r7, #14]
 8018f4e:	2100      	movs	r1, #0
 8018f50:	4618      	mov	r0, r3
 8018f52:	f001 fabb 	bl	801a4cc <ff_convert>
 8018f56:	4603      	mov	r3, r0
 8018f58:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8018f5a:	89fb      	ldrh	r3, [r7, #14]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d102      	bne.n	8018f66 <get_fileinfo+0x4e>
 8018f60:	2300      	movs	r3, #0
 8018f62:	61fb      	str	r3, [r7, #28]
 8018f64:	e01a      	b.n	8018f9c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018f66:	69fb      	ldr	r3, [r7, #28]
 8018f68:	2bfe      	cmp	r3, #254	@ 0xfe
 8018f6a:	d902      	bls.n	8018f72 <get_fileinfo+0x5a>
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	61fb      	str	r3, [r7, #28]
 8018f70:	e014      	b.n	8018f9c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8018f72:	69fb      	ldr	r3, [r7, #28]
 8018f74:	1c5a      	adds	r2, r3, #1
 8018f76:	61fa      	str	r2, [r7, #28]
 8018f78:	89fa      	ldrh	r2, [r7, #14]
 8018f7a:	b2d1      	uxtb	r1, r2
 8018f7c:	683a      	ldr	r2, [r7, #0]
 8018f7e:	4413      	add	r3, r2
 8018f80:	460a      	mov	r2, r1
 8018f82:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018f84:	693b      	ldr	r3, [r7, #16]
 8018f86:	68da      	ldr	r2, [r3, #12]
 8018f88:	69bb      	ldr	r3, [r7, #24]
 8018f8a:	1c59      	adds	r1, r3, #1
 8018f8c:	61b9      	str	r1, [r7, #24]
 8018f8e:	005b      	lsls	r3, r3, #1
 8018f90:	4413      	add	r3, r2
 8018f92:	881b      	ldrh	r3, [r3, #0]
 8018f94:	81fb      	strh	r3, [r7, #14]
 8018f96:	89fb      	ldrh	r3, [r7, #14]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d1d7      	bne.n	8018f4c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8018f9c:	683a      	ldr	r2, [r7, #0]
 8018f9e:	69fb      	ldr	r3, [r7, #28]
 8018fa0:	4413      	add	r3, r2
 8018fa2:	3316      	adds	r3, #22
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	61bb      	str	r3, [r7, #24]
 8018fac:	69bb      	ldr	r3, [r7, #24]
 8018fae:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018fb0:	683a      	ldr	r2, [r7, #0]
 8018fb2:	69fb      	ldr	r3, [r7, #28]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	3316      	adds	r3, #22
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8018fbc:	e04d      	b.n	801905a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	6a1a      	ldr	r2, [r3, #32]
 8018fc2:	69fb      	ldr	r3, [r7, #28]
 8018fc4:	1c59      	adds	r1, r3, #1
 8018fc6:	61f9      	str	r1, [r7, #28]
 8018fc8:	4413      	add	r3, r2
 8018fca:	781b      	ldrb	r3, [r3, #0]
 8018fcc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8018fce:	7dfb      	ldrb	r3, [r7, #23]
 8018fd0:	2b20      	cmp	r3, #32
 8018fd2:	d041      	beq.n	8019058 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018fd4:	7dfb      	ldrb	r3, [r7, #23]
 8018fd6:	2b05      	cmp	r3, #5
 8018fd8:	d101      	bne.n	8018fde <get_fileinfo+0xc6>
 8018fda:	23e5      	movs	r3, #229	@ 0xe5
 8018fdc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8018fde:	69fb      	ldr	r3, [r7, #28]
 8018fe0:	2b09      	cmp	r3, #9
 8018fe2:	d10f      	bne.n	8019004 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8018fe4:	89bb      	ldrh	r3, [r7, #12]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d105      	bne.n	8018ff6 <get_fileinfo+0xde>
 8018fea:	683a      	ldr	r2, [r7, #0]
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	4413      	add	r3, r2
 8018ff0:	3316      	adds	r3, #22
 8018ff2:	222e      	movs	r2, #46	@ 0x2e
 8018ff4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8018ff6:	69bb      	ldr	r3, [r7, #24]
 8018ff8:	1c5a      	adds	r2, r3, #1
 8018ffa:	61ba      	str	r2, [r7, #24]
 8018ffc:	683a      	ldr	r2, [r7, #0]
 8018ffe:	4413      	add	r3, r2
 8019000:	222e      	movs	r2, #46	@ 0x2e
 8019002:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8019004:	683a      	ldr	r2, [r7, #0]
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	4413      	add	r3, r2
 801900a:	3309      	adds	r3, #9
 801900c:	7dfa      	ldrb	r2, [r7, #23]
 801900e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8019010:	89bb      	ldrh	r3, [r7, #12]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d11c      	bne.n	8019050 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8019016:	7dfb      	ldrb	r3, [r7, #23]
 8019018:	2b40      	cmp	r3, #64	@ 0x40
 801901a:	d913      	bls.n	8019044 <get_fileinfo+0x12c>
 801901c:	7dfb      	ldrb	r3, [r7, #23]
 801901e:	2b5a      	cmp	r3, #90	@ 0x5a
 8019020:	d810      	bhi.n	8019044 <get_fileinfo+0x12c>
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	6a1b      	ldr	r3, [r3, #32]
 8019026:	330c      	adds	r3, #12
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	461a      	mov	r2, r3
 801902c:	69fb      	ldr	r3, [r7, #28]
 801902e:	2b08      	cmp	r3, #8
 8019030:	d901      	bls.n	8019036 <get_fileinfo+0x11e>
 8019032:	2310      	movs	r3, #16
 8019034:	e000      	b.n	8019038 <get_fileinfo+0x120>
 8019036:	2308      	movs	r3, #8
 8019038:	4013      	ands	r3, r2
 801903a:	2b00      	cmp	r3, #0
 801903c:	d002      	beq.n	8019044 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801903e:	7dfb      	ldrb	r3, [r7, #23]
 8019040:	3320      	adds	r3, #32
 8019042:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8019044:	683a      	ldr	r2, [r7, #0]
 8019046:	69bb      	ldr	r3, [r7, #24]
 8019048:	4413      	add	r3, r2
 801904a:	3316      	adds	r3, #22
 801904c:	7dfa      	ldrb	r2, [r7, #23]
 801904e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8019050:	69bb      	ldr	r3, [r7, #24]
 8019052:	3301      	adds	r3, #1
 8019054:	61bb      	str	r3, [r7, #24]
 8019056:	e000      	b.n	801905a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8019058:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801905a:	69fb      	ldr	r3, [r7, #28]
 801905c:	2b0a      	cmp	r3, #10
 801905e:	d9ae      	bls.n	8018fbe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8019060:	89bb      	ldrh	r3, [r7, #12]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d10d      	bne.n	8019082 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8019066:	683a      	ldr	r2, [r7, #0]
 8019068:	69bb      	ldr	r3, [r7, #24]
 801906a:	4413      	add	r3, r2
 801906c:	3316      	adds	r3, #22
 801906e:	2200      	movs	r2, #0
 8019070:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6a1b      	ldr	r3, [r3, #32]
 8019076:	330c      	adds	r3, #12
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d101      	bne.n	8019082 <get_fileinfo+0x16a>
 801907e:	2300      	movs	r3, #0
 8019080:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8019082:	683a      	ldr	r2, [r7, #0]
 8019084:	69bb      	ldr	r3, [r7, #24]
 8019086:	4413      	add	r3, r2
 8019088:	3309      	adds	r3, #9
 801908a:	2200      	movs	r2, #0
 801908c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	6a1b      	ldr	r3, [r3, #32]
 8019092:	7ada      	ldrb	r2, [r3, #11]
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6a1b      	ldr	r3, [r3, #32]
 801909c:	331c      	adds	r3, #28
 801909e:	4618      	mov	r0, r3
 80190a0:	f7fe fc1e 	bl	80178e0 <ld_dword>
 80190a4:	4602      	mov	r2, r0
 80190a6:	683b      	ldr	r3, [r7, #0]
 80190a8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6a1b      	ldr	r3, [r3, #32]
 80190ae:	3316      	adds	r3, #22
 80190b0:	4618      	mov	r0, r3
 80190b2:	f7fe fc15 	bl	80178e0 <ld_dword>
 80190b6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80190b8:	68bb      	ldr	r3, [r7, #8]
 80190ba:	b29a      	uxth	r2, r3
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	80da      	strh	r2, [r3, #6]
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	0c1b      	lsrs	r3, r3, #16
 80190c4:	b29a      	uxth	r2, r3
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	809a      	strh	r2, [r3, #4]
 80190ca:	e000      	b.n	80190ce <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80190cc:	bf00      	nop
}
 80190ce:	3720      	adds	r7, #32
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b08a      	sub	sp, #40	@ 0x28
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80190de:	683b      	ldr	r3, [r7, #0]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	613b      	str	r3, [r7, #16]
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	68db      	ldr	r3, [r3, #12]
 80190ea:	60fb      	str	r3, [r7, #12]
 80190ec:	2300      	movs	r3, #0
 80190ee:	617b      	str	r3, [r7, #20]
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80190f4:	69bb      	ldr	r3, [r7, #24]
 80190f6:	1c5a      	adds	r2, r3, #1
 80190f8:	61ba      	str	r2, [r7, #24]
 80190fa:	693a      	ldr	r2, [r7, #16]
 80190fc:	4413      	add	r3, r2
 80190fe:	781b      	ldrb	r3, [r3, #0]
 8019100:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8019102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019104:	2b1f      	cmp	r3, #31
 8019106:	d940      	bls.n	801918a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8019108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801910a:	2b2f      	cmp	r3, #47	@ 0x2f
 801910c:	d006      	beq.n	801911c <create_name+0x48>
 801910e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019110:	2b5c      	cmp	r3, #92	@ 0x5c
 8019112:	d110      	bne.n	8019136 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8019114:	e002      	b.n	801911c <create_name+0x48>
 8019116:	69bb      	ldr	r3, [r7, #24]
 8019118:	3301      	adds	r3, #1
 801911a:	61bb      	str	r3, [r7, #24]
 801911c:	693a      	ldr	r2, [r7, #16]
 801911e:	69bb      	ldr	r3, [r7, #24]
 8019120:	4413      	add	r3, r2
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	2b2f      	cmp	r3, #47	@ 0x2f
 8019126:	d0f6      	beq.n	8019116 <create_name+0x42>
 8019128:	693a      	ldr	r2, [r7, #16]
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	4413      	add	r3, r2
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	2b5c      	cmp	r3, #92	@ 0x5c
 8019132:	d0f0      	beq.n	8019116 <create_name+0x42>
			break;
 8019134:	e02a      	b.n	801918c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	2bfe      	cmp	r3, #254	@ 0xfe
 801913a:	d901      	bls.n	8019140 <create_name+0x6c>
 801913c:	2306      	movs	r3, #6
 801913e:	e17d      	b.n	801943c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8019140:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019142:	b2db      	uxtb	r3, r3
 8019144:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8019146:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019148:	2101      	movs	r1, #1
 801914a:	4618      	mov	r0, r3
 801914c:	f001 f9be 	bl	801a4cc <ff_convert>
 8019150:	4603      	mov	r3, r0
 8019152:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8019154:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019156:	2b00      	cmp	r3, #0
 8019158:	d101      	bne.n	801915e <create_name+0x8a>
 801915a:	2306      	movs	r3, #6
 801915c:	e16e      	b.n	801943c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801915e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019160:	2b7f      	cmp	r3, #127	@ 0x7f
 8019162:	d809      	bhi.n	8019178 <create_name+0xa4>
 8019164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019166:	4619      	mov	r1, r3
 8019168:	488d      	ldr	r0, [pc, #564]	@ (80193a0 <create_name+0x2cc>)
 801916a:	f7fe fc86 	bl	8017a7a <chk_chr>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	d001      	beq.n	8019178 <create_name+0xa4>
 8019174:	2306      	movs	r3, #6
 8019176:	e161      	b.n	801943c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	1c5a      	adds	r2, r3, #1
 801917c:	617a      	str	r2, [r7, #20]
 801917e:	005b      	lsls	r3, r3, #1
 8019180:	68fa      	ldr	r2, [r7, #12]
 8019182:	4413      	add	r3, r2
 8019184:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019186:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8019188:	e7b4      	b.n	80190f4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801918a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801918c:	693a      	ldr	r2, [r7, #16]
 801918e:	69bb      	ldr	r3, [r7, #24]
 8019190:	441a      	add	r2, r3
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8019196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019198:	2b1f      	cmp	r3, #31
 801919a:	d801      	bhi.n	80191a0 <create_name+0xcc>
 801919c:	2304      	movs	r3, #4
 801919e:	e000      	b.n	80191a2 <create_name+0xce>
 80191a0:	2300      	movs	r3, #0
 80191a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80191a6:	e011      	b.n	80191cc <create_name+0xf8>
		w = lfn[di - 1];
 80191a8:	697b      	ldr	r3, [r7, #20]
 80191aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80191ae:	3b01      	subs	r3, #1
 80191b0:	005b      	lsls	r3, r3, #1
 80191b2:	68fa      	ldr	r2, [r7, #12]
 80191b4:	4413      	add	r3, r2
 80191b6:	881b      	ldrh	r3, [r3, #0]
 80191b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80191ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191bc:	2b20      	cmp	r3, #32
 80191be:	d002      	beq.n	80191c6 <create_name+0xf2>
 80191c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80191c4:	d106      	bne.n	80191d4 <create_name+0x100>
		di--;
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	3b01      	subs	r3, #1
 80191ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d1ea      	bne.n	80191a8 <create_name+0xd4>
 80191d2:	e000      	b.n	80191d6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80191d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80191d6:	697b      	ldr	r3, [r7, #20]
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	68fa      	ldr	r2, [r7, #12]
 80191dc:	4413      	add	r3, r2
 80191de:	2200      	movs	r2, #0
 80191e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80191e2:	697b      	ldr	r3, [r7, #20]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d101      	bne.n	80191ec <create_name+0x118>
 80191e8:	2306      	movs	r3, #6
 80191ea:	e127      	b.n	801943c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	3324      	adds	r3, #36	@ 0x24
 80191f0:	220b      	movs	r2, #11
 80191f2:	2120      	movs	r1, #32
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7fe fbfe 	bl	80179f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80191fa:	2300      	movs	r3, #0
 80191fc:	61bb      	str	r3, [r7, #24]
 80191fe:	e002      	b.n	8019206 <create_name+0x132>
 8019200:	69bb      	ldr	r3, [r7, #24]
 8019202:	3301      	adds	r3, #1
 8019204:	61bb      	str	r3, [r7, #24]
 8019206:	69bb      	ldr	r3, [r7, #24]
 8019208:	005b      	lsls	r3, r3, #1
 801920a:	68fa      	ldr	r2, [r7, #12]
 801920c:	4413      	add	r3, r2
 801920e:	881b      	ldrh	r3, [r3, #0]
 8019210:	2b20      	cmp	r3, #32
 8019212:	d0f5      	beq.n	8019200 <create_name+0x12c>
 8019214:	69bb      	ldr	r3, [r7, #24]
 8019216:	005b      	lsls	r3, r3, #1
 8019218:	68fa      	ldr	r2, [r7, #12]
 801921a:	4413      	add	r3, r2
 801921c:	881b      	ldrh	r3, [r3, #0]
 801921e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019220:	d0ee      	beq.n	8019200 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d009      	beq.n	801923c <create_name+0x168>
 8019228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801922c:	f043 0303 	orr.w	r3, r3, #3
 8019230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8019234:	e002      	b.n	801923c <create_name+0x168>
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	3b01      	subs	r3, #1
 801923a:	617b      	str	r3, [r7, #20]
 801923c:	697b      	ldr	r3, [r7, #20]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d009      	beq.n	8019256 <create_name+0x182>
 8019242:	697b      	ldr	r3, [r7, #20]
 8019244:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019248:	3b01      	subs	r3, #1
 801924a:	005b      	lsls	r3, r3, #1
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	4413      	add	r3, r2
 8019250:	881b      	ldrh	r3, [r3, #0]
 8019252:	2b2e      	cmp	r3, #46	@ 0x2e
 8019254:	d1ef      	bne.n	8019236 <create_name+0x162>

	i = b = 0; ni = 8;
 8019256:	2300      	movs	r3, #0
 8019258:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801925c:	2300      	movs	r3, #0
 801925e:	623b      	str	r3, [r7, #32]
 8019260:	2308      	movs	r3, #8
 8019262:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8019264:	69bb      	ldr	r3, [r7, #24]
 8019266:	1c5a      	adds	r2, r3, #1
 8019268:	61ba      	str	r2, [r7, #24]
 801926a:	005b      	lsls	r3, r3, #1
 801926c:	68fa      	ldr	r2, [r7, #12]
 801926e:	4413      	add	r3, r2
 8019270:	881b      	ldrh	r3, [r3, #0]
 8019272:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8019274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019276:	2b00      	cmp	r3, #0
 8019278:	f000 8090 	beq.w	801939c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801927c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801927e:	2b20      	cmp	r3, #32
 8019280:	d006      	beq.n	8019290 <create_name+0x1bc>
 8019282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019284:	2b2e      	cmp	r3, #46	@ 0x2e
 8019286:	d10a      	bne.n	801929e <create_name+0x1ca>
 8019288:	69ba      	ldr	r2, [r7, #24]
 801928a:	697b      	ldr	r3, [r7, #20]
 801928c:	429a      	cmp	r2, r3
 801928e:	d006      	beq.n	801929e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019294:	f043 0303 	orr.w	r3, r3, #3
 8019298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801929c:	e07d      	b.n	801939a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801929e:	6a3a      	ldr	r2, [r7, #32]
 80192a0:	69fb      	ldr	r3, [r7, #28]
 80192a2:	429a      	cmp	r2, r3
 80192a4:	d203      	bcs.n	80192ae <create_name+0x1da>
 80192a6:	69ba      	ldr	r2, [r7, #24]
 80192a8:	697b      	ldr	r3, [r7, #20]
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d123      	bne.n	80192f6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80192ae:	69fb      	ldr	r3, [r7, #28]
 80192b0:	2b0b      	cmp	r3, #11
 80192b2:	d106      	bne.n	80192c2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80192b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80192b8:	f043 0303 	orr.w	r3, r3, #3
 80192bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80192c0:	e075      	b.n	80193ae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80192c2:	69ba      	ldr	r2, [r7, #24]
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	429a      	cmp	r2, r3
 80192c8:	d005      	beq.n	80192d6 <create_name+0x202>
 80192ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80192ce:	f043 0303 	orr.w	r3, r3, #3
 80192d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80192d6:	69ba      	ldr	r2, [r7, #24]
 80192d8:	697b      	ldr	r3, [r7, #20]
 80192da:	429a      	cmp	r2, r3
 80192dc:	d866      	bhi.n	80193ac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80192de:	697b      	ldr	r3, [r7, #20]
 80192e0:	61bb      	str	r3, [r7, #24]
 80192e2:	2308      	movs	r3, #8
 80192e4:	623b      	str	r3, [r7, #32]
 80192e6:	230b      	movs	r3, #11
 80192e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80192ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80192ee:	009b      	lsls	r3, r3, #2
 80192f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80192f4:	e051      	b.n	801939a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80192f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80192f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80192fa:	d914      	bls.n	8019326 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80192fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80192fe:	2100      	movs	r1, #0
 8019300:	4618      	mov	r0, r3
 8019302:	f001 f8e3 	bl	801a4cc <ff_convert>
 8019306:	4603      	mov	r3, r0
 8019308:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801930a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801930c:	2b00      	cmp	r3, #0
 801930e:	d004      	beq.n	801931a <create_name+0x246>
 8019310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019312:	3b80      	subs	r3, #128	@ 0x80
 8019314:	4a23      	ldr	r2, [pc, #140]	@ (80193a4 <create_name+0x2d0>)
 8019316:	5cd3      	ldrb	r3, [r2, r3]
 8019318:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801931a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801931e:	f043 0302 	orr.w	r3, r3, #2
 8019322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8019326:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019328:	2b00      	cmp	r3, #0
 801932a:	d007      	beq.n	801933c <create_name+0x268>
 801932c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801932e:	4619      	mov	r1, r3
 8019330:	481d      	ldr	r0, [pc, #116]	@ (80193a8 <create_name+0x2d4>)
 8019332:	f7fe fba2 	bl	8017a7a <chk_chr>
 8019336:	4603      	mov	r3, r0
 8019338:	2b00      	cmp	r3, #0
 801933a:	d008      	beq.n	801934e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801933c:	235f      	movs	r3, #95	@ 0x5f
 801933e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8019340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019344:	f043 0303 	orr.w	r3, r3, #3
 8019348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801934c:	e01b      	b.n	8019386 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801934e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019350:	2b40      	cmp	r3, #64	@ 0x40
 8019352:	d909      	bls.n	8019368 <create_name+0x294>
 8019354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019356:	2b5a      	cmp	r3, #90	@ 0x5a
 8019358:	d806      	bhi.n	8019368 <create_name+0x294>
					b |= 2;
 801935a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801935e:	f043 0302 	orr.w	r3, r3, #2
 8019362:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019366:	e00e      	b.n	8019386 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8019368:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801936a:	2b60      	cmp	r3, #96	@ 0x60
 801936c:	d90b      	bls.n	8019386 <create_name+0x2b2>
 801936e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019370:	2b7a      	cmp	r3, #122	@ 0x7a
 8019372:	d808      	bhi.n	8019386 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8019374:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019378:	f043 0301 	orr.w	r3, r3, #1
 801937c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019380:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019382:	3b20      	subs	r3, #32
 8019384:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8019386:	6a3b      	ldr	r3, [r7, #32]
 8019388:	1c5a      	adds	r2, r3, #1
 801938a:	623a      	str	r2, [r7, #32]
 801938c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801938e:	b2d1      	uxtb	r1, r2
 8019390:	687a      	ldr	r2, [r7, #4]
 8019392:	4413      	add	r3, r2
 8019394:	460a      	mov	r2, r1
 8019396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801939a:	e763      	b.n	8019264 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801939c:	bf00      	nop
 801939e:	e006      	b.n	80193ae <create_name+0x2da>
 80193a0:	080221b8 	.word	0x080221b8
 80193a4:	08022a18 	.word	0x08022a18
 80193a8:	080221c4 	.word	0x080221c4
			if (si > di) break;			/* No extension */
 80193ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80193b4:	2be5      	cmp	r3, #229	@ 0xe5
 80193b6:	d103      	bne.n	80193c0 <create_name+0x2ec>
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	2205      	movs	r2, #5
 80193bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80193c0:	69fb      	ldr	r3, [r7, #28]
 80193c2:	2b08      	cmp	r3, #8
 80193c4:	d104      	bne.n	80193d0 <create_name+0x2fc>
 80193c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193ca:	009b      	lsls	r3, r3, #2
 80193cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80193d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193d4:	f003 030c 	and.w	r3, r3, #12
 80193d8:	2b0c      	cmp	r3, #12
 80193da:	d005      	beq.n	80193e8 <create_name+0x314>
 80193dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193e0:	f003 0303 	and.w	r3, r3, #3
 80193e4:	2b03      	cmp	r3, #3
 80193e6:	d105      	bne.n	80193f4 <create_name+0x320>
 80193e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193ec:	f043 0302 	orr.w	r3, r3, #2
 80193f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80193f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193f8:	f003 0302 	and.w	r3, r3, #2
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d117      	bne.n	8019430 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8019400:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019404:	f003 0303 	and.w	r3, r3, #3
 8019408:	2b01      	cmp	r3, #1
 801940a:	d105      	bne.n	8019418 <create_name+0x344>
 801940c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019410:	f043 0310 	orr.w	r3, r3, #16
 8019414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8019418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801941c:	f003 030c 	and.w	r3, r3, #12
 8019420:	2b04      	cmp	r3, #4
 8019422:	d105      	bne.n	8019430 <create_name+0x35c>
 8019424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019428:	f043 0308 	orr.w	r3, r3, #8
 801942c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019436:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801943a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801943c:	4618      	mov	r0, r3
 801943e:	3728      	adds	r7, #40	@ 0x28
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}

08019444 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b086      	sub	sp, #24
 8019448:	af00      	add	r7, sp, #0
 801944a:	6078      	str	r0, [r7, #4]
 801944c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019458:	e002      	b.n	8019460 <follow_path+0x1c>
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	3301      	adds	r3, #1
 801945e:	603b      	str	r3, [r7, #0]
 8019460:	683b      	ldr	r3, [r7, #0]
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	2b2f      	cmp	r3, #47	@ 0x2f
 8019466:	d0f8      	beq.n	801945a <follow_path+0x16>
 8019468:	683b      	ldr	r3, [r7, #0]
 801946a:	781b      	ldrb	r3, [r3, #0]
 801946c:	2b5c      	cmp	r3, #92	@ 0x5c
 801946e:	d0f4      	beq.n	801945a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	2200      	movs	r2, #0
 8019474:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8019476:	683b      	ldr	r3, [r7, #0]
 8019478:	781b      	ldrb	r3, [r3, #0]
 801947a:	2b1f      	cmp	r3, #31
 801947c:	d80a      	bhi.n	8019494 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2280      	movs	r2, #128	@ 0x80
 8019482:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8019486:	2100      	movs	r1, #0
 8019488:	6878      	ldr	r0, [r7, #4]
 801948a:	f7ff f83e 	bl	801850a <dir_sdi>
 801948e:	4603      	mov	r3, r0
 8019490:	75fb      	strb	r3, [r7, #23]
 8019492:	e043      	b.n	801951c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019494:	463b      	mov	r3, r7
 8019496:	4619      	mov	r1, r3
 8019498:	6878      	ldr	r0, [r7, #4]
 801949a:	f7ff fe1b 	bl	80190d4 <create_name>
 801949e:	4603      	mov	r3, r0
 80194a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80194a2:	7dfb      	ldrb	r3, [r7, #23]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d134      	bne.n	8019512 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80194a8:	6878      	ldr	r0, [r7, #4]
 80194aa:	f7ff fb7c 	bl	8018ba6 <dir_find>
 80194ae:	4603      	mov	r3, r0
 80194b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80194b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80194ba:	7dfb      	ldrb	r3, [r7, #23]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d00a      	beq.n	80194d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80194c0:	7dfb      	ldrb	r3, [r7, #23]
 80194c2:	2b04      	cmp	r3, #4
 80194c4:	d127      	bne.n	8019516 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80194c6:	7afb      	ldrb	r3, [r7, #11]
 80194c8:	f003 0304 	and.w	r3, r3, #4
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d122      	bne.n	8019516 <follow_path+0xd2>
 80194d0:	2305      	movs	r3, #5
 80194d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80194d4:	e01f      	b.n	8019516 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80194d6:	7afb      	ldrb	r3, [r7, #11]
 80194d8:	f003 0304 	and.w	r3, r3, #4
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d11c      	bne.n	801951a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80194e0:	693b      	ldr	r3, [r7, #16]
 80194e2:	799b      	ldrb	r3, [r3, #6]
 80194e4:	f003 0310 	and.w	r3, r3, #16
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d102      	bne.n	80194f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80194ec:	2305      	movs	r3, #5
 80194ee:	75fb      	strb	r3, [r7, #23]
 80194f0:	e014      	b.n	801951c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	695b      	ldr	r3, [r3, #20]
 80194fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019500:	4413      	add	r3, r2
 8019502:	4619      	mov	r1, r3
 8019504:	68f8      	ldr	r0, [r7, #12]
 8019506:	f7ff f987 	bl	8018818 <ld_clust>
 801950a:	4602      	mov	r2, r0
 801950c:	693b      	ldr	r3, [r7, #16]
 801950e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019510:	e7c0      	b.n	8019494 <follow_path+0x50>
			if (res != FR_OK) break;
 8019512:	bf00      	nop
 8019514:	e002      	b.n	801951c <follow_path+0xd8>
				break;
 8019516:	bf00      	nop
 8019518:	e000      	b.n	801951c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801951a:	bf00      	nop
			}
		}
	}

	return res;
 801951c:	7dfb      	ldrb	r3, [r7, #23]
}
 801951e:	4618      	mov	r0, r3
 8019520:	3718      	adds	r7, #24
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}

08019526 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019526:	b480      	push	{r7}
 8019528:	b087      	sub	sp, #28
 801952a:	af00      	add	r7, sp, #0
 801952c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801952e:	f04f 33ff 	mov.w	r3, #4294967295
 8019532:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d031      	beq.n	80195a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	617b      	str	r3, [r7, #20]
 8019542:	e002      	b.n	801954a <get_ldnumber+0x24>
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	3301      	adds	r3, #1
 8019548:	617b      	str	r3, [r7, #20]
 801954a:	697b      	ldr	r3, [r7, #20]
 801954c:	781b      	ldrb	r3, [r3, #0]
 801954e:	2b1f      	cmp	r3, #31
 8019550:	d903      	bls.n	801955a <get_ldnumber+0x34>
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	781b      	ldrb	r3, [r3, #0]
 8019556:	2b3a      	cmp	r3, #58	@ 0x3a
 8019558:	d1f4      	bne.n	8019544 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	781b      	ldrb	r3, [r3, #0]
 801955e:	2b3a      	cmp	r3, #58	@ 0x3a
 8019560:	d11c      	bne.n	801959c <get_ldnumber+0x76>
			tp = *path;
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	1c5a      	adds	r2, r3, #1
 801956c:	60fa      	str	r2, [r7, #12]
 801956e:	781b      	ldrb	r3, [r3, #0]
 8019570:	3b30      	subs	r3, #48	@ 0x30
 8019572:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019574:	68bb      	ldr	r3, [r7, #8]
 8019576:	2b09      	cmp	r3, #9
 8019578:	d80e      	bhi.n	8019598 <get_ldnumber+0x72>
 801957a:	68fa      	ldr	r2, [r7, #12]
 801957c:	697b      	ldr	r3, [r7, #20]
 801957e:	429a      	cmp	r2, r3
 8019580:	d10a      	bne.n	8019598 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d107      	bne.n	8019598 <get_ldnumber+0x72>
					vol = (int)i;
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	3301      	adds	r3, #1
 8019590:	617b      	str	r3, [r7, #20]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	697a      	ldr	r2, [r7, #20]
 8019596:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019598:	693b      	ldr	r3, [r7, #16]
 801959a:	e002      	b.n	80195a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801959c:	2300      	movs	r3, #0
 801959e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80195a0:	693b      	ldr	r3, [r7, #16]
}
 80195a2:	4618      	mov	r0, r3
 80195a4:	371c      	adds	r7, #28
 80195a6:	46bd      	mov	sp, r7
 80195a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ac:	4770      	bx	lr
	...

080195b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b082      	sub	sp, #8
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
 80195b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2200      	movs	r2, #0
 80195be:	70da      	strb	r2, [r3, #3]
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f04f 32ff 	mov.w	r2, #4294967295
 80195c6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80195c8:	6839      	ldr	r1, [r7, #0]
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	f7fe fc20 	bl	8017e10 <move_window>
 80195d0:	4603      	mov	r3, r0
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d001      	beq.n	80195da <check_fs+0x2a>
 80195d6:	2304      	movs	r3, #4
 80195d8:	e038      	b.n	801964c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	3334      	adds	r3, #52	@ 0x34
 80195de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7fe f964 	bl	80178b0 <ld_word>
 80195e8:	4603      	mov	r3, r0
 80195ea:	461a      	mov	r2, r3
 80195ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80195f0:	429a      	cmp	r2, r3
 80195f2:	d001      	beq.n	80195f8 <check_fs+0x48>
 80195f4:	2303      	movs	r3, #3
 80195f6:	e029      	b.n	801964c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80195fe:	2be9      	cmp	r3, #233	@ 0xe9
 8019600:	d009      	beq.n	8019616 <check_fs+0x66>
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019608:	2beb      	cmp	r3, #235	@ 0xeb
 801960a:	d11e      	bne.n	801964a <check_fs+0x9a>
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8019612:	2b90      	cmp	r3, #144	@ 0x90
 8019614:	d119      	bne.n	801964a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	3334      	adds	r3, #52	@ 0x34
 801961a:	3336      	adds	r3, #54	@ 0x36
 801961c:	4618      	mov	r0, r3
 801961e:	f7fe f95f 	bl	80178e0 <ld_dword>
 8019622:	4603      	mov	r3, r0
 8019624:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8019628:	4a0a      	ldr	r2, [pc, #40]	@ (8019654 <check_fs+0xa4>)
 801962a:	4293      	cmp	r3, r2
 801962c:	d101      	bne.n	8019632 <check_fs+0x82>
 801962e:	2300      	movs	r3, #0
 8019630:	e00c      	b.n	801964c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	3334      	adds	r3, #52	@ 0x34
 8019636:	3352      	adds	r3, #82	@ 0x52
 8019638:	4618      	mov	r0, r3
 801963a:	f7fe f951 	bl	80178e0 <ld_dword>
 801963e:	4603      	mov	r3, r0
 8019640:	4a05      	ldr	r2, [pc, #20]	@ (8019658 <check_fs+0xa8>)
 8019642:	4293      	cmp	r3, r2
 8019644:	d101      	bne.n	801964a <check_fs+0x9a>
 8019646:	2300      	movs	r3, #0
 8019648:	e000      	b.n	801964c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801964a:	2302      	movs	r3, #2
}
 801964c:	4618      	mov	r0, r3
 801964e:	3708      	adds	r7, #8
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	00544146 	.word	0x00544146
 8019658:	33544146 	.word	0x33544146

0801965c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b096      	sub	sp, #88	@ 0x58
 8019660:	af00      	add	r7, sp, #0
 8019662:	60f8      	str	r0, [r7, #12]
 8019664:	60b9      	str	r1, [r7, #8]
 8019666:	4613      	mov	r3, r2
 8019668:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801966a:	68bb      	ldr	r3, [r7, #8]
 801966c:	2200      	movs	r2, #0
 801966e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019670:	68f8      	ldr	r0, [r7, #12]
 8019672:	f7ff ff58 	bl	8019526 <get_ldnumber>
 8019676:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801967a:	2b00      	cmp	r3, #0
 801967c:	da01      	bge.n	8019682 <find_volume+0x26>
 801967e:	230b      	movs	r3, #11
 8019680:	e230      	b.n	8019ae4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019682:	4aa1      	ldr	r2, [pc, #644]	@ (8019908 <find_volume+0x2ac>)
 8019684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801968a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801968e:	2b00      	cmp	r3, #0
 8019690:	d101      	bne.n	8019696 <find_volume+0x3a>
 8019692:	230c      	movs	r3, #12
 8019694:	e226      	b.n	8019ae4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019696:	68bb      	ldr	r3, [r7, #8]
 8019698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801969a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801969c:	79fb      	ldrb	r3, [r7, #7]
 801969e:	f023 0301 	bic.w	r3, r3, #1
 80196a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80196a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d01a      	beq.n	80196e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80196ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196ae:	785b      	ldrb	r3, [r3, #1]
 80196b0:	4618      	mov	r0, r3
 80196b2:	f7fe f85f 	bl	8017774 <disk_status>
 80196b6:	4603      	mov	r3, r0
 80196b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80196bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80196c0:	f003 0301 	and.w	r3, r3, #1
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d10c      	bne.n	80196e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80196c8:	79fb      	ldrb	r3, [r7, #7]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d007      	beq.n	80196de <find_volume+0x82>
 80196ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80196d2:	f003 0304 	and.w	r3, r3, #4
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d001      	beq.n	80196de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80196da:	230a      	movs	r3, #10
 80196dc:	e202      	b.n	8019ae4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80196de:	2300      	movs	r3, #0
 80196e0:	e200      	b.n	8019ae4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80196e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196e4:	2200      	movs	r2, #0
 80196e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80196e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196ea:	b2da      	uxtb	r2, r3
 80196ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80196f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196f2:	785b      	ldrb	r3, [r3, #1]
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7fe f857 	bl	80177a8 <disk_initialize>
 80196fa:	4603      	mov	r3, r0
 80196fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019700:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019704:	f003 0301 	and.w	r3, r3, #1
 8019708:	2b00      	cmp	r3, #0
 801970a:	d001      	beq.n	8019710 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801970c:	2303      	movs	r3, #3
 801970e:	e1e9      	b.n	8019ae4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019710:	79fb      	ldrb	r3, [r7, #7]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d007      	beq.n	8019726 <find_volume+0xca>
 8019716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801971a:	f003 0304 	and.w	r3, r3, #4
 801971e:	2b00      	cmp	r3, #0
 8019720:	d001      	beq.n	8019726 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8019722:	230a      	movs	r3, #10
 8019724:	e1de      	b.n	8019ae4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019726:	2300      	movs	r3, #0
 8019728:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801972a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801972c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801972e:	f7ff ff3f 	bl	80195b0 <check_fs>
 8019732:	4603      	mov	r3, r0
 8019734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019738:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801973c:	2b02      	cmp	r3, #2
 801973e:	d149      	bne.n	80197d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019740:	2300      	movs	r3, #0
 8019742:	643b      	str	r3, [r7, #64]	@ 0x40
 8019744:	e01e      	b.n	8019784 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019748:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801974c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801974e:	011b      	lsls	r3, r3, #4
 8019750:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8019754:	4413      	add	r3, r2
 8019756:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801975a:	3304      	adds	r3, #4
 801975c:	781b      	ldrb	r3, [r3, #0]
 801975e:	2b00      	cmp	r3, #0
 8019760:	d006      	beq.n	8019770 <find_volume+0x114>
 8019762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019764:	3308      	adds	r3, #8
 8019766:	4618      	mov	r0, r3
 8019768:	f7fe f8ba 	bl	80178e0 <ld_dword>
 801976c:	4602      	mov	r2, r0
 801976e:	e000      	b.n	8019772 <find_volume+0x116>
 8019770:	2200      	movs	r2, #0
 8019772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019774:	009b      	lsls	r3, r3, #2
 8019776:	3358      	adds	r3, #88	@ 0x58
 8019778:	443b      	add	r3, r7
 801977a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801977e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019780:	3301      	adds	r3, #1
 8019782:	643b      	str	r3, [r7, #64]	@ 0x40
 8019784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019786:	2b03      	cmp	r3, #3
 8019788:	d9dd      	bls.n	8019746 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801978a:	2300      	movs	r3, #0
 801978c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801978e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019790:	2b00      	cmp	r3, #0
 8019792:	d002      	beq.n	801979a <find_volume+0x13e>
 8019794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019796:	3b01      	subs	r3, #1
 8019798:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801979a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	3358      	adds	r3, #88	@ 0x58
 80197a0:	443b      	add	r3, r7
 80197a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80197a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80197a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d005      	beq.n	80197ba <find_volume+0x15e>
 80197ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80197b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80197b2:	f7ff fefd 	bl	80195b0 <check_fs>
 80197b6:	4603      	mov	r3, r0
 80197b8:	e000      	b.n	80197bc <find_volume+0x160>
 80197ba:	2303      	movs	r3, #3
 80197bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80197c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80197c4:	2b01      	cmp	r3, #1
 80197c6:	d905      	bls.n	80197d4 <find_volume+0x178>
 80197c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197ca:	3301      	adds	r3, #1
 80197cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80197ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197d0:	2b03      	cmp	r3, #3
 80197d2:	d9e2      	bls.n	801979a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80197d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80197d8:	2b04      	cmp	r3, #4
 80197da:	d101      	bne.n	80197e0 <find_volume+0x184>
 80197dc:	2301      	movs	r3, #1
 80197de:	e181      	b.n	8019ae4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80197e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	d901      	bls.n	80197ec <find_volume+0x190>
 80197e8:	230d      	movs	r3, #13
 80197ea:	e17b      	b.n	8019ae4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80197ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ee:	3334      	adds	r3, #52	@ 0x34
 80197f0:	330b      	adds	r3, #11
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7fe f85c 	bl	80178b0 <ld_word>
 80197f8:	4603      	mov	r3, r0
 80197fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197fe:	d001      	beq.n	8019804 <find_volume+0x1a8>
 8019800:	230d      	movs	r3, #13
 8019802:	e16f      	b.n	8019ae4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019806:	3334      	adds	r3, #52	@ 0x34
 8019808:	3316      	adds	r3, #22
 801980a:	4618      	mov	r0, r3
 801980c:	f7fe f850 	bl	80178b0 <ld_word>
 8019810:	4603      	mov	r3, r0
 8019812:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019816:	2b00      	cmp	r3, #0
 8019818:	d106      	bne.n	8019828 <find_volume+0x1cc>
 801981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801981c:	3334      	adds	r3, #52	@ 0x34
 801981e:	3324      	adds	r3, #36	@ 0x24
 8019820:	4618      	mov	r0, r3
 8019822:	f7fe f85d 	bl	80178e0 <ld_dword>
 8019826:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8019828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801982a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801982c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019830:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8019834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019836:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801983a:	789b      	ldrb	r3, [r3, #2]
 801983c:	2b01      	cmp	r3, #1
 801983e:	d005      	beq.n	801984c <find_volume+0x1f0>
 8019840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019842:	789b      	ldrb	r3, [r3, #2]
 8019844:	2b02      	cmp	r3, #2
 8019846:	d001      	beq.n	801984c <find_volume+0x1f0>
 8019848:	230d      	movs	r3, #13
 801984a:	e14b      	b.n	8019ae4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801984c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801984e:	789b      	ldrb	r3, [r3, #2]
 8019850:	461a      	mov	r2, r3
 8019852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019854:	fb02 f303 	mul.w	r3, r2, r3
 8019858:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801985c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019860:	461a      	mov	r2, r3
 8019862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019864:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019868:	895b      	ldrh	r3, [r3, #10]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d008      	beq.n	8019880 <find_volume+0x224>
 801986e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019870:	895b      	ldrh	r3, [r3, #10]
 8019872:	461a      	mov	r2, r3
 8019874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019876:	895b      	ldrh	r3, [r3, #10]
 8019878:	3b01      	subs	r3, #1
 801987a:	4013      	ands	r3, r2
 801987c:	2b00      	cmp	r3, #0
 801987e:	d001      	beq.n	8019884 <find_volume+0x228>
 8019880:	230d      	movs	r3, #13
 8019882:	e12f      	b.n	8019ae4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019886:	3334      	adds	r3, #52	@ 0x34
 8019888:	3311      	adds	r3, #17
 801988a:	4618      	mov	r0, r3
 801988c:	f7fe f810 	bl	80178b0 <ld_word>
 8019890:	4603      	mov	r3, r0
 8019892:	461a      	mov	r2, r3
 8019894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019896:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801989a:	891b      	ldrh	r3, [r3, #8]
 801989c:	f003 030f 	and.w	r3, r3, #15
 80198a0:	b29b      	uxth	r3, r3
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d001      	beq.n	80198aa <find_volume+0x24e>
 80198a6:	230d      	movs	r3, #13
 80198a8:	e11c      	b.n	8019ae4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80198aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ac:	3334      	adds	r3, #52	@ 0x34
 80198ae:	3313      	adds	r3, #19
 80198b0:	4618      	mov	r0, r3
 80198b2:	f7fd fffd 	bl	80178b0 <ld_word>
 80198b6:	4603      	mov	r3, r0
 80198b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80198ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d106      	bne.n	80198ce <find_volume+0x272>
 80198c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198c2:	3334      	adds	r3, #52	@ 0x34
 80198c4:	3320      	adds	r3, #32
 80198c6:	4618      	mov	r0, r3
 80198c8:	f7fe f80a 	bl	80178e0 <ld_dword>
 80198cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80198ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d0:	3334      	adds	r3, #52	@ 0x34
 80198d2:	330e      	adds	r3, #14
 80198d4:	4618      	mov	r0, r3
 80198d6:	f7fd ffeb 	bl	80178b0 <ld_word>
 80198da:	4603      	mov	r3, r0
 80198dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80198de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d101      	bne.n	80198e8 <find_volume+0x28c>
 80198e4:	230d      	movs	r3, #13
 80198e6:	e0fd      	b.n	8019ae4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80198e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80198ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198ec:	4413      	add	r3, r2
 80198ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80198f0:	8912      	ldrh	r2, [r2, #8]
 80198f2:	0912      	lsrs	r2, r2, #4
 80198f4:	b292      	uxth	r2, r2
 80198f6:	4413      	add	r3, r2
 80198f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80198fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80198fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198fe:	429a      	cmp	r2, r3
 8019900:	d204      	bcs.n	801990c <find_volume+0x2b0>
 8019902:	230d      	movs	r3, #13
 8019904:	e0ee      	b.n	8019ae4 <find_volume+0x488>
 8019906:	bf00      	nop
 8019908:	20001ab8 	.word	0x20001ab8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801990c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801990e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019910:	1ad3      	subs	r3, r2, r3
 8019912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019914:	8952      	ldrh	r2, [r2, #10]
 8019916:	fbb3 f3f2 	udiv	r3, r3, r2
 801991a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801991e:	2b00      	cmp	r3, #0
 8019920:	d101      	bne.n	8019926 <find_volume+0x2ca>
 8019922:	230d      	movs	r3, #13
 8019924:	e0de      	b.n	8019ae4 <find_volume+0x488>
		fmt = FS_FAT32;
 8019926:	2303      	movs	r3, #3
 8019928:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801992c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801992e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019932:	4293      	cmp	r3, r2
 8019934:	d802      	bhi.n	801993c <find_volume+0x2e0>
 8019936:	2302      	movs	r3, #2
 8019938:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801993e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019942:	4293      	cmp	r3, r2
 8019944:	d802      	bhi.n	801994c <find_volume+0x2f0>
 8019946:	2301      	movs	r3, #1
 8019948:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801994e:	1c9a      	adds	r2, r3, #2
 8019950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019952:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8019954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019956:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019958:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801995a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801995c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801995e:	441a      	add	r2, r3
 8019960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019962:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8019964:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019968:	441a      	add	r2, r3
 801996a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801996c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801996e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019972:	2b03      	cmp	r3, #3
 8019974:	d11e      	bne.n	80199b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019978:	3334      	adds	r3, #52	@ 0x34
 801997a:	332a      	adds	r3, #42	@ 0x2a
 801997c:	4618      	mov	r0, r3
 801997e:	f7fd ff97 	bl	80178b0 <ld_word>
 8019982:	4603      	mov	r3, r0
 8019984:	2b00      	cmp	r3, #0
 8019986:	d001      	beq.n	801998c <find_volume+0x330>
 8019988:	230d      	movs	r3, #13
 801998a:	e0ab      	b.n	8019ae4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801998e:	891b      	ldrh	r3, [r3, #8]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d001      	beq.n	8019998 <find_volume+0x33c>
 8019994:	230d      	movs	r3, #13
 8019996:	e0a5      	b.n	8019ae4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801999a:	3334      	adds	r3, #52	@ 0x34
 801999c:	332c      	adds	r3, #44	@ 0x2c
 801999e:	4618      	mov	r0, r3
 80199a0:	f7fd ff9e 	bl	80178e0 <ld_dword>
 80199a4:	4602      	mov	r2, r0
 80199a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199a8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80199aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199ac:	699b      	ldr	r3, [r3, #24]
 80199ae:	009b      	lsls	r3, r3, #2
 80199b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80199b2:	e01f      	b.n	80199f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80199b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199b6:	891b      	ldrh	r3, [r3, #8]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d101      	bne.n	80199c0 <find_volume+0x364>
 80199bc:	230d      	movs	r3, #13
 80199be:	e091      	b.n	8019ae4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80199c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199c6:	441a      	add	r2, r3
 80199c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199ca:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80199cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80199d0:	2b02      	cmp	r3, #2
 80199d2:	d103      	bne.n	80199dc <find_volume+0x380>
 80199d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199d6:	699b      	ldr	r3, [r3, #24]
 80199d8:	005b      	lsls	r3, r3, #1
 80199da:	e00a      	b.n	80199f2 <find_volume+0x396>
 80199dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199de:	699a      	ldr	r2, [r3, #24]
 80199e0:	4613      	mov	r3, r2
 80199e2:	005b      	lsls	r3, r3, #1
 80199e4:	4413      	add	r3, r2
 80199e6:	085a      	lsrs	r2, r3, #1
 80199e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199ea:	699b      	ldr	r3, [r3, #24]
 80199ec:	f003 0301 	and.w	r3, r3, #1
 80199f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80199f2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80199f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199f6:	69da      	ldr	r2, [r3, #28]
 80199f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80199fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80199fe:	0a5b      	lsrs	r3, r3, #9
 8019a00:	429a      	cmp	r2, r3
 8019a02:	d201      	bcs.n	8019a08 <find_volume+0x3ac>
 8019a04:	230d      	movs	r3, #13
 8019a06:	e06d      	b.n	8019ae4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a0e:	615a      	str	r2, [r3, #20]
 8019a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a12:	695a      	ldr	r2, [r3, #20]
 8019a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a16:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8019a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a1a:	2280      	movs	r2, #128	@ 0x80
 8019a1c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019a1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019a22:	2b03      	cmp	r3, #3
 8019a24:	d149      	bne.n	8019aba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a28:	3334      	adds	r3, #52	@ 0x34
 8019a2a:	3330      	adds	r3, #48	@ 0x30
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7fd ff3f 	bl	80178b0 <ld_word>
 8019a32:	4603      	mov	r3, r0
 8019a34:	2b01      	cmp	r3, #1
 8019a36:	d140      	bne.n	8019aba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a3a:	3301      	adds	r3, #1
 8019a3c:	4619      	mov	r1, r3
 8019a3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019a40:	f7fe f9e6 	bl	8017e10 <move_window>
 8019a44:	4603      	mov	r3, r0
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d137      	bne.n	8019aba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8019a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a52:	3334      	adds	r3, #52	@ 0x34
 8019a54:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019a58:	4618      	mov	r0, r3
 8019a5a:	f7fd ff29 	bl	80178b0 <ld_word>
 8019a5e:	4603      	mov	r3, r0
 8019a60:	461a      	mov	r2, r3
 8019a62:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019a66:	429a      	cmp	r2, r3
 8019a68:	d127      	bne.n	8019aba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a6c:	3334      	adds	r3, #52	@ 0x34
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f7fd ff36 	bl	80178e0 <ld_dword>
 8019a74:	4603      	mov	r3, r0
 8019a76:	4a1d      	ldr	r2, [pc, #116]	@ (8019aec <find_volume+0x490>)
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	d11e      	bne.n	8019aba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a7e:	3334      	adds	r3, #52	@ 0x34
 8019a80:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019a84:	4618      	mov	r0, r3
 8019a86:	f7fd ff2b 	bl	80178e0 <ld_dword>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	4a18      	ldr	r2, [pc, #96]	@ (8019af0 <find_volume+0x494>)
 8019a8e:	4293      	cmp	r3, r2
 8019a90:	d113      	bne.n	8019aba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a94:	3334      	adds	r3, #52	@ 0x34
 8019a96:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7fd ff20 	bl	80178e0 <ld_dword>
 8019aa0:	4602      	mov	r2, r0
 8019aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa8:	3334      	adds	r3, #52	@ 0x34
 8019aaa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7fd ff16 	bl	80178e0 <ld_dword>
 8019ab4:	4602      	mov	r2, r0
 8019ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ab8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019abc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019ac0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8019af4 <find_volume+0x498>)
 8019ac4:	881b      	ldrh	r3, [r3, #0]
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	b29a      	uxth	r2, r3
 8019aca:	4b0a      	ldr	r3, [pc, #40]	@ (8019af4 <find_volume+0x498>)
 8019acc:	801a      	strh	r2, [r3, #0]
 8019ace:	4b09      	ldr	r3, [pc, #36]	@ (8019af4 <find_volume+0x498>)
 8019ad0:	881a      	ldrh	r2, [r3, #0]
 8019ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ad4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8019ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ad8:	4a07      	ldr	r2, [pc, #28]	@ (8019af8 <find_volume+0x49c>)
 8019ada:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019adc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019ade:	f7fe f92f 	bl	8017d40 <clear_lock>
#endif
	return FR_OK;
 8019ae2:	2300      	movs	r3, #0
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3758      	adds	r7, #88	@ 0x58
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}
 8019aec:	41615252 	.word	0x41615252
 8019af0:	61417272 	.word	0x61417272
 8019af4:	20001abc 	.word	0x20001abc
 8019af8:	20001ae0 	.word	0x20001ae0

08019afc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b084      	sub	sp, #16
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
 8019b04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019b06:	2309      	movs	r3, #9
 8019b08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d01c      	beq.n	8019b4a <validate+0x4e>
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d018      	beq.n	8019b4a <validate+0x4e>
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	781b      	ldrb	r3, [r3, #0]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d013      	beq.n	8019b4a <validate+0x4e>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	889a      	ldrh	r2, [r3, #4]
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	88db      	ldrh	r3, [r3, #6]
 8019b2c:	429a      	cmp	r2, r3
 8019b2e:	d10c      	bne.n	8019b4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	785b      	ldrb	r3, [r3, #1]
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7fd fe1c 	bl	8017774 <disk_status>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	f003 0301 	and.w	r3, r3, #1
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d101      	bne.n	8019b4a <validate+0x4e>
			res = FR_OK;
 8019b46:	2300      	movs	r3, #0
 8019b48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019b4a:	7bfb      	ldrb	r3, [r7, #15]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d102      	bne.n	8019b56 <validate+0x5a>
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	e000      	b.n	8019b58 <validate+0x5c>
 8019b56:	2300      	movs	r3, #0
 8019b58:	683a      	ldr	r2, [r7, #0]
 8019b5a:	6013      	str	r3, [r2, #0]
	return res;
 8019b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b5e:	4618      	mov	r0, r3
 8019b60:	3710      	adds	r7, #16
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bd80      	pop	{r7, pc}
	...

08019b68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b088      	sub	sp, #32
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	60f8      	str	r0, [r7, #12]
 8019b70:	60b9      	str	r1, [r7, #8]
 8019b72:	4613      	mov	r3, r2
 8019b74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019b7a:	f107 0310 	add.w	r3, r7, #16
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7ff fcd1 	bl	8019526 <get_ldnumber>
 8019b84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	da01      	bge.n	8019b90 <f_mount+0x28>
 8019b8c:	230b      	movs	r3, #11
 8019b8e:	e02b      	b.n	8019be8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019b90:	4a17      	ldr	r2, [pc, #92]	@ (8019bf0 <f_mount+0x88>)
 8019b92:	69fb      	ldr	r3, [r7, #28]
 8019b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019b9a:	69bb      	ldr	r3, [r7, #24]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d005      	beq.n	8019bac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019ba0:	69b8      	ldr	r0, [r7, #24]
 8019ba2:	f7fe f8cd 	bl	8017d40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019ba6:	69bb      	ldr	r3, [r7, #24]
 8019ba8:	2200      	movs	r2, #0
 8019baa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d002      	beq.n	8019bb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019bb8:	68fa      	ldr	r2, [r7, #12]
 8019bba:	490d      	ldr	r1, [pc, #52]	@ (8019bf0 <f_mount+0x88>)
 8019bbc:	69fb      	ldr	r3, [r7, #28]
 8019bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d002      	beq.n	8019bce <f_mount+0x66>
 8019bc8:	79fb      	ldrb	r3, [r7, #7]
 8019bca:	2b01      	cmp	r3, #1
 8019bcc:	d001      	beq.n	8019bd2 <f_mount+0x6a>
 8019bce:	2300      	movs	r3, #0
 8019bd0:	e00a      	b.n	8019be8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019bd2:	f107 010c 	add.w	r1, r7, #12
 8019bd6:	f107 0308 	add.w	r3, r7, #8
 8019bda:	2200      	movs	r2, #0
 8019bdc:	4618      	mov	r0, r3
 8019bde:	f7ff fd3d 	bl	801965c <find_volume>
 8019be2:	4603      	mov	r3, r0
 8019be4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3720      	adds	r7, #32
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	20001ab8 	.word	0x20001ab8

08019bf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b09a      	sub	sp, #104	@ 0x68
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	60f8      	str	r0, [r7, #12]
 8019bfc:	60b9      	str	r1, [r7, #8]
 8019bfe:	4613      	mov	r3, r2
 8019c00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d101      	bne.n	8019c0c <f_open+0x18>
 8019c08:	2309      	movs	r3, #9
 8019c0a:	e1a9      	b.n	8019f60 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019c0c:	79fb      	ldrb	r3, [r7, #7]
 8019c0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019c12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019c14:	79fa      	ldrb	r2, [r7, #7]
 8019c16:	f107 0114 	add.w	r1, r7, #20
 8019c1a:	f107 0308 	add.w	r3, r7, #8
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f7ff fd1c 	bl	801965c <find_volume>
 8019c24:	4603      	mov	r3, r0
 8019c26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8019c2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	f040 818d 	bne.w	8019f4e <f_open+0x35a>
		dj.obj.fs = fs;
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019c38:	68ba      	ldr	r2, [r7, #8]
 8019c3a:	f107 0318 	add.w	r3, r7, #24
 8019c3e:	4611      	mov	r1, r2
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7ff fbff 	bl	8019444 <follow_path>
 8019c46:	4603      	mov	r3, r0
 8019c48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d118      	bne.n	8019c86 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019c54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019c58:	b25b      	sxtb	r3, r3
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	da03      	bge.n	8019c66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8019c5e:	2306      	movs	r3, #6
 8019c60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019c64:	e00f      	b.n	8019c86 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019c66:	79fb      	ldrb	r3, [r7, #7]
 8019c68:	2b01      	cmp	r3, #1
 8019c6a:	bf8c      	ite	hi
 8019c6c:	2301      	movhi	r3, #1
 8019c6e:	2300      	movls	r3, #0
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	461a      	mov	r2, r3
 8019c74:	f107 0318 	add.w	r3, r7, #24
 8019c78:	4611      	mov	r1, r2
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7fd ff18 	bl	8017ab0 <chk_lock>
 8019c80:	4603      	mov	r3, r0
 8019c82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019c86:	79fb      	ldrb	r3, [r7, #7]
 8019c88:	f003 031c 	and.w	r3, r3, #28
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d07f      	beq.n	8019d90 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8019c90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d017      	beq.n	8019cc8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019c98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019c9c:	2b04      	cmp	r3, #4
 8019c9e:	d10e      	bne.n	8019cbe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019ca0:	f7fd ff62 	bl	8017b68 <enq_lock>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d006      	beq.n	8019cb8 <f_open+0xc4>
 8019caa:	f107 0318 	add.w	r3, r7, #24
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f7ff f83a 	bl	8018d28 <dir_register>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	e000      	b.n	8019cba <f_open+0xc6>
 8019cb8:	2312      	movs	r3, #18
 8019cba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019cbe:	79fb      	ldrb	r3, [r7, #7]
 8019cc0:	f043 0308 	orr.w	r3, r3, #8
 8019cc4:	71fb      	strb	r3, [r7, #7]
 8019cc6:	e010      	b.n	8019cea <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019cc8:	7fbb      	ldrb	r3, [r7, #30]
 8019cca:	f003 0311 	and.w	r3, r3, #17
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d003      	beq.n	8019cda <f_open+0xe6>
					res = FR_DENIED;
 8019cd2:	2307      	movs	r3, #7
 8019cd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019cd8:	e007      	b.n	8019cea <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019cda:	79fb      	ldrb	r3, [r7, #7]
 8019cdc:	f003 0304 	and.w	r3, r3, #4
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d002      	beq.n	8019cea <f_open+0xf6>
 8019ce4:	2308      	movs	r3, #8
 8019ce6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019cea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d168      	bne.n	8019dc4 <f_open+0x1d0>
 8019cf2:	79fb      	ldrb	r3, [r7, #7]
 8019cf4:	f003 0308 	and.w	r3, r3, #8
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d063      	beq.n	8019dc4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8019cfc:	f7f8 fc50 	bl	80125a0 <get_fattime>
 8019d00:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d04:	330e      	adds	r3, #14
 8019d06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7fd fe27 	bl	801795c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d10:	3316      	adds	r3, #22
 8019d12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7fd fe21 	bl	801795c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d1c:	330b      	adds	r3, #11
 8019d1e:	2220      	movs	r2, #32
 8019d20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019d26:	4611      	mov	r1, r2
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f7fe fd75 	bl	8018818 <ld_clust>
 8019d2e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019d34:	2200      	movs	r2, #0
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7fe fd8d 	bl	8018856 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d3e:	331c      	adds	r3, #28
 8019d40:	2100      	movs	r1, #0
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7fd fe0a 	bl	801795c <st_dword>
					fs->wflag = 1;
 8019d48:	697b      	ldr	r3, [r7, #20]
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d037      	beq.n	8019dc4 <f_open+0x1d0>
						dw = fs->winsect;
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d58:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019d5a:	f107 0318 	add.w	r3, r7, #24
 8019d5e:	2200      	movs	r2, #0
 8019d60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7fe faa0 	bl	80182a8 <remove_chain>
 8019d68:	4603      	mov	r3, r0
 8019d6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8019d6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d126      	bne.n	8019dc4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8019d76:	697b      	ldr	r3, [r7, #20]
 8019d78:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7fe f848 	bl	8017e10 <move_window>
 8019d80:	4603      	mov	r3, r0
 8019d82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019d8a:	3a01      	subs	r2, #1
 8019d8c:	611a      	str	r2, [r3, #16]
 8019d8e:	e019      	b.n	8019dc4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019d90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d115      	bne.n	8019dc4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019d98:	7fbb      	ldrb	r3, [r7, #30]
 8019d9a:	f003 0310 	and.w	r3, r3, #16
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d003      	beq.n	8019daa <f_open+0x1b6>
					res = FR_NO_FILE;
 8019da2:	2304      	movs	r3, #4
 8019da4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019da8:	e00c      	b.n	8019dc4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019daa:	79fb      	ldrb	r3, [r7, #7]
 8019dac:	f003 0302 	and.w	r3, r3, #2
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d007      	beq.n	8019dc4 <f_open+0x1d0>
 8019db4:	7fbb      	ldrb	r3, [r7, #30]
 8019db6:	f003 0301 	and.w	r3, r3, #1
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d002      	beq.n	8019dc4 <f_open+0x1d0>
						res = FR_DENIED;
 8019dbe:	2307      	movs	r3, #7
 8019dc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019dc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d126      	bne.n	8019e1a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019dcc:	79fb      	ldrb	r3, [r7, #7]
 8019dce:	f003 0308 	and.w	r3, r3, #8
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d003      	beq.n	8019dde <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8019dd6:	79fb      	ldrb	r3, [r7, #7]
 8019dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ddc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019dde:	697b      	ldr	r3, [r7, #20]
 8019de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8019de6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019dec:	79fb      	ldrb	r3, [r7, #7]
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	bf8c      	ite	hi
 8019df2:	2301      	movhi	r3, #1
 8019df4:	2300      	movls	r3, #0
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	461a      	mov	r2, r3
 8019dfa:	f107 0318 	add.w	r3, r7, #24
 8019dfe:	4611      	mov	r1, r2
 8019e00:	4618      	mov	r0, r3
 8019e02:	f7fd fed3 	bl	8017bac <inc_lock>
 8019e06:	4602      	mov	r2, r0
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	691b      	ldr	r3, [r3, #16]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d102      	bne.n	8019e1a <f_open+0x226>
 8019e14:	2302      	movs	r3, #2
 8019e16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	f040 8095 	bne.w	8019f4e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019e24:	697b      	ldr	r3, [r7, #20]
 8019e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019e28:	4611      	mov	r1, r2
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f7fe fcf4 	bl	8018818 <ld_clust>
 8019e30:	4602      	mov	r2, r0
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e38:	331c      	adds	r3, #28
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fd fd50 	bl	80178e0 <ld_dword>
 8019e40:	4602      	mov	r2, r0
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	2200      	movs	r2, #0
 8019e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019e4c:	697a      	ldr	r2, [r7, #20]
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	88da      	ldrh	r2, [r3, #6]
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	79fa      	ldrb	r2, [r7, #7]
 8019e5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	2200      	movs	r2, #0
 8019e64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	3330      	adds	r3, #48	@ 0x30
 8019e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019e7a:	2100      	movs	r1, #0
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f7fd fdba 	bl	80179f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019e82:	79fb      	ldrb	r3, [r7, #7]
 8019e84:	f003 0320 	and.w	r3, r3, #32
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d060      	beq.n	8019f4e <f_open+0x35a>
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d05c      	beq.n	8019f4e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	68da      	ldr	r2, [r3, #12]
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019e9c:	697b      	ldr	r3, [r7, #20]
 8019e9e:	895b      	ldrh	r3, [r3, #10]
 8019ea0:	025b      	lsls	r3, r3, #9
 8019ea2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	689b      	ldr	r3, [r3, #8]
 8019ea8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	68db      	ldr	r3, [r3, #12]
 8019eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019eb0:	e016      	b.n	8019ee0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f7fe f865 	bl	8017f86 <get_fat>
 8019ebc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019ec0:	2b01      	cmp	r3, #1
 8019ec2:	d802      	bhi.n	8019eca <f_open+0x2d6>
 8019ec4:	2302      	movs	r3, #2
 8019ec6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ed0:	d102      	bne.n	8019ed8 <f_open+0x2e4>
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019ed8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019edc:	1ad3      	subs	r3, r2, r3
 8019ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d103      	bne.n	8019ef0 <f_open+0x2fc>
 8019ee8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d8e0      	bhi.n	8019eb2 <f_open+0x2be>
				}
				fp->clust = clst;
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019ef4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019ef6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d127      	bne.n	8019f4e <f_open+0x35a>
 8019efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d022      	beq.n	8019f4e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f7fe f81b 	bl	8017f48 <clust2sect>
 8019f12:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d103      	bne.n	8019f22 <f_open+0x32e>
						res = FR_INT_ERR;
 8019f1a:	2302      	movs	r3, #2
 8019f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019f20:	e015      	b.n	8019f4e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f24:	0a5a      	lsrs	r2, r3, #9
 8019f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f28:	441a      	add	r2, r3
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019f2e:	697b      	ldr	r3, [r7, #20]
 8019f30:	7858      	ldrb	r0, [r3, #1]
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	6a1a      	ldr	r2, [r3, #32]
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	f7fd fc59 	bl	80177f4 <disk_read>
 8019f42:	4603      	mov	r3, r0
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d002      	beq.n	8019f4e <f_open+0x35a>
 8019f48:	2301      	movs	r3, #1
 8019f4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d002      	beq.n	8019f5c <f_open+0x368>
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	2200      	movs	r2, #0
 8019f5a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019f5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3768      	adds	r7, #104	@ 0x68
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b08c      	sub	sp, #48	@ 0x30
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	60f8      	str	r0, [r7, #12]
 8019f70:	60b9      	str	r1, [r7, #8]
 8019f72:	607a      	str	r2, [r7, #4]
 8019f74:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	f107 0210 	add.w	r2, r7, #16
 8019f86:	4611      	mov	r1, r2
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f7ff fdb7 	bl	8019afc <validate>
 8019f8e:	4603      	mov	r3, r0
 8019f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019f94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d107      	bne.n	8019fac <f_write+0x44>
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	7d5b      	ldrb	r3, [r3, #21]
 8019fa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d002      	beq.n	8019fb2 <f_write+0x4a>
 8019fac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019fb0:	e14b      	b.n	801a24a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	7d1b      	ldrb	r3, [r3, #20]
 8019fb6:	f003 0302 	and.w	r3, r3, #2
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d101      	bne.n	8019fc2 <f_write+0x5a>
 8019fbe:	2307      	movs	r3, #7
 8019fc0:	e143      	b.n	801a24a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	699a      	ldr	r2, [r3, #24]
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	441a      	add	r2, r3
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	699b      	ldr	r3, [r3, #24]
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	f080 812d 	bcs.w	801a22e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	699b      	ldr	r3, [r3, #24]
 8019fd8:	43db      	mvns	r3, r3
 8019fda:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019fdc:	e127      	b.n	801a22e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	699b      	ldr	r3, [r3, #24]
 8019fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	f040 80e3 	bne.w	801a1b2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	699b      	ldr	r3, [r3, #24]
 8019ff0:	0a5b      	lsrs	r3, r3, #9
 8019ff2:	693a      	ldr	r2, [r7, #16]
 8019ff4:	8952      	ldrh	r2, [r2, #10]
 8019ff6:	3a01      	subs	r2, #1
 8019ff8:	4013      	ands	r3, r2
 8019ffa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019ffc:	69bb      	ldr	r3, [r7, #24]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d143      	bne.n	801a08a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	699b      	ldr	r3, [r3, #24]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d10c      	bne.n	801a024 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	689b      	ldr	r3, [r3, #8]
 801a00e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a012:	2b00      	cmp	r3, #0
 801a014:	d11a      	bne.n	801a04c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	2100      	movs	r1, #0
 801a01a:	4618      	mov	r0, r3
 801a01c:	f7fe f9a9 	bl	8018372 <create_chain>
 801a020:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a022:	e013      	b.n	801a04c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d007      	beq.n	801a03c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	699b      	ldr	r3, [r3, #24]
 801a030:	4619      	mov	r1, r3
 801a032:	68f8      	ldr	r0, [r7, #12]
 801a034:	f7fe fa35 	bl	80184a2 <clmt_clust>
 801a038:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a03a:	e007      	b.n	801a04c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a03c:	68fa      	ldr	r2, [r7, #12]
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	69db      	ldr	r3, [r3, #28]
 801a042:	4619      	mov	r1, r3
 801a044:	4610      	mov	r0, r2
 801a046:	f7fe f994 	bl	8018372 <create_chain>
 801a04a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a04e:	2b00      	cmp	r3, #0
 801a050:	f000 80f2 	beq.w	801a238 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a056:	2b01      	cmp	r3, #1
 801a058:	d104      	bne.n	801a064 <f_write+0xfc>
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2202      	movs	r2, #2
 801a05e:	755a      	strb	r2, [r3, #21]
 801a060:	2302      	movs	r3, #2
 801a062:	e0f2      	b.n	801a24a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a06a:	d104      	bne.n	801a076 <f_write+0x10e>
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	2201      	movs	r2, #1
 801a070:	755a      	strb	r2, [r3, #21]
 801a072:	2301      	movs	r3, #1
 801a074:	e0e9      	b.n	801a24a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a07a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	689b      	ldr	r3, [r3, #8]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d102      	bne.n	801a08a <f_write+0x122>
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a088:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	7d1b      	ldrb	r3, [r3, #20]
 801a08e:	b25b      	sxtb	r3, r3
 801a090:	2b00      	cmp	r3, #0
 801a092:	da18      	bge.n	801a0c6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a094:	693b      	ldr	r3, [r7, #16]
 801a096:	7858      	ldrb	r0, [r3, #1]
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	6a1a      	ldr	r2, [r3, #32]
 801a0a2:	2301      	movs	r3, #1
 801a0a4:	f7fd fbc6 	bl	8017834 <disk_write>
 801a0a8:	4603      	mov	r3, r0
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d004      	beq.n	801a0b8 <f_write+0x150>
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	2201      	movs	r2, #1
 801a0b2:	755a      	strb	r2, [r3, #21]
 801a0b4:	2301      	movs	r3, #1
 801a0b6:	e0c8      	b.n	801a24a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	7d1b      	ldrb	r3, [r3, #20]
 801a0bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a0c0:	b2da      	uxtb	r2, r3
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a0c6:	693a      	ldr	r2, [r7, #16]
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	69db      	ldr	r3, [r3, #28]
 801a0cc:	4619      	mov	r1, r3
 801a0ce:	4610      	mov	r0, r2
 801a0d0:	f7fd ff3a 	bl	8017f48 <clust2sect>
 801a0d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a0d6:	697b      	ldr	r3, [r7, #20]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d104      	bne.n	801a0e6 <f_write+0x17e>
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	2202      	movs	r2, #2
 801a0e0:	755a      	strb	r2, [r3, #21]
 801a0e2:	2302      	movs	r3, #2
 801a0e4:	e0b1      	b.n	801a24a <f_write+0x2e2>
			sect += csect;
 801a0e6:	697a      	ldr	r2, [r7, #20]
 801a0e8:	69bb      	ldr	r3, [r7, #24]
 801a0ea:	4413      	add	r3, r2
 801a0ec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	0a5b      	lsrs	r3, r3, #9
 801a0f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a0f4:	6a3b      	ldr	r3, [r7, #32]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d03c      	beq.n	801a174 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a0fa:	69ba      	ldr	r2, [r7, #24]
 801a0fc:	6a3b      	ldr	r3, [r7, #32]
 801a0fe:	4413      	add	r3, r2
 801a100:	693a      	ldr	r2, [r7, #16]
 801a102:	8952      	ldrh	r2, [r2, #10]
 801a104:	4293      	cmp	r3, r2
 801a106:	d905      	bls.n	801a114 <f_write+0x1ac>
					cc = fs->csize - csect;
 801a108:	693b      	ldr	r3, [r7, #16]
 801a10a:	895b      	ldrh	r3, [r3, #10]
 801a10c:	461a      	mov	r2, r3
 801a10e:	69bb      	ldr	r3, [r7, #24]
 801a110:	1ad3      	subs	r3, r2, r3
 801a112:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a114:	693b      	ldr	r3, [r7, #16]
 801a116:	7858      	ldrb	r0, [r3, #1]
 801a118:	6a3b      	ldr	r3, [r7, #32]
 801a11a:	697a      	ldr	r2, [r7, #20]
 801a11c:	69f9      	ldr	r1, [r7, #28]
 801a11e:	f7fd fb89 	bl	8017834 <disk_write>
 801a122:	4603      	mov	r3, r0
 801a124:	2b00      	cmp	r3, #0
 801a126:	d004      	beq.n	801a132 <f_write+0x1ca>
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	2201      	movs	r2, #1
 801a12c:	755a      	strb	r2, [r3, #21]
 801a12e:	2301      	movs	r3, #1
 801a130:	e08b      	b.n	801a24a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	6a1a      	ldr	r2, [r3, #32]
 801a136:	697b      	ldr	r3, [r7, #20]
 801a138:	1ad3      	subs	r3, r2, r3
 801a13a:	6a3a      	ldr	r2, [r7, #32]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d915      	bls.n	801a16c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	6a1a      	ldr	r2, [r3, #32]
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	1ad3      	subs	r3, r2, r3
 801a14e:	025b      	lsls	r3, r3, #9
 801a150:	69fa      	ldr	r2, [r7, #28]
 801a152:	4413      	add	r3, r2
 801a154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a158:	4619      	mov	r1, r3
 801a15a:	f7fd fc2b 	bl	80179b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	7d1b      	ldrb	r3, [r3, #20]
 801a162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a166:	b2da      	uxtb	r2, r3
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a16c:	6a3b      	ldr	r3, [r7, #32]
 801a16e:	025b      	lsls	r3, r3, #9
 801a170:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801a172:	e03f      	b.n	801a1f4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	6a1b      	ldr	r3, [r3, #32]
 801a178:	697a      	ldr	r2, [r7, #20]
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d016      	beq.n	801a1ac <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	699a      	ldr	r2, [r3, #24]
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a186:	429a      	cmp	r2, r3
 801a188:	d210      	bcs.n	801a1ac <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a18a:	693b      	ldr	r3, [r7, #16]
 801a18c:	7858      	ldrb	r0, [r3, #1]
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a194:	2301      	movs	r3, #1
 801a196:	697a      	ldr	r2, [r7, #20]
 801a198:	f7fd fb2c 	bl	80177f4 <disk_read>
 801a19c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d004      	beq.n	801a1ac <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	2201      	movs	r2, #1
 801a1a6:	755a      	strb	r2, [r3, #21]
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	e04e      	b.n	801a24a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	697a      	ldr	r2, [r7, #20]
 801a1b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	699b      	ldr	r3, [r3, #24]
 801a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a1ba:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801a1be:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	429a      	cmp	r2, r3
 801a1c6:	d901      	bls.n	801a1cc <f_write+0x264>
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	699b      	ldr	r3, [r3, #24]
 801a1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a1da:	4413      	add	r3, r2
 801a1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1de:	69f9      	ldr	r1, [r7, #28]
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7fd fbe7 	bl	80179b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	7d1b      	ldrb	r3, [r3, #20]
 801a1ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a1ee:	b2da      	uxtb	r2, r3
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a1f4:	69fa      	ldr	r2, [r7, #28]
 801a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f8:	4413      	add	r3, r2
 801a1fa:	61fb      	str	r3, [r7, #28]
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	699a      	ldr	r2, [r3, #24]
 801a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a202:	441a      	add	r2, r3
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	619a      	str	r2, [r3, #24]
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	68da      	ldr	r2, [r3, #12]
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	699b      	ldr	r3, [r3, #24]
 801a210:	429a      	cmp	r2, r3
 801a212:	bf38      	it	cc
 801a214:	461a      	movcc	r2, r3
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	60da      	str	r2, [r3, #12]
 801a21a:	683b      	ldr	r3, [r7, #0]
 801a21c:	681a      	ldr	r2, [r3, #0]
 801a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a220:	441a      	add	r2, r3
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	601a      	str	r2, [r3, #0]
 801a226:	687a      	ldr	r2, [r7, #4]
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	1ad3      	subs	r3, r2, r3
 801a22c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	2b00      	cmp	r3, #0
 801a232:	f47f aed4 	bne.w	8019fde <f_write+0x76>
 801a236:	e000      	b.n	801a23a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a238:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	7d1b      	ldrb	r3, [r3, #20]
 801a23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a242:	b2da      	uxtb	r2, r3
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a248:	2300      	movs	r3, #0
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	3730      	adds	r7, #48	@ 0x30
 801a24e:	46bd      	mov	sp, r7
 801a250:	bd80      	pop	{r7, pc}

0801a252 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a252:	b580      	push	{r7, lr}
 801a254:	b086      	sub	sp, #24
 801a256:	af00      	add	r7, sp, #0
 801a258:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	f107 0208 	add.w	r2, r7, #8
 801a260:	4611      	mov	r1, r2
 801a262:	4618      	mov	r0, r3
 801a264:	f7ff fc4a 	bl	8019afc <validate>
 801a268:	4603      	mov	r3, r0
 801a26a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a26c:	7dfb      	ldrb	r3, [r7, #23]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d168      	bne.n	801a344 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	7d1b      	ldrb	r3, [r3, #20]
 801a276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d062      	beq.n	801a344 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	7d1b      	ldrb	r3, [r3, #20]
 801a282:	b25b      	sxtb	r3, r3
 801a284:	2b00      	cmp	r3, #0
 801a286:	da15      	bge.n	801a2b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	7858      	ldrb	r0, [r3, #1]
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	6a1a      	ldr	r2, [r3, #32]
 801a296:	2301      	movs	r3, #1
 801a298:	f7fd facc 	bl	8017834 <disk_write>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d001      	beq.n	801a2a6 <f_sync+0x54>
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	e04f      	b.n	801a346 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	7d1b      	ldrb	r3, [r3, #20]
 801a2aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a2ae:	b2da      	uxtb	r2, r3
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a2b4:	f7f8 f974 	bl	80125a0 <get_fattime>
 801a2b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a2ba:	68ba      	ldr	r2, [r7, #8]
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a2c0:	4619      	mov	r1, r3
 801a2c2:	4610      	mov	r0, r2
 801a2c4:	f7fd fda4 	bl	8017e10 <move_window>
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a2cc:	7dfb      	ldrb	r3, [r7, #23]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d138      	bne.n	801a344 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	330b      	adds	r3, #11
 801a2dc:	781a      	ldrb	r2, [r3, #0]
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	330b      	adds	r3, #11
 801a2e2:	f042 0220 	orr.w	r2, r2, #32
 801a2e6:	b2d2      	uxtb	r2, r2
 801a2e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	6818      	ldr	r0, [r3, #0]
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	689b      	ldr	r3, [r3, #8]
 801a2f2:	461a      	mov	r2, r3
 801a2f4:	68f9      	ldr	r1, [r7, #12]
 801a2f6:	f7fe faae 	bl	8018856 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	f103 021c 	add.w	r2, r3, #28
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	68db      	ldr	r3, [r3, #12]
 801a304:	4619      	mov	r1, r3
 801a306:	4610      	mov	r0, r2
 801a308:	f7fd fb28 	bl	801795c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	3316      	adds	r3, #22
 801a310:	6939      	ldr	r1, [r7, #16]
 801a312:	4618      	mov	r0, r3
 801a314:	f7fd fb22 	bl	801795c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	3312      	adds	r3, #18
 801a31c:	2100      	movs	r1, #0
 801a31e:	4618      	mov	r0, r3
 801a320:	f7fd fb01 	bl	8017926 <st_word>
					fs->wflag = 1;
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	2201      	movs	r2, #1
 801a328:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7fd fd9d 	bl	8017e6c <sync_fs>
 801a332:	4603      	mov	r3, r0
 801a334:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	7d1b      	ldrb	r3, [r3, #20]
 801a33a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a33e:	b2da      	uxtb	r2, r3
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a344:	7dfb      	ldrb	r3, [r7, #23]
}
 801a346:	4618      	mov	r0, r3
 801a348:	3718      	adds	r7, #24
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}

0801a34e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a34e:	b580      	push	{r7, lr}
 801a350:	b084      	sub	sp, #16
 801a352:	af00      	add	r7, sp, #0
 801a354:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a356:	6878      	ldr	r0, [r7, #4]
 801a358:	f7ff ff7b 	bl	801a252 <f_sync>
 801a35c:	4603      	mov	r3, r0
 801a35e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a360:	7bfb      	ldrb	r3, [r7, #15]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d118      	bne.n	801a398 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	f107 0208 	add.w	r2, r7, #8
 801a36c:	4611      	mov	r1, r2
 801a36e:	4618      	mov	r0, r3
 801a370:	f7ff fbc4 	bl	8019afc <validate>
 801a374:	4603      	mov	r3, r0
 801a376:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a378:	7bfb      	ldrb	r3, [r7, #15]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d10c      	bne.n	801a398 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	691b      	ldr	r3, [r3, #16]
 801a382:	4618      	mov	r0, r3
 801a384:	f7fd fca0 	bl	8017cc8 <dec_lock>
 801a388:	4603      	mov	r3, r0
 801a38a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a38c:	7bfb      	ldrb	r3, [r7, #15]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d102      	bne.n	801a398 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	2200      	movs	r2, #0
 801a396:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a398:	7bfb      	ldrb	r3, [r7, #15]
}
 801a39a:	4618      	mov	r0, r3
 801a39c:	3710      	adds	r7, #16
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	bd80      	pop	{r7, pc}

0801a3a2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801a3a2:	b580      	push	{r7, lr}
 801a3a4:	b090      	sub	sp, #64	@ 0x40
 801a3a6:	af00      	add	r7, sp, #0
 801a3a8:	6078      	str	r0, [r7, #4]
 801a3aa:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801a3ac:	f107 0108 	add.w	r1, r7, #8
 801a3b0:	1d3b      	adds	r3, r7, #4
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f7ff f951 	bl	801965c <find_volume>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801a3c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d11f      	bne.n	801a408 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801a3c8:	687a      	ldr	r2, [r7, #4]
 801a3ca:	f107 0308 	add.w	r3, r7, #8
 801a3ce:	4611      	mov	r1, r2
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f7ff f837 	bl	8019444 <follow_path>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801a3dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d111      	bne.n	801a408 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801a3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a3e8:	b25b      	sxtb	r3, r3
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	da03      	bge.n	801a3f6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801a3ee:	2306      	movs	r3, #6
 801a3f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801a3f4:	e008      	b.n	801a408 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d005      	beq.n	801a408 <f_stat+0x66>
 801a3fc:	f107 0308 	add.w	r3, r7, #8
 801a400:	6839      	ldr	r1, [r7, #0]
 801a402:	4618      	mov	r0, r3
 801a404:	f7fe fd88 	bl	8018f18 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801a408:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	3740      	adds	r7, #64	@ 0x40
 801a410:	46bd      	mov	sp, r7
 801a412:	bd80      	pop	{r7, pc}

0801a414 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a414:	b480      	push	{r7}
 801a416:	b087      	sub	sp, #28
 801a418:	af00      	add	r7, sp, #0
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	60b9      	str	r1, [r7, #8]
 801a41e:	4613      	mov	r3, r2
 801a420:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a422:	2301      	movs	r3, #1
 801a424:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a426:	2300      	movs	r3, #0
 801a428:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a42a:	4b1f      	ldr	r3, [pc, #124]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a42c:	7a5b      	ldrb	r3, [r3, #9]
 801a42e:	b2db      	uxtb	r3, r3
 801a430:	2b00      	cmp	r3, #0
 801a432:	d131      	bne.n	801a498 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a434:	4b1c      	ldr	r3, [pc, #112]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a436:	7a5b      	ldrb	r3, [r3, #9]
 801a438:	b2db      	uxtb	r3, r3
 801a43a:	461a      	mov	r2, r3
 801a43c:	4b1a      	ldr	r3, [pc, #104]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a43e:	2100      	movs	r1, #0
 801a440:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a442:	4b19      	ldr	r3, [pc, #100]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a444:	7a5b      	ldrb	r3, [r3, #9]
 801a446:	b2db      	uxtb	r3, r3
 801a448:	4a17      	ldr	r2, [pc, #92]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a44a:	009b      	lsls	r3, r3, #2
 801a44c:	4413      	add	r3, r2
 801a44e:	68fa      	ldr	r2, [r7, #12]
 801a450:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a452:	4b15      	ldr	r3, [pc, #84]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a454:	7a5b      	ldrb	r3, [r3, #9]
 801a456:	b2db      	uxtb	r3, r3
 801a458:	461a      	mov	r2, r3
 801a45a:	4b13      	ldr	r3, [pc, #76]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a45c:	4413      	add	r3, r2
 801a45e:	79fa      	ldrb	r2, [r7, #7]
 801a460:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a462:	4b11      	ldr	r3, [pc, #68]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a464:	7a5b      	ldrb	r3, [r3, #9]
 801a466:	b2db      	uxtb	r3, r3
 801a468:	1c5a      	adds	r2, r3, #1
 801a46a:	b2d1      	uxtb	r1, r2
 801a46c:	4a0e      	ldr	r2, [pc, #56]	@ (801a4a8 <FATFS_LinkDriverEx+0x94>)
 801a46e:	7251      	strb	r1, [r2, #9]
 801a470:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a472:	7dbb      	ldrb	r3, [r7, #22]
 801a474:	3330      	adds	r3, #48	@ 0x30
 801a476:	b2da      	uxtb	r2, r3
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	3301      	adds	r3, #1
 801a480:	223a      	movs	r2, #58	@ 0x3a
 801a482:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	3302      	adds	r3, #2
 801a488:	222f      	movs	r2, #47	@ 0x2f
 801a48a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	3303      	adds	r3, #3
 801a490:	2200      	movs	r2, #0
 801a492:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a494:	2300      	movs	r3, #0
 801a496:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a498:	7dfb      	ldrb	r3, [r7, #23]
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	371c      	adds	r7, #28
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a4:	4770      	bx	lr
 801a4a6:	bf00      	nop
 801a4a8:	20001ce0 	.word	0x20001ce0

0801a4ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
 801a4b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	6839      	ldr	r1, [r7, #0]
 801a4ba:	6878      	ldr	r0, [r7, #4]
 801a4bc:	f7ff ffaa 	bl	801a414 <FATFS_LinkDriverEx>
 801a4c0:	4603      	mov	r3, r0
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	3708      	adds	r7, #8
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
	...

0801a4cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a4cc:	b480      	push	{r7}
 801a4ce:	b085      	sub	sp, #20
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	6039      	str	r1, [r7, #0]
 801a4d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a4d8:	88fb      	ldrh	r3, [r7, #6]
 801a4da:	2b7f      	cmp	r3, #127	@ 0x7f
 801a4dc:	d802      	bhi.n	801a4e4 <ff_convert+0x18>
		c = chr;
 801a4de:	88fb      	ldrh	r3, [r7, #6]
 801a4e0:	81fb      	strh	r3, [r7, #14]
 801a4e2:	e025      	b.n	801a530 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d00b      	beq.n	801a502 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a4ea:	88fb      	ldrh	r3, [r7, #6]
 801a4ec:	2bff      	cmp	r3, #255	@ 0xff
 801a4ee:	d805      	bhi.n	801a4fc <ff_convert+0x30>
 801a4f0:	88fb      	ldrh	r3, [r7, #6]
 801a4f2:	3b80      	subs	r3, #128	@ 0x80
 801a4f4:	4a12      	ldr	r2, [pc, #72]	@ (801a540 <ff_convert+0x74>)
 801a4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a4fa:	e000      	b.n	801a4fe <ff_convert+0x32>
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	81fb      	strh	r3, [r7, #14]
 801a500:	e016      	b.n	801a530 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a502:	2300      	movs	r3, #0
 801a504:	81fb      	strh	r3, [r7, #14]
 801a506:	e009      	b.n	801a51c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a508:	89fb      	ldrh	r3, [r7, #14]
 801a50a:	4a0d      	ldr	r2, [pc, #52]	@ (801a540 <ff_convert+0x74>)
 801a50c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a510:	88fa      	ldrh	r2, [r7, #6]
 801a512:	429a      	cmp	r2, r3
 801a514:	d006      	beq.n	801a524 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a516:	89fb      	ldrh	r3, [r7, #14]
 801a518:	3301      	adds	r3, #1
 801a51a:	81fb      	strh	r3, [r7, #14]
 801a51c:	89fb      	ldrh	r3, [r7, #14]
 801a51e:	2b7f      	cmp	r3, #127	@ 0x7f
 801a520:	d9f2      	bls.n	801a508 <ff_convert+0x3c>
 801a522:	e000      	b.n	801a526 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a524:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a526:	89fb      	ldrh	r3, [r7, #14]
 801a528:	3380      	adds	r3, #128	@ 0x80
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	b2db      	uxtb	r3, r3
 801a52e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a530:	89fb      	ldrh	r3, [r7, #14]
}
 801a532:	4618      	mov	r0, r3
 801a534:	3714      	adds	r7, #20
 801a536:	46bd      	mov	sp, r7
 801a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53c:	4770      	bx	lr
 801a53e:	bf00      	nop
 801a540:	08022aa8 	.word	0x08022aa8

0801a544 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a544:	b480      	push	{r7}
 801a546:	b087      	sub	sp, #28
 801a548:	af00      	add	r7, sp, #0
 801a54a:	4603      	mov	r3, r0
 801a54c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a54e:	88fb      	ldrh	r3, [r7, #6]
 801a550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a554:	d201      	bcs.n	801a55a <ff_wtoupper+0x16>
 801a556:	4b3e      	ldr	r3, [pc, #248]	@ (801a650 <ff_wtoupper+0x10c>)
 801a558:	e000      	b.n	801a55c <ff_wtoupper+0x18>
 801a55a:	4b3e      	ldr	r3, [pc, #248]	@ (801a654 <ff_wtoupper+0x110>)
 801a55c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a55e:	697b      	ldr	r3, [r7, #20]
 801a560:	1c9a      	adds	r2, r3, #2
 801a562:	617a      	str	r2, [r7, #20]
 801a564:	881b      	ldrh	r3, [r3, #0]
 801a566:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a568:	8a7b      	ldrh	r3, [r7, #18]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d068      	beq.n	801a640 <ff_wtoupper+0xfc>
 801a56e:	88fa      	ldrh	r2, [r7, #6]
 801a570:	8a7b      	ldrh	r3, [r7, #18]
 801a572:	429a      	cmp	r2, r3
 801a574:	d364      	bcc.n	801a640 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	1c9a      	adds	r2, r3, #2
 801a57a:	617a      	str	r2, [r7, #20]
 801a57c:	881b      	ldrh	r3, [r3, #0]
 801a57e:	823b      	strh	r3, [r7, #16]
 801a580:	8a3b      	ldrh	r3, [r7, #16]
 801a582:	0a1b      	lsrs	r3, r3, #8
 801a584:	81fb      	strh	r3, [r7, #14]
 801a586:	8a3b      	ldrh	r3, [r7, #16]
 801a588:	b2db      	uxtb	r3, r3
 801a58a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a58c:	88fa      	ldrh	r2, [r7, #6]
 801a58e:	8a79      	ldrh	r1, [r7, #18]
 801a590:	8a3b      	ldrh	r3, [r7, #16]
 801a592:	440b      	add	r3, r1
 801a594:	429a      	cmp	r2, r3
 801a596:	da49      	bge.n	801a62c <ff_wtoupper+0xe8>
			switch (cmd) {
 801a598:	89fb      	ldrh	r3, [r7, #14]
 801a59a:	2b08      	cmp	r3, #8
 801a59c:	d84f      	bhi.n	801a63e <ff_wtoupper+0xfa>
 801a59e:	a201      	add	r2, pc, #4	@ (adr r2, 801a5a4 <ff_wtoupper+0x60>)
 801a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5a4:	0801a5c9 	.word	0x0801a5c9
 801a5a8:	0801a5db 	.word	0x0801a5db
 801a5ac:	0801a5f1 	.word	0x0801a5f1
 801a5b0:	0801a5f9 	.word	0x0801a5f9
 801a5b4:	0801a601 	.word	0x0801a601
 801a5b8:	0801a609 	.word	0x0801a609
 801a5bc:	0801a611 	.word	0x0801a611
 801a5c0:	0801a619 	.word	0x0801a619
 801a5c4:	0801a621 	.word	0x0801a621
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a5c8:	88fa      	ldrh	r2, [r7, #6]
 801a5ca:	8a7b      	ldrh	r3, [r7, #18]
 801a5cc:	1ad3      	subs	r3, r2, r3
 801a5ce:	005b      	lsls	r3, r3, #1
 801a5d0:	697a      	ldr	r2, [r7, #20]
 801a5d2:	4413      	add	r3, r2
 801a5d4:	881b      	ldrh	r3, [r3, #0]
 801a5d6:	80fb      	strh	r3, [r7, #6]
 801a5d8:	e027      	b.n	801a62a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a5da:	88fa      	ldrh	r2, [r7, #6]
 801a5dc:	8a7b      	ldrh	r3, [r7, #18]
 801a5de:	1ad3      	subs	r3, r2, r3
 801a5e0:	b29b      	uxth	r3, r3
 801a5e2:	f003 0301 	and.w	r3, r3, #1
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	88fa      	ldrh	r2, [r7, #6]
 801a5ea:	1ad3      	subs	r3, r2, r3
 801a5ec:	80fb      	strh	r3, [r7, #6]
 801a5ee:	e01c      	b.n	801a62a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a5f0:	88fb      	ldrh	r3, [r7, #6]
 801a5f2:	3b10      	subs	r3, #16
 801a5f4:	80fb      	strh	r3, [r7, #6]
 801a5f6:	e018      	b.n	801a62a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a5f8:	88fb      	ldrh	r3, [r7, #6]
 801a5fa:	3b20      	subs	r3, #32
 801a5fc:	80fb      	strh	r3, [r7, #6]
 801a5fe:	e014      	b.n	801a62a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a600:	88fb      	ldrh	r3, [r7, #6]
 801a602:	3b30      	subs	r3, #48	@ 0x30
 801a604:	80fb      	strh	r3, [r7, #6]
 801a606:	e010      	b.n	801a62a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a608:	88fb      	ldrh	r3, [r7, #6]
 801a60a:	3b1a      	subs	r3, #26
 801a60c:	80fb      	strh	r3, [r7, #6]
 801a60e:	e00c      	b.n	801a62a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a610:	88fb      	ldrh	r3, [r7, #6]
 801a612:	3308      	adds	r3, #8
 801a614:	80fb      	strh	r3, [r7, #6]
 801a616:	e008      	b.n	801a62a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a618:	88fb      	ldrh	r3, [r7, #6]
 801a61a:	3b50      	subs	r3, #80	@ 0x50
 801a61c:	80fb      	strh	r3, [r7, #6]
 801a61e:	e004      	b.n	801a62a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a620:	88fb      	ldrh	r3, [r7, #6]
 801a622:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801a626:	80fb      	strh	r3, [r7, #6]
 801a628:	bf00      	nop
			}
			break;
 801a62a:	e008      	b.n	801a63e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a62c:	89fb      	ldrh	r3, [r7, #14]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d195      	bne.n	801a55e <ff_wtoupper+0x1a>
 801a632:	8a3b      	ldrh	r3, [r7, #16]
 801a634:	005b      	lsls	r3, r3, #1
 801a636:	697a      	ldr	r2, [r7, #20]
 801a638:	4413      	add	r3, r2
 801a63a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a63c:	e78f      	b.n	801a55e <ff_wtoupper+0x1a>
			break;
 801a63e:	bf00      	nop
	}

	return chr;
 801a640:	88fb      	ldrh	r3, [r7, #6]
}
 801a642:	4618      	mov	r0, r3
 801a644:	371c      	adds	r7, #28
 801a646:	46bd      	mov	sp, r7
 801a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64c:	4770      	bx	lr
 801a64e:	bf00      	nop
 801a650:	08022ba8 	.word	0x08022ba8
 801a654:	08022d9c 	.word	0x08022d9c

0801a658 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801a658:	b580      	push	{r7, lr}
 801a65a:	b082      	sub	sp, #8
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801a660:	2201      	movs	r2, #1
 801a662:	6879      	ldr	r1, [r7, #4]
 801a664:	480e      	ldr	r0, [pc, #56]	@ (801a6a0 <Mount_SD+0x48>)
 801a666:	f7ff fa7f 	bl	8019b68 <f_mount>
 801a66a:	4603      	mov	r3, r0
 801a66c:	461a      	mov	r2, r3
 801a66e:	4b0d      	ldr	r3, [pc, #52]	@ (801a6a4 <Mount_SD+0x4c>)
 801a670:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a672:	4b0c      	ldr	r3, [pc, #48]	@ (801a6a4 <Mount_SD+0x4c>)
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d006      	beq.n	801a688 <Mount_SD+0x30>
		if (sdioPrints)
 801a67a:	2300      	movs	r3, #0
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d009      	beq.n	801a694 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801a680:	4809      	ldr	r0, [pc, #36]	@ (801a6a8 <Mount_SD+0x50>)
 801a682:	f002 fd09 	bl	801d098 <puts>
 801a686:	e005      	b.n	801a694 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801a688:	2300      	movs	r3, #0
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d002      	beq.n	801a694 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801a68e:	4807      	ldr	r0, [pc, #28]	@ (801a6ac <Mount_SD+0x54>)
 801a690:	f002 fd02 	bl	801d098 <puts>

	return fresult;
 801a694:	4b03      	ldr	r3, [pc, #12]	@ (801a6a4 <Mount_SD+0x4c>)
 801a696:	781b      	ldrb	r3, [r3, #0]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3708      	adds	r7, #8
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}
 801a6a0:	20001cec 	.word	0x20001cec
 801a6a4:	20002268 	.word	0x20002268
 801a6a8:	08022200 	.word	0x08022200
 801a6ac:	08022220 	.word	0x08022220

0801a6b0 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b082      	sub	sp, #8
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801a6b8:	2201      	movs	r2, #1
 801a6ba:	6879      	ldr	r1, [r7, #4]
 801a6bc:	2000      	movs	r0, #0
 801a6be:	f7ff fa53 	bl	8019b68 <f_mount>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	461a      	mov	r2, r3
 801a6c6:	4b0b      	ldr	r3, [pc, #44]	@ (801a6f4 <Unmount_SD+0x44>)
 801a6c8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a6ca:	4b0a      	ldr	r3, [pc, #40]	@ (801a6f4 <Unmount_SD+0x44>)
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d106      	bne.n	801a6e0 <Unmount_SD+0x30>
		if (sdioPrints)
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d009      	beq.n	801a6ec <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801a6d8:	4807      	ldr	r0, [pc, #28]	@ (801a6f8 <Unmount_SD+0x48>)
 801a6da:	f002 fcdd 	bl	801d098 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801a6de:	e005      	b.n	801a6ec <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d002      	beq.n	801a6ec <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801a6e6:	4805      	ldr	r0, [pc, #20]	@ (801a6fc <Unmount_SD+0x4c>)
 801a6e8:	f002 fcd6 	bl	801d098 <puts>
}
 801a6ec:	bf00      	nop
 801a6ee:	3708      	adds	r7, #8
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}
 801a6f4:	20002268 	.word	0x20002268
 801a6f8:	08022240 	.word	0x08022240
 801a6fc:	08022264 	.word	0x08022264

0801a700 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801a700:	b580      	push	{r7, lr}
 801a702:	b0a8      	sub	sp, #160	@ 0xa0
 801a704:	af00      	add	r7, sp, #0
 801a706:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801a708:	4941      	ldr	r1, [pc, #260]	@ (801a810 <Create_File+0x110>)
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7ff fe49 	bl	801a3a2 <f_stat>
 801a710:	4603      	mov	r3, r0
 801a712:	461a      	mov	r2, r3
 801a714:	4b3f      	ldr	r3, [pc, #252]	@ (801a814 <Create_File+0x114>)
 801a716:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a718:	4b3e      	ldr	r3, [pc, #248]	@ (801a814 <Create_File+0x114>)
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d114      	bne.n	801a74a <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801a720:	4b3d      	ldr	r3, [pc, #244]	@ (801a818 <Create_File+0x118>)
 801a722:	2201      	movs	r2, #1
 801a724:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801a726:	f107 0308 	add.w	r3, r7, #8
 801a72a:	687a      	ldr	r2, [r7, #4]
 801a72c:	493b      	ldr	r1, [pc, #236]	@ (801a81c <Create_File+0x11c>)
 801a72e:	4618      	mov	r0, r3
 801a730:	f002 fcba 	bl	801d0a8 <siprintf>
				name);
		if (sdioPrints)
 801a734:	2300      	movs	r3, #0
 801a736:	2b00      	cmp	r3, #0
 801a738:	d004      	beq.n	801a744 <Create_File+0x44>
			printf(buf);
 801a73a:	f107 0308 	add.w	r3, r7, #8
 801a73e:	4618      	mov	r0, r3
 801a740:	f002 fc42 	bl	801cfc8 <iprintf>

		return fresult;
 801a744:	4b33      	ldr	r3, [pc, #204]	@ (801a814 <Create_File+0x114>)
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	e05d      	b.n	801a806 <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801a74a:	220b      	movs	r2, #11
 801a74c:	6879      	ldr	r1, [r7, #4]
 801a74e:	4834      	ldr	r0, [pc, #208]	@ (801a820 <Create_File+0x120>)
 801a750:	f7ff fa50 	bl	8019bf4 <f_open>
 801a754:	4603      	mov	r3, r0
 801a756:	461a      	mov	r2, r3
 801a758:	4b2e      	ldr	r3, [pc, #184]	@ (801a814 <Create_File+0x114>)
 801a75a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a75c:	4b2d      	ldr	r3, [pc, #180]	@ (801a814 <Create_File+0x114>)
 801a75e:	781b      	ldrb	r3, [r3, #0]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d013      	beq.n	801a78c <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801a764:	4b2b      	ldr	r3, [pc, #172]	@ (801a814 <Create_File+0x114>)
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	461a      	mov	r2, r3
 801a76a:	f107 0008 	add.w	r0, r7, #8
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	492c      	ldr	r1, [pc, #176]	@ (801a824 <Create_File+0x124>)
 801a772:	f002 fc99 	bl	801d0a8 <siprintf>
					name);
			if (sdioPrints)
 801a776:	2300      	movs	r3, #0
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d004      	beq.n	801a786 <Create_File+0x86>
				printf(buf);
 801a77c:	f107 0308 	add.w	r3, r7, #8
 801a780:	4618      	mov	r0, r3
 801a782:	f002 fc21 	bl	801cfc8 <iprintf>

			return fresult;
 801a786:	4b23      	ldr	r3, [pc, #140]	@ (801a814 <Create_File+0x114>)
 801a788:	781b      	ldrb	r3, [r3, #0]
 801a78a:	e03c      	b.n	801a806 <Create_File+0x106>
		} else {

			sprintf(buf,
 801a78c:	f107 0308 	add.w	r3, r7, #8
 801a790:	687a      	ldr	r2, [r7, #4]
 801a792:	4925      	ldr	r1, [pc, #148]	@ (801a828 <Create_File+0x128>)
 801a794:	4618      	mov	r0, r3
 801a796:	f002 fc87 	bl	801d0a8 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801a79a:	2300      	movs	r3, #0
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d004      	beq.n	801a7aa <Create_File+0xaa>
				printf(buf);
 801a7a0:	f107 0308 	add.w	r3, r7, #8
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f002 fc0f 	bl	801cfc8 <iprintf>

		}

		fresult = f_close(&fil);
 801a7aa:	481d      	ldr	r0, [pc, #116]	@ (801a820 <Create_File+0x120>)
 801a7ac:	f7ff fdcf 	bl	801a34e <f_close>
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	461a      	mov	r2, r3
 801a7b4:	4b17      	ldr	r3, [pc, #92]	@ (801a814 <Create_File+0x114>)
 801a7b6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a7b8:	4b16      	ldr	r3, [pc, #88]	@ (801a814 <Create_File+0x114>)
 801a7ba:	781b      	ldrb	r3, [r3, #0]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d011      	beq.n	801a7e4 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801a7c0:	4b14      	ldr	r3, [pc, #80]	@ (801a814 <Create_File+0x114>)
 801a7c2:	781b      	ldrb	r3, [r3, #0]
 801a7c4:	461a      	mov	r2, r3
 801a7c6:	f107 0008 	add.w	r0, r7, #8
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	4917      	ldr	r1, [pc, #92]	@ (801a82c <Create_File+0x12c>)
 801a7ce:	f002 fc6b 	bl	801d0a8 <siprintf>
			if (sdioPrints)
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d014      	beq.n	801a802 <Create_File+0x102>
				printf(buf);
 801a7d8:	f107 0308 	add.w	r3, r7, #8
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f002 fbf3 	bl	801cfc8 <iprintf>
 801a7e2:	e00e      	b.n	801a802 <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a7e4:	f107 0308 	add.w	r3, r7, #8
 801a7e8:	687a      	ldr	r2, [r7, #4]
 801a7ea:	4911      	ldr	r1, [pc, #68]	@ (801a830 <Create_File+0x130>)
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f002 fc5b 	bl	801d0a8 <siprintf>
			if (sdioPrints)
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d004      	beq.n	801a802 <Create_File+0x102>
				printf(buf);
 801a7f8:	f107 0308 	add.w	r3, r7, #8
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f002 fbe3 	bl	801cfc8 <iprintf>

		}
	}
	return fresult;
 801a802:	4b04      	ldr	r3, [pc, #16]	@ (801a814 <Create_File+0x114>)
 801a804:	781b      	ldrb	r3, [r3, #0]
}
 801a806:	4618      	mov	r0, r3
 801a808:	37a0      	adds	r7, #160	@ 0xa0
 801a80a:	46bd      	mov	sp, r7
 801a80c:	bd80      	pop	{r7, pc}
 801a80e:	bf00      	nop
 801a810:	20002150 	.word	0x20002150
 801a814:	20002268 	.word	0x20002268
 801a818:	2000236e 	.word	0x2000236e
 801a81c:	08022428 	.word	0x08022428
 801a820:	20001f20 	.word	0x20001f20
 801a824:	0802245c 	.word	0x0802245c
 801a828:	08022484 	.word	0x08022484
 801a82c:	080224c4 	.word	0x080224c4
 801a830:	08022408 	.word	0x08022408

0801a834 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801a834:	b580      	push	{r7, lr}
 801a836:	b0a8      	sub	sp, #160	@ 0xa0
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
 801a83c:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801a83e:	4951      	ldr	r1, [pc, #324]	@ (801a984 <Update_File+0x150>)
 801a840:	6878      	ldr	r0, [r7, #4]
 801a842:	f7ff fdae 	bl	801a3a2 <f_stat>
 801a846:	4603      	mov	r3, r0
 801a848:	461a      	mov	r2, r3
 801a84a:	4b4f      	ldr	r3, [pc, #316]	@ (801a988 <Update_File+0x154>)
 801a84c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a84e:	4b4e      	ldr	r3, [pc, #312]	@ (801a988 <Update_File+0x154>)
 801a850:	781b      	ldrb	r3, [r3, #0]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d011      	beq.n	801a87a <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801a856:	f107 0308 	add.w	r3, r7, #8
 801a85a:	687a      	ldr	r2, [r7, #4]
 801a85c:	494b      	ldr	r1, [pc, #300]	@ (801a98c <Update_File+0x158>)
 801a85e:	4618      	mov	r0, r3
 801a860:	f002 fc22 	bl	801d0a8 <siprintf>
		if (sdioPrints)
 801a864:	2300      	movs	r3, #0
 801a866:	2b00      	cmp	r3, #0
 801a868:	d004      	beq.n	801a874 <Update_File+0x40>
			printf(buf);
 801a86a:	f107 0308 	add.w	r3, r7, #8
 801a86e:	4618      	mov	r0, r3
 801a870:	f002 fbaa 	bl	801cfc8 <iprintf>

		return fresult;
 801a874:	4b44      	ldr	r3, [pc, #272]	@ (801a988 <Update_File+0x154>)
 801a876:	781b      	ldrb	r3, [r3, #0]
 801a878:	e080      	b.n	801a97c <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801a87a:	2232      	movs	r2, #50	@ 0x32
 801a87c:	6879      	ldr	r1, [r7, #4]
 801a87e:	4844      	ldr	r0, [pc, #272]	@ (801a990 <Update_File+0x15c>)
 801a880:	f7ff f9b8 	bl	8019bf4 <f_open>
 801a884:	4603      	mov	r3, r0
 801a886:	461a      	mov	r2, r3
 801a888:	4b3f      	ldr	r3, [pc, #252]	@ (801a988 <Update_File+0x154>)
 801a88a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a88c:	4b3e      	ldr	r3, [pc, #248]	@ (801a988 <Update_File+0x154>)
 801a88e:	781b      	ldrb	r3, [r3, #0]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d013      	beq.n	801a8bc <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801a894:	4b3c      	ldr	r3, [pc, #240]	@ (801a988 <Update_File+0x154>)
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	461a      	mov	r2, r3
 801a89a:	f107 0008 	add.w	r0, r7, #8
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	493c      	ldr	r1, [pc, #240]	@ (801a994 <Update_File+0x160>)
 801a8a2:	f002 fc01 	bl	801d0a8 <siprintf>
					name);
			if (sdioPrints)
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d004      	beq.n	801a8b6 <Update_File+0x82>
				printf(buf);
 801a8ac:	f107 0308 	add.w	r3, r7, #8
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f002 fb89 	bl	801cfc8 <iprintf>

			return fresult;
 801a8b6:	4b34      	ldr	r3, [pc, #208]	@ (801a988 <Update_File+0x154>)
 801a8b8:	781b      	ldrb	r3, [r3, #0]
 801a8ba:	e05f      	b.n	801a97c <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801a8bc:	6838      	ldr	r0, [r7, #0]
 801a8be:	f7e5 fcef 	bl	80002a0 <strlen>
 801a8c2:	4602      	mov	r2, r0
 801a8c4:	4b34      	ldr	r3, [pc, #208]	@ (801a998 <Update_File+0x164>)
 801a8c6:	6839      	ldr	r1, [r7, #0]
 801a8c8:	4831      	ldr	r0, [pc, #196]	@ (801a990 <Update_File+0x15c>)
 801a8ca:	f7ff fb4d 	bl	8019f68 <f_write>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	461a      	mov	r2, r3
 801a8d2:	4b2d      	ldr	r3, [pc, #180]	@ (801a988 <Update_File+0x154>)
 801a8d4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a8d6:	4b2c      	ldr	r3, [pc, #176]	@ (801a988 <Update_File+0x154>)
 801a8d8:	781b      	ldrb	r3, [r3, #0]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d011      	beq.n	801a902 <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801a8de:	4b2a      	ldr	r3, [pc, #168]	@ (801a988 <Update_File+0x154>)
 801a8e0:	781b      	ldrb	r3, [r3, #0]
 801a8e2:	461a      	mov	r2, r3
 801a8e4:	f107 0008 	add.w	r0, r7, #8
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	492c      	ldr	r1, [pc, #176]	@ (801a99c <Update_File+0x168>)
 801a8ec:	f002 fbdc 	bl	801d0a8 <siprintf>
					name);
			if (sdioPrints)
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d014      	beq.n	801a920 <Update_File+0xec>
				printf(buf);
 801a8f6:	f107 0308 	add.w	r3, r7, #8
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f002 fb64 	bl	801cfc8 <iprintf>
 801a900:	e00e      	b.n	801a920 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801a902:	f107 0308 	add.w	r3, r7, #8
 801a906:	687a      	ldr	r2, [r7, #4]
 801a908:	4925      	ldr	r1, [pc, #148]	@ (801a9a0 <Update_File+0x16c>)
 801a90a:	4618      	mov	r0, r3
 801a90c:	f002 fbcc 	bl	801d0a8 <siprintf>
			if (sdioPrints)
 801a910:	2300      	movs	r3, #0
 801a912:	2b00      	cmp	r3, #0
 801a914:	d004      	beq.n	801a920 <Update_File+0xec>
				printf(buf);
 801a916:	f107 0308 	add.w	r3, r7, #8
 801a91a:	4618      	mov	r0, r3
 801a91c:	f002 fb54 	bl	801cfc8 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801a920:	481b      	ldr	r0, [pc, #108]	@ (801a990 <Update_File+0x15c>)
 801a922:	f7ff fd14 	bl	801a34e <f_close>
 801a926:	4603      	mov	r3, r0
 801a928:	461a      	mov	r2, r3
 801a92a:	4b17      	ldr	r3, [pc, #92]	@ (801a988 <Update_File+0x154>)
 801a92c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a92e:	4b16      	ldr	r3, [pc, #88]	@ (801a988 <Update_File+0x154>)
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d011      	beq.n	801a95a <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801a936:	4b14      	ldr	r3, [pc, #80]	@ (801a988 <Update_File+0x154>)
 801a938:	781b      	ldrb	r3, [r3, #0]
 801a93a:	461a      	mov	r2, r3
 801a93c:	f107 0008 	add.w	r0, r7, #8
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	4918      	ldr	r1, [pc, #96]	@ (801a9a4 <Update_File+0x170>)
 801a944:	f002 fbb0 	bl	801d0a8 <siprintf>
					name);
			if (sdioPrints)
 801a948:	2300      	movs	r3, #0
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d014      	beq.n	801a978 <Update_File+0x144>
				printf(buf);
 801a94e:	f107 0308 	add.w	r3, r7, #8
 801a952:	4618      	mov	r0, r3
 801a954:	f002 fb38 	bl	801cfc8 <iprintf>
 801a958:	e00e      	b.n	801a978 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a95a:	f107 0308 	add.w	r3, r7, #8
 801a95e:	687a      	ldr	r2, [r7, #4]
 801a960:	4911      	ldr	r1, [pc, #68]	@ (801a9a8 <Update_File+0x174>)
 801a962:	4618      	mov	r0, r3
 801a964:	f002 fba0 	bl	801d0a8 <siprintf>
			if (sdioPrints)
 801a968:	2300      	movs	r3, #0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d004      	beq.n	801a978 <Update_File+0x144>
				printf(buf);
 801a96e:	f107 0308 	add.w	r3, r7, #8
 801a972:	4618      	mov	r0, r3
 801a974:	f002 fb28 	bl	801cfc8 <iprintf>

		}
	}
	return fresult;
 801a978:	4b03      	ldr	r3, [pc, #12]	@ (801a988 <Update_File+0x154>)
 801a97a:	781b      	ldrb	r3, [r3, #0]
}
 801a97c:	4618      	mov	r0, r3
 801a97e:	37a0      	adds	r7, #160	@ 0xa0
 801a980:	46bd      	mov	sp, r7
 801a982:	bd80      	pop	{r7, pc}
 801a984:	20002150 	.word	0x20002150
 801a988:	20002268 	.word	0x20002268
 801a98c:	080222b8 	.word	0x080222b8
 801a990:	20001f20 	.word	0x20001f20
 801a994:	080222d8 	.word	0x080222d8
 801a998:	2000226c 	.word	0x2000226c
 801a99c:	080224e8 	.word	0x080224e8
 801a9a0:	08022510 	.word	0x08022510
 801a9a4:	080223e0 	.word	0x080223e0
 801a9a8:	08022408 	.word	0x08022408

0801a9ac <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b088      	sub	sp, #32
 801a9b0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a9b2:	f107 0314 	add.w	r3, r7, #20
 801a9b6:	2200      	movs	r2, #0
 801a9b8:	4619      	mov	r1, r3
 801a9ba:	48b4      	ldr	r0, [pc, #720]	@ (801ac8c <json_update+0x2e0>)
 801a9bc:	f7ee fd6a 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a9c0:	463b      	mov	r3, r7
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	48b1      	ldr	r0, [pc, #708]	@ (801ac8c <json_update+0x2e0>)
 801a9c8:	f7ee fc82 	bl	80092d0 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801a9cc:	7dba      	ldrb	r2, [r7, #22]
 801a9ce:	4bb0      	ldr	r3, [pc, #704]	@ (801ac90 <json_update+0x2e4>)
 801a9d0:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801a9d2:	7d7a      	ldrb	r2, [r7, #21]
 801a9d4:	4baf      	ldr	r3, [pc, #700]	@ (801ac94 <json_update+0x2e8>)
 801a9d6:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801a9d8:	7dfa      	ldrb	r2, [r7, #23]
 801a9da:	4baf      	ldr	r3, [pc, #700]	@ (801ac98 <json_update+0x2ec>)
 801a9dc:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801a9de:	783a      	ldrb	r2, [r7, #0]
 801a9e0:	4bae      	ldr	r3, [pc, #696]	@ (801ac9c <json_update+0x2f0>)
 801a9e2:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801a9e4:	787a      	ldrb	r2, [r7, #1]
 801a9e6:	4bae      	ldr	r3, [pc, #696]	@ (801aca0 <json_update+0x2f4>)
 801a9e8:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801a9ea:	78ba      	ldrb	r2, [r7, #2]
 801a9ec:	4bad      	ldr	r3, [pc, #692]	@ (801aca4 <json_update+0x2f8>)
 801a9ee:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801a9f0:	48ad      	ldr	r0, [pc, #692]	@ (801aca8 <json_update+0x2fc>)
 801a9f2:	f7ff fe31 	bl	801a658 <Mount_SD>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	4bac      	ldr	r3, [pc, #688]	@ (801acac <json_update+0x300>)
 801a9fc:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a9fe:	4bab      	ldr	r3, [pc, #684]	@ (801acac <json_update+0x300>)
 801aa00:	781b      	ldrb	r3, [r3, #0]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	f040 8137 	bne.w	801ac76 <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801aa08:	49a9      	ldr	r1, [pc, #676]	@ (801acb0 <json_update+0x304>)
 801aa0a:	48aa      	ldr	r0, [pc, #680]	@ (801acb4 <json_update+0x308>)
 801aa0c:	f002 fb4c 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa10:	49a8      	ldr	r1, [pc, #672]	@ (801acb4 <json_update+0x308>)
 801aa12:	48a9      	ldr	r0, [pc, #676]	@ (801acb8 <json_update+0x30c>)
 801aa14:	f7ff ff0e 	bl	801a834 <Update_File>
 801aa18:	4603      	mov	r3, r0
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	4ba3      	ldr	r3, [pc, #652]	@ (801acac <json_update+0x300>)
 801aa1e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa20:	22ff      	movs	r2, #255	@ 0xff
 801aa22:	2100      	movs	r1, #0
 801aa24:	48a3      	ldr	r0, [pc, #652]	@ (801acb4 <json_update+0x308>)
 801aa26:	f002 fc89 	bl	801d33c <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801aa2a:	f7e7 fcc7 	bl	80023bc <ver_GetUid>
 801aa2e:	4603      	mov	r3, r0
 801aa30:	461a      	mov	r2, r3
 801aa32:	49a2      	ldr	r1, [pc, #648]	@ (801acbc <json_update+0x310>)
 801aa34:	489f      	ldr	r0, [pc, #636]	@ (801acb4 <json_update+0x308>)
 801aa36:	f002 fb37 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa3a:	499e      	ldr	r1, [pc, #632]	@ (801acb4 <json_update+0x308>)
 801aa3c:	489e      	ldr	r0, [pc, #632]	@ (801acb8 <json_update+0x30c>)
 801aa3e:	f7ff fef9 	bl	801a834 <Update_File>
 801aa42:	4603      	mov	r3, r0
 801aa44:	461a      	mov	r2, r3
 801aa46:	4b99      	ldr	r3, [pc, #612]	@ (801acac <json_update+0x300>)
 801aa48:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa4a:	22ff      	movs	r2, #255	@ 0xff
 801aa4c:	2100      	movs	r1, #0
 801aa4e:	4899      	ldr	r0, [pc, #612]	@ (801acb4 <json_update+0x308>)
 801aa50:	f002 fc74 	bl	801d33c <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801aa54:	4a9a      	ldr	r2, [pc, #616]	@ (801acc0 <json_update+0x314>)
 801aa56:	499b      	ldr	r1, [pc, #620]	@ (801acc4 <json_update+0x318>)
 801aa58:	4896      	ldr	r0, [pc, #600]	@ (801acb4 <json_update+0x308>)
 801aa5a:	f002 fb25 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa5e:	4995      	ldr	r1, [pc, #596]	@ (801acb4 <json_update+0x308>)
 801aa60:	4895      	ldr	r0, [pc, #596]	@ (801acb8 <json_update+0x30c>)
 801aa62:	f7ff fee7 	bl	801a834 <Update_File>
 801aa66:	4603      	mov	r3, r0
 801aa68:	461a      	mov	r2, r3
 801aa6a:	4b90      	ldr	r3, [pc, #576]	@ (801acac <json_update+0x300>)
 801aa6c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa6e:	22ff      	movs	r2, #255	@ 0xff
 801aa70:	2100      	movs	r1, #0
 801aa72:	4890      	ldr	r0, [pc, #576]	@ (801acb4 <json_update+0x308>)
 801aa74:	f002 fc62 	bl	801d33c <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801aa78:	783b      	ldrb	r3, [r7, #0]
 801aa7a:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801aa7c:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801aa7e:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801aa80:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801aa82:	9300      	str	r3, [sp, #0]
 801aa84:	460b      	mov	r3, r1
 801aa86:	4990      	ldr	r1, [pc, #576]	@ (801acc8 <json_update+0x31c>)
 801aa88:	488a      	ldr	r0, [pc, #552]	@ (801acb4 <json_update+0x308>)
 801aa8a:	f002 fb0d 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa8e:	4989      	ldr	r1, [pc, #548]	@ (801acb4 <json_update+0x308>)
 801aa90:	4889      	ldr	r0, [pc, #548]	@ (801acb8 <json_update+0x30c>)
 801aa92:	f7ff fecf 	bl	801a834 <Update_File>
 801aa96:	4603      	mov	r3, r0
 801aa98:	461a      	mov	r2, r3
 801aa9a:	4b84      	ldr	r3, [pc, #528]	@ (801acac <json_update+0x300>)
 801aa9c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa9e:	22ff      	movs	r2, #255	@ 0xff
 801aaa0:	2100      	movs	r1, #0
 801aaa2:	4884      	ldr	r0, [pc, #528]	@ (801acb4 <json_update+0x308>)
 801aaa4:	f002 fc4a 	bl	801d33c <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801aaa8:	4a88      	ldr	r2, [pc, #544]	@ (801accc <json_update+0x320>)
 801aaaa:	4989      	ldr	r1, [pc, #548]	@ (801acd0 <json_update+0x324>)
 801aaac:	4881      	ldr	r0, [pc, #516]	@ (801acb4 <json_update+0x308>)
 801aaae:	f002 fafb 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aab2:	4980      	ldr	r1, [pc, #512]	@ (801acb4 <json_update+0x308>)
 801aab4:	4880      	ldr	r0, [pc, #512]	@ (801acb8 <json_update+0x30c>)
 801aab6:	f7ff febd 	bl	801a834 <Update_File>
 801aaba:	4603      	mov	r3, r0
 801aabc:	461a      	mov	r2, r3
 801aabe:	4b7b      	ldr	r3, [pc, #492]	@ (801acac <json_update+0x300>)
 801aac0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aac2:	22ff      	movs	r2, #255	@ 0xff
 801aac4:	2100      	movs	r1, #0
 801aac6:	487b      	ldr	r0, [pc, #492]	@ (801acb4 <json_update+0x308>)
 801aac8:	f002 fc38 	bl	801d33c <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", filename_ver_date);
 801aacc:	4a81      	ldr	r2, [pc, #516]	@ (801acd4 <json_update+0x328>)
 801aace:	4982      	ldr	r1, [pc, #520]	@ (801acd8 <json_update+0x32c>)
 801aad0:	4878      	ldr	r0, [pc, #480]	@ (801acb4 <json_update+0x308>)
 801aad2:	f002 fae9 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aad6:	4977      	ldr	r1, [pc, #476]	@ (801acb4 <json_update+0x308>)
 801aad8:	4877      	ldr	r0, [pc, #476]	@ (801acb8 <json_update+0x30c>)
 801aada:	f7ff feab 	bl	801a834 <Update_File>
 801aade:	4603      	mov	r3, r0
 801aae0:	461a      	mov	r2, r3
 801aae2:	4b72      	ldr	r3, [pc, #456]	@ (801acac <json_update+0x300>)
 801aae4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aae6:	22ff      	movs	r2, #255	@ 0xff
 801aae8:	2100      	movs	r1, #0
 801aaea:	4872      	ldr	r0, [pc, #456]	@ (801acb4 <json_update+0x308>)
 801aaec:	f002 fc26 	bl	801d33c <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801aaf0:	4a7a      	ldr	r2, [pc, #488]	@ (801acdc <json_update+0x330>)
 801aaf2:	497b      	ldr	r1, [pc, #492]	@ (801ace0 <json_update+0x334>)
 801aaf4:	486f      	ldr	r0, [pc, #444]	@ (801acb4 <json_update+0x308>)
 801aaf6:	f002 fad7 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aafa:	496e      	ldr	r1, [pc, #440]	@ (801acb4 <json_update+0x308>)
 801aafc:	486e      	ldr	r0, [pc, #440]	@ (801acb8 <json_update+0x30c>)
 801aafe:	f7ff fe99 	bl	801a834 <Update_File>
 801ab02:	4603      	mov	r3, r0
 801ab04:	461a      	mov	r2, r3
 801ab06:	4b69      	ldr	r3, [pc, #420]	@ (801acac <json_update+0x300>)
 801ab08:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801ab0a:	22ff      	movs	r2, #255	@ 0xff
 801ab0c:	2100      	movs	r1, #0
 801ab0e:	4869      	ldr	r0, [pc, #420]	@ (801acb4 <json_update+0x308>)
 801ab10:	f002 fc14 	bl	801d33c <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801ab14:	4b73      	ldr	r3, [pc, #460]	@ (801ace4 <json_update+0x338>)
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7e5 fd2d 	bl	8000578 <__aeabi_f2d>
 801ab1e:	4602      	mov	r2, r0
 801ab20:	460b      	mov	r3, r1
 801ab22:	4971      	ldr	r1, [pc, #452]	@ (801ace8 <json_update+0x33c>)
 801ab24:	4863      	ldr	r0, [pc, #396]	@ (801acb4 <json_update+0x308>)
 801ab26:	f002 fabf 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab2a:	4962      	ldr	r1, [pc, #392]	@ (801acb4 <json_update+0x308>)
 801ab2c:	4862      	ldr	r0, [pc, #392]	@ (801acb8 <json_update+0x30c>)
 801ab2e:	f7ff fe81 	bl	801a834 <Update_File>
 801ab32:	4603      	mov	r3, r0
 801ab34:	461a      	mov	r2, r3
 801ab36:	4b5d      	ldr	r3, [pc, #372]	@ (801acac <json_update+0x300>)
 801ab38:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab3a:	22ff      	movs	r2, #255	@ 0xff
 801ab3c:	2100      	movs	r1, #0
 801ab3e:	485d      	ldr	r0, [pc, #372]	@ (801acb4 <json_update+0x308>)
 801ab40:	f002 fbfc 	bl	801d33c <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801ab44:	4b67      	ldr	r3, [pc, #412]	@ (801ace4 <json_update+0x338>)
 801ab46:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f7e5 fd15 	bl	8000578 <__aeabi_f2d>
 801ab4e:	4602      	mov	r2, r0
 801ab50:	460b      	mov	r3, r1
 801ab52:	4966      	ldr	r1, [pc, #408]	@ (801acec <json_update+0x340>)
 801ab54:	4857      	ldr	r0, [pc, #348]	@ (801acb4 <json_update+0x308>)
 801ab56:	f002 faa7 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab5a:	4956      	ldr	r1, [pc, #344]	@ (801acb4 <json_update+0x308>)
 801ab5c:	4856      	ldr	r0, [pc, #344]	@ (801acb8 <json_update+0x30c>)
 801ab5e:	f7ff fe69 	bl	801a834 <Update_File>
 801ab62:	4603      	mov	r3, r0
 801ab64:	461a      	mov	r2, r3
 801ab66:	4b51      	ldr	r3, [pc, #324]	@ (801acac <json_update+0x300>)
 801ab68:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab6a:	22ff      	movs	r2, #255	@ 0xff
 801ab6c:	2100      	movs	r1, #0
 801ab6e:	4851      	ldr	r0, [pc, #324]	@ (801acb4 <json_update+0x308>)
 801ab70:	f002 fbe4 	bl	801d33c <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801ab74:	4b5b      	ldr	r3, [pc, #364]	@ (801ace4 <json_update+0x338>)
 801ab76:	689b      	ldr	r3, [r3, #8]
 801ab78:	4618      	mov	r0, r3
 801ab7a:	f7e5 fcfd 	bl	8000578 <__aeabi_f2d>
 801ab7e:	4602      	mov	r2, r0
 801ab80:	460b      	mov	r3, r1
 801ab82:	495b      	ldr	r1, [pc, #364]	@ (801acf0 <json_update+0x344>)
 801ab84:	484b      	ldr	r0, [pc, #300]	@ (801acb4 <json_update+0x308>)
 801ab86:	f002 fa8f 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab8a:	494a      	ldr	r1, [pc, #296]	@ (801acb4 <json_update+0x308>)
 801ab8c:	484a      	ldr	r0, [pc, #296]	@ (801acb8 <json_update+0x30c>)
 801ab8e:	f7ff fe51 	bl	801a834 <Update_File>
 801ab92:	4603      	mov	r3, r0
 801ab94:	461a      	mov	r2, r3
 801ab96:	4b45      	ldr	r3, [pc, #276]	@ (801acac <json_update+0x300>)
 801ab98:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801ab9a:	22ff      	movs	r2, #255	@ 0xff
 801ab9c:	2100      	movs	r1, #0
 801ab9e:	4845      	ldr	r0, [pc, #276]	@ (801acb4 <json_update+0x308>)
 801aba0:	f002 fbcc 	bl	801d33c <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801aba4:	4b4f      	ldr	r3, [pc, #316]	@ (801ace4 <json_update+0x338>)
 801aba6:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d001      	beq.n	801abb0 <json_update+0x204>
 801abac:	4b51      	ldr	r3, [pc, #324]	@ (801acf4 <json_update+0x348>)
 801abae:	e000      	b.n	801abb2 <json_update+0x206>
 801abb0:	4b51      	ldr	r3, [pc, #324]	@ (801acf8 <json_update+0x34c>)
 801abb2:	461a      	mov	r2, r3
 801abb4:	4951      	ldr	r1, [pc, #324]	@ (801acfc <json_update+0x350>)
 801abb6:	483f      	ldr	r0, [pc, #252]	@ (801acb4 <json_update+0x308>)
 801abb8:	f002 fa76 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801abbc:	493d      	ldr	r1, [pc, #244]	@ (801acb4 <json_update+0x308>)
 801abbe:	483e      	ldr	r0, [pc, #248]	@ (801acb8 <json_update+0x30c>)
 801abc0:	f7ff fe38 	bl	801a834 <Update_File>
 801abc4:	4603      	mov	r3, r0
 801abc6:	461a      	mov	r2, r3
 801abc8:	4b38      	ldr	r3, [pc, #224]	@ (801acac <json_update+0x300>)
 801abca:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801abcc:	22ff      	movs	r2, #255	@ 0xff
 801abce:	2100      	movs	r1, #0
 801abd0:	4838      	ldr	r0, [pc, #224]	@ (801acb4 <json_update+0x308>)
 801abd2:	f002 fbb3 	bl	801d33c <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801abd6:	4b43      	ldr	r3, [pc, #268]	@ (801ace4 <json_update+0x338>)
 801abd8:	695b      	ldr	r3, [r3, #20]
 801abda:	4618      	mov	r0, r3
 801abdc:	f7e5 fccc 	bl	8000578 <__aeabi_f2d>
 801abe0:	4602      	mov	r2, r0
 801abe2:	460b      	mov	r3, r1
 801abe4:	4946      	ldr	r1, [pc, #280]	@ (801ad00 <json_update+0x354>)
 801abe6:	4833      	ldr	r0, [pc, #204]	@ (801acb4 <json_update+0x308>)
 801abe8:	f002 fa5e 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801abec:	4931      	ldr	r1, [pc, #196]	@ (801acb4 <json_update+0x308>)
 801abee:	4832      	ldr	r0, [pc, #200]	@ (801acb8 <json_update+0x30c>)
 801abf0:	f7ff fe20 	bl	801a834 <Update_File>
 801abf4:	4603      	mov	r3, r0
 801abf6:	461a      	mov	r2, r3
 801abf8:	4b2c      	ldr	r3, [pc, #176]	@ (801acac <json_update+0x300>)
 801abfa:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801abfc:	22ff      	movs	r2, #255	@ 0xff
 801abfe:	2100      	movs	r1, #0
 801ac00:	482c      	ldr	r0, [pc, #176]	@ (801acb4 <json_update+0x308>)
 801ac02:	f002 fb9b 	bl	801d33c <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801ac06:	493f      	ldr	r1, [pc, #252]	@ (801ad04 <json_update+0x358>)
 801ac08:	482a      	ldr	r0, [pc, #168]	@ (801acb4 <json_update+0x308>)
 801ac0a:	f002 fa4d 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac0e:	4929      	ldr	r1, [pc, #164]	@ (801acb4 <json_update+0x308>)
 801ac10:	4829      	ldr	r0, [pc, #164]	@ (801acb8 <json_update+0x30c>)
 801ac12:	f7ff fe0f 	bl	801a834 <Update_File>
 801ac16:	4603      	mov	r3, r0
 801ac18:	461a      	mov	r2, r3
 801ac1a:	4b24      	ldr	r3, [pc, #144]	@ (801acac <json_update+0x300>)
 801ac1c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ac1e:	22ff      	movs	r2, #255	@ 0xff
 801ac20:	2100      	movs	r1, #0
 801ac22:	4824      	ldr	r0, [pc, #144]	@ (801acb4 <json_update+0x308>)
 801ac24:	f002 fb8a 	bl	801d33c <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801ac28:	4b2e      	ldr	r3, [pc, #184]	@ (801ace4 <json_update+0x338>)
 801ac2a:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f7e5 fca3 	bl	8000578 <__aeabi_f2d>
 801ac32:	4602      	mov	r2, r0
 801ac34:	460b      	mov	r3, r1
 801ac36:	4934      	ldr	r1, [pc, #208]	@ (801ad08 <json_update+0x35c>)
 801ac38:	481e      	ldr	r0, [pc, #120]	@ (801acb4 <json_update+0x308>)
 801ac3a:	f002 fa35 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac3e:	491d      	ldr	r1, [pc, #116]	@ (801acb4 <json_update+0x308>)
 801ac40:	481d      	ldr	r0, [pc, #116]	@ (801acb8 <json_update+0x30c>)
 801ac42:	f7ff fdf7 	bl	801a834 <Update_File>
 801ac46:	4603      	mov	r3, r0
 801ac48:	461a      	mov	r2, r3
 801ac4a:	4b18      	ldr	r3, [pc, #96]	@ (801acac <json_update+0x300>)
 801ac4c:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801ac4e:	22ff      	movs	r2, #255	@ 0xff
 801ac50:	2100      	movs	r1, #0
 801ac52:	4818      	ldr	r0, [pc, #96]	@ (801acb4 <json_update+0x308>)
 801ac54:	f002 fb72 	bl	801d33c <memset>
		sprintf(buffer, "}\n\n");
 801ac58:	492c      	ldr	r1, [pc, #176]	@ (801ad0c <json_update+0x360>)
 801ac5a:	4816      	ldr	r0, [pc, #88]	@ (801acb4 <json_update+0x308>)
 801ac5c:	f002 fa24 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac60:	4914      	ldr	r1, [pc, #80]	@ (801acb4 <json_update+0x308>)
 801ac62:	4815      	ldr	r0, [pc, #84]	@ (801acb8 <json_update+0x30c>)
 801ac64:	f7ff fde6 	bl	801a834 <Update_File>
 801ac68:	4603      	mov	r3, r0
 801ac6a:	461a      	mov	r2, r3
 801ac6c:	4b0f      	ldr	r3, [pc, #60]	@ (801acac <json_update+0x300>)
 801ac6e:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801ac70:	480d      	ldr	r0, [pc, #52]	@ (801aca8 <json_update+0x2fc>)
 801ac72:	f7ff fd1d 	bl	801a6b0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801ac76:	4b0d      	ldr	r3, [pc, #52]	@ (801acac <json_update+0x300>)
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	b25a      	sxtb	r2, r3
 801ac7c:	4b19      	ldr	r3, [pc, #100]	@ (801ace4 <json_update+0x338>)
 801ac7e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801ac82:	bf00      	nop
 801ac84:	3718      	adds	r7, #24
 801ac86:	46bd      	mov	sp, r7
 801ac88:	bd80      	pop	{r7, pc}
 801ac8a:	bf00      	nop
 801ac8c:	200017f0 	.word	0x200017f0
 801ac90:	2000236f 	.word	0x2000236f
 801ac94:	20002370 	.word	0x20002370
 801ac98:	20002371 	.word	0x20002371
 801ac9c:	20002372 	.word	0x20002372
 801aca0:	20002373 	.word	0x20002373
 801aca4:	20002374 	.word	0x20002374
 801aca8:	080225fc 	.word	0x080225fc
 801acac:	20002270 	.word	0x20002270
 801acb0:	08022600 	.word	0x08022600
 801acb4:	20002378 	.word	0x20002378
 801acb8:	20002274 	.word	0x20002274
 801acbc:	08022604 	.word	0x08022604
 801acc0:	200013c1 	.word	0x200013c1
 801acc4:	08022614 	.word	0x08022614
 801acc8:	08022620 	.word	0x08022620
 801accc:	200013f3 	.word	0x200013f3
 801acd0:	08022640 	.word	0x08022640
 801acd4:	200022d8 	.word	0x200022d8
 801acd8:	08022654 	.word	0x08022654
 801acdc:	20001457 	.word	0x20001457
 801ace0:	08022668 	.word	0x08022668
 801ace4:	2000148c 	.word	0x2000148c
 801ace8:	08022678 	.word	0x08022678
 801acec:	08022688 	.word	0x08022688
 801acf0:	080226a0 	.word	0x080226a0
 801acf4:	080226b4 	.word	0x080226b4
 801acf8:	080226bc 	.word	0x080226bc
 801acfc:	080226c4 	.word	0x080226c4
 801ad00:	080226d4 	.word	0x080226d4
 801ad04:	080226e8 	.word	0x080226e8
 801ad08:	080226f8 	.word	0x080226f8
 801ad0c:	0802270c 	.word	0x0802270c

0801ad10 <csv_update>:
void csv_update() {
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b088      	sub	sp, #32
 801ad14:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801ad16:	f107 0314 	add.w	r3, r7, #20
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	4619      	mov	r1, r3
 801ad1e:	48ab      	ldr	r0, [pc, #684]	@ (801afcc <csv_update+0x2bc>)
 801ad20:	f7ee fbb8 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801ad24:	463b      	mov	r3, r7
 801ad26:	2200      	movs	r2, #0
 801ad28:	4619      	mov	r1, r3
 801ad2a:	48a8      	ldr	r0, [pc, #672]	@ (801afcc <csv_update+0x2bc>)
 801ad2c:	f7ee fad0 	bl	80092d0 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801ad30:	7dba      	ldrb	r2, [r7, #22]
 801ad32:	4ba7      	ldr	r3, [pc, #668]	@ (801afd0 <csv_update+0x2c0>)
 801ad34:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801ad36:	7d7a      	ldrb	r2, [r7, #21]
 801ad38:	4ba6      	ldr	r3, [pc, #664]	@ (801afd4 <csv_update+0x2c4>)
 801ad3a:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801ad3c:	7dfa      	ldrb	r2, [r7, #23]
 801ad3e:	4ba6      	ldr	r3, [pc, #664]	@ (801afd8 <csv_update+0x2c8>)
 801ad40:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801ad42:	783a      	ldrb	r2, [r7, #0]
 801ad44:	4ba5      	ldr	r3, [pc, #660]	@ (801afdc <csv_update+0x2cc>)
 801ad46:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801ad48:	787a      	ldrb	r2, [r7, #1]
 801ad4a:	4ba5      	ldr	r3, [pc, #660]	@ (801afe0 <csv_update+0x2d0>)
 801ad4c:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801ad4e:	78ba      	ldrb	r2, [r7, #2]
 801ad50:	4ba4      	ldr	r3, [pc, #656]	@ (801afe4 <csv_update+0x2d4>)
 801ad52:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801ad54:	48a4      	ldr	r0, [pc, #656]	@ (801afe8 <csv_update+0x2d8>)
 801ad56:	f7ff fc7f 	bl	801a658 <Mount_SD>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	461a      	mov	r2, r3
 801ad5e:	4ba3      	ldr	r3, [pc, #652]	@ (801afec <csv_update+0x2dc>)
 801ad60:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ad62:	4ba2      	ldr	r3, [pc, #648]	@ (801afec <csv_update+0x2dc>)
 801ad64:	781b      	ldrb	r3, [r3, #0]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	f040 8126 	bne.w	801afb8 <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801ad6c:	f7e7 fb26 	bl	80023bc <ver_GetUid>
 801ad70:	4603      	mov	r3, r0
 801ad72:	461a      	mov	r2, r3
 801ad74:	499e      	ldr	r1, [pc, #632]	@ (801aff0 <csv_update+0x2e0>)
 801ad76:	489f      	ldr	r0, [pc, #636]	@ (801aff4 <csv_update+0x2e4>)
 801ad78:	f002 f996 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ad7c:	499d      	ldr	r1, [pc, #628]	@ (801aff4 <csv_update+0x2e4>)
 801ad7e:	489e      	ldr	r0, [pc, #632]	@ (801aff8 <csv_update+0x2e8>)
 801ad80:	f7ff fd58 	bl	801a834 <Update_File>
 801ad84:	4603      	mov	r3, r0
 801ad86:	461a      	mov	r2, r3
 801ad88:	4b98      	ldr	r3, [pc, #608]	@ (801afec <csv_update+0x2dc>)
 801ad8a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ad8c:	22ff      	movs	r2, #255	@ 0xff
 801ad8e:	2100      	movs	r1, #0
 801ad90:	4898      	ldr	r0, [pc, #608]	@ (801aff4 <csv_update+0x2e4>)
 801ad92:	f002 fad3 	bl	801d33c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801ad96:	4a99      	ldr	r2, [pc, #612]	@ (801affc <csv_update+0x2ec>)
 801ad98:	4995      	ldr	r1, [pc, #596]	@ (801aff0 <csv_update+0x2e0>)
 801ad9a:	4896      	ldr	r0, [pc, #600]	@ (801aff4 <csv_update+0x2e4>)
 801ad9c:	f002 f984 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ada0:	4994      	ldr	r1, [pc, #592]	@ (801aff4 <csv_update+0x2e4>)
 801ada2:	4895      	ldr	r0, [pc, #596]	@ (801aff8 <csv_update+0x2e8>)
 801ada4:	f7ff fd46 	bl	801a834 <Update_File>
 801ada8:	4603      	mov	r3, r0
 801adaa:	461a      	mov	r2, r3
 801adac:	4b8f      	ldr	r3, [pc, #572]	@ (801afec <csv_update+0x2dc>)
 801adae:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801adb0:	22ff      	movs	r2, #255	@ 0xff
 801adb2:	2100      	movs	r1, #0
 801adb4:	488f      	ldr	r0, [pc, #572]	@ (801aff4 <csv_update+0x2e4>)
 801adb6:	f002 fac1 	bl	801d33c <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801adba:	783b      	ldrb	r3, [r7, #0]
 801adbc:	461a      	mov	r2, r3
 801adbe:	787b      	ldrb	r3, [r7, #1]
 801adc0:	4619      	mov	r1, r3
				sTime.Seconds);
 801adc2:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801adc4:	9300      	str	r3, [sp, #0]
 801adc6:	460b      	mov	r3, r1
 801adc8:	498d      	ldr	r1, [pc, #564]	@ (801b000 <csv_update+0x2f0>)
 801adca:	488a      	ldr	r0, [pc, #552]	@ (801aff4 <csv_update+0x2e4>)
 801adcc:	f002 f96c 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801add0:	4988      	ldr	r1, [pc, #544]	@ (801aff4 <csv_update+0x2e4>)
 801add2:	4889      	ldr	r0, [pc, #548]	@ (801aff8 <csv_update+0x2e8>)
 801add4:	f7ff fd2e 	bl	801a834 <Update_File>
 801add8:	4603      	mov	r3, r0
 801adda:	461a      	mov	r2, r3
 801addc:	4b83      	ldr	r3, [pc, #524]	@ (801afec <csv_update+0x2dc>)
 801adde:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ade0:	22ff      	movs	r2, #255	@ 0xff
 801ade2:	2100      	movs	r1, #0
 801ade4:	4883      	ldr	r0, [pc, #524]	@ (801aff4 <csv_update+0x2e4>)
 801ade6:	f002 faa9 	bl	801d33c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801adea:	4a86      	ldr	r2, [pc, #536]	@ (801b004 <csv_update+0x2f4>)
 801adec:	4980      	ldr	r1, [pc, #512]	@ (801aff0 <csv_update+0x2e0>)
 801adee:	4881      	ldr	r0, [pc, #516]	@ (801aff4 <csv_update+0x2e4>)
 801adf0:	f002 f95a 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801adf4:	497f      	ldr	r1, [pc, #508]	@ (801aff4 <csv_update+0x2e4>)
 801adf6:	4880      	ldr	r0, [pc, #512]	@ (801aff8 <csv_update+0x2e8>)
 801adf8:	f7ff fd1c 	bl	801a834 <Update_File>
 801adfc:	4603      	mov	r3, r0
 801adfe:	461a      	mov	r2, r3
 801ae00:	4b7a      	ldr	r3, [pc, #488]	@ (801afec <csv_update+0x2dc>)
 801ae02:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ae04:	22ff      	movs	r2, #255	@ 0xff
 801ae06:	2100      	movs	r1, #0
 801ae08:	487a      	ldr	r0, [pc, #488]	@ (801aff4 <csv_update+0x2e4>)
 801ae0a:	f002 fa97 	bl	801d33c <memset>
		sprintf(buffer, "%s ,", filename_ver_date);
 801ae0e:	4a7e      	ldr	r2, [pc, #504]	@ (801b008 <csv_update+0x2f8>)
 801ae10:	4977      	ldr	r1, [pc, #476]	@ (801aff0 <csv_update+0x2e0>)
 801ae12:	4878      	ldr	r0, [pc, #480]	@ (801aff4 <csv_update+0x2e4>)
 801ae14:	f002 f948 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ae18:	4976      	ldr	r1, [pc, #472]	@ (801aff4 <csv_update+0x2e4>)
 801ae1a:	4877      	ldr	r0, [pc, #476]	@ (801aff8 <csv_update+0x2e8>)
 801ae1c:	f7ff fd0a 	bl	801a834 <Update_File>
 801ae20:	4603      	mov	r3, r0
 801ae22:	461a      	mov	r2, r3
 801ae24:	4b71      	ldr	r3, [pc, #452]	@ (801afec <csv_update+0x2dc>)
 801ae26:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ae28:	22ff      	movs	r2, #255	@ 0xff
 801ae2a:	2100      	movs	r1, #0
 801ae2c:	4871      	ldr	r0, [pc, #452]	@ (801aff4 <csv_update+0x2e4>)
 801ae2e:	f002 fa85 	bl	801d33c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801ae32:	4a76      	ldr	r2, [pc, #472]	@ (801b00c <csv_update+0x2fc>)
 801ae34:	496e      	ldr	r1, [pc, #440]	@ (801aff0 <csv_update+0x2e0>)
 801ae36:	486f      	ldr	r0, [pc, #444]	@ (801aff4 <csv_update+0x2e4>)
 801ae38:	f002 f936 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ae3c:	496d      	ldr	r1, [pc, #436]	@ (801aff4 <csv_update+0x2e4>)
 801ae3e:	486e      	ldr	r0, [pc, #440]	@ (801aff8 <csv_update+0x2e8>)
 801ae40:	f7ff fcf8 	bl	801a834 <Update_File>
 801ae44:	4603      	mov	r3, r0
 801ae46:	461a      	mov	r2, r3
 801ae48:	4b68      	ldr	r3, [pc, #416]	@ (801afec <csv_update+0x2dc>)
 801ae4a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801ae4c:	22ff      	movs	r2, #255	@ 0xff
 801ae4e:	2100      	movs	r1, #0
 801ae50:	4868      	ldr	r0, [pc, #416]	@ (801aff4 <csv_update+0x2e4>)
 801ae52:	f002 fa73 	bl	801d33c <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801ae56:	4b6e      	ldr	r3, [pc, #440]	@ (801b010 <csv_update+0x300>)
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7e5 fb8c 	bl	8000578 <__aeabi_f2d>
 801ae60:	4602      	mov	r2, r0
 801ae62:	460b      	mov	r3, r1
 801ae64:	496b      	ldr	r1, [pc, #428]	@ (801b014 <csv_update+0x304>)
 801ae66:	4863      	ldr	r0, [pc, #396]	@ (801aff4 <csv_update+0x2e4>)
 801ae68:	f002 f91e 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ae6c:	4961      	ldr	r1, [pc, #388]	@ (801aff4 <csv_update+0x2e4>)
 801ae6e:	4862      	ldr	r0, [pc, #392]	@ (801aff8 <csv_update+0x2e8>)
 801ae70:	f7ff fce0 	bl	801a834 <Update_File>
 801ae74:	4603      	mov	r3, r0
 801ae76:	461a      	mov	r2, r3
 801ae78:	4b5c      	ldr	r3, [pc, #368]	@ (801afec <csv_update+0x2dc>)
 801ae7a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ae7c:	22ff      	movs	r2, #255	@ 0xff
 801ae7e:	2100      	movs	r1, #0
 801ae80:	485c      	ldr	r0, [pc, #368]	@ (801aff4 <csv_update+0x2e4>)
 801ae82:	f002 fa5b 	bl	801d33c <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801ae86:	4b62      	ldr	r3, [pc, #392]	@ (801b010 <csv_update+0x300>)
 801ae88:	685b      	ldr	r3, [r3, #4]
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	f7e5 fb74 	bl	8000578 <__aeabi_f2d>
 801ae90:	4602      	mov	r2, r0
 801ae92:	460b      	mov	r3, r1
 801ae94:	495f      	ldr	r1, [pc, #380]	@ (801b014 <csv_update+0x304>)
 801ae96:	4857      	ldr	r0, [pc, #348]	@ (801aff4 <csv_update+0x2e4>)
 801ae98:	f002 f906 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ae9c:	4955      	ldr	r1, [pc, #340]	@ (801aff4 <csv_update+0x2e4>)
 801ae9e:	4856      	ldr	r0, [pc, #344]	@ (801aff8 <csv_update+0x2e8>)
 801aea0:	f7ff fcc8 	bl	801a834 <Update_File>
 801aea4:	4603      	mov	r3, r0
 801aea6:	461a      	mov	r2, r3
 801aea8:	4b50      	ldr	r3, [pc, #320]	@ (801afec <csv_update+0x2dc>)
 801aeaa:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aeac:	22ff      	movs	r2, #255	@ 0xff
 801aeae:	2100      	movs	r1, #0
 801aeb0:	4850      	ldr	r0, [pc, #320]	@ (801aff4 <csv_update+0x2e4>)
 801aeb2:	f002 fa43 	bl	801d33c <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801aeb6:	4b56      	ldr	r3, [pc, #344]	@ (801b010 <csv_update+0x300>)
 801aeb8:	689b      	ldr	r3, [r3, #8]
 801aeba:	4618      	mov	r0, r3
 801aebc:	f7e5 fb5c 	bl	8000578 <__aeabi_f2d>
 801aec0:	4602      	mov	r2, r0
 801aec2:	460b      	mov	r3, r1
 801aec4:	4953      	ldr	r1, [pc, #332]	@ (801b014 <csv_update+0x304>)
 801aec6:	484b      	ldr	r0, [pc, #300]	@ (801aff4 <csv_update+0x2e4>)
 801aec8:	f002 f8ee 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aecc:	4949      	ldr	r1, [pc, #292]	@ (801aff4 <csv_update+0x2e4>)
 801aece:	484a      	ldr	r0, [pc, #296]	@ (801aff8 <csv_update+0x2e8>)
 801aed0:	f7ff fcb0 	bl	801a834 <Update_File>
 801aed4:	4603      	mov	r3, r0
 801aed6:	461a      	mov	r2, r3
 801aed8:	4b44      	ldr	r3, [pc, #272]	@ (801afec <csv_update+0x2dc>)
 801aeda:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801aedc:	22ff      	movs	r2, #255	@ 0xff
 801aede:	2100      	movs	r1, #0
 801aee0:	4844      	ldr	r0, [pc, #272]	@ (801aff4 <csv_update+0x2e4>)
 801aee2:	f002 fa2b 	bl	801d33c <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801aee6:	4b4a      	ldr	r3, [pc, #296]	@ (801b010 <csv_update+0x300>)
 801aee8:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801aeea:	2b01      	cmp	r3, #1
 801aeec:	d101      	bne.n	801aef2 <csv_update+0x1e2>
 801aeee:	4b4a      	ldr	r3, [pc, #296]	@ (801b018 <csv_update+0x308>)
 801aef0:	e000      	b.n	801aef4 <csv_update+0x1e4>
 801aef2:	4b4a      	ldr	r3, [pc, #296]	@ (801b01c <csv_update+0x30c>)
 801aef4:	461a      	mov	r2, r3
 801aef6:	493e      	ldr	r1, [pc, #248]	@ (801aff0 <csv_update+0x2e0>)
 801aef8:	483e      	ldr	r0, [pc, #248]	@ (801aff4 <csv_update+0x2e4>)
 801aefa:	f002 f8d5 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aefe:	493d      	ldr	r1, [pc, #244]	@ (801aff4 <csv_update+0x2e4>)
 801af00:	483d      	ldr	r0, [pc, #244]	@ (801aff8 <csv_update+0x2e8>)
 801af02:	f7ff fc97 	bl	801a834 <Update_File>
 801af06:	4603      	mov	r3, r0
 801af08:	461a      	mov	r2, r3
 801af0a:	4b38      	ldr	r3, [pc, #224]	@ (801afec <csv_update+0x2dc>)
 801af0c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af0e:	22ff      	movs	r2, #255	@ 0xff
 801af10:	2100      	movs	r1, #0
 801af12:	4838      	ldr	r0, [pc, #224]	@ (801aff4 <csv_update+0x2e4>)
 801af14:	f002 fa12 	bl	801d33c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801af18:	4b3d      	ldr	r3, [pc, #244]	@ (801b010 <csv_update+0x300>)
 801af1a:	695b      	ldr	r3, [r3, #20]
 801af1c:	4618      	mov	r0, r3
 801af1e:	f7e5 fb2b 	bl	8000578 <__aeabi_f2d>
 801af22:	4602      	mov	r2, r0
 801af24:	460b      	mov	r3, r1
 801af26:	493e      	ldr	r1, [pc, #248]	@ (801b020 <csv_update+0x310>)
 801af28:	4832      	ldr	r0, [pc, #200]	@ (801aff4 <csv_update+0x2e4>)
 801af2a:	f002 f8bd 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801af2e:	4931      	ldr	r1, [pc, #196]	@ (801aff4 <csv_update+0x2e4>)
 801af30:	4831      	ldr	r0, [pc, #196]	@ (801aff8 <csv_update+0x2e8>)
 801af32:	f7ff fc7f 	bl	801a834 <Update_File>
 801af36:	4603      	mov	r3, r0
 801af38:	461a      	mov	r2, r3
 801af3a:	4b2c      	ldr	r3, [pc, #176]	@ (801afec <csv_update+0x2dc>)
 801af3c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af3e:	22ff      	movs	r2, #255	@ 0xff
 801af40:	2100      	movs	r1, #0
 801af42:	482c      	ldr	r0, [pc, #176]	@ (801aff4 <csv_update+0x2e4>)
 801af44:	f002 f9fa 	bl	801d33c <memset>
		sprintf(buffer, "NONE ,");
 801af48:	4936      	ldr	r1, [pc, #216]	@ (801b024 <csv_update+0x314>)
 801af4a:	482a      	ldr	r0, [pc, #168]	@ (801aff4 <csv_update+0x2e4>)
 801af4c:	f002 f8ac 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801af50:	4928      	ldr	r1, [pc, #160]	@ (801aff4 <csv_update+0x2e4>)
 801af52:	4829      	ldr	r0, [pc, #164]	@ (801aff8 <csv_update+0x2e8>)
 801af54:	f7ff fc6e 	bl	801a834 <Update_File>
 801af58:	4603      	mov	r3, r0
 801af5a:	461a      	mov	r2, r3
 801af5c:	4b23      	ldr	r3, [pc, #140]	@ (801afec <csv_update+0x2dc>)
 801af5e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af60:	22ff      	movs	r2, #255	@ 0xff
 801af62:	2100      	movs	r1, #0
 801af64:	4823      	ldr	r0, [pc, #140]	@ (801aff4 <csv_update+0x2e4>)
 801af66:	f002 f9e9 	bl	801d33c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801af6a:	4b29      	ldr	r3, [pc, #164]	@ (801b010 <csv_update+0x300>)
 801af6c:	6a1b      	ldr	r3, [r3, #32]
 801af6e:	4618      	mov	r0, r3
 801af70:	f7e5 fb02 	bl	8000578 <__aeabi_f2d>
 801af74:	4602      	mov	r2, r0
 801af76:	460b      	mov	r3, r1
 801af78:	4929      	ldr	r1, [pc, #164]	@ (801b020 <csv_update+0x310>)
 801af7a:	481e      	ldr	r0, [pc, #120]	@ (801aff4 <csv_update+0x2e4>)
 801af7c:	f002 f894 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801af80:	491c      	ldr	r1, [pc, #112]	@ (801aff4 <csv_update+0x2e4>)
 801af82:	481d      	ldr	r0, [pc, #116]	@ (801aff8 <csv_update+0x2e8>)
 801af84:	f7ff fc56 	bl	801a834 <Update_File>
 801af88:	4603      	mov	r3, r0
 801af8a:	461a      	mov	r2, r3
 801af8c:	4b17      	ldr	r3, [pc, #92]	@ (801afec <csv_update+0x2dc>)
 801af8e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af90:	22ff      	movs	r2, #255	@ 0xff
 801af92:	2100      	movs	r1, #0
 801af94:	4817      	ldr	r0, [pc, #92]	@ (801aff4 <csv_update+0x2e4>)
 801af96:	f002 f9d1 	bl	801d33c <memset>
		sprintf(buffer, "\n");
 801af9a:	4923      	ldr	r1, [pc, #140]	@ (801b028 <csv_update+0x318>)
 801af9c:	4815      	ldr	r0, [pc, #84]	@ (801aff4 <csv_update+0x2e4>)
 801af9e:	f002 f883 	bl	801d0a8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801afa2:	4914      	ldr	r1, [pc, #80]	@ (801aff4 <csv_update+0x2e4>)
 801afa4:	4814      	ldr	r0, [pc, #80]	@ (801aff8 <csv_update+0x2e8>)
 801afa6:	f7ff fc45 	bl	801a834 <Update_File>
 801afaa:	4603      	mov	r3, r0
 801afac:	461a      	mov	r2, r3
 801afae:	4b0f      	ldr	r3, [pc, #60]	@ (801afec <csv_update+0x2dc>)
 801afb0:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801afb2:	480d      	ldr	r0, [pc, #52]	@ (801afe8 <csv_update+0x2d8>)
 801afb4:	f7ff fb7c 	bl	801a6b0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801afb8:	4b0c      	ldr	r3, [pc, #48]	@ (801afec <csv_update+0x2dc>)
 801afba:	781b      	ldrb	r3, [r3, #0]
 801afbc:	b25a      	sxtb	r2, r3
 801afbe:	4b14      	ldr	r3, [pc, #80]	@ (801b010 <csv_update+0x300>)
 801afc0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801afc4:	bf00      	nop
 801afc6:	3718      	adds	r7, #24
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd80      	pop	{r7, pc}
 801afcc:	200017f0 	.word	0x200017f0
 801afd0:	2000236f 	.word	0x2000236f
 801afd4:	20002370 	.word	0x20002370
 801afd8:	20002371 	.word	0x20002371
 801afdc:	20002372 	.word	0x20002372
 801afe0:	20002373 	.word	0x20002373
 801afe4:	20002374 	.word	0x20002374
 801afe8:	080225fc 	.word	0x080225fc
 801afec:	20002270 	.word	0x20002270
 801aff0:	08022710 	.word	0x08022710
 801aff4:	20002378 	.word	0x20002378
 801aff8:	20002274 	.word	0x20002274
 801affc:	200013c1 	.word	0x200013c1
 801b000:	08022718 	.word	0x08022718
 801b004:	200013f3 	.word	0x200013f3
 801b008:	200022d8 	.word	0x200022d8
 801b00c:	20001457 	.word	0x20001457
 801b010:	2000148c 	.word	0x2000148c
 801b014:	0802272c 	.word	0x0802272c
 801b018:	080226b4 	.word	0x080226b4
 801b01c:	080226bc 	.word	0x080226bc
 801b020:	08022734 	.word	0x08022734
 801b024:	0802273c 	.word	0x0802273c
 801b028:	08022744 	.word	0x08022744

0801b02c <csv_header>:
void csv_header() {
 801b02c:	b580      	push	{r7, lr}
 801b02e:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801b030:	485d      	ldr	r0, [pc, #372]	@ (801b1a8 <csv_header+0x17c>)
 801b032:	f7ff fb11 	bl	801a658 <Mount_SD>
 801b036:	4603      	mov	r3, r0
 801b038:	461a      	mov	r2, r3
 801b03a:	4b5c      	ldr	r3, [pc, #368]	@ (801b1ac <csv_header+0x180>)
 801b03c:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801b03e:	4b5b      	ldr	r3, [pc, #364]	@ (801b1ac <csv_header+0x180>)
 801b040:	781b      	ldrb	r3, [r3, #0]
 801b042:	2b00      	cmp	r3, #0
 801b044:	f040 80a7 	bne.w	801b196 <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801b048:	4959      	ldr	r1, [pc, #356]	@ (801b1b0 <csv_header+0x184>)
 801b04a:	485a      	ldr	r0, [pc, #360]	@ (801b1b4 <csv_header+0x188>)
 801b04c:	f002 f82c 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b050:	4958      	ldr	r1, [pc, #352]	@ (801b1b4 <csv_header+0x188>)
 801b052:	4859      	ldr	r0, [pc, #356]	@ (801b1b8 <csv_header+0x18c>)
 801b054:	f7ff fbee 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b058:	22ff      	movs	r2, #255	@ 0xff
 801b05a:	2100      	movs	r1, #0
 801b05c:	4855      	ldr	r0, [pc, #340]	@ (801b1b4 <csv_header+0x188>)
 801b05e:	f002 f96d 	bl	801d33c <memset>
		sprintf(buffer, "id ,");
 801b062:	4956      	ldr	r1, [pc, #344]	@ (801b1bc <csv_header+0x190>)
 801b064:	4853      	ldr	r0, [pc, #332]	@ (801b1b4 <csv_header+0x188>)
 801b066:	f002 f81f 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b06a:	4952      	ldr	r1, [pc, #328]	@ (801b1b4 <csv_header+0x188>)
 801b06c:	4852      	ldr	r0, [pc, #328]	@ (801b1b8 <csv_header+0x18c>)
 801b06e:	f7ff fbe1 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b072:	22ff      	movs	r2, #255	@ 0xff
 801b074:	2100      	movs	r1, #0
 801b076:	484f      	ldr	r0, [pc, #316]	@ (801b1b4 <csv_header+0x188>)
 801b078:	f002 f960 	bl	801d33c <memset>
		sprintf(buffer, "timestamp ,");
 801b07c:	4950      	ldr	r1, [pc, #320]	@ (801b1c0 <csv_header+0x194>)
 801b07e:	484d      	ldr	r0, [pc, #308]	@ (801b1b4 <csv_header+0x188>)
 801b080:	f002 f812 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b084:	494b      	ldr	r1, [pc, #300]	@ (801b1b4 <csv_header+0x188>)
 801b086:	484c      	ldr	r0, [pc, #304]	@ (801b1b8 <csv_header+0x18c>)
 801b088:	f7ff fbd4 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b08c:	22ff      	movs	r2, #255	@ 0xff
 801b08e:	2100      	movs	r1, #0
 801b090:	4848      	ldr	r0, [pc, #288]	@ (801b1b4 <csv_header+0x188>)
 801b092:	f002 f953 	bl	801d33c <memset>
		sprintf(buffer, "location ,");
 801b096:	494b      	ldr	r1, [pc, #300]	@ (801b1c4 <csv_header+0x198>)
 801b098:	4846      	ldr	r0, [pc, #280]	@ (801b1b4 <csv_header+0x188>)
 801b09a:	f002 f805 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b09e:	4945      	ldr	r1, [pc, #276]	@ (801b1b4 <csv_header+0x188>)
 801b0a0:	4845      	ldr	r0, [pc, #276]	@ (801b1b8 <csv_header+0x18c>)
 801b0a2:	f7ff fbc7 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b0a6:	22ff      	movs	r2, #255	@ 0xff
 801b0a8:	2100      	movs	r1, #0
 801b0aa:	4842      	ldr	r0, [pc, #264]	@ (801b1b4 <csv_header+0x188>)
 801b0ac:	f002 f946 	bl	801d33c <memset>
		sprintf(buffer, "Filename ,");
 801b0b0:	4945      	ldr	r1, [pc, #276]	@ (801b1c8 <csv_header+0x19c>)
 801b0b2:	4840      	ldr	r0, [pc, #256]	@ (801b1b4 <csv_header+0x188>)
 801b0b4:	f001 fff8 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b0b8:	493e      	ldr	r1, [pc, #248]	@ (801b1b4 <csv_header+0x188>)
 801b0ba:	483f      	ldr	r0, [pc, #252]	@ (801b1b8 <csv_header+0x18c>)
 801b0bc:	f7ff fbba 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b0c0:	22ff      	movs	r2, #255	@ 0xff
 801b0c2:	2100      	movs	r1, #0
 801b0c4:	483b      	ldr	r0, [pc, #236]	@ (801b1b4 <csv_header+0x188>)
 801b0c6:	f002 f939 	bl	801d33c <memset>
		sprintf(buffer, "group ,");
 801b0ca:	4940      	ldr	r1, [pc, #256]	@ (801b1cc <csv_header+0x1a0>)
 801b0cc:	4839      	ldr	r0, [pc, #228]	@ (801b1b4 <csv_header+0x188>)
 801b0ce:	f001 ffeb 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b0d2:	4938      	ldr	r1, [pc, #224]	@ (801b1b4 <csv_header+0x188>)
 801b0d4:	4838      	ldr	r0, [pc, #224]	@ (801b1b8 <csv_header+0x18c>)
 801b0d6:	f7ff fbad 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b0da:	22ff      	movs	r2, #255	@ 0xff
 801b0dc:	2100      	movs	r1, #0
 801b0de:	4835      	ldr	r0, [pc, #212]	@ (801b1b4 <csv_header+0x188>)
 801b0e0:	f002 f92c 	bl	801d33c <memset>
		sprintf(buffer, "co2 ,");
 801b0e4:	493a      	ldr	r1, [pc, #232]	@ (801b1d0 <csv_header+0x1a4>)
 801b0e6:	4833      	ldr	r0, [pc, #204]	@ (801b1b4 <csv_header+0x188>)
 801b0e8:	f001 ffde 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b0ec:	4931      	ldr	r1, [pc, #196]	@ (801b1b4 <csv_header+0x188>)
 801b0ee:	4832      	ldr	r0, [pc, #200]	@ (801b1b8 <csv_header+0x18c>)
 801b0f0:	f7ff fba0 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b0f4:	22ff      	movs	r2, #255	@ 0xff
 801b0f6:	2100      	movs	r1, #0
 801b0f8:	482e      	ldr	r0, [pc, #184]	@ (801b1b4 <csv_header+0x188>)
 801b0fa:	f002 f91f 	bl	801d33c <memset>
		sprintf(buffer, "temperature ,");
 801b0fe:	4935      	ldr	r1, [pc, #212]	@ (801b1d4 <csv_header+0x1a8>)
 801b100:	482c      	ldr	r0, [pc, #176]	@ (801b1b4 <csv_header+0x188>)
 801b102:	f001 ffd1 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b106:	492b      	ldr	r1, [pc, #172]	@ (801b1b4 <csv_header+0x188>)
 801b108:	482b      	ldr	r0, [pc, #172]	@ (801b1b8 <csv_header+0x18c>)
 801b10a:	f7ff fb93 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b10e:	22ff      	movs	r2, #255	@ 0xff
 801b110:	2100      	movs	r1, #0
 801b112:	4828      	ldr	r0, [pc, #160]	@ (801b1b4 <csv_header+0x188>)
 801b114:	f002 f912 	bl	801d33c <memset>
		sprintf(buffer, "humidity ,");
 801b118:	492f      	ldr	r1, [pc, #188]	@ (801b1d8 <csv_header+0x1ac>)
 801b11a:	4826      	ldr	r0, [pc, #152]	@ (801b1b4 <csv_header+0x188>)
 801b11c:	f001 ffc4 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b120:	4924      	ldr	r1, [pc, #144]	@ (801b1b4 <csv_header+0x188>)
 801b122:	4825      	ldr	r0, [pc, #148]	@ (801b1b8 <csv_header+0x18c>)
 801b124:	f7ff fb86 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b128:	22ff      	movs	r2, #255	@ 0xff
 801b12a:	2100      	movs	r1, #0
 801b12c:	4821      	ldr	r0, [pc, #132]	@ (801b1b4 <csv_header+0x188>)
 801b12e:	f002 f905 	bl	801d33c <memset>
		sprintf(buffer, "pir ,");
 801b132:	492a      	ldr	r1, [pc, #168]	@ (801b1dc <csv_header+0x1b0>)
 801b134:	481f      	ldr	r0, [pc, #124]	@ (801b1b4 <csv_header+0x188>)
 801b136:	f001 ffb7 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b13a:	491e      	ldr	r1, [pc, #120]	@ (801b1b4 <csv_header+0x188>)
 801b13c:	481e      	ldr	r0, [pc, #120]	@ (801b1b8 <csv_header+0x18c>)
 801b13e:	f7ff fb79 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b142:	22ff      	movs	r2, #255	@ 0xff
 801b144:	2100      	movs	r1, #0
 801b146:	481b      	ldr	r0, [pc, #108]	@ (801b1b4 <csv_header+0x188>)
 801b148:	f002 f8f8 	bl	801d33c <memset>
		sprintf(buffer, "pm2.5 ,");
 801b14c:	4924      	ldr	r1, [pc, #144]	@ (801b1e0 <csv_header+0x1b4>)
 801b14e:	4819      	ldr	r0, [pc, #100]	@ (801b1b4 <csv_header+0x188>)
 801b150:	f001 ffaa 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b154:	4917      	ldr	r1, [pc, #92]	@ (801b1b4 <csv_header+0x188>)
 801b156:	4818      	ldr	r0, [pc, #96]	@ (801b1b8 <csv_header+0x18c>)
 801b158:	f7ff fb6c 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b15c:	22ff      	movs	r2, #255	@ 0xff
 801b15e:	2100      	movs	r1, #0
 801b160:	4814      	ldr	r0, [pc, #80]	@ (801b1b4 <csv_header+0x188>)
 801b162:	f002 f8eb 	bl	801d33c <memset>
		sprintf(buffer, "port ,");
 801b166:	491f      	ldr	r1, [pc, #124]	@ (801b1e4 <csv_header+0x1b8>)
 801b168:	4812      	ldr	r0, [pc, #72]	@ (801b1b4 <csv_header+0x188>)
 801b16a:	f001 ff9d 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b16e:	4911      	ldr	r1, [pc, #68]	@ (801b1b4 <csv_header+0x188>)
 801b170:	4811      	ldr	r0, [pc, #68]	@ (801b1b8 <csv_header+0x18c>)
 801b172:	f7ff fb5f 	bl	801a834 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b176:	22ff      	movs	r2, #255	@ 0xff
 801b178:	2100      	movs	r1, #0
 801b17a:	480e      	ldr	r0, [pc, #56]	@ (801b1b4 <csv_header+0x188>)
 801b17c:	f002 f8de 	bl	801d33c <memset>
		sprintf(buffer, "battery \n\n");
 801b180:	4919      	ldr	r1, [pc, #100]	@ (801b1e8 <csv_header+0x1bc>)
 801b182:	480c      	ldr	r0, [pc, #48]	@ (801b1b4 <csv_header+0x188>)
 801b184:	f001 ff90 	bl	801d0a8 <siprintf>
		Update_File(filename_with_format, buffer);
 801b188:	490a      	ldr	r1, [pc, #40]	@ (801b1b4 <csv_header+0x188>)
 801b18a:	480b      	ldr	r0, [pc, #44]	@ (801b1b8 <csv_header+0x18c>)
 801b18c:	f7ff fb52 	bl	801a834 <Update_File>

		Unmount_SD("/");
 801b190:	4805      	ldr	r0, [pc, #20]	@ (801b1a8 <csv_header+0x17c>)
 801b192:	f7ff fa8d 	bl	801a6b0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801b196:	4b05      	ldr	r3, [pc, #20]	@ (801b1ac <csv_header+0x180>)
 801b198:	781b      	ldrb	r3, [r3, #0]
 801b19a:	b25a      	sxtb	r2, r3
 801b19c:	4b13      	ldr	r3, [pc, #76]	@ (801b1ec <csv_header+0x1c0>)
 801b19e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801b1a2:	bf00      	nop
 801b1a4:	bd80      	pop	{r7, pc}
 801b1a6:	bf00      	nop
 801b1a8:	080225fc 	.word	0x080225fc
 801b1ac:	20002270 	.word	0x20002270
 801b1b0:	08022748 	.word	0x08022748
 801b1b4:	20002378 	.word	0x20002378
 801b1b8:	20002274 	.word	0x20002274
 801b1bc:	08022754 	.word	0x08022754
 801b1c0:	0802275c 	.word	0x0802275c
 801b1c4:	08022768 	.word	0x08022768
 801b1c8:	08022774 	.word	0x08022774
 801b1cc:	08022780 	.word	0x08022780
 801b1d0:	08022788 	.word	0x08022788
 801b1d4:	08022790 	.word	0x08022790
 801b1d8:	080227a0 	.word	0x080227a0
 801b1dc:	080227ac 	.word	0x080227ac
 801b1e0:	080227b4 	.word	0x080227b4
 801b1e4:	080227bc 	.word	0x080227bc
 801b1e8:	080227c4 	.word	0x080227c4
 801b1ec:	2000148c 	.word	0x2000148c

0801b1f0 <filesaving_process>:
uint8_t filesaving_process() {
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801b1f4:	22ff      	movs	r2, #255	@ 0xff
 801b1f6:	2100      	movs	r1, #0
 801b1f8:	480f      	ldr	r0, [pc, #60]	@ (801b238 <filesaving_process+0x48>)
 801b1fa:	f002 f89f 	bl	801d33c <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801b1fe:	4b0f      	ldr	r3, [pc, #60]	@ (801b23c <filesaving_process+0x4c>)
 801b200:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801b204:	2b00      	cmp	r3, #0
 801b206:	d002      	beq.n	801b20e <filesaving_process+0x1e>
		csv_update();
 801b208:	f7ff fd82 	bl	801ad10 <csv_update>
 801b20c:	e001      	b.n	801b212 <filesaving_process+0x22>
	} else {
		json_update();
 801b20e:	f7ff fbcd 	bl	801a9ac <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801b212:	4b0a      	ldr	r3, [pc, #40]	@ (801b23c <filesaving_process+0x4c>)
 801b214:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d006      	beq.n	801b22a <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801b21c:	f7e6 fed0 	bl	8001fc0 <blink_red>
		datawritten = 2;
 801b220:	4b07      	ldr	r3, [pc, #28]	@ (801b240 <filesaving_process+0x50>)
 801b222:	2202      	movs	r2, #2
 801b224:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801b226:	2301      	movs	r3, #1
 801b228:	e003      	b.n	801b232 <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801b22a:	4b05      	ldr	r3, [pc, #20]	@ (801b240 <filesaving_process+0x50>)
 801b22c:	2201      	movs	r2, #1
 801b22e:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801b230:	2300      	movs	r3, #0
//	__enable_irq();
}
 801b232:	4618      	mov	r0, r3
 801b234:	bd80      	pop	{r7, pc}
 801b236:	bf00      	nop
 801b238:	20002378 	.word	0x20002378
 801b23c:	2000148c 	.word	0x2000148c
 801b240:	20002375 	.word	0x20002375

0801b244 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801b244:	b580      	push	{r7, lr}
 801b246:	b08c      	sub	sp, #48	@ 0x30
 801b248:	af04      	add	r7, sp, #16
 801b24a:	6078      	str	r0, [r7, #4]
 801b24c:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801b24e:	f107 031c 	add.w	r3, r7, #28
 801b252:	2200      	movs	r2, #0
 801b254:	4619      	mov	r1, r3
 801b256:	482f      	ldr	r0, [pc, #188]	@ (801b314 <createfile+0xd0>)
 801b258:	f7ee f91c 	bl	8009494 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801b25c:	f107 0308 	add.w	r3, r7, #8
 801b260:	2200      	movs	r2, #0
 801b262:	4619      	mov	r1, r3
 801b264:	482b      	ldr	r0, [pc, #172]	@ (801b314 <createfile+0xd0>)
 801b266:	f7ee f833 	bl	80092d0 <HAL_RTC_GetTime>

	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801b26a:	7ffb      	ldrb	r3, [r7, #31]
 801b26c:	4618      	mov	r0, r3
 801b26e:	7f7b      	ldrb	r3, [r7, #29]
 801b270:	461a      	mov	r2, r3
 801b272:	7fbb      	ldrb	r3, [r7, #30]
 801b274:	4619      	mov	r1, r3
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	9302      	str	r3, [sp, #8]
 801b27a:	9101      	str	r1, [sp, #4]
 801b27c:	9200      	str	r2, [sp, #0]
 801b27e:	4603      	mov	r3, r0
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	4925      	ldr	r1, [pc, #148]	@ (801b318 <createfile+0xd4>)
 801b284:	4825      	ldr	r0, [pc, #148]	@ (801b31c <createfile+0xd8>)
 801b286:	f001 ff0f 	bl	801d0a8 <siprintf>

	sprintf(filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801b28a:	7ffb      	ldrb	r3, [r7, #31]
 801b28c:	4619      	mov	r1, r3
 801b28e:	7f7b      	ldrb	r3, [r7, #29]
 801b290:	7fba      	ldrb	r2, [r7, #30]
 801b292:	9201      	str	r2, [sp, #4]
 801b294:	9300      	str	r3, [sp, #0]
 801b296:	460b      	mov	r3, r1
 801b298:	687a      	ldr	r2, [r7, #4]
 801b29a:	4921      	ldr	r1, [pc, #132]	@ (801b320 <createfile+0xdc>)
 801b29c:	4821      	ldr	r0, [pc, #132]	@ (801b324 <createfile+0xe0>)
 801b29e:	f001 ff03 	bl	801d0a8 <siprintf>


	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801b2a2:	4821      	ldr	r0, [pc, #132]	@ (801b328 <createfile+0xe4>)
 801b2a4:	f7ff f9d8 	bl	801a658 <Mount_SD>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d002      	beq.n	801b2b4 <createfile+0x70>
	} else {
		//	__enable_irq();
		return -1;
 801b2ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b2b2:	e02b      	b.n	801b30c <createfile+0xc8>
	}
	Unmount_SD("/");
 801b2b4:	481c      	ldr	r0, [pc, #112]	@ (801b328 <createfile+0xe4>)
 801b2b6:	f7ff f9fb 	bl	801a6b0 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801b2ba:	481b      	ldr	r0, [pc, #108]	@ (801b328 <createfile+0xe4>)
 801b2bc:	f7ff f9cc 	bl	801a658 <Mount_SD>
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	461a      	mov	r2, r3
 801b2c4:	4b19      	ldr	r3, [pc, #100]	@ (801b32c <createfile+0xe8>)
 801b2c6:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801b2c8:	4b18      	ldr	r3, [pc, #96]	@ (801b32c <createfile+0xe8>)
 801b2ca:	781b      	ldrb	r3, [r3, #0]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d119      	bne.n	801b304 <createfile+0xc0>





		fresult1 = Create_File(filename_with_format);
 801b2d0:	4812      	ldr	r0, [pc, #72]	@ (801b31c <createfile+0xd8>)
 801b2d2:	f7ff fa15 	bl	801a700 <Create_File>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	461a      	mov	r2, r3
 801b2da:	4b14      	ldr	r3, [pc, #80]	@ (801b32c <createfile+0xe8>)
 801b2dc:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801b2de:	4812      	ldr	r0, [pc, #72]	@ (801b328 <createfile+0xe4>)
 801b2e0:	f7ff f9e6 	bl	801a6b0 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801b2e4:	4b12      	ldr	r3, [pc, #72]	@ (801b330 <createfile+0xec>)
 801b2e6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d00d      	beq.n	801b30a <createfile+0xc6>
			if (file_already_exist) {
 801b2ee:	4b11      	ldr	r3, [pc, #68]	@ (801b334 <createfile+0xf0>)
 801b2f0:	781b      	ldrb	r3, [r3, #0]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d003      	beq.n	801b2fe <createfile+0xba>
				file_already_exist = 0;
 801b2f6:	4b0f      	ldr	r3, [pc, #60]	@ (801b334 <createfile+0xf0>)
 801b2f8:	2200      	movs	r2, #0
 801b2fa:	701a      	strb	r2, [r3, #0]
 801b2fc:	e005      	b.n	801b30a <createfile+0xc6>
			} else {
				csv_header();  //json does not require an header only csv
 801b2fe:	f7ff fe95 	bl	801b02c <csv_header>
 801b302:	e002      	b.n	801b30a <createfile+0xc6>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801b304:	f04f 33ff 	mov.w	r3, #4294967295
 801b308:	e000      	b.n	801b30c <createfile+0xc8>
	}
//	__enable_irq();
	return 0;
 801b30a:	2300      	movs	r3, #0
}
 801b30c:	4618      	mov	r0, r3
 801b30e:	3720      	adds	r7, #32
 801b310:	46bd      	mov	sp, r7
 801b312:	bd80      	pop	{r7, pc}
 801b314:	200017f0 	.word	0x200017f0
 801b318:	080227d0 	.word	0x080227d0
 801b31c:	20002274 	.word	0x20002274
 801b320:	080227e4 	.word	0x080227e4
 801b324:	200022d8 	.word	0x200022d8
 801b328:	080225fc 	.word	0x080225fc
 801b32c:	20002270 	.word	0x20002270
 801b330:	2000148c 	.word	0x2000148c
 801b334:	2000236e 	.word	0x2000236e

0801b338 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801b33c:	4905      	ldr	r1, [pc, #20]	@ (801b354 <MX_USB_DEVICE_DeInit+0x1c>)
 801b33e:	4806      	ldr	r0, [pc, #24]	@ (801b358 <MX_USB_DEVICE_DeInit+0x20>)
 801b340:	f7f8 ffd0 	bl	80142e4 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801b344:	4804      	ldr	r0, [pc, #16]	@ (801b358 <MX_USB_DEVICE_DeInit+0x20>)
 801b346:	f7fa ff98 	bl	801627a <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801b34a:	4803      	ldr	r0, [pc, #12]	@ (801b358 <MX_USB_DEVICE_DeInit+0x20>)
 801b34c:	f7fa ff23 	bl	8016196 <USBD_DeInit>

}
 801b350:	bf00      	nop
 801b352:	bd80      	pop	{r7, pc}
 801b354:	20000148 	.word	0x20000148
 801b358:	20002478 	.word	0x20002478

0801b35c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b360:	2200      	movs	r2, #0
 801b362:	4912      	ldr	r1, [pc, #72]	@ (801b3ac <MX_USB_DEVICE_Init+0x50>)
 801b364:	4812      	ldr	r0, [pc, #72]	@ (801b3b0 <MX_USB_DEVICE_Init+0x54>)
 801b366:	f7fa fee6 	bl	8016136 <USBD_Init>
 801b36a:	4603      	mov	r3, r0
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d001      	beq.n	801b374 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b370:	f7e7 ff80 	bl	8003274 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801b374:	490f      	ldr	r1, [pc, #60]	@ (801b3b4 <MX_USB_DEVICE_Init+0x58>)
 801b376:	480e      	ldr	r0, [pc, #56]	@ (801b3b0 <MX_USB_DEVICE_Init+0x54>)
 801b378:	f7fa ff3d 	bl	80161f6 <USBD_RegisterClass>
 801b37c:	4603      	mov	r3, r0
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d001      	beq.n	801b386 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b382:	f7e7 ff77 	bl	8003274 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801b386:	490c      	ldr	r1, [pc, #48]	@ (801b3b8 <MX_USB_DEVICE_Init+0x5c>)
 801b388:	4809      	ldr	r0, [pc, #36]	@ (801b3b0 <MX_USB_DEVICE_Init+0x54>)
 801b38a:	f7f9 f9b3 	bl	80146f4 <USBD_MSC_RegisterStorage>
 801b38e:	4603      	mov	r3, r0
 801b390:	2b00      	cmp	r3, #0
 801b392:	d001      	beq.n	801b398 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b394:	f7e7 ff6e 	bl	8003274 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b398:	4805      	ldr	r0, [pc, #20]	@ (801b3b0 <MX_USB_DEVICE_Init+0x54>)
 801b39a:	f7fa ff62 	bl	8016262 <USBD_Start>
 801b39e:	4603      	mov	r3, r0
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d001      	beq.n	801b3a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b3a4:	f7e7 ff66 	bl	8003274 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b3a8:	bf00      	nop
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	200000f8 	.word	0x200000f8
 801b3b0:	20002478 	.word	0x20002478
 801b3b4:	20000050 	.word	0x20000050
 801b3b8:	20000148 	.word	0x20000148

0801b3bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b3bc:	b480      	push	{r7}
 801b3be:	b083      	sub	sp, #12
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	6039      	str	r1, [r7, #0]
 801b3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b3c8:	683b      	ldr	r3, [r7, #0]
 801b3ca:	2212      	movs	r2, #18
 801b3cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b3ce:	4b03      	ldr	r3, [pc, #12]	@ (801b3dc <USBD_FS_DeviceDescriptor+0x20>)
}
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	370c      	adds	r7, #12
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3da:	4770      	bx	lr
 801b3dc:	20000114 	.word	0x20000114

0801b3e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b3e0:	b480      	push	{r7}
 801b3e2:	b083      	sub	sp, #12
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	6039      	str	r1, [r7, #0]
 801b3ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b3ec:	683b      	ldr	r3, [r7, #0]
 801b3ee:	2204      	movs	r2, #4
 801b3f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b3f2:	4b03      	ldr	r3, [pc, #12]	@ (801b400 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	370c      	adds	r7, #12
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fe:	4770      	bx	lr
 801b400:	20000128 	.word	0x20000128

0801b404 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
 801b40a:	4603      	mov	r3, r0
 801b40c:	6039      	str	r1, [r7, #0]
 801b40e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b410:	79fb      	ldrb	r3, [r7, #7]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d105      	bne.n	801b422 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b416:	683a      	ldr	r2, [r7, #0]
 801b418:	4907      	ldr	r1, [pc, #28]	@ (801b438 <USBD_FS_ProductStrDescriptor+0x34>)
 801b41a:	4808      	ldr	r0, [pc, #32]	@ (801b43c <USBD_FS_ProductStrDescriptor+0x38>)
 801b41c:	f7fc f8e6 	bl	80175ec <USBD_GetString>
 801b420:	e004      	b.n	801b42c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b422:	683a      	ldr	r2, [r7, #0]
 801b424:	4904      	ldr	r1, [pc, #16]	@ (801b438 <USBD_FS_ProductStrDescriptor+0x34>)
 801b426:	4805      	ldr	r0, [pc, #20]	@ (801b43c <USBD_FS_ProductStrDescriptor+0x38>)
 801b428:	f7fc f8e0 	bl	80175ec <USBD_GetString>
  }
  return USBD_StrDesc;
 801b42c:	4b02      	ldr	r3, [pc, #8]	@ (801b438 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b42e:	4618      	mov	r0, r3
 801b430:	3708      	adds	r7, #8
 801b432:	46bd      	mov	sp, r7
 801b434:	bd80      	pop	{r7, pc}
 801b436:	bf00      	nop
 801b438:	20002754 	.word	0x20002754
 801b43c:	080227f8 	.word	0x080227f8

0801b440 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b082      	sub	sp, #8
 801b444:	af00      	add	r7, sp, #0
 801b446:	4603      	mov	r3, r0
 801b448:	6039      	str	r1, [r7, #0]
 801b44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b44c:	683a      	ldr	r2, [r7, #0]
 801b44e:	4904      	ldr	r1, [pc, #16]	@ (801b460 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b450:	4804      	ldr	r0, [pc, #16]	@ (801b464 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b452:	f7fc f8cb 	bl	80175ec <USBD_GetString>
  return USBD_StrDesc;
 801b456:	4b02      	ldr	r3, [pc, #8]	@ (801b460 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b458:	4618      	mov	r0, r3
 801b45a:	3708      	adds	r7, #8
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}
 801b460:	20002754 	.word	0x20002754
 801b464:	0802280c 	.word	0x0802280c

0801b468 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b082      	sub	sp, #8
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	4603      	mov	r3, r0
 801b470:	6039      	str	r1, [r7, #0]
 801b472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b474:	683b      	ldr	r3, [r7, #0]
 801b476:	221a      	movs	r2, #26
 801b478:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b47a:	f000 f843 	bl	801b504 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b47e:	4b02      	ldr	r3, [pc, #8]	@ (801b488 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b480:	4618      	mov	r0, r3
 801b482:	3708      	adds	r7, #8
 801b484:	46bd      	mov	sp, r7
 801b486:	bd80      	pop	{r7, pc}
 801b488:	2000012c 	.word	0x2000012c

0801b48c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b082      	sub	sp, #8
 801b490:	af00      	add	r7, sp, #0
 801b492:	4603      	mov	r3, r0
 801b494:	6039      	str	r1, [r7, #0]
 801b496:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b498:	79fb      	ldrb	r3, [r7, #7]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d105      	bne.n	801b4aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b49e:	683a      	ldr	r2, [r7, #0]
 801b4a0:	4907      	ldr	r1, [pc, #28]	@ (801b4c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b4a2:	4808      	ldr	r0, [pc, #32]	@ (801b4c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b4a4:	f7fc f8a2 	bl	80175ec <USBD_GetString>
 801b4a8:	e004      	b.n	801b4b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b4aa:	683a      	ldr	r2, [r7, #0]
 801b4ac:	4904      	ldr	r1, [pc, #16]	@ (801b4c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b4ae:	4805      	ldr	r0, [pc, #20]	@ (801b4c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b4b0:	f7fc f89c 	bl	80175ec <USBD_GetString>
  }
  return USBD_StrDesc;
 801b4b4:	4b02      	ldr	r3, [pc, #8]	@ (801b4c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	3708      	adds	r7, #8
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	bd80      	pop	{r7, pc}
 801b4be:	bf00      	nop
 801b4c0:	20002754 	.word	0x20002754
 801b4c4:	08022820 	.word	0x08022820

0801b4c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b082      	sub	sp, #8
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	6039      	str	r1, [r7, #0]
 801b4d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b4d4:	79fb      	ldrb	r3, [r7, #7]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d105      	bne.n	801b4e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b4da:	683a      	ldr	r2, [r7, #0]
 801b4dc:	4907      	ldr	r1, [pc, #28]	@ (801b4fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b4de:	4808      	ldr	r0, [pc, #32]	@ (801b500 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b4e0:	f7fc f884 	bl	80175ec <USBD_GetString>
 801b4e4:	e004      	b.n	801b4f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b4e6:	683a      	ldr	r2, [r7, #0]
 801b4e8:	4904      	ldr	r1, [pc, #16]	@ (801b4fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b4ea:	4805      	ldr	r0, [pc, #20]	@ (801b500 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b4ec:	f7fc f87e 	bl	80175ec <USBD_GetString>
  }
  return USBD_StrDesc;
 801b4f0:	4b02      	ldr	r3, [pc, #8]	@ (801b4fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3708      	adds	r7, #8
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}
 801b4fa:	bf00      	nop
 801b4fc:	20002754 	.word	0x20002754
 801b500:	0802282c 	.word	0x0802282c

0801b504 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b084      	sub	sp, #16
 801b508:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b50a:	4b0f      	ldr	r3, [pc, #60]	@ (801b548 <Get_SerialNum+0x44>)
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b510:	4b0e      	ldr	r3, [pc, #56]	@ (801b54c <Get_SerialNum+0x48>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b516:	4b0e      	ldr	r3, [pc, #56]	@ (801b550 <Get_SerialNum+0x4c>)
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b51c:	68fa      	ldr	r2, [r7, #12]
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	4413      	add	r3, r2
 801b522:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d009      	beq.n	801b53e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b52a:	2208      	movs	r2, #8
 801b52c:	4909      	ldr	r1, [pc, #36]	@ (801b554 <Get_SerialNum+0x50>)
 801b52e:	68f8      	ldr	r0, [r7, #12]
 801b530:	f000 f814 	bl	801b55c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b534:	2204      	movs	r2, #4
 801b536:	4908      	ldr	r1, [pc, #32]	@ (801b558 <Get_SerialNum+0x54>)
 801b538:	68b8      	ldr	r0, [r7, #8]
 801b53a:	f000 f80f 	bl	801b55c <IntToUnicode>
  }
}
 801b53e:	bf00      	nop
 801b540:	3710      	adds	r7, #16
 801b542:	46bd      	mov	sp, r7
 801b544:	bd80      	pop	{r7, pc}
 801b546:	bf00      	nop
 801b548:	1fff7a10 	.word	0x1fff7a10
 801b54c:	1fff7a14 	.word	0x1fff7a14
 801b550:	1fff7a18 	.word	0x1fff7a18
 801b554:	2000012e 	.word	0x2000012e
 801b558:	2000013e 	.word	0x2000013e

0801b55c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b55c:	b480      	push	{r7}
 801b55e:	b087      	sub	sp, #28
 801b560:	af00      	add	r7, sp, #0
 801b562:	60f8      	str	r0, [r7, #12]
 801b564:	60b9      	str	r1, [r7, #8]
 801b566:	4613      	mov	r3, r2
 801b568:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b56a:	2300      	movs	r3, #0
 801b56c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b56e:	2300      	movs	r3, #0
 801b570:	75fb      	strb	r3, [r7, #23]
 801b572:	e027      	b.n	801b5c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	0f1b      	lsrs	r3, r3, #28
 801b578:	2b09      	cmp	r3, #9
 801b57a:	d80b      	bhi.n	801b594 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	0f1b      	lsrs	r3, r3, #28
 801b580:	b2da      	uxtb	r2, r3
 801b582:	7dfb      	ldrb	r3, [r7, #23]
 801b584:	005b      	lsls	r3, r3, #1
 801b586:	4619      	mov	r1, r3
 801b588:	68bb      	ldr	r3, [r7, #8]
 801b58a:	440b      	add	r3, r1
 801b58c:	3230      	adds	r2, #48	@ 0x30
 801b58e:	b2d2      	uxtb	r2, r2
 801b590:	701a      	strb	r2, [r3, #0]
 801b592:	e00a      	b.n	801b5aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	0f1b      	lsrs	r3, r3, #28
 801b598:	b2da      	uxtb	r2, r3
 801b59a:	7dfb      	ldrb	r3, [r7, #23]
 801b59c:	005b      	lsls	r3, r3, #1
 801b59e:	4619      	mov	r1, r3
 801b5a0:	68bb      	ldr	r3, [r7, #8]
 801b5a2:	440b      	add	r3, r1
 801b5a4:	3237      	adds	r2, #55	@ 0x37
 801b5a6:	b2d2      	uxtb	r2, r2
 801b5a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	011b      	lsls	r3, r3, #4
 801b5ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b5b0:	7dfb      	ldrb	r3, [r7, #23]
 801b5b2:	005b      	lsls	r3, r3, #1
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	68ba      	ldr	r2, [r7, #8]
 801b5b8:	4413      	add	r3, r2
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b5be:	7dfb      	ldrb	r3, [r7, #23]
 801b5c0:	3301      	adds	r3, #1
 801b5c2:	75fb      	strb	r3, [r7, #23]
 801b5c4:	7dfa      	ldrb	r2, [r7, #23]
 801b5c6:	79fb      	ldrb	r3, [r7, #7]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d3d3      	bcc.n	801b574 <IntToUnicode+0x18>
  }
}
 801b5cc:	bf00      	nop
 801b5ce:	bf00      	nop
 801b5d0:	371c      	adds	r7, #28
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5d8:	4770      	bx	lr

0801b5da <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801b5da:	b480      	push	{r7}
 801b5dc:	b083      	sub	sp, #12
 801b5de:	af00      	add	r7, sp, #0
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801b5e4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	370c      	adds	r7, #12
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f0:	4770      	bx	lr
	...

0801b5f4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b08e      	sub	sp, #56	@ 0x38
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	60b9      	str	r1, [r7, #8]
 801b5fe:	607a      	str	r2, [r7, #4]
 801b600:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801b602:	23ff      	movs	r3, #255	@ 0xff
 801b604:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801b608:	f107 0314 	add.w	r3, r7, #20
 801b60c:	4619      	mov	r1, r3
 801b60e:	480a      	ldr	r0, [pc, #40]	@ (801b638 <STORAGE_GetCapacity_FS+0x44>)
 801b610:	f7ee ff98 	bl	800a544 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b616:	1e5a      	subs	r2, r3, #1
 801b618:	68bb      	ldr	r3, [r7, #8]
 801b61a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801b61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b61e:	b29a      	uxth	r2, r3
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801b624:	2300      	movs	r3, #0
 801b626:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801b62a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801b62e:	4618      	mov	r0, r3
 801b630:	3738      	adds	r7, #56	@ 0x38
 801b632:	46bd      	mov	sp, r7
 801b634:	bd80      	pop	{r7, pc}
 801b636:	bf00      	nop
 801b638:	20001810 	.word	0x20001810

0801b63c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801b63c:	b480      	push	{r7}
 801b63e:	b083      	sub	sp, #12
 801b640:	af00      	add	r7, sp, #0
 801b642:	4603      	mov	r3, r0
 801b644:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801b646:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b648:	4618      	mov	r0, r3
 801b64a:	370c      	adds	r7, #12
 801b64c:	46bd      	mov	sp, r7
 801b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b652:	4770      	bx	lr

0801b654 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801b654:	b480      	push	{r7}
 801b656:	b083      	sub	sp, #12
 801b658:	af00      	add	r7, sp, #0
 801b65a:	4603      	mov	r3, r0
 801b65c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801b65e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b660:	4618      	mov	r0, r3
 801b662:	370c      	adds	r7, #12
 801b664:	46bd      	mov	sp, r7
 801b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66a:	4770      	bx	lr

0801b66c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b088      	sub	sp, #32
 801b670:	af02      	add	r7, sp, #8
 801b672:	60b9      	str	r1, [r7, #8]
 801b674:	607a      	str	r2, [r7, #4]
 801b676:	461a      	mov	r2, r3
 801b678:	4603      	mov	r3, r0
 801b67a:	73fb      	strb	r3, [r7, #15]
 801b67c:	4613      	mov	r3, r2
 801b67e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801b680:	23ff      	movs	r3, #255	@ 0xff
 801b682:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801b684:	f7e8 fb40 	bl	8003d08 <HAL_GetTick>
 801b688:	4603      	mov	r3, r0
 801b68a:	4a0d      	ldr	r2, [pc, #52]	@ (801b6c0 <STORAGE_Read_FS+0x54>)
 801b68c:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b68e:	89bb      	ldrh	r3, [r7, #12]
 801b690:	f04f 32ff 	mov.w	r2, #4294967295
 801b694:	9200      	str	r2, [sp, #0]
 801b696:	687a      	ldr	r2, [r7, #4]
 801b698:	68b9      	ldr	r1, [r7, #8]
 801b69a:	480a      	ldr	r0, [pc, #40]	@ (801b6c4 <STORAGE_Read_FS+0x58>)
 801b69c:	f7ee fa4a 	bl	8009b34 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b6a0:	bf00      	nop
 801b6a2:	4808      	ldr	r0, [pc, #32]	@ (801b6c4 <STORAGE_Read_FS+0x58>)
 801b6a4:	f7ee ff7a 	bl	800a59c <HAL_SD_GetCardState>
 801b6a8:	4603      	mov	r3, r0
 801b6aa:	2b04      	cmp	r3, #4
 801b6ac:	d1f9      	bne.n	801b6a2 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b6b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	3718      	adds	r7, #24
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}
 801b6be:	bf00      	nop
 801b6c0:	20001718 	.word	0x20001718
 801b6c4:	20001810 	.word	0x20001810

0801b6c8 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b088      	sub	sp, #32
 801b6cc:	af02      	add	r7, sp, #8
 801b6ce:	60b9      	str	r1, [r7, #8]
 801b6d0:	607a      	str	r2, [r7, #4]
 801b6d2:	461a      	mov	r2, r3
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	73fb      	strb	r3, [r7, #15]
 801b6d8:	4613      	mov	r3, r2
 801b6da:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801b6dc:	23ff      	movs	r3, #255	@ 0xff
 801b6de:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b6e0:	89bb      	ldrh	r3, [r7, #12]
 801b6e2:	f04f 32ff 	mov.w	r2, #4294967295
 801b6e6:	9200      	str	r2, [sp, #0]
 801b6e8:	687a      	ldr	r2, [r7, #4]
 801b6ea:	68b9      	ldr	r1, [r7, #8]
 801b6ec:	4808      	ldr	r0, [pc, #32]	@ (801b710 <STORAGE_Write_FS+0x48>)
 801b6ee:	f7ee fbff 	bl	8009ef0 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b6f2:	bf00      	nop
 801b6f4:	4806      	ldr	r0, [pc, #24]	@ (801b710 <STORAGE_Write_FS+0x48>)
 801b6f6:	f7ee ff51 	bl	800a59c <HAL_SD_GetCardState>
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	2b04      	cmp	r3, #4
 801b6fe:	d1f9      	bne.n	801b6f4 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801b700:	2300      	movs	r3, #0
 801b702:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b704:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801b708:	4618      	mov	r0, r3
 801b70a:	3718      	adds	r7, #24
 801b70c:	46bd      	mov	sp, r7
 801b70e:	bd80      	pop	{r7, pc}
 801b710:	20001810 	.word	0x20001810

0801b714 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801b714:	b480      	push	{r7}
 801b716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801b718:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801b71a:	4618      	mov	r0, r3
 801b71c:	46bd      	mov	sp, r7
 801b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b722:	4770      	bx	lr

0801b724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b08a      	sub	sp, #40	@ 0x28
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b72c:	f107 0314 	add.w	r3, r7, #20
 801b730:	2200      	movs	r2, #0
 801b732:	601a      	str	r2, [r3, #0]
 801b734:	605a      	str	r2, [r3, #4]
 801b736:	609a      	str	r2, [r3, #8]
 801b738:	60da      	str	r2, [r3, #12]
 801b73a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b744:	d13a      	bne.n	801b7bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b746:	2300      	movs	r3, #0
 801b748:	613b      	str	r3, [r7, #16]
 801b74a:	4b1e      	ldr	r3, [pc, #120]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b74c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b74e:	4a1d      	ldr	r2, [pc, #116]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b750:	f043 0301 	orr.w	r3, r3, #1
 801b754:	6313      	str	r3, [r2, #48]	@ 0x30
 801b756:	4b1b      	ldr	r3, [pc, #108]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b75a:	f003 0301 	and.w	r3, r3, #1
 801b75e:	613b      	str	r3, [r7, #16]
 801b760:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b762:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801b766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b768:	2302      	movs	r3, #2
 801b76a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b76c:	2300      	movs	r3, #0
 801b76e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b770:	2303      	movs	r3, #3
 801b772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b774:	230a      	movs	r3, #10
 801b776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b778:	f107 0314 	add.w	r3, r7, #20
 801b77c:	4619      	mov	r1, r3
 801b77e:	4812      	ldr	r0, [pc, #72]	@ (801b7c8 <HAL_PCD_MspInit+0xa4>)
 801b780:	f7ea f826 	bl	80057d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b784:	4b0f      	ldr	r3, [pc, #60]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b788:	4a0e      	ldr	r2, [pc, #56]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b78e:	6353      	str	r3, [r2, #52]	@ 0x34
 801b790:	2300      	movs	r3, #0
 801b792:	60fb      	str	r3, [r7, #12]
 801b794:	4b0b      	ldr	r3, [pc, #44]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b798:	4a0a      	ldr	r2, [pc, #40]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b79a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801b79e:	6453      	str	r3, [r2, #68]	@ 0x44
 801b7a0:	4b08      	ldr	r3, [pc, #32]	@ (801b7c4 <HAL_PCD_MspInit+0xa0>)
 801b7a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b7a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b7a8:	60fb      	str	r3, [r7, #12]
 801b7aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b7ac:	2200      	movs	r2, #0
 801b7ae:	2100      	movs	r1, #0
 801b7b0:	2043      	movs	r0, #67	@ 0x43
 801b7b2:	f7e9 f88c 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b7b6:	2043      	movs	r0, #67	@ 0x43
 801b7b8:	f7e9 f8a5 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b7bc:	bf00      	nop
 801b7be:	3728      	adds	r7, #40	@ 0x28
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}
 801b7c4:	40023800 	.word	0x40023800
 801b7c8:	40020000 	.word	0x40020000

0801b7cc <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801b7cc:	b580      	push	{r7, lr}
 801b7ce:	b082      	sub	sp, #8
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b7dc:	d10d      	bne.n	801b7fa <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801b7de:	4b09      	ldr	r3, [pc, #36]	@ (801b804 <HAL_PCD_MspDeInit+0x38>)
 801b7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7e2:	4a08      	ldr	r2, [pc, #32]	@ (801b804 <HAL_PCD_MspDeInit+0x38>)
 801b7e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b7e8:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801b7ea:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801b7ee:	4806      	ldr	r0, [pc, #24]	@ (801b808 <HAL_PCD_MspDeInit+0x3c>)
 801b7f0:	f7ea f972 	bl	8005ad8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801b7f4:	2043      	movs	r0, #67	@ 0x43
 801b7f6:	f7e9 f894 	bl	8004922 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801b7fa:	bf00      	nop
 801b7fc:	3708      	adds	r7, #8
 801b7fe:	46bd      	mov	sp, r7
 801b800:	bd80      	pop	{r7, pc}
 801b802:	bf00      	nop
 801b804:	40023800 	.word	0x40023800
 801b808:	40020000 	.word	0x40020000

0801b80c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b80c:	b580      	push	{r7, lr}
 801b80e:	b082      	sub	sp, #8
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801b820:	4619      	mov	r1, r3
 801b822:	4610      	mov	r0, r2
 801b824:	f7fa fd85 	bl	8016332 <USBD_LL_SetupStage>
}
 801b828:	bf00      	nop
 801b82a:	3708      	adds	r7, #8
 801b82c:	46bd      	mov	sp, r7
 801b82e:	bd80      	pop	{r7, pc}

0801b830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b830:	b580      	push	{r7, lr}
 801b832:	b082      	sub	sp, #8
 801b834:	af00      	add	r7, sp, #0
 801b836:	6078      	str	r0, [r7, #4]
 801b838:	460b      	mov	r3, r1
 801b83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801b842:	78fa      	ldrb	r2, [r7, #3]
 801b844:	6879      	ldr	r1, [r7, #4]
 801b846:	4613      	mov	r3, r2
 801b848:	00db      	lsls	r3, r3, #3
 801b84a:	4413      	add	r3, r2
 801b84c:	009b      	lsls	r3, r3, #2
 801b84e:	440b      	add	r3, r1
 801b850:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 801b854:	681a      	ldr	r2, [r3, #0]
 801b856:	78fb      	ldrb	r3, [r7, #3]
 801b858:	4619      	mov	r1, r3
 801b85a:	f7fa fdbf 	bl	80163dc <USBD_LL_DataOutStage>
}
 801b85e:	bf00      	nop
 801b860:	3708      	adds	r7, #8
 801b862:	46bd      	mov	sp, r7
 801b864:	bd80      	pop	{r7, pc}

0801b866 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b866:	b580      	push	{r7, lr}
 801b868:	b082      	sub	sp, #8
 801b86a:	af00      	add	r7, sp, #0
 801b86c:	6078      	str	r0, [r7, #4]
 801b86e:	460b      	mov	r3, r1
 801b870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801b878:	78fa      	ldrb	r2, [r7, #3]
 801b87a:	6879      	ldr	r1, [r7, #4]
 801b87c:	4613      	mov	r3, r2
 801b87e:	00db      	lsls	r3, r3, #3
 801b880:	4413      	add	r3, r2
 801b882:	009b      	lsls	r3, r3, #2
 801b884:	440b      	add	r3, r1
 801b886:	334c      	adds	r3, #76	@ 0x4c
 801b888:	681a      	ldr	r2, [r3, #0]
 801b88a:	78fb      	ldrb	r3, [r7, #3]
 801b88c:	4619      	mov	r1, r3
 801b88e:	f7fa fe58 	bl	8016542 <USBD_LL_DataInStage>
}
 801b892:	bf00      	nop
 801b894:	3708      	adds	r7, #8
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}

0801b89a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b89a:	b580      	push	{r7, lr}
 801b89c:	b082      	sub	sp, #8
 801b89e:	af00      	add	r7, sp, #0
 801b8a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f7fa ff8c 	bl	80167c6 <USBD_LL_SOF>
}
 801b8ae:	bf00      	nop
 801b8b0:	3708      	adds	r7, #8
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bd80      	pop	{r7, pc}

0801b8b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b8b6:	b580      	push	{r7, lr}
 801b8b8:	b084      	sub	sp, #16
 801b8ba:	af00      	add	r7, sp, #0
 801b8bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b8be:	2301      	movs	r3, #1
 801b8c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	68db      	ldr	r3, [r3, #12]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d102      	bne.n	801b8d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	73fb      	strb	r3, [r7, #15]
 801b8ce:	e008      	b.n	801b8e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	68db      	ldr	r3, [r3, #12]
 801b8d4:	2b02      	cmp	r3, #2
 801b8d6:	d102      	bne.n	801b8de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b8d8:	2301      	movs	r3, #1
 801b8da:	73fb      	strb	r3, [r7, #15]
 801b8dc:	e001      	b.n	801b8e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b8de:	f7e7 fcc9 	bl	8003274 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b8e8:	7bfa      	ldrb	r2, [r7, #15]
 801b8ea:	4611      	mov	r1, r2
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	f7fa ff2c 	bl	801674a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	f7fa fed4 	bl	80166a6 <USBD_LL_Reset>
}
 801b8fe:	bf00      	nop
 801b900:	3710      	adds	r7, #16
 801b902:	46bd      	mov	sp, r7
 801b904:	bd80      	pop	{r7, pc}
	...

0801b908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b082      	sub	sp, #8
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b916:	4618      	mov	r0, r3
 801b918:	f7fa ff27 	bl	801676a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	6812      	ldr	r2, [r2, #0]
 801b92a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801b92e:	f043 0301 	orr.w	r3, r3, #1
 801b932:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	6a1b      	ldr	r3, [r3, #32]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d005      	beq.n	801b948 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b93c:	4b04      	ldr	r3, [pc, #16]	@ (801b950 <HAL_PCD_SuspendCallback+0x48>)
 801b93e:	691b      	ldr	r3, [r3, #16]
 801b940:	4a03      	ldr	r2, [pc, #12]	@ (801b950 <HAL_PCD_SuspendCallback+0x48>)
 801b942:	f043 0306 	orr.w	r3, r3, #6
 801b946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b948:	bf00      	nop
 801b94a:	3708      	adds	r7, #8
 801b94c:	46bd      	mov	sp, r7
 801b94e:	bd80      	pop	{r7, pc}
 801b950:	e000ed00 	.word	0xe000ed00

0801b954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b082      	sub	sp, #8
 801b958:	af00      	add	r7, sp, #0
 801b95a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b962:	4618      	mov	r0, r3
 801b964:	f7fa ff17 	bl	8016796 <USBD_LL_Resume>
}
 801b968:	bf00      	nop
 801b96a:	3708      	adds	r7, #8
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b082      	sub	sp, #8
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
 801b978:	460b      	mov	r3, r1
 801b97a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b982:	78fa      	ldrb	r2, [r7, #3]
 801b984:	4611      	mov	r1, r2
 801b986:	4618      	mov	r0, r3
 801b988:	f7fa ff6f 	bl	801686a <USBD_LL_IsoOUTIncomplete>
}
 801b98c:	bf00      	nop
 801b98e:	3708      	adds	r7, #8
 801b990:	46bd      	mov	sp, r7
 801b992:	bd80      	pop	{r7, pc}

0801b994 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b082      	sub	sp, #8
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
 801b99c:	460b      	mov	r3, r1
 801b99e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b9a6:	78fa      	ldrb	r2, [r7, #3]
 801b9a8:	4611      	mov	r1, r2
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f7fa ff2b 	bl	8016806 <USBD_LL_IsoINIncomplete>
}
 801b9b0:	bf00      	nop
 801b9b2:	3708      	adds	r7, #8
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	bd80      	pop	{r7, pc}

0801b9b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b9b8:	b580      	push	{r7, lr}
 801b9ba:	b082      	sub	sp, #8
 801b9bc:	af00      	add	r7, sp, #0
 801b9be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	f7fa ff81 	bl	80168ce <USBD_LL_DevConnected>
}
 801b9cc:	bf00      	nop
 801b9ce:	3708      	adds	r7, #8
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}

0801b9d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b082      	sub	sp, #8
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	f7fa ff7e 	bl	80168e4 <USBD_LL_DevDisconnected>
}
 801b9e8:	bf00      	nop
 801b9ea:	3708      	adds	r7, #8
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd80      	pop	{r7, pc}

0801b9f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b082      	sub	sp, #8
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	781b      	ldrb	r3, [r3, #0]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d13c      	bne.n	801ba7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801ba00:	4a20      	ldr	r2, [pc, #128]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	4a1e      	ldr	r2, [pc, #120]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801ba10:	4b1c      	ldr	r3, [pc, #112]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801ba16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801ba18:	4b1a      	ldr	r3, [pc, #104]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba1a:	2204      	movs	r2, #4
 801ba1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ba1e:	4b19      	ldr	r3, [pc, #100]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba20:	2202      	movs	r2, #2
 801ba22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801ba24:	4b17      	ldr	r3, [pc, #92]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba26:	2200      	movs	r2, #0
 801ba28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ba2a:	4b16      	ldr	r3, [pc, #88]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba2c:	2202      	movs	r2, #2
 801ba2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ba30:	4b14      	ldr	r3, [pc, #80]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba32:	2200      	movs	r2, #0
 801ba34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ba36:	4b13      	ldr	r3, [pc, #76]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba38:	2200      	movs	r2, #0
 801ba3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ba3c:	4b11      	ldr	r3, [pc, #68]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba3e:	2200      	movs	r2, #0
 801ba40:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ba42:	4b10      	ldr	r3, [pc, #64]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba44:	2200      	movs	r2, #0
 801ba46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ba48:	4b0e      	ldr	r3, [pc, #56]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba4a:	2200      	movs	r2, #0
 801ba4c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ba4e:	480d      	ldr	r0, [pc, #52]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba50:	f7eb fab5 	bl	8006fbe <HAL_PCD_Init>
 801ba54:	4603      	mov	r3, r0
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d001      	beq.n	801ba5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801ba5a:	f7e7 fc0b 	bl	8003274 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ba5e:	2180      	movs	r1, #128	@ 0x80
 801ba60:	4808      	ldr	r0, [pc, #32]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba62:	f7ec fd96 	bl	8008592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ba66:	2240      	movs	r2, #64	@ 0x40
 801ba68:	2100      	movs	r1, #0
 801ba6a:	4806      	ldr	r0, [pc, #24]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba6c:	f7ec fd4a 	bl	8008504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ba70:	2280      	movs	r2, #128	@ 0x80
 801ba72:	2101      	movs	r1, #1
 801ba74:	4803      	ldr	r0, [pc, #12]	@ (801ba84 <USBD_LL_Init+0x94>)
 801ba76:	f7ec fd45 	bl	8008504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ba7a:	2300      	movs	r3, #0
}
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	3708      	adds	r7, #8
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}
 801ba84:	20002954 	.word	0x20002954

0801ba88 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b084      	sub	sp, #16
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba90:	2300      	movs	r3, #0
 801ba92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ba94:	2300      	movs	r3, #0
 801ba96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ba9e:	4618      	mov	r0, r3
 801baa0:	f7eb fbaa 	bl	80071f8 <HAL_PCD_DeInit>
 801baa4:	4603      	mov	r3, r0
 801baa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801baa8:	7bfb      	ldrb	r3, [r7, #15]
 801baaa:	4618      	mov	r0, r3
 801baac:	f000 f998 	bl	801bde0 <USBD_Get_USB_Status>
 801bab0:	4603      	mov	r3, r0
 801bab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bab4:	7bbb      	ldrb	r3, [r7, #14]
}
 801bab6:	4618      	mov	r0, r3
 801bab8:	3710      	adds	r7, #16
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}

0801babe <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801babe:	b580      	push	{r7, lr}
 801bac0:	b084      	sub	sp, #16
 801bac2:	af00      	add	r7, sp, #0
 801bac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bac6:	2300      	movs	r3, #0
 801bac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801baca:	2300      	movs	r3, #0
 801bacc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bad4:	4618      	mov	r0, r3
 801bad6:	f7eb fbb2 	bl	800723e <HAL_PCD_Start>
 801bada:	4603      	mov	r3, r0
 801badc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bade:	7bfb      	ldrb	r3, [r7, #15]
 801bae0:	4618      	mov	r0, r3
 801bae2:	f000 f97d 	bl	801bde0 <USBD_Get_USB_Status>
 801bae6:	4603      	mov	r3, r0
 801bae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801baea:	7bbb      	ldrb	r3, [r7, #14]
}
 801baec:	4618      	mov	r0, r3
 801baee:	3710      	adds	r7, #16
 801baf0:	46bd      	mov	sp, r7
 801baf2:	bd80      	pop	{r7, pc}

0801baf4 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b084      	sub	sp, #16
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bafc:	2300      	movs	r3, #0
 801bafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb00:	2300      	movs	r3, #0
 801bb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	f7eb fbca 	bl	80072a4 <HAL_PCD_Stop>
 801bb10:	4603      	mov	r3, r0
 801bb12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb14:	7bfb      	ldrb	r3, [r7, #15]
 801bb16:	4618      	mov	r0, r3
 801bb18:	f000 f962 	bl	801bde0 <USBD_Get_USB_Status>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bb20:	7bbb      	ldrb	r3, [r7, #14]
}
 801bb22:	4618      	mov	r0, r3
 801bb24:	3710      	adds	r7, #16
 801bb26:	46bd      	mov	sp, r7
 801bb28:	bd80      	pop	{r7, pc}

0801bb2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bb2a:	b580      	push	{r7, lr}
 801bb2c:	b084      	sub	sp, #16
 801bb2e:	af00      	add	r7, sp, #0
 801bb30:	6078      	str	r0, [r7, #4]
 801bb32:	4608      	mov	r0, r1
 801bb34:	4611      	mov	r1, r2
 801bb36:	461a      	mov	r2, r3
 801bb38:	4603      	mov	r3, r0
 801bb3a:	70fb      	strb	r3, [r7, #3]
 801bb3c:	460b      	mov	r3, r1
 801bb3e:	70bb      	strb	r3, [r7, #2]
 801bb40:	4613      	mov	r3, r2
 801bb42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb44:	2300      	movs	r3, #0
 801bb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb48:	2300      	movs	r3, #0
 801bb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bb52:	78bb      	ldrb	r3, [r7, #2]
 801bb54:	883a      	ldrh	r2, [r7, #0]
 801bb56:	78f9      	ldrb	r1, [r7, #3]
 801bb58:	f7ec f8a1 	bl	8007c9e <HAL_PCD_EP_Open>
 801bb5c:	4603      	mov	r3, r0
 801bb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb60:	7bfb      	ldrb	r3, [r7, #15]
 801bb62:	4618      	mov	r0, r3
 801bb64:	f000 f93c 	bl	801bde0 <USBD_Get_USB_Status>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3710      	adds	r7, #16
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}

0801bb76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bb76:	b580      	push	{r7, lr}
 801bb78:	b084      	sub	sp, #16
 801bb7a:	af00      	add	r7, sp, #0
 801bb7c:	6078      	str	r0, [r7, #4]
 801bb7e:	460b      	mov	r3, r1
 801bb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb82:	2300      	movs	r3, #0
 801bb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb86:	2300      	movs	r3, #0
 801bb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bb90:	78fa      	ldrb	r2, [r7, #3]
 801bb92:	4611      	mov	r1, r2
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7ec f8ea 	bl	8007d6e <HAL_PCD_EP_Close>
 801bb9a:	4603      	mov	r3, r0
 801bb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb9e:	7bfb      	ldrb	r3, [r7, #15]
 801bba0:	4618      	mov	r0, r3
 801bba2:	f000 f91d 	bl	801bde0 <USBD_Get_USB_Status>
 801bba6:	4603      	mov	r3, r0
 801bba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801bbac:	4618      	mov	r0, r3
 801bbae:	3710      	adds	r7, #16
 801bbb0:	46bd      	mov	sp, r7
 801bbb2:	bd80      	pop	{r7, pc}

0801bbb4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bbb4:	b580      	push	{r7, lr}
 801bbb6:	b084      	sub	sp, #16
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
 801bbbc:	460b      	mov	r3, r1
 801bbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bbce:	78fa      	ldrb	r2, [r7, #3]
 801bbd0:	4611      	mov	r1, r2
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7ec faad 	bl	8008132 <HAL_PCD_EP_Flush>
 801bbd8:	4603      	mov	r3, r0
 801bbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bbdc:	7bfb      	ldrb	r3, [r7, #15]
 801bbde:	4618      	mov	r0, r3
 801bbe0:	f000 f8fe 	bl	801bde0 <USBD_Get_USB_Status>
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 801bbea:	4618      	mov	r0, r3
 801bbec:	3710      	adds	r7, #16
 801bbee:	46bd      	mov	sp, r7
 801bbf0:	bd80      	pop	{r7, pc}

0801bbf2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bbf2:	b580      	push	{r7, lr}
 801bbf4:	b084      	sub	sp, #16
 801bbf6:	af00      	add	r7, sp, #0
 801bbf8:	6078      	str	r0, [r7, #4]
 801bbfa:	460b      	mov	r3, r1
 801bbfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc02:	2300      	movs	r3, #0
 801bc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bc0c:	78fa      	ldrb	r2, [r7, #3]
 801bc0e:	4611      	mov	r1, r2
 801bc10:	4618      	mov	r0, r3
 801bc12:	f7ec f9a3 	bl	8007f5c <HAL_PCD_EP_SetStall>
 801bc16:	4603      	mov	r3, r0
 801bc18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc1a:	7bfb      	ldrb	r3, [r7, #15]
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f000 f8df 	bl	801bde0 <USBD_Get_USB_Status>
 801bc22:	4603      	mov	r3, r0
 801bc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc26:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc28:	4618      	mov	r0, r3
 801bc2a:	3710      	adds	r7, #16
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	bd80      	pop	{r7, pc}

0801bc30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b084      	sub	sp, #16
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
 801bc38:	460b      	mov	r3, r1
 801bc3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc40:	2300      	movs	r3, #0
 801bc42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bc4a:	78fa      	ldrb	r2, [r7, #3]
 801bc4c:	4611      	mov	r1, r2
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7ec f9e8 	bl	8008024 <HAL_PCD_EP_ClrStall>
 801bc54:	4603      	mov	r3, r0
 801bc56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc58:	7bfb      	ldrb	r3, [r7, #15]
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	f000 f8c0 	bl	801bde0 <USBD_Get_USB_Status>
 801bc60:	4603      	mov	r3, r0
 801bc62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc64:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc66:	4618      	mov	r0, r3
 801bc68:	3710      	adds	r7, #16
 801bc6a:	46bd      	mov	sp, r7
 801bc6c:	bd80      	pop	{r7, pc}

0801bc6e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bc6e:	b480      	push	{r7}
 801bc70:	b085      	sub	sp, #20
 801bc72:	af00      	add	r7, sp, #0
 801bc74:	6078      	str	r0, [r7, #4]
 801bc76:	460b      	mov	r3, r1
 801bc78:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bc80:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801bc82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	da0b      	bge.n	801bca2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801bc8a:	78fb      	ldrb	r3, [r7, #3]
 801bc8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bc90:	68f9      	ldr	r1, [r7, #12]
 801bc92:	4613      	mov	r3, r2
 801bc94:	00db      	lsls	r3, r3, #3
 801bc96:	4413      	add	r3, r2
 801bc98:	009b      	lsls	r3, r3, #2
 801bc9a:	440b      	add	r3, r1
 801bc9c:	333e      	adds	r3, #62	@ 0x3e
 801bc9e:	781b      	ldrb	r3, [r3, #0]
 801bca0:	e00b      	b.n	801bcba <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801bca2:	78fb      	ldrb	r3, [r7, #3]
 801bca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bca8:	68f9      	ldr	r1, [r7, #12]
 801bcaa:	4613      	mov	r3, r2
 801bcac:	00db      	lsls	r3, r3, #3
 801bcae:	4413      	add	r3, r2
 801bcb0:	009b      	lsls	r3, r3, #2
 801bcb2:	440b      	add	r3, r1
 801bcb4:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801bcb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bcba:	4618      	mov	r0, r3
 801bcbc:	3714      	adds	r7, #20
 801bcbe:	46bd      	mov	sp, r7
 801bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc4:	4770      	bx	lr

0801bcc6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801bcc6:	b580      	push	{r7, lr}
 801bcc8:	b084      	sub	sp, #16
 801bcca:	af00      	add	r7, sp, #0
 801bccc:	6078      	str	r0, [r7, #4]
 801bcce:	460b      	mov	r3, r1
 801bcd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bce0:	78fa      	ldrb	r2, [r7, #3]
 801bce2:	4611      	mov	r1, r2
 801bce4:	4618      	mov	r0, r3
 801bce6:	f7eb ffb5 	bl	8007c54 <HAL_PCD_SetAddress>
 801bcea:	4603      	mov	r3, r0
 801bcec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bcee:	7bfb      	ldrb	r3, [r7, #15]
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f000 f875 	bl	801bde0 <USBD_Get_USB_Status>
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bcfa:	7bbb      	ldrb	r3, [r7, #14]
}
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	3710      	adds	r7, #16
 801bd00:	46bd      	mov	sp, r7
 801bd02:	bd80      	pop	{r7, pc}

0801bd04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b086      	sub	sp, #24
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	60f8      	str	r0, [r7, #12]
 801bd0c:	607a      	str	r2, [r7, #4]
 801bd0e:	603b      	str	r3, [r7, #0]
 801bd10:	460b      	mov	r3, r1
 801bd12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bd14:	2300      	movs	r3, #0
 801bd16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bd18:	2300      	movs	r3, #0
 801bd1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bd22:	7af9      	ldrb	r1, [r7, #11]
 801bd24:	683b      	ldr	r3, [r7, #0]
 801bd26:	687a      	ldr	r2, [r7, #4]
 801bd28:	f7ec f8ce 	bl	8007ec8 <HAL_PCD_EP_Transmit>
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bd30:	7dfb      	ldrb	r3, [r7, #23]
 801bd32:	4618      	mov	r0, r3
 801bd34:	f000 f854 	bl	801bde0 <USBD_Get_USB_Status>
 801bd38:	4603      	mov	r3, r0
 801bd3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bd3c:	7dbb      	ldrb	r3, [r7, #22]
}
 801bd3e:	4618      	mov	r0, r3
 801bd40:	3718      	adds	r7, #24
 801bd42:	46bd      	mov	sp, r7
 801bd44:	bd80      	pop	{r7, pc}

0801bd46 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bd46:	b580      	push	{r7, lr}
 801bd48:	b086      	sub	sp, #24
 801bd4a:	af00      	add	r7, sp, #0
 801bd4c:	60f8      	str	r0, [r7, #12]
 801bd4e:	607a      	str	r2, [r7, #4]
 801bd50:	603b      	str	r3, [r7, #0]
 801bd52:	460b      	mov	r3, r1
 801bd54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bd56:	2300      	movs	r3, #0
 801bd58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bd64:	7af9      	ldrb	r1, [r7, #11]
 801bd66:	683b      	ldr	r3, [r7, #0]
 801bd68:	687a      	ldr	r2, [r7, #4]
 801bd6a:	f7ec f84a 	bl	8007e02 <HAL_PCD_EP_Receive>
 801bd6e:	4603      	mov	r3, r0
 801bd70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bd72:	7dfb      	ldrb	r3, [r7, #23]
 801bd74:	4618      	mov	r0, r3
 801bd76:	f000 f833 	bl	801bde0 <USBD_Get_USB_Status>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bd7e:	7dbb      	ldrb	r3, [r7, #22]
}
 801bd80:	4618      	mov	r0, r3
 801bd82:	3718      	adds	r7, #24
 801bd84:	46bd      	mov	sp, r7
 801bd86:	bd80      	pop	{r7, pc}

0801bd88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b082      	sub	sp, #8
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	6078      	str	r0, [r7, #4]
 801bd90:	460b      	mov	r3, r1
 801bd92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bd9a:	78fa      	ldrb	r2, [r7, #3]
 801bd9c:	4611      	mov	r1, r2
 801bd9e:	4618      	mov	r0, r3
 801bda0:	f7ec f87a 	bl	8007e98 <HAL_PCD_EP_GetRxCount>
 801bda4:	4603      	mov	r3, r0
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	3708      	adds	r7, #8
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}
	...

0801bdb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801bdb0:	b480      	push	{r7}
 801bdb2:	b083      	sub	sp, #12
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801bdb8:	4b03      	ldr	r3, [pc, #12]	@ (801bdc8 <USBD_static_malloc+0x18>)
}
 801bdba:	4618      	mov	r0, r3
 801bdbc:	370c      	adds	r7, #12
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc4:	4770      	bx	lr
 801bdc6:	bf00      	nop
 801bdc8:	20002e60 	.word	0x20002e60

0801bdcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801bdcc:	b480      	push	{r7}
 801bdce:	b083      	sub	sp, #12
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]

}
 801bdd4:	bf00      	nop
 801bdd6:	370c      	adds	r7, #12
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdde:	4770      	bx	lr

0801bde0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801bde0:	b480      	push	{r7}
 801bde2:	b085      	sub	sp, #20
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	4603      	mov	r3, r0
 801bde8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bdea:	2300      	movs	r3, #0
 801bdec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801bdee:	79fb      	ldrb	r3, [r7, #7]
 801bdf0:	2b03      	cmp	r3, #3
 801bdf2:	d817      	bhi.n	801be24 <USBD_Get_USB_Status+0x44>
 801bdf4:	a201      	add	r2, pc, #4	@ (adr r2, 801bdfc <USBD_Get_USB_Status+0x1c>)
 801bdf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdfa:	bf00      	nop
 801bdfc:	0801be0d 	.word	0x0801be0d
 801be00:	0801be13 	.word	0x0801be13
 801be04:	0801be19 	.word	0x0801be19
 801be08:	0801be1f 	.word	0x0801be1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801be0c:	2300      	movs	r3, #0
 801be0e:	73fb      	strb	r3, [r7, #15]
    break;
 801be10:	e00b      	b.n	801be2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801be12:	2303      	movs	r3, #3
 801be14:	73fb      	strb	r3, [r7, #15]
    break;
 801be16:	e008      	b.n	801be2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801be18:	2301      	movs	r3, #1
 801be1a:	73fb      	strb	r3, [r7, #15]
    break;
 801be1c:	e005      	b.n	801be2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801be1e:	2303      	movs	r3, #3
 801be20:	73fb      	strb	r3, [r7, #15]
    break;
 801be22:	e002      	b.n	801be2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801be24:	2303      	movs	r3, #3
 801be26:	73fb      	strb	r3, [r7, #15]
    break;
 801be28:	bf00      	nop
  }
  return usb_status;
 801be2a:	7bfb      	ldrb	r3, [r7, #15]
}
 801be2c:	4618      	mov	r0, r3
 801be2e:	3714      	adds	r7, #20
 801be30:	46bd      	mov	sp, r7
 801be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be36:	4770      	bx	lr

0801be38 <atoi>:
 801be38:	220a      	movs	r2, #10
 801be3a:	2100      	movs	r1, #0
 801be3c:	f000 b932 	b.w	801c0a4 <strtol>

0801be40 <malloc>:
 801be40:	4b02      	ldr	r3, [pc, #8]	@ (801be4c <malloc+0xc>)
 801be42:	4601      	mov	r1, r0
 801be44:	6818      	ldr	r0, [r3, #0]
 801be46:	f000 b825 	b.w	801be94 <_malloc_r>
 801be4a:	bf00      	nop
 801be4c:	20000174 	.word	0x20000174

0801be50 <sbrk_aligned>:
 801be50:	b570      	push	{r4, r5, r6, lr}
 801be52:	4e0f      	ldr	r6, [pc, #60]	@ (801be90 <sbrk_aligned+0x40>)
 801be54:	460c      	mov	r4, r1
 801be56:	6831      	ldr	r1, [r6, #0]
 801be58:	4605      	mov	r5, r0
 801be5a:	b911      	cbnz	r1, 801be62 <sbrk_aligned+0x12>
 801be5c:	f001 fb2e 	bl	801d4bc <_sbrk_r>
 801be60:	6030      	str	r0, [r6, #0]
 801be62:	4621      	mov	r1, r4
 801be64:	4628      	mov	r0, r5
 801be66:	f001 fb29 	bl	801d4bc <_sbrk_r>
 801be6a:	1c43      	adds	r3, r0, #1
 801be6c:	d103      	bne.n	801be76 <sbrk_aligned+0x26>
 801be6e:	f04f 34ff 	mov.w	r4, #4294967295
 801be72:	4620      	mov	r0, r4
 801be74:	bd70      	pop	{r4, r5, r6, pc}
 801be76:	1cc4      	adds	r4, r0, #3
 801be78:	f024 0403 	bic.w	r4, r4, #3
 801be7c:	42a0      	cmp	r0, r4
 801be7e:	d0f8      	beq.n	801be72 <sbrk_aligned+0x22>
 801be80:	1a21      	subs	r1, r4, r0
 801be82:	4628      	mov	r0, r5
 801be84:	f001 fb1a 	bl	801d4bc <_sbrk_r>
 801be88:	3001      	adds	r0, #1
 801be8a:	d1f2      	bne.n	801be72 <sbrk_aligned+0x22>
 801be8c:	e7ef      	b.n	801be6e <sbrk_aligned+0x1e>
 801be8e:	bf00      	nop
 801be90:	200036d8 	.word	0x200036d8

0801be94 <_malloc_r>:
 801be94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be98:	1ccd      	adds	r5, r1, #3
 801be9a:	f025 0503 	bic.w	r5, r5, #3
 801be9e:	3508      	adds	r5, #8
 801bea0:	2d0c      	cmp	r5, #12
 801bea2:	bf38      	it	cc
 801bea4:	250c      	movcc	r5, #12
 801bea6:	2d00      	cmp	r5, #0
 801bea8:	4606      	mov	r6, r0
 801beaa:	db01      	blt.n	801beb0 <_malloc_r+0x1c>
 801beac:	42a9      	cmp	r1, r5
 801beae:	d904      	bls.n	801beba <_malloc_r+0x26>
 801beb0:	230c      	movs	r3, #12
 801beb2:	6033      	str	r3, [r6, #0]
 801beb4:	2000      	movs	r0, #0
 801beb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801beba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bf90 <_malloc_r+0xfc>
 801bebe:	f000 f869 	bl	801bf94 <__malloc_lock>
 801bec2:	f8d8 3000 	ldr.w	r3, [r8]
 801bec6:	461c      	mov	r4, r3
 801bec8:	bb44      	cbnz	r4, 801bf1c <_malloc_r+0x88>
 801beca:	4629      	mov	r1, r5
 801becc:	4630      	mov	r0, r6
 801bece:	f7ff ffbf 	bl	801be50 <sbrk_aligned>
 801bed2:	1c43      	adds	r3, r0, #1
 801bed4:	4604      	mov	r4, r0
 801bed6:	d158      	bne.n	801bf8a <_malloc_r+0xf6>
 801bed8:	f8d8 4000 	ldr.w	r4, [r8]
 801bedc:	4627      	mov	r7, r4
 801bede:	2f00      	cmp	r7, #0
 801bee0:	d143      	bne.n	801bf6a <_malloc_r+0xd6>
 801bee2:	2c00      	cmp	r4, #0
 801bee4:	d04b      	beq.n	801bf7e <_malloc_r+0xea>
 801bee6:	6823      	ldr	r3, [r4, #0]
 801bee8:	4639      	mov	r1, r7
 801beea:	4630      	mov	r0, r6
 801beec:	eb04 0903 	add.w	r9, r4, r3
 801bef0:	f001 fae4 	bl	801d4bc <_sbrk_r>
 801bef4:	4581      	cmp	r9, r0
 801bef6:	d142      	bne.n	801bf7e <_malloc_r+0xea>
 801bef8:	6821      	ldr	r1, [r4, #0]
 801befa:	1a6d      	subs	r5, r5, r1
 801befc:	4629      	mov	r1, r5
 801befe:	4630      	mov	r0, r6
 801bf00:	f7ff ffa6 	bl	801be50 <sbrk_aligned>
 801bf04:	3001      	adds	r0, #1
 801bf06:	d03a      	beq.n	801bf7e <_malloc_r+0xea>
 801bf08:	6823      	ldr	r3, [r4, #0]
 801bf0a:	442b      	add	r3, r5
 801bf0c:	6023      	str	r3, [r4, #0]
 801bf0e:	f8d8 3000 	ldr.w	r3, [r8]
 801bf12:	685a      	ldr	r2, [r3, #4]
 801bf14:	bb62      	cbnz	r2, 801bf70 <_malloc_r+0xdc>
 801bf16:	f8c8 7000 	str.w	r7, [r8]
 801bf1a:	e00f      	b.n	801bf3c <_malloc_r+0xa8>
 801bf1c:	6822      	ldr	r2, [r4, #0]
 801bf1e:	1b52      	subs	r2, r2, r5
 801bf20:	d420      	bmi.n	801bf64 <_malloc_r+0xd0>
 801bf22:	2a0b      	cmp	r2, #11
 801bf24:	d917      	bls.n	801bf56 <_malloc_r+0xc2>
 801bf26:	1961      	adds	r1, r4, r5
 801bf28:	42a3      	cmp	r3, r4
 801bf2a:	6025      	str	r5, [r4, #0]
 801bf2c:	bf18      	it	ne
 801bf2e:	6059      	strne	r1, [r3, #4]
 801bf30:	6863      	ldr	r3, [r4, #4]
 801bf32:	bf08      	it	eq
 801bf34:	f8c8 1000 	streq.w	r1, [r8]
 801bf38:	5162      	str	r2, [r4, r5]
 801bf3a:	604b      	str	r3, [r1, #4]
 801bf3c:	4630      	mov	r0, r6
 801bf3e:	f000 f82f 	bl	801bfa0 <__malloc_unlock>
 801bf42:	f104 000b 	add.w	r0, r4, #11
 801bf46:	1d23      	adds	r3, r4, #4
 801bf48:	f020 0007 	bic.w	r0, r0, #7
 801bf4c:	1ac2      	subs	r2, r0, r3
 801bf4e:	bf1c      	itt	ne
 801bf50:	1a1b      	subne	r3, r3, r0
 801bf52:	50a3      	strne	r3, [r4, r2]
 801bf54:	e7af      	b.n	801beb6 <_malloc_r+0x22>
 801bf56:	6862      	ldr	r2, [r4, #4]
 801bf58:	42a3      	cmp	r3, r4
 801bf5a:	bf0c      	ite	eq
 801bf5c:	f8c8 2000 	streq.w	r2, [r8]
 801bf60:	605a      	strne	r2, [r3, #4]
 801bf62:	e7eb      	b.n	801bf3c <_malloc_r+0xa8>
 801bf64:	4623      	mov	r3, r4
 801bf66:	6864      	ldr	r4, [r4, #4]
 801bf68:	e7ae      	b.n	801bec8 <_malloc_r+0x34>
 801bf6a:	463c      	mov	r4, r7
 801bf6c:	687f      	ldr	r7, [r7, #4]
 801bf6e:	e7b6      	b.n	801bede <_malloc_r+0x4a>
 801bf70:	461a      	mov	r2, r3
 801bf72:	685b      	ldr	r3, [r3, #4]
 801bf74:	42a3      	cmp	r3, r4
 801bf76:	d1fb      	bne.n	801bf70 <_malloc_r+0xdc>
 801bf78:	2300      	movs	r3, #0
 801bf7a:	6053      	str	r3, [r2, #4]
 801bf7c:	e7de      	b.n	801bf3c <_malloc_r+0xa8>
 801bf7e:	230c      	movs	r3, #12
 801bf80:	6033      	str	r3, [r6, #0]
 801bf82:	4630      	mov	r0, r6
 801bf84:	f000 f80c 	bl	801bfa0 <__malloc_unlock>
 801bf88:	e794      	b.n	801beb4 <_malloc_r+0x20>
 801bf8a:	6005      	str	r5, [r0, #0]
 801bf8c:	e7d6      	b.n	801bf3c <_malloc_r+0xa8>
 801bf8e:	bf00      	nop
 801bf90:	200036dc 	.word	0x200036dc

0801bf94 <__malloc_lock>:
 801bf94:	4801      	ldr	r0, [pc, #4]	@ (801bf9c <__malloc_lock+0x8>)
 801bf96:	f001 bade 	b.w	801d556 <__retarget_lock_acquire_recursive>
 801bf9a:	bf00      	nop
 801bf9c:	20003820 	.word	0x20003820

0801bfa0 <__malloc_unlock>:
 801bfa0:	4801      	ldr	r0, [pc, #4]	@ (801bfa8 <__malloc_unlock+0x8>)
 801bfa2:	f001 bad9 	b.w	801d558 <__retarget_lock_release_recursive>
 801bfa6:	bf00      	nop
 801bfa8:	20003820 	.word	0x20003820

0801bfac <_strtol_l.constprop.0>:
 801bfac:	2b24      	cmp	r3, #36	@ 0x24
 801bfae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfb2:	4686      	mov	lr, r0
 801bfb4:	4690      	mov	r8, r2
 801bfb6:	d801      	bhi.n	801bfbc <_strtol_l.constprop.0+0x10>
 801bfb8:	2b01      	cmp	r3, #1
 801bfba:	d106      	bne.n	801bfca <_strtol_l.constprop.0+0x1e>
 801bfbc:	f001 faa0 	bl	801d500 <__errno>
 801bfc0:	2316      	movs	r3, #22
 801bfc2:	6003      	str	r3, [r0, #0]
 801bfc4:	2000      	movs	r0, #0
 801bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfca:	4834      	ldr	r0, [pc, #208]	@ (801c09c <_strtol_l.constprop.0+0xf0>)
 801bfcc:	460d      	mov	r5, r1
 801bfce:	462a      	mov	r2, r5
 801bfd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bfd4:	5d06      	ldrb	r6, [r0, r4]
 801bfd6:	f016 0608 	ands.w	r6, r6, #8
 801bfda:	d1f8      	bne.n	801bfce <_strtol_l.constprop.0+0x22>
 801bfdc:	2c2d      	cmp	r4, #45	@ 0x2d
 801bfde:	d12d      	bne.n	801c03c <_strtol_l.constprop.0+0x90>
 801bfe0:	782c      	ldrb	r4, [r5, #0]
 801bfe2:	2601      	movs	r6, #1
 801bfe4:	1c95      	adds	r5, r2, #2
 801bfe6:	f033 0210 	bics.w	r2, r3, #16
 801bfea:	d109      	bne.n	801c000 <_strtol_l.constprop.0+0x54>
 801bfec:	2c30      	cmp	r4, #48	@ 0x30
 801bfee:	d12a      	bne.n	801c046 <_strtol_l.constprop.0+0x9a>
 801bff0:	782a      	ldrb	r2, [r5, #0]
 801bff2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801bff6:	2a58      	cmp	r2, #88	@ 0x58
 801bff8:	d125      	bne.n	801c046 <_strtol_l.constprop.0+0x9a>
 801bffa:	786c      	ldrb	r4, [r5, #1]
 801bffc:	2310      	movs	r3, #16
 801bffe:	3502      	adds	r5, #2
 801c000:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801c004:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c008:	2200      	movs	r2, #0
 801c00a:	fbbc f9f3 	udiv	r9, ip, r3
 801c00e:	4610      	mov	r0, r2
 801c010:	fb03 ca19 	mls	sl, r3, r9, ip
 801c014:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801c018:	2f09      	cmp	r7, #9
 801c01a:	d81b      	bhi.n	801c054 <_strtol_l.constprop.0+0xa8>
 801c01c:	463c      	mov	r4, r7
 801c01e:	42a3      	cmp	r3, r4
 801c020:	dd27      	ble.n	801c072 <_strtol_l.constprop.0+0xc6>
 801c022:	1c57      	adds	r7, r2, #1
 801c024:	d007      	beq.n	801c036 <_strtol_l.constprop.0+0x8a>
 801c026:	4581      	cmp	r9, r0
 801c028:	d320      	bcc.n	801c06c <_strtol_l.constprop.0+0xc0>
 801c02a:	d101      	bne.n	801c030 <_strtol_l.constprop.0+0x84>
 801c02c:	45a2      	cmp	sl, r4
 801c02e:	db1d      	blt.n	801c06c <_strtol_l.constprop.0+0xc0>
 801c030:	fb00 4003 	mla	r0, r0, r3, r4
 801c034:	2201      	movs	r2, #1
 801c036:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c03a:	e7eb      	b.n	801c014 <_strtol_l.constprop.0+0x68>
 801c03c:	2c2b      	cmp	r4, #43	@ 0x2b
 801c03e:	bf04      	itt	eq
 801c040:	782c      	ldrbeq	r4, [r5, #0]
 801c042:	1c95      	addeq	r5, r2, #2
 801c044:	e7cf      	b.n	801bfe6 <_strtol_l.constprop.0+0x3a>
 801c046:	2b00      	cmp	r3, #0
 801c048:	d1da      	bne.n	801c000 <_strtol_l.constprop.0+0x54>
 801c04a:	2c30      	cmp	r4, #48	@ 0x30
 801c04c:	bf0c      	ite	eq
 801c04e:	2308      	moveq	r3, #8
 801c050:	230a      	movne	r3, #10
 801c052:	e7d5      	b.n	801c000 <_strtol_l.constprop.0+0x54>
 801c054:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801c058:	2f19      	cmp	r7, #25
 801c05a:	d801      	bhi.n	801c060 <_strtol_l.constprop.0+0xb4>
 801c05c:	3c37      	subs	r4, #55	@ 0x37
 801c05e:	e7de      	b.n	801c01e <_strtol_l.constprop.0+0x72>
 801c060:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801c064:	2f19      	cmp	r7, #25
 801c066:	d804      	bhi.n	801c072 <_strtol_l.constprop.0+0xc6>
 801c068:	3c57      	subs	r4, #87	@ 0x57
 801c06a:	e7d8      	b.n	801c01e <_strtol_l.constprop.0+0x72>
 801c06c:	f04f 32ff 	mov.w	r2, #4294967295
 801c070:	e7e1      	b.n	801c036 <_strtol_l.constprop.0+0x8a>
 801c072:	1c53      	adds	r3, r2, #1
 801c074:	d108      	bne.n	801c088 <_strtol_l.constprop.0+0xdc>
 801c076:	2322      	movs	r3, #34	@ 0x22
 801c078:	f8ce 3000 	str.w	r3, [lr]
 801c07c:	4660      	mov	r0, ip
 801c07e:	f1b8 0f00 	cmp.w	r8, #0
 801c082:	d0a0      	beq.n	801bfc6 <_strtol_l.constprop.0+0x1a>
 801c084:	1e69      	subs	r1, r5, #1
 801c086:	e006      	b.n	801c096 <_strtol_l.constprop.0+0xea>
 801c088:	b106      	cbz	r6, 801c08c <_strtol_l.constprop.0+0xe0>
 801c08a:	4240      	negs	r0, r0
 801c08c:	f1b8 0f00 	cmp.w	r8, #0
 801c090:	d099      	beq.n	801bfc6 <_strtol_l.constprop.0+0x1a>
 801c092:	2a00      	cmp	r2, #0
 801c094:	d1f6      	bne.n	801c084 <_strtol_l.constprop.0+0xd8>
 801c096:	f8c8 1000 	str.w	r1, [r8]
 801c09a:	e794      	b.n	801bfc6 <_strtol_l.constprop.0+0x1a>
 801c09c:	08022e7d 	.word	0x08022e7d

0801c0a0 <_strtol_r>:
 801c0a0:	f7ff bf84 	b.w	801bfac <_strtol_l.constprop.0>

0801c0a4 <strtol>:
 801c0a4:	4613      	mov	r3, r2
 801c0a6:	460a      	mov	r2, r1
 801c0a8:	4601      	mov	r1, r0
 801c0aa:	4802      	ldr	r0, [pc, #8]	@ (801c0b4 <strtol+0x10>)
 801c0ac:	6800      	ldr	r0, [r0, #0]
 801c0ae:	f7ff bf7d 	b.w	801bfac <_strtol_l.constprop.0>
 801c0b2:	bf00      	nop
 801c0b4:	20000174 	.word	0x20000174

0801c0b8 <__cvt>:
 801c0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0bc:	ec57 6b10 	vmov	r6, r7, d0
 801c0c0:	2f00      	cmp	r7, #0
 801c0c2:	460c      	mov	r4, r1
 801c0c4:	4619      	mov	r1, r3
 801c0c6:	463b      	mov	r3, r7
 801c0c8:	bfbb      	ittet	lt
 801c0ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c0ce:	461f      	movlt	r7, r3
 801c0d0:	2300      	movge	r3, #0
 801c0d2:	232d      	movlt	r3, #45	@ 0x2d
 801c0d4:	700b      	strb	r3, [r1, #0]
 801c0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c0dc:	4691      	mov	r9, r2
 801c0de:	f023 0820 	bic.w	r8, r3, #32
 801c0e2:	bfbc      	itt	lt
 801c0e4:	4632      	movlt	r2, r6
 801c0e6:	4616      	movlt	r6, r2
 801c0e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c0ec:	d005      	beq.n	801c0fa <__cvt+0x42>
 801c0ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c0f2:	d100      	bne.n	801c0f6 <__cvt+0x3e>
 801c0f4:	3401      	adds	r4, #1
 801c0f6:	2102      	movs	r1, #2
 801c0f8:	e000      	b.n	801c0fc <__cvt+0x44>
 801c0fa:	2103      	movs	r1, #3
 801c0fc:	ab03      	add	r3, sp, #12
 801c0fe:	9301      	str	r3, [sp, #4]
 801c100:	ab02      	add	r3, sp, #8
 801c102:	9300      	str	r3, [sp, #0]
 801c104:	ec47 6b10 	vmov	d0, r6, r7
 801c108:	4653      	mov	r3, sl
 801c10a:	4622      	mov	r2, r4
 801c10c:	f001 fae8 	bl	801d6e0 <_dtoa_r>
 801c110:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c114:	4605      	mov	r5, r0
 801c116:	d119      	bne.n	801c14c <__cvt+0x94>
 801c118:	f019 0f01 	tst.w	r9, #1
 801c11c:	d00e      	beq.n	801c13c <__cvt+0x84>
 801c11e:	eb00 0904 	add.w	r9, r0, r4
 801c122:	2200      	movs	r2, #0
 801c124:	2300      	movs	r3, #0
 801c126:	4630      	mov	r0, r6
 801c128:	4639      	mov	r1, r7
 801c12a:	f7e4 fce5 	bl	8000af8 <__aeabi_dcmpeq>
 801c12e:	b108      	cbz	r0, 801c134 <__cvt+0x7c>
 801c130:	f8cd 900c 	str.w	r9, [sp, #12]
 801c134:	2230      	movs	r2, #48	@ 0x30
 801c136:	9b03      	ldr	r3, [sp, #12]
 801c138:	454b      	cmp	r3, r9
 801c13a:	d31e      	bcc.n	801c17a <__cvt+0xc2>
 801c13c:	9b03      	ldr	r3, [sp, #12]
 801c13e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c140:	1b5b      	subs	r3, r3, r5
 801c142:	4628      	mov	r0, r5
 801c144:	6013      	str	r3, [r2, #0]
 801c146:	b004      	add	sp, #16
 801c148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c14c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c150:	eb00 0904 	add.w	r9, r0, r4
 801c154:	d1e5      	bne.n	801c122 <__cvt+0x6a>
 801c156:	7803      	ldrb	r3, [r0, #0]
 801c158:	2b30      	cmp	r3, #48	@ 0x30
 801c15a:	d10a      	bne.n	801c172 <__cvt+0xba>
 801c15c:	2200      	movs	r2, #0
 801c15e:	2300      	movs	r3, #0
 801c160:	4630      	mov	r0, r6
 801c162:	4639      	mov	r1, r7
 801c164:	f7e4 fcc8 	bl	8000af8 <__aeabi_dcmpeq>
 801c168:	b918      	cbnz	r0, 801c172 <__cvt+0xba>
 801c16a:	f1c4 0401 	rsb	r4, r4, #1
 801c16e:	f8ca 4000 	str.w	r4, [sl]
 801c172:	f8da 3000 	ldr.w	r3, [sl]
 801c176:	4499      	add	r9, r3
 801c178:	e7d3      	b.n	801c122 <__cvt+0x6a>
 801c17a:	1c59      	adds	r1, r3, #1
 801c17c:	9103      	str	r1, [sp, #12]
 801c17e:	701a      	strb	r2, [r3, #0]
 801c180:	e7d9      	b.n	801c136 <__cvt+0x7e>

0801c182 <__exponent>:
 801c182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c184:	2900      	cmp	r1, #0
 801c186:	bfba      	itte	lt
 801c188:	4249      	neglt	r1, r1
 801c18a:	232d      	movlt	r3, #45	@ 0x2d
 801c18c:	232b      	movge	r3, #43	@ 0x2b
 801c18e:	2909      	cmp	r1, #9
 801c190:	7002      	strb	r2, [r0, #0]
 801c192:	7043      	strb	r3, [r0, #1]
 801c194:	dd29      	ble.n	801c1ea <__exponent+0x68>
 801c196:	f10d 0307 	add.w	r3, sp, #7
 801c19a:	461d      	mov	r5, r3
 801c19c:	270a      	movs	r7, #10
 801c19e:	461a      	mov	r2, r3
 801c1a0:	fbb1 f6f7 	udiv	r6, r1, r7
 801c1a4:	fb07 1416 	mls	r4, r7, r6, r1
 801c1a8:	3430      	adds	r4, #48	@ 0x30
 801c1aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c1ae:	460c      	mov	r4, r1
 801c1b0:	2c63      	cmp	r4, #99	@ 0x63
 801c1b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801c1b6:	4631      	mov	r1, r6
 801c1b8:	dcf1      	bgt.n	801c19e <__exponent+0x1c>
 801c1ba:	3130      	adds	r1, #48	@ 0x30
 801c1bc:	1e94      	subs	r4, r2, #2
 801c1be:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c1c2:	1c41      	adds	r1, r0, #1
 801c1c4:	4623      	mov	r3, r4
 801c1c6:	42ab      	cmp	r3, r5
 801c1c8:	d30a      	bcc.n	801c1e0 <__exponent+0x5e>
 801c1ca:	f10d 0309 	add.w	r3, sp, #9
 801c1ce:	1a9b      	subs	r3, r3, r2
 801c1d0:	42ac      	cmp	r4, r5
 801c1d2:	bf88      	it	hi
 801c1d4:	2300      	movhi	r3, #0
 801c1d6:	3302      	adds	r3, #2
 801c1d8:	4403      	add	r3, r0
 801c1da:	1a18      	subs	r0, r3, r0
 801c1dc:	b003      	add	sp, #12
 801c1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c1e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c1e8:	e7ed      	b.n	801c1c6 <__exponent+0x44>
 801c1ea:	2330      	movs	r3, #48	@ 0x30
 801c1ec:	3130      	adds	r1, #48	@ 0x30
 801c1ee:	7083      	strb	r3, [r0, #2]
 801c1f0:	70c1      	strb	r1, [r0, #3]
 801c1f2:	1d03      	adds	r3, r0, #4
 801c1f4:	e7f1      	b.n	801c1da <__exponent+0x58>
	...

0801c1f8 <_printf_float>:
 801c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1fc:	b08d      	sub	sp, #52	@ 0x34
 801c1fe:	460c      	mov	r4, r1
 801c200:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c204:	4616      	mov	r6, r2
 801c206:	461f      	mov	r7, r3
 801c208:	4605      	mov	r5, r0
 801c20a:	f001 f91f 	bl	801d44c <_localeconv_r>
 801c20e:	6803      	ldr	r3, [r0, #0]
 801c210:	9304      	str	r3, [sp, #16]
 801c212:	4618      	mov	r0, r3
 801c214:	f7e4 f844 	bl	80002a0 <strlen>
 801c218:	2300      	movs	r3, #0
 801c21a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c21c:	f8d8 3000 	ldr.w	r3, [r8]
 801c220:	9005      	str	r0, [sp, #20]
 801c222:	3307      	adds	r3, #7
 801c224:	f023 0307 	bic.w	r3, r3, #7
 801c228:	f103 0208 	add.w	r2, r3, #8
 801c22c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c230:	f8d4 b000 	ldr.w	fp, [r4]
 801c234:	f8c8 2000 	str.w	r2, [r8]
 801c238:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c23c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c240:	9307      	str	r3, [sp, #28]
 801c242:	f8cd 8018 	str.w	r8, [sp, #24]
 801c246:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c24e:	4b9c      	ldr	r3, [pc, #624]	@ (801c4c0 <_printf_float+0x2c8>)
 801c250:	f04f 32ff 	mov.w	r2, #4294967295
 801c254:	f7e4 fc82 	bl	8000b5c <__aeabi_dcmpun>
 801c258:	bb70      	cbnz	r0, 801c2b8 <_printf_float+0xc0>
 801c25a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c25e:	4b98      	ldr	r3, [pc, #608]	@ (801c4c0 <_printf_float+0x2c8>)
 801c260:	f04f 32ff 	mov.w	r2, #4294967295
 801c264:	f7e4 fc5c 	bl	8000b20 <__aeabi_dcmple>
 801c268:	bb30      	cbnz	r0, 801c2b8 <_printf_float+0xc0>
 801c26a:	2200      	movs	r2, #0
 801c26c:	2300      	movs	r3, #0
 801c26e:	4640      	mov	r0, r8
 801c270:	4649      	mov	r1, r9
 801c272:	f7e4 fc4b 	bl	8000b0c <__aeabi_dcmplt>
 801c276:	b110      	cbz	r0, 801c27e <_printf_float+0x86>
 801c278:	232d      	movs	r3, #45	@ 0x2d
 801c27a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c27e:	4a91      	ldr	r2, [pc, #580]	@ (801c4c4 <_printf_float+0x2cc>)
 801c280:	4b91      	ldr	r3, [pc, #580]	@ (801c4c8 <_printf_float+0x2d0>)
 801c282:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c286:	bf94      	ite	ls
 801c288:	4690      	movls	r8, r2
 801c28a:	4698      	movhi	r8, r3
 801c28c:	2303      	movs	r3, #3
 801c28e:	6123      	str	r3, [r4, #16]
 801c290:	f02b 0304 	bic.w	r3, fp, #4
 801c294:	6023      	str	r3, [r4, #0]
 801c296:	f04f 0900 	mov.w	r9, #0
 801c29a:	9700      	str	r7, [sp, #0]
 801c29c:	4633      	mov	r3, r6
 801c29e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c2a0:	4621      	mov	r1, r4
 801c2a2:	4628      	mov	r0, r5
 801c2a4:	f000 f9d2 	bl	801c64c <_printf_common>
 801c2a8:	3001      	adds	r0, #1
 801c2aa:	f040 808d 	bne.w	801c3c8 <_printf_float+0x1d0>
 801c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 801c2b2:	b00d      	add	sp, #52	@ 0x34
 801c2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b8:	4642      	mov	r2, r8
 801c2ba:	464b      	mov	r3, r9
 801c2bc:	4640      	mov	r0, r8
 801c2be:	4649      	mov	r1, r9
 801c2c0:	f7e4 fc4c 	bl	8000b5c <__aeabi_dcmpun>
 801c2c4:	b140      	cbz	r0, 801c2d8 <_printf_float+0xe0>
 801c2c6:	464b      	mov	r3, r9
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	bfbc      	itt	lt
 801c2cc:	232d      	movlt	r3, #45	@ 0x2d
 801c2ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c2d2:	4a7e      	ldr	r2, [pc, #504]	@ (801c4cc <_printf_float+0x2d4>)
 801c2d4:	4b7e      	ldr	r3, [pc, #504]	@ (801c4d0 <_printf_float+0x2d8>)
 801c2d6:	e7d4      	b.n	801c282 <_printf_float+0x8a>
 801c2d8:	6863      	ldr	r3, [r4, #4]
 801c2da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c2de:	9206      	str	r2, [sp, #24]
 801c2e0:	1c5a      	adds	r2, r3, #1
 801c2e2:	d13b      	bne.n	801c35c <_printf_float+0x164>
 801c2e4:	2306      	movs	r3, #6
 801c2e6:	6063      	str	r3, [r4, #4]
 801c2e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c2ec:	2300      	movs	r3, #0
 801c2ee:	6022      	str	r2, [r4, #0]
 801c2f0:	9303      	str	r3, [sp, #12]
 801c2f2:	ab0a      	add	r3, sp, #40	@ 0x28
 801c2f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c2f8:	ab09      	add	r3, sp, #36	@ 0x24
 801c2fa:	9300      	str	r3, [sp, #0]
 801c2fc:	6861      	ldr	r1, [r4, #4]
 801c2fe:	ec49 8b10 	vmov	d0, r8, r9
 801c302:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c306:	4628      	mov	r0, r5
 801c308:	f7ff fed6 	bl	801c0b8 <__cvt>
 801c30c:	9b06      	ldr	r3, [sp, #24]
 801c30e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c310:	2b47      	cmp	r3, #71	@ 0x47
 801c312:	4680      	mov	r8, r0
 801c314:	d129      	bne.n	801c36a <_printf_float+0x172>
 801c316:	1cc8      	adds	r0, r1, #3
 801c318:	db02      	blt.n	801c320 <_printf_float+0x128>
 801c31a:	6863      	ldr	r3, [r4, #4]
 801c31c:	4299      	cmp	r1, r3
 801c31e:	dd41      	ble.n	801c3a4 <_printf_float+0x1ac>
 801c320:	f1aa 0a02 	sub.w	sl, sl, #2
 801c324:	fa5f fa8a 	uxtb.w	sl, sl
 801c328:	3901      	subs	r1, #1
 801c32a:	4652      	mov	r2, sl
 801c32c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c330:	9109      	str	r1, [sp, #36]	@ 0x24
 801c332:	f7ff ff26 	bl	801c182 <__exponent>
 801c336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c338:	1813      	adds	r3, r2, r0
 801c33a:	2a01      	cmp	r2, #1
 801c33c:	4681      	mov	r9, r0
 801c33e:	6123      	str	r3, [r4, #16]
 801c340:	dc02      	bgt.n	801c348 <_printf_float+0x150>
 801c342:	6822      	ldr	r2, [r4, #0]
 801c344:	07d2      	lsls	r2, r2, #31
 801c346:	d501      	bpl.n	801c34c <_printf_float+0x154>
 801c348:	3301      	adds	r3, #1
 801c34a:	6123      	str	r3, [r4, #16]
 801c34c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c350:	2b00      	cmp	r3, #0
 801c352:	d0a2      	beq.n	801c29a <_printf_float+0xa2>
 801c354:	232d      	movs	r3, #45	@ 0x2d
 801c356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c35a:	e79e      	b.n	801c29a <_printf_float+0xa2>
 801c35c:	9a06      	ldr	r2, [sp, #24]
 801c35e:	2a47      	cmp	r2, #71	@ 0x47
 801c360:	d1c2      	bne.n	801c2e8 <_printf_float+0xf0>
 801c362:	2b00      	cmp	r3, #0
 801c364:	d1c0      	bne.n	801c2e8 <_printf_float+0xf0>
 801c366:	2301      	movs	r3, #1
 801c368:	e7bd      	b.n	801c2e6 <_printf_float+0xee>
 801c36a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c36e:	d9db      	bls.n	801c328 <_printf_float+0x130>
 801c370:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c374:	d118      	bne.n	801c3a8 <_printf_float+0x1b0>
 801c376:	2900      	cmp	r1, #0
 801c378:	6863      	ldr	r3, [r4, #4]
 801c37a:	dd0b      	ble.n	801c394 <_printf_float+0x19c>
 801c37c:	6121      	str	r1, [r4, #16]
 801c37e:	b913      	cbnz	r3, 801c386 <_printf_float+0x18e>
 801c380:	6822      	ldr	r2, [r4, #0]
 801c382:	07d0      	lsls	r0, r2, #31
 801c384:	d502      	bpl.n	801c38c <_printf_float+0x194>
 801c386:	3301      	adds	r3, #1
 801c388:	440b      	add	r3, r1
 801c38a:	6123      	str	r3, [r4, #16]
 801c38c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c38e:	f04f 0900 	mov.w	r9, #0
 801c392:	e7db      	b.n	801c34c <_printf_float+0x154>
 801c394:	b913      	cbnz	r3, 801c39c <_printf_float+0x1a4>
 801c396:	6822      	ldr	r2, [r4, #0]
 801c398:	07d2      	lsls	r2, r2, #31
 801c39a:	d501      	bpl.n	801c3a0 <_printf_float+0x1a8>
 801c39c:	3302      	adds	r3, #2
 801c39e:	e7f4      	b.n	801c38a <_printf_float+0x192>
 801c3a0:	2301      	movs	r3, #1
 801c3a2:	e7f2      	b.n	801c38a <_printf_float+0x192>
 801c3a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c3aa:	4299      	cmp	r1, r3
 801c3ac:	db05      	blt.n	801c3ba <_printf_float+0x1c2>
 801c3ae:	6823      	ldr	r3, [r4, #0]
 801c3b0:	6121      	str	r1, [r4, #16]
 801c3b2:	07d8      	lsls	r0, r3, #31
 801c3b4:	d5ea      	bpl.n	801c38c <_printf_float+0x194>
 801c3b6:	1c4b      	adds	r3, r1, #1
 801c3b8:	e7e7      	b.n	801c38a <_printf_float+0x192>
 801c3ba:	2900      	cmp	r1, #0
 801c3bc:	bfd4      	ite	le
 801c3be:	f1c1 0202 	rsble	r2, r1, #2
 801c3c2:	2201      	movgt	r2, #1
 801c3c4:	4413      	add	r3, r2
 801c3c6:	e7e0      	b.n	801c38a <_printf_float+0x192>
 801c3c8:	6823      	ldr	r3, [r4, #0]
 801c3ca:	055a      	lsls	r2, r3, #21
 801c3cc:	d407      	bmi.n	801c3de <_printf_float+0x1e6>
 801c3ce:	6923      	ldr	r3, [r4, #16]
 801c3d0:	4642      	mov	r2, r8
 801c3d2:	4631      	mov	r1, r6
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	47b8      	blx	r7
 801c3d8:	3001      	adds	r0, #1
 801c3da:	d12b      	bne.n	801c434 <_printf_float+0x23c>
 801c3dc:	e767      	b.n	801c2ae <_printf_float+0xb6>
 801c3de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c3e2:	f240 80dd 	bls.w	801c5a0 <_printf_float+0x3a8>
 801c3e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	2300      	movs	r3, #0
 801c3ee:	f7e4 fb83 	bl	8000af8 <__aeabi_dcmpeq>
 801c3f2:	2800      	cmp	r0, #0
 801c3f4:	d033      	beq.n	801c45e <_printf_float+0x266>
 801c3f6:	4a37      	ldr	r2, [pc, #220]	@ (801c4d4 <_printf_float+0x2dc>)
 801c3f8:	2301      	movs	r3, #1
 801c3fa:	4631      	mov	r1, r6
 801c3fc:	4628      	mov	r0, r5
 801c3fe:	47b8      	blx	r7
 801c400:	3001      	adds	r0, #1
 801c402:	f43f af54 	beq.w	801c2ae <_printf_float+0xb6>
 801c406:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c40a:	4543      	cmp	r3, r8
 801c40c:	db02      	blt.n	801c414 <_printf_float+0x21c>
 801c40e:	6823      	ldr	r3, [r4, #0]
 801c410:	07d8      	lsls	r0, r3, #31
 801c412:	d50f      	bpl.n	801c434 <_printf_float+0x23c>
 801c414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c418:	4631      	mov	r1, r6
 801c41a:	4628      	mov	r0, r5
 801c41c:	47b8      	blx	r7
 801c41e:	3001      	adds	r0, #1
 801c420:	f43f af45 	beq.w	801c2ae <_printf_float+0xb6>
 801c424:	f04f 0900 	mov.w	r9, #0
 801c428:	f108 38ff 	add.w	r8, r8, #4294967295
 801c42c:	f104 0a1a 	add.w	sl, r4, #26
 801c430:	45c8      	cmp	r8, r9
 801c432:	dc09      	bgt.n	801c448 <_printf_float+0x250>
 801c434:	6823      	ldr	r3, [r4, #0]
 801c436:	079b      	lsls	r3, r3, #30
 801c438:	f100 8103 	bmi.w	801c642 <_printf_float+0x44a>
 801c43c:	68e0      	ldr	r0, [r4, #12]
 801c43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c440:	4298      	cmp	r0, r3
 801c442:	bfb8      	it	lt
 801c444:	4618      	movlt	r0, r3
 801c446:	e734      	b.n	801c2b2 <_printf_float+0xba>
 801c448:	2301      	movs	r3, #1
 801c44a:	4652      	mov	r2, sl
 801c44c:	4631      	mov	r1, r6
 801c44e:	4628      	mov	r0, r5
 801c450:	47b8      	blx	r7
 801c452:	3001      	adds	r0, #1
 801c454:	f43f af2b 	beq.w	801c2ae <_printf_float+0xb6>
 801c458:	f109 0901 	add.w	r9, r9, #1
 801c45c:	e7e8      	b.n	801c430 <_printf_float+0x238>
 801c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c460:	2b00      	cmp	r3, #0
 801c462:	dc39      	bgt.n	801c4d8 <_printf_float+0x2e0>
 801c464:	4a1b      	ldr	r2, [pc, #108]	@ (801c4d4 <_printf_float+0x2dc>)
 801c466:	2301      	movs	r3, #1
 801c468:	4631      	mov	r1, r6
 801c46a:	4628      	mov	r0, r5
 801c46c:	47b8      	blx	r7
 801c46e:	3001      	adds	r0, #1
 801c470:	f43f af1d 	beq.w	801c2ae <_printf_float+0xb6>
 801c474:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c478:	ea59 0303 	orrs.w	r3, r9, r3
 801c47c:	d102      	bne.n	801c484 <_printf_float+0x28c>
 801c47e:	6823      	ldr	r3, [r4, #0]
 801c480:	07d9      	lsls	r1, r3, #31
 801c482:	d5d7      	bpl.n	801c434 <_printf_float+0x23c>
 801c484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c488:	4631      	mov	r1, r6
 801c48a:	4628      	mov	r0, r5
 801c48c:	47b8      	blx	r7
 801c48e:	3001      	adds	r0, #1
 801c490:	f43f af0d 	beq.w	801c2ae <_printf_float+0xb6>
 801c494:	f04f 0a00 	mov.w	sl, #0
 801c498:	f104 0b1a 	add.w	fp, r4, #26
 801c49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c49e:	425b      	negs	r3, r3
 801c4a0:	4553      	cmp	r3, sl
 801c4a2:	dc01      	bgt.n	801c4a8 <_printf_float+0x2b0>
 801c4a4:	464b      	mov	r3, r9
 801c4a6:	e793      	b.n	801c3d0 <_printf_float+0x1d8>
 801c4a8:	2301      	movs	r3, #1
 801c4aa:	465a      	mov	r2, fp
 801c4ac:	4631      	mov	r1, r6
 801c4ae:	4628      	mov	r0, r5
 801c4b0:	47b8      	blx	r7
 801c4b2:	3001      	adds	r0, #1
 801c4b4:	f43f aefb 	beq.w	801c2ae <_printf_float+0xb6>
 801c4b8:	f10a 0a01 	add.w	sl, sl, #1
 801c4bc:	e7ee      	b.n	801c49c <_printf_float+0x2a4>
 801c4be:	bf00      	nop
 801c4c0:	7fefffff 	.word	0x7fefffff
 801c4c4:	08022f7d 	.word	0x08022f7d
 801c4c8:	08022f81 	.word	0x08022f81
 801c4cc:	08022f85 	.word	0x08022f85
 801c4d0:	08022f89 	.word	0x08022f89
 801c4d4:	08022f8d 	.word	0x08022f8d
 801c4d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c4da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c4de:	4553      	cmp	r3, sl
 801c4e0:	bfa8      	it	ge
 801c4e2:	4653      	movge	r3, sl
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	4699      	mov	r9, r3
 801c4e8:	dc36      	bgt.n	801c558 <_printf_float+0x360>
 801c4ea:	f04f 0b00 	mov.w	fp, #0
 801c4ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c4f2:	f104 021a 	add.w	r2, r4, #26
 801c4f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c4f8:	9306      	str	r3, [sp, #24]
 801c4fa:	eba3 0309 	sub.w	r3, r3, r9
 801c4fe:	455b      	cmp	r3, fp
 801c500:	dc31      	bgt.n	801c566 <_printf_float+0x36e>
 801c502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c504:	459a      	cmp	sl, r3
 801c506:	dc3a      	bgt.n	801c57e <_printf_float+0x386>
 801c508:	6823      	ldr	r3, [r4, #0]
 801c50a:	07da      	lsls	r2, r3, #31
 801c50c:	d437      	bmi.n	801c57e <_printf_float+0x386>
 801c50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c510:	ebaa 0903 	sub.w	r9, sl, r3
 801c514:	9b06      	ldr	r3, [sp, #24]
 801c516:	ebaa 0303 	sub.w	r3, sl, r3
 801c51a:	4599      	cmp	r9, r3
 801c51c:	bfa8      	it	ge
 801c51e:	4699      	movge	r9, r3
 801c520:	f1b9 0f00 	cmp.w	r9, #0
 801c524:	dc33      	bgt.n	801c58e <_printf_float+0x396>
 801c526:	f04f 0800 	mov.w	r8, #0
 801c52a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c52e:	f104 0b1a 	add.w	fp, r4, #26
 801c532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c534:	ebaa 0303 	sub.w	r3, sl, r3
 801c538:	eba3 0309 	sub.w	r3, r3, r9
 801c53c:	4543      	cmp	r3, r8
 801c53e:	f77f af79 	ble.w	801c434 <_printf_float+0x23c>
 801c542:	2301      	movs	r3, #1
 801c544:	465a      	mov	r2, fp
 801c546:	4631      	mov	r1, r6
 801c548:	4628      	mov	r0, r5
 801c54a:	47b8      	blx	r7
 801c54c:	3001      	adds	r0, #1
 801c54e:	f43f aeae 	beq.w	801c2ae <_printf_float+0xb6>
 801c552:	f108 0801 	add.w	r8, r8, #1
 801c556:	e7ec      	b.n	801c532 <_printf_float+0x33a>
 801c558:	4642      	mov	r2, r8
 801c55a:	4631      	mov	r1, r6
 801c55c:	4628      	mov	r0, r5
 801c55e:	47b8      	blx	r7
 801c560:	3001      	adds	r0, #1
 801c562:	d1c2      	bne.n	801c4ea <_printf_float+0x2f2>
 801c564:	e6a3      	b.n	801c2ae <_printf_float+0xb6>
 801c566:	2301      	movs	r3, #1
 801c568:	4631      	mov	r1, r6
 801c56a:	4628      	mov	r0, r5
 801c56c:	9206      	str	r2, [sp, #24]
 801c56e:	47b8      	blx	r7
 801c570:	3001      	adds	r0, #1
 801c572:	f43f ae9c 	beq.w	801c2ae <_printf_float+0xb6>
 801c576:	9a06      	ldr	r2, [sp, #24]
 801c578:	f10b 0b01 	add.w	fp, fp, #1
 801c57c:	e7bb      	b.n	801c4f6 <_printf_float+0x2fe>
 801c57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c582:	4631      	mov	r1, r6
 801c584:	4628      	mov	r0, r5
 801c586:	47b8      	blx	r7
 801c588:	3001      	adds	r0, #1
 801c58a:	d1c0      	bne.n	801c50e <_printf_float+0x316>
 801c58c:	e68f      	b.n	801c2ae <_printf_float+0xb6>
 801c58e:	9a06      	ldr	r2, [sp, #24]
 801c590:	464b      	mov	r3, r9
 801c592:	4442      	add	r2, r8
 801c594:	4631      	mov	r1, r6
 801c596:	4628      	mov	r0, r5
 801c598:	47b8      	blx	r7
 801c59a:	3001      	adds	r0, #1
 801c59c:	d1c3      	bne.n	801c526 <_printf_float+0x32e>
 801c59e:	e686      	b.n	801c2ae <_printf_float+0xb6>
 801c5a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c5a4:	f1ba 0f01 	cmp.w	sl, #1
 801c5a8:	dc01      	bgt.n	801c5ae <_printf_float+0x3b6>
 801c5aa:	07db      	lsls	r3, r3, #31
 801c5ac:	d536      	bpl.n	801c61c <_printf_float+0x424>
 801c5ae:	2301      	movs	r3, #1
 801c5b0:	4642      	mov	r2, r8
 801c5b2:	4631      	mov	r1, r6
 801c5b4:	4628      	mov	r0, r5
 801c5b6:	47b8      	blx	r7
 801c5b8:	3001      	adds	r0, #1
 801c5ba:	f43f ae78 	beq.w	801c2ae <_printf_float+0xb6>
 801c5be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c5c2:	4631      	mov	r1, r6
 801c5c4:	4628      	mov	r0, r5
 801c5c6:	47b8      	blx	r7
 801c5c8:	3001      	adds	r0, #1
 801c5ca:	f43f ae70 	beq.w	801c2ae <_printf_float+0xb6>
 801c5ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c5da:	f7e4 fa8d 	bl	8000af8 <__aeabi_dcmpeq>
 801c5de:	b9c0      	cbnz	r0, 801c612 <_printf_float+0x41a>
 801c5e0:	4653      	mov	r3, sl
 801c5e2:	f108 0201 	add.w	r2, r8, #1
 801c5e6:	4631      	mov	r1, r6
 801c5e8:	4628      	mov	r0, r5
 801c5ea:	47b8      	blx	r7
 801c5ec:	3001      	adds	r0, #1
 801c5ee:	d10c      	bne.n	801c60a <_printf_float+0x412>
 801c5f0:	e65d      	b.n	801c2ae <_printf_float+0xb6>
 801c5f2:	2301      	movs	r3, #1
 801c5f4:	465a      	mov	r2, fp
 801c5f6:	4631      	mov	r1, r6
 801c5f8:	4628      	mov	r0, r5
 801c5fa:	47b8      	blx	r7
 801c5fc:	3001      	adds	r0, #1
 801c5fe:	f43f ae56 	beq.w	801c2ae <_printf_float+0xb6>
 801c602:	f108 0801 	add.w	r8, r8, #1
 801c606:	45d0      	cmp	r8, sl
 801c608:	dbf3      	blt.n	801c5f2 <_printf_float+0x3fa>
 801c60a:	464b      	mov	r3, r9
 801c60c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c610:	e6df      	b.n	801c3d2 <_printf_float+0x1da>
 801c612:	f04f 0800 	mov.w	r8, #0
 801c616:	f104 0b1a 	add.w	fp, r4, #26
 801c61a:	e7f4      	b.n	801c606 <_printf_float+0x40e>
 801c61c:	2301      	movs	r3, #1
 801c61e:	4642      	mov	r2, r8
 801c620:	e7e1      	b.n	801c5e6 <_printf_float+0x3ee>
 801c622:	2301      	movs	r3, #1
 801c624:	464a      	mov	r2, r9
 801c626:	4631      	mov	r1, r6
 801c628:	4628      	mov	r0, r5
 801c62a:	47b8      	blx	r7
 801c62c:	3001      	adds	r0, #1
 801c62e:	f43f ae3e 	beq.w	801c2ae <_printf_float+0xb6>
 801c632:	f108 0801 	add.w	r8, r8, #1
 801c636:	68e3      	ldr	r3, [r4, #12]
 801c638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c63a:	1a5b      	subs	r3, r3, r1
 801c63c:	4543      	cmp	r3, r8
 801c63e:	dcf0      	bgt.n	801c622 <_printf_float+0x42a>
 801c640:	e6fc      	b.n	801c43c <_printf_float+0x244>
 801c642:	f04f 0800 	mov.w	r8, #0
 801c646:	f104 0919 	add.w	r9, r4, #25
 801c64a:	e7f4      	b.n	801c636 <_printf_float+0x43e>

0801c64c <_printf_common>:
 801c64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c650:	4616      	mov	r6, r2
 801c652:	4698      	mov	r8, r3
 801c654:	688a      	ldr	r2, [r1, #8]
 801c656:	690b      	ldr	r3, [r1, #16]
 801c658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c65c:	4293      	cmp	r3, r2
 801c65e:	bfb8      	it	lt
 801c660:	4613      	movlt	r3, r2
 801c662:	6033      	str	r3, [r6, #0]
 801c664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c668:	4607      	mov	r7, r0
 801c66a:	460c      	mov	r4, r1
 801c66c:	b10a      	cbz	r2, 801c672 <_printf_common+0x26>
 801c66e:	3301      	adds	r3, #1
 801c670:	6033      	str	r3, [r6, #0]
 801c672:	6823      	ldr	r3, [r4, #0]
 801c674:	0699      	lsls	r1, r3, #26
 801c676:	bf42      	ittt	mi
 801c678:	6833      	ldrmi	r3, [r6, #0]
 801c67a:	3302      	addmi	r3, #2
 801c67c:	6033      	strmi	r3, [r6, #0]
 801c67e:	6825      	ldr	r5, [r4, #0]
 801c680:	f015 0506 	ands.w	r5, r5, #6
 801c684:	d106      	bne.n	801c694 <_printf_common+0x48>
 801c686:	f104 0a19 	add.w	sl, r4, #25
 801c68a:	68e3      	ldr	r3, [r4, #12]
 801c68c:	6832      	ldr	r2, [r6, #0]
 801c68e:	1a9b      	subs	r3, r3, r2
 801c690:	42ab      	cmp	r3, r5
 801c692:	dc26      	bgt.n	801c6e2 <_printf_common+0x96>
 801c694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c698:	6822      	ldr	r2, [r4, #0]
 801c69a:	3b00      	subs	r3, #0
 801c69c:	bf18      	it	ne
 801c69e:	2301      	movne	r3, #1
 801c6a0:	0692      	lsls	r2, r2, #26
 801c6a2:	d42b      	bmi.n	801c6fc <_printf_common+0xb0>
 801c6a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c6a8:	4641      	mov	r1, r8
 801c6aa:	4638      	mov	r0, r7
 801c6ac:	47c8      	blx	r9
 801c6ae:	3001      	adds	r0, #1
 801c6b0:	d01e      	beq.n	801c6f0 <_printf_common+0xa4>
 801c6b2:	6823      	ldr	r3, [r4, #0]
 801c6b4:	6922      	ldr	r2, [r4, #16]
 801c6b6:	f003 0306 	and.w	r3, r3, #6
 801c6ba:	2b04      	cmp	r3, #4
 801c6bc:	bf02      	ittt	eq
 801c6be:	68e5      	ldreq	r5, [r4, #12]
 801c6c0:	6833      	ldreq	r3, [r6, #0]
 801c6c2:	1aed      	subeq	r5, r5, r3
 801c6c4:	68a3      	ldr	r3, [r4, #8]
 801c6c6:	bf0c      	ite	eq
 801c6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c6cc:	2500      	movne	r5, #0
 801c6ce:	4293      	cmp	r3, r2
 801c6d0:	bfc4      	itt	gt
 801c6d2:	1a9b      	subgt	r3, r3, r2
 801c6d4:	18ed      	addgt	r5, r5, r3
 801c6d6:	2600      	movs	r6, #0
 801c6d8:	341a      	adds	r4, #26
 801c6da:	42b5      	cmp	r5, r6
 801c6dc:	d11a      	bne.n	801c714 <_printf_common+0xc8>
 801c6de:	2000      	movs	r0, #0
 801c6e0:	e008      	b.n	801c6f4 <_printf_common+0xa8>
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	4652      	mov	r2, sl
 801c6e6:	4641      	mov	r1, r8
 801c6e8:	4638      	mov	r0, r7
 801c6ea:	47c8      	blx	r9
 801c6ec:	3001      	adds	r0, #1
 801c6ee:	d103      	bne.n	801c6f8 <_printf_common+0xac>
 801c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6f8:	3501      	adds	r5, #1
 801c6fa:	e7c6      	b.n	801c68a <_printf_common+0x3e>
 801c6fc:	18e1      	adds	r1, r4, r3
 801c6fe:	1c5a      	adds	r2, r3, #1
 801c700:	2030      	movs	r0, #48	@ 0x30
 801c702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c706:	4422      	add	r2, r4
 801c708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c70c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c710:	3302      	adds	r3, #2
 801c712:	e7c7      	b.n	801c6a4 <_printf_common+0x58>
 801c714:	2301      	movs	r3, #1
 801c716:	4622      	mov	r2, r4
 801c718:	4641      	mov	r1, r8
 801c71a:	4638      	mov	r0, r7
 801c71c:	47c8      	blx	r9
 801c71e:	3001      	adds	r0, #1
 801c720:	d0e6      	beq.n	801c6f0 <_printf_common+0xa4>
 801c722:	3601      	adds	r6, #1
 801c724:	e7d9      	b.n	801c6da <_printf_common+0x8e>
	...

0801c728 <_printf_i>:
 801c728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c72c:	7e0f      	ldrb	r7, [r1, #24]
 801c72e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c730:	2f78      	cmp	r7, #120	@ 0x78
 801c732:	4691      	mov	r9, r2
 801c734:	4680      	mov	r8, r0
 801c736:	460c      	mov	r4, r1
 801c738:	469a      	mov	sl, r3
 801c73a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c73e:	d807      	bhi.n	801c750 <_printf_i+0x28>
 801c740:	2f62      	cmp	r7, #98	@ 0x62
 801c742:	d80a      	bhi.n	801c75a <_printf_i+0x32>
 801c744:	2f00      	cmp	r7, #0
 801c746:	f000 80d2 	beq.w	801c8ee <_printf_i+0x1c6>
 801c74a:	2f58      	cmp	r7, #88	@ 0x58
 801c74c:	f000 80b9 	beq.w	801c8c2 <_printf_i+0x19a>
 801c750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c758:	e03a      	b.n	801c7d0 <_printf_i+0xa8>
 801c75a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c75e:	2b15      	cmp	r3, #21
 801c760:	d8f6      	bhi.n	801c750 <_printf_i+0x28>
 801c762:	a101      	add	r1, pc, #4	@ (adr r1, 801c768 <_printf_i+0x40>)
 801c764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c768:	0801c7c1 	.word	0x0801c7c1
 801c76c:	0801c7d5 	.word	0x0801c7d5
 801c770:	0801c751 	.word	0x0801c751
 801c774:	0801c751 	.word	0x0801c751
 801c778:	0801c751 	.word	0x0801c751
 801c77c:	0801c751 	.word	0x0801c751
 801c780:	0801c7d5 	.word	0x0801c7d5
 801c784:	0801c751 	.word	0x0801c751
 801c788:	0801c751 	.word	0x0801c751
 801c78c:	0801c751 	.word	0x0801c751
 801c790:	0801c751 	.word	0x0801c751
 801c794:	0801c8d5 	.word	0x0801c8d5
 801c798:	0801c7ff 	.word	0x0801c7ff
 801c79c:	0801c88f 	.word	0x0801c88f
 801c7a0:	0801c751 	.word	0x0801c751
 801c7a4:	0801c751 	.word	0x0801c751
 801c7a8:	0801c8f7 	.word	0x0801c8f7
 801c7ac:	0801c751 	.word	0x0801c751
 801c7b0:	0801c7ff 	.word	0x0801c7ff
 801c7b4:	0801c751 	.word	0x0801c751
 801c7b8:	0801c751 	.word	0x0801c751
 801c7bc:	0801c897 	.word	0x0801c897
 801c7c0:	6833      	ldr	r3, [r6, #0]
 801c7c2:	1d1a      	adds	r2, r3, #4
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	6032      	str	r2, [r6, #0]
 801c7c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c7cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c7d0:	2301      	movs	r3, #1
 801c7d2:	e09d      	b.n	801c910 <_printf_i+0x1e8>
 801c7d4:	6833      	ldr	r3, [r6, #0]
 801c7d6:	6820      	ldr	r0, [r4, #0]
 801c7d8:	1d19      	adds	r1, r3, #4
 801c7da:	6031      	str	r1, [r6, #0]
 801c7dc:	0606      	lsls	r6, r0, #24
 801c7de:	d501      	bpl.n	801c7e4 <_printf_i+0xbc>
 801c7e0:	681d      	ldr	r5, [r3, #0]
 801c7e2:	e003      	b.n	801c7ec <_printf_i+0xc4>
 801c7e4:	0645      	lsls	r5, r0, #25
 801c7e6:	d5fb      	bpl.n	801c7e0 <_printf_i+0xb8>
 801c7e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c7ec:	2d00      	cmp	r5, #0
 801c7ee:	da03      	bge.n	801c7f8 <_printf_i+0xd0>
 801c7f0:	232d      	movs	r3, #45	@ 0x2d
 801c7f2:	426d      	negs	r5, r5
 801c7f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c7f8:	4859      	ldr	r0, [pc, #356]	@ (801c960 <_printf_i+0x238>)
 801c7fa:	230a      	movs	r3, #10
 801c7fc:	e011      	b.n	801c822 <_printf_i+0xfa>
 801c7fe:	6821      	ldr	r1, [r4, #0]
 801c800:	6833      	ldr	r3, [r6, #0]
 801c802:	0608      	lsls	r0, r1, #24
 801c804:	f853 5b04 	ldr.w	r5, [r3], #4
 801c808:	d402      	bmi.n	801c810 <_printf_i+0xe8>
 801c80a:	0649      	lsls	r1, r1, #25
 801c80c:	bf48      	it	mi
 801c80e:	b2ad      	uxthmi	r5, r5
 801c810:	2f6f      	cmp	r7, #111	@ 0x6f
 801c812:	4853      	ldr	r0, [pc, #332]	@ (801c960 <_printf_i+0x238>)
 801c814:	6033      	str	r3, [r6, #0]
 801c816:	bf14      	ite	ne
 801c818:	230a      	movne	r3, #10
 801c81a:	2308      	moveq	r3, #8
 801c81c:	2100      	movs	r1, #0
 801c81e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c822:	6866      	ldr	r6, [r4, #4]
 801c824:	60a6      	str	r6, [r4, #8]
 801c826:	2e00      	cmp	r6, #0
 801c828:	bfa2      	ittt	ge
 801c82a:	6821      	ldrge	r1, [r4, #0]
 801c82c:	f021 0104 	bicge.w	r1, r1, #4
 801c830:	6021      	strge	r1, [r4, #0]
 801c832:	b90d      	cbnz	r5, 801c838 <_printf_i+0x110>
 801c834:	2e00      	cmp	r6, #0
 801c836:	d04b      	beq.n	801c8d0 <_printf_i+0x1a8>
 801c838:	4616      	mov	r6, r2
 801c83a:	fbb5 f1f3 	udiv	r1, r5, r3
 801c83e:	fb03 5711 	mls	r7, r3, r1, r5
 801c842:	5dc7      	ldrb	r7, [r0, r7]
 801c844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c848:	462f      	mov	r7, r5
 801c84a:	42bb      	cmp	r3, r7
 801c84c:	460d      	mov	r5, r1
 801c84e:	d9f4      	bls.n	801c83a <_printf_i+0x112>
 801c850:	2b08      	cmp	r3, #8
 801c852:	d10b      	bne.n	801c86c <_printf_i+0x144>
 801c854:	6823      	ldr	r3, [r4, #0]
 801c856:	07df      	lsls	r7, r3, #31
 801c858:	d508      	bpl.n	801c86c <_printf_i+0x144>
 801c85a:	6923      	ldr	r3, [r4, #16]
 801c85c:	6861      	ldr	r1, [r4, #4]
 801c85e:	4299      	cmp	r1, r3
 801c860:	bfde      	ittt	le
 801c862:	2330      	movle	r3, #48	@ 0x30
 801c864:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c868:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c86c:	1b92      	subs	r2, r2, r6
 801c86e:	6122      	str	r2, [r4, #16]
 801c870:	f8cd a000 	str.w	sl, [sp]
 801c874:	464b      	mov	r3, r9
 801c876:	aa03      	add	r2, sp, #12
 801c878:	4621      	mov	r1, r4
 801c87a:	4640      	mov	r0, r8
 801c87c:	f7ff fee6 	bl	801c64c <_printf_common>
 801c880:	3001      	adds	r0, #1
 801c882:	d14a      	bne.n	801c91a <_printf_i+0x1f2>
 801c884:	f04f 30ff 	mov.w	r0, #4294967295
 801c888:	b004      	add	sp, #16
 801c88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c88e:	6823      	ldr	r3, [r4, #0]
 801c890:	f043 0320 	orr.w	r3, r3, #32
 801c894:	6023      	str	r3, [r4, #0]
 801c896:	4833      	ldr	r0, [pc, #204]	@ (801c964 <_printf_i+0x23c>)
 801c898:	2778      	movs	r7, #120	@ 0x78
 801c89a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c89e:	6823      	ldr	r3, [r4, #0]
 801c8a0:	6831      	ldr	r1, [r6, #0]
 801c8a2:	061f      	lsls	r7, r3, #24
 801c8a4:	f851 5b04 	ldr.w	r5, [r1], #4
 801c8a8:	d402      	bmi.n	801c8b0 <_printf_i+0x188>
 801c8aa:	065f      	lsls	r7, r3, #25
 801c8ac:	bf48      	it	mi
 801c8ae:	b2ad      	uxthmi	r5, r5
 801c8b0:	6031      	str	r1, [r6, #0]
 801c8b2:	07d9      	lsls	r1, r3, #31
 801c8b4:	bf44      	itt	mi
 801c8b6:	f043 0320 	orrmi.w	r3, r3, #32
 801c8ba:	6023      	strmi	r3, [r4, #0]
 801c8bc:	b11d      	cbz	r5, 801c8c6 <_printf_i+0x19e>
 801c8be:	2310      	movs	r3, #16
 801c8c0:	e7ac      	b.n	801c81c <_printf_i+0xf4>
 801c8c2:	4827      	ldr	r0, [pc, #156]	@ (801c960 <_printf_i+0x238>)
 801c8c4:	e7e9      	b.n	801c89a <_printf_i+0x172>
 801c8c6:	6823      	ldr	r3, [r4, #0]
 801c8c8:	f023 0320 	bic.w	r3, r3, #32
 801c8cc:	6023      	str	r3, [r4, #0]
 801c8ce:	e7f6      	b.n	801c8be <_printf_i+0x196>
 801c8d0:	4616      	mov	r6, r2
 801c8d2:	e7bd      	b.n	801c850 <_printf_i+0x128>
 801c8d4:	6833      	ldr	r3, [r6, #0]
 801c8d6:	6825      	ldr	r5, [r4, #0]
 801c8d8:	6961      	ldr	r1, [r4, #20]
 801c8da:	1d18      	adds	r0, r3, #4
 801c8dc:	6030      	str	r0, [r6, #0]
 801c8de:	062e      	lsls	r6, r5, #24
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	d501      	bpl.n	801c8e8 <_printf_i+0x1c0>
 801c8e4:	6019      	str	r1, [r3, #0]
 801c8e6:	e002      	b.n	801c8ee <_printf_i+0x1c6>
 801c8e8:	0668      	lsls	r0, r5, #25
 801c8ea:	d5fb      	bpl.n	801c8e4 <_printf_i+0x1bc>
 801c8ec:	8019      	strh	r1, [r3, #0]
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	6123      	str	r3, [r4, #16]
 801c8f2:	4616      	mov	r6, r2
 801c8f4:	e7bc      	b.n	801c870 <_printf_i+0x148>
 801c8f6:	6833      	ldr	r3, [r6, #0]
 801c8f8:	1d1a      	adds	r2, r3, #4
 801c8fa:	6032      	str	r2, [r6, #0]
 801c8fc:	681e      	ldr	r6, [r3, #0]
 801c8fe:	6862      	ldr	r2, [r4, #4]
 801c900:	2100      	movs	r1, #0
 801c902:	4630      	mov	r0, r6
 801c904:	f7e3 fc7c 	bl	8000200 <memchr>
 801c908:	b108      	cbz	r0, 801c90e <_printf_i+0x1e6>
 801c90a:	1b80      	subs	r0, r0, r6
 801c90c:	6060      	str	r0, [r4, #4]
 801c90e:	6863      	ldr	r3, [r4, #4]
 801c910:	6123      	str	r3, [r4, #16]
 801c912:	2300      	movs	r3, #0
 801c914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c918:	e7aa      	b.n	801c870 <_printf_i+0x148>
 801c91a:	6923      	ldr	r3, [r4, #16]
 801c91c:	4632      	mov	r2, r6
 801c91e:	4649      	mov	r1, r9
 801c920:	4640      	mov	r0, r8
 801c922:	47d0      	blx	sl
 801c924:	3001      	adds	r0, #1
 801c926:	d0ad      	beq.n	801c884 <_printf_i+0x15c>
 801c928:	6823      	ldr	r3, [r4, #0]
 801c92a:	079b      	lsls	r3, r3, #30
 801c92c:	d413      	bmi.n	801c956 <_printf_i+0x22e>
 801c92e:	68e0      	ldr	r0, [r4, #12]
 801c930:	9b03      	ldr	r3, [sp, #12]
 801c932:	4298      	cmp	r0, r3
 801c934:	bfb8      	it	lt
 801c936:	4618      	movlt	r0, r3
 801c938:	e7a6      	b.n	801c888 <_printf_i+0x160>
 801c93a:	2301      	movs	r3, #1
 801c93c:	4632      	mov	r2, r6
 801c93e:	4649      	mov	r1, r9
 801c940:	4640      	mov	r0, r8
 801c942:	47d0      	blx	sl
 801c944:	3001      	adds	r0, #1
 801c946:	d09d      	beq.n	801c884 <_printf_i+0x15c>
 801c948:	3501      	adds	r5, #1
 801c94a:	68e3      	ldr	r3, [r4, #12]
 801c94c:	9903      	ldr	r1, [sp, #12]
 801c94e:	1a5b      	subs	r3, r3, r1
 801c950:	42ab      	cmp	r3, r5
 801c952:	dcf2      	bgt.n	801c93a <_printf_i+0x212>
 801c954:	e7eb      	b.n	801c92e <_printf_i+0x206>
 801c956:	2500      	movs	r5, #0
 801c958:	f104 0619 	add.w	r6, r4, #25
 801c95c:	e7f5      	b.n	801c94a <_printf_i+0x222>
 801c95e:	bf00      	nop
 801c960:	08022f8f 	.word	0x08022f8f
 801c964:	08022fa0 	.word	0x08022fa0

0801c968 <_scanf_float>:
 801c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96c:	b087      	sub	sp, #28
 801c96e:	4617      	mov	r7, r2
 801c970:	9303      	str	r3, [sp, #12]
 801c972:	688b      	ldr	r3, [r1, #8]
 801c974:	1e5a      	subs	r2, r3, #1
 801c976:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801c97a:	bf81      	itttt	hi
 801c97c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801c980:	eb03 0b05 	addhi.w	fp, r3, r5
 801c984:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801c988:	608b      	strhi	r3, [r1, #8]
 801c98a:	680b      	ldr	r3, [r1, #0]
 801c98c:	460a      	mov	r2, r1
 801c98e:	f04f 0500 	mov.w	r5, #0
 801c992:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801c996:	f842 3b1c 	str.w	r3, [r2], #28
 801c99a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c99e:	4680      	mov	r8, r0
 801c9a0:	460c      	mov	r4, r1
 801c9a2:	bf98      	it	ls
 801c9a4:	f04f 0b00 	movls.w	fp, #0
 801c9a8:	9201      	str	r2, [sp, #4]
 801c9aa:	4616      	mov	r6, r2
 801c9ac:	46aa      	mov	sl, r5
 801c9ae:	46a9      	mov	r9, r5
 801c9b0:	9502      	str	r5, [sp, #8]
 801c9b2:	68a2      	ldr	r2, [r4, #8]
 801c9b4:	b152      	cbz	r2, 801c9cc <_scanf_float+0x64>
 801c9b6:	683b      	ldr	r3, [r7, #0]
 801c9b8:	781b      	ldrb	r3, [r3, #0]
 801c9ba:	2b4e      	cmp	r3, #78	@ 0x4e
 801c9bc:	d864      	bhi.n	801ca88 <_scanf_float+0x120>
 801c9be:	2b40      	cmp	r3, #64	@ 0x40
 801c9c0:	d83c      	bhi.n	801ca3c <_scanf_float+0xd4>
 801c9c2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801c9c6:	b2c8      	uxtb	r0, r1
 801c9c8:	280e      	cmp	r0, #14
 801c9ca:	d93a      	bls.n	801ca42 <_scanf_float+0xda>
 801c9cc:	f1b9 0f00 	cmp.w	r9, #0
 801c9d0:	d003      	beq.n	801c9da <_scanf_float+0x72>
 801c9d2:	6823      	ldr	r3, [r4, #0]
 801c9d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c9d8:	6023      	str	r3, [r4, #0]
 801c9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c9de:	f1ba 0f01 	cmp.w	sl, #1
 801c9e2:	f200 8117 	bhi.w	801cc14 <_scanf_float+0x2ac>
 801c9e6:	9b01      	ldr	r3, [sp, #4]
 801c9e8:	429e      	cmp	r6, r3
 801c9ea:	f200 8108 	bhi.w	801cbfe <_scanf_float+0x296>
 801c9ee:	2001      	movs	r0, #1
 801c9f0:	b007      	add	sp, #28
 801c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801c9fa:	2a0d      	cmp	r2, #13
 801c9fc:	d8e6      	bhi.n	801c9cc <_scanf_float+0x64>
 801c9fe:	a101      	add	r1, pc, #4	@ (adr r1, 801ca04 <_scanf_float+0x9c>)
 801ca00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ca04:	0801cb4b 	.word	0x0801cb4b
 801ca08:	0801c9cd 	.word	0x0801c9cd
 801ca0c:	0801c9cd 	.word	0x0801c9cd
 801ca10:	0801c9cd 	.word	0x0801c9cd
 801ca14:	0801cbab 	.word	0x0801cbab
 801ca18:	0801cb83 	.word	0x0801cb83
 801ca1c:	0801c9cd 	.word	0x0801c9cd
 801ca20:	0801c9cd 	.word	0x0801c9cd
 801ca24:	0801cb59 	.word	0x0801cb59
 801ca28:	0801c9cd 	.word	0x0801c9cd
 801ca2c:	0801c9cd 	.word	0x0801c9cd
 801ca30:	0801c9cd 	.word	0x0801c9cd
 801ca34:	0801c9cd 	.word	0x0801c9cd
 801ca38:	0801cb11 	.word	0x0801cb11
 801ca3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801ca40:	e7db      	b.n	801c9fa <_scanf_float+0x92>
 801ca42:	290e      	cmp	r1, #14
 801ca44:	d8c2      	bhi.n	801c9cc <_scanf_float+0x64>
 801ca46:	a001      	add	r0, pc, #4	@ (adr r0, 801ca4c <_scanf_float+0xe4>)
 801ca48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ca4c:	0801cb01 	.word	0x0801cb01
 801ca50:	0801c9cd 	.word	0x0801c9cd
 801ca54:	0801cb01 	.word	0x0801cb01
 801ca58:	0801cb97 	.word	0x0801cb97
 801ca5c:	0801c9cd 	.word	0x0801c9cd
 801ca60:	0801caa9 	.word	0x0801caa9
 801ca64:	0801cae7 	.word	0x0801cae7
 801ca68:	0801cae7 	.word	0x0801cae7
 801ca6c:	0801cae7 	.word	0x0801cae7
 801ca70:	0801cae7 	.word	0x0801cae7
 801ca74:	0801cae7 	.word	0x0801cae7
 801ca78:	0801cae7 	.word	0x0801cae7
 801ca7c:	0801cae7 	.word	0x0801cae7
 801ca80:	0801cae7 	.word	0x0801cae7
 801ca84:	0801cae7 	.word	0x0801cae7
 801ca88:	2b6e      	cmp	r3, #110	@ 0x6e
 801ca8a:	d809      	bhi.n	801caa0 <_scanf_float+0x138>
 801ca8c:	2b60      	cmp	r3, #96	@ 0x60
 801ca8e:	d8b2      	bhi.n	801c9f6 <_scanf_float+0x8e>
 801ca90:	2b54      	cmp	r3, #84	@ 0x54
 801ca92:	d07b      	beq.n	801cb8c <_scanf_float+0x224>
 801ca94:	2b59      	cmp	r3, #89	@ 0x59
 801ca96:	d199      	bne.n	801c9cc <_scanf_float+0x64>
 801ca98:	2d07      	cmp	r5, #7
 801ca9a:	d197      	bne.n	801c9cc <_scanf_float+0x64>
 801ca9c:	2508      	movs	r5, #8
 801ca9e:	e02c      	b.n	801cafa <_scanf_float+0x192>
 801caa0:	2b74      	cmp	r3, #116	@ 0x74
 801caa2:	d073      	beq.n	801cb8c <_scanf_float+0x224>
 801caa4:	2b79      	cmp	r3, #121	@ 0x79
 801caa6:	e7f6      	b.n	801ca96 <_scanf_float+0x12e>
 801caa8:	6821      	ldr	r1, [r4, #0]
 801caaa:	05c8      	lsls	r0, r1, #23
 801caac:	d51b      	bpl.n	801cae6 <_scanf_float+0x17e>
 801caae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801cab2:	6021      	str	r1, [r4, #0]
 801cab4:	f109 0901 	add.w	r9, r9, #1
 801cab8:	f1bb 0f00 	cmp.w	fp, #0
 801cabc:	d003      	beq.n	801cac6 <_scanf_float+0x15e>
 801cabe:	3201      	adds	r2, #1
 801cac0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cac4:	60a2      	str	r2, [r4, #8]
 801cac6:	68a3      	ldr	r3, [r4, #8]
 801cac8:	3b01      	subs	r3, #1
 801caca:	60a3      	str	r3, [r4, #8]
 801cacc:	6923      	ldr	r3, [r4, #16]
 801cace:	3301      	adds	r3, #1
 801cad0:	6123      	str	r3, [r4, #16]
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	3b01      	subs	r3, #1
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	607b      	str	r3, [r7, #4]
 801cada:	f340 8087 	ble.w	801cbec <_scanf_float+0x284>
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	3301      	adds	r3, #1
 801cae2:	603b      	str	r3, [r7, #0]
 801cae4:	e765      	b.n	801c9b2 <_scanf_float+0x4a>
 801cae6:	eb1a 0105 	adds.w	r1, sl, r5
 801caea:	f47f af6f 	bne.w	801c9cc <_scanf_float+0x64>
 801caee:	6822      	ldr	r2, [r4, #0]
 801caf0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801caf4:	6022      	str	r2, [r4, #0]
 801caf6:	460d      	mov	r5, r1
 801caf8:	468a      	mov	sl, r1
 801cafa:	f806 3b01 	strb.w	r3, [r6], #1
 801cafe:	e7e2      	b.n	801cac6 <_scanf_float+0x15e>
 801cb00:	6822      	ldr	r2, [r4, #0]
 801cb02:	0610      	lsls	r0, r2, #24
 801cb04:	f57f af62 	bpl.w	801c9cc <_scanf_float+0x64>
 801cb08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801cb0c:	6022      	str	r2, [r4, #0]
 801cb0e:	e7f4      	b.n	801cafa <_scanf_float+0x192>
 801cb10:	f1ba 0f00 	cmp.w	sl, #0
 801cb14:	d10e      	bne.n	801cb34 <_scanf_float+0x1cc>
 801cb16:	f1b9 0f00 	cmp.w	r9, #0
 801cb1a:	d10e      	bne.n	801cb3a <_scanf_float+0x1d2>
 801cb1c:	6822      	ldr	r2, [r4, #0]
 801cb1e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801cb22:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801cb26:	d108      	bne.n	801cb3a <_scanf_float+0x1d2>
 801cb28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801cb2c:	6022      	str	r2, [r4, #0]
 801cb2e:	f04f 0a01 	mov.w	sl, #1
 801cb32:	e7e2      	b.n	801cafa <_scanf_float+0x192>
 801cb34:	f1ba 0f02 	cmp.w	sl, #2
 801cb38:	d055      	beq.n	801cbe6 <_scanf_float+0x27e>
 801cb3a:	2d01      	cmp	r5, #1
 801cb3c:	d002      	beq.n	801cb44 <_scanf_float+0x1dc>
 801cb3e:	2d04      	cmp	r5, #4
 801cb40:	f47f af44 	bne.w	801c9cc <_scanf_float+0x64>
 801cb44:	3501      	adds	r5, #1
 801cb46:	b2ed      	uxtb	r5, r5
 801cb48:	e7d7      	b.n	801cafa <_scanf_float+0x192>
 801cb4a:	f1ba 0f01 	cmp.w	sl, #1
 801cb4e:	f47f af3d 	bne.w	801c9cc <_scanf_float+0x64>
 801cb52:	f04f 0a02 	mov.w	sl, #2
 801cb56:	e7d0      	b.n	801cafa <_scanf_float+0x192>
 801cb58:	b97d      	cbnz	r5, 801cb7a <_scanf_float+0x212>
 801cb5a:	f1b9 0f00 	cmp.w	r9, #0
 801cb5e:	f47f af38 	bne.w	801c9d2 <_scanf_float+0x6a>
 801cb62:	6822      	ldr	r2, [r4, #0]
 801cb64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801cb68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801cb6c:	f040 8108 	bne.w	801cd80 <_scanf_float+0x418>
 801cb70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801cb74:	6022      	str	r2, [r4, #0]
 801cb76:	2501      	movs	r5, #1
 801cb78:	e7bf      	b.n	801cafa <_scanf_float+0x192>
 801cb7a:	2d03      	cmp	r5, #3
 801cb7c:	d0e2      	beq.n	801cb44 <_scanf_float+0x1dc>
 801cb7e:	2d05      	cmp	r5, #5
 801cb80:	e7de      	b.n	801cb40 <_scanf_float+0x1d8>
 801cb82:	2d02      	cmp	r5, #2
 801cb84:	f47f af22 	bne.w	801c9cc <_scanf_float+0x64>
 801cb88:	2503      	movs	r5, #3
 801cb8a:	e7b6      	b.n	801cafa <_scanf_float+0x192>
 801cb8c:	2d06      	cmp	r5, #6
 801cb8e:	f47f af1d 	bne.w	801c9cc <_scanf_float+0x64>
 801cb92:	2507      	movs	r5, #7
 801cb94:	e7b1      	b.n	801cafa <_scanf_float+0x192>
 801cb96:	6822      	ldr	r2, [r4, #0]
 801cb98:	0591      	lsls	r1, r2, #22
 801cb9a:	f57f af17 	bpl.w	801c9cc <_scanf_float+0x64>
 801cb9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801cba2:	6022      	str	r2, [r4, #0]
 801cba4:	f8cd 9008 	str.w	r9, [sp, #8]
 801cba8:	e7a7      	b.n	801cafa <_scanf_float+0x192>
 801cbaa:	6822      	ldr	r2, [r4, #0]
 801cbac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801cbb0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801cbb4:	d006      	beq.n	801cbc4 <_scanf_float+0x25c>
 801cbb6:	0550      	lsls	r0, r2, #21
 801cbb8:	f57f af08 	bpl.w	801c9cc <_scanf_float+0x64>
 801cbbc:	f1b9 0f00 	cmp.w	r9, #0
 801cbc0:	f000 80de 	beq.w	801cd80 <_scanf_float+0x418>
 801cbc4:	0591      	lsls	r1, r2, #22
 801cbc6:	bf58      	it	pl
 801cbc8:	9902      	ldrpl	r1, [sp, #8]
 801cbca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801cbce:	bf58      	it	pl
 801cbd0:	eba9 0101 	subpl.w	r1, r9, r1
 801cbd4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801cbd8:	bf58      	it	pl
 801cbda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801cbde:	6022      	str	r2, [r4, #0]
 801cbe0:	f04f 0900 	mov.w	r9, #0
 801cbe4:	e789      	b.n	801cafa <_scanf_float+0x192>
 801cbe6:	f04f 0a03 	mov.w	sl, #3
 801cbea:	e786      	b.n	801cafa <_scanf_float+0x192>
 801cbec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801cbf0:	4639      	mov	r1, r7
 801cbf2:	4640      	mov	r0, r8
 801cbf4:	4798      	blx	r3
 801cbf6:	2800      	cmp	r0, #0
 801cbf8:	f43f aedb 	beq.w	801c9b2 <_scanf_float+0x4a>
 801cbfc:	e6e6      	b.n	801c9cc <_scanf_float+0x64>
 801cbfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cc02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801cc06:	463a      	mov	r2, r7
 801cc08:	4640      	mov	r0, r8
 801cc0a:	4798      	blx	r3
 801cc0c:	6923      	ldr	r3, [r4, #16]
 801cc0e:	3b01      	subs	r3, #1
 801cc10:	6123      	str	r3, [r4, #16]
 801cc12:	e6e8      	b.n	801c9e6 <_scanf_float+0x7e>
 801cc14:	1e6b      	subs	r3, r5, #1
 801cc16:	2b06      	cmp	r3, #6
 801cc18:	d824      	bhi.n	801cc64 <_scanf_float+0x2fc>
 801cc1a:	2d02      	cmp	r5, #2
 801cc1c:	d836      	bhi.n	801cc8c <_scanf_float+0x324>
 801cc1e:	9b01      	ldr	r3, [sp, #4]
 801cc20:	429e      	cmp	r6, r3
 801cc22:	f67f aee4 	bls.w	801c9ee <_scanf_float+0x86>
 801cc26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cc2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801cc2e:	463a      	mov	r2, r7
 801cc30:	4640      	mov	r0, r8
 801cc32:	4798      	blx	r3
 801cc34:	6923      	ldr	r3, [r4, #16]
 801cc36:	3b01      	subs	r3, #1
 801cc38:	6123      	str	r3, [r4, #16]
 801cc3a:	e7f0      	b.n	801cc1e <_scanf_float+0x2b6>
 801cc3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cc40:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801cc44:	463a      	mov	r2, r7
 801cc46:	4640      	mov	r0, r8
 801cc48:	4798      	blx	r3
 801cc4a:	6923      	ldr	r3, [r4, #16]
 801cc4c:	3b01      	subs	r3, #1
 801cc4e:	6123      	str	r3, [r4, #16]
 801cc50:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc54:	fa5f fa8a 	uxtb.w	sl, sl
 801cc58:	f1ba 0f02 	cmp.w	sl, #2
 801cc5c:	d1ee      	bne.n	801cc3c <_scanf_float+0x2d4>
 801cc5e:	3d03      	subs	r5, #3
 801cc60:	b2ed      	uxtb	r5, r5
 801cc62:	1b76      	subs	r6, r6, r5
 801cc64:	6823      	ldr	r3, [r4, #0]
 801cc66:	05da      	lsls	r2, r3, #23
 801cc68:	d530      	bpl.n	801cccc <_scanf_float+0x364>
 801cc6a:	055b      	lsls	r3, r3, #21
 801cc6c:	d511      	bpl.n	801cc92 <_scanf_float+0x32a>
 801cc6e:	9b01      	ldr	r3, [sp, #4]
 801cc70:	429e      	cmp	r6, r3
 801cc72:	f67f aebc 	bls.w	801c9ee <_scanf_float+0x86>
 801cc76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cc7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801cc7e:	463a      	mov	r2, r7
 801cc80:	4640      	mov	r0, r8
 801cc82:	4798      	blx	r3
 801cc84:	6923      	ldr	r3, [r4, #16]
 801cc86:	3b01      	subs	r3, #1
 801cc88:	6123      	str	r3, [r4, #16]
 801cc8a:	e7f0      	b.n	801cc6e <_scanf_float+0x306>
 801cc8c:	46aa      	mov	sl, r5
 801cc8e:	46b3      	mov	fp, r6
 801cc90:	e7de      	b.n	801cc50 <_scanf_float+0x2e8>
 801cc92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801cc96:	6923      	ldr	r3, [r4, #16]
 801cc98:	2965      	cmp	r1, #101	@ 0x65
 801cc9a:	f103 33ff 	add.w	r3, r3, #4294967295
 801cc9e:	f106 35ff 	add.w	r5, r6, #4294967295
 801cca2:	6123      	str	r3, [r4, #16]
 801cca4:	d00c      	beq.n	801ccc0 <_scanf_float+0x358>
 801cca6:	2945      	cmp	r1, #69	@ 0x45
 801cca8:	d00a      	beq.n	801ccc0 <_scanf_float+0x358>
 801ccaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ccae:	463a      	mov	r2, r7
 801ccb0:	4640      	mov	r0, r8
 801ccb2:	4798      	blx	r3
 801ccb4:	6923      	ldr	r3, [r4, #16]
 801ccb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ccba:	3b01      	subs	r3, #1
 801ccbc:	1eb5      	subs	r5, r6, #2
 801ccbe:	6123      	str	r3, [r4, #16]
 801ccc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ccc4:	463a      	mov	r2, r7
 801ccc6:	4640      	mov	r0, r8
 801ccc8:	4798      	blx	r3
 801ccca:	462e      	mov	r6, r5
 801cccc:	6822      	ldr	r2, [r4, #0]
 801ccce:	f012 0210 	ands.w	r2, r2, #16
 801ccd2:	d001      	beq.n	801ccd8 <_scanf_float+0x370>
 801ccd4:	2000      	movs	r0, #0
 801ccd6:	e68b      	b.n	801c9f0 <_scanf_float+0x88>
 801ccd8:	7032      	strb	r2, [r6, #0]
 801ccda:	6823      	ldr	r3, [r4, #0]
 801ccdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801cce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cce4:	d11c      	bne.n	801cd20 <_scanf_float+0x3b8>
 801cce6:	9b02      	ldr	r3, [sp, #8]
 801cce8:	454b      	cmp	r3, r9
 801ccea:	eba3 0209 	sub.w	r2, r3, r9
 801ccee:	d123      	bne.n	801cd38 <_scanf_float+0x3d0>
 801ccf0:	9901      	ldr	r1, [sp, #4]
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	4640      	mov	r0, r8
 801ccf6:	f002 fdb7 	bl	801f868 <_strtod_r>
 801ccfa:	9b03      	ldr	r3, [sp, #12]
 801ccfc:	6821      	ldr	r1, [r4, #0]
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	f011 0f02 	tst.w	r1, #2
 801cd04:	ec57 6b10 	vmov	r6, r7, d0
 801cd08:	f103 0204 	add.w	r2, r3, #4
 801cd0c:	d01f      	beq.n	801cd4e <_scanf_float+0x3e6>
 801cd0e:	9903      	ldr	r1, [sp, #12]
 801cd10:	600a      	str	r2, [r1, #0]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	e9c3 6700 	strd	r6, r7, [r3]
 801cd18:	68e3      	ldr	r3, [r4, #12]
 801cd1a:	3301      	adds	r3, #1
 801cd1c:	60e3      	str	r3, [r4, #12]
 801cd1e:	e7d9      	b.n	801ccd4 <_scanf_float+0x36c>
 801cd20:	9b04      	ldr	r3, [sp, #16]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d0e4      	beq.n	801ccf0 <_scanf_float+0x388>
 801cd26:	9905      	ldr	r1, [sp, #20]
 801cd28:	230a      	movs	r3, #10
 801cd2a:	3101      	adds	r1, #1
 801cd2c:	4640      	mov	r0, r8
 801cd2e:	f7ff f9b7 	bl	801c0a0 <_strtol_r>
 801cd32:	9b04      	ldr	r3, [sp, #16]
 801cd34:	9e05      	ldr	r6, [sp, #20]
 801cd36:	1ac2      	subs	r2, r0, r3
 801cd38:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801cd3c:	429e      	cmp	r6, r3
 801cd3e:	bf28      	it	cs
 801cd40:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801cd44:	4910      	ldr	r1, [pc, #64]	@ (801cd88 <_scanf_float+0x420>)
 801cd46:	4630      	mov	r0, r6
 801cd48:	f000 f9ae 	bl	801d0a8 <siprintf>
 801cd4c:	e7d0      	b.n	801ccf0 <_scanf_float+0x388>
 801cd4e:	f011 0f04 	tst.w	r1, #4
 801cd52:	9903      	ldr	r1, [sp, #12]
 801cd54:	600a      	str	r2, [r1, #0]
 801cd56:	d1dc      	bne.n	801cd12 <_scanf_float+0x3aa>
 801cd58:	681d      	ldr	r5, [r3, #0]
 801cd5a:	4632      	mov	r2, r6
 801cd5c:	463b      	mov	r3, r7
 801cd5e:	4630      	mov	r0, r6
 801cd60:	4639      	mov	r1, r7
 801cd62:	f7e3 fefb 	bl	8000b5c <__aeabi_dcmpun>
 801cd66:	b128      	cbz	r0, 801cd74 <_scanf_float+0x40c>
 801cd68:	4808      	ldr	r0, [pc, #32]	@ (801cd8c <_scanf_float+0x424>)
 801cd6a:	f000 fc0d 	bl	801d588 <nanf>
 801cd6e:	ed85 0a00 	vstr	s0, [r5]
 801cd72:	e7d1      	b.n	801cd18 <_scanf_float+0x3b0>
 801cd74:	4630      	mov	r0, r6
 801cd76:	4639      	mov	r1, r7
 801cd78:	f7e3 ff4e 	bl	8000c18 <__aeabi_d2f>
 801cd7c:	6028      	str	r0, [r5, #0]
 801cd7e:	e7cb      	b.n	801cd18 <_scanf_float+0x3b0>
 801cd80:	f04f 0900 	mov.w	r9, #0
 801cd84:	e629      	b.n	801c9da <_scanf_float+0x72>
 801cd86:	bf00      	nop
 801cd88:	08022fb1 	.word	0x08022fb1
 801cd8c:	08023062 	.word	0x08023062

0801cd90 <std>:
 801cd90:	2300      	movs	r3, #0
 801cd92:	b510      	push	{r4, lr}
 801cd94:	4604      	mov	r4, r0
 801cd96:	e9c0 3300 	strd	r3, r3, [r0]
 801cd9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cd9e:	6083      	str	r3, [r0, #8]
 801cda0:	8181      	strh	r1, [r0, #12]
 801cda2:	6643      	str	r3, [r0, #100]	@ 0x64
 801cda4:	81c2      	strh	r2, [r0, #14]
 801cda6:	6183      	str	r3, [r0, #24]
 801cda8:	4619      	mov	r1, r3
 801cdaa:	2208      	movs	r2, #8
 801cdac:	305c      	adds	r0, #92	@ 0x5c
 801cdae:	f000 fac5 	bl	801d33c <memset>
 801cdb2:	4b0d      	ldr	r3, [pc, #52]	@ (801cde8 <std+0x58>)
 801cdb4:	6263      	str	r3, [r4, #36]	@ 0x24
 801cdb6:	4b0d      	ldr	r3, [pc, #52]	@ (801cdec <std+0x5c>)
 801cdb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cdba:	4b0d      	ldr	r3, [pc, #52]	@ (801cdf0 <std+0x60>)
 801cdbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cdbe:	4b0d      	ldr	r3, [pc, #52]	@ (801cdf4 <std+0x64>)
 801cdc0:	6323      	str	r3, [r4, #48]	@ 0x30
 801cdc2:	4b0d      	ldr	r3, [pc, #52]	@ (801cdf8 <std+0x68>)
 801cdc4:	6224      	str	r4, [r4, #32]
 801cdc6:	429c      	cmp	r4, r3
 801cdc8:	d006      	beq.n	801cdd8 <std+0x48>
 801cdca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cdce:	4294      	cmp	r4, r2
 801cdd0:	d002      	beq.n	801cdd8 <std+0x48>
 801cdd2:	33d0      	adds	r3, #208	@ 0xd0
 801cdd4:	429c      	cmp	r4, r3
 801cdd6:	d105      	bne.n	801cde4 <std+0x54>
 801cdd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cde0:	f000 bbb8 	b.w	801d554 <__retarget_lock_init_recursive>
 801cde4:	bd10      	pop	{r4, pc}
 801cde6:	bf00      	nop
 801cde8:	0801d0e9 	.word	0x0801d0e9
 801cdec:	0801d10b 	.word	0x0801d10b
 801cdf0:	0801d143 	.word	0x0801d143
 801cdf4:	0801d167 	.word	0x0801d167
 801cdf8:	200036e0 	.word	0x200036e0

0801cdfc <stdio_exit_handler>:
 801cdfc:	4a02      	ldr	r2, [pc, #8]	@ (801ce08 <stdio_exit_handler+0xc>)
 801cdfe:	4903      	ldr	r1, [pc, #12]	@ (801ce0c <stdio_exit_handler+0x10>)
 801ce00:	4803      	ldr	r0, [pc, #12]	@ (801ce10 <stdio_exit_handler+0x14>)
 801ce02:	f000 b869 	b.w	801ced8 <_fwalk_sglue>
 801ce06:	bf00      	nop
 801ce08:	20000168 	.word	0x20000168
 801ce0c:	0801feb1 	.word	0x0801feb1
 801ce10:	20000178 	.word	0x20000178

0801ce14 <cleanup_stdio>:
 801ce14:	6841      	ldr	r1, [r0, #4]
 801ce16:	4b0c      	ldr	r3, [pc, #48]	@ (801ce48 <cleanup_stdio+0x34>)
 801ce18:	4299      	cmp	r1, r3
 801ce1a:	b510      	push	{r4, lr}
 801ce1c:	4604      	mov	r4, r0
 801ce1e:	d001      	beq.n	801ce24 <cleanup_stdio+0x10>
 801ce20:	f003 f846 	bl	801feb0 <_fflush_r>
 801ce24:	68a1      	ldr	r1, [r4, #8]
 801ce26:	4b09      	ldr	r3, [pc, #36]	@ (801ce4c <cleanup_stdio+0x38>)
 801ce28:	4299      	cmp	r1, r3
 801ce2a:	d002      	beq.n	801ce32 <cleanup_stdio+0x1e>
 801ce2c:	4620      	mov	r0, r4
 801ce2e:	f003 f83f 	bl	801feb0 <_fflush_r>
 801ce32:	68e1      	ldr	r1, [r4, #12]
 801ce34:	4b06      	ldr	r3, [pc, #24]	@ (801ce50 <cleanup_stdio+0x3c>)
 801ce36:	4299      	cmp	r1, r3
 801ce38:	d004      	beq.n	801ce44 <cleanup_stdio+0x30>
 801ce3a:	4620      	mov	r0, r4
 801ce3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce40:	f003 b836 	b.w	801feb0 <_fflush_r>
 801ce44:	bd10      	pop	{r4, pc}
 801ce46:	bf00      	nop
 801ce48:	200036e0 	.word	0x200036e0
 801ce4c:	20003748 	.word	0x20003748
 801ce50:	200037b0 	.word	0x200037b0

0801ce54 <global_stdio_init.part.0>:
 801ce54:	b510      	push	{r4, lr}
 801ce56:	4b0b      	ldr	r3, [pc, #44]	@ (801ce84 <global_stdio_init.part.0+0x30>)
 801ce58:	4c0b      	ldr	r4, [pc, #44]	@ (801ce88 <global_stdio_init.part.0+0x34>)
 801ce5a:	4a0c      	ldr	r2, [pc, #48]	@ (801ce8c <global_stdio_init.part.0+0x38>)
 801ce5c:	601a      	str	r2, [r3, #0]
 801ce5e:	4620      	mov	r0, r4
 801ce60:	2200      	movs	r2, #0
 801ce62:	2104      	movs	r1, #4
 801ce64:	f7ff ff94 	bl	801cd90 <std>
 801ce68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ce6c:	2201      	movs	r2, #1
 801ce6e:	2109      	movs	r1, #9
 801ce70:	f7ff ff8e 	bl	801cd90 <std>
 801ce74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ce78:	2202      	movs	r2, #2
 801ce7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce7e:	2112      	movs	r1, #18
 801ce80:	f7ff bf86 	b.w	801cd90 <std>
 801ce84:	20003818 	.word	0x20003818
 801ce88:	200036e0 	.word	0x200036e0
 801ce8c:	0801cdfd 	.word	0x0801cdfd

0801ce90 <__sfp_lock_acquire>:
 801ce90:	4801      	ldr	r0, [pc, #4]	@ (801ce98 <__sfp_lock_acquire+0x8>)
 801ce92:	f000 bb60 	b.w	801d556 <__retarget_lock_acquire_recursive>
 801ce96:	bf00      	nop
 801ce98:	20003821 	.word	0x20003821

0801ce9c <__sfp_lock_release>:
 801ce9c:	4801      	ldr	r0, [pc, #4]	@ (801cea4 <__sfp_lock_release+0x8>)
 801ce9e:	f000 bb5b 	b.w	801d558 <__retarget_lock_release_recursive>
 801cea2:	bf00      	nop
 801cea4:	20003821 	.word	0x20003821

0801cea8 <__sinit>:
 801cea8:	b510      	push	{r4, lr}
 801ceaa:	4604      	mov	r4, r0
 801ceac:	f7ff fff0 	bl	801ce90 <__sfp_lock_acquire>
 801ceb0:	6a23      	ldr	r3, [r4, #32]
 801ceb2:	b11b      	cbz	r3, 801cebc <__sinit+0x14>
 801ceb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceb8:	f7ff bff0 	b.w	801ce9c <__sfp_lock_release>
 801cebc:	4b04      	ldr	r3, [pc, #16]	@ (801ced0 <__sinit+0x28>)
 801cebe:	6223      	str	r3, [r4, #32]
 801cec0:	4b04      	ldr	r3, [pc, #16]	@ (801ced4 <__sinit+0x2c>)
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d1f5      	bne.n	801ceb4 <__sinit+0xc>
 801cec8:	f7ff ffc4 	bl	801ce54 <global_stdio_init.part.0>
 801cecc:	e7f2      	b.n	801ceb4 <__sinit+0xc>
 801cece:	bf00      	nop
 801ced0:	0801ce15 	.word	0x0801ce15
 801ced4:	20003818 	.word	0x20003818

0801ced8 <_fwalk_sglue>:
 801ced8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cedc:	4607      	mov	r7, r0
 801cede:	4688      	mov	r8, r1
 801cee0:	4614      	mov	r4, r2
 801cee2:	2600      	movs	r6, #0
 801cee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cee8:	f1b9 0901 	subs.w	r9, r9, #1
 801ceec:	d505      	bpl.n	801cefa <_fwalk_sglue+0x22>
 801ceee:	6824      	ldr	r4, [r4, #0]
 801cef0:	2c00      	cmp	r4, #0
 801cef2:	d1f7      	bne.n	801cee4 <_fwalk_sglue+0xc>
 801cef4:	4630      	mov	r0, r6
 801cef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cefa:	89ab      	ldrh	r3, [r5, #12]
 801cefc:	2b01      	cmp	r3, #1
 801cefe:	d907      	bls.n	801cf10 <_fwalk_sglue+0x38>
 801cf00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cf04:	3301      	adds	r3, #1
 801cf06:	d003      	beq.n	801cf10 <_fwalk_sglue+0x38>
 801cf08:	4629      	mov	r1, r5
 801cf0a:	4638      	mov	r0, r7
 801cf0c:	47c0      	blx	r8
 801cf0e:	4306      	orrs	r6, r0
 801cf10:	3568      	adds	r5, #104	@ 0x68
 801cf12:	e7e9      	b.n	801cee8 <_fwalk_sglue+0x10>

0801cf14 <_fwrite_r>:
 801cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf18:	9c08      	ldr	r4, [sp, #32]
 801cf1a:	468a      	mov	sl, r1
 801cf1c:	4690      	mov	r8, r2
 801cf1e:	fb02 f903 	mul.w	r9, r2, r3
 801cf22:	4606      	mov	r6, r0
 801cf24:	b118      	cbz	r0, 801cf2e <_fwrite_r+0x1a>
 801cf26:	6a03      	ldr	r3, [r0, #32]
 801cf28:	b90b      	cbnz	r3, 801cf2e <_fwrite_r+0x1a>
 801cf2a:	f7ff ffbd 	bl	801cea8 <__sinit>
 801cf2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cf30:	07dd      	lsls	r5, r3, #31
 801cf32:	d405      	bmi.n	801cf40 <_fwrite_r+0x2c>
 801cf34:	89a3      	ldrh	r3, [r4, #12]
 801cf36:	0598      	lsls	r0, r3, #22
 801cf38:	d402      	bmi.n	801cf40 <_fwrite_r+0x2c>
 801cf3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cf3c:	f000 fb0b 	bl	801d556 <__retarget_lock_acquire_recursive>
 801cf40:	89a3      	ldrh	r3, [r4, #12]
 801cf42:	0719      	lsls	r1, r3, #28
 801cf44:	d516      	bpl.n	801cf74 <_fwrite_r+0x60>
 801cf46:	6923      	ldr	r3, [r4, #16]
 801cf48:	b1a3      	cbz	r3, 801cf74 <_fwrite_r+0x60>
 801cf4a:	2500      	movs	r5, #0
 801cf4c:	454d      	cmp	r5, r9
 801cf4e:	d01f      	beq.n	801cf90 <_fwrite_r+0x7c>
 801cf50:	68a7      	ldr	r7, [r4, #8]
 801cf52:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801cf56:	3f01      	subs	r7, #1
 801cf58:	2f00      	cmp	r7, #0
 801cf5a:	60a7      	str	r7, [r4, #8]
 801cf5c:	da04      	bge.n	801cf68 <_fwrite_r+0x54>
 801cf5e:	69a3      	ldr	r3, [r4, #24]
 801cf60:	429f      	cmp	r7, r3
 801cf62:	db0f      	blt.n	801cf84 <_fwrite_r+0x70>
 801cf64:	290a      	cmp	r1, #10
 801cf66:	d00d      	beq.n	801cf84 <_fwrite_r+0x70>
 801cf68:	6823      	ldr	r3, [r4, #0]
 801cf6a:	1c5a      	adds	r2, r3, #1
 801cf6c:	6022      	str	r2, [r4, #0]
 801cf6e:	7019      	strb	r1, [r3, #0]
 801cf70:	3501      	adds	r5, #1
 801cf72:	e7eb      	b.n	801cf4c <_fwrite_r+0x38>
 801cf74:	4621      	mov	r1, r4
 801cf76:	4630      	mov	r0, r6
 801cf78:	f000 f970 	bl	801d25c <__swsetup_r>
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	d0e4      	beq.n	801cf4a <_fwrite_r+0x36>
 801cf80:	2500      	movs	r5, #0
 801cf82:	e005      	b.n	801cf90 <_fwrite_r+0x7c>
 801cf84:	4622      	mov	r2, r4
 801cf86:	4630      	mov	r0, r6
 801cf88:	f000 f92a 	bl	801d1e0 <__swbuf_r>
 801cf8c:	3001      	adds	r0, #1
 801cf8e:	d1ef      	bne.n	801cf70 <_fwrite_r+0x5c>
 801cf90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cf92:	07da      	lsls	r2, r3, #31
 801cf94:	d405      	bmi.n	801cfa2 <_fwrite_r+0x8e>
 801cf96:	89a3      	ldrh	r3, [r4, #12]
 801cf98:	059b      	lsls	r3, r3, #22
 801cf9a:	d402      	bmi.n	801cfa2 <_fwrite_r+0x8e>
 801cf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cf9e:	f000 fadb 	bl	801d558 <__retarget_lock_release_recursive>
 801cfa2:	fbb5 f0f8 	udiv	r0, r5, r8
 801cfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cfac <fwrite>:
 801cfac:	b507      	push	{r0, r1, r2, lr}
 801cfae:	9300      	str	r3, [sp, #0]
 801cfb0:	4613      	mov	r3, r2
 801cfb2:	460a      	mov	r2, r1
 801cfb4:	4601      	mov	r1, r0
 801cfb6:	4803      	ldr	r0, [pc, #12]	@ (801cfc4 <fwrite+0x18>)
 801cfb8:	6800      	ldr	r0, [r0, #0]
 801cfba:	f7ff ffab 	bl	801cf14 <_fwrite_r>
 801cfbe:	b003      	add	sp, #12
 801cfc0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfc4:	20000174 	.word	0x20000174

0801cfc8 <iprintf>:
 801cfc8:	b40f      	push	{r0, r1, r2, r3}
 801cfca:	b507      	push	{r0, r1, r2, lr}
 801cfcc:	4906      	ldr	r1, [pc, #24]	@ (801cfe8 <iprintf+0x20>)
 801cfce:	ab04      	add	r3, sp, #16
 801cfd0:	6808      	ldr	r0, [r1, #0]
 801cfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfd6:	6881      	ldr	r1, [r0, #8]
 801cfd8:	9301      	str	r3, [sp, #4]
 801cfda:	f002 fdcd 	bl	801fb78 <_vfiprintf_r>
 801cfde:	b003      	add	sp, #12
 801cfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfe4:	b004      	add	sp, #16
 801cfe6:	4770      	bx	lr
 801cfe8:	20000174 	.word	0x20000174

0801cfec <_puts_r>:
 801cfec:	6a03      	ldr	r3, [r0, #32]
 801cfee:	b570      	push	{r4, r5, r6, lr}
 801cff0:	6884      	ldr	r4, [r0, #8]
 801cff2:	4605      	mov	r5, r0
 801cff4:	460e      	mov	r6, r1
 801cff6:	b90b      	cbnz	r3, 801cffc <_puts_r+0x10>
 801cff8:	f7ff ff56 	bl	801cea8 <__sinit>
 801cffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cffe:	07db      	lsls	r3, r3, #31
 801d000:	d405      	bmi.n	801d00e <_puts_r+0x22>
 801d002:	89a3      	ldrh	r3, [r4, #12]
 801d004:	0598      	lsls	r0, r3, #22
 801d006:	d402      	bmi.n	801d00e <_puts_r+0x22>
 801d008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d00a:	f000 faa4 	bl	801d556 <__retarget_lock_acquire_recursive>
 801d00e:	89a3      	ldrh	r3, [r4, #12]
 801d010:	0719      	lsls	r1, r3, #28
 801d012:	d502      	bpl.n	801d01a <_puts_r+0x2e>
 801d014:	6923      	ldr	r3, [r4, #16]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d135      	bne.n	801d086 <_puts_r+0x9a>
 801d01a:	4621      	mov	r1, r4
 801d01c:	4628      	mov	r0, r5
 801d01e:	f000 f91d 	bl	801d25c <__swsetup_r>
 801d022:	b380      	cbz	r0, 801d086 <_puts_r+0x9a>
 801d024:	f04f 35ff 	mov.w	r5, #4294967295
 801d028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d02a:	07da      	lsls	r2, r3, #31
 801d02c:	d405      	bmi.n	801d03a <_puts_r+0x4e>
 801d02e:	89a3      	ldrh	r3, [r4, #12]
 801d030:	059b      	lsls	r3, r3, #22
 801d032:	d402      	bmi.n	801d03a <_puts_r+0x4e>
 801d034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d036:	f000 fa8f 	bl	801d558 <__retarget_lock_release_recursive>
 801d03a:	4628      	mov	r0, r5
 801d03c:	bd70      	pop	{r4, r5, r6, pc}
 801d03e:	2b00      	cmp	r3, #0
 801d040:	da04      	bge.n	801d04c <_puts_r+0x60>
 801d042:	69a2      	ldr	r2, [r4, #24]
 801d044:	429a      	cmp	r2, r3
 801d046:	dc17      	bgt.n	801d078 <_puts_r+0x8c>
 801d048:	290a      	cmp	r1, #10
 801d04a:	d015      	beq.n	801d078 <_puts_r+0x8c>
 801d04c:	6823      	ldr	r3, [r4, #0]
 801d04e:	1c5a      	adds	r2, r3, #1
 801d050:	6022      	str	r2, [r4, #0]
 801d052:	7019      	strb	r1, [r3, #0]
 801d054:	68a3      	ldr	r3, [r4, #8]
 801d056:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d05a:	3b01      	subs	r3, #1
 801d05c:	60a3      	str	r3, [r4, #8]
 801d05e:	2900      	cmp	r1, #0
 801d060:	d1ed      	bne.n	801d03e <_puts_r+0x52>
 801d062:	2b00      	cmp	r3, #0
 801d064:	da11      	bge.n	801d08a <_puts_r+0x9e>
 801d066:	4622      	mov	r2, r4
 801d068:	210a      	movs	r1, #10
 801d06a:	4628      	mov	r0, r5
 801d06c:	f000 f8b8 	bl	801d1e0 <__swbuf_r>
 801d070:	3001      	adds	r0, #1
 801d072:	d0d7      	beq.n	801d024 <_puts_r+0x38>
 801d074:	250a      	movs	r5, #10
 801d076:	e7d7      	b.n	801d028 <_puts_r+0x3c>
 801d078:	4622      	mov	r2, r4
 801d07a:	4628      	mov	r0, r5
 801d07c:	f000 f8b0 	bl	801d1e0 <__swbuf_r>
 801d080:	3001      	adds	r0, #1
 801d082:	d1e7      	bne.n	801d054 <_puts_r+0x68>
 801d084:	e7ce      	b.n	801d024 <_puts_r+0x38>
 801d086:	3e01      	subs	r6, #1
 801d088:	e7e4      	b.n	801d054 <_puts_r+0x68>
 801d08a:	6823      	ldr	r3, [r4, #0]
 801d08c:	1c5a      	adds	r2, r3, #1
 801d08e:	6022      	str	r2, [r4, #0]
 801d090:	220a      	movs	r2, #10
 801d092:	701a      	strb	r2, [r3, #0]
 801d094:	e7ee      	b.n	801d074 <_puts_r+0x88>
	...

0801d098 <puts>:
 801d098:	4b02      	ldr	r3, [pc, #8]	@ (801d0a4 <puts+0xc>)
 801d09a:	4601      	mov	r1, r0
 801d09c:	6818      	ldr	r0, [r3, #0]
 801d09e:	f7ff bfa5 	b.w	801cfec <_puts_r>
 801d0a2:	bf00      	nop
 801d0a4:	20000174 	.word	0x20000174

0801d0a8 <siprintf>:
 801d0a8:	b40e      	push	{r1, r2, r3}
 801d0aa:	b500      	push	{lr}
 801d0ac:	b09c      	sub	sp, #112	@ 0x70
 801d0ae:	ab1d      	add	r3, sp, #116	@ 0x74
 801d0b0:	9002      	str	r0, [sp, #8]
 801d0b2:	9006      	str	r0, [sp, #24]
 801d0b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d0b8:	4809      	ldr	r0, [pc, #36]	@ (801d0e0 <siprintf+0x38>)
 801d0ba:	9107      	str	r1, [sp, #28]
 801d0bc:	9104      	str	r1, [sp, #16]
 801d0be:	4909      	ldr	r1, [pc, #36]	@ (801d0e4 <siprintf+0x3c>)
 801d0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0c4:	9105      	str	r1, [sp, #20]
 801d0c6:	6800      	ldr	r0, [r0, #0]
 801d0c8:	9301      	str	r3, [sp, #4]
 801d0ca:	a902      	add	r1, sp, #8
 801d0cc:	f002 fc2e 	bl	801f92c <_svfiprintf_r>
 801d0d0:	9b02      	ldr	r3, [sp, #8]
 801d0d2:	2200      	movs	r2, #0
 801d0d4:	701a      	strb	r2, [r3, #0]
 801d0d6:	b01c      	add	sp, #112	@ 0x70
 801d0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0dc:	b003      	add	sp, #12
 801d0de:	4770      	bx	lr
 801d0e0:	20000174 	.word	0x20000174
 801d0e4:	ffff0208 	.word	0xffff0208

0801d0e8 <__sread>:
 801d0e8:	b510      	push	{r4, lr}
 801d0ea:	460c      	mov	r4, r1
 801d0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0f0:	f000 f9d2 	bl	801d498 <_read_r>
 801d0f4:	2800      	cmp	r0, #0
 801d0f6:	bfab      	itete	ge
 801d0f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d0fa:	89a3      	ldrhlt	r3, [r4, #12]
 801d0fc:	181b      	addge	r3, r3, r0
 801d0fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d102:	bfac      	ite	ge
 801d104:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d106:	81a3      	strhlt	r3, [r4, #12]
 801d108:	bd10      	pop	{r4, pc}

0801d10a <__swrite>:
 801d10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d10e:	461f      	mov	r7, r3
 801d110:	898b      	ldrh	r3, [r1, #12]
 801d112:	05db      	lsls	r3, r3, #23
 801d114:	4605      	mov	r5, r0
 801d116:	460c      	mov	r4, r1
 801d118:	4616      	mov	r6, r2
 801d11a:	d505      	bpl.n	801d128 <__swrite+0x1e>
 801d11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d120:	2302      	movs	r3, #2
 801d122:	2200      	movs	r2, #0
 801d124:	f000 f9a6 	bl	801d474 <_lseek_r>
 801d128:	89a3      	ldrh	r3, [r4, #12]
 801d12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d12e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d132:	81a3      	strh	r3, [r4, #12]
 801d134:	4632      	mov	r2, r6
 801d136:	463b      	mov	r3, r7
 801d138:	4628      	mov	r0, r5
 801d13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d13e:	f000 b9cd 	b.w	801d4dc <_write_r>

0801d142 <__sseek>:
 801d142:	b510      	push	{r4, lr}
 801d144:	460c      	mov	r4, r1
 801d146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d14a:	f000 f993 	bl	801d474 <_lseek_r>
 801d14e:	1c43      	adds	r3, r0, #1
 801d150:	89a3      	ldrh	r3, [r4, #12]
 801d152:	bf15      	itete	ne
 801d154:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d15a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d15e:	81a3      	strheq	r3, [r4, #12]
 801d160:	bf18      	it	ne
 801d162:	81a3      	strhne	r3, [r4, #12]
 801d164:	bd10      	pop	{r4, pc}

0801d166 <__sclose>:
 801d166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d16a:	f000 b973 	b.w	801d454 <_close_r>

0801d16e <_vsniprintf_r>:
 801d16e:	b530      	push	{r4, r5, lr}
 801d170:	4614      	mov	r4, r2
 801d172:	2c00      	cmp	r4, #0
 801d174:	b09b      	sub	sp, #108	@ 0x6c
 801d176:	4605      	mov	r5, r0
 801d178:	461a      	mov	r2, r3
 801d17a:	da05      	bge.n	801d188 <_vsniprintf_r+0x1a>
 801d17c:	238b      	movs	r3, #139	@ 0x8b
 801d17e:	6003      	str	r3, [r0, #0]
 801d180:	f04f 30ff 	mov.w	r0, #4294967295
 801d184:	b01b      	add	sp, #108	@ 0x6c
 801d186:	bd30      	pop	{r4, r5, pc}
 801d188:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d18c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d190:	bf14      	ite	ne
 801d192:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d196:	4623      	moveq	r3, r4
 801d198:	9302      	str	r3, [sp, #8]
 801d19a:	9305      	str	r3, [sp, #20]
 801d19c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d1a0:	9100      	str	r1, [sp, #0]
 801d1a2:	9104      	str	r1, [sp, #16]
 801d1a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d1a8:	4669      	mov	r1, sp
 801d1aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d1ac:	f002 fbbe 	bl	801f92c <_svfiprintf_r>
 801d1b0:	1c43      	adds	r3, r0, #1
 801d1b2:	bfbc      	itt	lt
 801d1b4:	238b      	movlt	r3, #139	@ 0x8b
 801d1b6:	602b      	strlt	r3, [r5, #0]
 801d1b8:	2c00      	cmp	r4, #0
 801d1ba:	d0e3      	beq.n	801d184 <_vsniprintf_r+0x16>
 801d1bc:	9b00      	ldr	r3, [sp, #0]
 801d1be:	2200      	movs	r2, #0
 801d1c0:	701a      	strb	r2, [r3, #0]
 801d1c2:	e7df      	b.n	801d184 <_vsniprintf_r+0x16>

0801d1c4 <vsniprintf>:
 801d1c4:	b507      	push	{r0, r1, r2, lr}
 801d1c6:	9300      	str	r3, [sp, #0]
 801d1c8:	4613      	mov	r3, r2
 801d1ca:	460a      	mov	r2, r1
 801d1cc:	4601      	mov	r1, r0
 801d1ce:	4803      	ldr	r0, [pc, #12]	@ (801d1dc <vsniprintf+0x18>)
 801d1d0:	6800      	ldr	r0, [r0, #0]
 801d1d2:	f7ff ffcc 	bl	801d16e <_vsniprintf_r>
 801d1d6:	b003      	add	sp, #12
 801d1d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1dc:	20000174 	.word	0x20000174

0801d1e0 <__swbuf_r>:
 801d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1e2:	460e      	mov	r6, r1
 801d1e4:	4614      	mov	r4, r2
 801d1e6:	4605      	mov	r5, r0
 801d1e8:	b118      	cbz	r0, 801d1f2 <__swbuf_r+0x12>
 801d1ea:	6a03      	ldr	r3, [r0, #32]
 801d1ec:	b90b      	cbnz	r3, 801d1f2 <__swbuf_r+0x12>
 801d1ee:	f7ff fe5b 	bl	801cea8 <__sinit>
 801d1f2:	69a3      	ldr	r3, [r4, #24]
 801d1f4:	60a3      	str	r3, [r4, #8]
 801d1f6:	89a3      	ldrh	r3, [r4, #12]
 801d1f8:	071a      	lsls	r2, r3, #28
 801d1fa:	d501      	bpl.n	801d200 <__swbuf_r+0x20>
 801d1fc:	6923      	ldr	r3, [r4, #16]
 801d1fe:	b943      	cbnz	r3, 801d212 <__swbuf_r+0x32>
 801d200:	4621      	mov	r1, r4
 801d202:	4628      	mov	r0, r5
 801d204:	f000 f82a 	bl	801d25c <__swsetup_r>
 801d208:	b118      	cbz	r0, 801d212 <__swbuf_r+0x32>
 801d20a:	f04f 37ff 	mov.w	r7, #4294967295
 801d20e:	4638      	mov	r0, r7
 801d210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d212:	6823      	ldr	r3, [r4, #0]
 801d214:	6922      	ldr	r2, [r4, #16]
 801d216:	1a98      	subs	r0, r3, r2
 801d218:	6963      	ldr	r3, [r4, #20]
 801d21a:	b2f6      	uxtb	r6, r6
 801d21c:	4283      	cmp	r3, r0
 801d21e:	4637      	mov	r7, r6
 801d220:	dc05      	bgt.n	801d22e <__swbuf_r+0x4e>
 801d222:	4621      	mov	r1, r4
 801d224:	4628      	mov	r0, r5
 801d226:	f002 fe43 	bl	801feb0 <_fflush_r>
 801d22a:	2800      	cmp	r0, #0
 801d22c:	d1ed      	bne.n	801d20a <__swbuf_r+0x2a>
 801d22e:	68a3      	ldr	r3, [r4, #8]
 801d230:	3b01      	subs	r3, #1
 801d232:	60a3      	str	r3, [r4, #8]
 801d234:	6823      	ldr	r3, [r4, #0]
 801d236:	1c5a      	adds	r2, r3, #1
 801d238:	6022      	str	r2, [r4, #0]
 801d23a:	701e      	strb	r6, [r3, #0]
 801d23c:	6962      	ldr	r2, [r4, #20]
 801d23e:	1c43      	adds	r3, r0, #1
 801d240:	429a      	cmp	r2, r3
 801d242:	d004      	beq.n	801d24e <__swbuf_r+0x6e>
 801d244:	89a3      	ldrh	r3, [r4, #12]
 801d246:	07db      	lsls	r3, r3, #31
 801d248:	d5e1      	bpl.n	801d20e <__swbuf_r+0x2e>
 801d24a:	2e0a      	cmp	r6, #10
 801d24c:	d1df      	bne.n	801d20e <__swbuf_r+0x2e>
 801d24e:	4621      	mov	r1, r4
 801d250:	4628      	mov	r0, r5
 801d252:	f002 fe2d 	bl	801feb0 <_fflush_r>
 801d256:	2800      	cmp	r0, #0
 801d258:	d0d9      	beq.n	801d20e <__swbuf_r+0x2e>
 801d25a:	e7d6      	b.n	801d20a <__swbuf_r+0x2a>

0801d25c <__swsetup_r>:
 801d25c:	b538      	push	{r3, r4, r5, lr}
 801d25e:	4b29      	ldr	r3, [pc, #164]	@ (801d304 <__swsetup_r+0xa8>)
 801d260:	4605      	mov	r5, r0
 801d262:	6818      	ldr	r0, [r3, #0]
 801d264:	460c      	mov	r4, r1
 801d266:	b118      	cbz	r0, 801d270 <__swsetup_r+0x14>
 801d268:	6a03      	ldr	r3, [r0, #32]
 801d26a:	b90b      	cbnz	r3, 801d270 <__swsetup_r+0x14>
 801d26c:	f7ff fe1c 	bl	801cea8 <__sinit>
 801d270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d274:	0719      	lsls	r1, r3, #28
 801d276:	d422      	bmi.n	801d2be <__swsetup_r+0x62>
 801d278:	06da      	lsls	r2, r3, #27
 801d27a:	d407      	bmi.n	801d28c <__swsetup_r+0x30>
 801d27c:	2209      	movs	r2, #9
 801d27e:	602a      	str	r2, [r5, #0]
 801d280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d284:	81a3      	strh	r3, [r4, #12]
 801d286:	f04f 30ff 	mov.w	r0, #4294967295
 801d28a:	e033      	b.n	801d2f4 <__swsetup_r+0x98>
 801d28c:	0758      	lsls	r0, r3, #29
 801d28e:	d512      	bpl.n	801d2b6 <__swsetup_r+0x5a>
 801d290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d292:	b141      	cbz	r1, 801d2a6 <__swsetup_r+0x4a>
 801d294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d298:	4299      	cmp	r1, r3
 801d29a:	d002      	beq.n	801d2a2 <__swsetup_r+0x46>
 801d29c:	4628      	mov	r0, r5
 801d29e:	f000 ffe3 	bl	801e268 <_free_r>
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d2a6:	89a3      	ldrh	r3, [r4, #12]
 801d2a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d2ac:	81a3      	strh	r3, [r4, #12]
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	6063      	str	r3, [r4, #4]
 801d2b2:	6923      	ldr	r3, [r4, #16]
 801d2b4:	6023      	str	r3, [r4, #0]
 801d2b6:	89a3      	ldrh	r3, [r4, #12]
 801d2b8:	f043 0308 	orr.w	r3, r3, #8
 801d2bc:	81a3      	strh	r3, [r4, #12]
 801d2be:	6923      	ldr	r3, [r4, #16]
 801d2c0:	b94b      	cbnz	r3, 801d2d6 <__swsetup_r+0x7a>
 801d2c2:	89a3      	ldrh	r3, [r4, #12]
 801d2c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d2c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d2cc:	d003      	beq.n	801d2d6 <__swsetup_r+0x7a>
 801d2ce:	4621      	mov	r1, r4
 801d2d0:	4628      	mov	r0, r5
 801d2d2:	f002 fe4d 	bl	801ff70 <__smakebuf_r>
 801d2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2da:	f013 0201 	ands.w	r2, r3, #1
 801d2de:	d00a      	beq.n	801d2f6 <__swsetup_r+0x9a>
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	60a2      	str	r2, [r4, #8]
 801d2e4:	6962      	ldr	r2, [r4, #20]
 801d2e6:	4252      	negs	r2, r2
 801d2e8:	61a2      	str	r2, [r4, #24]
 801d2ea:	6922      	ldr	r2, [r4, #16]
 801d2ec:	b942      	cbnz	r2, 801d300 <__swsetup_r+0xa4>
 801d2ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d2f2:	d1c5      	bne.n	801d280 <__swsetup_r+0x24>
 801d2f4:	bd38      	pop	{r3, r4, r5, pc}
 801d2f6:	0799      	lsls	r1, r3, #30
 801d2f8:	bf58      	it	pl
 801d2fa:	6962      	ldrpl	r2, [r4, #20]
 801d2fc:	60a2      	str	r2, [r4, #8]
 801d2fe:	e7f4      	b.n	801d2ea <__swsetup_r+0x8e>
 801d300:	2000      	movs	r0, #0
 801d302:	e7f7      	b.n	801d2f4 <__swsetup_r+0x98>
 801d304:	20000174 	.word	0x20000174

0801d308 <memmove>:
 801d308:	4288      	cmp	r0, r1
 801d30a:	b510      	push	{r4, lr}
 801d30c:	eb01 0402 	add.w	r4, r1, r2
 801d310:	d902      	bls.n	801d318 <memmove+0x10>
 801d312:	4284      	cmp	r4, r0
 801d314:	4623      	mov	r3, r4
 801d316:	d807      	bhi.n	801d328 <memmove+0x20>
 801d318:	1e43      	subs	r3, r0, #1
 801d31a:	42a1      	cmp	r1, r4
 801d31c:	d008      	beq.n	801d330 <memmove+0x28>
 801d31e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d322:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d326:	e7f8      	b.n	801d31a <memmove+0x12>
 801d328:	4402      	add	r2, r0
 801d32a:	4601      	mov	r1, r0
 801d32c:	428a      	cmp	r2, r1
 801d32e:	d100      	bne.n	801d332 <memmove+0x2a>
 801d330:	bd10      	pop	{r4, pc}
 801d332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d33a:	e7f7      	b.n	801d32c <memmove+0x24>

0801d33c <memset>:
 801d33c:	4402      	add	r2, r0
 801d33e:	4603      	mov	r3, r0
 801d340:	4293      	cmp	r3, r2
 801d342:	d100      	bne.n	801d346 <memset+0xa>
 801d344:	4770      	bx	lr
 801d346:	f803 1b01 	strb.w	r1, [r3], #1
 801d34a:	e7f9      	b.n	801d340 <memset+0x4>

0801d34c <strchr>:
 801d34c:	b2c9      	uxtb	r1, r1
 801d34e:	4603      	mov	r3, r0
 801d350:	4618      	mov	r0, r3
 801d352:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d356:	b112      	cbz	r2, 801d35e <strchr+0x12>
 801d358:	428a      	cmp	r2, r1
 801d35a:	d1f9      	bne.n	801d350 <strchr+0x4>
 801d35c:	4770      	bx	lr
 801d35e:	2900      	cmp	r1, #0
 801d360:	bf18      	it	ne
 801d362:	2000      	movne	r0, #0
 801d364:	4770      	bx	lr
	...

0801d368 <strtok>:
 801d368:	4b16      	ldr	r3, [pc, #88]	@ (801d3c4 <strtok+0x5c>)
 801d36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d36e:	681f      	ldr	r7, [r3, #0]
 801d370:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801d372:	4605      	mov	r5, r0
 801d374:	460e      	mov	r6, r1
 801d376:	b9ec      	cbnz	r4, 801d3b4 <strtok+0x4c>
 801d378:	2050      	movs	r0, #80	@ 0x50
 801d37a:	f7fe fd61 	bl	801be40 <malloc>
 801d37e:	4602      	mov	r2, r0
 801d380:	6478      	str	r0, [r7, #68]	@ 0x44
 801d382:	b920      	cbnz	r0, 801d38e <strtok+0x26>
 801d384:	4b10      	ldr	r3, [pc, #64]	@ (801d3c8 <strtok+0x60>)
 801d386:	4811      	ldr	r0, [pc, #68]	@ (801d3cc <strtok+0x64>)
 801d388:	215b      	movs	r1, #91	@ 0x5b
 801d38a:	f000 f903 	bl	801d594 <__assert_func>
 801d38e:	e9c0 4400 	strd	r4, r4, [r0]
 801d392:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d396:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d39a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801d39e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801d3a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801d3a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801d3aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801d3ae:	6184      	str	r4, [r0, #24]
 801d3b0:	7704      	strb	r4, [r0, #28]
 801d3b2:	6244      	str	r4, [r0, #36]	@ 0x24
 801d3b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d3b6:	4631      	mov	r1, r6
 801d3b8:	4628      	mov	r0, r5
 801d3ba:	2301      	movs	r3, #1
 801d3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3c0:	f000 b806 	b.w	801d3d0 <__strtok_r>
 801d3c4:	20000174 	.word	0x20000174
 801d3c8:	08022fb6 	.word	0x08022fb6
 801d3cc:	08022fcd 	.word	0x08022fcd

0801d3d0 <__strtok_r>:
 801d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3d2:	4604      	mov	r4, r0
 801d3d4:	b908      	cbnz	r0, 801d3da <__strtok_r+0xa>
 801d3d6:	6814      	ldr	r4, [r2, #0]
 801d3d8:	b144      	cbz	r4, 801d3ec <__strtok_r+0x1c>
 801d3da:	4620      	mov	r0, r4
 801d3dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d3e0:	460f      	mov	r7, r1
 801d3e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d3e6:	b91e      	cbnz	r6, 801d3f0 <__strtok_r+0x20>
 801d3e8:	b965      	cbnz	r5, 801d404 <__strtok_r+0x34>
 801d3ea:	6015      	str	r5, [r2, #0]
 801d3ec:	2000      	movs	r0, #0
 801d3ee:	e005      	b.n	801d3fc <__strtok_r+0x2c>
 801d3f0:	42b5      	cmp	r5, r6
 801d3f2:	d1f6      	bne.n	801d3e2 <__strtok_r+0x12>
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d1f0      	bne.n	801d3da <__strtok_r+0xa>
 801d3f8:	6014      	str	r4, [r2, #0]
 801d3fa:	7003      	strb	r3, [r0, #0]
 801d3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3fe:	461c      	mov	r4, r3
 801d400:	e00c      	b.n	801d41c <__strtok_r+0x4c>
 801d402:	b915      	cbnz	r5, 801d40a <__strtok_r+0x3a>
 801d404:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d408:	460e      	mov	r6, r1
 801d40a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d40e:	42ab      	cmp	r3, r5
 801d410:	d1f7      	bne.n	801d402 <__strtok_r+0x32>
 801d412:	2b00      	cmp	r3, #0
 801d414:	d0f3      	beq.n	801d3fe <__strtok_r+0x2e>
 801d416:	2300      	movs	r3, #0
 801d418:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d41c:	6014      	str	r4, [r2, #0]
 801d41e:	e7ed      	b.n	801d3fc <__strtok_r+0x2c>

0801d420 <strstr>:
 801d420:	780a      	ldrb	r2, [r1, #0]
 801d422:	b570      	push	{r4, r5, r6, lr}
 801d424:	b96a      	cbnz	r2, 801d442 <strstr+0x22>
 801d426:	bd70      	pop	{r4, r5, r6, pc}
 801d428:	429a      	cmp	r2, r3
 801d42a:	d109      	bne.n	801d440 <strstr+0x20>
 801d42c:	460c      	mov	r4, r1
 801d42e:	4605      	mov	r5, r0
 801d430:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d434:	2b00      	cmp	r3, #0
 801d436:	d0f6      	beq.n	801d426 <strstr+0x6>
 801d438:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d43c:	429e      	cmp	r6, r3
 801d43e:	d0f7      	beq.n	801d430 <strstr+0x10>
 801d440:	3001      	adds	r0, #1
 801d442:	7803      	ldrb	r3, [r0, #0]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d1ef      	bne.n	801d428 <strstr+0x8>
 801d448:	4618      	mov	r0, r3
 801d44a:	e7ec      	b.n	801d426 <strstr+0x6>

0801d44c <_localeconv_r>:
 801d44c:	4800      	ldr	r0, [pc, #0]	@ (801d450 <_localeconv_r+0x4>)
 801d44e:	4770      	bx	lr
 801d450:	200002b4 	.word	0x200002b4

0801d454 <_close_r>:
 801d454:	b538      	push	{r3, r4, r5, lr}
 801d456:	4d06      	ldr	r5, [pc, #24]	@ (801d470 <_close_r+0x1c>)
 801d458:	2300      	movs	r3, #0
 801d45a:	4604      	mov	r4, r0
 801d45c:	4608      	mov	r0, r1
 801d45e:	602b      	str	r3, [r5, #0]
 801d460:	f7e6 fb46 	bl	8003af0 <_close>
 801d464:	1c43      	adds	r3, r0, #1
 801d466:	d102      	bne.n	801d46e <_close_r+0x1a>
 801d468:	682b      	ldr	r3, [r5, #0]
 801d46a:	b103      	cbz	r3, 801d46e <_close_r+0x1a>
 801d46c:	6023      	str	r3, [r4, #0]
 801d46e:	bd38      	pop	{r3, r4, r5, pc}
 801d470:	2000381c 	.word	0x2000381c

0801d474 <_lseek_r>:
 801d474:	b538      	push	{r3, r4, r5, lr}
 801d476:	4d07      	ldr	r5, [pc, #28]	@ (801d494 <_lseek_r+0x20>)
 801d478:	4604      	mov	r4, r0
 801d47a:	4608      	mov	r0, r1
 801d47c:	4611      	mov	r1, r2
 801d47e:	2200      	movs	r2, #0
 801d480:	602a      	str	r2, [r5, #0]
 801d482:	461a      	mov	r2, r3
 801d484:	f7e6 fb5b 	bl	8003b3e <_lseek>
 801d488:	1c43      	adds	r3, r0, #1
 801d48a:	d102      	bne.n	801d492 <_lseek_r+0x1e>
 801d48c:	682b      	ldr	r3, [r5, #0]
 801d48e:	b103      	cbz	r3, 801d492 <_lseek_r+0x1e>
 801d490:	6023      	str	r3, [r4, #0]
 801d492:	bd38      	pop	{r3, r4, r5, pc}
 801d494:	2000381c 	.word	0x2000381c

0801d498 <_read_r>:
 801d498:	b538      	push	{r3, r4, r5, lr}
 801d49a:	4d07      	ldr	r5, [pc, #28]	@ (801d4b8 <_read_r+0x20>)
 801d49c:	4604      	mov	r4, r0
 801d49e:	4608      	mov	r0, r1
 801d4a0:	4611      	mov	r1, r2
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	602a      	str	r2, [r5, #0]
 801d4a6:	461a      	mov	r2, r3
 801d4a8:	f7e6 fae9 	bl	8003a7e <_read>
 801d4ac:	1c43      	adds	r3, r0, #1
 801d4ae:	d102      	bne.n	801d4b6 <_read_r+0x1e>
 801d4b0:	682b      	ldr	r3, [r5, #0]
 801d4b2:	b103      	cbz	r3, 801d4b6 <_read_r+0x1e>
 801d4b4:	6023      	str	r3, [r4, #0]
 801d4b6:	bd38      	pop	{r3, r4, r5, pc}
 801d4b8:	2000381c 	.word	0x2000381c

0801d4bc <_sbrk_r>:
 801d4bc:	b538      	push	{r3, r4, r5, lr}
 801d4be:	4d06      	ldr	r5, [pc, #24]	@ (801d4d8 <_sbrk_r+0x1c>)
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	4604      	mov	r4, r0
 801d4c4:	4608      	mov	r0, r1
 801d4c6:	602b      	str	r3, [r5, #0]
 801d4c8:	f7e6 fb46 	bl	8003b58 <_sbrk>
 801d4cc:	1c43      	adds	r3, r0, #1
 801d4ce:	d102      	bne.n	801d4d6 <_sbrk_r+0x1a>
 801d4d0:	682b      	ldr	r3, [r5, #0]
 801d4d2:	b103      	cbz	r3, 801d4d6 <_sbrk_r+0x1a>
 801d4d4:	6023      	str	r3, [r4, #0]
 801d4d6:	bd38      	pop	{r3, r4, r5, pc}
 801d4d8:	2000381c 	.word	0x2000381c

0801d4dc <_write_r>:
 801d4dc:	b538      	push	{r3, r4, r5, lr}
 801d4de:	4d07      	ldr	r5, [pc, #28]	@ (801d4fc <_write_r+0x20>)
 801d4e0:	4604      	mov	r4, r0
 801d4e2:	4608      	mov	r0, r1
 801d4e4:	4611      	mov	r1, r2
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	602a      	str	r2, [r5, #0]
 801d4ea:	461a      	mov	r2, r3
 801d4ec:	f7e6 fae4 	bl	8003ab8 <_write>
 801d4f0:	1c43      	adds	r3, r0, #1
 801d4f2:	d102      	bne.n	801d4fa <_write_r+0x1e>
 801d4f4:	682b      	ldr	r3, [r5, #0]
 801d4f6:	b103      	cbz	r3, 801d4fa <_write_r+0x1e>
 801d4f8:	6023      	str	r3, [r4, #0]
 801d4fa:	bd38      	pop	{r3, r4, r5, pc}
 801d4fc:	2000381c 	.word	0x2000381c

0801d500 <__errno>:
 801d500:	4b01      	ldr	r3, [pc, #4]	@ (801d508 <__errno+0x8>)
 801d502:	6818      	ldr	r0, [r3, #0]
 801d504:	4770      	bx	lr
 801d506:	bf00      	nop
 801d508:	20000174 	.word	0x20000174

0801d50c <__libc_init_array>:
 801d50c:	b570      	push	{r4, r5, r6, lr}
 801d50e:	4d0d      	ldr	r5, [pc, #52]	@ (801d544 <__libc_init_array+0x38>)
 801d510:	4c0d      	ldr	r4, [pc, #52]	@ (801d548 <__libc_init_array+0x3c>)
 801d512:	1b64      	subs	r4, r4, r5
 801d514:	10a4      	asrs	r4, r4, #2
 801d516:	2600      	movs	r6, #0
 801d518:	42a6      	cmp	r6, r4
 801d51a:	d109      	bne.n	801d530 <__libc_init_array+0x24>
 801d51c:	4d0b      	ldr	r5, [pc, #44]	@ (801d54c <__libc_init_array+0x40>)
 801d51e:	4c0c      	ldr	r4, [pc, #48]	@ (801d550 <__libc_init_array+0x44>)
 801d520:	f003 f98a 	bl	8020838 <_init>
 801d524:	1b64      	subs	r4, r4, r5
 801d526:	10a4      	asrs	r4, r4, #2
 801d528:	2600      	movs	r6, #0
 801d52a:	42a6      	cmp	r6, r4
 801d52c:	d105      	bne.n	801d53a <__libc_init_array+0x2e>
 801d52e:	bd70      	pop	{r4, r5, r6, pc}
 801d530:	f855 3b04 	ldr.w	r3, [r5], #4
 801d534:	4798      	blx	r3
 801d536:	3601      	adds	r6, #1
 801d538:	e7ee      	b.n	801d518 <__libc_init_array+0xc>
 801d53a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d53e:	4798      	blx	r3
 801d540:	3601      	adds	r6, #1
 801d542:	e7f2      	b.n	801d52a <__libc_init_array+0x1e>
 801d544:	0802330c 	.word	0x0802330c
 801d548:	0802330c 	.word	0x0802330c
 801d54c:	0802330c 	.word	0x0802330c
 801d550:	08023310 	.word	0x08023310

0801d554 <__retarget_lock_init_recursive>:
 801d554:	4770      	bx	lr

0801d556 <__retarget_lock_acquire_recursive>:
 801d556:	4770      	bx	lr

0801d558 <__retarget_lock_release_recursive>:
 801d558:	4770      	bx	lr

0801d55a <strcpy>:
 801d55a:	4603      	mov	r3, r0
 801d55c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d560:	f803 2b01 	strb.w	r2, [r3], #1
 801d564:	2a00      	cmp	r2, #0
 801d566:	d1f9      	bne.n	801d55c <strcpy+0x2>
 801d568:	4770      	bx	lr

0801d56a <memcpy>:
 801d56a:	440a      	add	r2, r1
 801d56c:	4291      	cmp	r1, r2
 801d56e:	f100 33ff 	add.w	r3, r0, #4294967295
 801d572:	d100      	bne.n	801d576 <memcpy+0xc>
 801d574:	4770      	bx	lr
 801d576:	b510      	push	{r4, lr}
 801d578:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d57c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d580:	4291      	cmp	r1, r2
 801d582:	d1f9      	bne.n	801d578 <memcpy+0xe>
 801d584:	bd10      	pop	{r4, pc}
	...

0801d588 <nanf>:
 801d588:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801d590 <nanf+0x8>
 801d58c:	4770      	bx	lr
 801d58e:	bf00      	nop
 801d590:	7fc00000 	.word	0x7fc00000

0801d594 <__assert_func>:
 801d594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d596:	4614      	mov	r4, r2
 801d598:	461a      	mov	r2, r3
 801d59a:	4b09      	ldr	r3, [pc, #36]	@ (801d5c0 <__assert_func+0x2c>)
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	4605      	mov	r5, r0
 801d5a0:	68d8      	ldr	r0, [r3, #12]
 801d5a2:	b954      	cbnz	r4, 801d5ba <__assert_func+0x26>
 801d5a4:	4b07      	ldr	r3, [pc, #28]	@ (801d5c4 <__assert_func+0x30>)
 801d5a6:	461c      	mov	r4, r3
 801d5a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d5ac:	9100      	str	r1, [sp, #0]
 801d5ae:	462b      	mov	r3, r5
 801d5b0:	4905      	ldr	r1, [pc, #20]	@ (801d5c8 <__assert_func+0x34>)
 801d5b2:	f002 fca5 	bl	801ff00 <fiprintf>
 801d5b6:	f002 fd53 	bl	8020060 <abort>
 801d5ba:	4b04      	ldr	r3, [pc, #16]	@ (801d5cc <__assert_func+0x38>)
 801d5bc:	e7f4      	b.n	801d5a8 <__assert_func+0x14>
 801d5be:	bf00      	nop
 801d5c0:	20000174 	.word	0x20000174
 801d5c4:	08023062 	.word	0x08023062
 801d5c8:	08023034 	.word	0x08023034
 801d5cc:	08023027 	.word	0x08023027

0801d5d0 <quorem>:
 801d5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5d4:	6903      	ldr	r3, [r0, #16]
 801d5d6:	690c      	ldr	r4, [r1, #16]
 801d5d8:	42a3      	cmp	r3, r4
 801d5da:	4607      	mov	r7, r0
 801d5dc:	db7e      	blt.n	801d6dc <quorem+0x10c>
 801d5de:	3c01      	subs	r4, #1
 801d5e0:	f101 0814 	add.w	r8, r1, #20
 801d5e4:	00a3      	lsls	r3, r4, #2
 801d5e6:	f100 0514 	add.w	r5, r0, #20
 801d5ea:	9300      	str	r3, [sp, #0]
 801d5ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d5f0:	9301      	str	r3, [sp, #4]
 801d5f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d5f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	429a      	cmp	r2, r3
 801d5fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d602:	fbb2 f6f3 	udiv	r6, r2, r3
 801d606:	d32e      	bcc.n	801d666 <quorem+0x96>
 801d608:	f04f 0a00 	mov.w	sl, #0
 801d60c:	46c4      	mov	ip, r8
 801d60e:	46ae      	mov	lr, r5
 801d610:	46d3      	mov	fp, sl
 801d612:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d616:	b298      	uxth	r0, r3
 801d618:	fb06 a000 	mla	r0, r6, r0, sl
 801d61c:	0c02      	lsrs	r2, r0, #16
 801d61e:	0c1b      	lsrs	r3, r3, #16
 801d620:	fb06 2303 	mla	r3, r6, r3, r2
 801d624:	f8de 2000 	ldr.w	r2, [lr]
 801d628:	b280      	uxth	r0, r0
 801d62a:	b292      	uxth	r2, r2
 801d62c:	1a12      	subs	r2, r2, r0
 801d62e:	445a      	add	r2, fp
 801d630:	f8de 0000 	ldr.w	r0, [lr]
 801d634:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d638:	b29b      	uxth	r3, r3
 801d63a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d63e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d642:	b292      	uxth	r2, r2
 801d644:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d648:	45e1      	cmp	r9, ip
 801d64a:	f84e 2b04 	str.w	r2, [lr], #4
 801d64e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d652:	d2de      	bcs.n	801d612 <quorem+0x42>
 801d654:	9b00      	ldr	r3, [sp, #0]
 801d656:	58eb      	ldr	r3, [r5, r3]
 801d658:	b92b      	cbnz	r3, 801d666 <quorem+0x96>
 801d65a:	9b01      	ldr	r3, [sp, #4]
 801d65c:	3b04      	subs	r3, #4
 801d65e:	429d      	cmp	r5, r3
 801d660:	461a      	mov	r2, r3
 801d662:	d32f      	bcc.n	801d6c4 <quorem+0xf4>
 801d664:	613c      	str	r4, [r7, #16]
 801d666:	4638      	mov	r0, r7
 801d668:	f001 f90c 	bl	801e884 <__mcmp>
 801d66c:	2800      	cmp	r0, #0
 801d66e:	db25      	blt.n	801d6bc <quorem+0xec>
 801d670:	4629      	mov	r1, r5
 801d672:	2000      	movs	r0, #0
 801d674:	f858 2b04 	ldr.w	r2, [r8], #4
 801d678:	f8d1 c000 	ldr.w	ip, [r1]
 801d67c:	fa1f fe82 	uxth.w	lr, r2
 801d680:	fa1f f38c 	uxth.w	r3, ip
 801d684:	eba3 030e 	sub.w	r3, r3, lr
 801d688:	4403      	add	r3, r0
 801d68a:	0c12      	lsrs	r2, r2, #16
 801d68c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d690:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d694:	b29b      	uxth	r3, r3
 801d696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d69a:	45c1      	cmp	r9, r8
 801d69c:	f841 3b04 	str.w	r3, [r1], #4
 801d6a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d6a4:	d2e6      	bcs.n	801d674 <quorem+0xa4>
 801d6a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d6aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d6ae:	b922      	cbnz	r2, 801d6ba <quorem+0xea>
 801d6b0:	3b04      	subs	r3, #4
 801d6b2:	429d      	cmp	r5, r3
 801d6b4:	461a      	mov	r2, r3
 801d6b6:	d30b      	bcc.n	801d6d0 <quorem+0x100>
 801d6b8:	613c      	str	r4, [r7, #16]
 801d6ba:	3601      	adds	r6, #1
 801d6bc:	4630      	mov	r0, r6
 801d6be:	b003      	add	sp, #12
 801d6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6c4:	6812      	ldr	r2, [r2, #0]
 801d6c6:	3b04      	subs	r3, #4
 801d6c8:	2a00      	cmp	r2, #0
 801d6ca:	d1cb      	bne.n	801d664 <quorem+0x94>
 801d6cc:	3c01      	subs	r4, #1
 801d6ce:	e7c6      	b.n	801d65e <quorem+0x8e>
 801d6d0:	6812      	ldr	r2, [r2, #0]
 801d6d2:	3b04      	subs	r3, #4
 801d6d4:	2a00      	cmp	r2, #0
 801d6d6:	d1ef      	bne.n	801d6b8 <quorem+0xe8>
 801d6d8:	3c01      	subs	r4, #1
 801d6da:	e7ea      	b.n	801d6b2 <quorem+0xe2>
 801d6dc:	2000      	movs	r0, #0
 801d6de:	e7ee      	b.n	801d6be <quorem+0xee>

0801d6e0 <_dtoa_r>:
 801d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e4:	69c7      	ldr	r7, [r0, #28]
 801d6e6:	b099      	sub	sp, #100	@ 0x64
 801d6e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d6ec:	ec55 4b10 	vmov	r4, r5, d0
 801d6f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d6f2:	9109      	str	r1, [sp, #36]	@ 0x24
 801d6f4:	4683      	mov	fp, r0
 801d6f6:	920e      	str	r2, [sp, #56]	@ 0x38
 801d6f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d6fa:	b97f      	cbnz	r7, 801d71c <_dtoa_r+0x3c>
 801d6fc:	2010      	movs	r0, #16
 801d6fe:	f7fe fb9f 	bl	801be40 <malloc>
 801d702:	4602      	mov	r2, r0
 801d704:	f8cb 001c 	str.w	r0, [fp, #28]
 801d708:	b920      	cbnz	r0, 801d714 <_dtoa_r+0x34>
 801d70a:	4ba7      	ldr	r3, [pc, #668]	@ (801d9a8 <_dtoa_r+0x2c8>)
 801d70c:	21ef      	movs	r1, #239	@ 0xef
 801d70e:	48a7      	ldr	r0, [pc, #668]	@ (801d9ac <_dtoa_r+0x2cc>)
 801d710:	f7ff ff40 	bl	801d594 <__assert_func>
 801d714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d718:	6007      	str	r7, [r0, #0]
 801d71a:	60c7      	str	r7, [r0, #12]
 801d71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d720:	6819      	ldr	r1, [r3, #0]
 801d722:	b159      	cbz	r1, 801d73c <_dtoa_r+0x5c>
 801d724:	685a      	ldr	r2, [r3, #4]
 801d726:	604a      	str	r2, [r1, #4]
 801d728:	2301      	movs	r3, #1
 801d72a:	4093      	lsls	r3, r2
 801d72c:	608b      	str	r3, [r1, #8]
 801d72e:	4658      	mov	r0, fp
 801d730:	f000 fe24 	bl	801e37c <_Bfree>
 801d734:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d738:	2200      	movs	r2, #0
 801d73a:	601a      	str	r2, [r3, #0]
 801d73c:	1e2b      	subs	r3, r5, #0
 801d73e:	bfb9      	ittee	lt
 801d740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d744:	9303      	strlt	r3, [sp, #12]
 801d746:	2300      	movge	r3, #0
 801d748:	6033      	strge	r3, [r6, #0]
 801d74a:	9f03      	ldr	r7, [sp, #12]
 801d74c:	4b98      	ldr	r3, [pc, #608]	@ (801d9b0 <_dtoa_r+0x2d0>)
 801d74e:	bfbc      	itt	lt
 801d750:	2201      	movlt	r2, #1
 801d752:	6032      	strlt	r2, [r6, #0]
 801d754:	43bb      	bics	r3, r7
 801d756:	d112      	bne.n	801d77e <_dtoa_r+0x9e>
 801d758:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d75a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d75e:	6013      	str	r3, [r2, #0]
 801d760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d764:	4323      	orrs	r3, r4
 801d766:	f000 854d 	beq.w	801e204 <_dtoa_r+0xb24>
 801d76a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d76c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801d9c4 <_dtoa_r+0x2e4>
 801d770:	2b00      	cmp	r3, #0
 801d772:	f000 854f 	beq.w	801e214 <_dtoa_r+0xb34>
 801d776:	f10a 0303 	add.w	r3, sl, #3
 801d77a:	f000 bd49 	b.w	801e210 <_dtoa_r+0xb30>
 801d77e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d782:	2200      	movs	r2, #0
 801d784:	ec51 0b17 	vmov	r0, r1, d7
 801d788:	2300      	movs	r3, #0
 801d78a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801d78e:	f7e3 f9b3 	bl	8000af8 <__aeabi_dcmpeq>
 801d792:	4680      	mov	r8, r0
 801d794:	b158      	cbz	r0, 801d7ae <_dtoa_r+0xce>
 801d796:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d798:	2301      	movs	r3, #1
 801d79a:	6013      	str	r3, [r2, #0]
 801d79c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d79e:	b113      	cbz	r3, 801d7a6 <_dtoa_r+0xc6>
 801d7a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d7a2:	4b84      	ldr	r3, [pc, #528]	@ (801d9b4 <_dtoa_r+0x2d4>)
 801d7a4:	6013      	str	r3, [r2, #0]
 801d7a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801d9c8 <_dtoa_r+0x2e8>
 801d7aa:	f000 bd33 	b.w	801e214 <_dtoa_r+0xb34>
 801d7ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d7b2:	aa16      	add	r2, sp, #88	@ 0x58
 801d7b4:	a917      	add	r1, sp, #92	@ 0x5c
 801d7b6:	4658      	mov	r0, fp
 801d7b8:	f001 f984 	bl	801eac4 <__d2b>
 801d7bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d7c0:	4681      	mov	r9, r0
 801d7c2:	2e00      	cmp	r6, #0
 801d7c4:	d077      	beq.n	801d8b6 <_dtoa_r+0x1d6>
 801d7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d7c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d7d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d7d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d7d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d7dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d7e0:	4619      	mov	r1, r3
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	4b74      	ldr	r3, [pc, #464]	@ (801d9b8 <_dtoa_r+0x2d8>)
 801d7e6:	f7e2 fd67 	bl	80002b8 <__aeabi_dsub>
 801d7ea:	a369      	add	r3, pc, #420	@ (adr r3, 801d990 <_dtoa_r+0x2b0>)
 801d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f0:	f7e2 ff1a 	bl	8000628 <__aeabi_dmul>
 801d7f4:	a368      	add	r3, pc, #416	@ (adr r3, 801d998 <_dtoa_r+0x2b8>)
 801d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7fa:	f7e2 fd5f 	bl	80002bc <__adddf3>
 801d7fe:	4604      	mov	r4, r0
 801d800:	4630      	mov	r0, r6
 801d802:	460d      	mov	r5, r1
 801d804:	f7e2 fea6 	bl	8000554 <__aeabi_i2d>
 801d808:	a365      	add	r3, pc, #404	@ (adr r3, 801d9a0 <_dtoa_r+0x2c0>)
 801d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d80e:	f7e2 ff0b 	bl	8000628 <__aeabi_dmul>
 801d812:	4602      	mov	r2, r0
 801d814:	460b      	mov	r3, r1
 801d816:	4620      	mov	r0, r4
 801d818:	4629      	mov	r1, r5
 801d81a:	f7e2 fd4f 	bl	80002bc <__adddf3>
 801d81e:	4604      	mov	r4, r0
 801d820:	460d      	mov	r5, r1
 801d822:	f7e3 f9b1 	bl	8000b88 <__aeabi_d2iz>
 801d826:	2200      	movs	r2, #0
 801d828:	4607      	mov	r7, r0
 801d82a:	2300      	movs	r3, #0
 801d82c:	4620      	mov	r0, r4
 801d82e:	4629      	mov	r1, r5
 801d830:	f7e3 f96c 	bl	8000b0c <__aeabi_dcmplt>
 801d834:	b140      	cbz	r0, 801d848 <_dtoa_r+0x168>
 801d836:	4638      	mov	r0, r7
 801d838:	f7e2 fe8c 	bl	8000554 <__aeabi_i2d>
 801d83c:	4622      	mov	r2, r4
 801d83e:	462b      	mov	r3, r5
 801d840:	f7e3 f95a 	bl	8000af8 <__aeabi_dcmpeq>
 801d844:	b900      	cbnz	r0, 801d848 <_dtoa_r+0x168>
 801d846:	3f01      	subs	r7, #1
 801d848:	2f16      	cmp	r7, #22
 801d84a:	d851      	bhi.n	801d8f0 <_dtoa_r+0x210>
 801d84c:	4b5b      	ldr	r3, [pc, #364]	@ (801d9bc <_dtoa_r+0x2dc>)
 801d84e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d85a:	f7e3 f957 	bl	8000b0c <__aeabi_dcmplt>
 801d85e:	2800      	cmp	r0, #0
 801d860:	d048      	beq.n	801d8f4 <_dtoa_r+0x214>
 801d862:	3f01      	subs	r7, #1
 801d864:	2300      	movs	r3, #0
 801d866:	9312      	str	r3, [sp, #72]	@ 0x48
 801d868:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d86a:	1b9b      	subs	r3, r3, r6
 801d86c:	1e5a      	subs	r2, r3, #1
 801d86e:	bf44      	itt	mi
 801d870:	f1c3 0801 	rsbmi	r8, r3, #1
 801d874:	2300      	movmi	r3, #0
 801d876:	9208      	str	r2, [sp, #32]
 801d878:	bf54      	ite	pl
 801d87a:	f04f 0800 	movpl.w	r8, #0
 801d87e:	9308      	strmi	r3, [sp, #32]
 801d880:	2f00      	cmp	r7, #0
 801d882:	db39      	blt.n	801d8f8 <_dtoa_r+0x218>
 801d884:	9b08      	ldr	r3, [sp, #32]
 801d886:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d888:	443b      	add	r3, r7
 801d88a:	9308      	str	r3, [sp, #32]
 801d88c:	2300      	movs	r3, #0
 801d88e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d892:	2b09      	cmp	r3, #9
 801d894:	d864      	bhi.n	801d960 <_dtoa_r+0x280>
 801d896:	2b05      	cmp	r3, #5
 801d898:	bfc4      	itt	gt
 801d89a:	3b04      	subgt	r3, #4
 801d89c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8a0:	f1a3 0302 	sub.w	r3, r3, #2
 801d8a4:	bfcc      	ite	gt
 801d8a6:	2400      	movgt	r4, #0
 801d8a8:	2401      	movle	r4, #1
 801d8aa:	2b03      	cmp	r3, #3
 801d8ac:	d863      	bhi.n	801d976 <_dtoa_r+0x296>
 801d8ae:	e8df f003 	tbb	[pc, r3]
 801d8b2:	372a      	.short	0x372a
 801d8b4:	5535      	.short	0x5535
 801d8b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d8ba:	441e      	add	r6, r3
 801d8bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d8c0:	2b20      	cmp	r3, #32
 801d8c2:	bfc1      	itttt	gt
 801d8c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d8c8:	409f      	lslgt	r7, r3
 801d8ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d8ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d8d2:	bfd6      	itet	le
 801d8d4:	f1c3 0320 	rsble	r3, r3, #32
 801d8d8:	ea47 0003 	orrgt.w	r0, r7, r3
 801d8dc:	fa04 f003 	lslle.w	r0, r4, r3
 801d8e0:	f7e2 fe28 	bl	8000534 <__aeabi_ui2d>
 801d8e4:	2201      	movs	r2, #1
 801d8e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d8ea:	3e01      	subs	r6, #1
 801d8ec:	9214      	str	r2, [sp, #80]	@ 0x50
 801d8ee:	e777      	b.n	801d7e0 <_dtoa_r+0x100>
 801d8f0:	2301      	movs	r3, #1
 801d8f2:	e7b8      	b.n	801d866 <_dtoa_r+0x186>
 801d8f4:	9012      	str	r0, [sp, #72]	@ 0x48
 801d8f6:	e7b7      	b.n	801d868 <_dtoa_r+0x188>
 801d8f8:	427b      	negs	r3, r7
 801d8fa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	eba8 0807 	sub.w	r8, r8, r7
 801d902:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d904:	e7c4      	b.n	801d890 <_dtoa_r+0x1b0>
 801d906:	2300      	movs	r3, #0
 801d908:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d90a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	dc35      	bgt.n	801d97c <_dtoa_r+0x29c>
 801d910:	2301      	movs	r3, #1
 801d912:	9300      	str	r3, [sp, #0]
 801d914:	9307      	str	r3, [sp, #28]
 801d916:	461a      	mov	r2, r3
 801d918:	920e      	str	r2, [sp, #56]	@ 0x38
 801d91a:	e00b      	b.n	801d934 <_dtoa_r+0x254>
 801d91c:	2301      	movs	r3, #1
 801d91e:	e7f3      	b.n	801d908 <_dtoa_r+0x228>
 801d920:	2300      	movs	r3, #0
 801d922:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d926:	18fb      	adds	r3, r7, r3
 801d928:	9300      	str	r3, [sp, #0]
 801d92a:	3301      	adds	r3, #1
 801d92c:	2b01      	cmp	r3, #1
 801d92e:	9307      	str	r3, [sp, #28]
 801d930:	bfb8      	it	lt
 801d932:	2301      	movlt	r3, #1
 801d934:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d938:	2100      	movs	r1, #0
 801d93a:	2204      	movs	r2, #4
 801d93c:	f102 0514 	add.w	r5, r2, #20
 801d940:	429d      	cmp	r5, r3
 801d942:	d91f      	bls.n	801d984 <_dtoa_r+0x2a4>
 801d944:	6041      	str	r1, [r0, #4]
 801d946:	4658      	mov	r0, fp
 801d948:	f000 fcd8 	bl	801e2fc <_Balloc>
 801d94c:	4682      	mov	sl, r0
 801d94e:	2800      	cmp	r0, #0
 801d950:	d13c      	bne.n	801d9cc <_dtoa_r+0x2ec>
 801d952:	4b1b      	ldr	r3, [pc, #108]	@ (801d9c0 <_dtoa_r+0x2e0>)
 801d954:	4602      	mov	r2, r0
 801d956:	f240 11af 	movw	r1, #431	@ 0x1af
 801d95a:	e6d8      	b.n	801d70e <_dtoa_r+0x2e>
 801d95c:	2301      	movs	r3, #1
 801d95e:	e7e0      	b.n	801d922 <_dtoa_r+0x242>
 801d960:	2401      	movs	r4, #1
 801d962:	2300      	movs	r3, #0
 801d964:	9309      	str	r3, [sp, #36]	@ 0x24
 801d966:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d968:	f04f 33ff 	mov.w	r3, #4294967295
 801d96c:	9300      	str	r3, [sp, #0]
 801d96e:	9307      	str	r3, [sp, #28]
 801d970:	2200      	movs	r2, #0
 801d972:	2312      	movs	r3, #18
 801d974:	e7d0      	b.n	801d918 <_dtoa_r+0x238>
 801d976:	2301      	movs	r3, #1
 801d978:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d97a:	e7f5      	b.n	801d968 <_dtoa_r+0x288>
 801d97c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d97e:	9300      	str	r3, [sp, #0]
 801d980:	9307      	str	r3, [sp, #28]
 801d982:	e7d7      	b.n	801d934 <_dtoa_r+0x254>
 801d984:	3101      	adds	r1, #1
 801d986:	0052      	lsls	r2, r2, #1
 801d988:	e7d8      	b.n	801d93c <_dtoa_r+0x25c>
 801d98a:	bf00      	nop
 801d98c:	f3af 8000 	nop.w
 801d990:	636f4361 	.word	0x636f4361
 801d994:	3fd287a7 	.word	0x3fd287a7
 801d998:	8b60c8b3 	.word	0x8b60c8b3
 801d99c:	3fc68a28 	.word	0x3fc68a28
 801d9a0:	509f79fb 	.word	0x509f79fb
 801d9a4:	3fd34413 	.word	0x3fd34413
 801d9a8:	08022fb6 	.word	0x08022fb6
 801d9ac:	08023070 	.word	0x08023070
 801d9b0:	7ff00000 	.word	0x7ff00000
 801d9b4:	08022f8e 	.word	0x08022f8e
 801d9b8:	3ff80000 	.word	0x3ff80000
 801d9bc:	08023168 	.word	0x08023168
 801d9c0:	080230c8 	.word	0x080230c8
 801d9c4:	0802306c 	.word	0x0802306c
 801d9c8:	08022f8d 	.word	0x08022f8d
 801d9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d9d0:	6018      	str	r0, [r3, #0]
 801d9d2:	9b07      	ldr	r3, [sp, #28]
 801d9d4:	2b0e      	cmp	r3, #14
 801d9d6:	f200 80a4 	bhi.w	801db22 <_dtoa_r+0x442>
 801d9da:	2c00      	cmp	r4, #0
 801d9dc:	f000 80a1 	beq.w	801db22 <_dtoa_r+0x442>
 801d9e0:	2f00      	cmp	r7, #0
 801d9e2:	dd33      	ble.n	801da4c <_dtoa_r+0x36c>
 801d9e4:	4bad      	ldr	r3, [pc, #692]	@ (801dc9c <_dtoa_r+0x5bc>)
 801d9e6:	f007 020f 	and.w	r2, r7, #15
 801d9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d9ee:	ed93 7b00 	vldr	d7, [r3]
 801d9f2:	05f8      	lsls	r0, r7, #23
 801d9f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d9f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d9fc:	d516      	bpl.n	801da2c <_dtoa_r+0x34c>
 801d9fe:	4ba8      	ldr	r3, [pc, #672]	@ (801dca0 <_dtoa_r+0x5c0>)
 801da00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801da08:	f7e2 ff38 	bl	800087c <__aeabi_ddiv>
 801da0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da10:	f004 040f 	and.w	r4, r4, #15
 801da14:	2603      	movs	r6, #3
 801da16:	4da2      	ldr	r5, [pc, #648]	@ (801dca0 <_dtoa_r+0x5c0>)
 801da18:	b954      	cbnz	r4, 801da30 <_dtoa_r+0x350>
 801da1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801da1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da22:	f7e2 ff2b 	bl	800087c <__aeabi_ddiv>
 801da26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da2a:	e028      	b.n	801da7e <_dtoa_r+0x39e>
 801da2c:	2602      	movs	r6, #2
 801da2e:	e7f2      	b.n	801da16 <_dtoa_r+0x336>
 801da30:	07e1      	lsls	r1, r4, #31
 801da32:	d508      	bpl.n	801da46 <_dtoa_r+0x366>
 801da34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801da38:	e9d5 2300 	ldrd	r2, r3, [r5]
 801da3c:	f7e2 fdf4 	bl	8000628 <__aeabi_dmul>
 801da40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801da44:	3601      	adds	r6, #1
 801da46:	1064      	asrs	r4, r4, #1
 801da48:	3508      	adds	r5, #8
 801da4a:	e7e5      	b.n	801da18 <_dtoa_r+0x338>
 801da4c:	f000 80d2 	beq.w	801dbf4 <_dtoa_r+0x514>
 801da50:	427c      	negs	r4, r7
 801da52:	4b92      	ldr	r3, [pc, #584]	@ (801dc9c <_dtoa_r+0x5bc>)
 801da54:	4d92      	ldr	r5, [pc, #584]	@ (801dca0 <_dtoa_r+0x5c0>)
 801da56:	f004 020f 	and.w	r2, r4, #15
 801da5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da66:	f7e2 fddf 	bl	8000628 <__aeabi_dmul>
 801da6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da6e:	1124      	asrs	r4, r4, #4
 801da70:	2300      	movs	r3, #0
 801da72:	2602      	movs	r6, #2
 801da74:	2c00      	cmp	r4, #0
 801da76:	f040 80b2 	bne.w	801dbde <_dtoa_r+0x4fe>
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d1d3      	bne.n	801da26 <_dtoa_r+0x346>
 801da7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801da80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801da84:	2b00      	cmp	r3, #0
 801da86:	f000 80b7 	beq.w	801dbf8 <_dtoa_r+0x518>
 801da8a:	4b86      	ldr	r3, [pc, #536]	@ (801dca4 <_dtoa_r+0x5c4>)
 801da8c:	2200      	movs	r2, #0
 801da8e:	4620      	mov	r0, r4
 801da90:	4629      	mov	r1, r5
 801da92:	f7e3 f83b 	bl	8000b0c <__aeabi_dcmplt>
 801da96:	2800      	cmp	r0, #0
 801da98:	f000 80ae 	beq.w	801dbf8 <_dtoa_r+0x518>
 801da9c:	9b07      	ldr	r3, [sp, #28]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	f000 80aa 	beq.w	801dbf8 <_dtoa_r+0x518>
 801daa4:	9b00      	ldr	r3, [sp, #0]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	dd37      	ble.n	801db1a <_dtoa_r+0x43a>
 801daaa:	1e7b      	subs	r3, r7, #1
 801daac:	9304      	str	r3, [sp, #16]
 801daae:	4620      	mov	r0, r4
 801dab0:	4b7d      	ldr	r3, [pc, #500]	@ (801dca8 <_dtoa_r+0x5c8>)
 801dab2:	2200      	movs	r2, #0
 801dab4:	4629      	mov	r1, r5
 801dab6:	f7e2 fdb7 	bl	8000628 <__aeabi_dmul>
 801daba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dabe:	9c00      	ldr	r4, [sp, #0]
 801dac0:	3601      	adds	r6, #1
 801dac2:	4630      	mov	r0, r6
 801dac4:	f7e2 fd46 	bl	8000554 <__aeabi_i2d>
 801dac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dacc:	f7e2 fdac 	bl	8000628 <__aeabi_dmul>
 801dad0:	4b76      	ldr	r3, [pc, #472]	@ (801dcac <_dtoa_r+0x5cc>)
 801dad2:	2200      	movs	r2, #0
 801dad4:	f7e2 fbf2 	bl	80002bc <__adddf3>
 801dad8:	4605      	mov	r5, r0
 801dada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dade:	2c00      	cmp	r4, #0
 801dae0:	f040 808d 	bne.w	801dbfe <_dtoa_r+0x51e>
 801dae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dae8:	4b71      	ldr	r3, [pc, #452]	@ (801dcb0 <_dtoa_r+0x5d0>)
 801daea:	2200      	movs	r2, #0
 801daec:	f7e2 fbe4 	bl	80002b8 <__aeabi_dsub>
 801daf0:	4602      	mov	r2, r0
 801daf2:	460b      	mov	r3, r1
 801daf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801daf8:	462a      	mov	r2, r5
 801dafa:	4633      	mov	r3, r6
 801dafc:	f7e3 f824 	bl	8000b48 <__aeabi_dcmpgt>
 801db00:	2800      	cmp	r0, #0
 801db02:	f040 828b 	bne.w	801e01c <_dtoa_r+0x93c>
 801db06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db0a:	462a      	mov	r2, r5
 801db0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801db10:	f7e2 fffc 	bl	8000b0c <__aeabi_dcmplt>
 801db14:	2800      	cmp	r0, #0
 801db16:	f040 8128 	bne.w	801dd6a <_dtoa_r+0x68a>
 801db1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801db1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801db22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801db24:	2b00      	cmp	r3, #0
 801db26:	f2c0 815a 	blt.w	801ddde <_dtoa_r+0x6fe>
 801db2a:	2f0e      	cmp	r7, #14
 801db2c:	f300 8157 	bgt.w	801ddde <_dtoa_r+0x6fe>
 801db30:	4b5a      	ldr	r3, [pc, #360]	@ (801dc9c <_dtoa_r+0x5bc>)
 801db32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801db36:	ed93 7b00 	vldr	d7, [r3]
 801db3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	ed8d 7b00 	vstr	d7, [sp]
 801db42:	da03      	bge.n	801db4c <_dtoa_r+0x46c>
 801db44:	9b07      	ldr	r3, [sp, #28]
 801db46:	2b00      	cmp	r3, #0
 801db48:	f340 8101 	ble.w	801dd4e <_dtoa_r+0x66e>
 801db4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801db50:	4656      	mov	r6, sl
 801db52:	e9dd 2300 	ldrd	r2, r3, [sp]
 801db56:	4620      	mov	r0, r4
 801db58:	4629      	mov	r1, r5
 801db5a:	f7e2 fe8f 	bl	800087c <__aeabi_ddiv>
 801db5e:	f7e3 f813 	bl	8000b88 <__aeabi_d2iz>
 801db62:	4680      	mov	r8, r0
 801db64:	f7e2 fcf6 	bl	8000554 <__aeabi_i2d>
 801db68:	e9dd 2300 	ldrd	r2, r3, [sp]
 801db6c:	f7e2 fd5c 	bl	8000628 <__aeabi_dmul>
 801db70:	4602      	mov	r2, r0
 801db72:	460b      	mov	r3, r1
 801db74:	4620      	mov	r0, r4
 801db76:	4629      	mov	r1, r5
 801db78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801db7c:	f7e2 fb9c 	bl	80002b8 <__aeabi_dsub>
 801db80:	f806 4b01 	strb.w	r4, [r6], #1
 801db84:	9d07      	ldr	r5, [sp, #28]
 801db86:	eba6 040a 	sub.w	r4, r6, sl
 801db8a:	42a5      	cmp	r5, r4
 801db8c:	4602      	mov	r2, r0
 801db8e:	460b      	mov	r3, r1
 801db90:	f040 8117 	bne.w	801ddc2 <_dtoa_r+0x6e2>
 801db94:	f7e2 fb92 	bl	80002bc <__adddf3>
 801db98:	e9dd 2300 	ldrd	r2, r3, [sp]
 801db9c:	4604      	mov	r4, r0
 801db9e:	460d      	mov	r5, r1
 801dba0:	f7e2 ffd2 	bl	8000b48 <__aeabi_dcmpgt>
 801dba4:	2800      	cmp	r0, #0
 801dba6:	f040 80f9 	bne.w	801dd9c <_dtoa_r+0x6bc>
 801dbaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dbae:	4620      	mov	r0, r4
 801dbb0:	4629      	mov	r1, r5
 801dbb2:	f7e2 ffa1 	bl	8000af8 <__aeabi_dcmpeq>
 801dbb6:	b118      	cbz	r0, 801dbc0 <_dtoa_r+0x4e0>
 801dbb8:	f018 0f01 	tst.w	r8, #1
 801dbbc:	f040 80ee 	bne.w	801dd9c <_dtoa_r+0x6bc>
 801dbc0:	4649      	mov	r1, r9
 801dbc2:	4658      	mov	r0, fp
 801dbc4:	f000 fbda 	bl	801e37c <_Bfree>
 801dbc8:	2300      	movs	r3, #0
 801dbca:	7033      	strb	r3, [r6, #0]
 801dbcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dbce:	3701      	adds	r7, #1
 801dbd0:	601f      	str	r7, [r3, #0]
 801dbd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	f000 831d 	beq.w	801e214 <_dtoa_r+0xb34>
 801dbda:	601e      	str	r6, [r3, #0]
 801dbdc:	e31a      	b.n	801e214 <_dtoa_r+0xb34>
 801dbde:	07e2      	lsls	r2, r4, #31
 801dbe0:	d505      	bpl.n	801dbee <_dtoa_r+0x50e>
 801dbe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dbe6:	f7e2 fd1f 	bl	8000628 <__aeabi_dmul>
 801dbea:	3601      	adds	r6, #1
 801dbec:	2301      	movs	r3, #1
 801dbee:	1064      	asrs	r4, r4, #1
 801dbf0:	3508      	adds	r5, #8
 801dbf2:	e73f      	b.n	801da74 <_dtoa_r+0x394>
 801dbf4:	2602      	movs	r6, #2
 801dbf6:	e742      	b.n	801da7e <_dtoa_r+0x39e>
 801dbf8:	9c07      	ldr	r4, [sp, #28]
 801dbfa:	9704      	str	r7, [sp, #16]
 801dbfc:	e761      	b.n	801dac2 <_dtoa_r+0x3e2>
 801dbfe:	4b27      	ldr	r3, [pc, #156]	@ (801dc9c <_dtoa_r+0x5bc>)
 801dc00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dc02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dc06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dc0a:	4454      	add	r4, sl
 801dc0c:	2900      	cmp	r1, #0
 801dc0e:	d053      	beq.n	801dcb8 <_dtoa_r+0x5d8>
 801dc10:	4928      	ldr	r1, [pc, #160]	@ (801dcb4 <_dtoa_r+0x5d4>)
 801dc12:	2000      	movs	r0, #0
 801dc14:	f7e2 fe32 	bl	800087c <__aeabi_ddiv>
 801dc18:	4633      	mov	r3, r6
 801dc1a:	462a      	mov	r2, r5
 801dc1c:	f7e2 fb4c 	bl	80002b8 <__aeabi_dsub>
 801dc20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dc24:	4656      	mov	r6, sl
 801dc26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dc2a:	f7e2 ffad 	bl	8000b88 <__aeabi_d2iz>
 801dc2e:	4605      	mov	r5, r0
 801dc30:	f7e2 fc90 	bl	8000554 <__aeabi_i2d>
 801dc34:	4602      	mov	r2, r0
 801dc36:	460b      	mov	r3, r1
 801dc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dc3c:	f7e2 fb3c 	bl	80002b8 <__aeabi_dsub>
 801dc40:	3530      	adds	r5, #48	@ 0x30
 801dc42:	4602      	mov	r2, r0
 801dc44:	460b      	mov	r3, r1
 801dc46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dc4a:	f806 5b01 	strb.w	r5, [r6], #1
 801dc4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dc52:	f7e2 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 801dc56:	2800      	cmp	r0, #0
 801dc58:	d171      	bne.n	801dd3e <_dtoa_r+0x65e>
 801dc5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dc5e:	4911      	ldr	r1, [pc, #68]	@ (801dca4 <_dtoa_r+0x5c4>)
 801dc60:	2000      	movs	r0, #0
 801dc62:	f7e2 fb29 	bl	80002b8 <__aeabi_dsub>
 801dc66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dc6a:	f7e2 ff4f 	bl	8000b0c <__aeabi_dcmplt>
 801dc6e:	2800      	cmp	r0, #0
 801dc70:	f040 8095 	bne.w	801dd9e <_dtoa_r+0x6be>
 801dc74:	42a6      	cmp	r6, r4
 801dc76:	f43f af50 	beq.w	801db1a <_dtoa_r+0x43a>
 801dc7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801dc7e:	4b0a      	ldr	r3, [pc, #40]	@ (801dca8 <_dtoa_r+0x5c8>)
 801dc80:	2200      	movs	r2, #0
 801dc82:	f7e2 fcd1 	bl	8000628 <__aeabi_dmul>
 801dc86:	4b08      	ldr	r3, [pc, #32]	@ (801dca8 <_dtoa_r+0x5c8>)
 801dc88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dc8c:	2200      	movs	r2, #0
 801dc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dc92:	f7e2 fcc9 	bl	8000628 <__aeabi_dmul>
 801dc96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc9a:	e7c4      	b.n	801dc26 <_dtoa_r+0x546>
 801dc9c:	08023168 	.word	0x08023168
 801dca0:	08023140 	.word	0x08023140
 801dca4:	3ff00000 	.word	0x3ff00000
 801dca8:	40240000 	.word	0x40240000
 801dcac:	401c0000 	.word	0x401c0000
 801dcb0:	40140000 	.word	0x40140000
 801dcb4:	3fe00000 	.word	0x3fe00000
 801dcb8:	4631      	mov	r1, r6
 801dcba:	4628      	mov	r0, r5
 801dcbc:	f7e2 fcb4 	bl	8000628 <__aeabi_dmul>
 801dcc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dcc4:	9415      	str	r4, [sp, #84]	@ 0x54
 801dcc6:	4656      	mov	r6, sl
 801dcc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dccc:	f7e2 ff5c 	bl	8000b88 <__aeabi_d2iz>
 801dcd0:	4605      	mov	r5, r0
 801dcd2:	f7e2 fc3f 	bl	8000554 <__aeabi_i2d>
 801dcd6:	4602      	mov	r2, r0
 801dcd8:	460b      	mov	r3, r1
 801dcda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcde:	f7e2 faeb 	bl	80002b8 <__aeabi_dsub>
 801dce2:	3530      	adds	r5, #48	@ 0x30
 801dce4:	f806 5b01 	strb.w	r5, [r6], #1
 801dce8:	4602      	mov	r2, r0
 801dcea:	460b      	mov	r3, r1
 801dcec:	42a6      	cmp	r6, r4
 801dcee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dcf2:	f04f 0200 	mov.w	r2, #0
 801dcf6:	d124      	bne.n	801dd42 <_dtoa_r+0x662>
 801dcf8:	4bac      	ldr	r3, [pc, #688]	@ (801dfac <_dtoa_r+0x8cc>)
 801dcfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801dcfe:	f7e2 fadd 	bl	80002bc <__adddf3>
 801dd02:	4602      	mov	r2, r0
 801dd04:	460b      	mov	r3, r1
 801dd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd0a:	f7e2 ff1d 	bl	8000b48 <__aeabi_dcmpgt>
 801dd0e:	2800      	cmp	r0, #0
 801dd10:	d145      	bne.n	801dd9e <_dtoa_r+0x6be>
 801dd12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd16:	49a5      	ldr	r1, [pc, #660]	@ (801dfac <_dtoa_r+0x8cc>)
 801dd18:	2000      	movs	r0, #0
 801dd1a:	f7e2 facd 	bl	80002b8 <__aeabi_dsub>
 801dd1e:	4602      	mov	r2, r0
 801dd20:	460b      	mov	r3, r1
 801dd22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd26:	f7e2 fef1 	bl	8000b0c <__aeabi_dcmplt>
 801dd2a:	2800      	cmp	r0, #0
 801dd2c:	f43f aef5 	beq.w	801db1a <_dtoa_r+0x43a>
 801dd30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801dd32:	1e73      	subs	r3, r6, #1
 801dd34:	9315      	str	r3, [sp, #84]	@ 0x54
 801dd36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dd3a:	2b30      	cmp	r3, #48	@ 0x30
 801dd3c:	d0f8      	beq.n	801dd30 <_dtoa_r+0x650>
 801dd3e:	9f04      	ldr	r7, [sp, #16]
 801dd40:	e73e      	b.n	801dbc0 <_dtoa_r+0x4e0>
 801dd42:	4b9b      	ldr	r3, [pc, #620]	@ (801dfb0 <_dtoa_r+0x8d0>)
 801dd44:	f7e2 fc70 	bl	8000628 <__aeabi_dmul>
 801dd48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd4c:	e7bc      	b.n	801dcc8 <_dtoa_r+0x5e8>
 801dd4e:	d10c      	bne.n	801dd6a <_dtoa_r+0x68a>
 801dd50:	4b98      	ldr	r3, [pc, #608]	@ (801dfb4 <_dtoa_r+0x8d4>)
 801dd52:	2200      	movs	r2, #0
 801dd54:	e9dd 0100 	ldrd	r0, r1, [sp]
 801dd58:	f7e2 fc66 	bl	8000628 <__aeabi_dmul>
 801dd5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dd60:	f7e2 fee8 	bl	8000b34 <__aeabi_dcmpge>
 801dd64:	2800      	cmp	r0, #0
 801dd66:	f000 8157 	beq.w	801e018 <_dtoa_r+0x938>
 801dd6a:	2400      	movs	r4, #0
 801dd6c:	4625      	mov	r5, r4
 801dd6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd70:	43db      	mvns	r3, r3
 801dd72:	9304      	str	r3, [sp, #16]
 801dd74:	4656      	mov	r6, sl
 801dd76:	2700      	movs	r7, #0
 801dd78:	4621      	mov	r1, r4
 801dd7a:	4658      	mov	r0, fp
 801dd7c:	f000 fafe 	bl	801e37c <_Bfree>
 801dd80:	2d00      	cmp	r5, #0
 801dd82:	d0dc      	beq.n	801dd3e <_dtoa_r+0x65e>
 801dd84:	b12f      	cbz	r7, 801dd92 <_dtoa_r+0x6b2>
 801dd86:	42af      	cmp	r7, r5
 801dd88:	d003      	beq.n	801dd92 <_dtoa_r+0x6b2>
 801dd8a:	4639      	mov	r1, r7
 801dd8c:	4658      	mov	r0, fp
 801dd8e:	f000 faf5 	bl	801e37c <_Bfree>
 801dd92:	4629      	mov	r1, r5
 801dd94:	4658      	mov	r0, fp
 801dd96:	f000 faf1 	bl	801e37c <_Bfree>
 801dd9a:	e7d0      	b.n	801dd3e <_dtoa_r+0x65e>
 801dd9c:	9704      	str	r7, [sp, #16]
 801dd9e:	4633      	mov	r3, r6
 801dda0:	461e      	mov	r6, r3
 801dda2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dda6:	2a39      	cmp	r2, #57	@ 0x39
 801dda8:	d107      	bne.n	801ddba <_dtoa_r+0x6da>
 801ddaa:	459a      	cmp	sl, r3
 801ddac:	d1f8      	bne.n	801dda0 <_dtoa_r+0x6c0>
 801ddae:	9a04      	ldr	r2, [sp, #16]
 801ddb0:	3201      	adds	r2, #1
 801ddb2:	9204      	str	r2, [sp, #16]
 801ddb4:	2230      	movs	r2, #48	@ 0x30
 801ddb6:	f88a 2000 	strb.w	r2, [sl]
 801ddba:	781a      	ldrb	r2, [r3, #0]
 801ddbc:	3201      	adds	r2, #1
 801ddbe:	701a      	strb	r2, [r3, #0]
 801ddc0:	e7bd      	b.n	801dd3e <_dtoa_r+0x65e>
 801ddc2:	4b7b      	ldr	r3, [pc, #492]	@ (801dfb0 <_dtoa_r+0x8d0>)
 801ddc4:	2200      	movs	r2, #0
 801ddc6:	f7e2 fc2f 	bl	8000628 <__aeabi_dmul>
 801ddca:	2200      	movs	r2, #0
 801ddcc:	2300      	movs	r3, #0
 801ddce:	4604      	mov	r4, r0
 801ddd0:	460d      	mov	r5, r1
 801ddd2:	f7e2 fe91 	bl	8000af8 <__aeabi_dcmpeq>
 801ddd6:	2800      	cmp	r0, #0
 801ddd8:	f43f aebb 	beq.w	801db52 <_dtoa_r+0x472>
 801dddc:	e6f0      	b.n	801dbc0 <_dtoa_r+0x4e0>
 801ddde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dde0:	2a00      	cmp	r2, #0
 801dde2:	f000 80db 	beq.w	801df9c <_dtoa_r+0x8bc>
 801dde6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dde8:	2a01      	cmp	r2, #1
 801ddea:	f300 80bf 	bgt.w	801df6c <_dtoa_r+0x88c>
 801ddee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ddf0:	2a00      	cmp	r2, #0
 801ddf2:	f000 80b7 	beq.w	801df64 <_dtoa_r+0x884>
 801ddf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ddfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ddfc:	4646      	mov	r6, r8
 801ddfe:	9a08      	ldr	r2, [sp, #32]
 801de00:	2101      	movs	r1, #1
 801de02:	441a      	add	r2, r3
 801de04:	4658      	mov	r0, fp
 801de06:	4498      	add	r8, r3
 801de08:	9208      	str	r2, [sp, #32]
 801de0a:	f000 fbb5 	bl	801e578 <__i2b>
 801de0e:	4605      	mov	r5, r0
 801de10:	b15e      	cbz	r6, 801de2a <_dtoa_r+0x74a>
 801de12:	9b08      	ldr	r3, [sp, #32]
 801de14:	2b00      	cmp	r3, #0
 801de16:	dd08      	ble.n	801de2a <_dtoa_r+0x74a>
 801de18:	42b3      	cmp	r3, r6
 801de1a:	9a08      	ldr	r2, [sp, #32]
 801de1c:	bfa8      	it	ge
 801de1e:	4633      	movge	r3, r6
 801de20:	eba8 0803 	sub.w	r8, r8, r3
 801de24:	1af6      	subs	r6, r6, r3
 801de26:	1ad3      	subs	r3, r2, r3
 801de28:	9308      	str	r3, [sp, #32]
 801de2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de2c:	b1f3      	cbz	r3, 801de6c <_dtoa_r+0x78c>
 801de2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801de30:	2b00      	cmp	r3, #0
 801de32:	f000 80b7 	beq.w	801dfa4 <_dtoa_r+0x8c4>
 801de36:	b18c      	cbz	r4, 801de5c <_dtoa_r+0x77c>
 801de38:	4629      	mov	r1, r5
 801de3a:	4622      	mov	r2, r4
 801de3c:	4658      	mov	r0, fp
 801de3e:	f000 fc5b 	bl	801e6f8 <__pow5mult>
 801de42:	464a      	mov	r2, r9
 801de44:	4601      	mov	r1, r0
 801de46:	4605      	mov	r5, r0
 801de48:	4658      	mov	r0, fp
 801de4a:	f000 fbab 	bl	801e5a4 <__multiply>
 801de4e:	4649      	mov	r1, r9
 801de50:	9004      	str	r0, [sp, #16]
 801de52:	4658      	mov	r0, fp
 801de54:	f000 fa92 	bl	801e37c <_Bfree>
 801de58:	9b04      	ldr	r3, [sp, #16]
 801de5a:	4699      	mov	r9, r3
 801de5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de5e:	1b1a      	subs	r2, r3, r4
 801de60:	d004      	beq.n	801de6c <_dtoa_r+0x78c>
 801de62:	4649      	mov	r1, r9
 801de64:	4658      	mov	r0, fp
 801de66:	f000 fc47 	bl	801e6f8 <__pow5mult>
 801de6a:	4681      	mov	r9, r0
 801de6c:	2101      	movs	r1, #1
 801de6e:	4658      	mov	r0, fp
 801de70:	f000 fb82 	bl	801e578 <__i2b>
 801de74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de76:	4604      	mov	r4, r0
 801de78:	2b00      	cmp	r3, #0
 801de7a:	f000 81cf 	beq.w	801e21c <_dtoa_r+0xb3c>
 801de7e:	461a      	mov	r2, r3
 801de80:	4601      	mov	r1, r0
 801de82:	4658      	mov	r0, fp
 801de84:	f000 fc38 	bl	801e6f8 <__pow5mult>
 801de88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de8a:	2b01      	cmp	r3, #1
 801de8c:	4604      	mov	r4, r0
 801de8e:	f300 8095 	bgt.w	801dfbc <_dtoa_r+0x8dc>
 801de92:	9b02      	ldr	r3, [sp, #8]
 801de94:	2b00      	cmp	r3, #0
 801de96:	f040 8087 	bne.w	801dfa8 <_dtoa_r+0x8c8>
 801de9a:	9b03      	ldr	r3, [sp, #12]
 801de9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	f040 8089 	bne.w	801dfb8 <_dtoa_r+0x8d8>
 801dea6:	9b03      	ldr	r3, [sp, #12]
 801dea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801deac:	0d1b      	lsrs	r3, r3, #20
 801deae:	051b      	lsls	r3, r3, #20
 801deb0:	b12b      	cbz	r3, 801debe <_dtoa_r+0x7de>
 801deb2:	9b08      	ldr	r3, [sp, #32]
 801deb4:	3301      	adds	r3, #1
 801deb6:	9308      	str	r3, [sp, #32]
 801deb8:	f108 0801 	add.w	r8, r8, #1
 801debc:	2301      	movs	r3, #1
 801debe:	930a      	str	r3, [sp, #40]	@ 0x28
 801dec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	f000 81b0 	beq.w	801e228 <_dtoa_r+0xb48>
 801dec8:	6923      	ldr	r3, [r4, #16]
 801deca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801dece:	6918      	ldr	r0, [r3, #16]
 801ded0:	f000 fb06 	bl	801e4e0 <__hi0bits>
 801ded4:	f1c0 0020 	rsb	r0, r0, #32
 801ded8:	9b08      	ldr	r3, [sp, #32]
 801deda:	4418      	add	r0, r3
 801dedc:	f010 001f 	ands.w	r0, r0, #31
 801dee0:	d077      	beq.n	801dfd2 <_dtoa_r+0x8f2>
 801dee2:	f1c0 0320 	rsb	r3, r0, #32
 801dee6:	2b04      	cmp	r3, #4
 801dee8:	dd6b      	ble.n	801dfc2 <_dtoa_r+0x8e2>
 801deea:	9b08      	ldr	r3, [sp, #32]
 801deec:	f1c0 001c 	rsb	r0, r0, #28
 801def0:	4403      	add	r3, r0
 801def2:	4480      	add	r8, r0
 801def4:	4406      	add	r6, r0
 801def6:	9308      	str	r3, [sp, #32]
 801def8:	f1b8 0f00 	cmp.w	r8, #0
 801defc:	dd05      	ble.n	801df0a <_dtoa_r+0x82a>
 801defe:	4649      	mov	r1, r9
 801df00:	4642      	mov	r2, r8
 801df02:	4658      	mov	r0, fp
 801df04:	f000 fc52 	bl	801e7ac <__lshift>
 801df08:	4681      	mov	r9, r0
 801df0a:	9b08      	ldr	r3, [sp, #32]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	dd05      	ble.n	801df1c <_dtoa_r+0x83c>
 801df10:	4621      	mov	r1, r4
 801df12:	461a      	mov	r2, r3
 801df14:	4658      	mov	r0, fp
 801df16:	f000 fc49 	bl	801e7ac <__lshift>
 801df1a:	4604      	mov	r4, r0
 801df1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d059      	beq.n	801dfd6 <_dtoa_r+0x8f6>
 801df22:	4621      	mov	r1, r4
 801df24:	4648      	mov	r0, r9
 801df26:	f000 fcad 	bl	801e884 <__mcmp>
 801df2a:	2800      	cmp	r0, #0
 801df2c:	da53      	bge.n	801dfd6 <_dtoa_r+0x8f6>
 801df2e:	1e7b      	subs	r3, r7, #1
 801df30:	9304      	str	r3, [sp, #16]
 801df32:	4649      	mov	r1, r9
 801df34:	2300      	movs	r3, #0
 801df36:	220a      	movs	r2, #10
 801df38:	4658      	mov	r0, fp
 801df3a:	f000 fa41 	bl	801e3c0 <__multadd>
 801df3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df40:	4681      	mov	r9, r0
 801df42:	2b00      	cmp	r3, #0
 801df44:	f000 8172 	beq.w	801e22c <_dtoa_r+0xb4c>
 801df48:	2300      	movs	r3, #0
 801df4a:	4629      	mov	r1, r5
 801df4c:	220a      	movs	r2, #10
 801df4e:	4658      	mov	r0, fp
 801df50:	f000 fa36 	bl	801e3c0 <__multadd>
 801df54:	9b00      	ldr	r3, [sp, #0]
 801df56:	2b00      	cmp	r3, #0
 801df58:	4605      	mov	r5, r0
 801df5a:	dc67      	bgt.n	801e02c <_dtoa_r+0x94c>
 801df5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df5e:	2b02      	cmp	r3, #2
 801df60:	dc41      	bgt.n	801dfe6 <_dtoa_r+0x906>
 801df62:	e063      	b.n	801e02c <_dtoa_r+0x94c>
 801df64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801df66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801df6a:	e746      	b.n	801ddfa <_dtoa_r+0x71a>
 801df6c:	9b07      	ldr	r3, [sp, #28]
 801df6e:	1e5c      	subs	r4, r3, #1
 801df70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df72:	42a3      	cmp	r3, r4
 801df74:	bfbf      	itttt	lt
 801df76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801df78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801df7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801df7c:	1ae3      	sublt	r3, r4, r3
 801df7e:	bfb4      	ite	lt
 801df80:	18d2      	addlt	r2, r2, r3
 801df82:	1b1c      	subge	r4, r3, r4
 801df84:	9b07      	ldr	r3, [sp, #28]
 801df86:	bfbc      	itt	lt
 801df88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801df8a:	2400      	movlt	r4, #0
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	bfb5      	itete	lt
 801df90:	eba8 0603 	sublt.w	r6, r8, r3
 801df94:	9b07      	ldrge	r3, [sp, #28]
 801df96:	2300      	movlt	r3, #0
 801df98:	4646      	movge	r6, r8
 801df9a:	e730      	b.n	801ddfe <_dtoa_r+0x71e>
 801df9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801df9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801dfa0:	4646      	mov	r6, r8
 801dfa2:	e735      	b.n	801de10 <_dtoa_r+0x730>
 801dfa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dfa6:	e75c      	b.n	801de62 <_dtoa_r+0x782>
 801dfa8:	2300      	movs	r3, #0
 801dfaa:	e788      	b.n	801debe <_dtoa_r+0x7de>
 801dfac:	3fe00000 	.word	0x3fe00000
 801dfb0:	40240000 	.word	0x40240000
 801dfb4:	40140000 	.word	0x40140000
 801dfb8:	9b02      	ldr	r3, [sp, #8]
 801dfba:	e780      	b.n	801debe <_dtoa_r+0x7de>
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	930a      	str	r3, [sp, #40]	@ 0x28
 801dfc0:	e782      	b.n	801dec8 <_dtoa_r+0x7e8>
 801dfc2:	d099      	beq.n	801def8 <_dtoa_r+0x818>
 801dfc4:	9a08      	ldr	r2, [sp, #32]
 801dfc6:	331c      	adds	r3, #28
 801dfc8:	441a      	add	r2, r3
 801dfca:	4498      	add	r8, r3
 801dfcc:	441e      	add	r6, r3
 801dfce:	9208      	str	r2, [sp, #32]
 801dfd0:	e792      	b.n	801def8 <_dtoa_r+0x818>
 801dfd2:	4603      	mov	r3, r0
 801dfd4:	e7f6      	b.n	801dfc4 <_dtoa_r+0x8e4>
 801dfd6:	9b07      	ldr	r3, [sp, #28]
 801dfd8:	9704      	str	r7, [sp, #16]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	dc20      	bgt.n	801e020 <_dtoa_r+0x940>
 801dfde:	9300      	str	r3, [sp, #0]
 801dfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfe2:	2b02      	cmp	r3, #2
 801dfe4:	dd1e      	ble.n	801e024 <_dtoa_r+0x944>
 801dfe6:	9b00      	ldr	r3, [sp, #0]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	f47f aec0 	bne.w	801dd6e <_dtoa_r+0x68e>
 801dfee:	4621      	mov	r1, r4
 801dff0:	2205      	movs	r2, #5
 801dff2:	4658      	mov	r0, fp
 801dff4:	f000 f9e4 	bl	801e3c0 <__multadd>
 801dff8:	4601      	mov	r1, r0
 801dffa:	4604      	mov	r4, r0
 801dffc:	4648      	mov	r0, r9
 801dffe:	f000 fc41 	bl	801e884 <__mcmp>
 801e002:	2800      	cmp	r0, #0
 801e004:	f77f aeb3 	ble.w	801dd6e <_dtoa_r+0x68e>
 801e008:	4656      	mov	r6, sl
 801e00a:	2331      	movs	r3, #49	@ 0x31
 801e00c:	f806 3b01 	strb.w	r3, [r6], #1
 801e010:	9b04      	ldr	r3, [sp, #16]
 801e012:	3301      	adds	r3, #1
 801e014:	9304      	str	r3, [sp, #16]
 801e016:	e6ae      	b.n	801dd76 <_dtoa_r+0x696>
 801e018:	9c07      	ldr	r4, [sp, #28]
 801e01a:	9704      	str	r7, [sp, #16]
 801e01c:	4625      	mov	r5, r4
 801e01e:	e7f3      	b.n	801e008 <_dtoa_r+0x928>
 801e020:	9b07      	ldr	r3, [sp, #28]
 801e022:	9300      	str	r3, [sp, #0]
 801e024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e026:	2b00      	cmp	r3, #0
 801e028:	f000 8104 	beq.w	801e234 <_dtoa_r+0xb54>
 801e02c:	2e00      	cmp	r6, #0
 801e02e:	dd05      	ble.n	801e03c <_dtoa_r+0x95c>
 801e030:	4629      	mov	r1, r5
 801e032:	4632      	mov	r2, r6
 801e034:	4658      	mov	r0, fp
 801e036:	f000 fbb9 	bl	801e7ac <__lshift>
 801e03a:	4605      	mov	r5, r0
 801e03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d05a      	beq.n	801e0f8 <_dtoa_r+0xa18>
 801e042:	6869      	ldr	r1, [r5, #4]
 801e044:	4658      	mov	r0, fp
 801e046:	f000 f959 	bl	801e2fc <_Balloc>
 801e04a:	4606      	mov	r6, r0
 801e04c:	b928      	cbnz	r0, 801e05a <_dtoa_r+0x97a>
 801e04e:	4b84      	ldr	r3, [pc, #528]	@ (801e260 <_dtoa_r+0xb80>)
 801e050:	4602      	mov	r2, r0
 801e052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e056:	f7ff bb5a 	b.w	801d70e <_dtoa_r+0x2e>
 801e05a:	692a      	ldr	r2, [r5, #16]
 801e05c:	3202      	adds	r2, #2
 801e05e:	0092      	lsls	r2, r2, #2
 801e060:	f105 010c 	add.w	r1, r5, #12
 801e064:	300c      	adds	r0, #12
 801e066:	f7ff fa80 	bl	801d56a <memcpy>
 801e06a:	2201      	movs	r2, #1
 801e06c:	4631      	mov	r1, r6
 801e06e:	4658      	mov	r0, fp
 801e070:	f000 fb9c 	bl	801e7ac <__lshift>
 801e074:	f10a 0301 	add.w	r3, sl, #1
 801e078:	9307      	str	r3, [sp, #28]
 801e07a:	9b00      	ldr	r3, [sp, #0]
 801e07c:	4453      	add	r3, sl
 801e07e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e080:	9b02      	ldr	r3, [sp, #8]
 801e082:	f003 0301 	and.w	r3, r3, #1
 801e086:	462f      	mov	r7, r5
 801e088:	930a      	str	r3, [sp, #40]	@ 0x28
 801e08a:	4605      	mov	r5, r0
 801e08c:	9b07      	ldr	r3, [sp, #28]
 801e08e:	4621      	mov	r1, r4
 801e090:	3b01      	subs	r3, #1
 801e092:	4648      	mov	r0, r9
 801e094:	9300      	str	r3, [sp, #0]
 801e096:	f7ff fa9b 	bl	801d5d0 <quorem>
 801e09a:	4639      	mov	r1, r7
 801e09c:	9002      	str	r0, [sp, #8]
 801e09e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e0a2:	4648      	mov	r0, r9
 801e0a4:	f000 fbee 	bl	801e884 <__mcmp>
 801e0a8:	462a      	mov	r2, r5
 801e0aa:	9008      	str	r0, [sp, #32]
 801e0ac:	4621      	mov	r1, r4
 801e0ae:	4658      	mov	r0, fp
 801e0b0:	f000 fc04 	bl	801e8bc <__mdiff>
 801e0b4:	68c2      	ldr	r2, [r0, #12]
 801e0b6:	4606      	mov	r6, r0
 801e0b8:	bb02      	cbnz	r2, 801e0fc <_dtoa_r+0xa1c>
 801e0ba:	4601      	mov	r1, r0
 801e0bc:	4648      	mov	r0, r9
 801e0be:	f000 fbe1 	bl	801e884 <__mcmp>
 801e0c2:	4602      	mov	r2, r0
 801e0c4:	4631      	mov	r1, r6
 801e0c6:	4658      	mov	r0, fp
 801e0c8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e0ca:	f000 f957 	bl	801e37c <_Bfree>
 801e0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e0d2:	9e07      	ldr	r6, [sp, #28]
 801e0d4:	ea43 0102 	orr.w	r1, r3, r2
 801e0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0da:	4319      	orrs	r1, r3
 801e0dc:	d110      	bne.n	801e100 <_dtoa_r+0xa20>
 801e0de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e0e2:	d029      	beq.n	801e138 <_dtoa_r+0xa58>
 801e0e4:	9b08      	ldr	r3, [sp, #32]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	dd02      	ble.n	801e0f0 <_dtoa_r+0xa10>
 801e0ea:	9b02      	ldr	r3, [sp, #8]
 801e0ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e0f0:	9b00      	ldr	r3, [sp, #0]
 801e0f2:	f883 8000 	strb.w	r8, [r3]
 801e0f6:	e63f      	b.n	801dd78 <_dtoa_r+0x698>
 801e0f8:	4628      	mov	r0, r5
 801e0fa:	e7bb      	b.n	801e074 <_dtoa_r+0x994>
 801e0fc:	2201      	movs	r2, #1
 801e0fe:	e7e1      	b.n	801e0c4 <_dtoa_r+0x9e4>
 801e100:	9b08      	ldr	r3, [sp, #32]
 801e102:	2b00      	cmp	r3, #0
 801e104:	db04      	blt.n	801e110 <_dtoa_r+0xa30>
 801e106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e108:	430b      	orrs	r3, r1
 801e10a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e10c:	430b      	orrs	r3, r1
 801e10e:	d120      	bne.n	801e152 <_dtoa_r+0xa72>
 801e110:	2a00      	cmp	r2, #0
 801e112:	dded      	ble.n	801e0f0 <_dtoa_r+0xa10>
 801e114:	4649      	mov	r1, r9
 801e116:	2201      	movs	r2, #1
 801e118:	4658      	mov	r0, fp
 801e11a:	f000 fb47 	bl	801e7ac <__lshift>
 801e11e:	4621      	mov	r1, r4
 801e120:	4681      	mov	r9, r0
 801e122:	f000 fbaf 	bl	801e884 <__mcmp>
 801e126:	2800      	cmp	r0, #0
 801e128:	dc03      	bgt.n	801e132 <_dtoa_r+0xa52>
 801e12a:	d1e1      	bne.n	801e0f0 <_dtoa_r+0xa10>
 801e12c:	f018 0f01 	tst.w	r8, #1
 801e130:	d0de      	beq.n	801e0f0 <_dtoa_r+0xa10>
 801e132:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e136:	d1d8      	bne.n	801e0ea <_dtoa_r+0xa0a>
 801e138:	9a00      	ldr	r2, [sp, #0]
 801e13a:	2339      	movs	r3, #57	@ 0x39
 801e13c:	7013      	strb	r3, [r2, #0]
 801e13e:	4633      	mov	r3, r6
 801e140:	461e      	mov	r6, r3
 801e142:	3b01      	subs	r3, #1
 801e144:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e148:	2a39      	cmp	r2, #57	@ 0x39
 801e14a:	d052      	beq.n	801e1f2 <_dtoa_r+0xb12>
 801e14c:	3201      	adds	r2, #1
 801e14e:	701a      	strb	r2, [r3, #0]
 801e150:	e612      	b.n	801dd78 <_dtoa_r+0x698>
 801e152:	2a00      	cmp	r2, #0
 801e154:	dd07      	ble.n	801e166 <_dtoa_r+0xa86>
 801e156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e15a:	d0ed      	beq.n	801e138 <_dtoa_r+0xa58>
 801e15c:	9a00      	ldr	r2, [sp, #0]
 801e15e:	f108 0301 	add.w	r3, r8, #1
 801e162:	7013      	strb	r3, [r2, #0]
 801e164:	e608      	b.n	801dd78 <_dtoa_r+0x698>
 801e166:	9b07      	ldr	r3, [sp, #28]
 801e168:	9a07      	ldr	r2, [sp, #28]
 801e16a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e170:	4293      	cmp	r3, r2
 801e172:	d028      	beq.n	801e1c6 <_dtoa_r+0xae6>
 801e174:	4649      	mov	r1, r9
 801e176:	2300      	movs	r3, #0
 801e178:	220a      	movs	r2, #10
 801e17a:	4658      	mov	r0, fp
 801e17c:	f000 f920 	bl	801e3c0 <__multadd>
 801e180:	42af      	cmp	r7, r5
 801e182:	4681      	mov	r9, r0
 801e184:	f04f 0300 	mov.w	r3, #0
 801e188:	f04f 020a 	mov.w	r2, #10
 801e18c:	4639      	mov	r1, r7
 801e18e:	4658      	mov	r0, fp
 801e190:	d107      	bne.n	801e1a2 <_dtoa_r+0xac2>
 801e192:	f000 f915 	bl	801e3c0 <__multadd>
 801e196:	4607      	mov	r7, r0
 801e198:	4605      	mov	r5, r0
 801e19a:	9b07      	ldr	r3, [sp, #28]
 801e19c:	3301      	adds	r3, #1
 801e19e:	9307      	str	r3, [sp, #28]
 801e1a0:	e774      	b.n	801e08c <_dtoa_r+0x9ac>
 801e1a2:	f000 f90d 	bl	801e3c0 <__multadd>
 801e1a6:	4629      	mov	r1, r5
 801e1a8:	4607      	mov	r7, r0
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	220a      	movs	r2, #10
 801e1ae:	4658      	mov	r0, fp
 801e1b0:	f000 f906 	bl	801e3c0 <__multadd>
 801e1b4:	4605      	mov	r5, r0
 801e1b6:	e7f0      	b.n	801e19a <_dtoa_r+0xaba>
 801e1b8:	9b00      	ldr	r3, [sp, #0]
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	bfcc      	ite	gt
 801e1be:	461e      	movgt	r6, r3
 801e1c0:	2601      	movle	r6, #1
 801e1c2:	4456      	add	r6, sl
 801e1c4:	2700      	movs	r7, #0
 801e1c6:	4649      	mov	r1, r9
 801e1c8:	2201      	movs	r2, #1
 801e1ca:	4658      	mov	r0, fp
 801e1cc:	f000 faee 	bl	801e7ac <__lshift>
 801e1d0:	4621      	mov	r1, r4
 801e1d2:	4681      	mov	r9, r0
 801e1d4:	f000 fb56 	bl	801e884 <__mcmp>
 801e1d8:	2800      	cmp	r0, #0
 801e1da:	dcb0      	bgt.n	801e13e <_dtoa_r+0xa5e>
 801e1dc:	d102      	bne.n	801e1e4 <_dtoa_r+0xb04>
 801e1de:	f018 0f01 	tst.w	r8, #1
 801e1e2:	d1ac      	bne.n	801e13e <_dtoa_r+0xa5e>
 801e1e4:	4633      	mov	r3, r6
 801e1e6:	461e      	mov	r6, r3
 801e1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e1ec:	2a30      	cmp	r2, #48	@ 0x30
 801e1ee:	d0fa      	beq.n	801e1e6 <_dtoa_r+0xb06>
 801e1f0:	e5c2      	b.n	801dd78 <_dtoa_r+0x698>
 801e1f2:	459a      	cmp	sl, r3
 801e1f4:	d1a4      	bne.n	801e140 <_dtoa_r+0xa60>
 801e1f6:	9b04      	ldr	r3, [sp, #16]
 801e1f8:	3301      	adds	r3, #1
 801e1fa:	9304      	str	r3, [sp, #16]
 801e1fc:	2331      	movs	r3, #49	@ 0x31
 801e1fe:	f88a 3000 	strb.w	r3, [sl]
 801e202:	e5b9      	b.n	801dd78 <_dtoa_r+0x698>
 801e204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e206:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e264 <_dtoa_r+0xb84>
 801e20a:	b11b      	cbz	r3, 801e214 <_dtoa_r+0xb34>
 801e20c:	f10a 0308 	add.w	r3, sl, #8
 801e210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e212:	6013      	str	r3, [r2, #0]
 801e214:	4650      	mov	r0, sl
 801e216:	b019      	add	sp, #100	@ 0x64
 801e218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e21e:	2b01      	cmp	r3, #1
 801e220:	f77f ae37 	ble.w	801de92 <_dtoa_r+0x7b2>
 801e224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e226:	930a      	str	r3, [sp, #40]	@ 0x28
 801e228:	2001      	movs	r0, #1
 801e22a:	e655      	b.n	801ded8 <_dtoa_r+0x7f8>
 801e22c:	9b00      	ldr	r3, [sp, #0]
 801e22e:	2b00      	cmp	r3, #0
 801e230:	f77f aed6 	ble.w	801dfe0 <_dtoa_r+0x900>
 801e234:	4656      	mov	r6, sl
 801e236:	4621      	mov	r1, r4
 801e238:	4648      	mov	r0, r9
 801e23a:	f7ff f9c9 	bl	801d5d0 <quorem>
 801e23e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e242:	f806 8b01 	strb.w	r8, [r6], #1
 801e246:	9b00      	ldr	r3, [sp, #0]
 801e248:	eba6 020a 	sub.w	r2, r6, sl
 801e24c:	4293      	cmp	r3, r2
 801e24e:	ddb3      	ble.n	801e1b8 <_dtoa_r+0xad8>
 801e250:	4649      	mov	r1, r9
 801e252:	2300      	movs	r3, #0
 801e254:	220a      	movs	r2, #10
 801e256:	4658      	mov	r0, fp
 801e258:	f000 f8b2 	bl	801e3c0 <__multadd>
 801e25c:	4681      	mov	r9, r0
 801e25e:	e7ea      	b.n	801e236 <_dtoa_r+0xb56>
 801e260:	080230c8 	.word	0x080230c8
 801e264:	08023063 	.word	0x08023063

0801e268 <_free_r>:
 801e268:	b538      	push	{r3, r4, r5, lr}
 801e26a:	4605      	mov	r5, r0
 801e26c:	2900      	cmp	r1, #0
 801e26e:	d041      	beq.n	801e2f4 <_free_r+0x8c>
 801e270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e274:	1f0c      	subs	r4, r1, #4
 801e276:	2b00      	cmp	r3, #0
 801e278:	bfb8      	it	lt
 801e27a:	18e4      	addlt	r4, r4, r3
 801e27c:	f7fd fe8a 	bl	801bf94 <__malloc_lock>
 801e280:	4a1d      	ldr	r2, [pc, #116]	@ (801e2f8 <_free_r+0x90>)
 801e282:	6813      	ldr	r3, [r2, #0]
 801e284:	b933      	cbnz	r3, 801e294 <_free_r+0x2c>
 801e286:	6063      	str	r3, [r4, #4]
 801e288:	6014      	str	r4, [r2, #0]
 801e28a:	4628      	mov	r0, r5
 801e28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e290:	f7fd be86 	b.w	801bfa0 <__malloc_unlock>
 801e294:	42a3      	cmp	r3, r4
 801e296:	d908      	bls.n	801e2aa <_free_r+0x42>
 801e298:	6820      	ldr	r0, [r4, #0]
 801e29a:	1821      	adds	r1, r4, r0
 801e29c:	428b      	cmp	r3, r1
 801e29e:	bf01      	itttt	eq
 801e2a0:	6819      	ldreq	r1, [r3, #0]
 801e2a2:	685b      	ldreq	r3, [r3, #4]
 801e2a4:	1809      	addeq	r1, r1, r0
 801e2a6:	6021      	streq	r1, [r4, #0]
 801e2a8:	e7ed      	b.n	801e286 <_free_r+0x1e>
 801e2aa:	461a      	mov	r2, r3
 801e2ac:	685b      	ldr	r3, [r3, #4]
 801e2ae:	b10b      	cbz	r3, 801e2b4 <_free_r+0x4c>
 801e2b0:	42a3      	cmp	r3, r4
 801e2b2:	d9fa      	bls.n	801e2aa <_free_r+0x42>
 801e2b4:	6811      	ldr	r1, [r2, #0]
 801e2b6:	1850      	adds	r0, r2, r1
 801e2b8:	42a0      	cmp	r0, r4
 801e2ba:	d10b      	bne.n	801e2d4 <_free_r+0x6c>
 801e2bc:	6820      	ldr	r0, [r4, #0]
 801e2be:	4401      	add	r1, r0
 801e2c0:	1850      	adds	r0, r2, r1
 801e2c2:	4283      	cmp	r3, r0
 801e2c4:	6011      	str	r1, [r2, #0]
 801e2c6:	d1e0      	bne.n	801e28a <_free_r+0x22>
 801e2c8:	6818      	ldr	r0, [r3, #0]
 801e2ca:	685b      	ldr	r3, [r3, #4]
 801e2cc:	6053      	str	r3, [r2, #4]
 801e2ce:	4408      	add	r0, r1
 801e2d0:	6010      	str	r0, [r2, #0]
 801e2d2:	e7da      	b.n	801e28a <_free_r+0x22>
 801e2d4:	d902      	bls.n	801e2dc <_free_r+0x74>
 801e2d6:	230c      	movs	r3, #12
 801e2d8:	602b      	str	r3, [r5, #0]
 801e2da:	e7d6      	b.n	801e28a <_free_r+0x22>
 801e2dc:	6820      	ldr	r0, [r4, #0]
 801e2de:	1821      	adds	r1, r4, r0
 801e2e0:	428b      	cmp	r3, r1
 801e2e2:	bf04      	itt	eq
 801e2e4:	6819      	ldreq	r1, [r3, #0]
 801e2e6:	685b      	ldreq	r3, [r3, #4]
 801e2e8:	6063      	str	r3, [r4, #4]
 801e2ea:	bf04      	itt	eq
 801e2ec:	1809      	addeq	r1, r1, r0
 801e2ee:	6021      	streq	r1, [r4, #0]
 801e2f0:	6054      	str	r4, [r2, #4]
 801e2f2:	e7ca      	b.n	801e28a <_free_r+0x22>
 801e2f4:	bd38      	pop	{r3, r4, r5, pc}
 801e2f6:	bf00      	nop
 801e2f8:	200036dc 	.word	0x200036dc

0801e2fc <_Balloc>:
 801e2fc:	b570      	push	{r4, r5, r6, lr}
 801e2fe:	69c6      	ldr	r6, [r0, #28]
 801e300:	4604      	mov	r4, r0
 801e302:	460d      	mov	r5, r1
 801e304:	b976      	cbnz	r6, 801e324 <_Balloc+0x28>
 801e306:	2010      	movs	r0, #16
 801e308:	f7fd fd9a 	bl	801be40 <malloc>
 801e30c:	4602      	mov	r2, r0
 801e30e:	61e0      	str	r0, [r4, #28]
 801e310:	b920      	cbnz	r0, 801e31c <_Balloc+0x20>
 801e312:	4b18      	ldr	r3, [pc, #96]	@ (801e374 <_Balloc+0x78>)
 801e314:	4818      	ldr	r0, [pc, #96]	@ (801e378 <_Balloc+0x7c>)
 801e316:	216b      	movs	r1, #107	@ 0x6b
 801e318:	f7ff f93c 	bl	801d594 <__assert_func>
 801e31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e320:	6006      	str	r6, [r0, #0]
 801e322:	60c6      	str	r6, [r0, #12]
 801e324:	69e6      	ldr	r6, [r4, #28]
 801e326:	68f3      	ldr	r3, [r6, #12]
 801e328:	b183      	cbz	r3, 801e34c <_Balloc+0x50>
 801e32a:	69e3      	ldr	r3, [r4, #28]
 801e32c:	68db      	ldr	r3, [r3, #12]
 801e32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e332:	b9b8      	cbnz	r0, 801e364 <_Balloc+0x68>
 801e334:	2101      	movs	r1, #1
 801e336:	fa01 f605 	lsl.w	r6, r1, r5
 801e33a:	1d72      	adds	r2, r6, #5
 801e33c:	0092      	lsls	r2, r2, #2
 801e33e:	4620      	mov	r0, r4
 801e340:	f001 fe95 	bl	802006e <_calloc_r>
 801e344:	b160      	cbz	r0, 801e360 <_Balloc+0x64>
 801e346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e34a:	e00e      	b.n	801e36a <_Balloc+0x6e>
 801e34c:	2221      	movs	r2, #33	@ 0x21
 801e34e:	2104      	movs	r1, #4
 801e350:	4620      	mov	r0, r4
 801e352:	f001 fe8c 	bl	802006e <_calloc_r>
 801e356:	69e3      	ldr	r3, [r4, #28]
 801e358:	60f0      	str	r0, [r6, #12]
 801e35a:	68db      	ldr	r3, [r3, #12]
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	d1e4      	bne.n	801e32a <_Balloc+0x2e>
 801e360:	2000      	movs	r0, #0
 801e362:	bd70      	pop	{r4, r5, r6, pc}
 801e364:	6802      	ldr	r2, [r0, #0]
 801e366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e36a:	2300      	movs	r3, #0
 801e36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e370:	e7f7      	b.n	801e362 <_Balloc+0x66>
 801e372:	bf00      	nop
 801e374:	08022fb6 	.word	0x08022fb6
 801e378:	080230d9 	.word	0x080230d9

0801e37c <_Bfree>:
 801e37c:	b570      	push	{r4, r5, r6, lr}
 801e37e:	69c6      	ldr	r6, [r0, #28]
 801e380:	4605      	mov	r5, r0
 801e382:	460c      	mov	r4, r1
 801e384:	b976      	cbnz	r6, 801e3a4 <_Bfree+0x28>
 801e386:	2010      	movs	r0, #16
 801e388:	f7fd fd5a 	bl	801be40 <malloc>
 801e38c:	4602      	mov	r2, r0
 801e38e:	61e8      	str	r0, [r5, #28]
 801e390:	b920      	cbnz	r0, 801e39c <_Bfree+0x20>
 801e392:	4b09      	ldr	r3, [pc, #36]	@ (801e3b8 <_Bfree+0x3c>)
 801e394:	4809      	ldr	r0, [pc, #36]	@ (801e3bc <_Bfree+0x40>)
 801e396:	218f      	movs	r1, #143	@ 0x8f
 801e398:	f7ff f8fc 	bl	801d594 <__assert_func>
 801e39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e3a0:	6006      	str	r6, [r0, #0]
 801e3a2:	60c6      	str	r6, [r0, #12]
 801e3a4:	b13c      	cbz	r4, 801e3b6 <_Bfree+0x3a>
 801e3a6:	69eb      	ldr	r3, [r5, #28]
 801e3a8:	6862      	ldr	r2, [r4, #4]
 801e3aa:	68db      	ldr	r3, [r3, #12]
 801e3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e3b0:	6021      	str	r1, [r4, #0]
 801e3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e3b6:	bd70      	pop	{r4, r5, r6, pc}
 801e3b8:	08022fb6 	.word	0x08022fb6
 801e3bc:	080230d9 	.word	0x080230d9

0801e3c0 <__multadd>:
 801e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3c4:	690d      	ldr	r5, [r1, #16]
 801e3c6:	4607      	mov	r7, r0
 801e3c8:	460c      	mov	r4, r1
 801e3ca:	461e      	mov	r6, r3
 801e3cc:	f101 0c14 	add.w	ip, r1, #20
 801e3d0:	2000      	movs	r0, #0
 801e3d2:	f8dc 3000 	ldr.w	r3, [ip]
 801e3d6:	b299      	uxth	r1, r3
 801e3d8:	fb02 6101 	mla	r1, r2, r1, r6
 801e3dc:	0c1e      	lsrs	r6, r3, #16
 801e3de:	0c0b      	lsrs	r3, r1, #16
 801e3e0:	fb02 3306 	mla	r3, r2, r6, r3
 801e3e4:	b289      	uxth	r1, r1
 801e3e6:	3001      	adds	r0, #1
 801e3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e3ec:	4285      	cmp	r5, r0
 801e3ee:	f84c 1b04 	str.w	r1, [ip], #4
 801e3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e3f6:	dcec      	bgt.n	801e3d2 <__multadd+0x12>
 801e3f8:	b30e      	cbz	r6, 801e43e <__multadd+0x7e>
 801e3fa:	68a3      	ldr	r3, [r4, #8]
 801e3fc:	42ab      	cmp	r3, r5
 801e3fe:	dc19      	bgt.n	801e434 <__multadd+0x74>
 801e400:	6861      	ldr	r1, [r4, #4]
 801e402:	4638      	mov	r0, r7
 801e404:	3101      	adds	r1, #1
 801e406:	f7ff ff79 	bl	801e2fc <_Balloc>
 801e40a:	4680      	mov	r8, r0
 801e40c:	b928      	cbnz	r0, 801e41a <__multadd+0x5a>
 801e40e:	4602      	mov	r2, r0
 801e410:	4b0c      	ldr	r3, [pc, #48]	@ (801e444 <__multadd+0x84>)
 801e412:	480d      	ldr	r0, [pc, #52]	@ (801e448 <__multadd+0x88>)
 801e414:	21ba      	movs	r1, #186	@ 0xba
 801e416:	f7ff f8bd 	bl	801d594 <__assert_func>
 801e41a:	6922      	ldr	r2, [r4, #16]
 801e41c:	3202      	adds	r2, #2
 801e41e:	f104 010c 	add.w	r1, r4, #12
 801e422:	0092      	lsls	r2, r2, #2
 801e424:	300c      	adds	r0, #12
 801e426:	f7ff f8a0 	bl	801d56a <memcpy>
 801e42a:	4621      	mov	r1, r4
 801e42c:	4638      	mov	r0, r7
 801e42e:	f7ff ffa5 	bl	801e37c <_Bfree>
 801e432:	4644      	mov	r4, r8
 801e434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e438:	3501      	adds	r5, #1
 801e43a:	615e      	str	r6, [r3, #20]
 801e43c:	6125      	str	r5, [r4, #16]
 801e43e:	4620      	mov	r0, r4
 801e440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e444:	080230c8 	.word	0x080230c8
 801e448:	080230d9 	.word	0x080230d9

0801e44c <__s2b>:
 801e44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e450:	460c      	mov	r4, r1
 801e452:	4615      	mov	r5, r2
 801e454:	461f      	mov	r7, r3
 801e456:	2209      	movs	r2, #9
 801e458:	3308      	adds	r3, #8
 801e45a:	4606      	mov	r6, r0
 801e45c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e460:	2100      	movs	r1, #0
 801e462:	2201      	movs	r2, #1
 801e464:	429a      	cmp	r2, r3
 801e466:	db09      	blt.n	801e47c <__s2b+0x30>
 801e468:	4630      	mov	r0, r6
 801e46a:	f7ff ff47 	bl	801e2fc <_Balloc>
 801e46e:	b940      	cbnz	r0, 801e482 <__s2b+0x36>
 801e470:	4602      	mov	r2, r0
 801e472:	4b19      	ldr	r3, [pc, #100]	@ (801e4d8 <__s2b+0x8c>)
 801e474:	4819      	ldr	r0, [pc, #100]	@ (801e4dc <__s2b+0x90>)
 801e476:	21d3      	movs	r1, #211	@ 0xd3
 801e478:	f7ff f88c 	bl	801d594 <__assert_func>
 801e47c:	0052      	lsls	r2, r2, #1
 801e47e:	3101      	adds	r1, #1
 801e480:	e7f0      	b.n	801e464 <__s2b+0x18>
 801e482:	9b08      	ldr	r3, [sp, #32]
 801e484:	6143      	str	r3, [r0, #20]
 801e486:	2d09      	cmp	r5, #9
 801e488:	f04f 0301 	mov.w	r3, #1
 801e48c:	6103      	str	r3, [r0, #16]
 801e48e:	dd16      	ble.n	801e4be <__s2b+0x72>
 801e490:	f104 0909 	add.w	r9, r4, #9
 801e494:	46c8      	mov	r8, r9
 801e496:	442c      	add	r4, r5
 801e498:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e49c:	4601      	mov	r1, r0
 801e49e:	3b30      	subs	r3, #48	@ 0x30
 801e4a0:	220a      	movs	r2, #10
 801e4a2:	4630      	mov	r0, r6
 801e4a4:	f7ff ff8c 	bl	801e3c0 <__multadd>
 801e4a8:	45a0      	cmp	r8, r4
 801e4aa:	d1f5      	bne.n	801e498 <__s2b+0x4c>
 801e4ac:	f1a5 0408 	sub.w	r4, r5, #8
 801e4b0:	444c      	add	r4, r9
 801e4b2:	1b2d      	subs	r5, r5, r4
 801e4b4:	1963      	adds	r3, r4, r5
 801e4b6:	42bb      	cmp	r3, r7
 801e4b8:	db04      	blt.n	801e4c4 <__s2b+0x78>
 801e4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4be:	340a      	adds	r4, #10
 801e4c0:	2509      	movs	r5, #9
 801e4c2:	e7f6      	b.n	801e4b2 <__s2b+0x66>
 801e4c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e4c8:	4601      	mov	r1, r0
 801e4ca:	3b30      	subs	r3, #48	@ 0x30
 801e4cc:	220a      	movs	r2, #10
 801e4ce:	4630      	mov	r0, r6
 801e4d0:	f7ff ff76 	bl	801e3c0 <__multadd>
 801e4d4:	e7ee      	b.n	801e4b4 <__s2b+0x68>
 801e4d6:	bf00      	nop
 801e4d8:	080230c8 	.word	0x080230c8
 801e4dc:	080230d9 	.word	0x080230d9

0801e4e0 <__hi0bits>:
 801e4e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e4e4:	4603      	mov	r3, r0
 801e4e6:	bf36      	itet	cc
 801e4e8:	0403      	lslcc	r3, r0, #16
 801e4ea:	2000      	movcs	r0, #0
 801e4ec:	2010      	movcc	r0, #16
 801e4ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e4f2:	bf3c      	itt	cc
 801e4f4:	021b      	lslcc	r3, r3, #8
 801e4f6:	3008      	addcc	r0, #8
 801e4f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e4fc:	bf3c      	itt	cc
 801e4fe:	011b      	lslcc	r3, r3, #4
 801e500:	3004      	addcc	r0, #4
 801e502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e506:	bf3c      	itt	cc
 801e508:	009b      	lslcc	r3, r3, #2
 801e50a:	3002      	addcc	r0, #2
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	db05      	blt.n	801e51c <__hi0bits+0x3c>
 801e510:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e514:	f100 0001 	add.w	r0, r0, #1
 801e518:	bf08      	it	eq
 801e51a:	2020      	moveq	r0, #32
 801e51c:	4770      	bx	lr

0801e51e <__lo0bits>:
 801e51e:	6803      	ldr	r3, [r0, #0]
 801e520:	4602      	mov	r2, r0
 801e522:	f013 0007 	ands.w	r0, r3, #7
 801e526:	d00b      	beq.n	801e540 <__lo0bits+0x22>
 801e528:	07d9      	lsls	r1, r3, #31
 801e52a:	d421      	bmi.n	801e570 <__lo0bits+0x52>
 801e52c:	0798      	lsls	r0, r3, #30
 801e52e:	bf49      	itett	mi
 801e530:	085b      	lsrmi	r3, r3, #1
 801e532:	089b      	lsrpl	r3, r3, #2
 801e534:	2001      	movmi	r0, #1
 801e536:	6013      	strmi	r3, [r2, #0]
 801e538:	bf5c      	itt	pl
 801e53a:	6013      	strpl	r3, [r2, #0]
 801e53c:	2002      	movpl	r0, #2
 801e53e:	4770      	bx	lr
 801e540:	b299      	uxth	r1, r3
 801e542:	b909      	cbnz	r1, 801e548 <__lo0bits+0x2a>
 801e544:	0c1b      	lsrs	r3, r3, #16
 801e546:	2010      	movs	r0, #16
 801e548:	b2d9      	uxtb	r1, r3
 801e54a:	b909      	cbnz	r1, 801e550 <__lo0bits+0x32>
 801e54c:	3008      	adds	r0, #8
 801e54e:	0a1b      	lsrs	r3, r3, #8
 801e550:	0719      	lsls	r1, r3, #28
 801e552:	bf04      	itt	eq
 801e554:	091b      	lsreq	r3, r3, #4
 801e556:	3004      	addeq	r0, #4
 801e558:	0799      	lsls	r1, r3, #30
 801e55a:	bf04      	itt	eq
 801e55c:	089b      	lsreq	r3, r3, #2
 801e55e:	3002      	addeq	r0, #2
 801e560:	07d9      	lsls	r1, r3, #31
 801e562:	d403      	bmi.n	801e56c <__lo0bits+0x4e>
 801e564:	085b      	lsrs	r3, r3, #1
 801e566:	f100 0001 	add.w	r0, r0, #1
 801e56a:	d003      	beq.n	801e574 <__lo0bits+0x56>
 801e56c:	6013      	str	r3, [r2, #0]
 801e56e:	4770      	bx	lr
 801e570:	2000      	movs	r0, #0
 801e572:	4770      	bx	lr
 801e574:	2020      	movs	r0, #32
 801e576:	4770      	bx	lr

0801e578 <__i2b>:
 801e578:	b510      	push	{r4, lr}
 801e57a:	460c      	mov	r4, r1
 801e57c:	2101      	movs	r1, #1
 801e57e:	f7ff febd 	bl	801e2fc <_Balloc>
 801e582:	4602      	mov	r2, r0
 801e584:	b928      	cbnz	r0, 801e592 <__i2b+0x1a>
 801e586:	4b05      	ldr	r3, [pc, #20]	@ (801e59c <__i2b+0x24>)
 801e588:	4805      	ldr	r0, [pc, #20]	@ (801e5a0 <__i2b+0x28>)
 801e58a:	f240 1145 	movw	r1, #325	@ 0x145
 801e58e:	f7ff f801 	bl	801d594 <__assert_func>
 801e592:	2301      	movs	r3, #1
 801e594:	6144      	str	r4, [r0, #20]
 801e596:	6103      	str	r3, [r0, #16]
 801e598:	bd10      	pop	{r4, pc}
 801e59a:	bf00      	nop
 801e59c:	080230c8 	.word	0x080230c8
 801e5a0:	080230d9 	.word	0x080230d9

0801e5a4 <__multiply>:
 801e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5a8:	4614      	mov	r4, r2
 801e5aa:	690a      	ldr	r2, [r1, #16]
 801e5ac:	6923      	ldr	r3, [r4, #16]
 801e5ae:	429a      	cmp	r2, r3
 801e5b0:	bfa8      	it	ge
 801e5b2:	4623      	movge	r3, r4
 801e5b4:	460f      	mov	r7, r1
 801e5b6:	bfa4      	itt	ge
 801e5b8:	460c      	movge	r4, r1
 801e5ba:	461f      	movge	r7, r3
 801e5bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e5c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e5c4:	68a3      	ldr	r3, [r4, #8]
 801e5c6:	6861      	ldr	r1, [r4, #4]
 801e5c8:	eb0a 0609 	add.w	r6, sl, r9
 801e5cc:	42b3      	cmp	r3, r6
 801e5ce:	b085      	sub	sp, #20
 801e5d0:	bfb8      	it	lt
 801e5d2:	3101      	addlt	r1, #1
 801e5d4:	f7ff fe92 	bl	801e2fc <_Balloc>
 801e5d8:	b930      	cbnz	r0, 801e5e8 <__multiply+0x44>
 801e5da:	4602      	mov	r2, r0
 801e5dc:	4b44      	ldr	r3, [pc, #272]	@ (801e6f0 <__multiply+0x14c>)
 801e5de:	4845      	ldr	r0, [pc, #276]	@ (801e6f4 <__multiply+0x150>)
 801e5e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e5e4:	f7fe ffd6 	bl	801d594 <__assert_func>
 801e5e8:	f100 0514 	add.w	r5, r0, #20
 801e5ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e5f0:	462b      	mov	r3, r5
 801e5f2:	2200      	movs	r2, #0
 801e5f4:	4543      	cmp	r3, r8
 801e5f6:	d321      	bcc.n	801e63c <__multiply+0x98>
 801e5f8:	f107 0114 	add.w	r1, r7, #20
 801e5fc:	f104 0214 	add.w	r2, r4, #20
 801e600:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e604:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e608:	9302      	str	r3, [sp, #8]
 801e60a:	1b13      	subs	r3, r2, r4
 801e60c:	3b15      	subs	r3, #21
 801e60e:	f023 0303 	bic.w	r3, r3, #3
 801e612:	3304      	adds	r3, #4
 801e614:	f104 0715 	add.w	r7, r4, #21
 801e618:	42ba      	cmp	r2, r7
 801e61a:	bf38      	it	cc
 801e61c:	2304      	movcc	r3, #4
 801e61e:	9301      	str	r3, [sp, #4]
 801e620:	9b02      	ldr	r3, [sp, #8]
 801e622:	9103      	str	r1, [sp, #12]
 801e624:	428b      	cmp	r3, r1
 801e626:	d80c      	bhi.n	801e642 <__multiply+0x9e>
 801e628:	2e00      	cmp	r6, #0
 801e62a:	dd03      	ble.n	801e634 <__multiply+0x90>
 801e62c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e630:	2b00      	cmp	r3, #0
 801e632:	d05b      	beq.n	801e6ec <__multiply+0x148>
 801e634:	6106      	str	r6, [r0, #16]
 801e636:	b005      	add	sp, #20
 801e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e63c:	f843 2b04 	str.w	r2, [r3], #4
 801e640:	e7d8      	b.n	801e5f4 <__multiply+0x50>
 801e642:	f8b1 a000 	ldrh.w	sl, [r1]
 801e646:	f1ba 0f00 	cmp.w	sl, #0
 801e64a:	d024      	beq.n	801e696 <__multiply+0xf2>
 801e64c:	f104 0e14 	add.w	lr, r4, #20
 801e650:	46a9      	mov	r9, r5
 801e652:	f04f 0c00 	mov.w	ip, #0
 801e656:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e65a:	f8d9 3000 	ldr.w	r3, [r9]
 801e65e:	fa1f fb87 	uxth.w	fp, r7
 801e662:	b29b      	uxth	r3, r3
 801e664:	fb0a 330b 	mla	r3, sl, fp, r3
 801e668:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e66c:	f8d9 7000 	ldr.w	r7, [r9]
 801e670:	4463      	add	r3, ip
 801e672:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e676:	fb0a c70b 	mla	r7, sl, fp, ip
 801e67a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e67e:	b29b      	uxth	r3, r3
 801e680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e684:	4572      	cmp	r2, lr
 801e686:	f849 3b04 	str.w	r3, [r9], #4
 801e68a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e68e:	d8e2      	bhi.n	801e656 <__multiply+0xb2>
 801e690:	9b01      	ldr	r3, [sp, #4]
 801e692:	f845 c003 	str.w	ip, [r5, r3]
 801e696:	9b03      	ldr	r3, [sp, #12]
 801e698:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e69c:	3104      	adds	r1, #4
 801e69e:	f1b9 0f00 	cmp.w	r9, #0
 801e6a2:	d021      	beq.n	801e6e8 <__multiply+0x144>
 801e6a4:	682b      	ldr	r3, [r5, #0]
 801e6a6:	f104 0c14 	add.w	ip, r4, #20
 801e6aa:	46ae      	mov	lr, r5
 801e6ac:	f04f 0a00 	mov.w	sl, #0
 801e6b0:	f8bc b000 	ldrh.w	fp, [ip]
 801e6b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e6b8:	fb09 770b 	mla	r7, r9, fp, r7
 801e6bc:	4457      	add	r7, sl
 801e6be:	b29b      	uxth	r3, r3
 801e6c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e6c4:	f84e 3b04 	str.w	r3, [lr], #4
 801e6c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e6cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e6d0:	f8be 3000 	ldrh.w	r3, [lr]
 801e6d4:	fb09 330a 	mla	r3, r9, sl, r3
 801e6d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e6dc:	4562      	cmp	r2, ip
 801e6de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e6e2:	d8e5      	bhi.n	801e6b0 <__multiply+0x10c>
 801e6e4:	9f01      	ldr	r7, [sp, #4]
 801e6e6:	51eb      	str	r3, [r5, r7]
 801e6e8:	3504      	adds	r5, #4
 801e6ea:	e799      	b.n	801e620 <__multiply+0x7c>
 801e6ec:	3e01      	subs	r6, #1
 801e6ee:	e79b      	b.n	801e628 <__multiply+0x84>
 801e6f0:	080230c8 	.word	0x080230c8
 801e6f4:	080230d9 	.word	0x080230d9

0801e6f8 <__pow5mult>:
 801e6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6fc:	4615      	mov	r5, r2
 801e6fe:	f012 0203 	ands.w	r2, r2, #3
 801e702:	4607      	mov	r7, r0
 801e704:	460e      	mov	r6, r1
 801e706:	d007      	beq.n	801e718 <__pow5mult+0x20>
 801e708:	4c25      	ldr	r4, [pc, #148]	@ (801e7a0 <__pow5mult+0xa8>)
 801e70a:	3a01      	subs	r2, #1
 801e70c:	2300      	movs	r3, #0
 801e70e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e712:	f7ff fe55 	bl	801e3c0 <__multadd>
 801e716:	4606      	mov	r6, r0
 801e718:	10ad      	asrs	r5, r5, #2
 801e71a:	d03d      	beq.n	801e798 <__pow5mult+0xa0>
 801e71c:	69fc      	ldr	r4, [r7, #28]
 801e71e:	b97c      	cbnz	r4, 801e740 <__pow5mult+0x48>
 801e720:	2010      	movs	r0, #16
 801e722:	f7fd fb8d 	bl	801be40 <malloc>
 801e726:	4602      	mov	r2, r0
 801e728:	61f8      	str	r0, [r7, #28]
 801e72a:	b928      	cbnz	r0, 801e738 <__pow5mult+0x40>
 801e72c:	4b1d      	ldr	r3, [pc, #116]	@ (801e7a4 <__pow5mult+0xac>)
 801e72e:	481e      	ldr	r0, [pc, #120]	@ (801e7a8 <__pow5mult+0xb0>)
 801e730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e734:	f7fe ff2e 	bl	801d594 <__assert_func>
 801e738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e73c:	6004      	str	r4, [r0, #0]
 801e73e:	60c4      	str	r4, [r0, #12]
 801e740:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e748:	b94c      	cbnz	r4, 801e75e <__pow5mult+0x66>
 801e74a:	f240 2171 	movw	r1, #625	@ 0x271
 801e74e:	4638      	mov	r0, r7
 801e750:	f7ff ff12 	bl	801e578 <__i2b>
 801e754:	2300      	movs	r3, #0
 801e756:	f8c8 0008 	str.w	r0, [r8, #8]
 801e75a:	4604      	mov	r4, r0
 801e75c:	6003      	str	r3, [r0, #0]
 801e75e:	f04f 0900 	mov.w	r9, #0
 801e762:	07eb      	lsls	r3, r5, #31
 801e764:	d50a      	bpl.n	801e77c <__pow5mult+0x84>
 801e766:	4631      	mov	r1, r6
 801e768:	4622      	mov	r2, r4
 801e76a:	4638      	mov	r0, r7
 801e76c:	f7ff ff1a 	bl	801e5a4 <__multiply>
 801e770:	4631      	mov	r1, r6
 801e772:	4680      	mov	r8, r0
 801e774:	4638      	mov	r0, r7
 801e776:	f7ff fe01 	bl	801e37c <_Bfree>
 801e77a:	4646      	mov	r6, r8
 801e77c:	106d      	asrs	r5, r5, #1
 801e77e:	d00b      	beq.n	801e798 <__pow5mult+0xa0>
 801e780:	6820      	ldr	r0, [r4, #0]
 801e782:	b938      	cbnz	r0, 801e794 <__pow5mult+0x9c>
 801e784:	4622      	mov	r2, r4
 801e786:	4621      	mov	r1, r4
 801e788:	4638      	mov	r0, r7
 801e78a:	f7ff ff0b 	bl	801e5a4 <__multiply>
 801e78e:	6020      	str	r0, [r4, #0]
 801e790:	f8c0 9000 	str.w	r9, [r0]
 801e794:	4604      	mov	r4, r0
 801e796:	e7e4      	b.n	801e762 <__pow5mult+0x6a>
 801e798:	4630      	mov	r0, r6
 801e79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e79e:	bf00      	nop
 801e7a0:	08023134 	.word	0x08023134
 801e7a4:	08022fb6 	.word	0x08022fb6
 801e7a8:	080230d9 	.word	0x080230d9

0801e7ac <__lshift>:
 801e7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7b0:	460c      	mov	r4, r1
 801e7b2:	6849      	ldr	r1, [r1, #4]
 801e7b4:	6923      	ldr	r3, [r4, #16]
 801e7b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e7ba:	68a3      	ldr	r3, [r4, #8]
 801e7bc:	4607      	mov	r7, r0
 801e7be:	4691      	mov	r9, r2
 801e7c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e7c4:	f108 0601 	add.w	r6, r8, #1
 801e7c8:	42b3      	cmp	r3, r6
 801e7ca:	db0b      	blt.n	801e7e4 <__lshift+0x38>
 801e7cc:	4638      	mov	r0, r7
 801e7ce:	f7ff fd95 	bl	801e2fc <_Balloc>
 801e7d2:	4605      	mov	r5, r0
 801e7d4:	b948      	cbnz	r0, 801e7ea <__lshift+0x3e>
 801e7d6:	4602      	mov	r2, r0
 801e7d8:	4b28      	ldr	r3, [pc, #160]	@ (801e87c <__lshift+0xd0>)
 801e7da:	4829      	ldr	r0, [pc, #164]	@ (801e880 <__lshift+0xd4>)
 801e7dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e7e0:	f7fe fed8 	bl	801d594 <__assert_func>
 801e7e4:	3101      	adds	r1, #1
 801e7e6:	005b      	lsls	r3, r3, #1
 801e7e8:	e7ee      	b.n	801e7c8 <__lshift+0x1c>
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	f100 0114 	add.w	r1, r0, #20
 801e7f0:	f100 0210 	add.w	r2, r0, #16
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	4553      	cmp	r3, sl
 801e7f8:	db33      	blt.n	801e862 <__lshift+0xb6>
 801e7fa:	6920      	ldr	r0, [r4, #16]
 801e7fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e800:	f104 0314 	add.w	r3, r4, #20
 801e804:	f019 091f 	ands.w	r9, r9, #31
 801e808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e80c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e810:	d02b      	beq.n	801e86a <__lshift+0xbe>
 801e812:	f1c9 0e20 	rsb	lr, r9, #32
 801e816:	468a      	mov	sl, r1
 801e818:	2200      	movs	r2, #0
 801e81a:	6818      	ldr	r0, [r3, #0]
 801e81c:	fa00 f009 	lsl.w	r0, r0, r9
 801e820:	4310      	orrs	r0, r2
 801e822:	f84a 0b04 	str.w	r0, [sl], #4
 801e826:	f853 2b04 	ldr.w	r2, [r3], #4
 801e82a:	459c      	cmp	ip, r3
 801e82c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e830:	d8f3      	bhi.n	801e81a <__lshift+0x6e>
 801e832:	ebac 0304 	sub.w	r3, ip, r4
 801e836:	3b15      	subs	r3, #21
 801e838:	f023 0303 	bic.w	r3, r3, #3
 801e83c:	3304      	adds	r3, #4
 801e83e:	f104 0015 	add.w	r0, r4, #21
 801e842:	4584      	cmp	ip, r0
 801e844:	bf38      	it	cc
 801e846:	2304      	movcc	r3, #4
 801e848:	50ca      	str	r2, [r1, r3]
 801e84a:	b10a      	cbz	r2, 801e850 <__lshift+0xa4>
 801e84c:	f108 0602 	add.w	r6, r8, #2
 801e850:	3e01      	subs	r6, #1
 801e852:	4638      	mov	r0, r7
 801e854:	612e      	str	r6, [r5, #16]
 801e856:	4621      	mov	r1, r4
 801e858:	f7ff fd90 	bl	801e37c <_Bfree>
 801e85c:	4628      	mov	r0, r5
 801e85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e862:	f842 0f04 	str.w	r0, [r2, #4]!
 801e866:	3301      	adds	r3, #1
 801e868:	e7c5      	b.n	801e7f6 <__lshift+0x4a>
 801e86a:	3904      	subs	r1, #4
 801e86c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e870:	f841 2f04 	str.w	r2, [r1, #4]!
 801e874:	459c      	cmp	ip, r3
 801e876:	d8f9      	bhi.n	801e86c <__lshift+0xc0>
 801e878:	e7ea      	b.n	801e850 <__lshift+0xa4>
 801e87a:	bf00      	nop
 801e87c:	080230c8 	.word	0x080230c8
 801e880:	080230d9 	.word	0x080230d9

0801e884 <__mcmp>:
 801e884:	690a      	ldr	r2, [r1, #16]
 801e886:	4603      	mov	r3, r0
 801e888:	6900      	ldr	r0, [r0, #16]
 801e88a:	1a80      	subs	r0, r0, r2
 801e88c:	b530      	push	{r4, r5, lr}
 801e88e:	d10e      	bne.n	801e8ae <__mcmp+0x2a>
 801e890:	3314      	adds	r3, #20
 801e892:	3114      	adds	r1, #20
 801e894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e89c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e8a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e8a4:	4295      	cmp	r5, r2
 801e8a6:	d003      	beq.n	801e8b0 <__mcmp+0x2c>
 801e8a8:	d205      	bcs.n	801e8b6 <__mcmp+0x32>
 801e8aa:	f04f 30ff 	mov.w	r0, #4294967295
 801e8ae:	bd30      	pop	{r4, r5, pc}
 801e8b0:	42a3      	cmp	r3, r4
 801e8b2:	d3f3      	bcc.n	801e89c <__mcmp+0x18>
 801e8b4:	e7fb      	b.n	801e8ae <__mcmp+0x2a>
 801e8b6:	2001      	movs	r0, #1
 801e8b8:	e7f9      	b.n	801e8ae <__mcmp+0x2a>
	...

0801e8bc <__mdiff>:
 801e8bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c0:	4689      	mov	r9, r1
 801e8c2:	4606      	mov	r6, r0
 801e8c4:	4611      	mov	r1, r2
 801e8c6:	4648      	mov	r0, r9
 801e8c8:	4614      	mov	r4, r2
 801e8ca:	f7ff ffdb 	bl	801e884 <__mcmp>
 801e8ce:	1e05      	subs	r5, r0, #0
 801e8d0:	d112      	bne.n	801e8f8 <__mdiff+0x3c>
 801e8d2:	4629      	mov	r1, r5
 801e8d4:	4630      	mov	r0, r6
 801e8d6:	f7ff fd11 	bl	801e2fc <_Balloc>
 801e8da:	4602      	mov	r2, r0
 801e8dc:	b928      	cbnz	r0, 801e8ea <__mdiff+0x2e>
 801e8de:	4b3f      	ldr	r3, [pc, #252]	@ (801e9dc <__mdiff+0x120>)
 801e8e0:	f240 2137 	movw	r1, #567	@ 0x237
 801e8e4:	483e      	ldr	r0, [pc, #248]	@ (801e9e0 <__mdiff+0x124>)
 801e8e6:	f7fe fe55 	bl	801d594 <__assert_func>
 801e8ea:	2301      	movs	r3, #1
 801e8ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e8f0:	4610      	mov	r0, r2
 801e8f2:	b003      	add	sp, #12
 801e8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8f8:	bfbc      	itt	lt
 801e8fa:	464b      	movlt	r3, r9
 801e8fc:	46a1      	movlt	r9, r4
 801e8fe:	4630      	mov	r0, r6
 801e900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e904:	bfba      	itte	lt
 801e906:	461c      	movlt	r4, r3
 801e908:	2501      	movlt	r5, #1
 801e90a:	2500      	movge	r5, #0
 801e90c:	f7ff fcf6 	bl	801e2fc <_Balloc>
 801e910:	4602      	mov	r2, r0
 801e912:	b918      	cbnz	r0, 801e91c <__mdiff+0x60>
 801e914:	4b31      	ldr	r3, [pc, #196]	@ (801e9dc <__mdiff+0x120>)
 801e916:	f240 2145 	movw	r1, #581	@ 0x245
 801e91a:	e7e3      	b.n	801e8e4 <__mdiff+0x28>
 801e91c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e920:	6926      	ldr	r6, [r4, #16]
 801e922:	60c5      	str	r5, [r0, #12]
 801e924:	f109 0310 	add.w	r3, r9, #16
 801e928:	f109 0514 	add.w	r5, r9, #20
 801e92c:	f104 0e14 	add.w	lr, r4, #20
 801e930:	f100 0b14 	add.w	fp, r0, #20
 801e934:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e938:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e93c:	9301      	str	r3, [sp, #4]
 801e93e:	46d9      	mov	r9, fp
 801e940:	f04f 0c00 	mov.w	ip, #0
 801e944:	9b01      	ldr	r3, [sp, #4]
 801e946:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e94a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e94e:	9301      	str	r3, [sp, #4]
 801e950:	fa1f f38a 	uxth.w	r3, sl
 801e954:	4619      	mov	r1, r3
 801e956:	b283      	uxth	r3, r0
 801e958:	1acb      	subs	r3, r1, r3
 801e95a:	0c00      	lsrs	r0, r0, #16
 801e95c:	4463      	add	r3, ip
 801e95e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e962:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e966:	b29b      	uxth	r3, r3
 801e968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e96c:	4576      	cmp	r6, lr
 801e96e:	f849 3b04 	str.w	r3, [r9], #4
 801e972:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e976:	d8e5      	bhi.n	801e944 <__mdiff+0x88>
 801e978:	1b33      	subs	r3, r6, r4
 801e97a:	3b15      	subs	r3, #21
 801e97c:	f023 0303 	bic.w	r3, r3, #3
 801e980:	3415      	adds	r4, #21
 801e982:	3304      	adds	r3, #4
 801e984:	42a6      	cmp	r6, r4
 801e986:	bf38      	it	cc
 801e988:	2304      	movcc	r3, #4
 801e98a:	441d      	add	r5, r3
 801e98c:	445b      	add	r3, fp
 801e98e:	461e      	mov	r6, r3
 801e990:	462c      	mov	r4, r5
 801e992:	4544      	cmp	r4, r8
 801e994:	d30e      	bcc.n	801e9b4 <__mdiff+0xf8>
 801e996:	f108 0103 	add.w	r1, r8, #3
 801e99a:	1b49      	subs	r1, r1, r5
 801e99c:	f021 0103 	bic.w	r1, r1, #3
 801e9a0:	3d03      	subs	r5, #3
 801e9a2:	45a8      	cmp	r8, r5
 801e9a4:	bf38      	it	cc
 801e9a6:	2100      	movcc	r1, #0
 801e9a8:	440b      	add	r3, r1
 801e9aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e9ae:	b191      	cbz	r1, 801e9d6 <__mdiff+0x11a>
 801e9b0:	6117      	str	r7, [r2, #16]
 801e9b2:	e79d      	b.n	801e8f0 <__mdiff+0x34>
 801e9b4:	f854 1b04 	ldr.w	r1, [r4], #4
 801e9b8:	46e6      	mov	lr, ip
 801e9ba:	0c08      	lsrs	r0, r1, #16
 801e9bc:	fa1c fc81 	uxtah	ip, ip, r1
 801e9c0:	4471      	add	r1, lr
 801e9c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e9c6:	b289      	uxth	r1, r1
 801e9c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e9cc:	f846 1b04 	str.w	r1, [r6], #4
 801e9d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e9d4:	e7dd      	b.n	801e992 <__mdiff+0xd6>
 801e9d6:	3f01      	subs	r7, #1
 801e9d8:	e7e7      	b.n	801e9aa <__mdiff+0xee>
 801e9da:	bf00      	nop
 801e9dc:	080230c8 	.word	0x080230c8
 801e9e0:	080230d9 	.word	0x080230d9

0801e9e4 <__ulp>:
 801e9e4:	b082      	sub	sp, #8
 801e9e6:	ed8d 0b00 	vstr	d0, [sp]
 801e9ea:	9a01      	ldr	r2, [sp, #4]
 801e9ec:	4b0f      	ldr	r3, [pc, #60]	@ (801ea2c <__ulp+0x48>)
 801e9ee:	4013      	ands	r3, r2
 801e9f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	dc08      	bgt.n	801ea0a <__ulp+0x26>
 801e9f8:	425b      	negs	r3, r3
 801e9fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801e9fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ea02:	da04      	bge.n	801ea0e <__ulp+0x2a>
 801ea04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801ea08:	4113      	asrs	r3, r2
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	e008      	b.n	801ea20 <__ulp+0x3c>
 801ea0e:	f1a2 0314 	sub.w	r3, r2, #20
 801ea12:	2b1e      	cmp	r3, #30
 801ea14:	bfda      	itte	le
 801ea16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801ea1a:	40da      	lsrle	r2, r3
 801ea1c:	2201      	movgt	r2, #1
 801ea1e:	2300      	movs	r3, #0
 801ea20:	4619      	mov	r1, r3
 801ea22:	4610      	mov	r0, r2
 801ea24:	ec41 0b10 	vmov	d0, r0, r1
 801ea28:	b002      	add	sp, #8
 801ea2a:	4770      	bx	lr
 801ea2c:	7ff00000 	.word	0x7ff00000

0801ea30 <__b2d>:
 801ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea34:	6906      	ldr	r6, [r0, #16]
 801ea36:	f100 0814 	add.w	r8, r0, #20
 801ea3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ea3e:	1f37      	subs	r7, r6, #4
 801ea40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ea44:	4610      	mov	r0, r2
 801ea46:	f7ff fd4b 	bl	801e4e0 <__hi0bits>
 801ea4a:	f1c0 0320 	rsb	r3, r0, #32
 801ea4e:	280a      	cmp	r0, #10
 801ea50:	600b      	str	r3, [r1, #0]
 801ea52:	491b      	ldr	r1, [pc, #108]	@ (801eac0 <__b2d+0x90>)
 801ea54:	dc15      	bgt.n	801ea82 <__b2d+0x52>
 801ea56:	f1c0 0c0b 	rsb	ip, r0, #11
 801ea5a:	fa22 f30c 	lsr.w	r3, r2, ip
 801ea5e:	45b8      	cmp	r8, r7
 801ea60:	ea43 0501 	orr.w	r5, r3, r1
 801ea64:	bf34      	ite	cc
 801ea66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ea6a:	2300      	movcs	r3, #0
 801ea6c:	3015      	adds	r0, #21
 801ea6e:	fa02 f000 	lsl.w	r0, r2, r0
 801ea72:	fa23 f30c 	lsr.w	r3, r3, ip
 801ea76:	4303      	orrs	r3, r0
 801ea78:	461c      	mov	r4, r3
 801ea7a:	ec45 4b10 	vmov	d0, r4, r5
 801ea7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea82:	45b8      	cmp	r8, r7
 801ea84:	bf3a      	itte	cc
 801ea86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ea8a:	f1a6 0708 	subcc.w	r7, r6, #8
 801ea8e:	2300      	movcs	r3, #0
 801ea90:	380b      	subs	r0, #11
 801ea92:	d012      	beq.n	801eaba <__b2d+0x8a>
 801ea94:	f1c0 0120 	rsb	r1, r0, #32
 801ea98:	fa23 f401 	lsr.w	r4, r3, r1
 801ea9c:	4082      	lsls	r2, r0
 801ea9e:	4322      	orrs	r2, r4
 801eaa0:	4547      	cmp	r7, r8
 801eaa2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801eaa6:	bf8c      	ite	hi
 801eaa8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801eaac:	2200      	movls	r2, #0
 801eaae:	4083      	lsls	r3, r0
 801eab0:	40ca      	lsrs	r2, r1
 801eab2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801eab6:	4313      	orrs	r3, r2
 801eab8:	e7de      	b.n	801ea78 <__b2d+0x48>
 801eaba:	ea42 0501 	orr.w	r5, r2, r1
 801eabe:	e7db      	b.n	801ea78 <__b2d+0x48>
 801eac0:	3ff00000 	.word	0x3ff00000

0801eac4 <__d2b>:
 801eac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eac8:	460f      	mov	r7, r1
 801eaca:	2101      	movs	r1, #1
 801eacc:	ec59 8b10 	vmov	r8, r9, d0
 801ead0:	4616      	mov	r6, r2
 801ead2:	f7ff fc13 	bl	801e2fc <_Balloc>
 801ead6:	4604      	mov	r4, r0
 801ead8:	b930      	cbnz	r0, 801eae8 <__d2b+0x24>
 801eada:	4602      	mov	r2, r0
 801eadc:	4b23      	ldr	r3, [pc, #140]	@ (801eb6c <__d2b+0xa8>)
 801eade:	4824      	ldr	r0, [pc, #144]	@ (801eb70 <__d2b+0xac>)
 801eae0:	f240 310f 	movw	r1, #783	@ 0x30f
 801eae4:	f7fe fd56 	bl	801d594 <__assert_func>
 801eae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801eaec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eaf0:	b10d      	cbz	r5, 801eaf6 <__d2b+0x32>
 801eaf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eaf6:	9301      	str	r3, [sp, #4]
 801eaf8:	f1b8 0300 	subs.w	r3, r8, #0
 801eafc:	d023      	beq.n	801eb46 <__d2b+0x82>
 801eafe:	4668      	mov	r0, sp
 801eb00:	9300      	str	r3, [sp, #0]
 801eb02:	f7ff fd0c 	bl	801e51e <__lo0bits>
 801eb06:	e9dd 1200 	ldrd	r1, r2, [sp]
 801eb0a:	b1d0      	cbz	r0, 801eb42 <__d2b+0x7e>
 801eb0c:	f1c0 0320 	rsb	r3, r0, #32
 801eb10:	fa02 f303 	lsl.w	r3, r2, r3
 801eb14:	430b      	orrs	r3, r1
 801eb16:	40c2      	lsrs	r2, r0
 801eb18:	6163      	str	r3, [r4, #20]
 801eb1a:	9201      	str	r2, [sp, #4]
 801eb1c:	9b01      	ldr	r3, [sp, #4]
 801eb1e:	61a3      	str	r3, [r4, #24]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	bf0c      	ite	eq
 801eb24:	2201      	moveq	r2, #1
 801eb26:	2202      	movne	r2, #2
 801eb28:	6122      	str	r2, [r4, #16]
 801eb2a:	b1a5      	cbz	r5, 801eb56 <__d2b+0x92>
 801eb2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801eb30:	4405      	add	r5, r0
 801eb32:	603d      	str	r5, [r7, #0]
 801eb34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801eb38:	6030      	str	r0, [r6, #0]
 801eb3a:	4620      	mov	r0, r4
 801eb3c:	b003      	add	sp, #12
 801eb3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb42:	6161      	str	r1, [r4, #20]
 801eb44:	e7ea      	b.n	801eb1c <__d2b+0x58>
 801eb46:	a801      	add	r0, sp, #4
 801eb48:	f7ff fce9 	bl	801e51e <__lo0bits>
 801eb4c:	9b01      	ldr	r3, [sp, #4]
 801eb4e:	6163      	str	r3, [r4, #20]
 801eb50:	3020      	adds	r0, #32
 801eb52:	2201      	movs	r2, #1
 801eb54:	e7e8      	b.n	801eb28 <__d2b+0x64>
 801eb56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801eb5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801eb5e:	6038      	str	r0, [r7, #0]
 801eb60:	6918      	ldr	r0, [r3, #16]
 801eb62:	f7ff fcbd 	bl	801e4e0 <__hi0bits>
 801eb66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801eb6a:	e7e5      	b.n	801eb38 <__d2b+0x74>
 801eb6c:	080230c8 	.word	0x080230c8
 801eb70:	080230d9 	.word	0x080230d9

0801eb74 <__ratio>:
 801eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb78:	b085      	sub	sp, #20
 801eb7a:	e9cd 1000 	strd	r1, r0, [sp]
 801eb7e:	a902      	add	r1, sp, #8
 801eb80:	f7ff ff56 	bl	801ea30 <__b2d>
 801eb84:	9800      	ldr	r0, [sp, #0]
 801eb86:	a903      	add	r1, sp, #12
 801eb88:	ec55 4b10 	vmov	r4, r5, d0
 801eb8c:	f7ff ff50 	bl	801ea30 <__b2d>
 801eb90:	9b01      	ldr	r3, [sp, #4]
 801eb92:	6919      	ldr	r1, [r3, #16]
 801eb94:	9b00      	ldr	r3, [sp, #0]
 801eb96:	691b      	ldr	r3, [r3, #16]
 801eb98:	1ac9      	subs	r1, r1, r3
 801eb9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801eb9e:	1a9b      	subs	r3, r3, r2
 801eba0:	ec5b ab10 	vmov	sl, fp, d0
 801eba4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	bfce      	itee	gt
 801ebac:	462a      	movgt	r2, r5
 801ebae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ebb2:	465a      	movle	r2, fp
 801ebb4:	462f      	mov	r7, r5
 801ebb6:	46d9      	mov	r9, fp
 801ebb8:	bfcc      	ite	gt
 801ebba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ebbe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801ebc2:	464b      	mov	r3, r9
 801ebc4:	4652      	mov	r2, sl
 801ebc6:	4620      	mov	r0, r4
 801ebc8:	4639      	mov	r1, r7
 801ebca:	f7e1 fe57 	bl	800087c <__aeabi_ddiv>
 801ebce:	ec41 0b10 	vmov	d0, r0, r1
 801ebd2:	b005      	add	sp, #20
 801ebd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ebd8 <__copybits>:
 801ebd8:	3901      	subs	r1, #1
 801ebda:	b570      	push	{r4, r5, r6, lr}
 801ebdc:	1149      	asrs	r1, r1, #5
 801ebde:	6914      	ldr	r4, [r2, #16]
 801ebe0:	3101      	adds	r1, #1
 801ebe2:	f102 0314 	add.w	r3, r2, #20
 801ebe6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ebea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ebee:	1f05      	subs	r5, r0, #4
 801ebf0:	42a3      	cmp	r3, r4
 801ebf2:	d30c      	bcc.n	801ec0e <__copybits+0x36>
 801ebf4:	1aa3      	subs	r3, r4, r2
 801ebf6:	3b11      	subs	r3, #17
 801ebf8:	f023 0303 	bic.w	r3, r3, #3
 801ebfc:	3211      	adds	r2, #17
 801ebfe:	42a2      	cmp	r2, r4
 801ec00:	bf88      	it	hi
 801ec02:	2300      	movhi	r3, #0
 801ec04:	4418      	add	r0, r3
 801ec06:	2300      	movs	r3, #0
 801ec08:	4288      	cmp	r0, r1
 801ec0a:	d305      	bcc.n	801ec18 <__copybits+0x40>
 801ec0c:	bd70      	pop	{r4, r5, r6, pc}
 801ec0e:	f853 6b04 	ldr.w	r6, [r3], #4
 801ec12:	f845 6f04 	str.w	r6, [r5, #4]!
 801ec16:	e7eb      	b.n	801ebf0 <__copybits+0x18>
 801ec18:	f840 3b04 	str.w	r3, [r0], #4
 801ec1c:	e7f4      	b.n	801ec08 <__copybits+0x30>

0801ec1e <__any_on>:
 801ec1e:	f100 0214 	add.w	r2, r0, #20
 801ec22:	6900      	ldr	r0, [r0, #16]
 801ec24:	114b      	asrs	r3, r1, #5
 801ec26:	4298      	cmp	r0, r3
 801ec28:	b510      	push	{r4, lr}
 801ec2a:	db11      	blt.n	801ec50 <__any_on+0x32>
 801ec2c:	dd0a      	ble.n	801ec44 <__any_on+0x26>
 801ec2e:	f011 011f 	ands.w	r1, r1, #31
 801ec32:	d007      	beq.n	801ec44 <__any_on+0x26>
 801ec34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ec38:	fa24 f001 	lsr.w	r0, r4, r1
 801ec3c:	fa00 f101 	lsl.w	r1, r0, r1
 801ec40:	428c      	cmp	r4, r1
 801ec42:	d10b      	bne.n	801ec5c <__any_on+0x3e>
 801ec44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ec48:	4293      	cmp	r3, r2
 801ec4a:	d803      	bhi.n	801ec54 <__any_on+0x36>
 801ec4c:	2000      	movs	r0, #0
 801ec4e:	bd10      	pop	{r4, pc}
 801ec50:	4603      	mov	r3, r0
 801ec52:	e7f7      	b.n	801ec44 <__any_on+0x26>
 801ec54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ec58:	2900      	cmp	r1, #0
 801ec5a:	d0f5      	beq.n	801ec48 <__any_on+0x2a>
 801ec5c:	2001      	movs	r0, #1
 801ec5e:	e7f6      	b.n	801ec4e <__any_on+0x30>

0801ec60 <sulp>:
 801ec60:	b570      	push	{r4, r5, r6, lr}
 801ec62:	4604      	mov	r4, r0
 801ec64:	460d      	mov	r5, r1
 801ec66:	ec45 4b10 	vmov	d0, r4, r5
 801ec6a:	4616      	mov	r6, r2
 801ec6c:	f7ff feba 	bl	801e9e4 <__ulp>
 801ec70:	ec51 0b10 	vmov	r0, r1, d0
 801ec74:	b17e      	cbz	r6, 801ec96 <sulp+0x36>
 801ec76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ec7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	dd09      	ble.n	801ec96 <sulp+0x36>
 801ec82:	051b      	lsls	r3, r3, #20
 801ec84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801ec88:	2400      	movs	r4, #0
 801ec8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801ec8e:	4622      	mov	r2, r4
 801ec90:	462b      	mov	r3, r5
 801ec92:	f7e1 fcc9 	bl	8000628 <__aeabi_dmul>
 801ec96:	ec41 0b10 	vmov	d0, r0, r1
 801ec9a:	bd70      	pop	{r4, r5, r6, pc}
 801ec9c:	0000      	movs	r0, r0
	...

0801eca0 <_strtod_l>:
 801eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eca4:	b09f      	sub	sp, #124	@ 0x7c
 801eca6:	460c      	mov	r4, r1
 801eca8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ecaa:	2200      	movs	r2, #0
 801ecac:	921a      	str	r2, [sp, #104]	@ 0x68
 801ecae:	9005      	str	r0, [sp, #20]
 801ecb0:	f04f 0a00 	mov.w	sl, #0
 801ecb4:	f04f 0b00 	mov.w	fp, #0
 801ecb8:	460a      	mov	r2, r1
 801ecba:	9219      	str	r2, [sp, #100]	@ 0x64
 801ecbc:	7811      	ldrb	r1, [r2, #0]
 801ecbe:	292b      	cmp	r1, #43	@ 0x2b
 801ecc0:	d04a      	beq.n	801ed58 <_strtod_l+0xb8>
 801ecc2:	d838      	bhi.n	801ed36 <_strtod_l+0x96>
 801ecc4:	290d      	cmp	r1, #13
 801ecc6:	d832      	bhi.n	801ed2e <_strtod_l+0x8e>
 801ecc8:	2908      	cmp	r1, #8
 801ecca:	d832      	bhi.n	801ed32 <_strtod_l+0x92>
 801eccc:	2900      	cmp	r1, #0
 801ecce:	d03b      	beq.n	801ed48 <_strtod_l+0xa8>
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ecd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801ecd6:	782a      	ldrb	r2, [r5, #0]
 801ecd8:	2a30      	cmp	r2, #48	@ 0x30
 801ecda:	f040 80b3 	bne.w	801ee44 <_strtod_l+0x1a4>
 801ecde:	786a      	ldrb	r2, [r5, #1]
 801ece0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ece4:	2a58      	cmp	r2, #88	@ 0x58
 801ece6:	d16e      	bne.n	801edc6 <_strtod_l+0x126>
 801ece8:	9302      	str	r3, [sp, #8]
 801ecea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecec:	9301      	str	r3, [sp, #4]
 801ecee:	ab1a      	add	r3, sp, #104	@ 0x68
 801ecf0:	9300      	str	r3, [sp, #0]
 801ecf2:	4a8e      	ldr	r2, [pc, #568]	@ (801ef2c <_strtod_l+0x28c>)
 801ecf4:	9805      	ldr	r0, [sp, #20]
 801ecf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ecf8:	a919      	add	r1, sp, #100	@ 0x64
 801ecfa:	f001 fa33 	bl	8020164 <__gethex>
 801ecfe:	f010 060f 	ands.w	r6, r0, #15
 801ed02:	4604      	mov	r4, r0
 801ed04:	d005      	beq.n	801ed12 <_strtod_l+0x72>
 801ed06:	2e06      	cmp	r6, #6
 801ed08:	d128      	bne.n	801ed5c <_strtod_l+0xbc>
 801ed0a:	3501      	adds	r5, #1
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	9519      	str	r5, [sp, #100]	@ 0x64
 801ed10:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ed12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	f040 858e 	bne.w	801f836 <_strtod_l+0xb96>
 801ed1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed1c:	b1cb      	cbz	r3, 801ed52 <_strtod_l+0xb2>
 801ed1e:	4652      	mov	r2, sl
 801ed20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801ed24:	ec43 2b10 	vmov	d0, r2, r3
 801ed28:	b01f      	add	sp, #124	@ 0x7c
 801ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed2e:	2920      	cmp	r1, #32
 801ed30:	d1ce      	bne.n	801ecd0 <_strtod_l+0x30>
 801ed32:	3201      	adds	r2, #1
 801ed34:	e7c1      	b.n	801ecba <_strtod_l+0x1a>
 801ed36:	292d      	cmp	r1, #45	@ 0x2d
 801ed38:	d1ca      	bne.n	801ecd0 <_strtod_l+0x30>
 801ed3a:	2101      	movs	r1, #1
 801ed3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed3e:	1c51      	adds	r1, r2, #1
 801ed40:	9119      	str	r1, [sp, #100]	@ 0x64
 801ed42:	7852      	ldrb	r2, [r2, #1]
 801ed44:	2a00      	cmp	r2, #0
 801ed46:	d1c5      	bne.n	801ecd4 <_strtod_l+0x34>
 801ed48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed4a:	9419      	str	r4, [sp, #100]	@ 0x64
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	f040 8570 	bne.w	801f832 <_strtod_l+0xb92>
 801ed52:	4652      	mov	r2, sl
 801ed54:	465b      	mov	r3, fp
 801ed56:	e7e5      	b.n	801ed24 <_strtod_l+0x84>
 801ed58:	2100      	movs	r1, #0
 801ed5a:	e7ef      	b.n	801ed3c <_strtod_l+0x9c>
 801ed5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ed5e:	b13a      	cbz	r2, 801ed70 <_strtod_l+0xd0>
 801ed60:	2135      	movs	r1, #53	@ 0x35
 801ed62:	a81c      	add	r0, sp, #112	@ 0x70
 801ed64:	f7ff ff38 	bl	801ebd8 <__copybits>
 801ed68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ed6a:	9805      	ldr	r0, [sp, #20]
 801ed6c:	f7ff fb06 	bl	801e37c <_Bfree>
 801ed70:	3e01      	subs	r6, #1
 801ed72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ed74:	2e04      	cmp	r6, #4
 801ed76:	d806      	bhi.n	801ed86 <_strtod_l+0xe6>
 801ed78:	e8df f006 	tbb	[pc, r6]
 801ed7c:	201d0314 	.word	0x201d0314
 801ed80:	14          	.byte	0x14
 801ed81:	00          	.byte	0x00
 801ed82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801ed86:	05e1      	lsls	r1, r4, #23
 801ed88:	bf48      	it	mi
 801ed8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801ed8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ed92:	0d1b      	lsrs	r3, r3, #20
 801ed94:	051b      	lsls	r3, r3, #20
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	d1bb      	bne.n	801ed12 <_strtod_l+0x72>
 801ed9a:	f7fe fbb1 	bl	801d500 <__errno>
 801ed9e:	2322      	movs	r3, #34	@ 0x22
 801eda0:	6003      	str	r3, [r0, #0]
 801eda2:	e7b6      	b.n	801ed12 <_strtod_l+0x72>
 801eda4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801eda8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801edac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801edb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801edb4:	e7e7      	b.n	801ed86 <_strtod_l+0xe6>
 801edb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801ef34 <_strtod_l+0x294>
 801edba:	e7e4      	b.n	801ed86 <_strtod_l+0xe6>
 801edbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801edc0:	f04f 3aff 	mov.w	sl, #4294967295
 801edc4:	e7df      	b.n	801ed86 <_strtod_l+0xe6>
 801edc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801edc8:	1c5a      	adds	r2, r3, #1
 801edca:	9219      	str	r2, [sp, #100]	@ 0x64
 801edcc:	785b      	ldrb	r3, [r3, #1]
 801edce:	2b30      	cmp	r3, #48	@ 0x30
 801edd0:	d0f9      	beq.n	801edc6 <_strtod_l+0x126>
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d09d      	beq.n	801ed12 <_strtod_l+0x72>
 801edd6:	2301      	movs	r3, #1
 801edd8:	9309      	str	r3, [sp, #36]	@ 0x24
 801edda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801eddc:	930c      	str	r3, [sp, #48]	@ 0x30
 801edde:	2300      	movs	r3, #0
 801ede0:	9308      	str	r3, [sp, #32]
 801ede2:	930a      	str	r3, [sp, #40]	@ 0x28
 801ede4:	461f      	mov	r7, r3
 801ede6:	220a      	movs	r2, #10
 801ede8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801edea:	7805      	ldrb	r5, [r0, #0]
 801edec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801edf0:	b2d9      	uxtb	r1, r3
 801edf2:	2909      	cmp	r1, #9
 801edf4:	d928      	bls.n	801ee48 <_strtod_l+0x1a8>
 801edf6:	494e      	ldr	r1, [pc, #312]	@ (801ef30 <_strtod_l+0x290>)
 801edf8:	2201      	movs	r2, #1
 801edfa:	f001 f8f5 	bl	801ffe8 <strncmp>
 801edfe:	2800      	cmp	r0, #0
 801ee00:	d032      	beq.n	801ee68 <_strtod_l+0x1c8>
 801ee02:	2000      	movs	r0, #0
 801ee04:	462a      	mov	r2, r5
 801ee06:	4681      	mov	r9, r0
 801ee08:	463d      	mov	r5, r7
 801ee0a:	4603      	mov	r3, r0
 801ee0c:	2a65      	cmp	r2, #101	@ 0x65
 801ee0e:	d001      	beq.n	801ee14 <_strtod_l+0x174>
 801ee10:	2a45      	cmp	r2, #69	@ 0x45
 801ee12:	d114      	bne.n	801ee3e <_strtod_l+0x19e>
 801ee14:	b91d      	cbnz	r5, 801ee1e <_strtod_l+0x17e>
 801ee16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee18:	4302      	orrs	r2, r0
 801ee1a:	d095      	beq.n	801ed48 <_strtod_l+0xa8>
 801ee1c:	2500      	movs	r5, #0
 801ee1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801ee20:	1c62      	adds	r2, r4, #1
 801ee22:	9219      	str	r2, [sp, #100]	@ 0x64
 801ee24:	7862      	ldrb	r2, [r4, #1]
 801ee26:	2a2b      	cmp	r2, #43	@ 0x2b
 801ee28:	d077      	beq.n	801ef1a <_strtod_l+0x27a>
 801ee2a:	2a2d      	cmp	r2, #45	@ 0x2d
 801ee2c:	d07b      	beq.n	801ef26 <_strtod_l+0x286>
 801ee2e:	f04f 0c00 	mov.w	ip, #0
 801ee32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801ee36:	2909      	cmp	r1, #9
 801ee38:	f240 8082 	bls.w	801ef40 <_strtod_l+0x2a0>
 801ee3c:	9419      	str	r4, [sp, #100]	@ 0x64
 801ee3e:	f04f 0800 	mov.w	r8, #0
 801ee42:	e0a2      	b.n	801ef8a <_strtod_l+0x2ea>
 801ee44:	2300      	movs	r3, #0
 801ee46:	e7c7      	b.n	801edd8 <_strtod_l+0x138>
 801ee48:	2f08      	cmp	r7, #8
 801ee4a:	bfd5      	itete	le
 801ee4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801ee4e:	9908      	ldrgt	r1, [sp, #32]
 801ee50:	fb02 3301 	mlale	r3, r2, r1, r3
 801ee54:	fb02 3301 	mlagt	r3, r2, r1, r3
 801ee58:	f100 0001 	add.w	r0, r0, #1
 801ee5c:	bfd4      	ite	le
 801ee5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 801ee60:	9308      	strgt	r3, [sp, #32]
 801ee62:	3701      	adds	r7, #1
 801ee64:	9019      	str	r0, [sp, #100]	@ 0x64
 801ee66:	e7bf      	b.n	801ede8 <_strtod_l+0x148>
 801ee68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ee6a:	1c5a      	adds	r2, r3, #1
 801ee6c:	9219      	str	r2, [sp, #100]	@ 0x64
 801ee6e:	785a      	ldrb	r2, [r3, #1]
 801ee70:	b37f      	cbz	r7, 801eed2 <_strtod_l+0x232>
 801ee72:	4681      	mov	r9, r0
 801ee74:	463d      	mov	r5, r7
 801ee76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801ee7a:	2b09      	cmp	r3, #9
 801ee7c:	d912      	bls.n	801eea4 <_strtod_l+0x204>
 801ee7e:	2301      	movs	r3, #1
 801ee80:	e7c4      	b.n	801ee0c <_strtod_l+0x16c>
 801ee82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ee84:	1c5a      	adds	r2, r3, #1
 801ee86:	9219      	str	r2, [sp, #100]	@ 0x64
 801ee88:	785a      	ldrb	r2, [r3, #1]
 801ee8a:	3001      	adds	r0, #1
 801ee8c:	2a30      	cmp	r2, #48	@ 0x30
 801ee8e:	d0f8      	beq.n	801ee82 <_strtod_l+0x1e2>
 801ee90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801ee94:	2b08      	cmp	r3, #8
 801ee96:	f200 84d3 	bhi.w	801f840 <_strtod_l+0xba0>
 801ee9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ee9c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee9e:	4681      	mov	r9, r0
 801eea0:	2000      	movs	r0, #0
 801eea2:	4605      	mov	r5, r0
 801eea4:	3a30      	subs	r2, #48	@ 0x30
 801eea6:	f100 0301 	add.w	r3, r0, #1
 801eeaa:	d02a      	beq.n	801ef02 <_strtod_l+0x262>
 801eeac:	4499      	add	r9, r3
 801eeae:	eb00 0c05 	add.w	ip, r0, r5
 801eeb2:	462b      	mov	r3, r5
 801eeb4:	210a      	movs	r1, #10
 801eeb6:	4563      	cmp	r3, ip
 801eeb8:	d10d      	bne.n	801eed6 <_strtod_l+0x236>
 801eeba:	1c69      	adds	r1, r5, #1
 801eebc:	4401      	add	r1, r0
 801eebe:	4428      	add	r0, r5
 801eec0:	2808      	cmp	r0, #8
 801eec2:	dc16      	bgt.n	801eef2 <_strtod_l+0x252>
 801eec4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801eec6:	230a      	movs	r3, #10
 801eec8:	fb03 2300 	mla	r3, r3, r0, r2
 801eecc:	930a      	str	r3, [sp, #40]	@ 0x28
 801eece:	2300      	movs	r3, #0
 801eed0:	e018      	b.n	801ef04 <_strtod_l+0x264>
 801eed2:	4638      	mov	r0, r7
 801eed4:	e7da      	b.n	801ee8c <_strtod_l+0x1ec>
 801eed6:	2b08      	cmp	r3, #8
 801eed8:	f103 0301 	add.w	r3, r3, #1
 801eedc:	dc03      	bgt.n	801eee6 <_strtod_l+0x246>
 801eede:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801eee0:	434e      	muls	r6, r1
 801eee2:	960a      	str	r6, [sp, #40]	@ 0x28
 801eee4:	e7e7      	b.n	801eeb6 <_strtod_l+0x216>
 801eee6:	2b10      	cmp	r3, #16
 801eee8:	bfde      	ittt	le
 801eeea:	9e08      	ldrle	r6, [sp, #32]
 801eeec:	434e      	mulle	r6, r1
 801eeee:	9608      	strle	r6, [sp, #32]
 801eef0:	e7e1      	b.n	801eeb6 <_strtod_l+0x216>
 801eef2:	280f      	cmp	r0, #15
 801eef4:	dceb      	bgt.n	801eece <_strtod_l+0x22e>
 801eef6:	9808      	ldr	r0, [sp, #32]
 801eef8:	230a      	movs	r3, #10
 801eefa:	fb03 2300 	mla	r3, r3, r0, r2
 801eefe:	9308      	str	r3, [sp, #32]
 801ef00:	e7e5      	b.n	801eece <_strtod_l+0x22e>
 801ef02:	4629      	mov	r1, r5
 801ef04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ef06:	1c50      	adds	r0, r2, #1
 801ef08:	9019      	str	r0, [sp, #100]	@ 0x64
 801ef0a:	7852      	ldrb	r2, [r2, #1]
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	460d      	mov	r5, r1
 801ef10:	e7b1      	b.n	801ee76 <_strtod_l+0x1d6>
 801ef12:	f04f 0900 	mov.w	r9, #0
 801ef16:	2301      	movs	r3, #1
 801ef18:	e77d      	b.n	801ee16 <_strtod_l+0x176>
 801ef1a:	f04f 0c00 	mov.w	ip, #0
 801ef1e:	1ca2      	adds	r2, r4, #2
 801ef20:	9219      	str	r2, [sp, #100]	@ 0x64
 801ef22:	78a2      	ldrb	r2, [r4, #2]
 801ef24:	e785      	b.n	801ee32 <_strtod_l+0x192>
 801ef26:	f04f 0c01 	mov.w	ip, #1
 801ef2a:	e7f8      	b.n	801ef1e <_strtod_l+0x27e>
 801ef2c:	08023248 	.word	0x08023248
 801ef30:	08023230 	.word	0x08023230
 801ef34:	7ff00000 	.word	0x7ff00000
 801ef38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ef3a:	1c51      	adds	r1, r2, #1
 801ef3c:	9119      	str	r1, [sp, #100]	@ 0x64
 801ef3e:	7852      	ldrb	r2, [r2, #1]
 801ef40:	2a30      	cmp	r2, #48	@ 0x30
 801ef42:	d0f9      	beq.n	801ef38 <_strtod_l+0x298>
 801ef44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801ef48:	2908      	cmp	r1, #8
 801ef4a:	f63f af78 	bhi.w	801ee3e <_strtod_l+0x19e>
 801ef4e:	3a30      	subs	r2, #48	@ 0x30
 801ef50:	920e      	str	r2, [sp, #56]	@ 0x38
 801ef52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ef54:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ef56:	f04f 080a 	mov.w	r8, #10
 801ef5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ef5c:	1c56      	adds	r6, r2, #1
 801ef5e:	9619      	str	r6, [sp, #100]	@ 0x64
 801ef60:	7852      	ldrb	r2, [r2, #1]
 801ef62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ef66:	f1be 0f09 	cmp.w	lr, #9
 801ef6a:	d939      	bls.n	801efe0 <_strtod_l+0x340>
 801ef6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ef6e:	1a76      	subs	r6, r6, r1
 801ef70:	2e08      	cmp	r6, #8
 801ef72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801ef76:	dc03      	bgt.n	801ef80 <_strtod_l+0x2e0>
 801ef78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ef7a:	4588      	cmp	r8, r1
 801ef7c:	bfa8      	it	ge
 801ef7e:	4688      	movge	r8, r1
 801ef80:	f1bc 0f00 	cmp.w	ip, #0
 801ef84:	d001      	beq.n	801ef8a <_strtod_l+0x2ea>
 801ef86:	f1c8 0800 	rsb	r8, r8, #0
 801ef8a:	2d00      	cmp	r5, #0
 801ef8c:	d14e      	bne.n	801f02c <_strtod_l+0x38c>
 801ef8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ef90:	4308      	orrs	r0, r1
 801ef92:	f47f aebe 	bne.w	801ed12 <_strtod_l+0x72>
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	f47f aed6 	bne.w	801ed48 <_strtod_l+0xa8>
 801ef9c:	2a69      	cmp	r2, #105	@ 0x69
 801ef9e:	d028      	beq.n	801eff2 <_strtod_l+0x352>
 801efa0:	dc25      	bgt.n	801efee <_strtod_l+0x34e>
 801efa2:	2a49      	cmp	r2, #73	@ 0x49
 801efa4:	d025      	beq.n	801eff2 <_strtod_l+0x352>
 801efa6:	2a4e      	cmp	r2, #78	@ 0x4e
 801efa8:	f47f aece 	bne.w	801ed48 <_strtod_l+0xa8>
 801efac:	499b      	ldr	r1, [pc, #620]	@ (801f21c <_strtod_l+0x57c>)
 801efae:	a819      	add	r0, sp, #100	@ 0x64
 801efb0:	f001 fafa 	bl	80205a8 <__match>
 801efb4:	2800      	cmp	r0, #0
 801efb6:	f43f aec7 	beq.w	801ed48 <_strtod_l+0xa8>
 801efba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801efbc:	781b      	ldrb	r3, [r3, #0]
 801efbe:	2b28      	cmp	r3, #40	@ 0x28
 801efc0:	d12e      	bne.n	801f020 <_strtod_l+0x380>
 801efc2:	4997      	ldr	r1, [pc, #604]	@ (801f220 <_strtod_l+0x580>)
 801efc4:	aa1c      	add	r2, sp, #112	@ 0x70
 801efc6:	a819      	add	r0, sp, #100	@ 0x64
 801efc8:	f001 fb02 	bl	80205d0 <__hexnan>
 801efcc:	2805      	cmp	r0, #5
 801efce:	d127      	bne.n	801f020 <_strtod_l+0x380>
 801efd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801efd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801efd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801efda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801efde:	e698      	b.n	801ed12 <_strtod_l+0x72>
 801efe0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801efe2:	fb08 2101 	mla	r1, r8, r1, r2
 801efe6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801efea:	920e      	str	r2, [sp, #56]	@ 0x38
 801efec:	e7b5      	b.n	801ef5a <_strtod_l+0x2ba>
 801efee:	2a6e      	cmp	r2, #110	@ 0x6e
 801eff0:	e7da      	b.n	801efa8 <_strtod_l+0x308>
 801eff2:	498c      	ldr	r1, [pc, #560]	@ (801f224 <_strtod_l+0x584>)
 801eff4:	a819      	add	r0, sp, #100	@ 0x64
 801eff6:	f001 fad7 	bl	80205a8 <__match>
 801effa:	2800      	cmp	r0, #0
 801effc:	f43f aea4 	beq.w	801ed48 <_strtod_l+0xa8>
 801f000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f002:	4989      	ldr	r1, [pc, #548]	@ (801f228 <_strtod_l+0x588>)
 801f004:	3b01      	subs	r3, #1
 801f006:	a819      	add	r0, sp, #100	@ 0x64
 801f008:	9319      	str	r3, [sp, #100]	@ 0x64
 801f00a:	f001 facd 	bl	80205a8 <__match>
 801f00e:	b910      	cbnz	r0, 801f016 <_strtod_l+0x376>
 801f010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f012:	3301      	adds	r3, #1
 801f014:	9319      	str	r3, [sp, #100]	@ 0x64
 801f016:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801f238 <_strtod_l+0x598>
 801f01a:	f04f 0a00 	mov.w	sl, #0
 801f01e:	e678      	b.n	801ed12 <_strtod_l+0x72>
 801f020:	4882      	ldr	r0, [pc, #520]	@ (801f22c <_strtod_l+0x58c>)
 801f022:	f001 f815 	bl	8020050 <nan>
 801f026:	ec5b ab10 	vmov	sl, fp, d0
 801f02a:	e672      	b.n	801ed12 <_strtod_l+0x72>
 801f02c:	eba8 0309 	sub.w	r3, r8, r9
 801f030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f032:	9309      	str	r3, [sp, #36]	@ 0x24
 801f034:	2f00      	cmp	r7, #0
 801f036:	bf08      	it	eq
 801f038:	462f      	moveq	r7, r5
 801f03a:	2d10      	cmp	r5, #16
 801f03c:	462c      	mov	r4, r5
 801f03e:	bfa8      	it	ge
 801f040:	2410      	movge	r4, #16
 801f042:	f7e1 fa77 	bl	8000534 <__aeabi_ui2d>
 801f046:	2d09      	cmp	r5, #9
 801f048:	4682      	mov	sl, r0
 801f04a:	468b      	mov	fp, r1
 801f04c:	dc13      	bgt.n	801f076 <_strtod_l+0x3d6>
 801f04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f050:	2b00      	cmp	r3, #0
 801f052:	f43f ae5e 	beq.w	801ed12 <_strtod_l+0x72>
 801f056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f058:	dd78      	ble.n	801f14c <_strtod_l+0x4ac>
 801f05a:	2b16      	cmp	r3, #22
 801f05c:	dc5f      	bgt.n	801f11e <_strtod_l+0x47e>
 801f05e:	4974      	ldr	r1, [pc, #464]	@ (801f230 <_strtod_l+0x590>)
 801f060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f064:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f068:	4652      	mov	r2, sl
 801f06a:	465b      	mov	r3, fp
 801f06c:	f7e1 fadc 	bl	8000628 <__aeabi_dmul>
 801f070:	4682      	mov	sl, r0
 801f072:	468b      	mov	fp, r1
 801f074:	e64d      	b.n	801ed12 <_strtod_l+0x72>
 801f076:	4b6e      	ldr	r3, [pc, #440]	@ (801f230 <_strtod_l+0x590>)
 801f078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f07c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801f080:	f7e1 fad2 	bl	8000628 <__aeabi_dmul>
 801f084:	4682      	mov	sl, r0
 801f086:	9808      	ldr	r0, [sp, #32]
 801f088:	468b      	mov	fp, r1
 801f08a:	f7e1 fa53 	bl	8000534 <__aeabi_ui2d>
 801f08e:	4602      	mov	r2, r0
 801f090:	460b      	mov	r3, r1
 801f092:	4650      	mov	r0, sl
 801f094:	4659      	mov	r1, fp
 801f096:	f7e1 f911 	bl	80002bc <__adddf3>
 801f09a:	2d0f      	cmp	r5, #15
 801f09c:	4682      	mov	sl, r0
 801f09e:	468b      	mov	fp, r1
 801f0a0:	ddd5      	ble.n	801f04e <_strtod_l+0x3ae>
 801f0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0a4:	1b2c      	subs	r4, r5, r4
 801f0a6:	441c      	add	r4, r3
 801f0a8:	2c00      	cmp	r4, #0
 801f0aa:	f340 8096 	ble.w	801f1da <_strtod_l+0x53a>
 801f0ae:	f014 030f 	ands.w	r3, r4, #15
 801f0b2:	d00a      	beq.n	801f0ca <_strtod_l+0x42a>
 801f0b4:	495e      	ldr	r1, [pc, #376]	@ (801f230 <_strtod_l+0x590>)
 801f0b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f0ba:	4652      	mov	r2, sl
 801f0bc:	465b      	mov	r3, fp
 801f0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0c2:	f7e1 fab1 	bl	8000628 <__aeabi_dmul>
 801f0c6:	4682      	mov	sl, r0
 801f0c8:	468b      	mov	fp, r1
 801f0ca:	f034 040f 	bics.w	r4, r4, #15
 801f0ce:	d073      	beq.n	801f1b8 <_strtod_l+0x518>
 801f0d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801f0d4:	dd48      	ble.n	801f168 <_strtod_l+0x4c8>
 801f0d6:	2400      	movs	r4, #0
 801f0d8:	46a0      	mov	r8, r4
 801f0da:	940a      	str	r4, [sp, #40]	@ 0x28
 801f0dc:	46a1      	mov	r9, r4
 801f0de:	9a05      	ldr	r2, [sp, #20]
 801f0e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801f238 <_strtod_l+0x598>
 801f0e4:	2322      	movs	r3, #34	@ 0x22
 801f0e6:	6013      	str	r3, [r2, #0]
 801f0e8:	f04f 0a00 	mov.w	sl, #0
 801f0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	f43f ae0f 	beq.w	801ed12 <_strtod_l+0x72>
 801f0f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f0f6:	9805      	ldr	r0, [sp, #20]
 801f0f8:	f7ff f940 	bl	801e37c <_Bfree>
 801f0fc:	9805      	ldr	r0, [sp, #20]
 801f0fe:	4649      	mov	r1, r9
 801f100:	f7ff f93c 	bl	801e37c <_Bfree>
 801f104:	9805      	ldr	r0, [sp, #20]
 801f106:	4641      	mov	r1, r8
 801f108:	f7ff f938 	bl	801e37c <_Bfree>
 801f10c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f10e:	9805      	ldr	r0, [sp, #20]
 801f110:	f7ff f934 	bl	801e37c <_Bfree>
 801f114:	9805      	ldr	r0, [sp, #20]
 801f116:	4621      	mov	r1, r4
 801f118:	f7ff f930 	bl	801e37c <_Bfree>
 801f11c:	e5f9      	b.n	801ed12 <_strtod_l+0x72>
 801f11e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f120:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801f124:	4293      	cmp	r3, r2
 801f126:	dbbc      	blt.n	801f0a2 <_strtod_l+0x402>
 801f128:	4c41      	ldr	r4, [pc, #260]	@ (801f230 <_strtod_l+0x590>)
 801f12a:	f1c5 050f 	rsb	r5, r5, #15
 801f12e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801f132:	4652      	mov	r2, sl
 801f134:	465b      	mov	r3, fp
 801f136:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f13a:	f7e1 fa75 	bl	8000628 <__aeabi_dmul>
 801f13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f140:	1b5d      	subs	r5, r3, r5
 801f142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801f146:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f14a:	e78f      	b.n	801f06c <_strtod_l+0x3cc>
 801f14c:	3316      	adds	r3, #22
 801f14e:	dba8      	blt.n	801f0a2 <_strtod_l+0x402>
 801f150:	4b37      	ldr	r3, [pc, #220]	@ (801f230 <_strtod_l+0x590>)
 801f152:	eba9 0808 	sub.w	r8, r9, r8
 801f156:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801f15a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801f15e:	4650      	mov	r0, sl
 801f160:	4659      	mov	r1, fp
 801f162:	f7e1 fb8b 	bl	800087c <__aeabi_ddiv>
 801f166:	e783      	b.n	801f070 <_strtod_l+0x3d0>
 801f168:	4b32      	ldr	r3, [pc, #200]	@ (801f234 <_strtod_l+0x594>)
 801f16a:	9308      	str	r3, [sp, #32]
 801f16c:	2300      	movs	r3, #0
 801f16e:	1124      	asrs	r4, r4, #4
 801f170:	4650      	mov	r0, sl
 801f172:	4659      	mov	r1, fp
 801f174:	461e      	mov	r6, r3
 801f176:	2c01      	cmp	r4, #1
 801f178:	dc21      	bgt.n	801f1be <_strtod_l+0x51e>
 801f17a:	b10b      	cbz	r3, 801f180 <_strtod_l+0x4e0>
 801f17c:	4682      	mov	sl, r0
 801f17e:	468b      	mov	fp, r1
 801f180:	492c      	ldr	r1, [pc, #176]	@ (801f234 <_strtod_l+0x594>)
 801f182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801f186:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801f18a:	4652      	mov	r2, sl
 801f18c:	465b      	mov	r3, fp
 801f18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f192:	f7e1 fa49 	bl	8000628 <__aeabi_dmul>
 801f196:	4b28      	ldr	r3, [pc, #160]	@ (801f238 <_strtod_l+0x598>)
 801f198:	460a      	mov	r2, r1
 801f19a:	400b      	ands	r3, r1
 801f19c:	4927      	ldr	r1, [pc, #156]	@ (801f23c <_strtod_l+0x59c>)
 801f19e:	428b      	cmp	r3, r1
 801f1a0:	4682      	mov	sl, r0
 801f1a2:	d898      	bhi.n	801f0d6 <_strtod_l+0x436>
 801f1a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801f1a8:	428b      	cmp	r3, r1
 801f1aa:	bf86      	itte	hi
 801f1ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801f240 <_strtod_l+0x5a0>
 801f1b0:	f04f 3aff 	movhi.w	sl, #4294967295
 801f1b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	9308      	str	r3, [sp, #32]
 801f1bc:	e07a      	b.n	801f2b4 <_strtod_l+0x614>
 801f1be:	07e2      	lsls	r2, r4, #31
 801f1c0:	d505      	bpl.n	801f1ce <_strtod_l+0x52e>
 801f1c2:	9b08      	ldr	r3, [sp, #32]
 801f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1c8:	f7e1 fa2e 	bl	8000628 <__aeabi_dmul>
 801f1cc:	2301      	movs	r3, #1
 801f1ce:	9a08      	ldr	r2, [sp, #32]
 801f1d0:	3208      	adds	r2, #8
 801f1d2:	3601      	adds	r6, #1
 801f1d4:	1064      	asrs	r4, r4, #1
 801f1d6:	9208      	str	r2, [sp, #32]
 801f1d8:	e7cd      	b.n	801f176 <_strtod_l+0x4d6>
 801f1da:	d0ed      	beq.n	801f1b8 <_strtod_l+0x518>
 801f1dc:	4264      	negs	r4, r4
 801f1de:	f014 020f 	ands.w	r2, r4, #15
 801f1e2:	d00a      	beq.n	801f1fa <_strtod_l+0x55a>
 801f1e4:	4b12      	ldr	r3, [pc, #72]	@ (801f230 <_strtod_l+0x590>)
 801f1e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f1ea:	4650      	mov	r0, sl
 801f1ec:	4659      	mov	r1, fp
 801f1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1f2:	f7e1 fb43 	bl	800087c <__aeabi_ddiv>
 801f1f6:	4682      	mov	sl, r0
 801f1f8:	468b      	mov	fp, r1
 801f1fa:	1124      	asrs	r4, r4, #4
 801f1fc:	d0dc      	beq.n	801f1b8 <_strtod_l+0x518>
 801f1fe:	2c1f      	cmp	r4, #31
 801f200:	dd20      	ble.n	801f244 <_strtod_l+0x5a4>
 801f202:	2400      	movs	r4, #0
 801f204:	46a0      	mov	r8, r4
 801f206:	940a      	str	r4, [sp, #40]	@ 0x28
 801f208:	46a1      	mov	r9, r4
 801f20a:	9a05      	ldr	r2, [sp, #20]
 801f20c:	2322      	movs	r3, #34	@ 0x22
 801f20e:	f04f 0a00 	mov.w	sl, #0
 801f212:	f04f 0b00 	mov.w	fp, #0
 801f216:	6013      	str	r3, [r2, #0]
 801f218:	e768      	b.n	801f0ec <_strtod_l+0x44c>
 801f21a:	bf00      	nop
 801f21c:	08022f8a 	.word	0x08022f8a
 801f220:	08023234 	.word	0x08023234
 801f224:	08022f82 	.word	0x08022f82
 801f228:	08023066 	.word	0x08023066
 801f22c:	08023062 	.word	0x08023062
 801f230:	08023168 	.word	0x08023168
 801f234:	08023140 	.word	0x08023140
 801f238:	7ff00000 	.word	0x7ff00000
 801f23c:	7ca00000 	.word	0x7ca00000
 801f240:	7fefffff 	.word	0x7fefffff
 801f244:	f014 0310 	ands.w	r3, r4, #16
 801f248:	bf18      	it	ne
 801f24a:	236a      	movne	r3, #106	@ 0x6a
 801f24c:	4ea9      	ldr	r6, [pc, #676]	@ (801f4f4 <_strtod_l+0x854>)
 801f24e:	9308      	str	r3, [sp, #32]
 801f250:	4650      	mov	r0, sl
 801f252:	4659      	mov	r1, fp
 801f254:	2300      	movs	r3, #0
 801f256:	07e2      	lsls	r2, r4, #31
 801f258:	d504      	bpl.n	801f264 <_strtod_l+0x5c4>
 801f25a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f25e:	f7e1 f9e3 	bl	8000628 <__aeabi_dmul>
 801f262:	2301      	movs	r3, #1
 801f264:	1064      	asrs	r4, r4, #1
 801f266:	f106 0608 	add.w	r6, r6, #8
 801f26a:	d1f4      	bne.n	801f256 <_strtod_l+0x5b6>
 801f26c:	b10b      	cbz	r3, 801f272 <_strtod_l+0x5d2>
 801f26e:	4682      	mov	sl, r0
 801f270:	468b      	mov	fp, r1
 801f272:	9b08      	ldr	r3, [sp, #32]
 801f274:	b1b3      	cbz	r3, 801f2a4 <_strtod_l+0x604>
 801f276:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801f27a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801f27e:	2b00      	cmp	r3, #0
 801f280:	4659      	mov	r1, fp
 801f282:	dd0f      	ble.n	801f2a4 <_strtod_l+0x604>
 801f284:	2b1f      	cmp	r3, #31
 801f286:	dd55      	ble.n	801f334 <_strtod_l+0x694>
 801f288:	2b34      	cmp	r3, #52	@ 0x34
 801f28a:	bfde      	ittt	le
 801f28c:	f04f 33ff 	movle.w	r3, #4294967295
 801f290:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801f294:	4093      	lslle	r3, r2
 801f296:	f04f 0a00 	mov.w	sl, #0
 801f29a:	bfcc      	ite	gt
 801f29c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801f2a0:	ea03 0b01 	andle.w	fp, r3, r1
 801f2a4:	2200      	movs	r2, #0
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	4650      	mov	r0, sl
 801f2aa:	4659      	mov	r1, fp
 801f2ac:	f7e1 fc24 	bl	8000af8 <__aeabi_dcmpeq>
 801f2b0:	2800      	cmp	r0, #0
 801f2b2:	d1a6      	bne.n	801f202 <_strtod_l+0x562>
 801f2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2b6:	9300      	str	r3, [sp, #0]
 801f2b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f2ba:	9805      	ldr	r0, [sp, #20]
 801f2bc:	462b      	mov	r3, r5
 801f2be:	463a      	mov	r2, r7
 801f2c0:	f7ff f8c4 	bl	801e44c <__s2b>
 801f2c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801f2c6:	2800      	cmp	r0, #0
 801f2c8:	f43f af05 	beq.w	801f0d6 <_strtod_l+0x436>
 801f2cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f2ce:	2a00      	cmp	r2, #0
 801f2d0:	eba9 0308 	sub.w	r3, r9, r8
 801f2d4:	bfa8      	it	ge
 801f2d6:	2300      	movge	r3, #0
 801f2d8:	9312      	str	r3, [sp, #72]	@ 0x48
 801f2da:	2400      	movs	r4, #0
 801f2dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801f2e0:	9316      	str	r3, [sp, #88]	@ 0x58
 801f2e2:	46a0      	mov	r8, r4
 801f2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2e6:	9805      	ldr	r0, [sp, #20]
 801f2e8:	6859      	ldr	r1, [r3, #4]
 801f2ea:	f7ff f807 	bl	801e2fc <_Balloc>
 801f2ee:	4681      	mov	r9, r0
 801f2f0:	2800      	cmp	r0, #0
 801f2f2:	f43f aef4 	beq.w	801f0de <_strtod_l+0x43e>
 801f2f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2f8:	691a      	ldr	r2, [r3, #16]
 801f2fa:	3202      	adds	r2, #2
 801f2fc:	f103 010c 	add.w	r1, r3, #12
 801f300:	0092      	lsls	r2, r2, #2
 801f302:	300c      	adds	r0, #12
 801f304:	f7fe f931 	bl	801d56a <memcpy>
 801f308:	ec4b ab10 	vmov	d0, sl, fp
 801f30c:	9805      	ldr	r0, [sp, #20]
 801f30e:	aa1c      	add	r2, sp, #112	@ 0x70
 801f310:	a91b      	add	r1, sp, #108	@ 0x6c
 801f312:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801f316:	f7ff fbd5 	bl	801eac4 <__d2b>
 801f31a:	901a      	str	r0, [sp, #104]	@ 0x68
 801f31c:	2800      	cmp	r0, #0
 801f31e:	f43f aede 	beq.w	801f0de <_strtod_l+0x43e>
 801f322:	9805      	ldr	r0, [sp, #20]
 801f324:	2101      	movs	r1, #1
 801f326:	f7ff f927 	bl	801e578 <__i2b>
 801f32a:	4680      	mov	r8, r0
 801f32c:	b948      	cbnz	r0, 801f342 <_strtod_l+0x6a2>
 801f32e:	f04f 0800 	mov.w	r8, #0
 801f332:	e6d4      	b.n	801f0de <_strtod_l+0x43e>
 801f334:	f04f 32ff 	mov.w	r2, #4294967295
 801f338:	fa02 f303 	lsl.w	r3, r2, r3
 801f33c:	ea03 0a0a 	and.w	sl, r3, sl
 801f340:	e7b0      	b.n	801f2a4 <_strtod_l+0x604>
 801f342:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f344:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f346:	2d00      	cmp	r5, #0
 801f348:	bfab      	itete	ge
 801f34a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801f34c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801f34e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801f350:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801f352:	bfac      	ite	ge
 801f354:	18ef      	addge	r7, r5, r3
 801f356:	1b5e      	sublt	r6, r3, r5
 801f358:	9b08      	ldr	r3, [sp, #32]
 801f35a:	1aed      	subs	r5, r5, r3
 801f35c:	4415      	add	r5, r2
 801f35e:	4b66      	ldr	r3, [pc, #408]	@ (801f4f8 <_strtod_l+0x858>)
 801f360:	3d01      	subs	r5, #1
 801f362:	429d      	cmp	r5, r3
 801f364:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801f368:	da50      	bge.n	801f40c <_strtod_l+0x76c>
 801f36a:	1b5b      	subs	r3, r3, r5
 801f36c:	2b1f      	cmp	r3, #31
 801f36e:	eba2 0203 	sub.w	r2, r2, r3
 801f372:	f04f 0101 	mov.w	r1, #1
 801f376:	dc3d      	bgt.n	801f3f4 <_strtod_l+0x754>
 801f378:	fa01 f303 	lsl.w	r3, r1, r3
 801f37c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f37e:	2300      	movs	r3, #0
 801f380:	9310      	str	r3, [sp, #64]	@ 0x40
 801f382:	18bd      	adds	r5, r7, r2
 801f384:	9b08      	ldr	r3, [sp, #32]
 801f386:	42af      	cmp	r7, r5
 801f388:	4416      	add	r6, r2
 801f38a:	441e      	add	r6, r3
 801f38c:	463b      	mov	r3, r7
 801f38e:	bfa8      	it	ge
 801f390:	462b      	movge	r3, r5
 801f392:	42b3      	cmp	r3, r6
 801f394:	bfa8      	it	ge
 801f396:	4633      	movge	r3, r6
 801f398:	2b00      	cmp	r3, #0
 801f39a:	bfc2      	ittt	gt
 801f39c:	1aed      	subgt	r5, r5, r3
 801f39e:	1af6      	subgt	r6, r6, r3
 801f3a0:	1aff      	subgt	r7, r7, r3
 801f3a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	dd16      	ble.n	801f3d6 <_strtod_l+0x736>
 801f3a8:	4641      	mov	r1, r8
 801f3aa:	9805      	ldr	r0, [sp, #20]
 801f3ac:	461a      	mov	r2, r3
 801f3ae:	f7ff f9a3 	bl	801e6f8 <__pow5mult>
 801f3b2:	4680      	mov	r8, r0
 801f3b4:	2800      	cmp	r0, #0
 801f3b6:	d0ba      	beq.n	801f32e <_strtod_l+0x68e>
 801f3b8:	4601      	mov	r1, r0
 801f3ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f3bc:	9805      	ldr	r0, [sp, #20]
 801f3be:	f7ff f8f1 	bl	801e5a4 <__multiply>
 801f3c2:	900e      	str	r0, [sp, #56]	@ 0x38
 801f3c4:	2800      	cmp	r0, #0
 801f3c6:	f43f ae8a 	beq.w	801f0de <_strtod_l+0x43e>
 801f3ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f3cc:	9805      	ldr	r0, [sp, #20]
 801f3ce:	f7fe ffd5 	bl	801e37c <_Bfree>
 801f3d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3d4:	931a      	str	r3, [sp, #104]	@ 0x68
 801f3d6:	2d00      	cmp	r5, #0
 801f3d8:	dc1d      	bgt.n	801f416 <_strtod_l+0x776>
 801f3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	dd23      	ble.n	801f428 <_strtod_l+0x788>
 801f3e0:	4649      	mov	r1, r9
 801f3e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f3e4:	9805      	ldr	r0, [sp, #20]
 801f3e6:	f7ff f987 	bl	801e6f8 <__pow5mult>
 801f3ea:	4681      	mov	r9, r0
 801f3ec:	b9e0      	cbnz	r0, 801f428 <_strtod_l+0x788>
 801f3ee:	f04f 0900 	mov.w	r9, #0
 801f3f2:	e674      	b.n	801f0de <_strtod_l+0x43e>
 801f3f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801f3f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801f3fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801f400:	35e2      	adds	r5, #226	@ 0xe2
 801f402:	fa01 f305 	lsl.w	r3, r1, r5
 801f406:	9310      	str	r3, [sp, #64]	@ 0x40
 801f408:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f40a:	e7ba      	b.n	801f382 <_strtod_l+0x6e2>
 801f40c:	2300      	movs	r3, #0
 801f40e:	9310      	str	r3, [sp, #64]	@ 0x40
 801f410:	2301      	movs	r3, #1
 801f412:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f414:	e7b5      	b.n	801f382 <_strtod_l+0x6e2>
 801f416:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f418:	9805      	ldr	r0, [sp, #20]
 801f41a:	462a      	mov	r2, r5
 801f41c:	f7ff f9c6 	bl	801e7ac <__lshift>
 801f420:	901a      	str	r0, [sp, #104]	@ 0x68
 801f422:	2800      	cmp	r0, #0
 801f424:	d1d9      	bne.n	801f3da <_strtod_l+0x73a>
 801f426:	e65a      	b.n	801f0de <_strtod_l+0x43e>
 801f428:	2e00      	cmp	r6, #0
 801f42a:	dd07      	ble.n	801f43c <_strtod_l+0x79c>
 801f42c:	4649      	mov	r1, r9
 801f42e:	9805      	ldr	r0, [sp, #20]
 801f430:	4632      	mov	r2, r6
 801f432:	f7ff f9bb 	bl	801e7ac <__lshift>
 801f436:	4681      	mov	r9, r0
 801f438:	2800      	cmp	r0, #0
 801f43a:	d0d8      	beq.n	801f3ee <_strtod_l+0x74e>
 801f43c:	2f00      	cmp	r7, #0
 801f43e:	dd08      	ble.n	801f452 <_strtod_l+0x7b2>
 801f440:	4641      	mov	r1, r8
 801f442:	9805      	ldr	r0, [sp, #20]
 801f444:	463a      	mov	r2, r7
 801f446:	f7ff f9b1 	bl	801e7ac <__lshift>
 801f44a:	4680      	mov	r8, r0
 801f44c:	2800      	cmp	r0, #0
 801f44e:	f43f ae46 	beq.w	801f0de <_strtod_l+0x43e>
 801f452:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f454:	9805      	ldr	r0, [sp, #20]
 801f456:	464a      	mov	r2, r9
 801f458:	f7ff fa30 	bl	801e8bc <__mdiff>
 801f45c:	4604      	mov	r4, r0
 801f45e:	2800      	cmp	r0, #0
 801f460:	f43f ae3d 	beq.w	801f0de <_strtod_l+0x43e>
 801f464:	68c3      	ldr	r3, [r0, #12]
 801f466:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f468:	2300      	movs	r3, #0
 801f46a:	60c3      	str	r3, [r0, #12]
 801f46c:	4641      	mov	r1, r8
 801f46e:	f7ff fa09 	bl	801e884 <__mcmp>
 801f472:	2800      	cmp	r0, #0
 801f474:	da46      	bge.n	801f504 <_strtod_l+0x864>
 801f476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f478:	ea53 030a 	orrs.w	r3, r3, sl
 801f47c:	d16c      	bne.n	801f558 <_strtod_l+0x8b8>
 801f47e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f482:	2b00      	cmp	r3, #0
 801f484:	d168      	bne.n	801f558 <_strtod_l+0x8b8>
 801f486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f48a:	0d1b      	lsrs	r3, r3, #20
 801f48c:	051b      	lsls	r3, r3, #20
 801f48e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801f492:	d961      	bls.n	801f558 <_strtod_l+0x8b8>
 801f494:	6963      	ldr	r3, [r4, #20]
 801f496:	b913      	cbnz	r3, 801f49e <_strtod_l+0x7fe>
 801f498:	6923      	ldr	r3, [r4, #16]
 801f49a:	2b01      	cmp	r3, #1
 801f49c:	dd5c      	ble.n	801f558 <_strtod_l+0x8b8>
 801f49e:	4621      	mov	r1, r4
 801f4a0:	2201      	movs	r2, #1
 801f4a2:	9805      	ldr	r0, [sp, #20]
 801f4a4:	f7ff f982 	bl	801e7ac <__lshift>
 801f4a8:	4641      	mov	r1, r8
 801f4aa:	4604      	mov	r4, r0
 801f4ac:	f7ff f9ea 	bl	801e884 <__mcmp>
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	dd51      	ble.n	801f558 <_strtod_l+0x8b8>
 801f4b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f4b8:	9a08      	ldr	r2, [sp, #32]
 801f4ba:	0d1b      	lsrs	r3, r3, #20
 801f4bc:	051b      	lsls	r3, r3, #20
 801f4be:	2a00      	cmp	r2, #0
 801f4c0:	d06b      	beq.n	801f59a <_strtod_l+0x8fa>
 801f4c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801f4c6:	d868      	bhi.n	801f59a <_strtod_l+0x8fa>
 801f4c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801f4cc:	f67f ae9d 	bls.w	801f20a <_strtod_l+0x56a>
 801f4d0:	4b0a      	ldr	r3, [pc, #40]	@ (801f4fc <_strtod_l+0x85c>)
 801f4d2:	4650      	mov	r0, sl
 801f4d4:	4659      	mov	r1, fp
 801f4d6:	2200      	movs	r2, #0
 801f4d8:	f7e1 f8a6 	bl	8000628 <__aeabi_dmul>
 801f4dc:	4b08      	ldr	r3, [pc, #32]	@ (801f500 <_strtod_l+0x860>)
 801f4de:	400b      	ands	r3, r1
 801f4e0:	4682      	mov	sl, r0
 801f4e2:	468b      	mov	fp, r1
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	f47f ae05 	bne.w	801f0f4 <_strtod_l+0x454>
 801f4ea:	9a05      	ldr	r2, [sp, #20]
 801f4ec:	2322      	movs	r3, #34	@ 0x22
 801f4ee:	6013      	str	r3, [r2, #0]
 801f4f0:	e600      	b.n	801f0f4 <_strtod_l+0x454>
 801f4f2:	bf00      	nop
 801f4f4:	08023260 	.word	0x08023260
 801f4f8:	fffffc02 	.word	0xfffffc02
 801f4fc:	39500000 	.word	0x39500000
 801f500:	7ff00000 	.word	0x7ff00000
 801f504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801f508:	d165      	bne.n	801f5d6 <_strtod_l+0x936>
 801f50a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f50c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f510:	b35a      	cbz	r2, 801f56a <_strtod_l+0x8ca>
 801f512:	4a9f      	ldr	r2, [pc, #636]	@ (801f790 <_strtod_l+0xaf0>)
 801f514:	4293      	cmp	r3, r2
 801f516:	d12b      	bne.n	801f570 <_strtod_l+0x8d0>
 801f518:	9b08      	ldr	r3, [sp, #32]
 801f51a:	4651      	mov	r1, sl
 801f51c:	b303      	cbz	r3, 801f560 <_strtod_l+0x8c0>
 801f51e:	4b9d      	ldr	r3, [pc, #628]	@ (801f794 <_strtod_l+0xaf4>)
 801f520:	465a      	mov	r2, fp
 801f522:	4013      	ands	r3, r2
 801f524:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801f528:	f04f 32ff 	mov.w	r2, #4294967295
 801f52c:	d81b      	bhi.n	801f566 <_strtod_l+0x8c6>
 801f52e:	0d1b      	lsrs	r3, r3, #20
 801f530:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801f534:	fa02 f303 	lsl.w	r3, r2, r3
 801f538:	4299      	cmp	r1, r3
 801f53a:	d119      	bne.n	801f570 <_strtod_l+0x8d0>
 801f53c:	4b96      	ldr	r3, [pc, #600]	@ (801f798 <_strtod_l+0xaf8>)
 801f53e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f540:	429a      	cmp	r2, r3
 801f542:	d102      	bne.n	801f54a <_strtod_l+0x8aa>
 801f544:	3101      	adds	r1, #1
 801f546:	f43f adca 	beq.w	801f0de <_strtod_l+0x43e>
 801f54a:	4b92      	ldr	r3, [pc, #584]	@ (801f794 <_strtod_l+0xaf4>)
 801f54c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f54e:	401a      	ands	r2, r3
 801f550:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801f554:	f04f 0a00 	mov.w	sl, #0
 801f558:	9b08      	ldr	r3, [sp, #32]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d1b8      	bne.n	801f4d0 <_strtod_l+0x830>
 801f55e:	e5c9      	b.n	801f0f4 <_strtod_l+0x454>
 801f560:	f04f 33ff 	mov.w	r3, #4294967295
 801f564:	e7e8      	b.n	801f538 <_strtod_l+0x898>
 801f566:	4613      	mov	r3, r2
 801f568:	e7e6      	b.n	801f538 <_strtod_l+0x898>
 801f56a:	ea53 030a 	orrs.w	r3, r3, sl
 801f56e:	d0a1      	beq.n	801f4b4 <_strtod_l+0x814>
 801f570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f572:	b1db      	cbz	r3, 801f5ac <_strtod_l+0x90c>
 801f574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f576:	4213      	tst	r3, r2
 801f578:	d0ee      	beq.n	801f558 <_strtod_l+0x8b8>
 801f57a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f57c:	9a08      	ldr	r2, [sp, #32]
 801f57e:	4650      	mov	r0, sl
 801f580:	4659      	mov	r1, fp
 801f582:	b1bb      	cbz	r3, 801f5b4 <_strtod_l+0x914>
 801f584:	f7ff fb6c 	bl	801ec60 <sulp>
 801f588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f58c:	ec53 2b10 	vmov	r2, r3, d0
 801f590:	f7e0 fe94 	bl	80002bc <__adddf3>
 801f594:	4682      	mov	sl, r0
 801f596:	468b      	mov	fp, r1
 801f598:	e7de      	b.n	801f558 <_strtod_l+0x8b8>
 801f59a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801f59e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f5a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f5a6:	f04f 3aff 	mov.w	sl, #4294967295
 801f5aa:	e7d5      	b.n	801f558 <_strtod_l+0x8b8>
 801f5ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5ae:	ea13 0f0a 	tst.w	r3, sl
 801f5b2:	e7e1      	b.n	801f578 <_strtod_l+0x8d8>
 801f5b4:	f7ff fb54 	bl	801ec60 <sulp>
 801f5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f5bc:	ec53 2b10 	vmov	r2, r3, d0
 801f5c0:	f7e0 fe7a 	bl	80002b8 <__aeabi_dsub>
 801f5c4:	2200      	movs	r2, #0
 801f5c6:	2300      	movs	r3, #0
 801f5c8:	4682      	mov	sl, r0
 801f5ca:	468b      	mov	fp, r1
 801f5cc:	f7e1 fa94 	bl	8000af8 <__aeabi_dcmpeq>
 801f5d0:	2800      	cmp	r0, #0
 801f5d2:	d0c1      	beq.n	801f558 <_strtod_l+0x8b8>
 801f5d4:	e619      	b.n	801f20a <_strtod_l+0x56a>
 801f5d6:	4641      	mov	r1, r8
 801f5d8:	4620      	mov	r0, r4
 801f5da:	f7ff facb 	bl	801eb74 <__ratio>
 801f5de:	ec57 6b10 	vmov	r6, r7, d0
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f5e8:	4630      	mov	r0, r6
 801f5ea:	4639      	mov	r1, r7
 801f5ec:	f7e1 fa98 	bl	8000b20 <__aeabi_dcmple>
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	d06f      	beq.n	801f6d4 <_strtod_l+0xa34>
 801f5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d17a      	bne.n	801f6f0 <_strtod_l+0xa50>
 801f5fa:	f1ba 0f00 	cmp.w	sl, #0
 801f5fe:	d158      	bne.n	801f6b2 <_strtod_l+0xa12>
 801f600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f606:	2b00      	cmp	r3, #0
 801f608:	d15a      	bne.n	801f6c0 <_strtod_l+0xa20>
 801f60a:	4b64      	ldr	r3, [pc, #400]	@ (801f79c <_strtod_l+0xafc>)
 801f60c:	2200      	movs	r2, #0
 801f60e:	4630      	mov	r0, r6
 801f610:	4639      	mov	r1, r7
 801f612:	f7e1 fa7b 	bl	8000b0c <__aeabi_dcmplt>
 801f616:	2800      	cmp	r0, #0
 801f618:	d159      	bne.n	801f6ce <_strtod_l+0xa2e>
 801f61a:	4630      	mov	r0, r6
 801f61c:	4639      	mov	r1, r7
 801f61e:	4b60      	ldr	r3, [pc, #384]	@ (801f7a0 <_strtod_l+0xb00>)
 801f620:	2200      	movs	r2, #0
 801f622:	f7e1 f801 	bl	8000628 <__aeabi_dmul>
 801f626:	4606      	mov	r6, r0
 801f628:	460f      	mov	r7, r1
 801f62a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801f62e:	9606      	str	r6, [sp, #24]
 801f630:	9307      	str	r3, [sp, #28]
 801f632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f636:	4d57      	ldr	r5, [pc, #348]	@ (801f794 <_strtod_l+0xaf4>)
 801f638:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f63c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f63e:	401d      	ands	r5, r3
 801f640:	4b58      	ldr	r3, [pc, #352]	@ (801f7a4 <_strtod_l+0xb04>)
 801f642:	429d      	cmp	r5, r3
 801f644:	f040 80b2 	bne.w	801f7ac <_strtod_l+0xb0c>
 801f648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f64a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801f64e:	ec4b ab10 	vmov	d0, sl, fp
 801f652:	f7ff f9c7 	bl	801e9e4 <__ulp>
 801f656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f65a:	ec51 0b10 	vmov	r0, r1, d0
 801f65e:	f7e0 ffe3 	bl	8000628 <__aeabi_dmul>
 801f662:	4652      	mov	r2, sl
 801f664:	465b      	mov	r3, fp
 801f666:	f7e0 fe29 	bl	80002bc <__adddf3>
 801f66a:	460b      	mov	r3, r1
 801f66c:	4949      	ldr	r1, [pc, #292]	@ (801f794 <_strtod_l+0xaf4>)
 801f66e:	4a4e      	ldr	r2, [pc, #312]	@ (801f7a8 <_strtod_l+0xb08>)
 801f670:	4019      	ands	r1, r3
 801f672:	4291      	cmp	r1, r2
 801f674:	4682      	mov	sl, r0
 801f676:	d942      	bls.n	801f6fe <_strtod_l+0xa5e>
 801f678:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f67a:	4b47      	ldr	r3, [pc, #284]	@ (801f798 <_strtod_l+0xaf8>)
 801f67c:	429a      	cmp	r2, r3
 801f67e:	d103      	bne.n	801f688 <_strtod_l+0x9e8>
 801f680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f682:	3301      	adds	r3, #1
 801f684:	f43f ad2b 	beq.w	801f0de <_strtod_l+0x43e>
 801f688:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801f798 <_strtod_l+0xaf8>
 801f68c:	f04f 3aff 	mov.w	sl, #4294967295
 801f690:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f692:	9805      	ldr	r0, [sp, #20]
 801f694:	f7fe fe72 	bl	801e37c <_Bfree>
 801f698:	9805      	ldr	r0, [sp, #20]
 801f69a:	4649      	mov	r1, r9
 801f69c:	f7fe fe6e 	bl	801e37c <_Bfree>
 801f6a0:	9805      	ldr	r0, [sp, #20]
 801f6a2:	4641      	mov	r1, r8
 801f6a4:	f7fe fe6a 	bl	801e37c <_Bfree>
 801f6a8:	9805      	ldr	r0, [sp, #20]
 801f6aa:	4621      	mov	r1, r4
 801f6ac:	f7fe fe66 	bl	801e37c <_Bfree>
 801f6b0:	e618      	b.n	801f2e4 <_strtod_l+0x644>
 801f6b2:	f1ba 0f01 	cmp.w	sl, #1
 801f6b6:	d103      	bne.n	801f6c0 <_strtod_l+0xa20>
 801f6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	f43f ada5 	beq.w	801f20a <_strtod_l+0x56a>
 801f6c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801f770 <_strtod_l+0xad0>
 801f6c4:	4f35      	ldr	r7, [pc, #212]	@ (801f79c <_strtod_l+0xafc>)
 801f6c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f6ca:	2600      	movs	r6, #0
 801f6cc:	e7b1      	b.n	801f632 <_strtod_l+0x992>
 801f6ce:	4f34      	ldr	r7, [pc, #208]	@ (801f7a0 <_strtod_l+0xb00>)
 801f6d0:	2600      	movs	r6, #0
 801f6d2:	e7aa      	b.n	801f62a <_strtod_l+0x98a>
 801f6d4:	4b32      	ldr	r3, [pc, #200]	@ (801f7a0 <_strtod_l+0xb00>)
 801f6d6:	4630      	mov	r0, r6
 801f6d8:	4639      	mov	r1, r7
 801f6da:	2200      	movs	r2, #0
 801f6dc:	f7e0 ffa4 	bl	8000628 <__aeabi_dmul>
 801f6e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6e2:	4606      	mov	r6, r0
 801f6e4:	460f      	mov	r7, r1
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d09f      	beq.n	801f62a <_strtod_l+0x98a>
 801f6ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801f6ee:	e7a0      	b.n	801f632 <_strtod_l+0x992>
 801f6f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801f778 <_strtod_l+0xad8>
 801f6f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f6f8:	ec57 6b17 	vmov	r6, r7, d7
 801f6fc:	e799      	b.n	801f632 <_strtod_l+0x992>
 801f6fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801f702:	9b08      	ldr	r3, [sp, #32]
 801f704:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801f708:	2b00      	cmp	r3, #0
 801f70a:	d1c1      	bne.n	801f690 <_strtod_l+0x9f0>
 801f70c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f710:	0d1b      	lsrs	r3, r3, #20
 801f712:	051b      	lsls	r3, r3, #20
 801f714:	429d      	cmp	r5, r3
 801f716:	d1bb      	bne.n	801f690 <_strtod_l+0x9f0>
 801f718:	4630      	mov	r0, r6
 801f71a:	4639      	mov	r1, r7
 801f71c:	f7e1 fae4 	bl	8000ce8 <__aeabi_d2lz>
 801f720:	f7e0 ff54 	bl	80005cc <__aeabi_l2d>
 801f724:	4602      	mov	r2, r0
 801f726:	460b      	mov	r3, r1
 801f728:	4630      	mov	r0, r6
 801f72a:	4639      	mov	r1, r7
 801f72c:	f7e0 fdc4 	bl	80002b8 <__aeabi_dsub>
 801f730:	460b      	mov	r3, r1
 801f732:	4602      	mov	r2, r0
 801f734:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801f738:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801f73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f73e:	ea46 060a 	orr.w	r6, r6, sl
 801f742:	431e      	orrs	r6, r3
 801f744:	d06f      	beq.n	801f826 <_strtod_l+0xb86>
 801f746:	a30e      	add	r3, pc, #56	@ (adr r3, 801f780 <_strtod_l+0xae0>)
 801f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74c:	f7e1 f9de 	bl	8000b0c <__aeabi_dcmplt>
 801f750:	2800      	cmp	r0, #0
 801f752:	f47f accf 	bne.w	801f0f4 <_strtod_l+0x454>
 801f756:	a30c      	add	r3, pc, #48	@ (adr r3, 801f788 <_strtod_l+0xae8>)
 801f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f75c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f760:	f7e1 f9f2 	bl	8000b48 <__aeabi_dcmpgt>
 801f764:	2800      	cmp	r0, #0
 801f766:	d093      	beq.n	801f690 <_strtod_l+0x9f0>
 801f768:	e4c4      	b.n	801f0f4 <_strtod_l+0x454>
 801f76a:	bf00      	nop
 801f76c:	f3af 8000 	nop.w
 801f770:	00000000 	.word	0x00000000
 801f774:	bff00000 	.word	0xbff00000
 801f778:	00000000 	.word	0x00000000
 801f77c:	3ff00000 	.word	0x3ff00000
 801f780:	94a03595 	.word	0x94a03595
 801f784:	3fdfffff 	.word	0x3fdfffff
 801f788:	35afe535 	.word	0x35afe535
 801f78c:	3fe00000 	.word	0x3fe00000
 801f790:	000fffff 	.word	0x000fffff
 801f794:	7ff00000 	.word	0x7ff00000
 801f798:	7fefffff 	.word	0x7fefffff
 801f79c:	3ff00000 	.word	0x3ff00000
 801f7a0:	3fe00000 	.word	0x3fe00000
 801f7a4:	7fe00000 	.word	0x7fe00000
 801f7a8:	7c9fffff 	.word	0x7c9fffff
 801f7ac:	9b08      	ldr	r3, [sp, #32]
 801f7ae:	b323      	cbz	r3, 801f7fa <_strtod_l+0xb5a>
 801f7b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801f7b4:	d821      	bhi.n	801f7fa <_strtod_l+0xb5a>
 801f7b6:	a328      	add	r3, pc, #160	@ (adr r3, 801f858 <_strtod_l+0xbb8>)
 801f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7bc:	4630      	mov	r0, r6
 801f7be:	4639      	mov	r1, r7
 801f7c0:	f7e1 f9ae 	bl	8000b20 <__aeabi_dcmple>
 801f7c4:	b1a0      	cbz	r0, 801f7f0 <_strtod_l+0xb50>
 801f7c6:	4639      	mov	r1, r7
 801f7c8:	4630      	mov	r0, r6
 801f7ca:	f7e1 fa05 	bl	8000bd8 <__aeabi_d2uiz>
 801f7ce:	2801      	cmp	r0, #1
 801f7d0:	bf38      	it	cc
 801f7d2:	2001      	movcc	r0, #1
 801f7d4:	f7e0 feae 	bl	8000534 <__aeabi_ui2d>
 801f7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7da:	4606      	mov	r6, r0
 801f7dc:	460f      	mov	r7, r1
 801f7de:	b9fb      	cbnz	r3, 801f820 <_strtod_l+0xb80>
 801f7e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f7e4:	9014      	str	r0, [sp, #80]	@ 0x50
 801f7e6:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801f7ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f7f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f7f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801f7f6:	1b5b      	subs	r3, r3, r5
 801f7f8:	9311      	str	r3, [sp, #68]	@ 0x44
 801f7fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f7fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801f802:	f7ff f8ef 	bl	801e9e4 <__ulp>
 801f806:	4650      	mov	r0, sl
 801f808:	ec53 2b10 	vmov	r2, r3, d0
 801f80c:	4659      	mov	r1, fp
 801f80e:	f7e0 ff0b 	bl	8000628 <__aeabi_dmul>
 801f812:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801f816:	f7e0 fd51 	bl	80002bc <__adddf3>
 801f81a:	4682      	mov	sl, r0
 801f81c:	468b      	mov	fp, r1
 801f81e:	e770      	b.n	801f702 <_strtod_l+0xa62>
 801f820:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801f824:	e7e0      	b.n	801f7e8 <_strtod_l+0xb48>
 801f826:	a30e      	add	r3, pc, #56	@ (adr r3, 801f860 <_strtod_l+0xbc0>)
 801f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f82c:	f7e1 f96e 	bl	8000b0c <__aeabi_dcmplt>
 801f830:	e798      	b.n	801f764 <_strtod_l+0xac4>
 801f832:	2300      	movs	r3, #0
 801f834:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f836:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801f838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f83a:	6013      	str	r3, [r2, #0]
 801f83c:	f7ff ba6d 	b.w	801ed1a <_strtod_l+0x7a>
 801f840:	2a65      	cmp	r2, #101	@ 0x65
 801f842:	f43f ab66 	beq.w	801ef12 <_strtod_l+0x272>
 801f846:	2a45      	cmp	r2, #69	@ 0x45
 801f848:	f43f ab63 	beq.w	801ef12 <_strtod_l+0x272>
 801f84c:	2301      	movs	r3, #1
 801f84e:	f7ff bb9e 	b.w	801ef8e <_strtod_l+0x2ee>
 801f852:	bf00      	nop
 801f854:	f3af 8000 	nop.w
 801f858:	ffc00000 	.word	0xffc00000
 801f85c:	41dfffff 	.word	0x41dfffff
 801f860:	94a03595 	.word	0x94a03595
 801f864:	3fcfffff 	.word	0x3fcfffff

0801f868 <_strtod_r>:
 801f868:	4b01      	ldr	r3, [pc, #4]	@ (801f870 <_strtod_r+0x8>)
 801f86a:	f7ff ba19 	b.w	801eca0 <_strtod_l>
 801f86e:	bf00      	nop
 801f870:	200001c4 	.word	0x200001c4

0801f874 <__ssputs_r>:
 801f874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f878:	688e      	ldr	r6, [r1, #8]
 801f87a:	461f      	mov	r7, r3
 801f87c:	42be      	cmp	r6, r7
 801f87e:	680b      	ldr	r3, [r1, #0]
 801f880:	4682      	mov	sl, r0
 801f882:	460c      	mov	r4, r1
 801f884:	4690      	mov	r8, r2
 801f886:	d82d      	bhi.n	801f8e4 <__ssputs_r+0x70>
 801f888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f88c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f890:	d026      	beq.n	801f8e0 <__ssputs_r+0x6c>
 801f892:	6965      	ldr	r5, [r4, #20]
 801f894:	6909      	ldr	r1, [r1, #16]
 801f896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f89a:	eba3 0901 	sub.w	r9, r3, r1
 801f89e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f8a2:	1c7b      	adds	r3, r7, #1
 801f8a4:	444b      	add	r3, r9
 801f8a6:	106d      	asrs	r5, r5, #1
 801f8a8:	429d      	cmp	r5, r3
 801f8aa:	bf38      	it	cc
 801f8ac:	461d      	movcc	r5, r3
 801f8ae:	0553      	lsls	r3, r2, #21
 801f8b0:	d527      	bpl.n	801f902 <__ssputs_r+0x8e>
 801f8b2:	4629      	mov	r1, r5
 801f8b4:	f7fc faee 	bl	801be94 <_malloc_r>
 801f8b8:	4606      	mov	r6, r0
 801f8ba:	b360      	cbz	r0, 801f916 <__ssputs_r+0xa2>
 801f8bc:	6921      	ldr	r1, [r4, #16]
 801f8be:	464a      	mov	r2, r9
 801f8c0:	f7fd fe53 	bl	801d56a <memcpy>
 801f8c4:	89a3      	ldrh	r3, [r4, #12]
 801f8c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f8ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f8ce:	81a3      	strh	r3, [r4, #12]
 801f8d0:	6126      	str	r6, [r4, #16]
 801f8d2:	6165      	str	r5, [r4, #20]
 801f8d4:	444e      	add	r6, r9
 801f8d6:	eba5 0509 	sub.w	r5, r5, r9
 801f8da:	6026      	str	r6, [r4, #0]
 801f8dc:	60a5      	str	r5, [r4, #8]
 801f8de:	463e      	mov	r6, r7
 801f8e0:	42be      	cmp	r6, r7
 801f8e2:	d900      	bls.n	801f8e6 <__ssputs_r+0x72>
 801f8e4:	463e      	mov	r6, r7
 801f8e6:	6820      	ldr	r0, [r4, #0]
 801f8e8:	4632      	mov	r2, r6
 801f8ea:	4641      	mov	r1, r8
 801f8ec:	f7fd fd0c 	bl	801d308 <memmove>
 801f8f0:	68a3      	ldr	r3, [r4, #8]
 801f8f2:	1b9b      	subs	r3, r3, r6
 801f8f4:	60a3      	str	r3, [r4, #8]
 801f8f6:	6823      	ldr	r3, [r4, #0]
 801f8f8:	4433      	add	r3, r6
 801f8fa:	6023      	str	r3, [r4, #0]
 801f8fc:	2000      	movs	r0, #0
 801f8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f902:	462a      	mov	r2, r5
 801f904:	f000 ff11 	bl	802072a <_realloc_r>
 801f908:	4606      	mov	r6, r0
 801f90a:	2800      	cmp	r0, #0
 801f90c:	d1e0      	bne.n	801f8d0 <__ssputs_r+0x5c>
 801f90e:	6921      	ldr	r1, [r4, #16]
 801f910:	4650      	mov	r0, sl
 801f912:	f7fe fca9 	bl	801e268 <_free_r>
 801f916:	230c      	movs	r3, #12
 801f918:	f8ca 3000 	str.w	r3, [sl]
 801f91c:	89a3      	ldrh	r3, [r4, #12]
 801f91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f922:	81a3      	strh	r3, [r4, #12]
 801f924:	f04f 30ff 	mov.w	r0, #4294967295
 801f928:	e7e9      	b.n	801f8fe <__ssputs_r+0x8a>
	...

0801f92c <_svfiprintf_r>:
 801f92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f930:	4698      	mov	r8, r3
 801f932:	898b      	ldrh	r3, [r1, #12]
 801f934:	061b      	lsls	r3, r3, #24
 801f936:	b09d      	sub	sp, #116	@ 0x74
 801f938:	4607      	mov	r7, r0
 801f93a:	460d      	mov	r5, r1
 801f93c:	4614      	mov	r4, r2
 801f93e:	d510      	bpl.n	801f962 <_svfiprintf_r+0x36>
 801f940:	690b      	ldr	r3, [r1, #16]
 801f942:	b973      	cbnz	r3, 801f962 <_svfiprintf_r+0x36>
 801f944:	2140      	movs	r1, #64	@ 0x40
 801f946:	f7fc faa5 	bl	801be94 <_malloc_r>
 801f94a:	6028      	str	r0, [r5, #0]
 801f94c:	6128      	str	r0, [r5, #16]
 801f94e:	b930      	cbnz	r0, 801f95e <_svfiprintf_r+0x32>
 801f950:	230c      	movs	r3, #12
 801f952:	603b      	str	r3, [r7, #0]
 801f954:	f04f 30ff 	mov.w	r0, #4294967295
 801f958:	b01d      	add	sp, #116	@ 0x74
 801f95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f95e:	2340      	movs	r3, #64	@ 0x40
 801f960:	616b      	str	r3, [r5, #20]
 801f962:	2300      	movs	r3, #0
 801f964:	9309      	str	r3, [sp, #36]	@ 0x24
 801f966:	2320      	movs	r3, #32
 801f968:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f96c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f970:	2330      	movs	r3, #48	@ 0x30
 801f972:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801fb10 <_svfiprintf_r+0x1e4>
 801f976:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f97a:	f04f 0901 	mov.w	r9, #1
 801f97e:	4623      	mov	r3, r4
 801f980:	469a      	mov	sl, r3
 801f982:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f986:	b10a      	cbz	r2, 801f98c <_svfiprintf_r+0x60>
 801f988:	2a25      	cmp	r2, #37	@ 0x25
 801f98a:	d1f9      	bne.n	801f980 <_svfiprintf_r+0x54>
 801f98c:	ebba 0b04 	subs.w	fp, sl, r4
 801f990:	d00b      	beq.n	801f9aa <_svfiprintf_r+0x7e>
 801f992:	465b      	mov	r3, fp
 801f994:	4622      	mov	r2, r4
 801f996:	4629      	mov	r1, r5
 801f998:	4638      	mov	r0, r7
 801f99a:	f7ff ff6b 	bl	801f874 <__ssputs_r>
 801f99e:	3001      	adds	r0, #1
 801f9a0:	f000 80a7 	beq.w	801faf2 <_svfiprintf_r+0x1c6>
 801f9a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f9a6:	445a      	add	r2, fp
 801f9a8:	9209      	str	r2, [sp, #36]	@ 0x24
 801f9aa:	f89a 3000 	ldrb.w	r3, [sl]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	f000 809f 	beq.w	801faf2 <_svfiprintf_r+0x1c6>
 801f9b4:	2300      	movs	r3, #0
 801f9b6:	f04f 32ff 	mov.w	r2, #4294967295
 801f9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f9be:	f10a 0a01 	add.w	sl, sl, #1
 801f9c2:	9304      	str	r3, [sp, #16]
 801f9c4:	9307      	str	r3, [sp, #28]
 801f9c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f9ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801f9cc:	4654      	mov	r4, sl
 801f9ce:	2205      	movs	r2, #5
 801f9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f9d4:	484e      	ldr	r0, [pc, #312]	@ (801fb10 <_svfiprintf_r+0x1e4>)
 801f9d6:	f7e0 fc13 	bl	8000200 <memchr>
 801f9da:	9a04      	ldr	r2, [sp, #16]
 801f9dc:	b9d8      	cbnz	r0, 801fa16 <_svfiprintf_r+0xea>
 801f9de:	06d0      	lsls	r0, r2, #27
 801f9e0:	bf44      	itt	mi
 801f9e2:	2320      	movmi	r3, #32
 801f9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f9e8:	0711      	lsls	r1, r2, #28
 801f9ea:	bf44      	itt	mi
 801f9ec:	232b      	movmi	r3, #43	@ 0x2b
 801f9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f9f2:	f89a 3000 	ldrb.w	r3, [sl]
 801f9f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801f9f8:	d015      	beq.n	801fa26 <_svfiprintf_r+0xfa>
 801f9fa:	9a07      	ldr	r2, [sp, #28]
 801f9fc:	4654      	mov	r4, sl
 801f9fe:	2000      	movs	r0, #0
 801fa00:	f04f 0c0a 	mov.w	ip, #10
 801fa04:	4621      	mov	r1, r4
 801fa06:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fa0a:	3b30      	subs	r3, #48	@ 0x30
 801fa0c:	2b09      	cmp	r3, #9
 801fa0e:	d94b      	bls.n	801faa8 <_svfiprintf_r+0x17c>
 801fa10:	b1b0      	cbz	r0, 801fa40 <_svfiprintf_r+0x114>
 801fa12:	9207      	str	r2, [sp, #28]
 801fa14:	e014      	b.n	801fa40 <_svfiprintf_r+0x114>
 801fa16:	eba0 0308 	sub.w	r3, r0, r8
 801fa1a:	fa09 f303 	lsl.w	r3, r9, r3
 801fa1e:	4313      	orrs	r3, r2
 801fa20:	9304      	str	r3, [sp, #16]
 801fa22:	46a2      	mov	sl, r4
 801fa24:	e7d2      	b.n	801f9cc <_svfiprintf_r+0xa0>
 801fa26:	9b03      	ldr	r3, [sp, #12]
 801fa28:	1d19      	adds	r1, r3, #4
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	9103      	str	r1, [sp, #12]
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	bfbb      	ittet	lt
 801fa32:	425b      	neglt	r3, r3
 801fa34:	f042 0202 	orrlt.w	r2, r2, #2
 801fa38:	9307      	strge	r3, [sp, #28]
 801fa3a:	9307      	strlt	r3, [sp, #28]
 801fa3c:	bfb8      	it	lt
 801fa3e:	9204      	strlt	r2, [sp, #16]
 801fa40:	7823      	ldrb	r3, [r4, #0]
 801fa42:	2b2e      	cmp	r3, #46	@ 0x2e
 801fa44:	d10a      	bne.n	801fa5c <_svfiprintf_r+0x130>
 801fa46:	7863      	ldrb	r3, [r4, #1]
 801fa48:	2b2a      	cmp	r3, #42	@ 0x2a
 801fa4a:	d132      	bne.n	801fab2 <_svfiprintf_r+0x186>
 801fa4c:	9b03      	ldr	r3, [sp, #12]
 801fa4e:	1d1a      	adds	r2, r3, #4
 801fa50:	681b      	ldr	r3, [r3, #0]
 801fa52:	9203      	str	r2, [sp, #12]
 801fa54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fa58:	3402      	adds	r4, #2
 801fa5a:	9305      	str	r3, [sp, #20]
 801fa5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801fb20 <_svfiprintf_r+0x1f4>
 801fa60:	7821      	ldrb	r1, [r4, #0]
 801fa62:	2203      	movs	r2, #3
 801fa64:	4650      	mov	r0, sl
 801fa66:	f7e0 fbcb 	bl	8000200 <memchr>
 801fa6a:	b138      	cbz	r0, 801fa7c <_svfiprintf_r+0x150>
 801fa6c:	9b04      	ldr	r3, [sp, #16]
 801fa6e:	eba0 000a 	sub.w	r0, r0, sl
 801fa72:	2240      	movs	r2, #64	@ 0x40
 801fa74:	4082      	lsls	r2, r0
 801fa76:	4313      	orrs	r3, r2
 801fa78:	3401      	adds	r4, #1
 801fa7a:	9304      	str	r3, [sp, #16]
 801fa7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa80:	4824      	ldr	r0, [pc, #144]	@ (801fb14 <_svfiprintf_r+0x1e8>)
 801fa82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fa86:	2206      	movs	r2, #6
 801fa88:	f7e0 fbba 	bl	8000200 <memchr>
 801fa8c:	2800      	cmp	r0, #0
 801fa8e:	d036      	beq.n	801fafe <_svfiprintf_r+0x1d2>
 801fa90:	4b21      	ldr	r3, [pc, #132]	@ (801fb18 <_svfiprintf_r+0x1ec>)
 801fa92:	bb1b      	cbnz	r3, 801fadc <_svfiprintf_r+0x1b0>
 801fa94:	9b03      	ldr	r3, [sp, #12]
 801fa96:	3307      	adds	r3, #7
 801fa98:	f023 0307 	bic.w	r3, r3, #7
 801fa9c:	3308      	adds	r3, #8
 801fa9e:	9303      	str	r3, [sp, #12]
 801faa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801faa2:	4433      	add	r3, r6
 801faa4:	9309      	str	r3, [sp, #36]	@ 0x24
 801faa6:	e76a      	b.n	801f97e <_svfiprintf_r+0x52>
 801faa8:	fb0c 3202 	mla	r2, ip, r2, r3
 801faac:	460c      	mov	r4, r1
 801faae:	2001      	movs	r0, #1
 801fab0:	e7a8      	b.n	801fa04 <_svfiprintf_r+0xd8>
 801fab2:	2300      	movs	r3, #0
 801fab4:	3401      	adds	r4, #1
 801fab6:	9305      	str	r3, [sp, #20]
 801fab8:	4619      	mov	r1, r3
 801faba:	f04f 0c0a 	mov.w	ip, #10
 801fabe:	4620      	mov	r0, r4
 801fac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fac4:	3a30      	subs	r2, #48	@ 0x30
 801fac6:	2a09      	cmp	r2, #9
 801fac8:	d903      	bls.n	801fad2 <_svfiprintf_r+0x1a6>
 801faca:	2b00      	cmp	r3, #0
 801facc:	d0c6      	beq.n	801fa5c <_svfiprintf_r+0x130>
 801face:	9105      	str	r1, [sp, #20]
 801fad0:	e7c4      	b.n	801fa5c <_svfiprintf_r+0x130>
 801fad2:	fb0c 2101 	mla	r1, ip, r1, r2
 801fad6:	4604      	mov	r4, r0
 801fad8:	2301      	movs	r3, #1
 801fada:	e7f0      	b.n	801fabe <_svfiprintf_r+0x192>
 801fadc:	ab03      	add	r3, sp, #12
 801fade:	9300      	str	r3, [sp, #0]
 801fae0:	462a      	mov	r2, r5
 801fae2:	4b0e      	ldr	r3, [pc, #56]	@ (801fb1c <_svfiprintf_r+0x1f0>)
 801fae4:	a904      	add	r1, sp, #16
 801fae6:	4638      	mov	r0, r7
 801fae8:	f7fc fb86 	bl	801c1f8 <_printf_float>
 801faec:	1c42      	adds	r2, r0, #1
 801faee:	4606      	mov	r6, r0
 801faf0:	d1d6      	bne.n	801faa0 <_svfiprintf_r+0x174>
 801faf2:	89ab      	ldrh	r3, [r5, #12]
 801faf4:	065b      	lsls	r3, r3, #25
 801faf6:	f53f af2d 	bmi.w	801f954 <_svfiprintf_r+0x28>
 801fafa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fafc:	e72c      	b.n	801f958 <_svfiprintf_r+0x2c>
 801fafe:	ab03      	add	r3, sp, #12
 801fb00:	9300      	str	r3, [sp, #0]
 801fb02:	462a      	mov	r2, r5
 801fb04:	4b05      	ldr	r3, [pc, #20]	@ (801fb1c <_svfiprintf_r+0x1f0>)
 801fb06:	a904      	add	r1, sp, #16
 801fb08:	4638      	mov	r0, r7
 801fb0a:	f7fc fe0d 	bl	801c728 <_printf_i>
 801fb0e:	e7ed      	b.n	801faec <_svfiprintf_r+0x1c0>
 801fb10:	08023288 	.word	0x08023288
 801fb14:	08023292 	.word	0x08023292
 801fb18:	0801c1f9 	.word	0x0801c1f9
 801fb1c:	0801f875 	.word	0x0801f875
 801fb20:	0802328e 	.word	0x0802328e

0801fb24 <__sfputc_r>:
 801fb24:	6893      	ldr	r3, [r2, #8]
 801fb26:	3b01      	subs	r3, #1
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	b410      	push	{r4}
 801fb2c:	6093      	str	r3, [r2, #8]
 801fb2e:	da08      	bge.n	801fb42 <__sfputc_r+0x1e>
 801fb30:	6994      	ldr	r4, [r2, #24]
 801fb32:	42a3      	cmp	r3, r4
 801fb34:	db01      	blt.n	801fb3a <__sfputc_r+0x16>
 801fb36:	290a      	cmp	r1, #10
 801fb38:	d103      	bne.n	801fb42 <__sfputc_r+0x1e>
 801fb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb3e:	f7fd bb4f 	b.w	801d1e0 <__swbuf_r>
 801fb42:	6813      	ldr	r3, [r2, #0]
 801fb44:	1c58      	adds	r0, r3, #1
 801fb46:	6010      	str	r0, [r2, #0]
 801fb48:	7019      	strb	r1, [r3, #0]
 801fb4a:	4608      	mov	r0, r1
 801fb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb50:	4770      	bx	lr

0801fb52 <__sfputs_r>:
 801fb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb54:	4606      	mov	r6, r0
 801fb56:	460f      	mov	r7, r1
 801fb58:	4614      	mov	r4, r2
 801fb5a:	18d5      	adds	r5, r2, r3
 801fb5c:	42ac      	cmp	r4, r5
 801fb5e:	d101      	bne.n	801fb64 <__sfputs_r+0x12>
 801fb60:	2000      	movs	r0, #0
 801fb62:	e007      	b.n	801fb74 <__sfputs_r+0x22>
 801fb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb68:	463a      	mov	r2, r7
 801fb6a:	4630      	mov	r0, r6
 801fb6c:	f7ff ffda 	bl	801fb24 <__sfputc_r>
 801fb70:	1c43      	adds	r3, r0, #1
 801fb72:	d1f3      	bne.n	801fb5c <__sfputs_r+0xa>
 801fb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fb78 <_vfiprintf_r>:
 801fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb7c:	460d      	mov	r5, r1
 801fb7e:	b09d      	sub	sp, #116	@ 0x74
 801fb80:	4614      	mov	r4, r2
 801fb82:	4698      	mov	r8, r3
 801fb84:	4606      	mov	r6, r0
 801fb86:	b118      	cbz	r0, 801fb90 <_vfiprintf_r+0x18>
 801fb88:	6a03      	ldr	r3, [r0, #32]
 801fb8a:	b90b      	cbnz	r3, 801fb90 <_vfiprintf_r+0x18>
 801fb8c:	f7fd f98c 	bl	801cea8 <__sinit>
 801fb90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb92:	07d9      	lsls	r1, r3, #31
 801fb94:	d405      	bmi.n	801fba2 <_vfiprintf_r+0x2a>
 801fb96:	89ab      	ldrh	r3, [r5, #12]
 801fb98:	059a      	lsls	r2, r3, #22
 801fb9a:	d402      	bmi.n	801fba2 <_vfiprintf_r+0x2a>
 801fb9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb9e:	f7fd fcda 	bl	801d556 <__retarget_lock_acquire_recursive>
 801fba2:	89ab      	ldrh	r3, [r5, #12]
 801fba4:	071b      	lsls	r3, r3, #28
 801fba6:	d501      	bpl.n	801fbac <_vfiprintf_r+0x34>
 801fba8:	692b      	ldr	r3, [r5, #16]
 801fbaa:	b99b      	cbnz	r3, 801fbd4 <_vfiprintf_r+0x5c>
 801fbac:	4629      	mov	r1, r5
 801fbae:	4630      	mov	r0, r6
 801fbb0:	f7fd fb54 	bl	801d25c <__swsetup_r>
 801fbb4:	b170      	cbz	r0, 801fbd4 <_vfiprintf_r+0x5c>
 801fbb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fbb8:	07dc      	lsls	r4, r3, #31
 801fbba:	d504      	bpl.n	801fbc6 <_vfiprintf_r+0x4e>
 801fbbc:	f04f 30ff 	mov.w	r0, #4294967295
 801fbc0:	b01d      	add	sp, #116	@ 0x74
 801fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbc6:	89ab      	ldrh	r3, [r5, #12]
 801fbc8:	0598      	lsls	r0, r3, #22
 801fbca:	d4f7      	bmi.n	801fbbc <_vfiprintf_r+0x44>
 801fbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fbce:	f7fd fcc3 	bl	801d558 <__retarget_lock_release_recursive>
 801fbd2:	e7f3      	b.n	801fbbc <_vfiprintf_r+0x44>
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	9309      	str	r3, [sp, #36]	@ 0x24
 801fbd8:	2320      	movs	r3, #32
 801fbda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fbde:	f8cd 800c 	str.w	r8, [sp, #12]
 801fbe2:	2330      	movs	r3, #48	@ 0x30
 801fbe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fd94 <_vfiprintf_r+0x21c>
 801fbe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fbec:	f04f 0901 	mov.w	r9, #1
 801fbf0:	4623      	mov	r3, r4
 801fbf2:	469a      	mov	sl, r3
 801fbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fbf8:	b10a      	cbz	r2, 801fbfe <_vfiprintf_r+0x86>
 801fbfa:	2a25      	cmp	r2, #37	@ 0x25
 801fbfc:	d1f9      	bne.n	801fbf2 <_vfiprintf_r+0x7a>
 801fbfe:	ebba 0b04 	subs.w	fp, sl, r4
 801fc02:	d00b      	beq.n	801fc1c <_vfiprintf_r+0xa4>
 801fc04:	465b      	mov	r3, fp
 801fc06:	4622      	mov	r2, r4
 801fc08:	4629      	mov	r1, r5
 801fc0a:	4630      	mov	r0, r6
 801fc0c:	f7ff ffa1 	bl	801fb52 <__sfputs_r>
 801fc10:	3001      	adds	r0, #1
 801fc12:	f000 80a7 	beq.w	801fd64 <_vfiprintf_r+0x1ec>
 801fc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc18:	445a      	add	r2, fp
 801fc1a:	9209      	str	r2, [sp, #36]	@ 0x24
 801fc1c:	f89a 3000 	ldrb.w	r3, [sl]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	f000 809f 	beq.w	801fd64 <_vfiprintf_r+0x1ec>
 801fc26:	2300      	movs	r3, #0
 801fc28:	f04f 32ff 	mov.w	r2, #4294967295
 801fc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc30:	f10a 0a01 	add.w	sl, sl, #1
 801fc34:	9304      	str	r3, [sp, #16]
 801fc36:	9307      	str	r3, [sp, #28]
 801fc38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fc3c:	931a      	str	r3, [sp, #104]	@ 0x68
 801fc3e:	4654      	mov	r4, sl
 801fc40:	2205      	movs	r2, #5
 801fc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc46:	4853      	ldr	r0, [pc, #332]	@ (801fd94 <_vfiprintf_r+0x21c>)
 801fc48:	f7e0 fada 	bl	8000200 <memchr>
 801fc4c:	9a04      	ldr	r2, [sp, #16]
 801fc4e:	b9d8      	cbnz	r0, 801fc88 <_vfiprintf_r+0x110>
 801fc50:	06d1      	lsls	r1, r2, #27
 801fc52:	bf44      	itt	mi
 801fc54:	2320      	movmi	r3, #32
 801fc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fc5a:	0713      	lsls	r3, r2, #28
 801fc5c:	bf44      	itt	mi
 801fc5e:	232b      	movmi	r3, #43	@ 0x2b
 801fc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fc64:	f89a 3000 	ldrb.w	r3, [sl]
 801fc68:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc6a:	d015      	beq.n	801fc98 <_vfiprintf_r+0x120>
 801fc6c:	9a07      	ldr	r2, [sp, #28]
 801fc6e:	4654      	mov	r4, sl
 801fc70:	2000      	movs	r0, #0
 801fc72:	f04f 0c0a 	mov.w	ip, #10
 801fc76:	4621      	mov	r1, r4
 801fc78:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc7c:	3b30      	subs	r3, #48	@ 0x30
 801fc7e:	2b09      	cmp	r3, #9
 801fc80:	d94b      	bls.n	801fd1a <_vfiprintf_r+0x1a2>
 801fc82:	b1b0      	cbz	r0, 801fcb2 <_vfiprintf_r+0x13a>
 801fc84:	9207      	str	r2, [sp, #28]
 801fc86:	e014      	b.n	801fcb2 <_vfiprintf_r+0x13a>
 801fc88:	eba0 0308 	sub.w	r3, r0, r8
 801fc8c:	fa09 f303 	lsl.w	r3, r9, r3
 801fc90:	4313      	orrs	r3, r2
 801fc92:	9304      	str	r3, [sp, #16]
 801fc94:	46a2      	mov	sl, r4
 801fc96:	e7d2      	b.n	801fc3e <_vfiprintf_r+0xc6>
 801fc98:	9b03      	ldr	r3, [sp, #12]
 801fc9a:	1d19      	adds	r1, r3, #4
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	9103      	str	r1, [sp, #12]
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	bfbb      	ittet	lt
 801fca4:	425b      	neglt	r3, r3
 801fca6:	f042 0202 	orrlt.w	r2, r2, #2
 801fcaa:	9307      	strge	r3, [sp, #28]
 801fcac:	9307      	strlt	r3, [sp, #28]
 801fcae:	bfb8      	it	lt
 801fcb0:	9204      	strlt	r2, [sp, #16]
 801fcb2:	7823      	ldrb	r3, [r4, #0]
 801fcb4:	2b2e      	cmp	r3, #46	@ 0x2e
 801fcb6:	d10a      	bne.n	801fcce <_vfiprintf_r+0x156>
 801fcb8:	7863      	ldrb	r3, [r4, #1]
 801fcba:	2b2a      	cmp	r3, #42	@ 0x2a
 801fcbc:	d132      	bne.n	801fd24 <_vfiprintf_r+0x1ac>
 801fcbe:	9b03      	ldr	r3, [sp, #12]
 801fcc0:	1d1a      	adds	r2, r3, #4
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	9203      	str	r2, [sp, #12]
 801fcc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fcca:	3402      	adds	r4, #2
 801fccc:	9305      	str	r3, [sp, #20]
 801fcce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801fda4 <_vfiprintf_r+0x22c>
 801fcd2:	7821      	ldrb	r1, [r4, #0]
 801fcd4:	2203      	movs	r2, #3
 801fcd6:	4650      	mov	r0, sl
 801fcd8:	f7e0 fa92 	bl	8000200 <memchr>
 801fcdc:	b138      	cbz	r0, 801fcee <_vfiprintf_r+0x176>
 801fcde:	9b04      	ldr	r3, [sp, #16]
 801fce0:	eba0 000a 	sub.w	r0, r0, sl
 801fce4:	2240      	movs	r2, #64	@ 0x40
 801fce6:	4082      	lsls	r2, r0
 801fce8:	4313      	orrs	r3, r2
 801fcea:	3401      	adds	r4, #1
 801fcec:	9304      	str	r3, [sp, #16]
 801fcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fcf2:	4829      	ldr	r0, [pc, #164]	@ (801fd98 <_vfiprintf_r+0x220>)
 801fcf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fcf8:	2206      	movs	r2, #6
 801fcfa:	f7e0 fa81 	bl	8000200 <memchr>
 801fcfe:	2800      	cmp	r0, #0
 801fd00:	d03f      	beq.n	801fd82 <_vfiprintf_r+0x20a>
 801fd02:	4b26      	ldr	r3, [pc, #152]	@ (801fd9c <_vfiprintf_r+0x224>)
 801fd04:	bb1b      	cbnz	r3, 801fd4e <_vfiprintf_r+0x1d6>
 801fd06:	9b03      	ldr	r3, [sp, #12]
 801fd08:	3307      	adds	r3, #7
 801fd0a:	f023 0307 	bic.w	r3, r3, #7
 801fd0e:	3308      	adds	r3, #8
 801fd10:	9303      	str	r3, [sp, #12]
 801fd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd14:	443b      	add	r3, r7
 801fd16:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd18:	e76a      	b.n	801fbf0 <_vfiprintf_r+0x78>
 801fd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd1e:	460c      	mov	r4, r1
 801fd20:	2001      	movs	r0, #1
 801fd22:	e7a8      	b.n	801fc76 <_vfiprintf_r+0xfe>
 801fd24:	2300      	movs	r3, #0
 801fd26:	3401      	adds	r4, #1
 801fd28:	9305      	str	r3, [sp, #20]
 801fd2a:	4619      	mov	r1, r3
 801fd2c:	f04f 0c0a 	mov.w	ip, #10
 801fd30:	4620      	mov	r0, r4
 801fd32:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd36:	3a30      	subs	r2, #48	@ 0x30
 801fd38:	2a09      	cmp	r2, #9
 801fd3a:	d903      	bls.n	801fd44 <_vfiprintf_r+0x1cc>
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d0c6      	beq.n	801fcce <_vfiprintf_r+0x156>
 801fd40:	9105      	str	r1, [sp, #20]
 801fd42:	e7c4      	b.n	801fcce <_vfiprintf_r+0x156>
 801fd44:	fb0c 2101 	mla	r1, ip, r1, r2
 801fd48:	4604      	mov	r4, r0
 801fd4a:	2301      	movs	r3, #1
 801fd4c:	e7f0      	b.n	801fd30 <_vfiprintf_r+0x1b8>
 801fd4e:	ab03      	add	r3, sp, #12
 801fd50:	9300      	str	r3, [sp, #0]
 801fd52:	462a      	mov	r2, r5
 801fd54:	4b12      	ldr	r3, [pc, #72]	@ (801fda0 <_vfiprintf_r+0x228>)
 801fd56:	a904      	add	r1, sp, #16
 801fd58:	4630      	mov	r0, r6
 801fd5a:	f7fc fa4d 	bl	801c1f8 <_printf_float>
 801fd5e:	4607      	mov	r7, r0
 801fd60:	1c78      	adds	r0, r7, #1
 801fd62:	d1d6      	bne.n	801fd12 <_vfiprintf_r+0x19a>
 801fd64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fd66:	07d9      	lsls	r1, r3, #31
 801fd68:	d405      	bmi.n	801fd76 <_vfiprintf_r+0x1fe>
 801fd6a:	89ab      	ldrh	r3, [r5, #12]
 801fd6c:	059a      	lsls	r2, r3, #22
 801fd6e:	d402      	bmi.n	801fd76 <_vfiprintf_r+0x1fe>
 801fd70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fd72:	f7fd fbf1 	bl	801d558 <__retarget_lock_release_recursive>
 801fd76:	89ab      	ldrh	r3, [r5, #12]
 801fd78:	065b      	lsls	r3, r3, #25
 801fd7a:	f53f af1f 	bmi.w	801fbbc <_vfiprintf_r+0x44>
 801fd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd80:	e71e      	b.n	801fbc0 <_vfiprintf_r+0x48>
 801fd82:	ab03      	add	r3, sp, #12
 801fd84:	9300      	str	r3, [sp, #0]
 801fd86:	462a      	mov	r2, r5
 801fd88:	4b05      	ldr	r3, [pc, #20]	@ (801fda0 <_vfiprintf_r+0x228>)
 801fd8a:	a904      	add	r1, sp, #16
 801fd8c:	4630      	mov	r0, r6
 801fd8e:	f7fc fccb 	bl	801c728 <_printf_i>
 801fd92:	e7e4      	b.n	801fd5e <_vfiprintf_r+0x1e6>
 801fd94:	08023288 	.word	0x08023288
 801fd98:	08023292 	.word	0x08023292
 801fd9c:	0801c1f9 	.word	0x0801c1f9
 801fda0:	0801fb53 	.word	0x0801fb53
 801fda4:	0802328e 	.word	0x0802328e

0801fda8 <__sflush_r>:
 801fda8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdb0:	0716      	lsls	r6, r2, #28
 801fdb2:	4605      	mov	r5, r0
 801fdb4:	460c      	mov	r4, r1
 801fdb6:	d454      	bmi.n	801fe62 <__sflush_r+0xba>
 801fdb8:	684b      	ldr	r3, [r1, #4]
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	dc02      	bgt.n	801fdc4 <__sflush_r+0x1c>
 801fdbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	dd48      	ble.n	801fe56 <__sflush_r+0xae>
 801fdc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fdc6:	2e00      	cmp	r6, #0
 801fdc8:	d045      	beq.n	801fe56 <__sflush_r+0xae>
 801fdca:	2300      	movs	r3, #0
 801fdcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801fdd0:	682f      	ldr	r7, [r5, #0]
 801fdd2:	6a21      	ldr	r1, [r4, #32]
 801fdd4:	602b      	str	r3, [r5, #0]
 801fdd6:	d030      	beq.n	801fe3a <__sflush_r+0x92>
 801fdd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801fdda:	89a3      	ldrh	r3, [r4, #12]
 801fddc:	0759      	lsls	r1, r3, #29
 801fdde:	d505      	bpl.n	801fdec <__sflush_r+0x44>
 801fde0:	6863      	ldr	r3, [r4, #4]
 801fde2:	1ad2      	subs	r2, r2, r3
 801fde4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801fde6:	b10b      	cbz	r3, 801fdec <__sflush_r+0x44>
 801fde8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801fdea:	1ad2      	subs	r2, r2, r3
 801fdec:	2300      	movs	r3, #0
 801fdee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fdf0:	6a21      	ldr	r1, [r4, #32]
 801fdf2:	4628      	mov	r0, r5
 801fdf4:	47b0      	blx	r6
 801fdf6:	1c43      	adds	r3, r0, #1
 801fdf8:	89a3      	ldrh	r3, [r4, #12]
 801fdfa:	d106      	bne.n	801fe0a <__sflush_r+0x62>
 801fdfc:	6829      	ldr	r1, [r5, #0]
 801fdfe:	291d      	cmp	r1, #29
 801fe00:	d82b      	bhi.n	801fe5a <__sflush_r+0xb2>
 801fe02:	4a2a      	ldr	r2, [pc, #168]	@ (801feac <__sflush_r+0x104>)
 801fe04:	410a      	asrs	r2, r1
 801fe06:	07d6      	lsls	r6, r2, #31
 801fe08:	d427      	bmi.n	801fe5a <__sflush_r+0xb2>
 801fe0a:	2200      	movs	r2, #0
 801fe0c:	6062      	str	r2, [r4, #4]
 801fe0e:	04d9      	lsls	r1, r3, #19
 801fe10:	6922      	ldr	r2, [r4, #16]
 801fe12:	6022      	str	r2, [r4, #0]
 801fe14:	d504      	bpl.n	801fe20 <__sflush_r+0x78>
 801fe16:	1c42      	adds	r2, r0, #1
 801fe18:	d101      	bne.n	801fe1e <__sflush_r+0x76>
 801fe1a:	682b      	ldr	r3, [r5, #0]
 801fe1c:	b903      	cbnz	r3, 801fe20 <__sflush_r+0x78>
 801fe1e:	6560      	str	r0, [r4, #84]	@ 0x54
 801fe20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fe22:	602f      	str	r7, [r5, #0]
 801fe24:	b1b9      	cbz	r1, 801fe56 <__sflush_r+0xae>
 801fe26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fe2a:	4299      	cmp	r1, r3
 801fe2c:	d002      	beq.n	801fe34 <__sflush_r+0x8c>
 801fe2e:	4628      	mov	r0, r5
 801fe30:	f7fe fa1a 	bl	801e268 <_free_r>
 801fe34:	2300      	movs	r3, #0
 801fe36:	6363      	str	r3, [r4, #52]	@ 0x34
 801fe38:	e00d      	b.n	801fe56 <__sflush_r+0xae>
 801fe3a:	2301      	movs	r3, #1
 801fe3c:	4628      	mov	r0, r5
 801fe3e:	47b0      	blx	r6
 801fe40:	4602      	mov	r2, r0
 801fe42:	1c50      	adds	r0, r2, #1
 801fe44:	d1c9      	bne.n	801fdda <__sflush_r+0x32>
 801fe46:	682b      	ldr	r3, [r5, #0]
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	d0c6      	beq.n	801fdda <__sflush_r+0x32>
 801fe4c:	2b1d      	cmp	r3, #29
 801fe4e:	d001      	beq.n	801fe54 <__sflush_r+0xac>
 801fe50:	2b16      	cmp	r3, #22
 801fe52:	d11e      	bne.n	801fe92 <__sflush_r+0xea>
 801fe54:	602f      	str	r7, [r5, #0]
 801fe56:	2000      	movs	r0, #0
 801fe58:	e022      	b.n	801fea0 <__sflush_r+0xf8>
 801fe5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fe5e:	b21b      	sxth	r3, r3
 801fe60:	e01b      	b.n	801fe9a <__sflush_r+0xf2>
 801fe62:	690f      	ldr	r7, [r1, #16]
 801fe64:	2f00      	cmp	r7, #0
 801fe66:	d0f6      	beq.n	801fe56 <__sflush_r+0xae>
 801fe68:	0793      	lsls	r3, r2, #30
 801fe6a:	680e      	ldr	r6, [r1, #0]
 801fe6c:	bf08      	it	eq
 801fe6e:	694b      	ldreq	r3, [r1, #20]
 801fe70:	600f      	str	r7, [r1, #0]
 801fe72:	bf18      	it	ne
 801fe74:	2300      	movne	r3, #0
 801fe76:	eba6 0807 	sub.w	r8, r6, r7
 801fe7a:	608b      	str	r3, [r1, #8]
 801fe7c:	f1b8 0f00 	cmp.w	r8, #0
 801fe80:	dde9      	ble.n	801fe56 <__sflush_r+0xae>
 801fe82:	6a21      	ldr	r1, [r4, #32]
 801fe84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801fe86:	4643      	mov	r3, r8
 801fe88:	463a      	mov	r2, r7
 801fe8a:	4628      	mov	r0, r5
 801fe8c:	47b0      	blx	r6
 801fe8e:	2800      	cmp	r0, #0
 801fe90:	dc08      	bgt.n	801fea4 <__sflush_r+0xfc>
 801fe92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fe9a:	81a3      	strh	r3, [r4, #12]
 801fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 801fea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fea4:	4407      	add	r7, r0
 801fea6:	eba8 0800 	sub.w	r8, r8, r0
 801feaa:	e7e7      	b.n	801fe7c <__sflush_r+0xd4>
 801feac:	dfbffffe 	.word	0xdfbffffe

0801feb0 <_fflush_r>:
 801feb0:	b538      	push	{r3, r4, r5, lr}
 801feb2:	690b      	ldr	r3, [r1, #16]
 801feb4:	4605      	mov	r5, r0
 801feb6:	460c      	mov	r4, r1
 801feb8:	b913      	cbnz	r3, 801fec0 <_fflush_r+0x10>
 801feba:	2500      	movs	r5, #0
 801febc:	4628      	mov	r0, r5
 801febe:	bd38      	pop	{r3, r4, r5, pc}
 801fec0:	b118      	cbz	r0, 801feca <_fflush_r+0x1a>
 801fec2:	6a03      	ldr	r3, [r0, #32]
 801fec4:	b90b      	cbnz	r3, 801feca <_fflush_r+0x1a>
 801fec6:	f7fc ffef 	bl	801cea8 <__sinit>
 801feca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fece:	2b00      	cmp	r3, #0
 801fed0:	d0f3      	beq.n	801feba <_fflush_r+0xa>
 801fed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801fed4:	07d0      	lsls	r0, r2, #31
 801fed6:	d404      	bmi.n	801fee2 <_fflush_r+0x32>
 801fed8:	0599      	lsls	r1, r3, #22
 801feda:	d402      	bmi.n	801fee2 <_fflush_r+0x32>
 801fedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fede:	f7fd fb3a 	bl	801d556 <__retarget_lock_acquire_recursive>
 801fee2:	4628      	mov	r0, r5
 801fee4:	4621      	mov	r1, r4
 801fee6:	f7ff ff5f 	bl	801fda8 <__sflush_r>
 801feea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801feec:	07da      	lsls	r2, r3, #31
 801feee:	4605      	mov	r5, r0
 801fef0:	d4e4      	bmi.n	801febc <_fflush_r+0xc>
 801fef2:	89a3      	ldrh	r3, [r4, #12]
 801fef4:	059b      	lsls	r3, r3, #22
 801fef6:	d4e1      	bmi.n	801febc <_fflush_r+0xc>
 801fef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fefa:	f7fd fb2d 	bl	801d558 <__retarget_lock_release_recursive>
 801fefe:	e7dd      	b.n	801febc <_fflush_r+0xc>

0801ff00 <fiprintf>:
 801ff00:	b40e      	push	{r1, r2, r3}
 801ff02:	b503      	push	{r0, r1, lr}
 801ff04:	4601      	mov	r1, r0
 801ff06:	ab03      	add	r3, sp, #12
 801ff08:	4805      	ldr	r0, [pc, #20]	@ (801ff20 <fiprintf+0x20>)
 801ff0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff0e:	6800      	ldr	r0, [r0, #0]
 801ff10:	9301      	str	r3, [sp, #4]
 801ff12:	f7ff fe31 	bl	801fb78 <_vfiprintf_r>
 801ff16:	b002      	add	sp, #8
 801ff18:	f85d eb04 	ldr.w	lr, [sp], #4
 801ff1c:	b003      	add	sp, #12
 801ff1e:	4770      	bx	lr
 801ff20:	20000174 	.word	0x20000174

0801ff24 <__swhatbuf_r>:
 801ff24:	b570      	push	{r4, r5, r6, lr}
 801ff26:	460c      	mov	r4, r1
 801ff28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff2c:	2900      	cmp	r1, #0
 801ff2e:	b096      	sub	sp, #88	@ 0x58
 801ff30:	4615      	mov	r5, r2
 801ff32:	461e      	mov	r6, r3
 801ff34:	da0d      	bge.n	801ff52 <__swhatbuf_r+0x2e>
 801ff36:	89a3      	ldrh	r3, [r4, #12]
 801ff38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ff3c:	f04f 0100 	mov.w	r1, #0
 801ff40:	bf14      	ite	ne
 801ff42:	2340      	movne	r3, #64	@ 0x40
 801ff44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ff48:	2000      	movs	r0, #0
 801ff4a:	6031      	str	r1, [r6, #0]
 801ff4c:	602b      	str	r3, [r5, #0]
 801ff4e:	b016      	add	sp, #88	@ 0x58
 801ff50:	bd70      	pop	{r4, r5, r6, pc}
 801ff52:	466a      	mov	r2, sp
 801ff54:	f000 f85a 	bl	802000c <_fstat_r>
 801ff58:	2800      	cmp	r0, #0
 801ff5a:	dbec      	blt.n	801ff36 <__swhatbuf_r+0x12>
 801ff5c:	9901      	ldr	r1, [sp, #4]
 801ff5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ff62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ff66:	4259      	negs	r1, r3
 801ff68:	4159      	adcs	r1, r3
 801ff6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ff6e:	e7eb      	b.n	801ff48 <__swhatbuf_r+0x24>

0801ff70 <__smakebuf_r>:
 801ff70:	898b      	ldrh	r3, [r1, #12]
 801ff72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ff74:	079d      	lsls	r5, r3, #30
 801ff76:	4606      	mov	r6, r0
 801ff78:	460c      	mov	r4, r1
 801ff7a:	d507      	bpl.n	801ff8c <__smakebuf_r+0x1c>
 801ff7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ff80:	6023      	str	r3, [r4, #0]
 801ff82:	6123      	str	r3, [r4, #16]
 801ff84:	2301      	movs	r3, #1
 801ff86:	6163      	str	r3, [r4, #20]
 801ff88:	b003      	add	sp, #12
 801ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff8c:	ab01      	add	r3, sp, #4
 801ff8e:	466a      	mov	r2, sp
 801ff90:	f7ff ffc8 	bl	801ff24 <__swhatbuf_r>
 801ff94:	9f00      	ldr	r7, [sp, #0]
 801ff96:	4605      	mov	r5, r0
 801ff98:	4639      	mov	r1, r7
 801ff9a:	4630      	mov	r0, r6
 801ff9c:	f7fb ff7a 	bl	801be94 <_malloc_r>
 801ffa0:	b948      	cbnz	r0, 801ffb6 <__smakebuf_r+0x46>
 801ffa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ffa6:	059a      	lsls	r2, r3, #22
 801ffa8:	d4ee      	bmi.n	801ff88 <__smakebuf_r+0x18>
 801ffaa:	f023 0303 	bic.w	r3, r3, #3
 801ffae:	f043 0302 	orr.w	r3, r3, #2
 801ffb2:	81a3      	strh	r3, [r4, #12]
 801ffb4:	e7e2      	b.n	801ff7c <__smakebuf_r+0xc>
 801ffb6:	89a3      	ldrh	r3, [r4, #12]
 801ffb8:	6020      	str	r0, [r4, #0]
 801ffba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ffbe:	81a3      	strh	r3, [r4, #12]
 801ffc0:	9b01      	ldr	r3, [sp, #4]
 801ffc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ffc6:	b15b      	cbz	r3, 801ffe0 <__smakebuf_r+0x70>
 801ffc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ffcc:	4630      	mov	r0, r6
 801ffce:	f000 f82f 	bl	8020030 <_isatty_r>
 801ffd2:	b128      	cbz	r0, 801ffe0 <__smakebuf_r+0x70>
 801ffd4:	89a3      	ldrh	r3, [r4, #12]
 801ffd6:	f023 0303 	bic.w	r3, r3, #3
 801ffda:	f043 0301 	orr.w	r3, r3, #1
 801ffde:	81a3      	strh	r3, [r4, #12]
 801ffe0:	89a3      	ldrh	r3, [r4, #12]
 801ffe2:	431d      	orrs	r5, r3
 801ffe4:	81a5      	strh	r5, [r4, #12]
 801ffe6:	e7cf      	b.n	801ff88 <__smakebuf_r+0x18>

0801ffe8 <strncmp>:
 801ffe8:	b510      	push	{r4, lr}
 801ffea:	b16a      	cbz	r2, 8020008 <strncmp+0x20>
 801ffec:	3901      	subs	r1, #1
 801ffee:	1884      	adds	r4, r0, r2
 801fff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801fff8:	429a      	cmp	r2, r3
 801fffa:	d103      	bne.n	8020004 <strncmp+0x1c>
 801fffc:	42a0      	cmp	r0, r4
 801fffe:	d001      	beq.n	8020004 <strncmp+0x1c>
 8020000:	2a00      	cmp	r2, #0
 8020002:	d1f5      	bne.n	801fff0 <strncmp+0x8>
 8020004:	1ad0      	subs	r0, r2, r3
 8020006:	bd10      	pop	{r4, pc}
 8020008:	4610      	mov	r0, r2
 802000a:	e7fc      	b.n	8020006 <strncmp+0x1e>

0802000c <_fstat_r>:
 802000c:	b538      	push	{r3, r4, r5, lr}
 802000e:	4d07      	ldr	r5, [pc, #28]	@ (802002c <_fstat_r+0x20>)
 8020010:	2300      	movs	r3, #0
 8020012:	4604      	mov	r4, r0
 8020014:	4608      	mov	r0, r1
 8020016:	4611      	mov	r1, r2
 8020018:	602b      	str	r3, [r5, #0]
 802001a:	f7e3 fd75 	bl	8003b08 <_fstat>
 802001e:	1c43      	adds	r3, r0, #1
 8020020:	d102      	bne.n	8020028 <_fstat_r+0x1c>
 8020022:	682b      	ldr	r3, [r5, #0]
 8020024:	b103      	cbz	r3, 8020028 <_fstat_r+0x1c>
 8020026:	6023      	str	r3, [r4, #0]
 8020028:	bd38      	pop	{r3, r4, r5, pc}
 802002a:	bf00      	nop
 802002c:	2000381c 	.word	0x2000381c

08020030 <_isatty_r>:
 8020030:	b538      	push	{r3, r4, r5, lr}
 8020032:	4d06      	ldr	r5, [pc, #24]	@ (802004c <_isatty_r+0x1c>)
 8020034:	2300      	movs	r3, #0
 8020036:	4604      	mov	r4, r0
 8020038:	4608      	mov	r0, r1
 802003a:	602b      	str	r3, [r5, #0]
 802003c:	f7e3 fd74 	bl	8003b28 <_isatty>
 8020040:	1c43      	adds	r3, r0, #1
 8020042:	d102      	bne.n	802004a <_isatty_r+0x1a>
 8020044:	682b      	ldr	r3, [r5, #0]
 8020046:	b103      	cbz	r3, 802004a <_isatty_r+0x1a>
 8020048:	6023      	str	r3, [r4, #0]
 802004a:	bd38      	pop	{r3, r4, r5, pc}
 802004c:	2000381c 	.word	0x2000381c

08020050 <nan>:
 8020050:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020058 <nan+0x8>
 8020054:	4770      	bx	lr
 8020056:	bf00      	nop
 8020058:	00000000 	.word	0x00000000
 802005c:	7ff80000 	.word	0x7ff80000

08020060 <abort>:
 8020060:	b508      	push	{r3, lr}
 8020062:	2006      	movs	r0, #6
 8020064:	f000 fbc4 	bl	80207f0 <raise>
 8020068:	2001      	movs	r0, #1
 802006a:	f7e3 fcfd 	bl	8003a68 <_exit>

0802006e <_calloc_r>:
 802006e:	b570      	push	{r4, r5, r6, lr}
 8020070:	fba1 5402 	umull	r5, r4, r1, r2
 8020074:	b93c      	cbnz	r4, 8020086 <_calloc_r+0x18>
 8020076:	4629      	mov	r1, r5
 8020078:	f7fb ff0c 	bl	801be94 <_malloc_r>
 802007c:	4606      	mov	r6, r0
 802007e:	b928      	cbnz	r0, 802008c <_calloc_r+0x1e>
 8020080:	2600      	movs	r6, #0
 8020082:	4630      	mov	r0, r6
 8020084:	bd70      	pop	{r4, r5, r6, pc}
 8020086:	220c      	movs	r2, #12
 8020088:	6002      	str	r2, [r0, #0]
 802008a:	e7f9      	b.n	8020080 <_calloc_r+0x12>
 802008c:	462a      	mov	r2, r5
 802008e:	4621      	mov	r1, r4
 8020090:	f7fd f954 	bl	801d33c <memset>
 8020094:	e7f5      	b.n	8020082 <_calloc_r+0x14>

08020096 <rshift>:
 8020096:	6903      	ldr	r3, [r0, #16]
 8020098:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802009c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80200a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80200a4:	f100 0414 	add.w	r4, r0, #20
 80200a8:	dd45      	ble.n	8020136 <rshift+0xa0>
 80200aa:	f011 011f 	ands.w	r1, r1, #31
 80200ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80200b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80200b6:	d10c      	bne.n	80200d2 <rshift+0x3c>
 80200b8:	f100 0710 	add.w	r7, r0, #16
 80200bc:	4629      	mov	r1, r5
 80200be:	42b1      	cmp	r1, r6
 80200c0:	d334      	bcc.n	802012c <rshift+0x96>
 80200c2:	1a9b      	subs	r3, r3, r2
 80200c4:	009b      	lsls	r3, r3, #2
 80200c6:	1eea      	subs	r2, r5, #3
 80200c8:	4296      	cmp	r6, r2
 80200ca:	bf38      	it	cc
 80200cc:	2300      	movcc	r3, #0
 80200ce:	4423      	add	r3, r4
 80200d0:	e015      	b.n	80200fe <rshift+0x68>
 80200d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80200d6:	f1c1 0820 	rsb	r8, r1, #32
 80200da:	40cf      	lsrs	r7, r1
 80200dc:	f105 0e04 	add.w	lr, r5, #4
 80200e0:	46a1      	mov	r9, r4
 80200e2:	4576      	cmp	r6, lr
 80200e4:	46f4      	mov	ip, lr
 80200e6:	d815      	bhi.n	8020114 <rshift+0x7e>
 80200e8:	1a9a      	subs	r2, r3, r2
 80200ea:	0092      	lsls	r2, r2, #2
 80200ec:	3a04      	subs	r2, #4
 80200ee:	3501      	adds	r5, #1
 80200f0:	42ae      	cmp	r6, r5
 80200f2:	bf38      	it	cc
 80200f4:	2200      	movcc	r2, #0
 80200f6:	18a3      	adds	r3, r4, r2
 80200f8:	50a7      	str	r7, [r4, r2]
 80200fa:	b107      	cbz	r7, 80200fe <rshift+0x68>
 80200fc:	3304      	adds	r3, #4
 80200fe:	1b1a      	subs	r2, r3, r4
 8020100:	42a3      	cmp	r3, r4
 8020102:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020106:	bf08      	it	eq
 8020108:	2300      	moveq	r3, #0
 802010a:	6102      	str	r2, [r0, #16]
 802010c:	bf08      	it	eq
 802010e:	6143      	streq	r3, [r0, #20]
 8020110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020114:	f8dc c000 	ldr.w	ip, [ip]
 8020118:	fa0c fc08 	lsl.w	ip, ip, r8
 802011c:	ea4c 0707 	orr.w	r7, ip, r7
 8020120:	f849 7b04 	str.w	r7, [r9], #4
 8020124:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020128:	40cf      	lsrs	r7, r1
 802012a:	e7da      	b.n	80200e2 <rshift+0x4c>
 802012c:	f851 cb04 	ldr.w	ip, [r1], #4
 8020130:	f847 cf04 	str.w	ip, [r7, #4]!
 8020134:	e7c3      	b.n	80200be <rshift+0x28>
 8020136:	4623      	mov	r3, r4
 8020138:	e7e1      	b.n	80200fe <rshift+0x68>

0802013a <__hexdig_fun>:
 802013a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802013e:	2b09      	cmp	r3, #9
 8020140:	d802      	bhi.n	8020148 <__hexdig_fun+0xe>
 8020142:	3820      	subs	r0, #32
 8020144:	b2c0      	uxtb	r0, r0
 8020146:	4770      	bx	lr
 8020148:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802014c:	2b05      	cmp	r3, #5
 802014e:	d801      	bhi.n	8020154 <__hexdig_fun+0x1a>
 8020150:	3847      	subs	r0, #71	@ 0x47
 8020152:	e7f7      	b.n	8020144 <__hexdig_fun+0xa>
 8020154:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8020158:	2b05      	cmp	r3, #5
 802015a:	d801      	bhi.n	8020160 <__hexdig_fun+0x26>
 802015c:	3827      	subs	r0, #39	@ 0x27
 802015e:	e7f1      	b.n	8020144 <__hexdig_fun+0xa>
 8020160:	2000      	movs	r0, #0
 8020162:	4770      	bx	lr

08020164 <__gethex>:
 8020164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020168:	b085      	sub	sp, #20
 802016a:	468a      	mov	sl, r1
 802016c:	9302      	str	r3, [sp, #8]
 802016e:	680b      	ldr	r3, [r1, #0]
 8020170:	9001      	str	r0, [sp, #4]
 8020172:	4690      	mov	r8, r2
 8020174:	1c9c      	adds	r4, r3, #2
 8020176:	46a1      	mov	r9, r4
 8020178:	f814 0b01 	ldrb.w	r0, [r4], #1
 802017c:	2830      	cmp	r0, #48	@ 0x30
 802017e:	d0fa      	beq.n	8020176 <__gethex+0x12>
 8020180:	eba9 0303 	sub.w	r3, r9, r3
 8020184:	f1a3 0b02 	sub.w	fp, r3, #2
 8020188:	f7ff ffd7 	bl	802013a <__hexdig_fun>
 802018c:	4605      	mov	r5, r0
 802018e:	2800      	cmp	r0, #0
 8020190:	d168      	bne.n	8020264 <__gethex+0x100>
 8020192:	49a0      	ldr	r1, [pc, #640]	@ (8020414 <__gethex+0x2b0>)
 8020194:	2201      	movs	r2, #1
 8020196:	4648      	mov	r0, r9
 8020198:	f7ff ff26 	bl	801ffe8 <strncmp>
 802019c:	4607      	mov	r7, r0
 802019e:	2800      	cmp	r0, #0
 80201a0:	d167      	bne.n	8020272 <__gethex+0x10e>
 80201a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80201a6:	4626      	mov	r6, r4
 80201a8:	f7ff ffc7 	bl	802013a <__hexdig_fun>
 80201ac:	2800      	cmp	r0, #0
 80201ae:	d062      	beq.n	8020276 <__gethex+0x112>
 80201b0:	4623      	mov	r3, r4
 80201b2:	7818      	ldrb	r0, [r3, #0]
 80201b4:	2830      	cmp	r0, #48	@ 0x30
 80201b6:	4699      	mov	r9, r3
 80201b8:	f103 0301 	add.w	r3, r3, #1
 80201bc:	d0f9      	beq.n	80201b2 <__gethex+0x4e>
 80201be:	f7ff ffbc 	bl	802013a <__hexdig_fun>
 80201c2:	fab0 f580 	clz	r5, r0
 80201c6:	096d      	lsrs	r5, r5, #5
 80201c8:	f04f 0b01 	mov.w	fp, #1
 80201cc:	464a      	mov	r2, r9
 80201ce:	4616      	mov	r6, r2
 80201d0:	3201      	adds	r2, #1
 80201d2:	7830      	ldrb	r0, [r6, #0]
 80201d4:	f7ff ffb1 	bl	802013a <__hexdig_fun>
 80201d8:	2800      	cmp	r0, #0
 80201da:	d1f8      	bne.n	80201ce <__gethex+0x6a>
 80201dc:	498d      	ldr	r1, [pc, #564]	@ (8020414 <__gethex+0x2b0>)
 80201de:	2201      	movs	r2, #1
 80201e0:	4630      	mov	r0, r6
 80201e2:	f7ff ff01 	bl	801ffe8 <strncmp>
 80201e6:	2800      	cmp	r0, #0
 80201e8:	d13f      	bne.n	802026a <__gethex+0x106>
 80201ea:	b944      	cbnz	r4, 80201fe <__gethex+0x9a>
 80201ec:	1c74      	adds	r4, r6, #1
 80201ee:	4622      	mov	r2, r4
 80201f0:	4616      	mov	r6, r2
 80201f2:	3201      	adds	r2, #1
 80201f4:	7830      	ldrb	r0, [r6, #0]
 80201f6:	f7ff ffa0 	bl	802013a <__hexdig_fun>
 80201fa:	2800      	cmp	r0, #0
 80201fc:	d1f8      	bne.n	80201f0 <__gethex+0x8c>
 80201fe:	1ba4      	subs	r4, r4, r6
 8020200:	00a7      	lsls	r7, r4, #2
 8020202:	7833      	ldrb	r3, [r6, #0]
 8020204:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020208:	2b50      	cmp	r3, #80	@ 0x50
 802020a:	d13e      	bne.n	802028a <__gethex+0x126>
 802020c:	7873      	ldrb	r3, [r6, #1]
 802020e:	2b2b      	cmp	r3, #43	@ 0x2b
 8020210:	d033      	beq.n	802027a <__gethex+0x116>
 8020212:	2b2d      	cmp	r3, #45	@ 0x2d
 8020214:	d034      	beq.n	8020280 <__gethex+0x11c>
 8020216:	1c71      	adds	r1, r6, #1
 8020218:	2400      	movs	r4, #0
 802021a:	7808      	ldrb	r0, [r1, #0]
 802021c:	f7ff ff8d 	bl	802013a <__hexdig_fun>
 8020220:	1e43      	subs	r3, r0, #1
 8020222:	b2db      	uxtb	r3, r3
 8020224:	2b18      	cmp	r3, #24
 8020226:	d830      	bhi.n	802028a <__gethex+0x126>
 8020228:	f1a0 0210 	sub.w	r2, r0, #16
 802022c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020230:	f7ff ff83 	bl	802013a <__hexdig_fun>
 8020234:	f100 3cff 	add.w	ip, r0, #4294967295
 8020238:	fa5f fc8c 	uxtb.w	ip, ip
 802023c:	f1bc 0f18 	cmp.w	ip, #24
 8020240:	f04f 030a 	mov.w	r3, #10
 8020244:	d91e      	bls.n	8020284 <__gethex+0x120>
 8020246:	b104      	cbz	r4, 802024a <__gethex+0xe6>
 8020248:	4252      	negs	r2, r2
 802024a:	4417      	add	r7, r2
 802024c:	f8ca 1000 	str.w	r1, [sl]
 8020250:	b1ed      	cbz	r5, 802028e <__gethex+0x12a>
 8020252:	f1bb 0f00 	cmp.w	fp, #0
 8020256:	bf0c      	ite	eq
 8020258:	2506      	moveq	r5, #6
 802025a:	2500      	movne	r5, #0
 802025c:	4628      	mov	r0, r5
 802025e:	b005      	add	sp, #20
 8020260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020264:	2500      	movs	r5, #0
 8020266:	462c      	mov	r4, r5
 8020268:	e7b0      	b.n	80201cc <__gethex+0x68>
 802026a:	2c00      	cmp	r4, #0
 802026c:	d1c7      	bne.n	80201fe <__gethex+0x9a>
 802026e:	4627      	mov	r7, r4
 8020270:	e7c7      	b.n	8020202 <__gethex+0x9e>
 8020272:	464e      	mov	r6, r9
 8020274:	462f      	mov	r7, r5
 8020276:	2501      	movs	r5, #1
 8020278:	e7c3      	b.n	8020202 <__gethex+0x9e>
 802027a:	2400      	movs	r4, #0
 802027c:	1cb1      	adds	r1, r6, #2
 802027e:	e7cc      	b.n	802021a <__gethex+0xb6>
 8020280:	2401      	movs	r4, #1
 8020282:	e7fb      	b.n	802027c <__gethex+0x118>
 8020284:	fb03 0002 	mla	r0, r3, r2, r0
 8020288:	e7ce      	b.n	8020228 <__gethex+0xc4>
 802028a:	4631      	mov	r1, r6
 802028c:	e7de      	b.n	802024c <__gethex+0xe8>
 802028e:	eba6 0309 	sub.w	r3, r6, r9
 8020292:	3b01      	subs	r3, #1
 8020294:	4629      	mov	r1, r5
 8020296:	2b07      	cmp	r3, #7
 8020298:	dc0a      	bgt.n	80202b0 <__gethex+0x14c>
 802029a:	9801      	ldr	r0, [sp, #4]
 802029c:	f7fe f82e 	bl	801e2fc <_Balloc>
 80202a0:	4604      	mov	r4, r0
 80202a2:	b940      	cbnz	r0, 80202b6 <__gethex+0x152>
 80202a4:	4b5c      	ldr	r3, [pc, #368]	@ (8020418 <__gethex+0x2b4>)
 80202a6:	4602      	mov	r2, r0
 80202a8:	21e4      	movs	r1, #228	@ 0xe4
 80202aa:	485c      	ldr	r0, [pc, #368]	@ (802041c <__gethex+0x2b8>)
 80202ac:	f7fd f972 	bl	801d594 <__assert_func>
 80202b0:	3101      	adds	r1, #1
 80202b2:	105b      	asrs	r3, r3, #1
 80202b4:	e7ef      	b.n	8020296 <__gethex+0x132>
 80202b6:	f100 0a14 	add.w	sl, r0, #20
 80202ba:	2300      	movs	r3, #0
 80202bc:	4655      	mov	r5, sl
 80202be:	469b      	mov	fp, r3
 80202c0:	45b1      	cmp	r9, r6
 80202c2:	d337      	bcc.n	8020334 <__gethex+0x1d0>
 80202c4:	f845 bb04 	str.w	fp, [r5], #4
 80202c8:	eba5 050a 	sub.w	r5, r5, sl
 80202cc:	10ad      	asrs	r5, r5, #2
 80202ce:	6125      	str	r5, [r4, #16]
 80202d0:	4658      	mov	r0, fp
 80202d2:	f7fe f905 	bl	801e4e0 <__hi0bits>
 80202d6:	016d      	lsls	r5, r5, #5
 80202d8:	f8d8 6000 	ldr.w	r6, [r8]
 80202dc:	1a2d      	subs	r5, r5, r0
 80202de:	42b5      	cmp	r5, r6
 80202e0:	dd54      	ble.n	802038c <__gethex+0x228>
 80202e2:	1bad      	subs	r5, r5, r6
 80202e4:	4629      	mov	r1, r5
 80202e6:	4620      	mov	r0, r4
 80202e8:	f7fe fc99 	bl	801ec1e <__any_on>
 80202ec:	4681      	mov	r9, r0
 80202ee:	b178      	cbz	r0, 8020310 <__gethex+0x1ac>
 80202f0:	1e6b      	subs	r3, r5, #1
 80202f2:	1159      	asrs	r1, r3, #5
 80202f4:	f003 021f 	and.w	r2, r3, #31
 80202f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80202fc:	f04f 0901 	mov.w	r9, #1
 8020300:	fa09 f202 	lsl.w	r2, r9, r2
 8020304:	420a      	tst	r2, r1
 8020306:	d003      	beq.n	8020310 <__gethex+0x1ac>
 8020308:	454b      	cmp	r3, r9
 802030a:	dc36      	bgt.n	802037a <__gethex+0x216>
 802030c:	f04f 0902 	mov.w	r9, #2
 8020310:	4629      	mov	r1, r5
 8020312:	4620      	mov	r0, r4
 8020314:	f7ff febf 	bl	8020096 <rshift>
 8020318:	442f      	add	r7, r5
 802031a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802031e:	42bb      	cmp	r3, r7
 8020320:	da42      	bge.n	80203a8 <__gethex+0x244>
 8020322:	9801      	ldr	r0, [sp, #4]
 8020324:	4621      	mov	r1, r4
 8020326:	f7fe f829 	bl	801e37c <_Bfree>
 802032a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802032c:	2300      	movs	r3, #0
 802032e:	6013      	str	r3, [r2, #0]
 8020330:	25a3      	movs	r5, #163	@ 0xa3
 8020332:	e793      	b.n	802025c <__gethex+0xf8>
 8020334:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020338:	2a2e      	cmp	r2, #46	@ 0x2e
 802033a:	d012      	beq.n	8020362 <__gethex+0x1fe>
 802033c:	2b20      	cmp	r3, #32
 802033e:	d104      	bne.n	802034a <__gethex+0x1e6>
 8020340:	f845 bb04 	str.w	fp, [r5], #4
 8020344:	f04f 0b00 	mov.w	fp, #0
 8020348:	465b      	mov	r3, fp
 802034a:	7830      	ldrb	r0, [r6, #0]
 802034c:	9303      	str	r3, [sp, #12]
 802034e:	f7ff fef4 	bl	802013a <__hexdig_fun>
 8020352:	9b03      	ldr	r3, [sp, #12]
 8020354:	f000 000f 	and.w	r0, r0, #15
 8020358:	4098      	lsls	r0, r3
 802035a:	ea4b 0b00 	orr.w	fp, fp, r0
 802035e:	3304      	adds	r3, #4
 8020360:	e7ae      	b.n	80202c0 <__gethex+0x15c>
 8020362:	45b1      	cmp	r9, r6
 8020364:	d8ea      	bhi.n	802033c <__gethex+0x1d8>
 8020366:	492b      	ldr	r1, [pc, #172]	@ (8020414 <__gethex+0x2b0>)
 8020368:	9303      	str	r3, [sp, #12]
 802036a:	2201      	movs	r2, #1
 802036c:	4630      	mov	r0, r6
 802036e:	f7ff fe3b 	bl	801ffe8 <strncmp>
 8020372:	9b03      	ldr	r3, [sp, #12]
 8020374:	2800      	cmp	r0, #0
 8020376:	d1e1      	bne.n	802033c <__gethex+0x1d8>
 8020378:	e7a2      	b.n	80202c0 <__gethex+0x15c>
 802037a:	1ea9      	subs	r1, r5, #2
 802037c:	4620      	mov	r0, r4
 802037e:	f7fe fc4e 	bl	801ec1e <__any_on>
 8020382:	2800      	cmp	r0, #0
 8020384:	d0c2      	beq.n	802030c <__gethex+0x1a8>
 8020386:	f04f 0903 	mov.w	r9, #3
 802038a:	e7c1      	b.n	8020310 <__gethex+0x1ac>
 802038c:	da09      	bge.n	80203a2 <__gethex+0x23e>
 802038e:	1b75      	subs	r5, r6, r5
 8020390:	4621      	mov	r1, r4
 8020392:	9801      	ldr	r0, [sp, #4]
 8020394:	462a      	mov	r2, r5
 8020396:	f7fe fa09 	bl	801e7ac <__lshift>
 802039a:	1b7f      	subs	r7, r7, r5
 802039c:	4604      	mov	r4, r0
 802039e:	f100 0a14 	add.w	sl, r0, #20
 80203a2:	f04f 0900 	mov.w	r9, #0
 80203a6:	e7b8      	b.n	802031a <__gethex+0x1b6>
 80203a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80203ac:	42bd      	cmp	r5, r7
 80203ae:	dd6f      	ble.n	8020490 <__gethex+0x32c>
 80203b0:	1bed      	subs	r5, r5, r7
 80203b2:	42ae      	cmp	r6, r5
 80203b4:	dc34      	bgt.n	8020420 <__gethex+0x2bc>
 80203b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80203ba:	2b02      	cmp	r3, #2
 80203bc:	d022      	beq.n	8020404 <__gethex+0x2a0>
 80203be:	2b03      	cmp	r3, #3
 80203c0:	d024      	beq.n	802040c <__gethex+0x2a8>
 80203c2:	2b01      	cmp	r3, #1
 80203c4:	d115      	bne.n	80203f2 <__gethex+0x28e>
 80203c6:	42ae      	cmp	r6, r5
 80203c8:	d113      	bne.n	80203f2 <__gethex+0x28e>
 80203ca:	2e01      	cmp	r6, #1
 80203cc:	d10b      	bne.n	80203e6 <__gethex+0x282>
 80203ce:	9a02      	ldr	r2, [sp, #8]
 80203d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80203d4:	6013      	str	r3, [r2, #0]
 80203d6:	2301      	movs	r3, #1
 80203d8:	6123      	str	r3, [r4, #16]
 80203da:	f8ca 3000 	str.w	r3, [sl]
 80203de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203e0:	2562      	movs	r5, #98	@ 0x62
 80203e2:	601c      	str	r4, [r3, #0]
 80203e4:	e73a      	b.n	802025c <__gethex+0xf8>
 80203e6:	1e71      	subs	r1, r6, #1
 80203e8:	4620      	mov	r0, r4
 80203ea:	f7fe fc18 	bl	801ec1e <__any_on>
 80203ee:	2800      	cmp	r0, #0
 80203f0:	d1ed      	bne.n	80203ce <__gethex+0x26a>
 80203f2:	9801      	ldr	r0, [sp, #4]
 80203f4:	4621      	mov	r1, r4
 80203f6:	f7fd ffc1 	bl	801e37c <_Bfree>
 80203fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80203fc:	2300      	movs	r3, #0
 80203fe:	6013      	str	r3, [r2, #0]
 8020400:	2550      	movs	r5, #80	@ 0x50
 8020402:	e72b      	b.n	802025c <__gethex+0xf8>
 8020404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020406:	2b00      	cmp	r3, #0
 8020408:	d1f3      	bne.n	80203f2 <__gethex+0x28e>
 802040a:	e7e0      	b.n	80203ce <__gethex+0x26a>
 802040c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802040e:	2b00      	cmp	r3, #0
 8020410:	d1dd      	bne.n	80203ce <__gethex+0x26a>
 8020412:	e7ee      	b.n	80203f2 <__gethex+0x28e>
 8020414:	08023230 	.word	0x08023230
 8020418:	080230c8 	.word	0x080230c8
 802041c:	080232a1 	.word	0x080232a1
 8020420:	1e6f      	subs	r7, r5, #1
 8020422:	f1b9 0f00 	cmp.w	r9, #0
 8020426:	d130      	bne.n	802048a <__gethex+0x326>
 8020428:	b127      	cbz	r7, 8020434 <__gethex+0x2d0>
 802042a:	4639      	mov	r1, r7
 802042c:	4620      	mov	r0, r4
 802042e:	f7fe fbf6 	bl	801ec1e <__any_on>
 8020432:	4681      	mov	r9, r0
 8020434:	117a      	asrs	r2, r7, #5
 8020436:	2301      	movs	r3, #1
 8020438:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802043c:	f007 071f 	and.w	r7, r7, #31
 8020440:	40bb      	lsls	r3, r7
 8020442:	4213      	tst	r3, r2
 8020444:	4629      	mov	r1, r5
 8020446:	4620      	mov	r0, r4
 8020448:	bf18      	it	ne
 802044a:	f049 0902 	orrne.w	r9, r9, #2
 802044e:	f7ff fe22 	bl	8020096 <rshift>
 8020452:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8020456:	1b76      	subs	r6, r6, r5
 8020458:	2502      	movs	r5, #2
 802045a:	f1b9 0f00 	cmp.w	r9, #0
 802045e:	d047      	beq.n	80204f0 <__gethex+0x38c>
 8020460:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020464:	2b02      	cmp	r3, #2
 8020466:	d015      	beq.n	8020494 <__gethex+0x330>
 8020468:	2b03      	cmp	r3, #3
 802046a:	d017      	beq.n	802049c <__gethex+0x338>
 802046c:	2b01      	cmp	r3, #1
 802046e:	d109      	bne.n	8020484 <__gethex+0x320>
 8020470:	f019 0f02 	tst.w	r9, #2
 8020474:	d006      	beq.n	8020484 <__gethex+0x320>
 8020476:	f8da 3000 	ldr.w	r3, [sl]
 802047a:	ea49 0903 	orr.w	r9, r9, r3
 802047e:	f019 0f01 	tst.w	r9, #1
 8020482:	d10e      	bne.n	80204a2 <__gethex+0x33e>
 8020484:	f045 0510 	orr.w	r5, r5, #16
 8020488:	e032      	b.n	80204f0 <__gethex+0x38c>
 802048a:	f04f 0901 	mov.w	r9, #1
 802048e:	e7d1      	b.n	8020434 <__gethex+0x2d0>
 8020490:	2501      	movs	r5, #1
 8020492:	e7e2      	b.n	802045a <__gethex+0x2f6>
 8020494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020496:	f1c3 0301 	rsb	r3, r3, #1
 802049a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802049c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d0f0      	beq.n	8020484 <__gethex+0x320>
 80204a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80204a6:	f104 0314 	add.w	r3, r4, #20
 80204aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80204ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80204b2:	f04f 0c00 	mov.w	ip, #0
 80204b6:	4618      	mov	r0, r3
 80204b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80204bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80204c0:	d01b      	beq.n	80204fa <__gethex+0x396>
 80204c2:	3201      	adds	r2, #1
 80204c4:	6002      	str	r2, [r0, #0]
 80204c6:	2d02      	cmp	r5, #2
 80204c8:	f104 0314 	add.w	r3, r4, #20
 80204cc:	d13c      	bne.n	8020548 <__gethex+0x3e4>
 80204ce:	f8d8 2000 	ldr.w	r2, [r8]
 80204d2:	3a01      	subs	r2, #1
 80204d4:	42b2      	cmp	r2, r6
 80204d6:	d109      	bne.n	80204ec <__gethex+0x388>
 80204d8:	1171      	asrs	r1, r6, #5
 80204da:	2201      	movs	r2, #1
 80204dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80204e0:	f006 061f 	and.w	r6, r6, #31
 80204e4:	fa02 f606 	lsl.w	r6, r2, r6
 80204e8:	421e      	tst	r6, r3
 80204ea:	d13a      	bne.n	8020562 <__gethex+0x3fe>
 80204ec:	f045 0520 	orr.w	r5, r5, #32
 80204f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204f2:	601c      	str	r4, [r3, #0]
 80204f4:	9b02      	ldr	r3, [sp, #8]
 80204f6:	601f      	str	r7, [r3, #0]
 80204f8:	e6b0      	b.n	802025c <__gethex+0xf8>
 80204fa:	4299      	cmp	r1, r3
 80204fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8020500:	d8d9      	bhi.n	80204b6 <__gethex+0x352>
 8020502:	68a3      	ldr	r3, [r4, #8]
 8020504:	459b      	cmp	fp, r3
 8020506:	db17      	blt.n	8020538 <__gethex+0x3d4>
 8020508:	6861      	ldr	r1, [r4, #4]
 802050a:	9801      	ldr	r0, [sp, #4]
 802050c:	3101      	adds	r1, #1
 802050e:	f7fd fef5 	bl	801e2fc <_Balloc>
 8020512:	4681      	mov	r9, r0
 8020514:	b918      	cbnz	r0, 802051e <__gethex+0x3ba>
 8020516:	4b1a      	ldr	r3, [pc, #104]	@ (8020580 <__gethex+0x41c>)
 8020518:	4602      	mov	r2, r0
 802051a:	2184      	movs	r1, #132	@ 0x84
 802051c:	e6c5      	b.n	80202aa <__gethex+0x146>
 802051e:	6922      	ldr	r2, [r4, #16]
 8020520:	3202      	adds	r2, #2
 8020522:	f104 010c 	add.w	r1, r4, #12
 8020526:	0092      	lsls	r2, r2, #2
 8020528:	300c      	adds	r0, #12
 802052a:	f7fd f81e 	bl	801d56a <memcpy>
 802052e:	4621      	mov	r1, r4
 8020530:	9801      	ldr	r0, [sp, #4]
 8020532:	f7fd ff23 	bl	801e37c <_Bfree>
 8020536:	464c      	mov	r4, r9
 8020538:	6923      	ldr	r3, [r4, #16]
 802053a:	1c5a      	adds	r2, r3, #1
 802053c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020540:	6122      	str	r2, [r4, #16]
 8020542:	2201      	movs	r2, #1
 8020544:	615a      	str	r2, [r3, #20]
 8020546:	e7be      	b.n	80204c6 <__gethex+0x362>
 8020548:	6922      	ldr	r2, [r4, #16]
 802054a:	455a      	cmp	r2, fp
 802054c:	dd0b      	ble.n	8020566 <__gethex+0x402>
 802054e:	2101      	movs	r1, #1
 8020550:	4620      	mov	r0, r4
 8020552:	f7ff fda0 	bl	8020096 <rshift>
 8020556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802055a:	3701      	adds	r7, #1
 802055c:	42bb      	cmp	r3, r7
 802055e:	f6ff aee0 	blt.w	8020322 <__gethex+0x1be>
 8020562:	2501      	movs	r5, #1
 8020564:	e7c2      	b.n	80204ec <__gethex+0x388>
 8020566:	f016 061f 	ands.w	r6, r6, #31
 802056a:	d0fa      	beq.n	8020562 <__gethex+0x3fe>
 802056c:	4453      	add	r3, sl
 802056e:	f1c6 0620 	rsb	r6, r6, #32
 8020572:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020576:	f7fd ffb3 	bl	801e4e0 <__hi0bits>
 802057a:	42b0      	cmp	r0, r6
 802057c:	dbe7      	blt.n	802054e <__gethex+0x3ea>
 802057e:	e7f0      	b.n	8020562 <__gethex+0x3fe>
 8020580:	080230c8 	.word	0x080230c8

08020584 <L_shift>:
 8020584:	f1c2 0208 	rsb	r2, r2, #8
 8020588:	0092      	lsls	r2, r2, #2
 802058a:	b570      	push	{r4, r5, r6, lr}
 802058c:	f1c2 0620 	rsb	r6, r2, #32
 8020590:	6843      	ldr	r3, [r0, #4]
 8020592:	6804      	ldr	r4, [r0, #0]
 8020594:	fa03 f506 	lsl.w	r5, r3, r6
 8020598:	432c      	orrs	r4, r5
 802059a:	40d3      	lsrs	r3, r2
 802059c:	6004      	str	r4, [r0, #0]
 802059e:	f840 3f04 	str.w	r3, [r0, #4]!
 80205a2:	4288      	cmp	r0, r1
 80205a4:	d3f4      	bcc.n	8020590 <L_shift+0xc>
 80205a6:	bd70      	pop	{r4, r5, r6, pc}

080205a8 <__match>:
 80205a8:	b530      	push	{r4, r5, lr}
 80205aa:	6803      	ldr	r3, [r0, #0]
 80205ac:	3301      	adds	r3, #1
 80205ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80205b2:	b914      	cbnz	r4, 80205ba <__match+0x12>
 80205b4:	6003      	str	r3, [r0, #0]
 80205b6:	2001      	movs	r0, #1
 80205b8:	bd30      	pop	{r4, r5, pc}
 80205ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80205be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80205c2:	2d19      	cmp	r5, #25
 80205c4:	bf98      	it	ls
 80205c6:	3220      	addls	r2, #32
 80205c8:	42a2      	cmp	r2, r4
 80205ca:	d0f0      	beq.n	80205ae <__match+0x6>
 80205cc:	2000      	movs	r0, #0
 80205ce:	e7f3      	b.n	80205b8 <__match+0x10>

080205d0 <__hexnan>:
 80205d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205d4:	680b      	ldr	r3, [r1, #0]
 80205d6:	6801      	ldr	r1, [r0, #0]
 80205d8:	115e      	asrs	r6, r3, #5
 80205da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80205de:	f013 031f 	ands.w	r3, r3, #31
 80205e2:	b087      	sub	sp, #28
 80205e4:	bf18      	it	ne
 80205e6:	3604      	addne	r6, #4
 80205e8:	2500      	movs	r5, #0
 80205ea:	1f37      	subs	r7, r6, #4
 80205ec:	4682      	mov	sl, r0
 80205ee:	4690      	mov	r8, r2
 80205f0:	9301      	str	r3, [sp, #4]
 80205f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80205f6:	46b9      	mov	r9, r7
 80205f8:	463c      	mov	r4, r7
 80205fa:	9502      	str	r5, [sp, #8]
 80205fc:	46ab      	mov	fp, r5
 80205fe:	784a      	ldrb	r2, [r1, #1]
 8020600:	1c4b      	adds	r3, r1, #1
 8020602:	9303      	str	r3, [sp, #12]
 8020604:	b342      	cbz	r2, 8020658 <__hexnan+0x88>
 8020606:	4610      	mov	r0, r2
 8020608:	9105      	str	r1, [sp, #20]
 802060a:	9204      	str	r2, [sp, #16]
 802060c:	f7ff fd95 	bl	802013a <__hexdig_fun>
 8020610:	2800      	cmp	r0, #0
 8020612:	d151      	bne.n	80206b8 <__hexnan+0xe8>
 8020614:	9a04      	ldr	r2, [sp, #16]
 8020616:	9905      	ldr	r1, [sp, #20]
 8020618:	2a20      	cmp	r2, #32
 802061a:	d818      	bhi.n	802064e <__hexnan+0x7e>
 802061c:	9b02      	ldr	r3, [sp, #8]
 802061e:	459b      	cmp	fp, r3
 8020620:	dd13      	ble.n	802064a <__hexnan+0x7a>
 8020622:	454c      	cmp	r4, r9
 8020624:	d206      	bcs.n	8020634 <__hexnan+0x64>
 8020626:	2d07      	cmp	r5, #7
 8020628:	dc04      	bgt.n	8020634 <__hexnan+0x64>
 802062a:	462a      	mov	r2, r5
 802062c:	4649      	mov	r1, r9
 802062e:	4620      	mov	r0, r4
 8020630:	f7ff ffa8 	bl	8020584 <L_shift>
 8020634:	4544      	cmp	r4, r8
 8020636:	d952      	bls.n	80206de <__hexnan+0x10e>
 8020638:	2300      	movs	r3, #0
 802063a:	f1a4 0904 	sub.w	r9, r4, #4
 802063e:	f844 3c04 	str.w	r3, [r4, #-4]
 8020642:	f8cd b008 	str.w	fp, [sp, #8]
 8020646:	464c      	mov	r4, r9
 8020648:	461d      	mov	r5, r3
 802064a:	9903      	ldr	r1, [sp, #12]
 802064c:	e7d7      	b.n	80205fe <__hexnan+0x2e>
 802064e:	2a29      	cmp	r2, #41	@ 0x29
 8020650:	d157      	bne.n	8020702 <__hexnan+0x132>
 8020652:	3102      	adds	r1, #2
 8020654:	f8ca 1000 	str.w	r1, [sl]
 8020658:	f1bb 0f00 	cmp.w	fp, #0
 802065c:	d051      	beq.n	8020702 <__hexnan+0x132>
 802065e:	454c      	cmp	r4, r9
 8020660:	d206      	bcs.n	8020670 <__hexnan+0xa0>
 8020662:	2d07      	cmp	r5, #7
 8020664:	dc04      	bgt.n	8020670 <__hexnan+0xa0>
 8020666:	462a      	mov	r2, r5
 8020668:	4649      	mov	r1, r9
 802066a:	4620      	mov	r0, r4
 802066c:	f7ff ff8a 	bl	8020584 <L_shift>
 8020670:	4544      	cmp	r4, r8
 8020672:	d936      	bls.n	80206e2 <__hexnan+0x112>
 8020674:	f1a8 0204 	sub.w	r2, r8, #4
 8020678:	4623      	mov	r3, r4
 802067a:	f853 1b04 	ldr.w	r1, [r3], #4
 802067e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020682:	429f      	cmp	r7, r3
 8020684:	d2f9      	bcs.n	802067a <__hexnan+0xaa>
 8020686:	1b3b      	subs	r3, r7, r4
 8020688:	f023 0303 	bic.w	r3, r3, #3
 802068c:	3304      	adds	r3, #4
 802068e:	3401      	adds	r4, #1
 8020690:	3e03      	subs	r6, #3
 8020692:	42b4      	cmp	r4, r6
 8020694:	bf88      	it	hi
 8020696:	2304      	movhi	r3, #4
 8020698:	4443      	add	r3, r8
 802069a:	2200      	movs	r2, #0
 802069c:	f843 2b04 	str.w	r2, [r3], #4
 80206a0:	429f      	cmp	r7, r3
 80206a2:	d2fb      	bcs.n	802069c <__hexnan+0xcc>
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	b91b      	cbnz	r3, 80206b0 <__hexnan+0xe0>
 80206a8:	4547      	cmp	r7, r8
 80206aa:	d128      	bne.n	80206fe <__hexnan+0x12e>
 80206ac:	2301      	movs	r3, #1
 80206ae:	603b      	str	r3, [r7, #0]
 80206b0:	2005      	movs	r0, #5
 80206b2:	b007      	add	sp, #28
 80206b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b8:	3501      	adds	r5, #1
 80206ba:	2d08      	cmp	r5, #8
 80206bc:	f10b 0b01 	add.w	fp, fp, #1
 80206c0:	dd06      	ble.n	80206d0 <__hexnan+0x100>
 80206c2:	4544      	cmp	r4, r8
 80206c4:	d9c1      	bls.n	802064a <__hexnan+0x7a>
 80206c6:	2300      	movs	r3, #0
 80206c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80206cc:	2501      	movs	r5, #1
 80206ce:	3c04      	subs	r4, #4
 80206d0:	6822      	ldr	r2, [r4, #0]
 80206d2:	f000 000f 	and.w	r0, r0, #15
 80206d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80206da:	6020      	str	r0, [r4, #0]
 80206dc:	e7b5      	b.n	802064a <__hexnan+0x7a>
 80206de:	2508      	movs	r5, #8
 80206e0:	e7b3      	b.n	802064a <__hexnan+0x7a>
 80206e2:	9b01      	ldr	r3, [sp, #4]
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d0dd      	beq.n	80206a4 <__hexnan+0xd4>
 80206e8:	f1c3 0320 	rsb	r3, r3, #32
 80206ec:	f04f 32ff 	mov.w	r2, #4294967295
 80206f0:	40da      	lsrs	r2, r3
 80206f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80206f6:	4013      	ands	r3, r2
 80206f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80206fc:	e7d2      	b.n	80206a4 <__hexnan+0xd4>
 80206fe:	3f04      	subs	r7, #4
 8020700:	e7d0      	b.n	80206a4 <__hexnan+0xd4>
 8020702:	2004      	movs	r0, #4
 8020704:	e7d5      	b.n	80206b2 <__hexnan+0xe2>

08020706 <__ascii_mbtowc>:
 8020706:	b082      	sub	sp, #8
 8020708:	b901      	cbnz	r1, 802070c <__ascii_mbtowc+0x6>
 802070a:	a901      	add	r1, sp, #4
 802070c:	b142      	cbz	r2, 8020720 <__ascii_mbtowc+0x1a>
 802070e:	b14b      	cbz	r3, 8020724 <__ascii_mbtowc+0x1e>
 8020710:	7813      	ldrb	r3, [r2, #0]
 8020712:	600b      	str	r3, [r1, #0]
 8020714:	7812      	ldrb	r2, [r2, #0]
 8020716:	1e10      	subs	r0, r2, #0
 8020718:	bf18      	it	ne
 802071a:	2001      	movne	r0, #1
 802071c:	b002      	add	sp, #8
 802071e:	4770      	bx	lr
 8020720:	4610      	mov	r0, r2
 8020722:	e7fb      	b.n	802071c <__ascii_mbtowc+0x16>
 8020724:	f06f 0001 	mvn.w	r0, #1
 8020728:	e7f8      	b.n	802071c <__ascii_mbtowc+0x16>

0802072a <_realloc_r>:
 802072a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802072e:	4680      	mov	r8, r0
 8020730:	4615      	mov	r5, r2
 8020732:	460c      	mov	r4, r1
 8020734:	b921      	cbnz	r1, 8020740 <_realloc_r+0x16>
 8020736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802073a:	4611      	mov	r1, r2
 802073c:	f7fb bbaa 	b.w	801be94 <_malloc_r>
 8020740:	b92a      	cbnz	r2, 802074e <_realloc_r+0x24>
 8020742:	f7fd fd91 	bl	801e268 <_free_r>
 8020746:	2400      	movs	r4, #0
 8020748:	4620      	mov	r0, r4
 802074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802074e:	f000 f86b 	bl	8020828 <_malloc_usable_size_r>
 8020752:	4285      	cmp	r5, r0
 8020754:	4606      	mov	r6, r0
 8020756:	d802      	bhi.n	802075e <_realloc_r+0x34>
 8020758:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802075c:	d8f4      	bhi.n	8020748 <_realloc_r+0x1e>
 802075e:	4629      	mov	r1, r5
 8020760:	4640      	mov	r0, r8
 8020762:	f7fb fb97 	bl	801be94 <_malloc_r>
 8020766:	4607      	mov	r7, r0
 8020768:	2800      	cmp	r0, #0
 802076a:	d0ec      	beq.n	8020746 <_realloc_r+0x1c>
 802076c:	42b5      	cmp	r5, r6
 802076e:	462a      	mov	r2, r5
 8020770:	4621      	mov	r1, r4
 8020772:	bf28      	it	cs
 8020774:	4632      	movcs	r2, r6
 8020776:	f7fc fef8 	bl	801d56a <memcpy>
 802077a:	4621      	mov	r1, r4
 802077c:	4640      	mov	r0, r8
 802077e:	f7fd fd73 	bl	801e268 <_free_r>
 8020782:	463c      	mov	r4, r7
 8020784:	e7e0      	b.n	8020748 <_realloc_r+0x1e>

08020786 <__ascii_wctomb>:
 8020786:	4603      	mov	r3, r0
 8020788:	4608      	mov	r0, r1
 802078a:	b141      	cbz	r1, 802079e <__ascii_wctomb+0x18>
 802078c:	2aff      	cmp	r2, #255	@ 0xff
 802078e:	d904      	bls.n	802079a <__ascii_wctomb+0x14>
 8020790:	228a      	movs	r2, #138	@ 0x8a
 8020792:	601a      	str	r2, [r3, #0]
 8020794:	f04f 30ff 	mov.w	r0, #4294967295
 8020798:	4770      	bx	lr
 802079a:	700a      	strb	r2, [r1, #0]
 802079c:	2001      	movs	r0, #1
 802079e:	4770      	bx	lr

080207a0 <_raise_r>:
 80207a0:	291f      	cmp	r1, #31
 80207a2:	b538      	push	{r3, r4, r5, lr}
 80207a4:	4605      	mov	r5, r0
 80207a6:	460c      	mov	r4, r1
 80207a8:	d904      	bls.n	80207b4 <_raise_r+0x14>
 80207aa:	2316      	movs	r3, #22
 80207ac:	6003      	str	r3, [r0, #0]
 80207ae:	f04f 30ff 	mov.w	r0, #4294967295
 80207b2:	bd38      	pop	{r3, r4, r5, pc}
 80207b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80207b6:	b112      	cbz	r2, 80207be <_raise_r+0x1e>
 80207b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80207bc:	b94b      	cbnz	r3, 80207d2 <_raise_r+0x32>
 80207be:	4628      	mov	r0, r5
 80207c0:	f000 f830 	bl	8020824 <_getpid_r>
 80207c4:	4622      	mov	r2, r4
 80207c6:	4601      	mov	r1, r0
 80207c8:	4628      	mov	r0, r5
 80207ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80207ce:	f000 b817 	b.w	8020800 <_kill_r>
 80207d2:	2b01      	cmp	r3, #1
 80207d4:	d00a      	beq.n	80207ec <_raise_r+0x4c>
 80207d6:	1c59      	adds	r1, r3, #1
 80207d8:	d103      	bne.n	80207e2 <_raise_r+0x42>
 80207da:	2316      	movs	r3, #22
 80207dc:	6003      	str	r3, [r0, #0]
 80207de:	2001      	movs	r0, #1
 80207e0:	e7e7      	b.n	80207b2 <_raise_r+0x12>
 80207e2:	2100      	movs	r1, #0
 80207e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80207e8:	4620      	mov	r0, r4
 80207ea:	4798      	blx	r3
 80207ec:	2000      	movs	r0, #0
 80207ee:	e7e0      	b.n	80207b2 <_raise_r+0x12>

080207f0 <raise>:
 80207f0:	4b02      	ldr	r3, [pc, #8]	@ (80207fc <raise+0xc>)
 80207f2:	4601      	mov	r1, r0
 80207f4:	6818      	ldr	r0, [r3, #0]
 80207f6:	f7ff bfd3 	b.w	80207a0 <_raise_r>
 80207fa:	bf00      	nop
 80207fc:	20000174 	.word	0x20000174

08020800 <_kill_r>:
 8020800:	b538      	push	{r3, r4, r5, lr}
 8020802:	4d07      	ldr	r5, [pc, #28]	@ (8020820 <_kill_r+0x20>)
 8020804:	2300      	movs	r3, #0
 8020806:	4604      	mov	r4, r0
 8020808:	4608      	mov	r0, r1
 802080a:	4611      	mov	r1, r2
 802080c:	602b      	str	r3, [r5, #0]
 802080e:	f7e3 f91b 	bl	8003a48 <_kill>
 8020812:	1c43      	adds	r3, r0, #1
 8020814:	d102      	bne.n	802081c <_kill_r+0x1c>
 8020816:	682b      	ldr	r3, [r5, #0]
 8020818:	b103      	cbz	r3, 802081c <_kill_r+0x1c>
 802081a:	6023      	str	r3, [r4, #0]
 802081c:	bd38      	pop	{r3, r4, r5, pc}
 802081e:	bf00      	nop
 8020820:	2000381c 	.word	0x2000381c

08020824 <_getpid_r>:
 8020824:	f7e3 b908 	b.w	8003a38 <_getpid>

08020828 <_malloc_usable_size_r>:
 8020828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802082c:	1f18      	subs	r0, r3, #4
 802082e:	2b00      	cmp	r3, #0
 8020830:	bfbc      	itt	lt
 8020832:	580b      	ldrlt	r3, [r1, r0]
 8020834:	18c0      	addlt	r0, r0, r3
 8020836:	4770      	bx	lr

08020838 <_init>:
 8020838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802083a:	bf00      	nop
 802083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802083e:	bc08      	pop	{r3}
 8020840:	469e      	mov	lr, r3
 8020842:	4770      	bx	lr

08020844 <_fini>:
 8020844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020846:	bf00      	nop
 8020848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802084a:	bc08      	pop	{r3}
 802084c:	469e      	mov	lr, r3
 802084e:	4770      	bx	lr
