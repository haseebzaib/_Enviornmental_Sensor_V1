
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fb28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002358  0801fcc8  0801fcc8  0002fcc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022020  08022020  00040314  2**0
                  CONTENTS
  4 .ARM          00000008  08022020  08022020  00032020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022028  08022028  00040314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022028  08022028  00032028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802202c  0802202c  0003202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08022030  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003308  20000314  08022344  00040314  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000361c  08022344  0004361c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003768f  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008118  00000000  00000000  000779d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de0  00000000  00000000  0007faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa0  00000000  00000000  000828d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f6f  00000000  00000000  00085370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f9ae  00000000  00000000  000ab2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b360d  00000000  00000000  000eac8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e29a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d654  00000000  00000000  0019e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000314 	.word	0x20000314
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801fcb0 	.word	0x0801fcb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000318 	.word	0x20000318
 80001dc:	0801fcb0 	.word	0x0801fcb0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03d      	b.n	80010b8 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21b      	bcs.n	800107c <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	43db      	mvns	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	440b      	add	r3, r1
 800105e:	4002      	ands	r2, r0
 8001060:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4403      	add	r3, r0
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e01a      	b.n	80010b2 <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	43db      	mvns	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	4002      	ands	r2, r0
 8001096:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4403      	add	r3, r0
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d3bd      	bcc.n	800103c <setSoftPWM+0x14>
		}
	}

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;

void toggle_blue_led()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
		if(blue_led_pwm_val != 0)
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <toggle_blue_led+0x34>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <toggle_blue_led+0x16>
    		{
			blue_led_pwm_val = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <toggle_blue_led+0x34>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	e003      	b.n	80010ee <toggle_blue_led+0x1e>
    		}
    		else
    		{
    			blue_led_pwm_val = 1000;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <toggle_blue_led+0x34>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	801a      	strh	r2, [r3, #0]
    		}
    		BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <toggle_blue_led+0x34>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <toggle_blue_led+0x38>)
 80010f6:	4619      	mov	r1, r3
 80010f8:	2008      	movs	r0, #8
 80010fa:	f7ff ff95 	bl	8001028 <setSoftPWM>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200012d6 	.word	0x200012d6
 8001108:	20000330 	.word	0x20000330

0800110c <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <pir_interrupt+0x2c>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001116:	2101      	movs	r1, #1
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <pir_interrupt+0x30>)
 800111a:	f004 fad1 	bl	80056c0 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <pir_interrupt+0x34>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 800112a:	e002      	b.n	8001132 <pir_interrupt+0x26>
		pir_motion_flag = 0;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <pir_interrupt+0x34>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200014bd 	.word	0x200014bd
 800113c:	40020000 	.word	0x40020000
 8001140:	200014bc 	.word	0x200014bc

08001144 <timer_interrupt>:

void timer_interrupt() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <timer_interrupt+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <timer_interrupt+0x2c>)
 8001150:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <timer_interrupt+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d302      	bcc.n	8001162 <timer_interrupt+0x1e>
		time_keep = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <timer_interrupt+0x2c>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 8001162:	f002 fae1 	bl	8003728 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	4a02      	ldr	r2, [pc, #8]	; (8001174 <timer_interrupt+0x30>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200014b0 	.word	0x200014b0
 8001174:	200016f4 	.word	0x200016f4

08001178 <power_off_detect>:

void power_off_detect() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 800117c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <power_off_detect+0x14>)
 8001182:	f004 fa9d 	bl	80056c0 <HAL_GPIO_ReadPin>
		//_RunTime_Packet.pwr_off_det = 1;
	}
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020000 	.word	0x40020000

08001190 <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_DMA_Init+0x3c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <MX_DMA_Init+0x3c>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2044      	movs	r0, #68	; 0x44
 80011b8:	f003 f899 	bl	80042ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011bc:	2044      	movs	r0, #68	; 0x44
 80011be:	f003 f8b2 	bl	8004326 <HAL_NVIC_EnableIRQ>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <pwr_off_detected>:

static void pwr_off_detected() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <pwr_off_detected+0x30>)
 80011d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00d      	beq.n	80011fa <pwr_off_detected+0x2a>
		_RunTime_Packet.pwr_off_det = 0;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <pwr_off_detected+0x30>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(900);
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <pwr_off_detected+0x34>)
 80011e8:	f44f 7161 	mov.w	r1, #900	; 0x384
 80011ec:	2008      	movs	r0, #8
 80011ee:	f7ff ff1b 	bl	8001028 <setSoftPWM>
		HAL_Delay(5000);
 80011f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80011f6:	f002 faa3 	bl	8003740 <HAL_Delay>

	}
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20001470 	.word	0x20001470
 8001204:	20000330 	.word	0x20000330

08001208 <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f019 ffac 	bl	801b174 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <clock_speed_slow+0xbc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <clock_speed_slow+0xbc>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <clock_speed_slow+0xbc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <clock_speed_slow+0xc0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <clock_speed_slow+0xc0>)
 8001256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <clock_speed_slow+0xc0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001268:	2306      	movs	r3, #6
 800126a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fe8d 	bl	8007fa0 <HAL_RCC_OscConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <clock_speed_slow+0x88>
		Error_Handler();
 800128c:	f001 fd0e 	bl	8002cac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 8001298:	23c0      	movs	r3, #192	; 0xc0
 800129a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f007 f8f0 	bl	8008490 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <clock_speed_slow+0xb2>
		Error_Handler();
 80012b6:	f001 fcf9 	bl	8002cac <Error_Handler>
	}

}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <clock_speed_high+0x11c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <clock_speed_high+0x11c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 80012e6:	bf00      	nop
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <clock_speed_high+0x11c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d106      	bne.n	8001302 <clock_speed_high+0x36>
 80012f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f2      	bne.n	80012e8 <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <clock_speed_high+0x11c>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <clock_speed_high+0x11c>)
 8001308:	f023 0303 	bic.w	r3, r3, #3
 800130c:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <clock_speed_high+0x11c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <clock_speed_high+0x11c>)
 8001314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001318:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2230      	movs	r2, #48	; 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f019 ff26 	bl	801b174 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <clock_speed_high+0x11c>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <clock_speed_high+0x11c>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <clock_speed_high+0x11c>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <clock_speed_high+0x120>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <clock_speed_high+0x120>)
 8001362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <clock_speed_high+0x120>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001374:	2305      	movs	r3, #5
 8001376:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800137e:	2301      	movs	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 800138c:	2319      	movs	r3, #25
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001390:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001396:	2304      	movs	r3, #4
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800139a:	2307      	movs	r3, #7
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fdfc 	bl	8007fa0 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <clock_speed_high+0xe6>
		Error_Handler();
 80013ae:	f001 fc7d 	bl	8002cac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	2102      	movs	r1, #2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 f85e 	bl	8008490 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <clock_speed_high+0x112>
		Error_Handler();
 80013da:	f001 fc67 	bl	8002cac <Error_Handler>
	}

}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <load_param+0x78>)
 80013f8:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 8001400:	b29b      	uxth	r3, r3
 8001402:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 8001406:	4293      	cmp	r3, r2
 8001408:	d109      	bne.n	800141e <load_param+0x2e>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <load_param+0x7c>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f240 1397 	movw	r3, #407	; 0x197
 8001416:	461a      	mov	r2, r3
 8001418:	f019 fe84 	bl	801b124 <memcpy>
 800141c:	e008      	b.n	8001430 <load_param+0x40>
	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <load_param+0x7c>)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <load_param+0x80>)
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f240 1397 	movw	r3, #407	; 0x197
 800142a:	461a      	mov	r2, r3
 800142c:	f019 fe7a 	bl	801b124 <memcpy>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 8001430:	4910      	ldr	r1, [pc, #64]	; (8001474 <load_param+0x84>)
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <load_param+0x88>)
 8001434:	f01a fed9 	bl	801c1ea <strstr>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <load_param+0x58>
		_RunTime_Packet.fileformat_selection = 1;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <load_param+0x8c>)
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001446:	e00a      	b.n	800145e <load_param+0x6e>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001448:	490d      	ldr	r1, [pc, #52]	; (8001480 <load_param+0x90>)
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <load_param+0x88>)
 800144c:	f01a fecd 	bl	801c1ea <strstr>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <load_param+0x6e>
		_RunTime_Packet.fileformat_selection = 0;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <load_param+0x8c>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08060000 	.word	0x08060000
 800146c:	200012d8 	.word	0x200012d8
 8001470:	080214d8 	.word	0x080214d8
 8001474:	0801fcc8 	.word	0x0801fcc8
 8001478:	2000133c 	.word	0x2000133c
 800147c:	20001470 	.word	0x20001470
 8001480:	0801fcd0 	.word	0x0801fcd0

08001484 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148a:	b672      	cpsid	i
}
 800148c:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <store_param+0xc0>)
 8001490:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001492:	f003 fc0d 	bl	8004cb0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <store_param+0xc4>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <store_param+0xc4>)
 800149e:	2202      	movs	r2, #2
 80014a0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <store_param+0xc4>)
 80014a4:	2210      	movs	r2, #16
 80014a6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <store_param+0xc4>)
 80014aa:	2220      	movs	r2, #32
 80014ac:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <store_param+0xc4>)
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <store_param+0xc4>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <store_param+0xc4>)
 80014bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c0:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <store_param+0xc8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <store_param+0xc8>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <store_param+0xc8>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <store_param+0xc8>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	481b      	ldr	r0, [pc, #108]	; (800154c <store_param+0xc8>)
 80014e0:	f003 fd64 	bl	8004fac <HAL_FLASHEx_Erase>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <store_param+0x6e>
		return HAL_FLASH_GetError();
 80014ea:	f003 fc13 	bl	8004d14 <HAL_FLASH_GetError>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e024      	b.n	800153c <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <store_param+0xcc>)
 80014f4:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <store_param+0xd0>)
 80014f8:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 80014fa:	e016      	b.n	800152a <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 80014fc:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	68f9      	ldr	r1, [r7, #12]
 8001504:	2002      	movs	r0, #2
 8001506:	f003 fb7f 	bl	8004c08 <HAL_FLASH_Program>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <store_param+0x9a>

		{
			WrAdr += 4;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3304      	adds	r3, #4
 8001514:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3304      	adds	r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	e005      	b.n	800152a <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 800151e:	f003 fbe9 	bl	8004cf4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001522:	f003 fbf7 	bl	8004d14 <HAL_FLASH_GetError>
 8001526:	4603      	mov	r3, r0
 8001528:	e008      	b.n	800153c <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3e4      	bcc.n	80014fc <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001532:	f003 fbdf 	bl	8004cf4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001536:	b662      	cpsie	i
}
 8001538:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800153a:	2300      	movs	r3, #0

}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200012d8 	.word	0x200012d8
 8001548:	40023c00 	.word	0x40023c00
 800154c:	20001710 	.word	0x20001710
 8001550:	08060197 	.word	0x08060197
 8001554:	08060000 	.word	0x08060000

08001558 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	if (save_param) {
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <save_data+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d022      	beq.n	80015aa <save_data+0x52>
		if (start_timer) {
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <save_data+0x5c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00b      	beq.n	8001584 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <save_data+0x60>)
 800156e:	f008 ffd7 	bl	800a520 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8001572:	4811      	ldr	r0, [pc, #68]	; (80015b8 <save_data+0x60>)
 8001574:	f008 ff72 	bl	800a45c <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <save_data+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <save_data+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <save_data+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800158c:	d30d      	bcc.n	80015aa <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <save_data+0x60>)
 8001590:	f008 ffc6 	bl	800a520 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 8001594:	f7ff ff76 	bl	8001484 <store_param>
			time_keep = 0;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <save_data+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
			save_param = 0;
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <save_data+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <save_data+0x5c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200014ad 	.word	0x200014ad
 80015b4:	200014ae 	.word	0x200014ae
 80015b8:	200018ac 	.word	0x200018ac
 80015bc:	200014b0 	.word	0x200014b0

080015c0 <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

	sensirion_i2c_hal_init();
 80015c6:	f011 f9db 	bl	8012980 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 80015ca:	f011 f88b 	bl	80126e4 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 80015ce:	f010 ff23 	bl	8012418 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 80015d2:	f011 f83b 	bl	801264c <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 80015d6:	1cba      	adds	r2, r7, #2
 80015d8:	1d39      	adds	r1, r7, #4
 80015da:	1dbb      	adds	r3, r7, #6
 80015dc:	4618      	mov	r0, r3
 80015de:	f010 ffdd 	bl	801259c <scd4x_get_serial_number>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <get_scd4x_measurement>:
static void get_scd4x_measurement() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b090      	sub	sp, #64	; 0x40
 80015f0:	af02      	add	r7, sp, #8
	int16_t error = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 80015f6:	f010 fe5f 	bl	80122b8 <scd4x_start_periodic_measurement>
 80015fa:	4603      	mov	r3, r0
 80015fc:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 80015fe:	483e      	ldr	r0, [pc, #248]	; (80016f8 <get_scd4x_measurement+0x10c>)
 8001600:	f011 fa34 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 800160a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800160e:	4618      	mov	r0, r3
 8001610:	f010 ff78 	bl	8012504 <scd4x_get_data_ready_flag>
 8001614:	4603      	mov	r3, r0
 8001616:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 8001618:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800161c:	2b00      	cmp	r3, #0
 800161e:	d066      	beq.n	80016ee <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2,
 8001620:	4a36      	ldr	r2, [pc, #216]	; (80016fc <get_scd4x_measurement+0x110>)
 8001622:	4937      	ldr	r1, [pc, #220]	; (8001700 <get_scd4x_measurement+0x114>)
 8001624:	4837      	ldr	r0, [pc, #220]	; (8001704 <get_scd4x_measurement+0x118>)
 8001626:	f010 fec5 	bl	80123b4 <scd4x_read_measurement>
 800162a:	4603      	mov	r3, r0
 800162c:	86fb      	strh	r3, [r7, #54]	; 0x36
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <get_scd4x_measurement+0x118>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4a35      	ldr	r2, [pc, #212]	; (8001708 <get_scd4x_measurement+0x11c>)
 8001634:	fb82 1203 	smull	r1, r2, r2, r3
 8001638:	1192      	asrs	r2, r2, #6
 800163a:	17db      	asrs	r3, r3, #31
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a31      	ldr	r2, [pc, #196]	; (8001704 <get_scd4x_measurement+0x118>)
 8001640:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <get_scd4x_measurement+0x118>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4a30      	ldr	r2, [pc, #192]	; (8001708 <get_scd4x_measurement+0x11c>)
 8001648:	fb82 1203 	smull	r1, r2, r2, r3
 800164c:	1192      	asrs	r2, r2, #6
 800164e:	17db      	asrs	r3, r3, #31
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4a2c      	ldr	r2, [pc, #176]	; (8001704 <get_scd4x_measurement+0x118>)
 8001654:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <get_scd4x_measurement+0x120>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d047      	beq.n	80016ee <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 800165e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 8001666:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800166a:	463b      	mov	r3, r7
 800166c:	4928      	ldr	r1, [pc, #160]	; (8001710 <get_scd4x_measurement+0x124>)
 800166e:	4618      	mov	r0, r3
 8001670:	f01a fd86 	bl	801c180 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001674:	463b      	mov	r3, r7
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fdbc 	bl	80001f4 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	4639      	mov	r1, r7
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	4823      	ldr	r0, [pc, #140]	; (8001714 <get_scd4x_measurement+0x128>)
 8001688:	f009 ff06 	bl	800b498 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 800168c:	e02f      	b.n	80016ee <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <get_scd4x_measurement+0x118>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d111      	bne.n	80016ba <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 8001696:	463b      	mov	r3, r7
 8001698:	491f      	ldr	r1, [pc, #124]	; (8001718 <get_scd4x_measurement+0x12c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f01a fd70 	bl	801c180 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016a0:	463b      	mov	r3, r7
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fda6 	bl	80001f4 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4639      	mov	r1, r7
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	4818      	ldr	r0, [pc, #96]	; (8001714 <get_scd4x_measurement+0x128>)
 80016b4:	f009 fef0 	bl	800b498 <HAL_UART_Transmit>
}
 80016b8:	e019      	b.n	80016ee <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <get_scd4x_measurement+0x118>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf, "Co2: %d, Temperature: %ld C, Humidity: %ld \r\n",
 80016be:	4619      	mov	r1, r3
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <get_scd4x_measurement+0x118>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <get_scd4x_measurement+0x118>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4638      	mov	r0, r7
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	460a      	mov	r2, r1
 80016d0:	4912      	ldr	r1, [pc, #72]	; (800171c <get_scd4x_measurement+0x130>)
 80016d2:	f01a fd55 	bl	801c180 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016d6:	463b      	mov	r3, r7
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd8b 	bl	80001f4 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4639      	mov	r1, r7
 80016e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <get_scd4x_measurement+0x128>)
 80016ea:	f009 fed5 	bl	800b498 <HAL_UART_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	; 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	20001478 	.word	0x20001478
 8001700:	20001474 	.word	0x20001474
 8001704:	20001470 	.word	0x20001470
 8001708:	10624dd3 	.word	0x10624dd3
 800170c:	200014ac 	.word	0x200014ac
 8001710:	0801fcd8 	.word	0x0801fcd8
 8001714:	2000199c 	.word	0x2000199c
 8001718:	0801fd08 	.word	0x0801fd08
 800171c:	0801fd2c 	.word	0x0801fd2c

08001720 <init_sps30>:
static void init_sps30() {
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <init_sps30+0x34>)
 8001728:	f011 fd94 	bl	8013254 <sensirion_sleep_usec>

	sensirion_uart_open();
 800172c:	f011 fcdc 	bl	80130e8 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4618      	mov	r0, r3
 8001734:	f011 fead 	bl	8013492 <sps30_read_version>
 8001738:	4603      	mov	r3, r0
 800173a:	85fb      	strh	r3, [r7, #46]	; 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4618      	mov	r0, r3
 8001742:	f011 fd9b 	bl	801327c <sps30_get_serial>
 8001746:	4603      	mov	r3, r0
 8001748:	85fb      	strh	r3, [r7, #46]	; 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800174a:	bf00      	nop
 800174c:	3730      	adds	r7, #48	; 0x30
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	000f4240 	.word	0x000f4240

08001758 <get_sps30_measurement>:
static void get_sps30_measurement() {
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b0a0      	sub	sp, #128	; 0x80
 800175e:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001760:	f011 fdb8 	bl	80132d4 <sps30_start_measurement>
 8001764:	4603      	mov	r3, r0
 8001766:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800176a:	483a      	ldr	r0, [pc, #232]	; (8001854 <get_sps30_measurement+0xfc>)
 800176c:	f011 fdde 	bl	801332c <sps30_read_measurement>
 8001770:	4603      	mov	r3, r0
 8001772:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <get_sps30_measurement+0xfc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <get_sps30_measurement+0x100>)
 800177c:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <get_sps30_measurement+0xfc>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a35      	ldr	r2, [pc, #212]	; (8001858 <get_sps30_measurement+0x100>)
 8001784:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <get_sps30_measurement+0xfc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a33      	ldr	r2, [pc, #204]	; (8001858 <get_sps30_measurement+0x100>)
 800178c:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <get_sps30_measurement+0xfc>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4a31      	ldr	r2, [pc, #196]	; (8001858 <get_sps30_measurement+0x100>)
 8001794:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 8001796:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800179a:	2b00      	cmp	r3, #0
 800179c:	db54      	blt.n	8001848 <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <get_sps30_measurement+0x104>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d050      	beq.n	8001848 <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 80017a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017aa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d113      	bne.n	80017e0 <get_sps30_measurement+0x88>
				sprintf(buffer,
 80017b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	463b      	mov	r3, r7
 80017c0:	4927      	ldr	r1, [pc, #156]	; (8001860 <get_sps30_measurement+0x108>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f01a fcdc 	bl	801c180 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80017c8:	463b      	mov	r3, r7
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fd12 	bl	80001f4 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4639      	mov	r1, r7
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	4822      	ldr	r0, [pc, #136]	; (8001864 <get_sps30_measurement+0x10c>)
 80017dc:	f009 fe5c 	bl	800b498 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <get_sps30_measurement+0xfc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fec7 	bl	8000578 <__aeabi_f2d>
 80017ea:	4682      	mov	sl, r0
 80017ec:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <get_sps30_measurement+0xfc>)
 80017f0:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fec0 	bl	8000578 <__aeabi_f2d>
 80017f8:	4604      	mov	r4, r0
 80017fa:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <get_sps30_measurement+0xfc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe feb9 	bl	8000578 <__aeabi_f2d>
 8001806:	4680      	mov	r8, r0
 8001808:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <get_sps30_measurement+0xfc>)
 800180c:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe feb2 	bl	8000578 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4638      	mov	r0, r7
 800181a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800181e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001822:	e9cd 4500 	strd	r4, r5, [sp]
 8001826:	4652      	mov	r2, sl
 8001828:	465b      	mov	r3, fp
 800182a:	490f      	ldr	r1, [pc, #60]	; (8001868 <get_sps30_measurement+0x110>)
 800182c:	f01a fca8 	bl	801c180 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001830:	463b      	mov	r3, r7
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fcde 	bl	80001f4 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	4639      	mov	r1, r7
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <get_sps30_measurement+0x10c>)
 8001844:	f009 fe28 	bl	800b498 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 8001848:	bf00      	nop
 800184a:	3768      	adds	r7, #104	; 0x68
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001852:	bf00      	nop
 8001854:	200016cc 	.word	0x200016cc
 8001858:	20001470 	.word	0x20001470
 800185c:	200014ac 	.word	0x200014ac
 8001860:	0801fd5c 	.word	0x0801fd5c
 8001864:	2000199c 	.word	0x2000199c
 8001868:	0801fd90 	.word	0x0801fd90

0800186c <check_peripheral_error>:
static void check_peripheral_error() {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <check_peripheral_error+0x70>)
 8001872:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <check_peripheral_error+0x1a>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <check_peripheral_error+0x70>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		console_uart_init();
 8001882:	f00e fe2f 	bl	80104e4 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <check_peripheral_error+0x70>)
 8001888:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800188c:	2b00      	cmp	r3, #0
 800188e:	d015      	beq.n	80018bc <check_peripheral_error+0x50>
		_RunTime_Packet.sps30_uart_error = 0;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <check_peripheral_error+0x70>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <check_peripheral_error+0x74>)
 80018a0:	f003 ff26 	bl	80056f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80018a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a8:	f001 ff4a 	bl	8003740 <HAL_Delay>
		enable_5v();
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b2:	480b      	ldr	r0, [pc, #44]	; (80018e0 <check_peripheral_error+0x74>)
 80018b4:	f003 ff1c 	bl	80056f0 <HAL_GPIO_WritePin>
		init_sps30();
 80018b8:	f7ff ff32 	bl	8001720 <init_sps30>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x62 << 1), 5, 100)
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2205      	movs	r2, #5
 80018c0:	21c4      	movs	r1, #196	; 0xc4
 80018c2:	4808      	ldr	r0, [pc, #32]	; (80018e4 <check_peripheral_error+0x78>)
 80018c4:	f004 fbde 	bl	8006084 <HAL_I2C_IsDeviceReady>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <check_peripheral_error+0x6a>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <check_peripheral_error+0x70>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001470 	.word	0x20001470
 80018e0:	40020400 	.word	0x40020400
 80018e4:	2000176c 	.word	0x2000176c

080018e8 <sensor_calibration>:
static void sensor_calibration() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <sensor_calibration+0x48>)
 80018ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <sensor_calibration+0x24>
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <sensor_calibration+0x48>)
 80018f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <sensor_calibration+0x48>)
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		sps30_start_manual_fan_cleaning();
 8001908:	f011 fdaf 	bl	801346a <sps30_start_manual_fan_cleaning>
	}

	if (_RunTime_Packet.CO2_calibration) {
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <sensor_calibration+0x48>)
 800190e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <sensor_calibration+0x42>
		_RunTime_Packet.CO2_calibration = 0;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <sensor_calibration+0x48>)
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		scd4x_perform_forced_recalibration(
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <sensor_calibration+0x48>)
 8001920:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001922:	4904      	ldr	r1, [pc, #16]	; (8001934 <sensor_calibration+0x4c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f010 fd9f 	bl	8012468 <scd4x_perform_forced_recalibration>
				_RunTime_Packet._target_co2_concentration,
				&_RunTime_Packet._frc_correction);
	}

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20001470 	.word	0x20001470
 8001934:	200014a6 	.word	0x200014a6

08001938 <sleep>:
static void sleep() {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <sleep+0x90>)
 800193e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
	RED_LED_PWM(disable_led);
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <sleep+0x90>)
 8001946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
	BLUE_LED_PWM(disable_led);
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <sleep+0x94>)
 800194e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001952:	2008      	movs	r0, #8
 8001954:	f7ff fb68 	bl	8001028 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001958:	481d      	ldr	r0, [pc, #116]	; (80019d0 <sleep+0x98>)
 800195a:	f001 ff9c 	bl	8003896 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	220b      	movs	r2, #11
 8001964:	491b      	ldr	r1, [pc, #108]	; (80019d4 <sleep+0x9c>)
 8001966:	481c      	ldr	r0, [pc, #112]	; (80019d8 <sleep+0xa0>)
 8001968:	f009 fd96 	bl	800b498 <HAL_UART_Transmit>
	disable_5v();
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001972:	481a      	ldr	r0, [pc, #104]	; (80019dc <sleep+0xa4>)
 8001974:	f003 febc 	bl	80056f0 <HAL_GPIO_WritePin>
	disable_motion();
 8001978:	2201      	movs	r2, #1
 800197a:	2102      	movs	r1, #2
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <sleep+0xa8>)
 800197e:	f003 feb7 	bl	80056f0 <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 8001982:	f010 fd49 	bl	8012418 <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 8001986:	f010 fe87 	bl	8012698 <scd4x_power_down>
	console_uart_deinit();
 800198a:	f00e fd9f 	bl	80104cc <console_uart_deinit>
	sensirion_i2c_hal_free();
 800198e:	f011 f829 	bl	80129e4 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001992:	f011 fbe9 	bl	8013168 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001996:	f018 fd9d 	bl	801a4d4 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <sleep+0xac>)
 800199c:	f008 fcaf 	bl	800a2fe <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <sleep+0xb0>)
 80019a2:	f008 fcac 	bl	800a2fe <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 80019a6:	4811      	ldr	r0, [pc, #68]	; (80019ec <sleep+0xb4>)
 80019a8:	f008 fca9 	bl	800a2fe <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 80019ac:	4810      	ldr	r0, [pc, #64]	; (80019f0 <sleep+0xb8>)
 80019ae:	f002 fd95 	bl	80044dc <HAL_DMA_DeInit>

	clock_speed_slow();
 80019b2:	f7ff fc29 	bl	8001208 <clock_speed_slow>

	HAL_SuspendTick();
 80019b6:	f001 fee7 	bl	8003788 <HAL_SuspendTick>




	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f006 fac3 	bl	8007f48 <HAL_PWR_EnterSTOPMode>


}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40000400 	.word	0x40000400
 80019cc:	20000330 	.word	0x20000330
 80019d0:	20001724 	.word	0x20001724
 80019d4:	0801fdc8 	.word	0x0801fdc8
 80019d8:	2000199c 	.word	0x2000199c
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020000 	.word	0x40020000
 80019e4:	20001864 	.word	0x20001864
 80019e8:	200018ac 	.word	0x200018ac
 80019ec:	200018f4 	.word	0x200018f4
 80019f0:	2000193c 	.word	0x2000193c

080019f4 <wakeup>:
static void wakeup() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

	//also add usb stuff


	HAL_ResumeTick();
 80019f8:	f001 fed6 	bl	80037a8 <HAL_ResumeTick>
	clock_speed_high();
 80019fc:	f7ff fc66 	bl	80012cc <clock_speed_high>
	enable_5v();
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a06:	4832      	ldr	r0, [pc, #200]	; (8001ad0 <wakeup+0xdc>)
 8001a08:	f003 fe72 	bl	80056f0 <HAL_GPIO_WritePin>
	enable_motion();
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4830      	ldr	r0, [pc, #192]	; (8001ad4 <wakeup+0xe0>)
 8001a12:	f003 fe6d 	bl	80056f0 <HAL_GPIO_WritePin>
	console_uart_init();
 8001a16:	f00e fd65 	bl	80104e4 <console_uart_init>

	MX_DMA_Init();
 8001a1a:	f7ff fbb9 	bl	8001190 <MX_DMA_Init>
	MX_TIM1_Init();
 8001a1e:	f000 fe45 	bl	80026ac <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a22:	f000 fe93 	bl	800274c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001a26:	f000 fedf 	bl	80027e8 <MX_TIM3_Init>

	init_scd4x_i2c();
 8001a2a:	f7ff fdc9 	bl	80015c0 <init_scd4x_i2c>
	MX_USB_DEVICE_Init(); //initialize usb anyways
 8001a2e:	f018 fd63 	bl	801a4f8 <MX_USB_DEVICE_Init>
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a36:	4827      	ldr	r0, [pc, #156]	; (8001ad4 <wakeup+0xe0>)
 8001a38:	f003 fe42 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <wakeup+0x54>
		init_sps30();
 8001a42:	f7ff fe6d 	bl	8001720 <init_sps30>
 8001a46:	e00f      	b.n	8001a68 <wakeup+0x74>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <wakeup+0xe4>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_start_timer = 1;
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <wakeup+0xe4>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <wakeup+0xe8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001a5e:	f001 fe63 	bl	8003728 <HAL_GetTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <wakeup+0xec>)
 8001a66:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001a68:	481e      	ldr	r0, [pc, #120]	; (8001ae4 <wakeup+0xf0>)
 8001a6a:	f008 fc9d 	bl	800a3a8 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001a6e:	491e      	ldr	r1, [pc, #120]	; (8001ae8 <wakeup+0xf4>)
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <wakeup+0xf8>)
 8001a76:	481e      	ldr	r0, [pc, #120]	; (8001af0 <wakeup+0xfc>)
 8001a78:	f002 fd8e 	bl	8004598 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <wakeup+0xf0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <wakeup+0xf0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8a:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001a8c:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <wakeup+0xf4>)
 8001a8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a92:	2008      	movs	r0, #8
 8001a94:	f7ff fac8 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4816      	ldr	r0, [pc, #88]	; (8001af4 <wakeup+0x100>)
 8001a9c:	f008 fdc8 	bl	800a630 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <wakeup+0x104>)
 8001aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <wakeup+0x100>)
 8001aac:	f008 fdc0 	bl	800a630 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <wakeup+0x104>)
 8001ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab6:	639a      	str	r2, [r3, #56]	; 0x38

	pwr_off_detected();
 8001ab8:	f7ff fb8a 	bl	80011d0 <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <wakeup+0x108>)
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <wakeup+0x10c>)
 8001ac6:	f009 fce7 	bl	800b498 <HAL_UART_Transmit>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	20001470 	.word	0x20001470
 8001adc:	200014b8 	.word	0x200014b8
 8001ae0:	200016fc 	.word	0x200016fc
 8001ae4:	20001864 	.word	0x20001864
 8001ae8:	20000330 	.word	0x20000330
 8001aec:	40020418 	.word	0x40020418
 8001af0:	2000193c 	.word	0x2000193c
 8001af4:	200018f4 	.word	0x200018f4
 8001af8:	40000400 	.word	0x40000400
 8001afc:	0801fdd4 	.word	0x0801fdd4
 8001b00:	2000199c 	.word	0x2000199c

08001b04 <green_led_blink>:

static void green_led_blink() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <green_led_blink+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b0e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b12:	f001 fe15 	bl	8003740 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <green_led_blink+0x4c>)
 8001b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b1e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b22:	f001 fe0d 	bl	8003740 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <green_led_blink+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b2c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b30:	f001 fe06 	bl	8003740 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <green_led_blink+0x4c>)
 8001b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b3c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b40:	f001 fdfe 	bl	8003740 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <green_led_blink+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40000400 	.word	0x40000400

08001b54 <led_awake_routine>:

static void led_awake_routine() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001b58:	4ba6      	ldr	r3, [pc, #664]	; (8001df4 <led_awake_routine+0x2a0>)
 8001b5a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8195 	bne.w	8001e8e <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b68:	48a3      	ldr	r0, [pc, #652]	; (8001df8 <led_awake_routine+0x2a4>)
 8001b6a:	f003 fda9 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d025      	beq.n	8001bc0 <led_awake_routine+0x6c>
				{




			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001b74:	4b9f      	ldr	r3, [pc, #636]	; (8001df4 <led_awake_routine+0x2a0>)
 8001b76:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b7a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001dfc <led_awake_routine+0x2a8>
 8001b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	db0d      	blt.n	8001ba4 <led_awake_routine+0x50>
							GREEN_LED_PWM(0);
 8001b88:	4b9d      	ldr	r3, [pc, #628]	; (8001e00 <led_awake_routine+0x2ac>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
							RED_LED_PWM(disable_led);
 8001b8e:	4b9c      	ldr	r3, [pc, #624]	; (8001e00 <led_awake_routine+0x2ac>)
 8001b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001b96:	4a9b      	ldr	r2, [pc, #620]	; (8001e04 <led_awake_routine+0x2b0>)
 8001b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b9c:	2008      	movs	r0, #8
 8001b9e:	f7ff fa43 	bl	8001028 <setSoftPWM>
			red_led_pwm_val =0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001ba2:	e196      	b.n	8001ed2 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001ba4:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <led_awake_routine+0x2ac>)
 8001ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34
						RED_LED_PWM(disable_led);
 8001bac:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <led_awake_routine+0x2ac>)
 8001bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
						BLUE_LED_PWM(0);
 8001bb4:	4a93      	ldr	r2, [pc, #588]	; (8001e04 <led_awake_routine+0x2b0>)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2008      	movs	r0, #8
 8001bba:	f7ff fa35 	bl	8001028 <setSoftPWM>
}
 8001bbe:	e188      	b.n	8001ed2 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001bc0:	4a90      	ldr	r2, [pc, #576]	; (8001e04 <led_awake_routine+0x2b0>)
 8001bc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bc6:	2008      	movs	r0, #8
 8001bc8:	f7ff fa2e 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001bcc:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <led_awake_routine+0x2a0>)
 8001bce:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bd2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001dfc <led_awake_routine+0x2a8>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	db38      	blt.n	8001c52 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001be0:	4b87      	ldr	r3, [pc, #540]	; (8001e00 <led_awake_routine+0x2ac>)
 8001be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001be8:	4a86      	ldr	r2, [pc, #536]	; (8001e04 <led_awake_routine+0x2b0>)
 8001bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bee:	2008      	movs	r0, #8
 8001bf0:	f7ff fa1a 	bl	8001028 <setSoftPWM>
							if (!green_led_pwm_flag) {
 8001bf4:	4b84      	ldr	r3, [pc, #528]	; (8001e08 <led_awake_routine+0x2b4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <led_awake_routine+0xbc>
								green_led_pwm_val += 5;
 8001bfc:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <led_awake_routine+0x2b8>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3305      	adds	r3, #5
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	e008      	b.n	8001c22 <led_awake_routine+0xce>
								green_led_pwm_val -= 5;
 8001c10:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b05      	subs	r3, #5
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c20:	801a      	strh	r2, [r3, #0]
							if (green_led_pwm_val > 1000) {
 8001c22:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2c:	dd03      	ble.n	8001c36 <led_awake_routine+0xe2>
								green_led_pwm_flag = 1;
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <led_awake_routine+0x2b4>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e007      	b.n	8001c46 <led_awake_routine+0xf2>
							} else if (green_led_pwm_val <= 0) {
 8001c36:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dc02      	bgt.n	8001c46 <led_awake_routine+0xf2>
								green_led_pwm_flag = 0;
 8001c40:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <led_awake_routine+0x2b4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
							GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001c46:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <led_awake_routine+0x2ac>)
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c50:	e13f      	b.n	8001ed2 <led_awake_routine+0x37e>
			else if (_RunTime_Packet.battery_voltage > battery_Low
 8001c52:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <led_awake_routine+0x2a0>)
 8001c54:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c58:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	dd42      	ble.n	8001cec <led_awake_routine+0x198>
						&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <led_awake_routine+0x2a0>)
 8001c68:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c6c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001dfc <led_awake_routine+0x2a8>
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d838      	bhi.n	8001cec <led_awake_routine+0x198>
					RED_LED_PWM(disable_led);
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <led_awake_routine+0x2ac>)
 8001c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
					BLUE_LED_PWM(disable_led);
 8001c82:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <led_awake_routine+0x2b0>)
 8001c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c88:	2008      	movs	r0, #8
 8001c8a:	f7ff f9cd 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <led_awake_routine+0x2b4>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <led_awake_routine+0x156>
						green_led_pwm_val += 5;
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <led_awake_routine+0x2b8>)
 8001c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <led_awake_routine+0x2b8>)
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	e008      	b.n	8001cbc <led_awake_routine+0x168>
						green_led_pwm_val -= 5;
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <led_awake_routine+0x2b8>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b05      	subs	r3, #5
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <led_awake_routine+0x2b8>)
 8001cba:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <led_awake_routine+0x2b8>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cc6:	dd03      	ble.n	8001cd0 <led_awake_routine+0x17c>
						green_led_pwm_flag = 1;
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <led_awake_routine+0x2b4>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <led_awake_routine+0x18c>
					} else if (green_led_pwm_val <= 0) {
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <led_awake_routine+0x2b8>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dc02      	bgt.n	8001ce0 <led_awake_routine+0x18c>
						green_led_pwm_flag = 0;
 8001cda:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <led_awake_routine+0x2b4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001ce0:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <led_awake_routine+0x2b8>)
 8001ce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce6:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <led_awake_routine+0x2ac>)
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cea:	e0f2      	b.n	8001ed2 <led_awake_routine+0x37e>
				} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <led_awake_routine+0x2a0>)
 8001cee:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cf2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e10 <led_awake_routine+0x2bc>
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	f340 808d 	ble.w	8001e1c <led_awake_routine+0x2c8>
						&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <led_awake_routine+0x2a0>)
 8001d04:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d08:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	f200 8082 	bhi.w	8001e1c <led_awake_routine+0x2c8>
					if(green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <led_awake_routine+0x2b4>)
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <led_awake_routine+0x2c0>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d003      	beq.n	8001d2c <led_awake_routine+0x1d8>
						green_led_pwm_flag = red_led_pwm_flag;
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <led_awake_routine+0x2c0>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <led_awake_routine+0x2b4>)
 8001d2a:	701a      	strb	r2, [r3, #0]
					BLUE_LED_PWM(disable_led);
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <led_awake_routine+0x2b0>)
 8001d2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d32:	2008      	movs	r0, #8
 8001d34:	f7ff f978 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <led_awake_routine+0x2b4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <led_awake_routine+0x200>
						green_led_pwm_val += 5;
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <led_awake_routine+0x2b8>)
 8001d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3305      	adds	r3, #5
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <led_awake_routine+0x2b8>)
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	e008      	b.n	8001d66 <led_awake_routine+0x212>
						green_led_pwm_val -= 5;
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <led_awake_routine+0x2b8>)
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b05      	subs	r3, #5
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <led_awake_routine+0x2b8>)
 8001d64:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8001d66:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <led_awake_routine+0x2b8>)
 8001d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d70:	dd03      	ble.n	8001d7a <led_awake_routine+0x226>
						green_led_pwm_flag = 1;
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <led_awake_routine+0x2b4>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e007      	b.n	8001d8a <led_awake_routine+0x236>
					} else if (green_led_pwm_val <= 0) {
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <led_awake_routine+0x2b8>)
 8001d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dc02      	bgt.n	8001d8a <led_awake_routine+0x236>
						green_led_pwm_flag = 0;
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <led_awake_routine+0x2b4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
					if (!red_led_pwm_flag) {
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <led_awake_routine+0x2c0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <led_awake_routine+0x252>
						red_led_pwm_val += 5;
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <led_awake_routine+0x2c4>)
 8001d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3305      	adds	r3, #5
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <led_awake_routine+0x2c4>)
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	e008      	b.n	8001db8 <led_awake_routine+0x264>
						red_led_pwm_val -= 5;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <led_awake_routine+0x2c4>)
 8001da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b05      	subs	r3, #5
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <led_awake_routine+0x2c4>)
 8001db6:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <led_awake_routine+0x2c4>)
 8001dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dc2:	dd03      	ble.n	8001dcc <led_awake_routine+0x278>
						red_led_pwm_flag = 1;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <led_awake_routine+0x2c0>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e007      	b.n	8001ddc <led_awake_routine+0x288>
					} else if (red_led_pwm_val <= 0) {
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <led_awake_routine+0x2c4>)
 8001dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	dc02      	bgt.n	8001ddc <led_awake_routine+0x288>
						red_led_pwm_flag = 0;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <led_awake_routine+0x2c0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <led_awake_routine+0x2b8>)
 8001dde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <led_awake_routine+0x2ac>)
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <led_awake_routine+0x2c4>)
 8001de8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <led_awake_routine+0x2ac>)
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
 8001df0:	e06f      	b.n	8001ed2 <led_awake_routine+0x37e>
 8001df2:	bf00      	nop
 8001df4:	20001470 	.word	0x20001470
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40833333 	.word	0x40833333
 8001e00:	40000400 	.word	0x40000400
 8001e04:	20000330 	.word	0x20000330
 8001e08:	200012d0 	.word	0x200012d0
 8001e0c:	200012d2 	.word	0x200012d2
 8001e10:	40533333 	.word	0x40533333
 8001e14:	200012d1 	.word	0x200012d1
 8001e18:	200012d4 	.word	0x200012d4
					GREEN_LED_PWM(disable_led);
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <led_awake_routine+0x384>)
 8001e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
					BLUE_LED_PWM(disable_led);
 8001e24:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <led_awake_routine+0x388>)
 8001e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e2a:	2008      	movs	r0, #8
 8001e2c:	f7ff f8fc 	bl	8001028 <setSoftPWM>
					if (!red_led_pwm_flag) {
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <led_awake_routine+0x38c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <led_awake_routine+0x2f8>
						red_led_pwm_val += 5;
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <led_awake_routine+0x390>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3305      	adds	r3, #5
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <led_awake_routine+0x390>)
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e008      	b.n	8001e5e <led_awake_routine+0x30a>
						red_led_pwm_val -= 5;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <led_awake_routine+0x390>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b05      	subs	r3, #5
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <led_awake_routine+0x390>)
 8001e5c:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <led_awake_routine+0x390>)
 8001e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e68:	dd03      	ble.n	8001e72 <led_awake_routine+0x31e>
						red_led_pwm_flag = 1;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <led_awake_routine+0x38c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <led_awake_routine+0x32e>
					} else if (red_led_pwm_val <= 0) {
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <led_awake_routine+0x390>)
 8001e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	dc02      	bgt.n	8001e82 <led_awake_routine+0x32e>
						red_led_pwm_flag = 0;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <led_awake_routine+0x38c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <led_awake_routine+0x390>)
 8001e84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <led_awake_routine+0x384>)
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e8c:	e021      	b.n	8001ed2 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <led_awake_routine+0x384>)
 8001e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <led_awake_routine+0x388>)
 8001e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e9c:	2008      	movs	r0, #8
 8001e9e:	f7ff f8c3 	bl	8001028 <setSoftPWM>
		if(red_led_pwm_val != disable_led)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <led_awake_routine+0x390>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eac:	d004      	beq.n	8001eb8 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <led_awake_routine+0x390>)
 8001eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	e002      	b.n	8001ebe <led_awake_routine+0x36a>
			red_led_pwm_val =0;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <led_awake_routine+0x390>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <led_awake_routine+0x390>)
 8001ec0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <led_awake_routine+0x384>)
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8001ec8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ecc:	f001 fc38 	bl	8003740 <HAL_Delay>
}
 8001ed0:	e7ff      	b.n	8001ed2 <led_awake_routine+0x37e>
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	20000330 	.word	0x20000330
 8001ee0:	200012d1 	.word	0x200012d1
 8001ee4:	200012d4 	.word	0x200012d4

08001ee8 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001eee:	f001 fc77 	bl	80037e0 <HAL_GetUIDw1>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001ef8:	f001 fc72 	bl	80037e0 <HAL_GetUIDw1>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <ver_GetUid+0x8c>)
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001f04:	4c1c      	ldr	r4, [pc, #112]	; (8001f78 <ver_GetUid+0x90>)
 8001f06:	f001 fc77 	bl	80037f8 <HAL_GetUIDw2>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b23      	cmp	r3, #35	; 0x23
 8001f12:	d909      	bls.n	8001f28 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b3d      	cmp	r3, #61	; 0x3d
 8001f18:	bf28      	it	cs
 8001f1a:	233d      	movcs	r3, #61	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	333d      	adds	r3, #61	; 0x3d
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <ver_GetUid+0x8c>)
 8001f24:	71da      	strb	r2, [r3, #7]
 8001f26:	e00b      	b.n	8001f40 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b09      	cmp	r3, #9
 8001f2c:	d901      	bls.n	8001f32 <ver_GetUid+0x4a>
 8001f2e:	2241      	movs	r2, #65	; 0x41
 8001f30:	e000      	b.n	8001f34 <ver_GetUid+0x4c>
 8001f32:	2230      	movs	r2, #48	; 0x30
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <ver_GetUid+0x8c>)
 8001f3e:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001f40:	f001 fc42 	bl	80037c8 <HAL_GetUIDw0>
 8001f44:	4603      	mov	r3, r0
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <ver_GetUid+0x94>)
 8001f4e:	f010 f881 	bl	8012054 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001f52:	f001 fc39 	bl	80037c8 <HAL_GetUIDw0>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4808      	ldr	r0, [pc, #32]	; (8001f80 <ver_GetUid+0x98>)
 8001f5e:	f010 f879 	bl	8012054 <CharToHexasc>
	sUid[12] = 0;
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <ver_GetUid+0x8c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <ver_GetUid+0x8c>)
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20001700 	.word	0x20001700
 8001f78:	20001703 	.word	0x20001703
 8001f7c:	20001708 	.word	0x20001708
 8001f80:	2000170a 	.word	0x2000170a

08001f84 <app_main>:

void app_main() {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0

	uint8_t stop_measurement = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8001f8e:	223c      	movs	r2, #60	; 0x3c
 8001f90:	2100      	movs	r1, #0
 8001f92:	4884      	ldr	r0, [pc, #528]	; (80021a4 <app_main+0x220>)
 8001f94:	f019 f8ee 	bl	801b174 <memset>

	load_param();
 8001f98:	f7ff fa2a 	bl	80013f0 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8001f9c:	4882      	ldr	r0, [pc, #520]	; (80021a8 <app_main+0x224>)
 8001f9e:	f008 fa03 	bl	800a3a8 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001fa2:	4982      	ldr	r1, [pc, #520]	; (80021ac <app_main+0x228>)
 8001fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa8:	4a81      	ldr	r2, [pc, #516]	; (80021b0 <app_main+0x22c>)
 8001faa:	4882      	ldr	r0, [pc, #520]	; (80021b4 <app_main+0x230>)
 8001fac:	f002 faf4 	bl	8004598 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001fb0:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <app_main+0x224>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <app_main+0x224>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fbe:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001fc0:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <app_main+0x228>)
 8001fc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	f7ff f82e 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001fcc:	2100      	movs	r1, #0
 8001fce:	487a      	ldr	r0, [pc, #488]	; (80021b8 <app_main+0x234>)
 8001fd0:	f008 fb2e 	bl	800a630 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001fd4:	4b79      	ldr	r3, [pc, #484]	; (80021bc <app_main+0x238>)
 8001fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4876      	ldr	r0, [pc, #472]	; (80021b8 <app_main+0x234>)
 8001fe0:	f008 fb26 	bl	800a630 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001fe4:	4b75      	ldr	r3, [pc, #468]	; (80021bc <app_main+0x238>)
 8001fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38

	MX_USB_DEVICE_Init(); //initialize usb anyways
 8001fec:	f018 fa84 	bl	801a4f8 <MX_USB_DEVICE_Init>
	prev_usb_time_ = HAL_GetTick();
 8001ff0:	f001 fb9a 	bl	8003728 <HAL_GetTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a72      	ldr	r2, [pc, #456]	; (80021c0 <app_main+0x23c>)
 8001ff8:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ffe:	4871      	ldr	r0, [pc, #452]	; (80021c4 <app_main+0x240>)
 8002000:	f003 fb5e 	bl	80056c0 <HAL_GPIO_ReadPin>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <app_main+0x8c>
		init_sps30();
 800200a:	f7ff fb89 	bl	8001720 <init_sps30>
 800200e:	e012      	b.n	8002036 <app_main+0xb2>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8002010:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <app_main+0x220>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_first_start = 1;
 8002018:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <app_main+0x220>)
 800201a:	2201      	movs	r2, #1
 800201c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		_RunTime_Packet.usb_active_disable_pm = 1;
 8002020:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <app_main+0x220>)
 8002022:	2201      	movs	r2, #1
 8002024:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		_RunTime_Packet.usb_start_timer = 1;
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <app_main+0x220>)
 800202a:	2201      	movs	r2, #1
 800202c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8002030:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <app_main+0x244>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
	}

	//init_sps30();
	init_scd4x_i2c();
 8002036:	f7ff fac3 	bl	80015c0 <init_scd4x_i2c>
	console_init();
 800203a:	f00e fa87 	bl	801054c <console_init>
	Rtc_set_alarm();
 800203e:	f00f fe93 	bl	8011d68 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8002042:	f107 0318 	add.w	r3, r7, #24
 8002046:	2200      	movs	r2, #0
 8002048:	4619      	mov	r1, r3
 800204a:	4860      	ldr	r0, [pc, #384]	; (80021cc <app_main+0x248>)
 800204c:	f006 fee0 	bl	8008e10 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 8002050:	7eba      	ldrb	r2, [r7, #26]
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <app_main+0x220>)
 8002054:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

    //if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	  _RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 8002058:	495d      	ldr	r1, [pc, #372]	; (80021d0 <app_main+0x24c>)
 800205a:	485e      	ldr	r0, [pc, #376]	; (80021d4 <app_main+0x250>)
 800205c:	f018 f9d0 	bl	801a400 <createfile>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <app_main+0x220>)
 8002066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   // 	 _RunTime_Packet.sd_file_creation = -1;
   // }



    green_led_blink();
 800206a:	f7ff fd4b 	bl	8001b04 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 800206e:	23c8      	movs	r3, #200	; 0xc8
 8002070:	2215      	movs	r2, #21
 8002072:	4959      	ldr	r1, [pc, #356]	; (80021d8 <app_main+0x254>)
 8002074:	4859      	ldr	r0, [pc, #356]	; (80021dc <app_main+0x258>)
 8002076:	f009 fa0f 	bl	800b498 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 800207a:	f001 fb55 	bl	8003728 <HAL_GetTick>
 800207e:	4603      	mov	r3, r0
 8002080:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <app_main+0x25c>)
 8002082:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002084:	f001 fb50 	bl	8003728 <HAL_GetTick>
 8002088:	4603      	mov	r3, r0
 800208a:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <app_main+0x260>)
 800208c:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	77fb      	strb	r3, [r7, #31]
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002092:	e154      	b.n	800233e <app_main+0x3ba>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8002094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002098:	484a      	ldr	r0, [pc, #296]	; (80021c4 <app_main+0x240>)
 800209a:	f003 fb11 	bl	80056c0 <HAL_GPIO_ReadPin>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <app_main+0x12a>
					{
				prev_sleep_time = HAL_GetTick();
 80020a4:	f001 fb40 	bl	8003728 <HAL_GetTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <app_main+0x25c>)
 80020ac:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	4845      	ldr	r0, [pc, #276]	; (80021cc <app_main+0x248>)
 80020b6:	f006 fdc9 	bl	8008c4c <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80020ba:	463b      	mov	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	4619      	mov	r1, r3
 80020c0:	4842      	ldr	r0, [pc, #264]	; (80021cc <app_main+0x248>)
 80020c2:	f006 fea5 	bl	8008e10 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80020c6:	78ba      	ldrb	r2, [r7, #2]
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <app_main+0x220>)
 80020ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			_RunTime_Packet.month = sDate.Month;
 80020ce:	787a      	ldrb	r2, [r7, #1]
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <app_main+0x220>)
 80020d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			_RunTime_Packet.year = sDate.Year;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <app_main+0x220>)
 80020da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

			if (_RunTime_Packet.prev_day != sDate.Date) {
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <app_main+0x220>)
 80020e0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80020e4:	78bb      	ldrb	r3, [r7, #2]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d007      	beq.n	80020fa <app_main+0x176>
				_RunTime_Packet.day_changed = 1;
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <app_main+0x220>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				_RunTime_Packet.prev_day = sDate.Date;
 80020f2:	78ba      	ldrb	r2, [r7, #2]
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <app_main+0x220>)
 80020f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

			check_peripheral_error();
 80020fa:	f7ff fbb7 	bl	800186c <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <app_main+0x220>)
 8002100:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <app_main+0x18e>
					|| _RunTime_Packet.usb_first_start) {
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <app_main+0x220>)
 800210a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800210e:	2b00      	cmp	r3, #0
 8002110:	d045      	beq.n	800219e <app_main+0x21a>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <app_main+0x220>)
 8002114:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <app_main+0x1a0>
				{

					start_usb_timer = 1;
 800211c:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <app_main+0x264>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e003      	b.n	800212c <app_main+0x1a8>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <app_main+0x220>)
 8002126:	2201      	movs	r2, #1
 8002128:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800212c:	f001 fafc 	bl	8003728 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <app_main+0x23c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <app_main+0x268>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d329      	bcc.n	8002194 <app_main+0x210>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <app_main+0x220>)
 8002142:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d10d      	bne.n	8002168 <app_main+0x1e4>
							&& _RunTime_Packet.usb_first_start) {
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <app_main+0x220>)
 800214e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <app_main+0x1e4>
						_RunTime_Packet.sd_file_creation = createfile(
 8002156:	491e      	ldr	r1, [pc, #120]	; (80021d0 <app_main+0x24c>)
 8002158:	481e      	ldr	r0, [pc, #120]	; (80021d4 <app_main+0x250>)
 800215a:	f018 f951 	bl	801a400 <createfile>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <app_main+0x220>)
 8002164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <app_main+0x220>)
 800216a:	2200      	movs	r2, #0
 800216c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					_RunTime_Packet.usb_detection = 0;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <app_main+0x220>)
 8002172:	2200      	movs	r2, #0
 8002174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <app_main+0x220>)
 800217a:	2200      	movs	r2, #0
 800217c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					start_usb_timer = 0;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <app_main+0x264>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002186:	f7ff facb 	bl	8001720 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 800218a:	f001 facd 	bl	8003728 <HAL_GetTick>
 800218e:	4603      	mov	r3, r0
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <app_main+0x260>)
 8002192:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8002194:	f001 fac8 	bl	8003728 <HAL_GetTick>
 8002198:	4603      	mov	r3, r0
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <app_main+0x25c>)
 800219c:	6013      	str	r3, [r2, #0]
			}

			console_process();
 800219e:	f00e f989 	bl	80104b4 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80021a2:	e03a      	b.n	800221a <app_main+0x296>
 80021a4:	20001470 	.word	0x20001470
 80021a8:	20001864 	.word	0x20001864
 80021ac:	20000330 	.word	0x20000330
 80021b0:	40020418 	.word	0x40020418
 80021b4:	2000193c 	.word	0x2000193c
 80021b8:	200018f4 	.word	0x200018f4
 80021bc:	40000400 	.word	0x40000400
 80021c0:	200016fc 	.word	0x200016fc
 80021c4:	40020000 	.word	0x40020000
 80021c8:	200014b8 	.word	0x200014b8
 80021cc:	200017c0 	.word	0x200017c0
 80021d0:	2000133c 	.word	0x2000133c
 80021d4:	200012d8 	.word	0x200012d8
 80021d8:	0801fde0 	.word	0x0801fde0
 80021dc:	2000199c 	.word	0x2000199c
 80021e0:	200016f4 	.word	0x200016f4
 80021e4:	200016f8 	.word	0x200016f8
 80021e8:	200014b4 	.word	0x200014b4
 80021ec:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 80021f0:	f00e f960 	bl	80104b4 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 80021f4:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <app_main+0x450>)
 80021f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <app_main+0x27e>
					get_scd4x_measurement();
 80021fe:	f7ff f9f5 	bl	80015ec <get_scd4x_measurement>
				}

				get_sps30_measurement();
 8002202:	f7ff faa9 	bl	8001758 <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002206:	4874      	ldr	r0, [pc, #464]	; (80023d8 <app_main+0x454>)
 8002208:	f00f ffba 	bl	8012180 <adc_Measure>
				led_awake_routine();
 800220c:	f7ff fca2 	bl	8001b54 <led_awake_routine>
				pwr_off_detected();
 8002210:	f7fe ffde 	bl	80011d0 <pwr_off_detected>
				HAL_Delay(20);
 8002214:	2014      	movs	r0, #20
 8002216:	f001 fa93 	bl	8003740 <HAL_Delay>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 800221a:	f001 fa85 	bl	8003728 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <app_main+0x458>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1ad2      	subs	r2, r2, r3
 8002226:	4b6e      	ldr	r3, [pc, #440]	; (80023e0 <app_main+0x45c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d809      	bhi.n	8002242 <app_main+0x2be>
					&& !_RunTime_Packet.usb_detection
 800222e:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <app_main+0x450>)
 8002230:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <app_main+0x2be>
					&& !_RunTime_Packet.usb_first_start)
 8002238:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <app_main+0x450>)
 800223a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0d6      	beq.n	80021f0 <app_main+0x26c>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002242:	f7ff fb51 	bl	80018e8 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <app_main+0x2f8>
 800224c:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <app_main+0x450>)
 800224e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d112      	bne.n	800227c <app_main+0x2f8>
					&& !_RunTime_Packet.usb_first_start
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <app_main+0x450>)
 8002258:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <app_main+0x2f8>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002264:	485f      	ldr	r0, [pc, #380]	; (80023e4 <app_main+0x460>)
 8002266:	f003 fa2b 	bl	80056c0 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <app_main+0x2f8>
					USB_DETECT_Pin)) {
				scd4x_stop_periodic_measurement();
 8002270:	f010 f8d2 	bl	8012418 <scd4x_stop_periodic_measurement>
				sps30_stop_measurement();
 8002274:	f011 f846 	bl	8013304 <sps30_stop_measurement>
				stop_measurement = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 800227c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002280:	4858      	ldr	r0, [pc, #352]	; (80023e4 <app_main+0x460>)
 8002282:	f003 fa1d 	bl	80056c0 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d039      	beq.n	8002300 <app_main+0x37c>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 800228c:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <app_main+0x464>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d035      	beq.n	8002300 <app_main+0x37c>
 8002294:	4b4f      	ldr	r3, [pc, #316]	; (80023d4 <app_main+0x450>)
 8002296:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d130      	bne.n	8002300 <app_main+0x37c>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.day_changed
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <app_main+0x450>)
 80022a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10f      	bne.n	80022c8 <app_main+0x344>
						|| _RunTime_Packet.filename_changed
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <app_main+0x450>)
 80022aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <app_main+0x344>
						|| _RunTime_Packet.fileformat_changed
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <app_main+0x450>)
 80022b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <app_main+0x344>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80022bc:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <app_main+0x450>)
 80022be:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d114      	bne.n	80022f2 <app_main+0x36e>
					_RunTime_Packet.day_changed = 0;
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <app_main+0x450>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					_RunTime_Packet.filename_changed = 0;
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <app_main+0x450>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					_RunTime_Packet.fileformat_changed = 0;
 80022d8:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <app_main+0x450>)
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					_RunTime_Packet.sd_file_creation = createfile(
 80022e0:	4942      	ldr	r1, [pc, #264]	; (80023ec <app_main+0x468>)
 80022e2:	4843      	ldr	r0, [pc, #268]	; (80023f0 <app_main+0x46c>)
 80022e4:	f018 f88c 	bl	801a400 <createfile>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <app_main+0x450>)
 80022ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				filesaving_process();
 80022f2:	f018 f86d 	bl	801a3d0 <filesaving_process>

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 80022f6:	f001 fa17 	bl	8003728 <HAL_GetTick>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a37      	ldr	r2, [pc, #220]	; (80023dc <app_main+0x458>)
 80022fe:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002300:	f00f fd32 	bl	8011d68 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 8002304:	4834      	ldr	r0, [pc, #208]	; (80023d8 <app_main+0x454>)
 8002306:	f00f ff3b 	bl	8012180 <adc_Measure>
			led_awake_routine();
 800230a:	f7ff fc23 	bl	8001b54 <led_awake_routine>
			save_data();
 800230e:	f7ff f923 	bl	8001558 <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8002312:	2101      	movs	r1, #1
 8002314:	4833      	ldr	r0, [pc, #204]	; (80023e4 <app_main+0x460>)
 8002316:	f003 f9d3 	bl	80056c0 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <app_main+0x3aa>
				_RunTime_Packet.motion_detection = 1;
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <app_main+0x450>)
 8002322:	2201      	movs	r2, #1
 8002324:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <app_main+0x470>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e005      	b.n	800233a <app_main+0x3b6>
			} else {
				_RunTime_Packet.motion_detection = 0;
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <app_main+0x450>)
 8002330:	2200      	movs	r2, #0
 8002332:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <app_main+0x470>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 800233a:	f7fe ff49 	bl	80011d0 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800233e:	f001 f9f3 	bl	8003728 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <app_main+0x474>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <app_main+0x478>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	f67f aea0 	bls.w	8002094 <app_main+0x110>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		if (_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <app_main+0x450>)
 8002356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <app_main+0x3fa>
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <app_main+0x450>)
 8002360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <app_main+0x3fa>
				|| _RunTime_Packet.fileformat_changed
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <app_main+0x450>)
 800236a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <app_main+0x3fa>
				|| _RunTime_Packet.sd_file_creation == -1) {
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <app_main+0x450>)
 8002374:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d114      	bne.n	80023a8 <app_main+0x424>
			_RunTime_Packet.day_changed = 0;
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <app_main+0x450>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			_RunTime_Packet.filename_changed = 0;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <app_main+0x450>)
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			_RunTime_Packet.fileformat_changed = 0;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <app_main+0x450>)
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.sd_file_creation = createfile(
 8002396:	4915      	ldr	r1, [pc, #84]	; (80023ec <app_main+0x468>)
 8002398:	4815      	ldr	r0, [pc, #84]	; (80023f0 <app_main+0x46c>)
 800239a:	f018 f831 	bl	801a400 <createfile>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <app_main+0x450>)
 80023a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);
		}
		filesaving_process();
 80023a8:	f018 f812 	bl	801a3d0 <filesaving_process>
		prev_sleep_time = HAL_GetTick();
 80023ac:	f001 f9bc 	bl	8003728 <HAL_GetTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <app_main+0x474>)
 80023b4:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80023b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ba:	480a      	ldr	r0, [pc, #40]	; (80023e4 <app_main+0x460>)
 80023bc:	f003 f980 	bl	80056c0 <HAL_GPIO_ReadPin>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f ae59 	bne.w	800207a <app_main+0xf6>

			sleep();
 80023c8:	f7ff fab6 	bl	8001938 <sleep>
			wakeup();
 80023cc:	f7ff fb12 	bl	80019f4 <wakeup>
		prev_sleep_time = HAL_GetTick();
 80023d0:	e653      	b.n	800207a <app_main+0xf6>
 80023d2:	bf00      	nop
 80023d4:	20001470 	.word	0x20001470
 80023d8:	20001490 	.word	0x20001490
 80023dc:	200016f8 	.word	0x200016f8
 80023e0:	20000004 	.word	0x20000004
 80023e4:	40020000 	.word	0x40020000
 80023e8:	20000025 	.word	0x20000025
 80023ec:	2000133c 	.word	0x2000133c
 80023f0:	200012d8 	.word	0x200012d8
 80023f4:	200014bd 	.word	0x200014bd
 80023f8:	200016f4 	.word	0x200016f4
 80023fc:	20000000 	.word	0x20000000

08002400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002404:	f001 f92a 	bl	800365c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002408:	f000 f81c 	bl	8002444 <SystemClock_Config>
  MX_FATFS_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 800240c:	f000 fae2 	bl	80029d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002410:	f000 fac0 	bl	8002994 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002414:	f000 f92a 	bl	800266c <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002418:	f000 fa68 	bl	80028ec <MX_USART1_UART_Init>
  MX_RTC_Init();
 800241c:	f000 f900 	bl	8002620 <MX_RTC_Init>
  MX_I2C1_Init();
 8002420:	f000 f8d0 	bl	80025c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002424:	f000 f992 	bl	800274c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002428:	f000 fa8a 	bl	8002940 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800242c:	f000 f878 	bl	8002520 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002430:	f00f faea 	bl	8011a08 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002434:	f000 f93a 	bl	80026ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8002438:	f000 f9d6 	bl	80027e8 <MX_TIM3_Init>


  app_main(); //keep mx_usb_device_init off here
 800243c:	f7ff fda2 	bl	8001f84 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002440:	e7fe      	b.n	8002440 <main+0x40>
	...

08002444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b094      	sub	sp, #80	; 0x50
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 0320 	add.w	r3, r7, #32
 800244e:	2230      	movs	r2, #48	; 0x30
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f018 fe8e 	bl	801b174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <SystemClock_Config+0xd4>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <SystemClock_Config+0xd4>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	6413      	str	r3, [r2, #64]	; 0x40
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <SystemClock_Config+0xd4>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <SystemClock_Config+0xd8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <SystemClock_Config+0xd8>)
 8002492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <SystemClock_Config+0xd8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80024a4:	2305      	movs	r3, #5
 80024a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b2:	2302      	movs	r3, #2
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80024bc:	2319      	movs	r3, #25
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024c6:	2304      	movs	r3, #4
 80024c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024ca:	2307      	movs	r3, #7
 80024cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ce:	f107 0320 	add.w	r3, r7, #32
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 fd64 	bl	8007fa0 <HAL_RCC_OscConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80024de:	f000 fbe5 	bl	8002cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e2:	230f      	movs	r3, #15
 80024e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e6:	2302      	movs	r3, #2
 80024e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 ffc6 	bl	8008490 <HAL_RCC_ClockConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800250a:	f000 fbcf 	bl	8002cac <Error_Handler>
  }
}
 800250e:	bf00      	nop
 8002510:	3750      	adds	r7, #80	; 0x50
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40007000 	.word	0x40007000

08002520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002526:	463b      	mov	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <MX_ADC1_Init+0x9c>)
 8002536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <MX_ADC1_Init+0x98>)
 800253a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800253e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_ADC1_Init+0x98>)
 800254e:	2200      	movs	r2, #0
 8002550:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_ADC1_Init+0x98>)
 800255c:	2200      	movs	r2, #0
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <MX_ADC1_Init+0xa0>)
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_ADC1_Init+0x98>)
 800256e:	2201      	movs	r2, #1
 8002570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_ADC1_Init+0x98>)
 800257c:	2201      	movs	r2, #1
 800257e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <MX_ADC1_Init+0x98>)
 8002582:	f001 f945 	bl	8003810 <HAL_ADC_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800258c:	f000 fb8e 	bl	8002cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002590:	230a      	movs	r3, #10
 8002592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002594:	2301      	movs	r3, #1
 8002596:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_ADC1_Init+0x98>)
 80025a2:	f001 fb2b 	bl	8003bfc <HAL_ADC_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025ac:	f000 fb7e 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20001724 	.word	0x20001724
 80025bc:	40012000 	.word	0x40012000
 80025c0:	0f000001 	.word	0x0f000001

080025c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_I2C1_Init+0x50>)
 80025ca:	4a13      	ldr	r2, [pc, #76]	; (8002618 <MX_I2C1_Init+0x54>)
 80025cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_I2C1_Init+0x50>)
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <MX_I2C1_Init+0x58>)
 80025d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_I2C1_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_I2C1_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_I2C1_Init+0x50>)
 80025e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_I2C1_Init+0x50>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_I2C1_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_I2C1_Init+0x50>)
 8002602:	f003 f8a7 	bl	8005754 <HAL_I2C_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800260c:	f000 fb4e 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000176c 	.word	0x2000176c
 8002618:	40005400 	.word	0x40005400
 800261c:	00061a80 	.word	0x00061a80

08002620 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_RTC_Init+0x44>)
 8002626:	4a10      	ldr	r2, [pc, #64]	; (8002668 <MX_RTC_Init+0x48>)
 8002628:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_RTC_Init+0x44>)
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_RTC_Init+0x44>)
 8002632:	227f      	movs	r2, #127	; 0x7f
 8002634:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_RTC_Init+0x44>)
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_RTC_Init+0x44>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <MX_RTC_Init+0x44>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_RTC_Init+0x44>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_RTC_Init+0x44>)
 8002650:	f006 f9ec 	bl	8008a2c <HAL_RTC_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800265a:	f000 fb27 	bl	8002cac <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200017c0 	.word	0x200017c0
 8002668:	40002800 	.word	0x40002800

0800266c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 8002672:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <MX_SDIO_SD_Init+0x3c>)
 8002674:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <MX_SDIO_SD_Init+0x38>)
 8002696:	2205      	movs	r2, #5
 8002698:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	200017e0 	.word	0x200017e0
 80026a8:	40012c00 	.word	0x40012c00

080026ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c0:	463b      	mov	r3, r7
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <MX_TIM1_Init+0x98>)
 80026ca:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <MX_TIM1_Init+0x9c>)
 80026cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_TIM1_Init+0x98>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <MX_TIM1_Init+0x98>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_TIM1_Init+0x98>)
 80026dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <MX_TIM1_Init+0x98>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_TIM1_Init+0x98>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_TIM1_Init+0x98>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026f4:	4813      	ldr	r0, [pc, #76]	; (8002744 <MX_TIM1_Init+0x98>)
 80026f6:	f007 fdb3 	bl	800a260 <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002700:	f000 fad4 	bl	8002cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	4619      	mov	r1, r3
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <MX_TIM1_Init+0x98>)
 8002712:	f008 fa07 	bl	800ab24 <HAL_TIM_ConfigClockSource>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800271c:	f000 fac6 	bl	8002cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002720:	2320      	movs	r3, #32
 8002722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_TIM1_Init+0x98>)
 800272e:	f008 fdb5 	bl	800b29c <HAL_TIMEx_MasterConfigSynchronization>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002738:	f000 fab8 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20001864 	.word	0x20001864
 8002748:	40010000 	.word	0x40010000

0800274c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002760:	463b      	mov	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <MX_TIM2_Init+0x98>)
 800276a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800276e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <MX_TIM2_Init+0x98>)
 8002772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <MX_TIM2_Init+0x98>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <MX_TIM2_Init+0x98>)
 8002780:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <MX_TIM2_Init+0x98>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <MX_TIM2_Init+0x98>)
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002792:	4814      	ldr	r0, [pc, #80]	; (80027e4 <MX_TIM2_Init+0x98>)
 8002794:	f007 fd64 	bl	800a260 <HAL_TIM_Base_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800279e:	f000 fa85 	bl	8002cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	4619      	mov	r1, r3
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <MX_TIM2_Init+0x98>)
 80027b0:	f008 f9b8 	bl	800ab24 <HAL_TIM_ConfigClockSource>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80027ba:	f000 fa77 	bl	8002cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027c6:	463b      	mov	r3, r7
 80027c8:	4619      	mov	r1, r3
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_TIM2_Init+0x98>)
 80027cc:	f008 fd66 	bl	800b29c <HAL_TIMEx_MasterConfigSynchronization>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027d6:	f000 fa69 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200018ac 	.word	0x200018ac

080027e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 0320 	add.w	r3, r7, #32
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
 8002814:	615a      	str	r2, [r3, #20]
 8002816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800281a:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <MX_TIM3_Init+0x100>)
 800281c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800282c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002830:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002838:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800283e:	4829      	ldr	r0, [pc, #164]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002840:	f007 fd0e 	bl	800a260 <HAL_TIM_Base_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800284a:	f000 fa2f 	bl	8002cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002858:	4619      	mov	r1, r3
 800285a:	4822      	ldr	r0, [pc, #136]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800285c:	f008 f962 	bl	800ab24 <HAL_TIM_ConfigClockSource>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002866:	f000 fa21 	bl	8002cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800286a:	481e      	ldr	r0, [pc, #120]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800286c:	f007 fe87 	bl	800a57e <HAL_TIM_PWM_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002876:	f000 fa19 	bl	8002cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002882:	f107 0320 	add.w	r3, r7, #32
 8002886:	4619      	mov	r1, r3
 8002888:	4816      	ldr	r0, [pc, #88]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800288a:	f008 fd07 	bl	800b29c <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002894:	f000 fa0a 	bl	8002cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	4619      	mov	r1, r3
 80028ae:	480d      	ldr	r0, [pc, #52]	; (80028e4 <MX_TIM3_Init+0xfc>)
 80028b0:	f008 f876 	bl	800a9a0 <HAL_TIM_PWM_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80028ba:	f000 f9f7 	bl	8002cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2204      	movs	r2, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_TIM3_Init+0xfc>)
 80028c6:	f008 f86b 	bl	800a9a0 <HAL_TIM_PWM_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80028d0:	f000 f9ec 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <MX_TIM3_Init+0xfc>)
 80028d6:	f000 fc07 	bl	80030e8 <HAL_TIM_MspPostInit>

}
 80028da:	bf00      	nop
 80028dc:	3738      	adds	r7, #56	; 0x38
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200018f4 	.word	0x200018f4
 80028e8:	40000400 	.word	0x40000400

080028ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <MX_USART1_UART_Init+0x50>)
 80028f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 80028f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 8002912:	220c      	movs	r2, #12
 8002914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_USART1_UART_Init+0x4c>)
 8002924:	f008 fd3c 	bl	800b3a0 <HAL_UART_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800292e:	f000 f9bd 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000199c 	.word	0x2000199c
 800293c:	40011000 	.word	0x40011000

08002940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_USART2_UART_Init+0x4c>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <MX_USART2_UART_Init+0x50>)
 8002948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <MX_USART2_UART_Init+0x4c>)
 800294c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_USART2_UART_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_USART2_UART_Init+0x4c>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_USART2_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_USART2_UART_Init+0x4c>)
 8002966:	220c      	movs	r2, #12
 8002968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_USART2_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_USART2_UART_Init+0x4c>)
 8002978:	f008 fd12 	bl	800b3a0 <HAL_UART_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002982:	f000 f993 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200019e0 	.word	0x200019e0
 8002990:	40004400 	.word	0x40004400

08002994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_DMA_Init+0x3c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <MX_DMA_Init+0x3c>)
 80029a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_DMA_Init+0x3c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2044      	movs	r0, #68	; 0x44
 80029bc:	f001 fc97 	bl	80042ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80029c0:	2044      	movs	r0, #68	; 0x44
 80029c2:	f001 fcb0 	bl	8004326 <HAL_NVIC_EnableIRQ>

}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b71      	ldr	r3, [pc, #452]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a70      	ldr	r2, [pc, #448]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <MX_GPIO_Init+0x1e0>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	484f      	ldr	r0, [pc, #316]	; (8002bb8 <MX_GPIO_Init+0x1e4>)
 8002a7c:	f002 fe38 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a86:	484d      	ldr	r0, [pc, #308]	; (8002bbc <MX_GPIO_Init+0x1e8>)
 8002a88:	f002 fe32 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2108      	movs	r1, #8
 8002a90:	484a      	ldr	r0, [pc, #296]	; (8002bbc <MX_GPIO_Init+0x1e8>)
 8002a92:	f002 fe2d 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a96:	f642 63fe 	movw	r3, #12030	; 0x2efe
 8002a9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4845      	ldr	r0, [pc, #276]	; (8002bc0 <MX_GPIO_Init+0x1ec>)
 8002aac:	f002 fba0 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	483d      	ldr	r0, [pc, #244]	; (8002bb8 <MX_GPIO_Init+0x1e4>)
 8002ac4:	f002 fb94 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	4836      	ldr	r0, [pc, #216]	; (8002bb8 <MX_GPIO_Init+0x1e4>)
 8002ae0:	f002 fb86 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002ae4:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8002ae8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	2303      	movs	r3, #3
 8002aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	482f      	ldr	r0, [pc, #188]	; (8002bb8 <MX_GPIO_Init+0x1e4>)
 8002afa:	f002 fb79 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002afe:	f247 4307 	movw	r3, #29703	; 0x7407
 8002b02:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b04:	2303      	movs	r3, #3
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	482a      	ldr	r0, [pc, #168]	; (8002bbc <MX_GPIO_Init+0x1e8>)
 8002b14:	f002 fb6c 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 8002b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b26:	2302      	movs	r3, #2
 8002b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4822      	ldr	r0, [pc, #136]	; (8002bbc <MX_GPIO_Init+0x1e8>)
 8002b32:	f002 fb5d 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8002b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	481a      	ldr	r0, [pc, #104]	; (8002bb8 <MX_GPIO_Init+0x1e4>)
 8002b4e:	f002 fb4f 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8002b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4813      	ldr	r0, [pc, #76]	; (8002bb8 <MX_GPIO_Init+0x1e4>)
 8002b6a:	f002 fb41 	bl	80051f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <MX_GPIO_Init+0x1e8>)
 8002b86:	f002 fb33 	bl	80051f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2017      	movs	r0, #23
 8002b90:	f001 fbad 	bl	80042ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b94:	2017      	movs	r0, #23
 8002b96:	f001 fbc6 	bl	8004326 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2028      	movs	r0, #40	; 0x28
 8002ba0:	f001 fba5 	bl	80042ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ba4:	2028      	movs	r0, #40	; 0x28
 8002ba6:	f001 fbbe 	bl	8004326 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800

08002bc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8002bd6:	f7fe fab5 	bl	8001144 <timer_interrupt>
}

}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 8002bf4:	f7fe fa8a 	bl	800110c <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d114      	bne.n	8002c2a <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_GPIO_EXTI_Callback+0x60>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8002c16:	f000 fd87 	bl	8003728 <HAL_GetTick>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_GPIO_EXTI_Callback+0x64>)
 8002c1e:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8002c20:	f000 fd82 	bl	8003728 <HAL_GetTick>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x68>)
 8002c28:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_EXTI_Callback+0x52>
    {
    	power_off_detect();
 8002c32:	f7fe faa1 	bl	8001178 <power_off_detect>
    }
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20001470 	.word	0x20001470
 8002c44:	200014b8 	.word	0x200014b8
 8002c48:	200016fc 	.word	0x200016fc
 8002c4c:	200016f4 	.word	0x200016f4

08002c50 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	RtcInt();
 8002c58:	f00f f854 	bl	8011d04 <RtcInt>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <HAL_UART_ErrorCallback+0x40>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	43d2      	mvns	r2, r2
 8002c7e:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8002c80:	e009      	b.n	8002c96 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_UART_ErrorCallback+0x44>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d105      	bne.n	8002c96 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	43d2      	mvns	r2, r2
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	2000199c 	.word	0x2000199c
 8002ca8:	200019e0 	.word	0x200019e0

08002cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <Error_Handler+0x8>
	...

08002cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_MspInit+0x4c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_MspInit+0x4c>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_ADC_MspInit+0x7c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d127      	bne.n	8002d7a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_ADC_MspInit+0x80>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <HAL_ADC_MspInit+0x80>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_ADC_MspInit+0x80>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_ADC_MspInit+0x80>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <HAL_ADC_MspInit+0x80>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_ADC_MspInit+0x80>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8002d62:	2301      	movs	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d66:	2303      	movs	r3, #3
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	; (8002d8c <HAL_ADC_MspInit+0x84>)
 8002d76:	f002 fa3b 	bl	80051f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40012000 	.word	0x40012000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020800 	.word	0x40020800

08002d90 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_ADC_MspDeInit+0x30>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d109      	bne.n	8002db6 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_ADC_MspDeInit+0x34>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_ADC_MspDeInit+0x34>)
 8002da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 8002dae:	2101      	movs	r1, #1
 8002db0:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <HAL_ADC_MspDeInit+0x38>)
 8002db2:	f002 fba1 	bl	80054f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40012000 	.word	0x40012000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020800 	.word	0x40020800

08002dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_I2C_MspInit+0x84>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d12c      	bne.n	8002e48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_I2C_MspInit+0x88>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_I2C_MspInit+0x88>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_I2C_MspInit+0x88>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8002e0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e10:	2312      	movs	r3, #18
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	480c      	ldr	r0, [pc, #48]	; (8002e58 <HAL_I2C_MspInit+0x8c>)
 8002e28:	f002 f9e2 	bl	80051f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_I2C_MspInit+0x88>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_I2C_MspInit+0x88>)
 8002e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_I2C_MspInit+0x88>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e48:	bf00      	nop
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40005400 	.word	0x40005400
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020400 	.word	0x40020400

08002e5c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <HAL_I2C_MspDeInit+0x3c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10f      	bne.n	8002e8e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_I2C_MspDeInit+0x40>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <HAL_I2C_MspDeInit+0x40>)
 8002e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8002e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e7e:	4808      	ldr	r0, [pc, #32]	; (8002ea0 <HAL_I2C_MspDeInit+0x44>)
 8002e80:	f002 fb3a 	bl	80054f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8002e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <HAL_I2C_MspDeInit+0x44>)
 8002e8a:	f002 fb35 	bl	80054f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40005400 	.word	0x40005400
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020400 	.word	0x40020400

08002ea4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_RTC_MspInit+0x60>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d119      	bne.n	8002efa <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ece:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f005 fcbb 	bl	8008850 <HAL_RCCEx_PeriphCLKConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002ee0:	f7ff fee4 	bl	8002cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_RTC_MspInit+0x64>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	2029      	movs	r0, #41	; 0x29
 8002ef0:	f001 f9fd 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002ef4:	2029      	movs	r0, #41	; 0x29
 8002ef6:	f001 fa16 	bl	8004326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40002800 	.word	0x40002800
 8002f08:	42470e3c 	.word	0x42470e3c

08002f0c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_SD_MspInit+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d14a      	bne.n	8002fc4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_SD_MspInit+0xc4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002f82:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002f94:	230c      	movs	r3, #12
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <HAL_SD_MspInit+0xc8>)
 8002fa0:	f002 f926 	bl	80051f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <HAL_SD_MspInit+0xcc>)
 8002fc0:	f002 f916 	bl	80051f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002fc4:	bf00      	nop
 8002fc6:	3728      	adds	r7, #40	; 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00

08002fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d13f      	bne.n	800306e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 800300c:	4a34      	ldr	r2, [pc, #208]	; (80030e0 <HAL_TIM_Base_MspInit+0x104>)
 800300e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003012:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003016:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800302a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 800302e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003032:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800303a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 800303e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003042:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003046:	2200      	movs	r2, #0
 8003048:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 800304c:	2200      	movs	r2, #0
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003050:	4822      	ldr	r0, [pc, #136]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003052:	f001 f995 	bl	8004380 <HAL_DMA_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800305c:	f7ff fe26 	bl	8002cac <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003064:	621a      	str	r2, [r3, #32]
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_TIM_Base_MspInit+0x100>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800306c:	e02e      	b.n	80030cc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d116      	bne.n	80030a6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6413      	str	r3, [r2, #64]	; 0x40
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	201c      	movs	r0, #28
 800309a:	f001 f928 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800309e:	201c      	movs	r0, #28
 80030a0:	f001 f941 	bl	8004326 <HAL_NVIC_EnableIRQ>
}
 80030a4:	e012      	b.n	80030cc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_TIM_Base_MspInit+0x108>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10d      	bne.n	80030cc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_TIM_Base_MspInit+0xfc>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	2000193c 	.word	0x2000193c
 80030e0:	40026488 	.word	0x40026488
 80030e4:	40000400 	.word	0x40000400

080030e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_TIM_MspPostInit+0x68>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d11d      	bne.n	8003146 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_TIM_MspPostInit+0x6c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_TIM_MspPostInit+0x6c>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_TIM_MspPostInit+0x6c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003126:	2330      	movs	r3, #48	; 0x30
 8003128:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003136:	2302      	movs	r3, #2
 8003138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	4619      	mov	r1, r3
 8003140:	4805      	ldr	r0, [pc, #20]	; (8003158 <HAL_TIM_MspPostInit+0x70>)
 8003142:	f002 f855 	bl	80051f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003146:	bf00      	nop
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40000400 	.word	0x40000400
 8003154:	40023800 	.word	0x40023800
 8003158:	40020400 	.word	0x40020400

0800315c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_TIM_Base_MspDeInit+0x68>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10b      	bne.n	8003186 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f9ac 	bl	80044dc <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003184:	e019      	b.n	80031ba <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d109      	bne.n	80031a4 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800319c:	201c      	movs	r0, #28
 800319e:	f001 f8d0 	bl	8004342 <HAL_NVIC_DisableIRQ>
}
 80031a2:	e00a      	b.n	80031ba <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_TIM_Base_MspDeInit+0x70>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d105      	bne.n	80031ba <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80031b4:	f023 0302 	bic.w	r3, r3, #2
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40000400 	.word	0x40000400

080031d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_UART_MspInit+0x108>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d134      	bne.n	800325c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_UART_MspInit+0x10c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_UART_MspInit+0x10c>)
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800323a:	2307      	movs	r3, #7
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 031c 	add.w	r3, r7, #28
 8003242:	4619      	mov	r1, r3
 8003244:	4826      	ldr	r0, [pc, #152]	; (80032e0 <HAL_UART_MspInit+0x110>)
 8003246:	f001 ffd3 	bl	80051f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2025      	movs	r0, #37	; 0x25
 8003250:	f001 f84d 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003254:	2025      	movs	r0, #37	; 0x25
 8003256:	f001 f866 	bl	8004326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800325a:	e038      	b.n	80032ce <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <HAL_UART_MspInit+0x114>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d133      	bne.n	80032ce <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_UART_MspInit+0x10c>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003274:	6413      	str	r3, [r2, #64]	; 0x40
 8003276:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <HAL_UART_MspInit+0x10c>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_UART_MspInit+0x10c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800329e:	230c      	movs	r3, #12
 80032a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032aa:	2303      	movs	r3, #3
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032ae:	2307      	movs	r3, #7
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f107 031c 	add.w	r3, r7, #28
 80032b6:	4619      	mov	r1, r3
 80032b8:	480b      	ldr	r0, [pc, #44]	; (80032e8 <HAL_UART_MspInit+0x118>)
 80032ba:	f001 ff99 	bl	80051f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2100      	movs	r1, #0
 80032c2:	2026      	movs	r0, #38	; 0x26
 80032c4:	f001 f813 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032c8:	2026      	movs	r0, #38	; 0x26
 80032ca:	f001 f82c 	bl	8004326 <HAL_NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40004400 	.word	0x40004400
 80032e8:	40020000 	.word	0x40020000

080032ec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_UART_MspDeInit+0x5c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10d      	bne.n	800331a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_UART_MspDeInit+0x60>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_UART_MspDeInit+0x60>)
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 800330a:	21c0      	movs	r1, #192	; 0xc0
 800330c:	4810      	ldr	r0, [pc, #64]	; (8003350 <HAL_UART_MspDeInit+0x64>)
 800330e:	f002 f8f3 	bl	80054f8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003312:	2025      	movs	r0, #37	; 0x25
 8003314:	f001 f815 	bl	8004342 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003318:	e011      	b.n	800333e <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_UART_MspDeInit+0x68>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10c      	bne.n	800333e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_UART_MspDeInit+0x60>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <HAL_UART_MspDeInit+0x60>)
 800332a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800332e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003330:	210c      	movs	r1, #12
 8003332:	4809      	ldr	r0, [pc, #36]	; (8003358 <HAL_UART_MspDeInit+0x6c>)
 8003334:	f002 f8e0 	bl	80054f8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003338:	2026      	movs	r0, #38	; 0x26
 800333a:	f001 f802 	bl	8004342 <HAL_NVIC_DisableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40011000 	.word	0x40011000
 800334c:	40023800 	.word	0x40023800
 8003350:	40020400 	.word	0x40020400
 8003354:	40004400 	.word	0x40004400
 8003358:	40020000 	.word	0x40020000

0800335c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003360:	f000 fffd 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler+0x8>

08003366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800336a:	f000 fff8 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <HardFault_Handler+0x8>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003374:	f000 fff3 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <MemManage_Handler+0x8>

0800337a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800337e:	f000 ffee 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <BusFault_Handler+0x8>

08003384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003388:	f000 ffe9 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	e7fe      	b.n	800338c <UsageFault_Handler+0x8>

0800338e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003392:	f000 ffe4 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}

0800339a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 800339e:	f000 ffde 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 80033aa:	f000 ffd8 	bl	800435e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b6:	f000 f9a3 	bl	8003700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}

080033be <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80033c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033c6:	f002 f9ad 	bl	8005724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM2_IRQHandler+0x10>)
 80033d6:	f007 f9db 	bl	800a790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200018ac 	.word	0x200018ac

080033e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <USART1_IRQHandler+0x10>)
 80033ea:	f008 f97d 	bl	800b6e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000199c 	.word	0x2000199c

080033f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <USART2_IRQHandler+0x10>)
 80033fe:	f008 f973 	bl	800b6e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200019e0 	.word	0x200019e0

0800340c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003410:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003414:	f002 f986 	bl	8005724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <RTC_Alarm_IRQHandler+0x10>)
 8003422:	f005 fe87 	bl	8009134 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200017c0 	.word	0x200017c0

08003430 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <OTG_FS_IRQHandler+0x10>)
 8003436:	f003 fc2c 	bl	8006c92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20002888 	.word	0x20002888

08003444 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <DMA2_Stream5_IRQHandler+0x10>)
 800344a:	f001 f973 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	2000193c 	.word	0x2000193c

08003458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return 1;
 800345c:	2301      	movs	r3, #1
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_kill>:

int _kill(int pid, int sig)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003472:	f017 fdb3 	bl	801afdc <__errno>
 8003476:	4603      	mov	r3, r0
 8003478:	2216      	movs	r2, #22
 800347a:	601a      	str	r2, [r3, #0]
  return -1;
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <_exit>:

void _exit (int status)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ffe7 	bl	8003468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800349a:	e7fe      	b.n	800349a <_exit+0x12>

0800349c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e00a      	b.n	80034c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034ae:	f3af 8000 	nop.w
 80034b2:	4601      	mov	r1, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	60ba      	str	r2, [r7, #8]
 80034ba:	b2ca      	uxtb	r2, r1
 80034bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf0      	blt.n	80034ae <_read+0x12>
  }

  return len;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e009      	b.n	80034fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	60ba      	str	r2, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	dbf1      	blt.n	80034e8 <_write+0x12>
  }
  return len;
 8003504:	687b      	ldr	r3, [r7, #4]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_close>:

int _close(int file)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003536:	605a      	str	r2, [r3, #4]
  return 0;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <_isatty>:

int _isatty(int file)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800354e:	2301      	movs	r3, #1
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <_sbrk+0x5c>)
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <_sbrk+0x60>)
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <_sbrk+0x64>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <_sbrk+0x64>)
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <_sbrk+0x68>)
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <_sbrk+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d207      	bcs.n	80035b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035a8:	f017 fd18 	bl	801afdc <__errno>
 80035ac:	4603      	mov	r3, r0
 80035ae:	220c      	movs	r2, #12
 80035b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	e009      	b.n	80035cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035be:	4b07      	ldr	r3, [pc, #28]	; (80035dc <_sbrk+0x64>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <_sbrk+0x64>)
 80035c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20018000 	.word	0x20018000
 80035d8:	00000400 	.word	0x00000400
 80035dc:	20001a24 	.word	0x20001a24
 80035e0:	20003620 	.word	0x20003620

080035e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <SystemInit+0x20>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	4a05      	ldr	r2, [pc, #20]	; (8003604 <SystemInit+0x20>)
 80035f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800360c:	480d      	ldr	r0, [pc, #52]	; (8003644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800360e:	490e      	ldr	r1, [pc, #56]	; (8003648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003610:	4a0e      	ldr	r2, [pc, #56]	; (800364c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003614:	e002      	b.n	800361c <LoopCopyDataInit>

08003616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800361a:	3304      	adds	r3, #4

0800361c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800361c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800361e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003620:	d3f9      	bcc.n	8003616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003622:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003624:	4c0b      	ldr	r4, [pc, #44]	; (8003654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003628:	e001      	b.n	800362e <LoopFillZerobss>

0800362a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800362a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800362c:	3204      	adds	r2, #4

0800362e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800362e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003630:	d3fb      	bcc.n	800362a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003632:	f7ff ffd7 	bl	80035e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003636:	f017 fd45 	bl	801b0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800363a:	f7fe fee1 	bl	8002400 <main>
  bx  lr    
 800363e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003648:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 800364c:	08022030 	.word	0x08022030
  ldr r2, =_sbss
 8003650:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8003654:	2000361c 	.word	0x2000361c

08003658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003658:	e7fe      	b.n	8003658 <ADC_IRQHandler>
	...

0800365c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_Init+0x40>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <HAL_Init+0x40>)
 8003666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_Init+0x40>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_Init+0x40>)
 8003672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a07      	ldr	r2, [pc, #28]	; (800369c <HAL_Init+0x40>)
 800367e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003684:	2003      	movs	r0, #3
 8003686:	f000 fe27 	bl	80042d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800368a:	200f      	movs	r0, #15
 800368c:	f000 f808 	bl	80036a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003690:	f7ff fb12 	bl	8002cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00

080036a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_InitTick+0x54>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_InitTick+0x58>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	4619      	mov	r1, r3
 80036b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe51 	bl	8004366 <HAL_SYSTICK_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00e      	b.n	80036ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d80a      	bhi.n	80036ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036d4:	2200      	movs	r2, #0
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	f000 fe07 	bl	80042ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036e0:	4a06      	ldr	r2, [pc, #24]	; (80036fc <HAL_InitTick+0x5c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	2000000c 	.word	0x2000000c
 80036f8:	20000014 	.word	0x20000014
 80036fc:	20000010 	.word	0x20000010

08003700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_IncTick+0x20>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_IncTick+0x24>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4413      	add	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_IncTick+0x24>)
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000014 	.word	0x20000014
 8003724:	20001a28 	.word	0x20001a28

08003728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return uwTick;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_GetTick+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20001a28 	.word	0x20001a28

08003740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7ff ffee 	bl	8003728 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d005      	beq.n	8003766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_Delay+0x44>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003766:	bf00      	nop
 8003768:	f7ff ffde 	bl	8003728 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	429a      	cmp	r2, r3
 8003776:	d8f7      	bhi.n	8003768 <HAL_Delay+0x28>
  {
  }
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000014 	.word	0x20000014

08003788 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_SuspendTick+0x1c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_SuspendTick+0x1c>)
 8003792:	f023 0302 	bic.w	r3, r3, #2
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_ResumeTick+0x1c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <HAL_ResumeTick+0x1c>)
 80037b2:	f043 0302 	orr.w	r3, r3, #2
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_GetUIDw0+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	1fff7a10 	.word	0x1fff7a10

080037e0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_GetUIDw1+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	1fff7a14 	.word	0x1fff7a14

080037f8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_GetUIDw2+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	1fff7a18 	.word	0x1fff7a18

08003810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e033      	b.n	800388e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fa6a 	bl	8002d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d118      	bne.n	8003880 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003856:	f023 0302 	bic.w	r3, r3, #2
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 faec 	bl	8003e40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
 800387e:	e001      	b.n	8003884 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e022      	b.n	80038f2 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0202 	orr.w	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fa5a 	bl	8002d90 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Start+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e097      	b.n	8003a46 <HAL_ADC_Start+0x14a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d018      	beq.n	800395e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800393c:	4b45      	ldr	r3, [pc, #276]	; (8003a54 <HAL_ADC_Start+0x158>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a45      	ldr	r2, [pc, #276]	; (8003a58 <HAL_ADC_Start+0x15c>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9a      	lsrs	r2, r3, #18
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003950:	e002      	b.n	8003958 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3b01      	subs	r3, #1
 8003956:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f9      	bne.n	8003952 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d15f      	bne.n	8003a2c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003996:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	d106      	bne.n	80039ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f023 0206 	bic.w	r2, r3, #6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
 80039b8:	e002      	b.n	80039c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_ADC_Start+0x160>)
 80039ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d129      	bne.n	8003a44 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	e020      	b.n	8003a44 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <HAL_ADC_Start+0x164>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d11b      	bne.n	8003a44 <HAL_ADC_Start+0x148>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d114      	bne.n	8003a44 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	e00b      	b.n	8003a44 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f043 0210 	orr.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	2000000c 	.word	0x2000000c
 8003a58:	431bde83 	.word	0x431bde83
 8003a5c:	40012300 	.word	0x40012300
 8003a60:	40012000 	.word	0x40012000

08003a64 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_Stop+0x16>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e021      	b.n	8003abe <HAL_ADC_Stop+0x5a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d113      	bne.n	8003b10 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d10b      	bne.n	8003b10 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e063      	b.n	8003bd8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b10:	f7ff fe0a 	bl	8003728 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b16:	e021      	b.n	8003b5c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d01d      	beq.n	8003b5c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_ADC_PollForConversion+0x6c>
 8003b26:	f7ff fdff 	bl	8003728 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d212      	bcs.n	8003b5c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d00b      	beq.n	8003b5c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e03d      	b.n	8003bd8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d1d6      	bne.n	8003b18 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0212 	mvn.w	r2, #18
 8003b72:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d123      	bne.n	8003bd6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d111      	bne.n	8003bd6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x1c>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e105      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x228>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b09      	cmp	r3, #9
 8003c26:	d925      	bls.n	8003c74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3b1e      	subs	r3, #30
 8003c3e:	2207      	movs	r2, #7
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43da      	mvns	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68d9      	ldr	r1, [r3, #12]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4403      	add	r3, r0
 8003c66:	3b1e      	subs	r3, #30
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	e022      	b.n	8003cba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	2207      	movs	r2, #7
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	400a      	ands	r2, r1
 8003c96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6919      	ldr	r1, [r3, #16]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4618      	mov	r0, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4403      	add	r3, r0
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d824      	bhi.n	8003d0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3b05      	subs	r3, #5
 8003cd4:	221f      	movs	r2, #31
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3b05      	subs	r3, #5
 8003cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0a:	e04c      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d824      	bhi.n	8003d5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	3b23      	subs	r3, #35	; 0x23
 8003d26:	221f      	movs	r2, #31
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	400a      	ands	r2, r1
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4618      	mov	r0, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3b23      	subs	r3, #35	; 0x23
 8003d50:	fa00 f203 	lsl.w	r2, r0, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5c:	e023      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3b41      	subs	r3, #65	; 0x41
 8003d70:	221f      	movs	r2, #31
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	3b41      	subs	r3, #65	; 0x41
 8003d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_ADC_ConfigChannel+0x234>)
 8003da8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_ADC_ConfigChannel+0x238>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d109      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1cc>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d105      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_ADC_ConfigChannel+0x238>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d123      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x21e>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d003      	beq.n	8003de2 <HAL_ADC_ConfigChannel+0x1e6>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b11      	cmp	r3, #17
 8003de0:	d11b      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d111      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <HAL_ADC_ConfigChannel+0x23c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_ADC_ConfigChannel+0x240>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	0c9a      	lsrs	r2, r3, #18
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e0c:	e002      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f9      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40012300 	.word	0x40012300
 8003e34:	40012000 	.word	0x40012000
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	431bde83 	.word	0x431bde83

08003e40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e48:	4b79      	ldr	r3, [pc, #484]	; (8004030 <ADC_Init+0x1f0>)
 8003e4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	021a      	lsls	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6899      	ldr	r1, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	4a58      	ldr	r2, [pc, #352]	; (8004034 <ADC_Init+0x1f4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	e00f      	b.n	8003f3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0202 	bic.w	r2, r2, #2
 8003f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6899      	ldr	r1, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7e1b      	ldrb	r3, [r3, #24]
 8003f58:	005a      	lsls	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	3b01      	subs	r3, #1
 8003f98:	035a      	lsls	r2, r3, #13
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	e007      	b.n	8003fb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	051a      	lsls	r2, r3, #20
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ff6:	025a      	lsls	r2, r3, #9
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	029a      	lsls	r2, r3, #10
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40012300 	.word	0x40012300
 8004034:	0f000001 	.word	0x0f000001

08004038 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e031      	b.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 021f 	bic.w	r2, r3, #31
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40012300 	.word	0x40012300

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db12      	blt.n	800419c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	490a      	ldr	r1, [pc, #40]	; (80041a8 <__NVIC_DisableIRQ+0x44>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	3320      	adds	r3, #32
 800418c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004190:	f3bf 8f4f 	dsb	sy
}
 8004194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004196:	f3bf 8f6f 	isb	sy
}
 800419a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000e100 	.word	0xe000e100

080041ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	db0a      	blt.n	80041d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	490c      	ldr	r1, [pc, #48]	; (80041f8 <__NVIC_SetPriority+0x4c>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	0112      	lsls	r2, r2, #4
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	440b      	add	r3, r1
 80041d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d4:	e00a      	b.n	80041ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4908      	ldr	r1, [pc, #32]	; (80041fc <__NVIC_SetPriority+0x50>)
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3b04      	subs	r3, #4
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	440b      	add	r3, r1
 80041ea:	761a      	strb	r2, [r3, #24]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000e100 	.word	0xe000e100
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	; 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f1c3 0307 	rsb	r3, r3, #7
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf28      	it	cs
 800421e:	2304      	movcs	r3, #4
 8004220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3304      	adds	r3, #4
 8004226:	2b06      	cmp	r3, #6
 8004228:	d902      	bls.n	8004230 <NVIC_EncodePriority+0x30>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3b03      	subs	r3, #3
 800422e:	e000      	b.n	8004232 <NVIC_EncodePriority+0x32>
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004234:	f04f 32ff 	mov.w	r2, #4294967295
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43da      	mvns	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	401a      	ands	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004248:	f04f 31ff 	mov.w	r1, #4294967295
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	43d9      	mvns	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	4313      	orrs	r3, r2
         );
}
 800425a:	4618      	mov	r0, r3
 800425c:	3724      	adds	r7, #36	; 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800426c:	f3bf 8f4f 	dsb	sy
}
 8004270:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <__NVIC_SystemReset+0x24>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800427a:	4904      	ldr	r1, [pc, #16]	; (800428c <__NVIC_SystemReset+0x24>)
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <__NVIC_SystemReset+0x28>)
 800427e:	4313      	orrs	r3, r2
 8004280:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004282:	f3bf 8f4f 	dsb	sy
}
 8004286:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <__NVIC_SystemReset+0x20>
 800428c:	e000ed00 	.word	0xe000ed00
 8004290:	05fa0004 	.word	0x05fa0004

08004294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a4:	d301      	bcc.n	80042aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00f      	b.n	80042ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <SysTick_Config+0x40>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b2:	210f      	movs	r1, #15
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	f7ff ff78 	bl	80041ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <SysTick_Config+0x40>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <SysTick_Config+0x40>)
 80042c4:	2207      	movs	r2, #7
 80042c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	e000e010 	.word	0xe000e010

080042d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff feef 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004300:	f7ff ff04 	bl	800410c <__NVIC_GetPriorityGrouping>
 8004304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff ff78 	bl	8004200 <NVIC_EncodePriority>
 8004310:	4602      	mov	r2, r0
 8004312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff47 	bl	80041ac <__NVIC_SetPriority>
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fef7 	bl	8004128 <__NVIC_EnableIRQ>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	4603      	mov	r3, r0
 800434a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff07 	bl	8004164 <__NVIC_DisableIRQ>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004362:	f7ff ff81 	bl	8004268 <__NVIC_SystemReset>

08004366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ff90 	bl	8004294 <SysTick_Config>
 8004374:	4603      	mov	r3, r0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7ff f9cc 	bl	8003728 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e099      	b.n	80044d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043bc:	e00f      	b.n	80043de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043be:	f7ff f9b3 	bl	8003728 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d908      	bls.n	80043de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e078      	b.n	80044d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e8      	bne.n	80043be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_DMA_Init+0x158>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b04      	cmp	r3, #4
 8004436:	d107      	bne.n	8004448 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4313      	orrs	r3, r2
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0307 	bic.w	r3, r3, #7
 800445e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2b04      	cmp	r3, #4
 8004470:	d117      	bne.n	80044a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00e      	beq.n	80044a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb43 	bl	8004b10 <DMA_CheckFifoParam>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800449e:	2301      	movs	r3, #1
 80044a0:	e016      	b.n	80044d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fafa 	bl	8004aa4 <DMA_CalcBaseAndBitshift>
 80044b0:	4603      	mov	r3, r0
 80044b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	409a      	lsls	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	f010803f 	.word	0xf010803f

080044dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e050      	b.n	8004590 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d101      	bne.n	80044fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
 80044fc:	e048      	b.n	8004590 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2221      	movs	r2, #33	; 0x21
 800453c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fab0 	bl	8004aa4 <DMA_CalcBaseAndBitshift>
 8004544:	4603      	mov	r3, r0
 8004546:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	223f      	movs	r2, #63	; 0x3f
 8004572:	409a      	lsls	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_DMA_Start+0x20>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e026      	b.n	8004606 <HAL_DMA_Start+0x6e>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d115      	bne.n	80045f8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fa31 	bl	8004a48 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e005      	b.n	8004604 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004600:	2302      	movs	r3, #2
 8004602:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004604:	7dfb      	ldrb	r3, [r7, #23]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff f884 	bl	8003728 <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d008      	beq.n	8004640 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2280      	movs	r2, #128	; 0x80
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e052      	b.n	80046e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0216 	bic.w	r2, r2, #22
 800464e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800465e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <HAL_DMA_Abort+0x62>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0208 	bic.w	r2, r2, #8
 800467e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004690:	e013      	b.n	80046ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004692:	f7ff f849 	bl	8003728 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b05      	cmp	r3, #5
 800469e:	d90c      	bls.n	80046ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e015      	b.n	80046e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e4      	bne.n	8004692 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	223f      	movs	r2, #63	; 0x3f
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d004      	beq.n	800470c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e00c      	b.n	8004726 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2205      	movs	r2, #5
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004740:	4b8e      	ldr	r3, [pc, #568]	; (800497c <HAL_DMA_IRQHandler+0x248>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a8e      	ldr	r2, [pc, #568]	; (8004980 <HAL_DMA_IRQHandler+0x24c>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2208      	movs	r2, #8
 8004760:	409a      	lsls	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01a      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	2208      	movs	r2, #8
 800478e:	409a      	lsls	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	2204      	movs	r2, #4
 80047dc:	409a      	lsls	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	2210      	movs	r2, #16
 8004812:	409a      	lsls	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d043      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d03c      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2210      	movs	r2, #16
 8004830:	409a      	lsls	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d018      	beq.n	8004876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d108      	bne.n	8004864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d024      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e01f      	b.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
 8004874:	e016      	b.n	80048a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0208 	bic.w	r2, r2, #8
 8004892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	2220      	movs	r2, #32
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 808f 	beq.w	80049d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8087 	beq.w	80049d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	2220      	movs	r2, #32
 80048cc:	409a      	lsls	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d136      	bne.n	800494c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0216 	bic.w	r2, r2, #22
 80048ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_DMA_IRQHandler+0x1da>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0208 	bic.w	r2, r2, #8
 800491c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	223f      	movs	r2, #63	; 0x3f
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	2b00      	cmp	r3, #0
 8004940:	d07e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
        }
        return;
 800494a:	e079      	b.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10d      	bne.n	8004984 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	2b00      	cmp	r3, #0
 800496e:	d031      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
 8004978:	e02c      	b.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c
 8004980:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d023      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
 8004994:	e01e      	b.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10f      	bne.n	80049c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0210 	bic.w	r2, r2, #16
 80049b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d032      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2205      	movs	r2, #5
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d307      	bcc.n	8004a1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f2      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x2cc>
 8004a1a:	e000      	b.n	8004a1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a40:	bf00      	nop
    }
  }
}
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d108      	bne.n	8004a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a86:	e007      	b.n	8004a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3b10      	subs	r3, #16
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <DMA_CalcBaseAndBitshift+0x64>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004abe:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <DMA_CalcBaseAndBitshift+0x68>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d909      	bls.n	8004ae6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae4:	e007      	b.n	8004af6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	aaaaaaab 	.word	0xaaaaaaab
 8004b0c:	08021688 	.word	0x08021688

08004b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d11f      	bne.n	8004b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d856      	bhi.n	8004bde <DMA_CheckFifoParam+0xce>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <DMA_CheckFifoParam+0x28>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b5b 	.word	0x08004b5b
 8004b40:	08004b49 	.word	0x08004b49
 8004b44:	08004bdf 	.word	0x08004bdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d046      	beq.n	8004be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b58:	e043      	b.n	8004be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b62:	d140      	bne.n	8004be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b68:	e03d      	b.n	8004be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	d121      	bne.n	8004bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d837      	bhi.n	8004bea <DMA_CheckFifoParam+0xda>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <DMA_CheckFifoParam+0x70>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004b97 	.word	0x08004b97
 8004b88:	08004b91 	.word	0x08004b91
 8004b8c:	08004ba9 	.word	0x08004ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
      break;
 8004b94:	e030      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d025      	beq.n	8004bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba6:	e022      	b.n	8004bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb0:	d11f      	bne.n	8004bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bb6:	e01c      	b.n	8004bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d903      	bls.n	8004bc6 <DMA_CheckFifoParam+0xb6>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d003      	beq.n	8004bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bc4:	e018      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bca:	e015      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      break;
 8004bdc:	e00b      	b.n	8004bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8004bde:	bf00      	nop
 8004be0:	e00a      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
 8004be4:	e008      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004be6:	bf00      	nop
 8004be8:	e006      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004bea:	bf00      	nop
 8004bec:	e004      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c1a:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <HAL_FLASH_Program+0xa0>)
 8004c1c:	7e1b      	ldrb	r3, [r3, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_FLASH_Program+0x1e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e03b      	b.n	8004c9e <HAL_FLASH_Program+0x96>
 8004c26:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <HAL_FLASH_Program+0xa0>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c30:	f000 f87c 	bl	8004d2c <FLASH_WaitForLastOperation>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d12b      	bne.n	8004c96 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004c44:	783b      	ldrb	r3, [r7, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	68b8      	ldr	r0, [r7, #8]
 8004c4a:	f000 f927 	bl	8004e9c <FLASH_Program_Byte>
 8004c4e:	e016      	b.n	8004c7e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004c56:	883b      	ldrh	r3, [r7, #0]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f000 f8fa 	bl	8004e54 <FLASH_Program_HalfWord>
 8004c60:	e00d      	b.n	8004c7e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d105      	bne.n	8004c74 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	68b8      	ldr	r0, [r7, #8]
 8004c6e:	f000 f8cf 	bl	8004e10 <FLASH_Program_Word>
 8004c72:	e004      	b.n	8004c7e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c78:	68b8      	ldr	r0, [r7, #8]
 8004c7a:	f000 f897 	bl	8004dac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c82:	f000 f853 	bl	8004d2c <FLASH_WaitForLastOperation>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_FLASH_Program+0xa4>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_FLASH_Program+0xa4>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <HAL_FLASH_Program+0xa0>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20001a2c 	.word	0x20001a2c
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_FLASH_Unlock+0x38>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da0b      	bge.n	8004cda <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_FLASH_Unlock+0x38>)
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <HAL_FLASH_Unlock+0x3c>)
 8004cc6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_FLASH_Unlock+0x38>)
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_FLASH_Unlock+0x40>)
 8004ccc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_FLASH_Unlock+0x38>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	da01      	bge.n	8004cda <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004cda:	79fb      	ldrb	r3, [r7, #7]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	45670123 	.word	0x45670123
 8004cf0:	cdef89ab 	.word	0xcdef89ab

08004cf4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_FLASH_Lock+0x1c>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_FLASH_Lock+0x1c>)
 8004cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d02:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40023c00 	.word	0x40023c00

08004d14 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <HAL_FLASH_GetError+0x14>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
}  
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20001a2c 	.word	0x20001a2c

08004d2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <FLASH_WaitForLastOperation+0x78>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d3e:	f7fe fcf3 	bl	8003728 <HAL_GetTick>
 8004d42:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004d44:	e010      	b.n	8004d68 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d00c      	beq.n	8004d68 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <FLASH_WaitForLastOperation+0x38>
 8004d54:	f7fe fce8 	bl	8003728 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d201      	bcs.n	8004d68 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e019      	b.n	8004d9c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <FLASH_WaitForLastOperation+0x7c>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e8      	bne.n	8004d46 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <FLASH_WaitForLastOperation+0x7c>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <FLASH_WaitForLastOperation+0x7c>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <FLASH_WaitForLastOperation+0x7c>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004d92:	f000 f8a5 	bl	8004ee0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
  
}  
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20001a2c 	.word	0x20001a2c
 8004da8:	40023c00 	.word	0x40023c00

08004dac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <FLASH_Program_DoubleWord+0x60>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <FLASH_Program_DoubleWord+0x60>)
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <FLASH_Program_DoubleWord+0x60>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <FLASH_Program_DoubleWord+0x60>)
 8004dca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <FLASH_Program_DoubleWord+0x60>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <FLASH_Program_DoubleWord+0x60>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004de2:	f3bf 8f6f 	isb	sy
}
 8004de6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	000a      	movs	r2, r1
 8004df6:	2300      	movs	r3, #0
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	3104      	adds	r1, #4
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40023c00 	.word	0x40023c00

08004e10 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <FLASH_Program_Word+0x40>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <FLASH_Program_Word+0x40>)
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <FLASH_Program_Word+0x40>)
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <FLASH_Program_Word+0x40>)
 8004e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <FLASH_Program_Word+0x40>)
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <FLASH_Program_Word+0x40>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40023c00 	.word	0x40023c00

08004e54 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e60:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <FLASH_Program_HalfWord+0x44>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <FLASH_Program_HalfWord+0x44>)
 8004e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <FLASH_Program_HalfWord+0x44>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <FLASH_Program_HalfWord+0x44>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <FLASH_Program_HalfWord+0x44>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	4a06      	ldr	r2, [pc, #24]	; (8004e98 <FLASH_Program_HalfWord+0x44>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	801a      	strh	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40023c00 	.word	0x40023c00

08004e9c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <FLASH_Program_Byte+0x40>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <FLASH_Program_Byte+0x40>)
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <FLASH_Program_Byte+0x40>)
 8004eb6:	4a09      	ldr	r2, [pc, #36]	; (8004edc <FLASH_Program_Byte+0x40>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <FLASH_Program_Byte+0x40>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	4a06      	ldr	r2, [pc, #24]	; (8004edc <FLASH_Program_Byte+0x40>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	701a      	strb	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023c00 	.word	0x40023c00

08004ee0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004ee4:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004efa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004efc:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004efe:	2210      	movs	r2, #16
 8004f00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004f02:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f043 0308 	orr.w	r3, r3, #8
 8004f16:	4a24      	ldr	r2, [pc, #144]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f18:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004f20:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f36:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004f3e:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004f4a:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f043 0302 	orr.w	r3, r3, #2
 8004f52:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f54:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004f5c:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f043 0320 	orr.w	r3, r3, #32
 8004f90:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <FLASH_SetErrorCode+0xc8>)
 8004f92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <FLASH_SetErrorCode+0xc4>)
 8004f96:	2202      	movs	r2, #2
 8004f98:	60da      	str	r2, [r3, #12]
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	20001a2c 	.word	0x20001a2c

08004fac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <HAL_FLASHEx_Erase+0xd8>)
 8004fc0:	7e1b      	ldrb	r3, [r3, #24]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_FLASHEx_Erase+0x1e>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e058      	b.n	800507c <HAL_FLASHEx_Erase+0xd0>
 8004fca:	4b2e      	ldr	r3, [pc, #184]	; (8005084 <HAL_FLASHEx_Erase+0xd8>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fd4:	f7ff feaa 	bl	8004d2c <FLASH_WaitForLastOperation>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d148      	bne.n	8005074 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d115      	bne.n	800501e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f000 f844 	bl	800508c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005004:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005008:	f7ff fe90 	bl	8004d2c <FLASH_WaitForLastOperation>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_FLASHEx_Erase+0xdc>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_FLASHEx_Erase+0xdc>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	6113      	str	r3, [r2, #16]
 800501c:	e028      	b.n	8005070 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	e01c      	b.n	8005060 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f000 f850 	bl	80050d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005038:	f7ff fe78 	bl	8004d2c <FLASH_WaitForLastOperation>
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_FLASHEx_Erase+0xdc>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4a10      	ldr	r2, [pc, #64]	; (8005088 <HAL_FLASHEx_Erase+0xdc>)
 8005046:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800504a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	601a      	str	r2, [r3, #0]
          break;
 8005058:	e00a      	b.n	8005070 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	3301      	adds	r3, #1
 800505e:	60bb      	str	r3, [r7, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4413      	add	r3, r2
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	429a      	cmp	r2, r3
 800506e:	d3da      	bcc.n	8005026 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005070:	f000 f878 	bl	8005164 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <HAL_FLASHEx_Erase+0xd8>)
 8005076:	2200      	movs	r2, #0
 8005078:	761a      	strb	r2, [r3, #24]

  return status;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20001a2c 	.word	0x20001a2c
 8005088:	40023c00 	.word	0x40023c00

0800508c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <FLASH_MassErase+0x44>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	4a0c      	ldr	r2, [pc, #48]	; (80050d0 <FLASH_MassErase+0x44>)
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <FLASH_MassErase+0x44>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <FLASH_MassErase+0x44>)
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <FLASH_MassErase+0x44>)
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	4313      	orrs	r3, r2
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <FLASH_MassErase+0x44>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6113      	str	r3, [r2, #16]
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40023c00 	.word	0x40023c00

080050d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e010      	b.n	8005112 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d103      	bne.n	80050fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80050f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e009      	b.n	8005112 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d103      	bne.n	800510c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e002      	b.n	8005112 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800510c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	4a12      	ldr	r2, [pc, #72]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	490f      	ldr	r1, [pc, #60]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005130:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005134:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4313      	orrs	r3, r2
 8005140:	4a07      	ldr	r2, [pc, #28]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	4a04      	ldr	r2, [pc, #16]	; (8005160 <FLASH_Erase_Sector+0x8c>)
 800514e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005152:	6113      	str	r3, [r2, #16]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40023c00 	.word	0x40023c00

08005164 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005168:	4b20      	ldr	r3, [pc, #128]	; (80051ec <FLASH_FlushCaches+0x88>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005170:	2b00      	cmp	r3, #0
 8005172:	d017      	beq.n	80051a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <FLASH_FlushCaches+0x88>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <FLASH_FlushCaches+0x88>)
 800517a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800517e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <FLASH_FlushCaches+0x88>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a19      	ldr	r2, [pc, #100]	; (80051ec <FLASH_FlushCaches+0x88>)
 8005186:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <FLASH_FlushCaches+0x88>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <FLASH_FlushCaches+0x88>)
 8005192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005196:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <FLASH_FlushCaches+0x88>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <FLASH_FlushCaches+0x88>)
 800519e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d017      	beq.n	80051e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4b08      	ldr	r3, [pc, #32]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a07      	ldr	r2, [pc, #28]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <FLASH_FlushCaches+0x88>)
 80051da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051de:	6013      	str	r3, [r2, #0]
  }
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40023c00 	.word	0x40023c00

080051f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	e159      	b.n	80054c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800520c:	2201      	movs	r2, #1
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4013      	ands	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	429a      	cmp	r2, r3
 8005226:	f040 8148 	bne.w	80054ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d005      	beq.n	8005242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800523e:	2b02      	cmp	r3, #2
 8005240:	d130      	bne.n	80052a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	2203      	movs	r2, #3
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005278:	2201      	movs	r2, #1
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 0201 	and.w	r2, r3, #1
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d017      	beq.n	80052e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	2203      	movs	r2, #3
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4013      	ands	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d123      	bne.n	8005334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	08da      	lsrs	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3208      	adds	r2, #8
 80052f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	220f      	movs	r2, #15
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	08da      	lsrs	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3208      	adds	r2, #8
 800532e:	69b9      	ldr	r1, [r7, #24]
 8005330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	2203      	movs	r2, #3
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 0203 	and.w	r2, r3, #3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	4313      	orrs	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80a2 	beq.w	80054ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <HAL_GPIO_Init+0x2e8>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	4a56      	ldr	r2, [pc, #344]	; (80054d8 <HAL_GPIO_Init+0x2e8>)
 8005380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005384:	6453      	str	r3, [r2, #68]	; 0x44
 8005386:	4b54      	ldr	r3, [pc, #336]	; (80054d8 <HAL_GPIO_Init+0x2e8>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005392:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_GPIO_Init+0x2ec>)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	089b      	lsrs	r3, r3, #2
 8005398:	3302      	adds	r3, #2
 800539a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	220f      	movs	r2, #15
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a49      	ldr	r2, [pc, #292]	; (80054e0 <HAL_GPIO_Init+0x2f0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d019      	beq.n	80053f2 <HAL_GPIO_Init+0x202>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a48      	ldr	r2, [pc, #288]	; (80054e4 <HAL_GPIO_Init+0x2f4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <HAL_GPIO_Init+0x1fe>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a47      	ldr	r2, [pc, #284]	; (80054e8 <HAL_GPIO_Init+0x2f8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00d      	beq.n	80053ea <HAL_GPIO_Init+0x1fa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a46      	ldr	r2, [pc, #280]	; (80054ec <HAL_GPIO_Init+0x2fc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <HAL_GPIO_Init+0x1f6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a45      	ldr	r2, [pc, #276]	; (80054f0 <HAL_GPIO_Init+0x300>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d101      	bne.n	80053e2 <HAL_GPIO_Init+0x1f2>
 80053de:	2304      	movs	r3, #4
 80053e0:	e008      	b.n	80053f4 <HAL_GPIO_Init+0x204>
 80053e2:	2307      	movs	r3, #7
 80053e4:	e006      	b.n	80053f4 <HAL_GPIO_Init+0x204>
 80053e6:	2303      	movs	r3, #3
 80053e8:	e004      	b.n	80053f4 <HAL_GPIO_Init+0x204>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e002      	b.n	80053f4 <HAL_GPIO_Init+0x204>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <HAL_GPIO_Init+0x204>
 80053f2:	2300      	movs	r3, #0
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	f002 0203 	and.w	r2, r2, #3
 80053fa:	0092      	lsls	r2, r2, #2
 80053fc:	4093      	lsls	r3, r2
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4313      	orrs	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005404:	4935      	ldr	r1, [pc, #212]	; (80054dc <HAL_GPIO_Init+0x2ec>)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	089b      	lsrs	r3, r3, #2
 800540a:	3302      	adds	r3, #2
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <HAL_GPIO_Init+0x304>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005436:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <HAL_GPIO_Init+0x304>)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800543c:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <HAL_GPIO_Init+0x304>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <HAL_GPIO_Init+0x304>)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <HAL_GPIO_Init+0x304>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800548a:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <HAL_GPIO_Init+0x304>)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005490:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <HAL_GPIO_Init+0x304>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	43db      	mvns	r3, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4013      	ands	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054b4:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <HAL_GPIO_Init+0x304>)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3301      	adds	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	f67f aea2 	bls.w	800520c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3724      	adds	r7, #36	; 0x24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40013800 	.word	0x40013800
 80054e0:	40020000 	.word	0x40020000
 80054e4:	40020400 	.word	0x40020400
 80054e8:	40020800 	.word	0x40020800
 80054ec:	40020c00 	.word	0x40020c00
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40013c00 	.word	0x40013c00

080054f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e0bb      	b.n	800568c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005514:	2201      	movs	r2, #1
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	429a      	cmp	r2, r3
 800552c:	f040 80ab 	bne.w	8005686 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005530:	4a5c      	ldr	r2, [pc, #368]	; (80056a4 <HAL_GPIO_DeInit+0x1ac>)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	089b      	lsrs	r3, r3, #2
 8005536:	3302      	adds	r3, #2
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	220f      	movs	r2, #15
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a54      	ldr	r2, [pc, #336]	; (80056a8 <HAL_GPIO_DeInit+0x1b0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d019      	beq.n	800558e <HAL_GPIO_DeInit+0x96>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a53      	ldr	r2, [pc, #332]	; (80056ac <HAL_GPIO_DeInit+0x1b4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_GPIO_DeInit+0x92>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a52      	ldr	r2, [pc, #328]	; (80056b0 <HAL_GPIO_DeInit+0x1b8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00d      	beq.n	8005586 <HAL_GPIO_DeInit+0x8e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a51      	ldr	r2, [pc, #324]	; (80056b4 <HAL_GPIO_DeInit+0x1bc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <HAL_GPIO_DeInit+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a50      	ldr	r2, [pc, #320]	; (80056b8 <HAL_GPIO_DeInit+0x1c0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <HAL_GPIO_DeInit+0x86>
 800557a:	2304      	movs	r3, #4
 800557c:	e008      	b.n	8005590 <HAL_GPIO_DeInit+0x98>
 800557e:	2307      	movs	r3, #7
 8005580:	e006      	b.n	8005590 <HAL_GPIO_DeInit+0x98>
 8005582:	2303      	movs	r3, #3
 8005584:	e004      	b.n	8005590 <HAL_GPIO_DeInit+0x98>
 8005586:	2302      	movs	r3, #2
 8005588:	e002      	b.n	8005590 <HAL_GPIO_DeInit+0x98>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_GPIO_DeInit+0x98>
 800558e:	2300      	movs	r3, #0
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	f002 0203 	and.w	r2, r2, #3
 8005596:	0092      	lsls	r2, r2, #2
 8005598:	4093      	lsls	r3, r2
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	429a      	cmp	r2, r3
 800559e:	d132      	bne.n	8005606 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80055a0:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	4944      	ldr	r1, [pc, #272]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055ae:	4b43      	ldr	r3, [pc, #268]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	43db      	mvns	r3, r3
 80055b6:	4941      	ldr	r1, [pc, #260]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055bc:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	493d      	ldr	r1, [pc, #244]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055ca:	4b3c      	ldr	r3, [pc, #240]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	493a      	ldr	r1, [pc, #232]	; (80056bc <HAL_GPIO_DeInit+0x1c4>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	220f      	movs	r2, #15
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80055e8:	4a2e      	ldr	r2, [pc, #184]	; (80056a4 <HAL_GPIO_DeInit+0x1ac>)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	3302      	adds	r3, #2
 80055f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	43da      	mvns	r2, r3
 80055f8:	482a      	ldr	r0, [pc, #168]	; (80056a4 <HAL_GPIO_DeInit+0x1ac>)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	089b      	lsrs	r3, r3, #2
 80055fe:	400a      	ands	r2, r1
 8005600:	3302      	adds	r3, #2
 8005602:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	2103      	movs	r1, #3
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	08da      	lsrs	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3208      	adds	r2, #8
 8005624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	08d2      	lsrs	r2, r2, #3
 800563c:	4019      	ands	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3208      	adds	r2, #8
 8005642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	2103      	movs	r1, #3
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	401a      	ands	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	2101      	movs	r1, #1
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2103      	movs	r1, #3
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	401a      	ands	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	3301      	adds	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b0f      	cmp	r3, #15
 8005690:	f67f af40 	bls.w	8005514 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40020000 	.word	0x40020000
 80056ac:	40020400 	.word	0x40020400
 80056b0:	40020800 	.word	0x40020800
 80056b4:	40020c00 	.word	0x40020c00
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40013c00 	.word	0x40013c00

080056c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	887b      	ldrh	r3, [r7, #2]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e001      	b.n	80056e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
 80056fc:	4613      	mov	r3, r2
 80056fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005706:	887a      	ldrh	r2, [r7, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800570c:	e003      	b.n	8005716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	041a      	lsls	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619a      	str	r2, [r3, #24]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800573a:	4a05      	ldr	r2, [pc, #20]	; (8005750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd fa4e 	bl	8002be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40013c00 	.word	0x40013c00

08005754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e12b      	b.n	80059be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fd fb26 	bl	8002dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2224      	movs	r2, #36	; 0x24
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057b8:	f003 f822 	bl	8008800 <HAL_RCC_GetPCLK1Freq>
 80057bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4a81      	ldr	r2, [pc, #516]	; (80059c8 <HAL_I2C_Init+0x274>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d807      	bhi.n	80057d8 <HAL_I2C_Init+0x84>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4a80      	ldr	r2, [pc, #512]	; (80059cc <HAL_I2C_Init+0x278>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	bf94      	ite	ls
 80057d0:	2301      	movls	r3, #1
 80057d2:	2300      	movhi	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e006      	b.n	80057e6 <HAL_I2C_Init+0x92>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a7d      	ldr	r2, [pc, #500]	; (80059d0 <HAL_I2C_Init+0x27c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	bf94      	ite	ls
 80057e0:	2301      	movls	r3, #1
 80057e2:	2300      	movhi	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0e7      	b.n	80059be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a78      	ldr	r2, [pc, #480]	; (80059d4 <HAL_I2C_Init+0x280>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	0c9b      	lsrs	r3, r3, #18
 80057f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a6a      	ldr	r2, [pc, #424]	; (80059c8 <HAL_I2C_Init+0x274>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d802      	bhi.n	8005828 <HAL_I2C_Init+0xd4>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3301      	adds	r3, #1
 8005826:	e009      	b.n	800583c <HAL_I2C_Init+0xe8>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	4a69      	ldr	r2, [pc, #420]	; (80059d8 <HAL_I2C_Init+0x284>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	3301      	adds	r3, #1
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	430b      	orrs	r3, r1
 8005842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800584e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	495c      	ldr	r1, [pc, #368]	; (80059c8 <HAL_I2C_Init+0x274>)
 8005858:	428b      	cmp	r3, r1
 800585a:	d819      	bhi.n	8005890 <HAL_I2C_Init+0x13c>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1e59      	subs	r1, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	fbb1 f3f3 	udiv	r3, r1, r3
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005870:	400b      	ands	r3, r1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_I2C_Init+0x138>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1e59      	subs	r1, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	fbb1 f3f3 	udiv	r3, r1, r3
 8005884:	3301      	adds	r3, #1
 8005886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800588a:	e051      	b.n	8005930 <HAL_I2C_Init+0x1dc>
 800588c:	2304      	movs	r3, #4
 800588e:	e04f      	b.n	8005930 <HAL_I2C_Init+0x1dc>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d111      	bne.n	80058bc <HAL_I2C_Init+0x168>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1e58      	subs	r0, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6859      	ldr	r1, [r3, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	440b      	add	r3, r1
 80058a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058aa:	3301      	adds	r3, #1
 80058ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	e012      	b.n	80058e2 <HAL_I2C_Init+0x18e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1e58      	subs	r0, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	0099      	lsls	r1, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80058d2:	3301      	adds	r3, #1
 80058d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_Init+0x196>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e022      	b.n	8005930 <HAL_I2C_Init+0x1dc>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10e      	bne.n	8005910 <HAL_I2C_Init+0x1bc>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1e58      	subs	r0, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	440b      	add	r3, r1
 8005900:	fbb0 f3f3 	udiv	r3, r0, r3
 8005904:	3301      	adds	r3, #1
 8005906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590e:	e00f      	b.n	8005930 <HAL_I2C_Init+0x1dc>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1e58      	subs	r0, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	0099      	lsls	r1, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	fbb0 f3f3 	udiv	r3, r0, r3
 8005926:	3301      	adds	r3, #1
 8005928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	6809      	ldr	r1, [r1, #0]
 8005934:	4313      	orrs	r3, r2
 8005936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800595e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6911      	ldr	r1, [r2, #16]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68d2      	ldr	r2, [r2, #12]
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	430b      	orrs	r3, r1
 8005972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	000186a0 	.word	0x000186a0
 80059cc:	001e847f 	.word	0x001e847f
 80059d0:	003d08ff 	.word	0x003d08ff
 80059d4:	431bde83 	.word	0x431bde83
 80059d8:	10624dd3 	.word	0x10624dd3

080059dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e021      	b.n	8005a32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2224      	movs	r2, #36	; 0x24
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd fa28 	bl	8002e5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	461a      	mov	r2, r3
 8005a48:	460b      	mov	r3, r1
 8005a4a:	817b      	strh	r3, [r7, #10]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a50:	f7fd fe6a 	bl	8003728 <HAL_GetTick>
 8005a54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	f040 80e0 	bne.w	8005c24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2319      	movs	r3, #25
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4970      	ldr	r1, [pc, #448]	; (8005c30 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fd86 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0d3      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_I2C_Master_Transmit+0x50>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e0cc      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1ea>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d007      	beq.n	8005ab2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2221      	movs	r2, #33	; 0x21
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2210      	movs	r2, #16
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	893a      	ldrh	r2, [r7, #8]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a50      	ldr	r2, [pc, #320]	; (8005c34 <HAL_I2C_Master_Transmit+0x1f8>)
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005af4:	8979      	ldrh	r1, [r7, #10]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fbf0 	bl	80062e0 <I2C_MasterRequestWrite>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e08d      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b20:	e066      	b.n	8005bf0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	6a39      	ldr	r1, [r7, #32]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fe00 	bl	800672c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d107      	bne.n	8005b4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e06b      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_I2C_Master_Transmit+0x188>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d017      	beq.n	8005bc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	6a39      	ldr	r1, [r7, #32]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fdf0 	bl	80067ae <I2C_WaitOnBTFFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d107      	bne.n	8005bec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e01a      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d194      	bne.n	8005b22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	00100002 	.word	0x00100002
 8005c34:	ffff0000 	.word	0xffff0000

08005c38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	; 0x30
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	461a      	mov	r2, r3
 8005c44:	460b      	mov	r3, r1
 8005c46:	817b      	strh	r3, [r7, #10]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c4c:	f7fd fd6c 	bl	8003728 <HAL_GetTick>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	f040 820b 	bne.w	8006076 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2319      	movs	r3, #25
 8005c66:	2201      	movs	r2, #1
 8005c68:	497c      	ldr	r1, [pc, #496]	; (8005e5c <HAL_I2C_Master_Receive+0x224>)
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fc88 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	e1fe      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_I2C_Master_Receive+0x50>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e1f7      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d007      	beq.n	8005cae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2222      	movs	r2, #34	; 0x22
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2210      	movs	r2, #16
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	893a      	ldrh	r2, [r7, #8]
 8005cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a5c      	ldr	r2, [pc, #368]	; (8005e60 <HAL_I2C_Master_Receive+0x228>)
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cf0:	8979      	ldrh	r1, [r7, #10]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fb74 	bl	80063e4 <I2C_MasterRequestRead>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e1b8      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d113      	bne.n	8005d36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	623b      	str	r3, [r7, #32]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e18c      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d11b      	bne.n	8005d76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e16c      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d11b      	bne.n	8005db6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	e14c      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ddc:	e138      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	f200 80f1 	bhi.w	8005fca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d123      	bne.n	8005e38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fd1b 	bl	8006830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e139      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e36:	e10b      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d14e      	bne.n	8005ede <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2200      	movs	r2, #0
 8005e48:	4906      	ldr	r1, [pc, #24]	; (8005e64 <HAL_I2C_Master_Receive+0x22c>)
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fb98 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e10e      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
 8005e5a:	bf00      	nop
 8005e5c:	00100002 	.word	0x00100002
 8005e60:	ffff0000 	.word	0xffff0000
 8005e64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005edc:	e0b8      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4966      	ldr	r1, [pc, #408]	; (8006080 <HAL_I2C_Master_Receive+0x448>)
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fb49 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0bf      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	494f      	ldr	r1, [pc, #316]	; (8006080 <HAL_I2C_Master_Receive+0x448>)
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fb1b 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e091      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc8:	e042      	b.n	8006050 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fc2e 	bl	8006830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e04c      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d118      	bne.n	8006050 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	f47f aec2 	bne.w	8005dde <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	e000      	b.n	8006078 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006076:	2302      	movs	r3, #2
  }
}
 8006078:	4618      	mov	r0, r3
 800607a:	3728      	adds	r7, #40	; 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	00010004 	.word	0x00010004

08006084 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	460b      	mov	r3, r1
 8006092:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006094:	f7fd fb48 	bl	8003728 <HAL_GetTick>
 8006098:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	f040 8111 	bne.w	80062ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2319      	movs	r3, #25
 80060b2:	2201      	movs	r2, #1
 80060b4:	4988      	ldr	r1, [pc, #544]	; (80062d8 <HAL_I2C_IsDeviceReady+0x254>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa62 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
 80060c4:	e104      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_I2C_IsDeviceReady+0x50>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0fd      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d007      	beq.n	80060fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2224      	movs	r2, #36	; 0x24
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a70      	ldr	r2, [pc, #448]	; (80062dc <HAL_I2C_IsDeviceReady+0x258>)
 800611c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2200      	movs	r2, #0
 8006136:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fa20 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006154:	d103      	bne.n	800615e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e0b6      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006162:	897b      	ldrh	r3, [r7, #10]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006170:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006172:	f7fd fad9 	bl	8003728 <HAL_GetTick>
 8006176:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80061a6:	e025      	b.n	80061f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061a8:	f7fd fabe 	bl	8003728 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <HAL_I2C_IsDeviceReady+0x13a>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	22a0      	movs	r2, #160	; 0xa0
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2ba0      	cmp	r3, #160	; 0xa0
 80061fe:	d005      	beq.n	800620c <HAL_I2C_IsDeviceReady+0x188>
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <HAL_I2C_IsDeviceReady+0x188>
 8006206:	7dbb      	ldrb	r3, [r7, #22]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0cd      	beq.n	80061a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d129      	bne.n	8006276 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006230:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	2319      	movs	r3, #25
 800624e:	2201      	movs	r2, #1
 8006250:	4921      	ldr	r1, [pc, #132]	; (80062d8 <HAL_I2C_IsDeviceReady+0x254>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f994 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e036      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e02c      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006284:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800628e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2319      	movs	r3, #25
 8006296:	2201      	movs	r2, #1
 8006298:	490f      	ldr	r1, [pc, #60]	; (80062d8 <HAL_I2C_IsDeviceReady+0x254>)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f970 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e012      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	3301      	adds	r3, #1
 80062ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f4ff af32 	bcc.w	800611e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	00100002 	.word	0x00100002
 80062dc:	ffff0000 	.word	0xffff0000

080062e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	460b      	mov	r3, r1
 80062ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d006      	beq.n	800630a <I2C_MasterRequestWrite+0x2a>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d003      	beq.n	800630a <I2C_MasterRequestWrite+0x2a>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006308:	d108      	bne.n	800631c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e00b      	b.n	8006334 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	2b12      	cmp	r3, #18
 8006322:	d107      	bne.n	8006334 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006332:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f91d 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635a:	d103      	bne.n	8006364 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e035      	b.n	80063d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006370:	d108      	bne.n	8006384 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006372:	897b      	ldrh	r3, [r7, #10]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006380:	611a      	str	r2, [r3, #16]
 8006382:	e01b      	b.n	80063bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006384:	897b      	ldrh	r3, [r7, #10]
 8006386:	11db      	asrs	r3, r3, #7
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0306 	and.w	r3, r3, #6
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f063 030f 	orn	r3, r3, #15
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	490e      	ldr	r1, [pc, #56]	; (80063dc <I2C_MasterRequestWrite+0xfc>)
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f943 	bl	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e010      	b.n	80063d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063b2:	897b      	ldrh	r3, [r7, #10]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4907      	ldr	r1, [pc, #28]	; (80063e0 <I2C_MasterRequestWrite+0x100>)
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f933 	bl	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	00010008 	.word	0x00010008
 80063e0:	00010002 	.word	0x00010002

080063e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	460b      	mov	r3, r1
 80063f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006408:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d006      	beq.n	800641e <I2C_MasterRequestRead+0x3a>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d003      	beq.n	800641e <I2C_MasterRequestRead+0x3a>
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800641c:	d108      	bne.n	8006430 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	e00b      	b.n	8006448 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	2b11      	cmp	r3, #17
 8006436:	d107      	bne.n	8006448 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006446:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f893 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00d      	beq.n	800647c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646e:	d103      	bne.n	8006478 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e079      	b.n	8006570 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006484:	d108      	bne.n	8006498 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006486:	897b      	ldrh	r3, [r7, #10]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	611a      	str	r2, [r3, #16]
 8006496:	e05f      	b.n	8006558 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006498:	897b      	ldrh	r3, [r7, #10]
 800649a:	11db      	asrs	r3, r3, #7
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0306 	and.w	r3, r3, #6
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f063 030f 	orn	r3, r3, #15
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	4930      	ldr	r1, [pc, #192]	; (8006578 <I2C_MasterRequestRead+0x194>)
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f8b9 	bl	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e054      	b.n	8006570 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064c6:	897b      	ldrh	r3, [r7, #10]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4929      	ldr	r1, [pc, #164]	; (800657c <I2C_MasterRequestRead+0x198>)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f8a9 	bl	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e044      	b.n	8006570 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f831 	bl	8006580 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006532:	d103      	bne.n	800653c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e017      	b.n	8006570 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006540:	897b      	ldrh	r3, [r7, #10]
 8006542:	11db      	asrs	r3, r3, #7
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0306 	and.w	r3, r3, #6
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f063 030e 	orn	r3, r3, #14
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4907      	ldr	r1, [pc, #28]	; (800657c <I2C_MasterRequestRead+0x198>)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f865 	bl	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	00010008 	.word	0x00010008
 800657c:	00010002 	.word	0x00010002

08006580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006590:	e025      	b.n	80065de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d021      	beq.n	80065de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659a:	f7fd f8c5 	bl	8003728 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d116      	bne.n	80065de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	f043 0220 	orr.w	r2, r3, #32
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e023      	b.n	8006626 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10d      	bne.n	8006604 <I2C_WaitOnFlagUntilTimeout+0x84>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	43da      	mvns	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4013      	ands	r3, r2
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	e00c      	b.n	800661e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	43da      	mvns	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	bf0c      	ite	eq
 8006616:	2301      	moveq	r3, #1
 8006618:	2300      	movne	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	429a      	cmp	r2, r3
 8006622:	d0b6      	beq.n	8006592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800663c:	e051      	b.n	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664c:	d123      	bne.n	8006696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006666:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f043 0204 	orr.w	r2, r3, #4
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e046      	b.n	8006724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d021      	beq.n	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669e:	f7fd f843 	bl	8003728 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d302      	bcc.n	80066b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d116      	bne.n	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f043 0220 	orr.w	r2, r3, #32
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e020      	b.n	8006724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10c      	bne.n	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	43da      	mvns	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e00b      	b.n	800671e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	43da      	mvns	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d18d      	bne.n	800663e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006738:	e02d      	b.n	8006796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f8ce 	bl	80068dc <I2C_IsAcknowledgeFailed>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e02d      	b.n	80067a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d021      	beq.n	8006796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fc ffe9 	bl	8003728 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d116      	bne.n	8006796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f043 0220 	orr.w	r2, r3, #32
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e007      	b.n	80067a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	d1ca      	bne.n	800673a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067ba:	e02d      	b.n	8006818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f88d 	bl	80068dc <I2C_IsAcknowledgeFailed>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e02d      	b.n	8006828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d021      	beq.n	8006818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d4:	f7fc ffa8 	bl	8003728 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d302      	bcc.n	80067ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d116      	bne.n	8006818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e007      	b.n	8006828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b04      	cmp	r3, #4
 8006824:	d1ca      	bne.n	80067bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800683c:	e042      	b.n	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b10      	cmp	r3, #16
 800684a:	d119      	bne.n	8006880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0210 	mvn.w	r2, #16
 8006854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e029      	b.n	80068d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006880:	f7fc ff52 	bl	8003728 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e007      	b.n	80068d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d1b5      	bne.n	800683e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d11b      	bne.n	800692c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	f043 0204 	orr.w	r2, r3, #4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800693a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693c:	b08f      	sub	sp, #60	; 0x3c
 800693e:	af0a      	add	r7, sp, #40	; 0x28
 8006940:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e10f      	b.n	8006b6c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f013 ffaa 	bl	801a8c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2203      	movs	r2, #3
 8006970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f006 fc45 	bl	800d21a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	687e      	ldr	r6, [r7, #4]
 8006998:	466d      	mov	r5, sp
 800699a:	f106 0410 	add.w	r4, r6, #16
 800699e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80069ae:	1d33      	adds	r3, r6, #4
 80069b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f006 fb1c 	bl	800cff0 <USB_CoreInit>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e0d0      	b.n	8006b6c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f006 fc33 	bl	800d23c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	e04a      	b.n	8006a72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069dc:	7bfa      	ldrb	r2, [r7, #15]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	333d      	adds	r3, #61	; 0x3d
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069f0:	7bfa      	ldrb	r2, [r7, #15]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	333c      	adds	r3, #60	; 0x3c
 8006a00:	7bfa      	ldrb	r2, [r7, #15]
 8006a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006a04:	7bfa      	ldrb	r2, [r7, #15]
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	b298      	uxth	r0, r3
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	3344      	adds	r3, #68	; 0x44
 8006a18:	4602      	mov	r2, r0
 8006a1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a1c:	7bfa      	ldrb	r2, [r7, #15]
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3340      	adds	r3, #64	; 0x40
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a30:	7bfa      	ldrb	r2, [r7, #15]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3348      	adds	r3, #72	; 0x48
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a44:	7bfa      	ldrb	r2, [r7, #15]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	334c      	adds	r3, #76	; 0x4c
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a58:	7bfa      	ldrb	r2, [r7, #15]
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3354      	adds	r3, #84	; 0x54
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
 8006a72:	7bfa      	ldrb	r2, [r7, #15]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d3af      	bcc.n	80069dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	73fb      	strb	r3, [r7, #15]
 8006a80:	e044      	b.n	8006b0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006aaa:	7bfa      	ldrb	r2, [r7, #15]
 8006aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006aae:	7bfa      	ldrb	r2, [r7, #15]
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ac4:	7bfa      	ldrb	r2, [r7, #15]
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006af0:	7bfa      	ldrb	r2, [r7, #15]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]
 8006b0c:	7bfa      	ldrb	r2, [r7, #15]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d3b5      	bcc.n	8006a82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	687e      	ldr	r6, [r7, #4]
 8006b1e:	466d      	mov	r5, sp
 8006b20:	f106 0410 	add.w	r4, r6, #16
 8006b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b34:	1d33      	adds	r3, r6, #4
 8006b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b38:	6838      	ldr	r0, [r7, #0]
 8006b3a:	f006 fbcb 	bl	800d2d4 <USB_DevInit>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e00d      	b.n	8006b6c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f007 fd69 	bl	800e63c <USB_DevDisconnect>

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b74 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e015      	b.n	8006bb2 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2203      	movs	r2, #3
 8006b8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f007 fcbc 	bl	800e510 <USB_StopDevice>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e007      	b.n	8006bb2 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f013 fee0 	bl	801a968 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_PCD_Start+0x1c>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e020      	b.n	8006c18 <HAL_PCD_Start+0x5e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d109      	bne.n	8006bfa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d005      	beq.n	8006bfa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f006 fafa 	bl	800d1f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f007 fcf6 	bl	800e5fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_PCD_Stop+0x1c>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e026      	b.n	8006c8a <HAL_PCD_Stop+0x6a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f006 fae6 	bl	800d21a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f007 fcf2 	bl	800e63c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2110      	movs	r1, #16
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f006 fc9c 	bl	800d59c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d109      	bne.n	8006c80 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d005      	beq.n	8006c80 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c92:	b590      	push	{r4, r7, lr}
 8006c94:	b08d      	sub	sp, #52	; 0x34
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f007 fd7b 	bl	800e7a4 <USB_GetMode>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 848a 	bne.w	80075ca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f007 fcdf 	bl	800e67e <USB_ReadInterrupts>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8480 	beq.w	80075c8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f007 fccc 	bl	800e67e <USB_ReadInterrupts>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d107      	bne.n	8006d00 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f002 0202 	and.w	r2, r2, #2
 8006cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f007 fcba 	bl	800e67e <USB_ReadInterrupts>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d161      	bne.n	8006dd8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0210 	bic.w	r2, r2, #16
 8006d22:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f003 020f 	and.w	r2, r3, #15
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4413      	add	r3, r2
 8006d40:	3304      	adds	r3, #4
 8006d42:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	0c5b      	lsrs	r3, r3, #17
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d124      	bne.n	8006d9a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d035      	beq.n	8006dc8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	091b      	lsrs	r3, r3, #4
 8006d64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6a38      	ldr	r0, [r7, #32]
 8006d70:	f007 faa2 	bl	800e2b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	091b      	lsrs	r3, r3, #4
 8006d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d80:	441a      	add	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d92:	441a      	add	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	621a      	str	r2, [r3, #32]
 8006d98:	e016      	b.n	8006dc8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	0c5b      	lsrs	r3, r3, #17
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d110      	bne.n	8006dc8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dac:	2208      	movs	r2, #8
 8006dae:	4619      	mov	r1, r3
 8006db0:	6a38      	ldr	r0, [r7, #32]
 8006db2:	f007 fa81 	bl	800e2b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	091b      	lsrs	r3, r3, #4
 8006dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dc2:	441a      	add	r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0210 	orr.w	r2, r2, #16
 8006dd6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f007 fc4e 	bl	800e67e <USB_ReadInterrupts>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dec:	f040 80a7 	bne.w	8006f3e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f007 fc53 	bl	800e6a4 <USB_ReadDevAllOutEpInterrupt>
 8006dfe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006e00:	e099      	b.n	8006f36 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 808e 	beq.w	8006f2a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f007 fc77 	bl	800e70c <USB_ReadDevOutEPInterrupt>
 8006e1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00c      	beq.n	8006e44 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	461a      	mov	r2, r3
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fef0 	bl	8007c24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 ffc6 	bl	8007df4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2310      	movs	r3, #16
 8006e82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d030      	beq.n	8006ef0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	d109      	bne.n	8006eae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	78db      	ldrb	r3, [r3, #3]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d108      	bne.n	8006ede <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f013 fe17 	bl	801ab0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	2302      	movs	r3, #2
 8006eee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	461a      	mov	r2, r3
 8006f08:	2320      	movs	r3, #32
 8006f0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f28:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	085b      	lsrs	r3, r3, #1
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af62 	bne.w	8006e02 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f007 fb9b 	bl	800e67e <USB_ReadInterrupts>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f52:	f040 80db 	bne.w	800710c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f007 fbbc 	bl	800e6d8 <USB_ReadDevAllInEpInterrupt>
 8006f60:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006f66:	e0cd      	b.n	8007104 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80c2 	beq.w	80070f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f007 fbe2 	bl	800e748 <USB_ReadDevInEPInterrupt>
 8006f84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d057      	beq.n	8007040 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	2201      	movs	r2, #1
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	69f9      	ldr	r1, [r7, #28]
 8006fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d132      	bne.n	8007034 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	334c      	adds	r3, #76	; 0x4c
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4403      	add	r3, r0
 8006fee:	3348      	adds	r3, #72	; 0x48
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4419      	add	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4403      	add	r3, r0
 8007002:	334c      	adds	r3, #76	; 0x4c
 8007004:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d113      	bne.n	8007034 <HAL_PCD_IRQHandler+0x3a2>
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007010:	4613      	mov	r3, r2
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	3354      	adds	r3, #84	; 0x54
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d108      	bne.n	8007034 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800702c:	461a      	mov	r2, r3
 800702e:	2101      	movs	r1, #1
 8007030:	f007 fbea 	bl	800e808 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	b2db      	uxtb	r3, r3
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f013 fce1 	bl	801aa02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007056:	461a      	mov	r2, r3
 8007058:	2308      	movs	r3, #8
 800705a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	461a      	mov	r2, r3
 8007074:	2310      	movs	r3, #16
 8007076:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d008      	beq.n	8007094 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	461a      	mov	r2, r3
 8007090:	2340      	movs	r3, #64	; 0x40
 8007092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d023      	beq.n	80070e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800709e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070a0:	6a38      	ldr	r0, [r7, #32]
 80070a2:	f006 fa7b 	bl	800d59c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80070a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a8:	4613      	mov	r3, r2
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	3338      	adds	r3, #56	; 0x38
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	3304      	adds	r3, #4
 80070b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	78db      	ldrb	r3, [r3, #3]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d108      	bne.n	80070d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2200      	movs	r2, #0
 80070c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f013 fd2e 	bl	801ab30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	2302      	movs	r3, #2
 80070e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80070f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fd08 	bl	8007b08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	3301      	adds	r3, #1
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	f47f af2e 	bne.w	8006f68 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f007 fab4 	bl	800e67e <USB_ReadInterrupts>
 8007116:	4603      	mov	r3, r0
 8007118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800711c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007120:	d122      	bne.n	8007168 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800713c:	2b01      	cmp	r3, #1
 800713e:	d108      	bne.n	8007152 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fef0 	bl	8007f30 <HAL_PCDEx_LPM_Callback>
 8007150:	e002      	b.n	8007158 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f013 fccc 	bl	801aaf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f007 fa86 	bl	800e67e <USB_ReadInterrupts>
 8007172:	4603      	mov	r3, r0
 8007174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717c:	d112      	bne.n	80071a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b01      	cmp	r3, #1
 800718c:	d102      	bne.n	8007194 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f013 fc88 	bl	801aaa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80071a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f007 fa68 	bl	800e67e <USB_ReadInterrupts>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	f040 80b7 	bne.w	800732a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2110      	movs	r1, #16
 80071d6:	4618      	mov	r0, r3
 80071d8:	f006 f9e0 	bl	800d59c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e0:	e046      	b.n	8007270 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	461a      	mov	r2, r3
 80071f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007210:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007214:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	461a      	mov	r2, r3
 8007224:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007228:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007244:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007248:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	440a      	add	r2, r1
 8007260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007264:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007268:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	3301      	adds	r3, #1
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007276:	429a      	cmp	r2, r3
 8007278:	d3b3      	bcc.n	80071e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007288:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800728c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072a6:	f043 030b 	orr.w	r3, r3, #11
 80072aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072bc:	f043 030b 	orr.w	r3, r3, #11
 80072c0:	6453      	str	r3, [r2, #68]	; 0x44
 80072c2:	e015      	b.n	80072f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80072da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ea:	f043 030b 	orr.w	r3, r3, #11
 80072ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007302:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007314:	461a      	mov	r2, r3
 8007316:	f007 fa77 	bl	800e808 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695a      	ldr	r2, [r3, #20]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f007 f9a5 	bl	800e67e <USB_ReadInterrupts>
 8007334:	4603      	mov	r3, r0
 8007336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800733a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733e:	d124      	bne.n	800738a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f007 fa3b 	bl	800e7c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f006 f9a1 	bl	800d696 <USB_GetDevSpeed>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681c      	ldr	r4, [r3, #0]
 8007360:	f001 fa42 	bl	80087e8 <HAL_RCC_GetHCLKFreq>
 8007364:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800736a:	b2db      	uxtb	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	4620      	mov	r0, r4
 8007370:	f005 fea0 	bl	800d0b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f013 fb6c 	bl	801aa52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007388:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f007 f975 	bl	800e67e <USB_ReadInterrupts>
 8007394:	4603      	mov	r3, r0
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b08      	cmp	r3, #8
 800739c:	d10a      	bne.n	80073b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f013 fb49 	bl	801aa36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f002 0208 	and.w	r2, r2, #8
 80073b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f007 f960 	bl	800e67e <USB_ReadInterrupts>
 80073be:	4603      	mov	r3, r0
 80073c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c4:	2b80      	cmp	r3, #128	; 0x80
 80073c6:	d122      	bne.n	800740e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073d4:	2301      	movs	r3, #1
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
 80073d8:	e014      	b.n	8007404 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d105      	bne.n	80073fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb27 	bl	8007a4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	3301      	adds	r3, #1
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800740a:	429a      	cmp	r2, r3
 800740c:	d3e5      	bcc.n	80073da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f007 f933 	bl	800e67e <USB_ReadInterrupts>
 8007418:	4603      	mov	r3, r0
 800741a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800741e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007422:	d13b      	bne.n	800749c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007424:	2301      	movs	r3, #1
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
 8007428:	e02b      	b.n	8007482 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	3340      	adds	r3, #64	; 0x40
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d115      	bne.n	800747c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007450:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007452:	2b00      	cmp	r3, #0
 8007454:	da12      	bge.n	800747c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745a:	4613      	mov	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	333f      	adds	r3, #63	; 0x3f
 8007466:	2201      	movs	r2, #1
 8007468:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fae8 	bl	8007a4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	3301      	adds	r3, #1
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007488:	429a      	cmp	r2, r3
 800748a:	d3ce      	bcc.n	800742a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695a      	ldr	r2, [r3, #20]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800749a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f007 f8ec 	bl	800e67e <USB_ReadInterrupts>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074b0:	d155      	bne.n	800755e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074b2:	2301      	movs	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
 80074b6:	e045      	b.n	8007544 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074cc:	4613      	mov	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d12e      	bne.n	800753e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80074e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da2b      	bge.n	800753e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80074f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d121      	bne.n	800753e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fe:	4613      	mov	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800750c:	2201      	movs	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800753a:	6053      	str	r3, [r2, #4]
            break;
 800753c:	e007      	b.n	800754e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	3301      	adds	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	429a      	cmp	r2, r3
 800754c:	d3b4      	bcc.n	80074b8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695a      	ldr	r2, [r3, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800755c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f007 f88b 	bl	800e67e <USB_ReadInterrupts>
 8007568:	4603      	mov	r3, r0
 800756a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007572:	d10a      	bne.n	800758a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f013 faed 	bl	801ab54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f007 f875 	bl	800e67e <USB_ReadInterrupts>
 8007594:	4603      	mov	r3, r0
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b04      	cmp	r3, #4
 800759c:	d115      	bne.n	80075ca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f013 fadd 	bl	801ab70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	e000      	b.n	80075ca <HAL_PCD_IRQHandler+0x938>
      return;
 80075c8:	bf00      	nop
    }
  }
}
 80075ca:	3734      	adds	r7, #52	; 0x34
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd90      	pop	{r4, r7, pc}

080075d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d101      	bne.n	80075ea <HAL_PCD_SetAddress+0x1a>
 80075e6:	2302      	movs	r3, #2
 80075e8:	e013      	b.n	8007612 <HAL_PCD_SetAddress+0x42>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f006 ffd3 	bl	800e5ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	461a      	mov	r2, r3
 8007628:	4603      	mov	r3, r0
 800762a:	70fb      	strb	r3, [r7, #3]
 800762c:	460b      	mov	r3, r1
 800762e:	803b      	strh	r3, [r7, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800763c:	2b00      	cmp	r3, #0
 800763e:	da0f      	bge.n	8007660 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	f003 020f 	and.w	r2, r3, #15
 8007646:	4613      	mov	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	3338      	adds	r3, #56	; 0x38
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	3304      	adds	r3, #4
 8007656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	705a      	strb	r2, [r3, #1]
 800765e:	e00f      	b.n	8007680 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	f003 020f 	and.w	r2, r3, #15
 8007666:	4613      	mov	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	3304      	adds	r3, #4
 8007678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	b2da      	uxtb	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800768c:	883a      	ldrh	r2, [r7, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	78ba      	ldrb	r2, [r7, #2]
 8007696:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076aa:	78bb      	ldrb	r3, [r7, #2]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d102      	bne.n	80076b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_PCD_EP_Open+0xaa>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e00e      	b.n	80076e2 <HAL_PCD_EP_Open+0xc8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f006 f804 	bl	800d6e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da0f      	bge.n	800771e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	f003 020f 	and.w	r2, r3, #15
 8007704:	4613      	mov	r3, r2
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	3338      	adds	r3, #56	; 0x38
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	3304      	adds	r3, #4
 8007714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	705a      	strb	r2, [r3, #1]
 800771c:	e00f      	b.n	800773e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	f003 020f 	and.w	r2, r3, #15
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	3304      	adds	r3, #4
 8007736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	b2da      	uxtb	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_PCD_EP_Close+0x6e>
 8007754:	2302      	movs	r3, #2
 8007756:	e00e      	b.n	8007776 <HAL_PCD_EP_Close+0x8c>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	4618      	mov	r0, r3
 8007768:	f006 f842 	bl	800d7f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b086      	sub	sp, #24
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
 800778a:	460b      	mov	r3, r1
 800778c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	f003 020f 	and.w	r2, r3, #15
 8007794:	4613      	mov	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	3304      	adds	r3, #4
 80077a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2200      	movs	r2, #0
 80077be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d102      	bne.n	80077da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	6979      	ldr	r1, [r7, #20]
 80077f2:	f006 fb21 	bl	800de38 <USB_EP0StartXfer>
 80077f6:	e008      	b.n	800780a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	f006 f8cf 	bl	800d9a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	f003 020f 	and.w	r2, r3, #15
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	607a      	str	r2, [r7, #4]
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	460b      	mov	r3, r1
 8007852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	4613      	mov	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	3338      	adds	r3, #56	; 0x38
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	3304      	adds	r3, #4
 800786a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2200      	movs	r2, #0
 800787c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2201      	movs	r2, #1
 8007882:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	b2da      	uxtb	r2, r3
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d102      	bne.n	800789e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	6979      	ldr	r1, [r7, #20]
 80078b6:	f006 fabf 	bl	800de38 <USB_EP0StartXfer>
 80078ba:	e008      	b.n	80078ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	6979      	ldr	r1, [r7, #20]
 80078ca:	f006 f86d 	bl	800d9a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	f003 020f 	and.w	r2, r3, #15
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d901      	bls.n	80078f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e050      	b.n	8007998 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da0f      	bge.n	800791e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	4613      	mov	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	3338      	adds	r3, #56	; 0x38
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	3304      	adds	r3, #4
 8007914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	705a      	strb	r2, [r3, #1]
 800791c:	e00d      	b.n	800793a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <HAL_PCD_EP_SetStall+0x82>
 8007956:	2302      	movs	r3, #2
 8007958:	e01e      	b.n	8007998 <HAL_PCD_EP_SetStall+0xc0>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	4618      	mov	r0, r3
 800796a:	f006 fcfd 	bl	800e368 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	b2d9      	uxtb	r1, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007988:	461a      	mov	r2, r3
 800798a:	f006 ff3d 	bl	800e808 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d901      	bls.n	80079be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e042      	b.n	8007a44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da0f      	bge.n	80079e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	4613      	mov	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	3338      	adds	r3, #56	; 0x38
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	705a      	strb	r2, [r3, #1]
 80079e4:	e00f      	b.n	8007a06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	4613      	mov	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	3304      	adds	r3, #4
 80079fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_PCD_EP_ClrStall+0x86>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e00e      	b.n	8007a44 <HAL_PCD_EP_ClrStall+0xa4>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68f9      	ldr	r1, [r7, #12]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f006 fd05 	bl	800e444 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da0c      	bge.n	8007a7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	f003 020f 	and.w	r2, r3, #15
 8007a66:	4613      	mov	r3, r2
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	3338      	adds	r3, #56	; 0x38
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	4413      	add	r3, r2
 8007a74:	3304      	adds	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e00c      	b.n	8007a94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	3304      	adds	r3, #4
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f006 fb24 	bl	800e0e8 <USB_EPStopXfer>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_PCD_EP_Flush+0x1a>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e01b      	b.n	8007b00 <HAL_PCD_EP_Flush+0x52>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da09      	bge.n	8007aec <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f005 fd59 	bl	800d59c <USB_FlushTxFifo>
 8007aea:	e004      	b.n	8007af6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f005 fd87 	bl	800d604 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	3338      	adds	r3, #56	; 0x38
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d901      	bls.n	8007b40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e06c      	b.n	8007c1a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d902      	bls.n	8007b5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	3303      	adds	r3, #3
 8007b60:	089b      	lsrs	r3, r3, #2
 8007b62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b64:	e02b      	b.n	8007bbe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d902      	bls.n	8007b82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	3303      	adds	r3, #3
 8007b86:	089b      	lsrs	r3, r3, #2
 8007b88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6919      	ldr	r1, [r3, #16]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6978      	ldr	r0, [r7, #20]
 8007ba2:	f006 fb4b 	bl	800e23c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a1a      	ldr	r2, [r3, #32]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d809      	bhi.n	8007be8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1a      	ldr	r2, [r3, #32]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d203      	bcs.n	8007be8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1be      	bne.n	8007b66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d811      	bhi.n	8007c18 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	6939      	ldr	r1, [r7, #16]
 8007c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c14:	4013      	ands	r3, r2
 8007c16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	333c      	adds	r3, #60	; 0x3c
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d17b      	bne.n	8007d52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d015      	beq.n	8007c90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	4a61      	ldr	r2, [pc, #388]	; (8007dec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	f240 80b9 	bls.w	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80b3 	beq.w	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c86:	461a      	mov	r2, r3
 8007c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8c:	6093      	str	r3, [r2, #8]
 8007c8e:	e0a7      	b.n	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	2320      	movs	r3, #32
 8007caa:	6093      	str	r3, [r2, #8]
 8007cac:	e098      	b.n	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8093 	bne.w	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4a4b      	ldr	r2, [pc, #300]	; (8007dec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d90f      	bls.n	8007ce2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cde:	6093      	str	r3, [r2, #8]
 8007ce0:	e07e      	b.n	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	0159      	lsls	r1, r3, #5
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	440b      	add	r3, r1
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d114      	bne.n	8007d44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	2101      	movs	r1, #1
 8007d30:	f006 fd6a 	bl	800e808 <USB_EP0_OutStart>
 8007d34:	e006      	b.n	8007d44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f012 fe3e 	bl	801a9cc <HAL_PCD_DataOutStageCallback>
 8007d50:	e046      	b.n	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	4a26      	ldr	r2, [pc, #152]	; (8007df0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d124      	bne.n	8007da4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d70:	461a      	mov	r2, r3
 8007d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d76:	6093      	str	r3, [r2, #8]
 8007d78:	e032      	b.n	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	461a      	mov	r2, r3
 8007d92:	2320      	movs	r3, #32
 8007d94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f012 fe15 	bl	801a9cc <HAL_PCD_DataOutStageCallback>
 8007da2:	e01d      	b.n	8007de0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d114      	bne.n	8007dd4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	4613      	mov	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d108      	bne.n	8007dd4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f006 fd1a 	bl	800e808 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f012 fdf6 	bl	801a9cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3720      	adds	r7, #32
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	4f54300a 	.word	0x4f54300a
 8007df0:	4f54310a 	.word	0x4f54310a

08007df4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	333c      	adds	r3, #60	; 0x3c
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <PCD_EP_OutSetupPacket_int+0x88>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d90e      	bls.n	8007e48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d009      	beq.n	8007e48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	461a      	mov	r2, r3
 8007e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f012 fdad 	bl	801a9a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4a0a      	ldr	r2, [pc, #40]	; (8007e7c <PCD_EP_OutSetupPacket_int+0x88>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d90c      	bls.n	8007e70 <PCD_EP_OutSetupPacket_int+0x7c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d108      	bne.n	8007e70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	f006 fccc 	bl	800e808 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	4f54300a 	.word	0x4f54300a

08007e80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d107      	bne.n	8007eae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e9e:	883b      	ldrh	r3, [r7, #0]
 8007ea0:	0419      	lsls	r1, r3, #16
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8007eac:	e028      	b.n	8007f00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	0c1b      	lsrs	r3, r3, #16
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
 8007ec0:	e00d      	b.n	8007ede <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	3340      	adds	r3, #64	; 0x40
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	0c1b      	lsrs	r3, r3, #16
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	3301      	adds	r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	7bfa      	ldrb	r2, [r7, #15]
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d3ec      	bcc.n	8007ec2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ee8:	883b      	ldrh	r3, [r7, #0]
 8007eea:	0418      	lsls	r0, r3, #16
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	4302      	orrs	r2, r0
 8007ef8:	3340      	adds	r3, #64	; 0x40
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	887a      	ldrh	r2, [r7, #2]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8007f54:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <HAL_PWR_EnterSTOPMode+0x50>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f023 0203 	bic.w	r2, r3, #3
 8007f5c:	490e      	ldr	r1, [pc, #56]	; (8007f98 <HAL_PWR_EnterSTOPMode+0x50>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <HAL_PWR_EnterSTOPMode+0x54>)
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	4a0c      	ldr	r2, [pc, #48]	; (8007f9c <HAL_PWR_EnterSTOPMode+0x54>)
 8007f6a:	f043 0304 	orr.w	r3, r3, #4
 8007f6e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8007f76:	bf30      	wfi
 8007f78:	e002      	b.n	8007f80 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007f7a:	bf40      	sev
    __WFE();
 8007f7c:	bf20      	wfe
    __WFE();
 8007f7e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <HAL_PWR_EnterSTOPMode+0x54>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	4a05      	ldr	r2, [pc, #20]	; (8007f9c <HAL_PWR_EnterSTOPMode+0x54>)
 8007f86:	f023 0304 	bic.w	r3, r3, #4
 8007f8a:	6113      	str	r3, [r2, #16]
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	40007000 	.word	0x40007000
 8007f9c:	e000ed00 	.word	0xe000ed00

08007fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e267      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d075      	beq.n	80080aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fbe:	4b88      	ldr	r3, [pc, #544]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 030c 	and.w	r3, r3, #12
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d00c      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fca:	4b85      	ldr	r3, [pc, #532]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d112      	bne.n	8007ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fd6:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe2:	d10b      	bne.n	8007ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fe4:	4b7e      	ldr	r3, [pc, #504]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d05b      	beq.n	80080a8 <HAL_RCC_OscConfig+0x108>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d157      	bne.n	80080a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e242      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008004:	d106      	bne.n	8008014 <HAL_RCC_OscConfig+0x74>
 8008006:	4b76      	ldr	r3, [pc, #472]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a75      	ldr	r2, [pc, #468]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800800c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	e01d      	b.n	8008050 <HAL_RCC_OscConfig+0xb0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800801c:	d10c      	bne.n	8008038 <HAL_RCC_OscConfig+0x98>
 800801e:	4b70      	ldr	r3, [pc, #448]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a6f      	ldr	r2, [pc, #444]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	4b6d      	ldr	r3, [pc, #436]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a6c      	ldr	r2, [pc, #432]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	e00b      	b.n	8008050 <HAL_RCC_OscConfig+0xb0>
 8008038:	4b69      	ldr	r3, [pc, #420]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a68      	ldr	r2, [pc, #416]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800803e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	4b66      	ldr	r3, [pc, #408]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a65      	ldr	r2, [pc, #404]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800804a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800804e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d013      	beq.n	8008080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008058:	f7fb fb66 	bl	8003728 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008060:	f7fb fb62 	bl	8003728 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b64      	cmp	r3, #100	; 0x64
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e207      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008072:	4b5b      	ldr	r3, [pc, #364]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0f0      	beq.n	8008060 <HAL_RCC_OscConfig+0xc0>
 800807e:	e014      	b.n	80080aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008080:	f7fb fb52 	bl	8003728 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008088:	f7fb fb4e 	bl	8003728 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b64      	cmp	r3, #100	; 0x64
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e1f3      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800809a:	4b51      	ldr	r3, [pc, #324]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f0      	bne.n	8008088 <HAL_RCC_OscConfig+0xe8>
 80080a6:	e000      	b.n	80080aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d063      	beq.n	800817e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080b6:	4b4a      	ldr	r3, [pc, #296]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 030c 	and.w	r3, r3, #12
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080c2:	4b47      	ldr	r3, [pc, #284]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d11c      	bne.n	8008108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ce:	4b44      	ldr	r3, [pc, #272]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d116      	bne.n	8008108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080da:	4b41      	ldr	r3, [pc, #260]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_RCC_OscConfig+0x152>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d001      	beq.n	80080f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e1c7      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f2:	4b3b      	ldr	r3, [pc, #236]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4937      	ldr	r1, [pc, #220]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008102:	4313      	orrs	r3, r2
 8008104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008106:	e03a      	b.n	800817e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d020      	beq.n	8008152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008110:	4b34      	ldr	r3, [pc, #208]	; (80081e4 <HAL_RCC_OscConfig+0x244>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008116:	f7fb fb07 	bl	8003728 <HAL_GetTick>
 800811a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800811c:	e008      	b.n	8008130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800811e:	f7fb fb03 	bl	8003728 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e1a8      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008130:	4b2b      	ldr	r3, [pc, #172]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0f0      	beq.n	800811e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800813c:	4b28      	ldr	r3, [pc, #160]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4925      	ldr	r1, [pc, #148]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 800814c:	4313      	orrs	r3, r2
 800814e:	600b      	str	r3, [r1, #0]
 8008150:	e015      	b.n	800817e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008152:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <HAL_RCC_OscConfig+0x244>)
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008158:	f7fb fae6 	bl	8003728 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008160:	f7fb fae2 	bl	8003728 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e187      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f0      	bne.n	8008160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b00      	cmp	r3, #0
 8008188:	d036      	beq.n	80081f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d016      	beq.n	80081c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008192:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <HAL_RCC_OscConfig+0x248>)
 8008194:	2201      	movs	r2, #1
 8008196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008198:	f7fb fac6 	bl	8003728 <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081a0:	f7fb fac2 	bl	8003728 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e167      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <HAL_RCC_OscConfig+0x240>)
 80081b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0f0      	beq.n	80081a0 <HAL_RCC_OscConfig+0x200>
 80081be:	e01b      	b.n	80081f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <HAL_RCC_OscConfig+0x248>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c6:	f7fb faaf 	bl	8003728 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081cc:	e00e      	b.n	80081ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081ce:	f7fb faab 	bl	8003728 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d907      	bls.n	80081ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e150      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
 80081e0:	40023800 	.word	0x40023800
 80081e4:	42470000 	.word	0x42470000
 80081e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081ec:	4b88      	ldr	r3, [pc, #544]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80081ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1ea      	bne.n	80081ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8097 	beq.w	8008334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008206:	2300      	movs	r3, #0
 8008208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800820a:	4b81      	ldr	r3, [pc, #516]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10f      	bne.n	8008236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008216:	2300      	movs	r3, #0
 8008218:	60bb      	str	r3, [r7, #8]
 800821a:	4b7d      	ldr	r3, [pc, #500]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	4a7c      	ldr	r2, [pc, #496]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008224:	6413      	str	r3, [r2, #64]	; 0x40
 8008226:	4b7a      	ldr	r3, [pc, #488]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800822e:	60bb      	str	r3, [r7, #8]
 8008230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008236:	4b77      	ldr	r3, [pc, #476]	; (8008414 <HAL_RCC_OscConfig+0x474>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d118      	bne.n	8008274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008242:	4b74      	ldr	r3, [pc, #464]	; (8008414 <HAL_RCC_OscConfig+0x474>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a73      	ldr	r2, [pc, #460]	; (8008414 <HAL_RCC_OscConfig+0x474>)
 8008248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800824e:	f7fb fa6b 	bl	8003728 <HAL_GetTick>
 8008252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008254:	e008      	b.n	8008268 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008256:	f7fb fa67 	bl	8003728 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e10c      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008268:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <HAL_RCC_OscConfig+0x474>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0f0      	beq.n	8008256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d106      	bne.n	800828a <HAL_RCC_OscConfig+0x2ea>
 800827c:	4b64      	ldr	r3, [pc, #400]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	4a63      	ldr	r2, [pc, #396]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	6713      	str	r3, [r2, #112]	; 0x70
 8008288:	e01c      	b.n	80082c4 <HAL_RCC_OscConfig+0x324>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b05      	cmp	r3, #5
 8008290:	d10c      	bne.n	80082ac <HAL_RCC_OscConfig+0x30c>
 8008292:	4b5f      	ldr	r3, [pc, #380]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	4a5e      	ldr	r2, [pc, #376]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008298:	f043 0304 	orr.w	r3, r3, #4
 800829c:	6713      	str	r3, [r2, #112]	; 0x70
 800829e:	4b5c      	ldr	r3, [pc, #368]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a2:	4a5b      	ldr	r2, [pc, #364]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082a4:	f043 0301 	orr.w	r3, r3, #1
 80082a8:	6713      	str	r3, [r2, #112]	; 0x70
 80082aa:	e00b      	b.n	80082c4 <HAL_RCC_OscConfig+0x324>
 80082ac:	4b58      	ldr	r3, [pc, #352]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b0:	4a57      	ldr	r2, [pc, #348]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	6713      	str	r3, [r2, #112]	; 0x70
 80082b8:	4b55      	ldr	r3, [pc, #340]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	4a54      	ldr	r2, [pc, #336]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082be:	f023 0304 	bic.w	r3, r3, #4
 80082c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d015      	beq.n	80082f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082cc:	f7fb fa2c 	bl	8003728 <HAL_GetTick>
 80082d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082d2:	e00a      	b.n	80082ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d4:	f7fb fa28 	bl	8003728 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e0cb      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ea:	4b49      	ldr	r3, [pc, #292]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0ee      	beq.n	80082d4 <HAL_RCC_OscConfig+0x334>
 80082f6:	e014      	b.n	8008322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082f8:	f7fb fa16 	bl	8003728 <HAL_GetTick>
 80082fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082fe:	e00a      	b.n	8008316 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008300:	f7fb fa12 	bl	8003728 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	f241 3288 	movw	r2, #5000	; 0x1388
 800830e:	4293      	cmp	r3, r2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e0b5      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008316:	4b3e      	ldr	r3, [pc, #248]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ee      	bne.n	8008300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d105      	bne.n	8008334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008328:	4b39      	ldr	r3, [pc, #228]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	4a38      	ldr	r2, [pc, #224]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 800832e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008332:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80a1 	beq.w	8008480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800833e:	4b34      	ldr	r3, [pc, #208]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f003 030c 	and.w	r3, r3, #12
 8008346:	2b08      	cmp	r3, #8
 8008348:	d05c      	beq.n	8008404 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	2b02      	cmp	r3, #2
 8008350:	d141      	bne.n	80083d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008352:	4b31      	ldr	r3, [pc, #196]	; (8008418 <HAL_RCC_OscConfig+0x478>)
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008358:	f7fb f9e6 	bl	8003728 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008360:	f7fb f9e2 	bl	8003728 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e087      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008372:	4b27      	ldr	r3, [pc, #156]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f0      	bne.n	8008360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69da      	ldr	r2, [r3, #28]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	019b      	lsls	r3, r3, #6
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	085b      	lsrs	r3, r3, #1
 8008396:	3b01      	subs	r3, #1
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	061b      	lsls	r3, r3, #24
 80083a2:	491b      	ldr	r1, [pc, #108]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083a8:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <HAL_RCC_OscConfig+0x478>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ae:	f7fb f9bb 	bl	8003728 <HAL_GetTick>
 80083b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b4:	e008      	b.n	80083c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b6:	f7fb f9b7 	bl	8003728 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e05c      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0f0      	beq.n	80083b6 <HAL_RCC_OscConfig+0x416>
 80083d4:	e054      	b.n	8008480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083d6:	4b10      	ldr	r3, [pc, #64]	; (8008418 <HAL_RCC_OscConfig+0x478>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083dc:	f7fb f9a4 	bl	8003728 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083e4:	f7fb f9a0 	bl	8003728 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e045      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083f6:	4b06      	ldr	r3, [pc, #24]	; (8008410 <HAL_RCC_OscConfig+0x470>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f0      	bne.n	80083e4 <HAL_RCC_OscConfig+0x444>
 8008402:	e03d      	b.n	8008480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d107      	bne.n	800841c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e038      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
 8008410:	40023800 	.word	0x40023800
 8008414:	40007000 	.word	0x40007000
 8008418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800841c:	4b1b      	ldr	r3, [pc, #108]	; (800848c <HAL_RCC_OscConfig+0x4ec>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d028      	beq.n	800847c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008434:	429a      	cmp	r2, r3
 8008436:	d121      	bne.n	800847c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008442:	429a      	cmp	r2, r3
 8008444:	d11a      	bne.n	800847c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800844c:	4013      	ands	r3, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008454:	4293      	cmp	r3, r2
 8008456:	d111      	bne.n	800847c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	3b01      	subs	r3, #1
 8008466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008468:	429a      	cmp	r2, r3
 800846a:	d107      	bne.n	800847c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008478:	429a      	cmp	r2, r3
 800847a:	d001      	beq.n	8008480 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	40023800 	.word	0x40023800

08008490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0cc      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084a4:	4b68      	ldr	r3, [pc, #416]	; (8008648 <HAL_RCC_ClockConfig+0x1b8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d90c      	bls.n	80084cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b2:	4b65      	ldr	r3, [pc, #404]	; (8008648 <HAL_RCC_ClockConfig+0x1b8>)
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ba:	4b63      	ldr	r3, [pc, #396]	; (8008648 <HAL_RCC_ClockConfig+0x1b8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d001      	beq.n	80084cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0b8      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d020      	beq.n	800851a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084e4:	4b59      	ldr	r3, [pc, #356]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	4a58      	ldr	r2, [pc, #352]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084fc:	4b53      	ldr	r3, [pc, #332]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	4a52      	ldr	r2, [pc, #328]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008508:	4b50      	ldr	r3, [pc, #320]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	494d      	ldr	r1, [pc, #308]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008516:	4313      	orrs	r3, r2
 8008518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d044      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d107      	bne.n	800853e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800852e:	4b47      	ldr	r3, [pc, #284]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d119      	bne.n	800856e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e07f      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d003      	beq.n	800854e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800854a:	2b03      	cmp	r3, #3
 800854c:	d107      	bne.n	800855e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800854e:	4b3f      	ldr	r3, [pc, #252]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e06f      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800855e:	4b3b      	ldr	r3, [pc, #236]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e067      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800856e:	4b37      	ldr	r3, [pc, #220]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 0203 	bic.w	r2, r3, #3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	4934      	ldr	r1, [pc, #208]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 800857c:	4313      	orrs	r3, r2
 800857e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008580:	f7fb f8d2 	bl	8003728 <HAL_GetTick>
 8008584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008586:	e00a      	b.n	800859e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008588:	f7fb f8ce 	bl	8003728 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	f241 3288 	movw	r2, #5000	; 0x1388
 8008596:	4293      	cmp	r3, r2
 8008598:	d901      	bls.n	800859e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e04f      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859e:	4b2b      	ldr	r3, [pc, #172]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 020c 	and.w	r2, r3, #12
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d1eb      	bne.n	8008588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085b0:	4b25      	ldr	r3, [pc, #148]	; (8008648 <HAL_RCC_ClockConfig+0x1b8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d20c      	bcs.n	80085d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <HAL_RCC_ClockConfig+0x1b8>)
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <HAL_RCC_ClockConfig+0x1b8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d001      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e032      	b.n	800863e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085e4:	4b19      	ldr	r3, [pc, #100]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4916      	ldr	r1, [pc, #88]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008602:	4b12      	ldr	r3, [pc, #72]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	490e      	ldr	r1, [pc, #56]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008616:	f000 f821 	bl	800865c <HAL_RCC_GetSysClockFreq>
 800861a:	4602      	mov	r2, r0
 800861c:	4b0b      	ldr	r3, [pc, #44]	; (800864c <HAL_RCC_ClockConfig+0x1bc>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	490a      	ldr	r1, [pc, #40]	; (8008650 <HAL_RCC_ClockConfig+0x1c0>)
 8008628:	5ccb      	ldrb	r3, [r1, r3]
 800862a:	fa22 f303 	lsr.w	r3, r2, r3
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <HAL_RCC_ClockConfig+0x1c4>)
 8008630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008632:	4b09      	ldr	r3, [pc, #36]	; (8008658 <HAL_RCC_ClockConfig+0x1c8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f7fb f832 	bl	80036a0 <HAL_InitTick>

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40023c00 	.word	0x40023c00
 800864c:	40023800 	.word	0x40023800
 8008650:	08021670 	.word	0x08021670
 8008654:	2000000c 	.word	0x2000000c
 8008658:	20000010 	.word	0x20000010

0800865c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800865c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008660:	b090      	sub	sp, #64	; 0x40
 8008662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800866c:	2300      	movs	r3, #0
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008674:	4b59      	ldr	r3, [pc, #356]	; (80087dc <HAL_RCC_GetSysClockFreq+0x180>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 030c 	and.w	r3, r3, #12
 800867c:	2b08      	cmp	r3, #8
 800867e:	d00d      	beq.n	800869c <HAL_RCC_GetSysClockFreq+0x40>
 8008680:	2b08      	cmp	r3, #8
 8008682:	f200 80a1 	bhi.w	80087c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <HAL_RCC_GetSysClockFreq+0x34>
 800868a:	2b04      	cmp	r3, #4
 800868c:	d003      	beq.n	8008696 <HAL_RCC_GetSysClockFreq+0x3a>
 800868e:	e09b      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008690:	4b53      	ldr	r3, [pc, #332]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008692:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008694:	e09b      	b.n	80087ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008696:	4b53      	ldr	r3, [pc, #332]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008698:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800869a:	e098      	b.n	80087ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800869c:	4b4f      	ldr	r3, [pc, #316]	; (80087dc <HAL_RCC_GetSysClockFreq+0x180>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086a6:	4b4d      	ldr	r3, [pc, #308]	; (80087dc <HAL_RCC_GetSysClockFreq+0x180>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d028      	beq.n	8008704 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b2:	4b4a      	ldr	r3, [pc, #296]	; (80087dc <HAL_RCC_GetSysClockFreq+0x180>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	099b      	lsrs	r3, r3, #6
 80086b8:	2200      	movs	r2, #0
 80086ba:	623b      	str	r3, [r7, #32]
 80086bc:	627a      	str	r2, [r7, #36]	; 0x24
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80086c4:	2100      	movs	r1, #0
 80086c6:	4b47      	ldr	r3, [pc, #284]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80086c8:	fb03 f201 	mul.w	r2, r3, r1
 80086cc:	2300      	movs	r3, #0
 80086ce:	fb00 f303 	mul.w	r3, r0, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	4a43      	ldr	r2, [pc, #268]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80086d6:	fba0 1202 	umull	r1, r2, r0, r2
 80086da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086dc:	460a      	mov	r2, r1
 80086de:	62ba      	str	r2, [r7, #40]	; 0x28
 80086e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e2:	4413      	add	r3, r2
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	2200      	movs	r2, #0
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	61fa      	str	r2, [r7, #28]
 80086ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80086f6:	f7f8 fadf 	bl	8000cb8 <__aeabi_uldivmod>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4613      	mov	r3, r2
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008702:	e053      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008704:	4b35      	ldr	r3, [pc, #212]	; (80087dc <HAL_RCC_GetSysClockFreq+0x180>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	099b      	lsrs	r3, r3, #6
 800870a:	2200      	movs	r2, #0
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	617a      	str	r2, [r7, #20]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008716:	f04f 0b00 	mov.w	fp, #0
 800871a:	4652      	mov	r2, sl
 800871c:	465b      	mov	r3, fp
 800871e:	f04f 0000 	mov.w	r0, #0
 8008722:	f04f 0100 	mov.w	r1, #0
 8008726:	0159      	lsls	r1, r3, #5
 8008728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800872c:	0150      	lsls	r0, r2, #5
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	ebb2 080a 	subs.w	r8, r2, sl
 8008736:	eb63 090b 	sbc.w	r9, r3, fp
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008746:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800874a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800874e:	ebb2 0408 	subs.w	r4, r2, r8
 8008752:	eb63 0509 	sbc.w	r5, r3, r9
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	00eb      	lsls	r3, r5, #3
 8008760:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008764:	00e2      	lsls	r2, r4, #3
 8008766:	4614      	mov	r4, r2
 8008768:	461d      	mov	r5, r3
 800876a:	eb14 030a 	adds.w	r3, r4, sl
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	eb45 030b 	adc.w	r3, r5, fp
 8008774:	607b      	str	r3, [r7, #4]
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008782:	4629      	mov	r1, r5
 8008784:	028b      	lsls	r3, r1, #10
 8008786:	4621      	mov	r1, r4
 8008788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800878c:	4621      	mov	r1, r4
 800878e:	028a      	lsls	r2, r1, #10
 8008790:	4610      	mov	r0, r2
 8008792:	4619      	mov	r1, r3
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	2200      	movs	r2, #0
 8008798:	60bb      	str	r3, [r7, #8]
 800879a:	60fa      	str	r2, [r7, #12]
 800879c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087a0:	f7f8 fa8a 	bl	8000cb8 <__aeabi_uldivmod>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4613      	mov	r3, r2
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <HAL_RCC_GetSysClockFreq+0x180>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	0c1b      	lsrs	r3, r3, #16
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	3301      	adds	r3, #1
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80087bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80087c6:	e002      	b.n	80087ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087c8:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80087cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3740      	adds	r7, #64	; 0x40
 80087d4:	46bd      	mov	sp, r7
 80087d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087da:	bf00      	nop
 80087dc:	40023800 	.word	0x40023800
 80087e0:	00f42400 	.word	0x00f42400
 80087e4:	017d7840 	.word	0x017d7840

080087e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087ec:	4b03      	ldr	r3, [pc, #12]	; (80087fc <HAL_RCC_GetHCLKFreq+0x14>)
 80087ee:	681b      	ldr	r3, [r3, #0]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	2000000c 	.word	0x2000000c

08008800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008804:	f7ff fff0 	bl	80087e8 <HAL_RCC_GetHCLKFreq>
 8008808:	4602      	mov	r2, r0
 800880a:	4b05      	ldr	r3, [pc, #20]	; (8008820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	0a9b      	lsrs	r3, r3, #10
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	4903      	ldr	r1, [pc, #12]	; (8008824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008816:	5ccb      	ldrb	r3, [r1, r3]
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800881c:	4618      	mov	r0, r3
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40023800 	.word	0x40023800
 8008824:	08021680 	.word	0x08021680

08008828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800882c:	f7ff ffdc 	bl	80087e8 <HAL_RCC_GetHCLKFreq>
 8008830:	4602      	mov	r2, r0
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	0b5b      	lsrs	r3, r3, #13
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	4903      	ldr	r1, [pc, #12]	; (800884c <HAL_RCC_GetPCLK2Freq+0x24>)
 800883e:	5ccb      	ldrb	r3, [r1, r3]
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40023800 	.word	0x40023800
 800884c:	08021680 	.word	0x08021680

08008850 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d105      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008874:	2b00      	cmp	r3, #0
 8008876:	d035      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008878:	4b67      	ldr	r3, [pc, #412]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800887e:	f7fa ff53 	bl	8003728 <HAL_GetTick>
 8008882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008884:	e008      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008886:	f7fa ff4f 	bl	8003728 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e0ba      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008898:	4b60      	ldr	r3, [pc, #384]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1f0      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	019a      	lsls	r2, r3, #6
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	071b      	lsls	r3, r3, #28
 80088b0:	495a      	ldr	r1, [pc, #360]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088b8:	4b57      	ldr	r3, [pc, #348]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088be:	f7fa ff33 	bl	8003728 <HAL_GetTick>
 80088c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088c4:	e008      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088c6:	f7fa ff2f 	bl	8003728 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d901      	bls.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e09a      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088d8:	4b50      	ldr	r3, [pc, #320]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0f0      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8083 	beq.w	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	4b49      	ldr	r3, [pc, #292]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	4a48      	ldr	r2, [pc, #288]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008900:	6413      	str	r3, [r2, #64]	; 0x40
 8008902:	4b46      	ldr	r3, [pc, #280]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800890e:	4b44      	ldr	r3, [pc, #272]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a43      	ldr	r2, [pc, #268]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008918:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800891a:	f7fa ff05 	bl	8003728 <HAL_GetTick>
 800891e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008920:	e008      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008922:	f7fa ff01 	bl	8003728 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e06c      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008934:	4b3a      	ldr	r3, [pc, #232]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f0      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008940:	4b36      	ldr	r3, [pc, #216]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008948:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d02f      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	429a      	cmp	r2, r3
 800895c:	d028      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800895e:	4b2f      	ldr	r3, [pc, #188]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008966:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008968:	4b2e      	ldr	r3, [pc, #184]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800896a:	2201      	movs	r2, #1
 800896c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800896e:	4b2d      	ldr	r3, [pc, #180]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008974:	4a29      	ldr	r2, [pc, #164]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800897a:	4b28      	ldr	r3, [pc, #160]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b01      	cmp	r3, #1
 8008984:	d114      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008986:	f7fa fecf 	bl	8003728 <HAL_GetTick>
 800898a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800898c:	e00a      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800898e:	f7fa fecb 	bl	8003728 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f241 3288 	movw	r2, #5000	; 0x1388
 800899c:	4293      	cmp	r3, r2
 800899e:	d901      	bls.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e034      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089a4:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0ee      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089bc:	d10d      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80089be:	4b17      	ldr	r3, [pc, #92]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089d2:	4912      	ldr	r1, [pc, #72]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	608b      	str	r3, [r1, #8]
 80089d8:	e005      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80089da:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	4a0f      	ldr	r2, [pc, #60]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089e4:	6093      	str	r3, [r2, #8]
 80089e6:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f2:	490a      	ldr	r1, [pc, #40]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7c1a      	ldrb	r2, [r3, #16]
 8008a08:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008a0a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	42470068 	.word	0x42470068
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	40007000 	.word	0x40007000
 8008a24:	42470e40 	.word	0x42470e40
 8008a28:	424711e0 	.word	0x424711e0

08008a2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e066      	b.n	8008b10 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7f5b      	ldrb	r3, [r3, #29]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fa fa26 	bl	8002ea4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	22ca      	movs	r2, #202	; 0xca
 8008a64:	625a      	str	r2, [r3, #36]	; 0x24
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2253      	movs	r2, #83	; 0x53
 8008a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fbce 	bl	8009210 <RTC_EnterInitMode>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d12c      	bne.n	8008ad8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a90:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6899      	ldr	r1, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	68d2      	ldr	r2, [r2, #12]
 8008ab8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6919      	ldr	r1, [r3, #16]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	041a      	lsls	r2, r3, #16
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fbd5 	bl	800927e <RTC_ExitInitMode>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d113      	bne.n	8008b06 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	699a      	ldr	r2, [r3, #24]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	22ff      	movs	r2, #255	; 0xff
 8008b0c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	7f1b      	ldrb	r3, [r3, #28]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_RTC_SetTime+0x1c>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e087      	b.n	8008c44 <HAL_RTC_SetTime+0x12c>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d126      	bne.n	8008b94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d102      	bne.n	8008b5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fbb2 	bl	80092c8 <RTC_ByteToBcd2>
 8008b64:	4603      	mov	r3, r0
 8008b66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fbab 	bl	80092c8 <RTC_ByteToBcd2>
 8008b72:	4603      	mov	r3, r0
 8008b74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	789b      	ldrb	r3, [r3, #2]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fba3 	bl	80092c8 <RTC_ByteToBcd2>
 8008b82:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	78db      	ldrb	r3, [r3, #3]
 8008b8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	e018      	b.n	8008bc6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bb4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008bba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	78db      	ldrb	r3, [r3, #3]
 8008bc0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	22ca      	movs	r2, #202	; 0xca
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2253      	movs	r2, #83	; 0x53
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fb1a 	bl	8009210 <RTC_EnterInitMode>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008be0:	7cfb      	ldrb	r3, [r7, #19]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d120      	bne.n	8008c28 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008bf0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008bf4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6899      	ldr	r1, [r3, #8]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fb2d 	bl	800927e <RTC_ExitInitMode>
 8008c24:	4603      	mov	r3, r0
 8008c26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c28:	7cfb      	ldrb	r3, [r7, #19]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	22ff      	movs	r2, #255	; 0xff
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	771a      	strb	r2, [r3, #28]

  return status;
 8008c42:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd90      	pop	{r4, r7, pc}

08008c4c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008c7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008c82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	0d9b      	lsrs	r3, r3, #22
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d11a      	bne.n	8008cfe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fb18 	bl	8009302 <RTC_Bcd2ToByte>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fb0f 	bl	8009302 <RTC_Bcd2ToByte>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	789b      	ldrb	r3, [r3, #2]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fb06 	bl	8009302 <RTC_Bcd2ToByte>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d08:	b590      	push	{r4, r7, lr}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	7f1b      	ldrb	r3, [r3, #28]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_RTC_SetDate+0x1c>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e071      	b.n	8008e08 <HAL_RTC_SetDate+0x100>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10e      	bne.n	8008d54 <HAL_RTC_SetDate+0x4c>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	f003 0310 	and.w	r3, r3, #16
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d008      	beq.n	8008d54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	f023 0310 	bic.w	r3, r3, #16
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	330a      	adds	r3, #10
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d11c      	bne.n	8008d94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	78db      	ldrb	r3, [r3, #3]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fab2 	bl	80092c8 <RTC_ByteToBcd2>
 8008d64:	4603      	mov	r3, r0
 8008d66:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 faab 	bl	80092c8 <RTC_ByteToBcd2>
 8008d72:	4603      	mov	r3, r0
 8008d74:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d76:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	789b      	ldrb	r3, [r3, #2]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 faa3 	bl	80092c8 <RTC_ByteToBcd2>
 8008d82:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d84:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	e00e      	b.n	8008db2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	78db      	ldrb	r3, [r3, #3]
 8008d98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008da0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008da6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	22ca      	movs	r2, #202	; 0xca
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2253      	movs	r2, #83	; 0x53
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 fa24 	bl	8009210 <RTC_EnterInitMode>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008dcc:	7cfb      	ldrb	r3, [r7, #19]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10c      	bne.n	8008dec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ddc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008de0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 fa4b 	bl	800927e <RTC_ExitInitMode>
 8008de8:	4603      	mov	r3, r0
 8008dea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008dec:	7cfb      	ldrb	r3, [r7, #19]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	22ff      	movs	r2, #255	; 0xff
 8008dfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	771a      	strb	r2, [r3, #28]

  return status;
 8008e06:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	371c      	adds	r7, #28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd90      	pop	{r4, r7, pc}

08008e10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	0a1b      	lsrs	r3, r3, #8
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 031f 	and.w	r3, r3, #31
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	0b5b      	lsrs	r3, r3, #13
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d11a      	bne.n	8008ea4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	78db      	ldrb	r3, [r3, #3]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fa45 	bl	8009302 <RTC_Bcd2ToByte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	785b      	ldrb	r3, [r3, #1]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fa3c 	bl	8009302 <RTC_Bcd2ToByte>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	789b      	ldrb	r3, [r3, #2]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fa33 	bl	8009302 <RTC_Bcd2ToByte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008eb0:	b590      	push	{r4, r7, lr}
 8008eb2:	b089      	sub	sp, #36	; 0x24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <HAL_RTC_SetAlarm_IT+0x278>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a9a      	ldr	r2, [pc, #616]	; (800912c <HAL_RTC_SetAlarm_IT+0x27c>)
 8008ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec6:	0adb      	lsrs	r3, r3, #11
 8008ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ecc:	fb02 f303 	mul.w	r3, r2, r3
 8008ed0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	7f1b      	ldrb	r3, [r3, #28]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_RTC_SetAlarm_IT+0x36>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e11c      	b.n	8009120 <HAL_RTC_SetAlarm_IT+0x270>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d137      	bne.n	8008f68 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 f9d9 	bl	80092c8 <RTC_ByteToBcd2>
 8008f16:	4603      	mov	r3, r0
 8008f18:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	785b      	ldrb	r3, [r3, #1]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f9d2 	bl	80092c8 <RTC_ByteToBcd2>
 8008f24:	4603      	mov	r3, r0
 8008f26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f28:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	789b      	ldrb	r3, [r3, #2]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f9ca 	bl	80092c8 <RTC_ByteToBcd2>
 8008f34:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f36:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	78db      	ldrb	r3, [r3, #3]
 8008f3e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f40:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 f9bc 	bl	80092c8 <RTC_ByteToBcd2>
 8008f50:	4603      	mov	r3, r0
 8008f52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f54:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f62:	4313      	orrs	r3, r2
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e023      	b.n	8008fb0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d102      	bne.n	8008f7c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f88:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	78db      	ldrb	r3, [r3, #3]
 8008f94:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008fa0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008fa6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008fac:	4313      	orrs	r3, r2
 8008fae:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	22ca      	movs	r2, #202	; 0xca
 8008fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2253      	movs	r2, #83	; 0x53
 8008fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd4:	d141      	bne.n	800905a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fe4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008ff6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	1e5a      	subs	r2, r3, #1
 8008ffc:	617a      	str	r2, [r7, #20]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	22ff      	movs	r2, #255	; 0xff
 8009008:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2203      	movs	r2, #3
 800900e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e082      	b.n	8009120 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0e7      	beq.n	8008ff8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009046:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009056:	609a      	str	r2, [r3, #8]
 8009058:	e04b      	b.n	80090f2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009068:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	b2da      	uxtb	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f462 7220 	orn	r2, r2, #640	; 0x280
 800907a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800907c:	4b2a      	ldr	r3, [pc, #168]	; (8009128 <HAL_RTC_SetAlarm_IT+0x278>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a2a      	ldr	r2, [pc, #168]	; (800912c <HAL_RTC_SetAlarm_IT+0x27c>)
 8009082:	fba2 2303 	umull	r2, r3, r2, r3
 8009086:	0adb      	lsrs	r3, r3, #11
 8009088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800908c:	fb02 f303 	mul.w	r3, r2, r3
 8009090:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	1e5a      	subs	r2, r3, #1
 8009096:	617a      	str	r2, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10b      	bne.n	80090b4 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2203      	movs	r2, #3
 80090a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e035      	b.n	8009120 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0e7      	beq.n	8009092 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090e0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090f0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80090f2:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <HAL_RTC_SetAlarm_IT+0x280>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a0e      	ldr	r2, [pc, #56]	; (8009130 <HAL_RTC_SetAlarm_IT+0x280>)
 80090f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090fc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80090fe:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <HAL_RTC_SetAlarm_IT+0x280>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	4a0b      	ldr	r2, [pc, #44]	; (8009130 <HAL_RTC_SetAlarm_IT+0x280>)
 8009104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009108:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	22ff      	movs	r2, #255	; 0xff
 8009110:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3724      	adds	r7, #36	; 0x24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd90      	pop	{r4, r7, pc}
 8009128:	2000000c 	.word	0x2000000c
 800912c:	10624dd3 	.word	0x10624dd3
 8009130:	40013c00 	.word	0x40013c00

08009134 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d012      	beq.n	8009170 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7f9 fd79 	bl	8002c50 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	b2da      	uxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800916e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d012      	beq.n	80091a4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8d4 	bl	800933a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	b2da      	uxtb	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f462 7220 	orn	r2, r2, #640	; 0x280
 80091a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <HAL_RTC_AlarmIRQHandler+0x88>)
 80091a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80091aa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	775a      	strb	r2, [r3, #29]
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40013c00 	.word	0x40013c00

080091c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091dc:	f7fa faa4 	bl	8003728 <HAL_GetTick>
 80091e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091e2:	e009      	b.n	80091f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091e4:	f7fa faa0 	bl	8003728 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091f2:	d901      	bls.n	80091f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e007      	b.n	8009208 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0ee      	beq.n	80091e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d122      	bne.n	8009274 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800923c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800923e:	f7fa fa73 	bl	8003728 <HAL_GetTick>
 8009242:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009244:	e00c      	b.n	8009260 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009246:	f7fa fa6f 	bl	8003728 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009254:	d904      	bls.n	8009260 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2204      	movs	r2, #4
 800925a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <RTC_EnterInitMode+0x64>
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d1e8      	bne.n	8009246 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009298:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff ff89 	bl	80091c0 <HAL_RTC_WaitForSynchro>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2204      	movs	r2, #4
 80092b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80092d6:	e005      	b.n	80092e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	3301      	adds	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	3b0a      	subs	r3, #10
 80092e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d8f6      	bhi.n	80092d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	b2db      	uxtb	r3, r3
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009302:	b480      	push	{r7}
 8009304:	b085      	sub	sp, #20
 8009306:	af00      	add	r7, sp, #0
 8009308:	4603      	mov	r3, r0
 800930a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	091b      	lsrs	r3, r3, #4
 8009314:	b2db      	uxtb	r3, r3
 8009316:	461a      	mov	r2, r3
 8009318:	0092      	lsls	r2, r2, #2
 800931a:	4413      	add	r3, r2
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	b2da      	uxtb	r2, r3
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	4413      	add	r3, r2
 800932c:	b2db      	uxtb	r3, r3
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e022      	b.n	80093a6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7f9 fdca 	bl	8002f0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2203      	movs	r2, #3
 800937c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f815 	bl	80093b0 <HAL_SD_InitCard>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e00a      	b.n	80093a6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093b0:	b5b0      	push	{r4, r5, r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af04      	add	r7, sp, #16
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80093b8:	2300      	movs	r3, #0
 80093ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80093cc:	2376      	movs	r3, #118	; 0x76
 80093ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681d      	ldr	r5, [r3, #0]
 80093d4:	466c      	mov	r4, sp
 80093d6:	f107 0314 	add.w	r3, r7, #20
 80093da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093e2:	f107 0308 	add.w	r3, r7, #8
 80093e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093e8:	4628      	mov	r0, r5
 80093ea:	f003 f8cf 	bl	800c58c <SDIO_Init>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80093f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e04f      	b.n	80094a0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009400:	4b29      	ldr	r3, [pc, #164]	; (80094a8 <HAL_SD_InitCard+0xf8>)
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f003 f907 	bl	800c61e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009410:	4b25      	ldr	r3, [pc, #148]	; (80094a8 <HAL_SD_InitCard+0xf8>)
 8009412:	2201      	movs	r2, #1
 8009414:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009416:	2002      	movs	r0, #2
 8009418:	f7fa f992 	bl	8003740 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fe69 	bl	800a0f4 <SD_PowerON>
 8009422:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	431a      	orrs	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e02e      	b.n	80094a0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fd88 	bl	8009f58 <SD_InitCard>
 8009448:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	431a      	orrs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e01b      	b.n	80094a0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009470:	4618      	mov	r0, r3
 8009472:	f003 f966 	bl	800c742 <SDMMC_CmdBlockLength>
 8009476:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00f      	beq.n	800949e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <HAL_SD_InitCard+0xfc>)
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	431a      	orrs	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3728      	adds	r7, #40	; 0x28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bdb0      	pop	{r4, r5, r7, pc}
 80094a8:	422580a0 	.word	0x422580a0
 80094ac:	004005ff 	.word	0x004005ff

080094b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b092      	sub	sp, #72	; 0x48
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094be:	f7fa f933 	bl	8003728 <HAL_GetTick>
 80094c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d107      	bne.n	80094e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e1bd      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	f040 81b0 	bne.w	8009850 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	441a      	add	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009500:	429a      	cmp	r2, r3
 8009502:	d907      	bls.n	8009514 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e1a4      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2203      	movs	r2, #3
 8009518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2200      	movs	r2, #0
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009528:	2b01      	cmp	r3, #1
 800952a:	d002      	beq.n	8009532 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	025b      	lsls	r3, r3, #9
 8009530:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295
 8009536:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	025b      	lsls	r3, r3, #9
 800953c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800953e:	2390      	movs	r3, #144	; 0x90
 8009540:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009542:	2302      	movs	r3, #2
 8009544:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009546:	2300      	movs	r3, #0
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800954a:	2301      	movs	r3, #1
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f107 0214 	add.w	r2, r7, #20
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f003 f8c6 	bl	800c6ea <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d90a      	bls.n	800957a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2202      	movs	r2, #2
 8009568:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009570:	4618      	mov	r0, r3
 8009572:	f003 f92a 	bl	800c7ca <SDMMC_CmdReadMultiBlock>
 8009576:	6478      	str	r0, [r7, #68]	; 0x44
 8009578:	e009      	b.n	800958e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009586:	4618      	mov	r0, r3
 8009588:	f003 f8fd 	bl	800c786 <SDMMC_CmdReadSingleBlock>
 800958c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800958e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009590:	2b00      	cmp	r3, #0
 8009592:	d012      	beq.n	80095ba <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a7a      	ldr	r2, [pc, #488]	; (8009784 <HAL_SD_ReadBlocks+0x2d4>)
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a2:	431a      	orrs	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e151      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80095be:	e061      	b.n	8009684 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d03c      	beq.n	8009648 <HAL_SD_ReadBlocks+0x198>
 80095ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d039      	beq.n	8009648 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80095d4:	2300      	movs	r3, #0
 80095d6:	643b      	str	r3, [r7, #64]	; 0x40
 80095d8:	e033      	b.n	8009642 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f002 ffff 	bl	800c5e2 <SDIO_ReadFIFO>
 80095e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	3301      	adds	r3, #1
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	3b01      	subs	r3, #1
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	0a1b      	lsrs	r3, r3, #8
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009602:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	3301      	adds	r3, #1
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	3b01      	subs	r3, #1
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	b2da      	uxtb	r2, r3
 8009616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009618:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	3301      	adds	r3, #1
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	3b01      	subs	r3, #1
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	0e1b      	lsrs	r3, r3, #24
 800962a:	b2da      	uxtb	r2, r3
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009632:	3301      	adds	r3, #1
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009638:	3b01      	subs	r3, #1
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800963c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963e:	3301      	adds	r3, #1
 8009640:	643b      	str	r3, [r7, #64]	; 0x40
 8009642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009644:	2b07      	cmp	r3, #7
 8009646:	d9c8      	bls.n	80095da <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009648:	f7fa f86e 	bl	8003728 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009654:	429a      	cmp	r2, r3
 8009656:	d902      	bls.n	800965e <HAL_SD_ReadBlocks+0x1ae>
 8009658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965a:	2b00      	cmp	r3, #0
 800965c:	d112      	bne.n	8009684 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a48      	ldr	r2, [pc, #288]	; (8009784 <HAL_SD_ReadBlocks+0x2d4>)
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e0ec      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800968a:	f240 332a 	movw	r3, #810	; 0x32a
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d095      	beq.n	80095c0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d022      	beq.n	80096e8 <HAL_SD_ReadBlocks+0x238>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d91f      	bls.n	80096e8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d01b      	beq.n	80096e8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f003 f8ef 	bl	800c898 <SDMMC_CmdStopTransfer>
 80096ba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80096bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d012      	beq.n	80096e8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2f      	ldr	r2, [pc, #188]	; (8009784 <HAL_SD_ReadBlocks+0x2d4>)
 80096c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d0:	431a      	orrs	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e0ba      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d012      	beq.n	800971c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a22      	ldr	r2, [pc, #136]	; (8009784 <HAL_SD_ReadBlocks+0x2d4>)
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	f043 0208 	orr.w	r2, r3, #8
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0a0      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d012      	beq.n	8009750 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a15      	ldr	r2, [pc, #84]	; (8009784 <HAL_SD_ReadBlocks+0x2d4>)
 8009730:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	f043 0202 	orr.w	r2, r3, #2
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e086      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d063      	beq.n	8009826 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a08      	ldr	r2, [pc, #32]	; (8009784 <HAL_SD_ReadBlocks+0x2d4>)
 8009764:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	f043 0220 	orr.w	r2, r3, #32
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e06c      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
 8009784:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f002 ff28 	bl	800c5e2 <SDIO_ReadFIFO>
 8009792:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	b2da      	uxtb	r2, r3
 8009798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800979c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979e:	3301      	adds	r3, #1
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80097a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a4:	3b01      	subs	r3, #1
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	0a1b      	lsrs	r3, r3, #8
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b4:	3301      	adds	r3, #1
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80097b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ba:	3b01      	subs	r3, #1
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	0c1b      	lsrs	r3, r3, #16
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80097c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ca:	3301      	adds	r3, #1
 80097cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80097ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d0:	3b01      	subs	r3, #1
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	0e1b      	lsrs	r3, r3, #24
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80097de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e0:	3301      	adds	r3, #1
 80097e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80097e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e6:	3b01      	subs	r3, #1
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80097ea:	f7f9 ff9d 	bl	8003728 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d902      	bls.n	8009800 <HAL_SD_ReadBlocks+0x350>
 80097fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d112      	bne.n	8009826 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a18      	ldr	r2, [pc, #96]	; (8009868 <HAL_SD_ReadBlocks+0x3b8>)
 8009806:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e01b      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <HAL_SD_ReadBlocks+0x38a>
 8009834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1a6      	bne.n	8009788 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009842:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	e006      	b.n	800985e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
  }
}
 800985e:	4618      	mov	r0, r3
 8009860:	3748      	adds	r7, #72	; 0x48
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	004005ff 	.word	0x004005ff

0800986c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b092      	sub	sp, #72	; 0x48
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800987a:	f7f9 ff55 	bl	8003728 <HAL_GetTick>
 800987e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d107      	bne.n	800989e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e166      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	f040 8159 	bne.w	8009b5e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	441a      	add	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098bc:	429a      	cmp	r2, r3
 80098be:	d907      	bls.n	80098d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e14d      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2203      	movs	r2, #3
 80098d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2200      	movs	r2, #0
 80098de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d002      	beq.n	80098ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	025b      	lsls	r3, r3, #9
 80098ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098ee:	f04f 33ff 	mov.w	r3, #4294967295
 80098f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	025b      	lsls	r3, r3, #9
 80098f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80098fa:	2390      	movs	r3, #144	; 0x90
 80098fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80098fe:	2300      	movs	r3, #0
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009902:	2300      	movs	r3, #0
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009906:	2301      	movs	r3, #1
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f107 0218 	add.w	r2, r7, #24
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f002 fee8 	bl	800c6ea <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d90a      	bls.n	8009936 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800992c:	4618      	mov	r0, r3
 800992e:	f002 ff90 	bl	800c852 <SDMMC_CmdWriteMultiBlock>
 8009932:	6478      	str	r0, [r7, #68]	; 0x44
 8009934:	e009      	b.n	800994a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2210      	movs	r2, #16
 800993a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009942:	4618      	mov	r0, r3
 8009944:	f002 ff63 	bl	800c80e <SDMMC_CmdWriteSingleBlock>
 8009948:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800994a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800994c:	2b00      	cmp	r3, #0
 800994e:	d012      	beq.n	8009976 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a87      	ldr	r2, [pc, #540]	; (8009b74 <HAL_SD_WriteBlocks+0x308>)
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800995c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800995e:	431a      	orrs	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e0fa      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800997a:	e065      	b.n	8009a48 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d040      	beq.n	8009a0c <HAL_SD_WriteBlocks+0x1a0>
 800998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d03d      	beq.n	8009a0c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009990:	2300      	movs	r3, #0
 8009992:	643b      	str	r3, [r7, #64]	; 0x40
 8009994:	e037      	b.n	8009a06 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800999c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999e:	3301      	adds	r3, #1
 80099a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	3b01      	subs	r3, #1
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	021a      	lsls	r2, r3, #8
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b6:	3301      	adds	r3, #1
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099bc:	3b01      	subs	r3, #1
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80099c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	041a      	lsls	r2, r3, #16
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ce:	3301      	adds	r3, #1
 80099d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d4:	3b01      	subs	r3, #1
 80099d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80099d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	061a      	lsls	r2, r3, #24
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e6:	3301      	adds	r3, #1
 80099e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ec:	3b01      	subs	r3, #1
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f107 0214 	add.w	r2, r7, #20
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f002 fdfe 	bl	800c5fc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a02:	3301      	adds	r3, #1
 8009a04:	643b      	str	r3, [r7, #64]	; 0x40
 8009a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a08:	2b07      	cmp	r3, #7
 8009a0a:	d9c4      	bls.n	8009996 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009a0c:	f7f9 fe8c 	bl	8003728 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d902      	bls.n	8009a22 <HAL_SD_WriteBlocks+0x1b6>
 8009a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d112      	bne.n	8009a48 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a53      	ldr	r2, [pc, #332]	; (8009b74 <HAL_SD_WriteBlocks+0x308>)
 8009a28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a30:	431a      	orrs	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e091      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a4e:	f240 331a 	movw	r3, #794	; 0x31a
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d091      	beq.n	800997c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d022      	beq.n	8009aac <HAL_SD_WriteBlocks+0x240>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d91f      	bls.n	8009aac <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d01b      	beq.n	8009aac <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f002 ff0d 	bl	800c898 <SDMMC_CmdStopTransfer>
 8009a7e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d012      	beq.n	8009aac <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a3a      	ldr	r2, [pc, #232]	; (8009b74 <HAL_SD_WriteBlocks+0x308>)
 8009a8c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a94:	431a      	orrs	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e05f      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab2:	f003 0308 	and.w	r3, r3, #8
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d012      	beq.n	8009ae0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a2d      	ldr	r2, [pc, #180]	; (8009b74 <HAL_SD_WriteBlocks+0x308>)
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	f043 0208 	orr.w	r2, r3, #8
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e045      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d012      	beq.n	8009b14 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a20      	ldr	r2, [pc, #128]	; (8009b74 <HAL_SD_WriteBlocks+0x308>)
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	f043 0202 	orr.w	r2, r3, #2
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e02b      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1a:	f003 0310 	and.w	r3, r3, #16
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d012      	beq.n	8009b48 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <HAL_SD_WriteBlocks+0x308>)
 8009b28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	f043 0210 	orr.w	r2, r3, #16
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e011      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b50:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e006      	b.n	8009b6c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
  }
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3748      	adds	r7, #72	; 0x48
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	004005ff 	.word	0x004005ff

08009b78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b86:	0f9b      	lsrs	r3, r3, #30
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b92:	0e9b      	lsrs	r3, r3, #26
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f003 030f 	and.w	r3, r3, #15
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba4:	0e1b      	lsrs	r3, r3, #24
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd8:	0d1b      	lsrs	r3, r3, #20
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 030f 	and.w	r3, r3, #15
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bf6:	0bdb      	lsrs	r3, r3, #15
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c08:	0b9b      	lsrs	r3, r3, #14
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c1a:	0b5b      	lsrs	r3, r3, #13
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c2c:	0b1b      	lsrs	r3, r3, #12
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d163      	bne.n	8009d10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c4c:	009a      	lsls	r2, r3, #2
 8009c4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009c52:	4013      	ands	r3, r2
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009c58:	0f92      	lsrs	r2, r2, #30
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c64:	0edb      	lsrs	r3, r3, #27
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c76:	0e1b      	lsrs	r3, r3, #24
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	0d5b      	lsrs	r3, r3, #21
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c9a:	0c9b      	lsrs	r3, r3, #18
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cac:	0bdb      	lsrs	r3, r3, #15
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	7e1b      	ldrb	r3, [r3, #24]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f003 0307 	and.w	r3, r3, #7
 8009cce:	3302      	adds	r3, #2
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009cda:	fb03 f202 	mul.w	r2, r3, r2
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	7a1b      	ldrb	r3, [r3, #8]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 030f 	and.w	r3, r3, #15
 8009cec:	2201      	movs	r2, #1
 8009cee:	409a      	lsls	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009cfc:	0a52      	lsrs	r2, r2, #9
 8009cfe:	fb03 f202 	mul.w	r2, r3, r2
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d0c:	661a      	str	r2, [r3, #96]	; 0x60
 8009d0e:	e031      	b.n	8009d74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d11d      	bne.n	8009d54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d1c:	041b      	lsls	r3, r3, #16
 8009d1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	3301      	adds	r3, #1
 8009d34:	029a      	lsls	r2, r3, #10
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d48:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	661a      	str	r2, [r3, #96]	; 0x60
 8009d52:	e00f      	b.n	8009d74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a58      	ldr	r2, [pc, #352]	; (8009ebc <HAL_SD_GetCardCSD+0x344>)
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e09d      	b.n	8009eb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d78:	0b9b      	lsrs	r3, r3, #14
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8a:	09db      	lsrs	r3, r3, #7
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dac:	0fdb      	lsrs	r3, r3, #31
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db8:	0f5b      	lsrs	r3, r3, #29
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dca:	0e9b      	lsrs	r3, r3, #26
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ddc:	0d9b      	lsrs	r3, r3, #22
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dee:	0d5b      	lsrs	r3, r3, #21
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1e:	0bdb      	lsrs	r3, r3, #15
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e32:	0b9b      	lsrs	r3, r3, #14
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e46:	0b5b      	lsrs	r3, r3, #13
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5a:	0b1b      	lsrs	r3, r3, #12
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6e:	0a9b      	lsrs	r3, r3, #10
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e82:	0a1b      	lsrs	r3, r3, #8
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	004005ff 	.word	0x004005ff

08009ec0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009f24:	f107 030c 	add.w	r3, r7, #12
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f970 	bl	800a210 <SD_SendStatus>
 8009f30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	0a5b      	lsrs	r3, r3, #9
 8009f48:	f003 030f 	and.w	r3, r3, #15
 8009f4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009f4e:	693b      	ldr	r3, [r7, #16]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f58:	b5b0      	push	{r4, r5, r7, lr}
 8009f5a:	b094      	sub	sp, #80	; 0x50
 8009f5c:	af04      	add	r7, sp, #16
 8009f5e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009f60:	2301      	movs	r3, #1
 8009f62:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f002 fb66 	bl	800c63a <SDIO_GetPowerState>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d102      	bne.n	8009f7a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009f78:	e0b8      	b.n	800a0ec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d02f      	beq.n	8009fe2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f002 fd4d 	bl	800ca26 <SDMMC_CmdSendCID>
 8009f8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <SD_InitCard+0x40>
    {
      return errorstate;
 8009f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f96:	e0a9      	b.n	800a0ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 fb90 	bl	800c6c4 <SDIO_GetResponse>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2104      	movs	r1, #4
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 fb87 	bl	800c6c4 <SDIO_GetResponse>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2108      	movs	r1, #8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f002 fb7e 	bl	800c6c4 <SDIO_GetResponse>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	210c      	movs	r1, #12
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f002 fb75 	bl	800c6c4 <SDIO_GetResponse>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d00d      	beq.n	800a006 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f107 020e 	add.w	r2, r7, #14
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f002 fd53 	bl	800caa0 <SDMMC_CmdSetRelAdd>
 8009ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <SD_InitCard+0xae>
    {
      return errorstate;
 800a002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a004:	e072      	b.n	800a0ec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d036      	beq.n	800a07c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a00e:	89fb      	ldrh	r3, [r7, #14]
 800a010:	461a      	mov	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f002 fd1d 	bl	800ca62 <SDMMC_CmdSendCSD>
 800a028:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a032:	e05b      	b.n	800a0ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f002 fb42 	bl	800c6c4 <SDIO_GetResponse>
 800a040:	4602      	mov	r2, r0
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2104      	movs	r1, #4
 800a04c:	4618      	mov	r0, r3
 800a04e:	f002 fb39 	bl	800c6c4 <SDIO_GetResponse>
 800a052:	4602      	mov	r2, r0
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2108      	movs	r1, #8
 800a05e:	4618      	mov	r0, r3
 800a060:	f002 fb30 	bl	800c6c4 <SDIO_GetResponse>
 800a064:	4602      	mov	r2, r0
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	210c      	movs	r1, #12
 800a070:	4618      	mov	r0, r3
 800a072:	f002 fb27 	bl	800c6c4 <SDIO_GetResponse>
 800a076:	4602      	mov	r2, r0
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2104      	movs	r1, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f002 fb1e 	bl	800c6c4 <SDIO_GetResponse>
 800a088:	4603      	mov	r3, r0
 800a08a:	0d1a      	lsrs	r2, r3, #20
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a090:	f107 0310 	add.w	r3, r7, #16
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff fd6e 	bl	8009b78 <HAL_SD_GetCardCSD>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0a6:	e021      	b.n	800a0ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6819      	ldr	r1, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b0:	041b      	lsls	r3, r3, #16
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	461c      	mov	r4, r3
 800a0b6:	4615      	mov	r5, r2
 800a0b8:	4622      	mov	r2, r4
 800a0ba:	462b      	mov	r3, r5
 800a0bc:	4608      	mov	r0, r1
 800a0be:	f002 fc0d 	bl	800c8dc <SDMMC_CmdSelDesel>
 800a0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <SD_InitCard+0x176>
  {
    return errorstate;
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0cc:	e00e      	b.n	800a0ec <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681d      	ldr	r5, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	466c      	mov	r4, sp
 800a0d6:	f103 0210 	add.w	r2, r3, #16
 800a0da:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f002 fa51 	bl	800c58c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3740      	adds	r7, #64	; 0x40
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bdb0      	pop	{r4, r5, r7, pc}

0800a0f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	2300      	movs	r3, #0
 800a106:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 fc08 	bl	800c922 <SDMMC_CmdGoIdleState>
 800a112:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	e072      	b.n	800a204 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f002 fc1b 	bl	800c95e <SDMMC_CmdOperCond>
 800a128:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00d      	beq.n	800a14c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f002 fbf1 	bl	800c922 <SDMMC_CmdGoIdleState>
 800a140:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	e05b      	b.n	800a204 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a156:	2b01      	cmp	r3, #1
 800a158:	d137      	bne.n	800a1ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2100      	movs	r1, #0
 800a160:	4618      	mov	r0, r3
 800a162:	f002 fc1b 	bl	800c99c <SDMMC_CmdAppCommand>
 800a166:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d02d      	beq.n	800a1ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a16e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a172:	e047      	b.n	800a204 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2100      	movs	r1, #0
 800a17a:	4618      	mov	r0, r3
 800a17c:	f002 fc0e 	bl	800c99c <SDMMC_CmdAppCommand>
 800a180:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <SD_PowerON+0x98>
    {
      return errorstate;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	e03b      	b.n	800a204 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	491e      	ldr	r1, [pc, #120]	; (800a20c <SD_PowerON+0x118>)
 800a192:	4618      	mov	r0, r3
 800a194:	f002 fc24 	bl	800c9e0 <SDMMC_CmdAppOperCommand>
 800a198:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1a4:	e02e      	b.n	800a204 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f002 fa89 	bl	800c6c4 <SDIO_GetResponse>
 800a1b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	0fdb      	lsrs	r3, r3, #31
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <SD_PowerON+0xcc>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <SD_PowerON+0xce>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	613b      	str	r3, [r7, #16]

    count++;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d802      	bhi.n	800a1da <SD_PowerON+0xe6>
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0cc      	beq.n	800a174 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d902      	bls.n	800a1ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a1e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a1e8:	e00c      	b.n	800a204 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	645a      	str	r2, [r3, #68]	; 0x44
 800a1fa:	e002      	b.n	800a202 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	c1100000 	.word	0xc1100000

0800a210 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a220:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a224:	e018      	b.n	800a258 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a22e:	041b      	lsls	r3, r3, #16
 800a230:	4619      	mov	r1, r3
 800a232:	4610      	mov	r0, r2
 800a234:	f002 fc55 	bl	800cae2 <SDMMC_CmdSendStatus>
 800a238:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	e009      	b.n	800a258 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2100      	movs	r1, #0
 800a24a:	4618      	mov	r0, r3
 800a24c:	f002 fa3a 	bl	800c6c4 <SDIO_GetResponse>
 800a250:	4602      	mov	r2, r0
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e041      	b.n	800a2f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7f8 fea8 	bl	8002fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f000 fd30 	bl	800ad04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2202      	movs	r2, #2
 800a30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6a1a      	ldr	r2, [r3, #32]
 800a314:	f241 1311 	movw	r3, #4369	; 0x1111
 800a318:	4013      	ands	r3, r2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10f      	bne.n	800a33e <HAL_TIM_Base_DeInit+0x40>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6a1a      	ldr	r2, [r3, #32]
 800a324:	f240 4344 	movw	r3, #1092	; 0x444
 800a328:	4013      	ands	r3, r2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d107      	bne.n	800a33e <HAL_TIM_Base_DeInit+0x40>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0201 	bic.w	r2, r2, #1
 800a33c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7f8 ff0c 	bl	800315c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d001      	beq.n	800a3c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e03c      	b.n	800a43a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a1e      	ldr	r2, [pc, #120]	; (800a448 <HAL_TIM_Base_Start+0xa0>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d018      	beq.n	800a404 <HAL_TIM_Base_Start+0x5c>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3da:	d013      	beq.n	800a404 <HAL_TIM_Base_Start+0x5c>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1a      	ldr	r2, [pc, #104]	; (800a44c <HAL_TIM_Base_Start+0xa4>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00e      	beq.n	800a404 <HAL_TIM_Base_Start+0x5c>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a19      	ldr	r2, [pc, #100]	; (800a450 <HAL_TIM_Base_Start+0xa8>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d009      	beq.n	800a404 <HAL_TIM_Base_Start+0x5c>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a17      	ldr	r2, [pc, #92]	; (800a454 <HAL_TIM_Base_Start+0xac>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d004      	beq.n	800a404 <HAL_TIM_Base_Start+0x5c>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a16      	ldr	r2, [pc, #88]	; (800a458 <HAL_TIM_Base_Start+0xb0>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d111      	bne.n	800a428 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f003 0307 	and.w	r3, r3, #7
 800a40e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b06      	cmp	r3, #6
 800a414:	d010      	beq.n	800a438 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0201 	orr.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a426:	e007      	b.n	800a438 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40010000 	.word	0x40010000
 800a44c:	40000400 	.word	0x40000400
 800a450:	40000800 	.word	0x40000800
 800a454:	40000c00 	.word	0x40000c00
 800a458:	40014000 	.word	0x40014000

0800a45c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d001      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e044      	b.n	800a4fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2202      	movs	r2, #2
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f042 0201 	orr.w	r2, r2, #1
 800a48a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1e      	ldr	r2, [pc, #120]	; (800a50c <HAL_TIM_Base_Start_IT+0xb0>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d018      	beq.n	800a4c8 <HAL_TIM_Base_Start_IT+0x6c>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49e:	d013      	beq.n	800a4c8 <HAL_TIM_Base_Start_IT+0x6c>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a1a      	ldr	r2, [pc, #104]	; (800a510 <HAL_TIM_Base_Start_IT+0xb4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00e      	beq.n	800a4c8 <HAL_TIM_Base_Start_IT+0x6c>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a19      	ldr	r2, [pc, #100]	; (800a514 <HAL_TIM_Base_Start_IT+0xb8>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d009      	beq.n	800a4c8 <HAL_TIM_Base_Start_IT+0x6c>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a17      	ldr	r2, [pc, #92]	; (800a518 <HAL_TIM_Base_Start_IT+0xbc>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d004      	beq.n	800a4c8 <HAL_TIM_Base_Start_IT+0x6c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a16      	ldr	r2, [pc, #88]	; (800a51c <HAL_TIM_Base_Start_IT+0xc0>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d111      	bne.n	800a4ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b06      	cmp	r3, #6
 800a4d8:	d010      	beq.n	800a4fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f042 0201 	orr.w	r2, r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ea:	e007      	b.n	800a4fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0201 	orr.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	40010000 	.word	0x40010000
 800a510:	40000400 	.word	0x40000400
 800a514:	40000800 	.word	0x40000800
 800a518:	40000c00 	.word	0x40000c00
 800a51c:	40014000 	.word	0x40014000

0800a520 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0201 	bic.w	r2, r2, #1
 800a536:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6a1a      	ldr	r2, [r3, #32]
 800a53e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a542:	4013      	ands	r3, r2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10f      	bne.n	800a568 <HAL_TIM_Base_Stop_IT+0x48>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6a1a      	ldr	r2, [r3, #32]
 800a54e:	f240 4344 	movw	r3, #1092	; 0x444
 800a552:	4013      	ands	r3, r2
 800a554:	2b00      	cmp	r3, #0
 800a556:	d107      	bne.n	800a568 <HAL_TIM_Base_Stop_IT+0x48>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f022 0201 	bic.w	r2, r2, #1
 800a566:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e041      	b.n	800a614 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f839 	bl	800a61c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f000 fba1 	bl	800ad04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d109      	bne.n	800a654 <HAL_TIM_PWM_Start+0x24>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b01      	cmp	r3, #1
 800a64a:	bf14      	ite	ne
 800a64c:	2301      	movne	r3, #1
 800a64e:	2300      	moveq	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	e022      	b.n	800a69a <HAL_TIM_PWM_Start+0x6a>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b04      	cmp	r3, #4
 800a658:	d109      	bne.n	800a66e <HAL_TIM_PWM_Start+0x3e>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	bf14      	ite	ne
 800a666:	2301      	movne	r3, #1
 800a668:	2300      	moveq	r3, #0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	e015      	b.n	800a69a <HAL_TIM_PWM_Start+0x6a>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b08      	cmp	r3, #8
 800a672:	d109      	bne.n	800a688 <HAL_TIM_PWM_Start+0x58>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	bf14      	ite	ne
 800a680:	2301      	movne	r3, #1
 800a682:	2300      	moveq	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	e008      	b.n	800a69a <HAL_TIM_PWM_Start+0x6a>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b01      	cmp	r3, #1
 800a692:	bf14      	ite	ne
 800a694:	2301      	movne	r3, #1
 800a696:	2300      	moveq	r3, #0
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e068      	b.n	800a774 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d104      	bne.n	800a6b2 <HAL_TIM_PWM_Start+0x82>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6b0:	e013      	b.n	800a6da <HAL_TIM_PWM_Start+0xaa>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d104      	bne.n	800a6c2 <HAL_TIM_PWM_Start+0x92>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6c0:	e00b      	b.n	800a6da <HAL_TIM_PWM_Start+0xaa>
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b08      	cmp	r3, #8
 800a6c6:	d104      	bne.n	800a6d2 <HAL_TIM_PWM_Start+0xa2>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6d0:	e003      	b.n	800a6da <HAL_TIM_PWM_Start+0xaa>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fdb4 	bl	800b250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a23      	ldr	r2, [pc, #140]	; (800a77c <HAL_TIM_PWM_Start+0x14c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d107      	bne.n	800a702 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1d      	ldr	r2, [pc, #116]	; (800a77c <HAL_TIM_PWM_Start+0x14c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d018      	beq.n	800a73e <HAL_TIM_PWM_Start+0x10e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a714:	d013      	beq.n	800a73e <HAL_TIM_PWM_Start+0x10e>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a19      	ldr	r2, [pc, #100]	; (800a780 <HAL_TIM_PWM_Start+0x150>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00e      	beq.n	800a73e <HAL_TIM_PWM_Start+0x10e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a17      	ldr	r2, [pc, #92]	; (800a784 <HAL_TIM_PWM_Start+0x154>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d009      	beq.n	800a73e <HAL_TIM_PWM_Start+0x10e>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a16      	ldr	r2, [pc, #88]	; (800a788 <HAL_TIM_PWM_Start+0x158>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d004      	beq.n	800a73e <HAL_TIM_PWM_Start+0x10e>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a14      	ldr	r2, [pc, #80]	; (800a78c <HAL_TIM_PWM_Start+0x15c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d111      	bne.n	800a762 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2b06      	cmp	r3, #6
 800a74e:	d010      	beq.n	800a772 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 0201 	orr.w	r2, r2, #1
 800a75e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a760:	e007      	b.n	800a772 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0201 	orr.w	r2, r2, #1
 800a770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40010000 	.word	0x40010000
 800a780:	40000400 	.word	0x40000400
 800a784:	40000800 	.word	0x40000800
 800a788:	40000c00 	.word	0x40000c00
 800a78c:	40014000 	.word	0x40014000

0800a790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d122      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d11b      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f06f 0202 	mvn.w	r2, #2
 800a7bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fa77 	bl	800acc6 <HAL_TIM_IC_CaptureCallback>
 800a7d8:	e005      	b.n	800a7e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fa69 	bl	800acb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fa7a 	bl	800acda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0304 	and.w	r3, r3, #4
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d122      	bne.n	800a840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0304 	and.w	r3, r3, #4
 800a804:	2b04      	cmp	r3, #4
 800a806:	d11b      	bne.n	800a840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0204 	mvn.w	r2, #4
 800a810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2202      	movs	r2, #2
 800a816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fa4d 	bl	800acc6 <HAL_TIM_IC_CaptureCallback>
 800a82c:	e005      	b.n	800a83a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa3f 	bl	800acb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fa50 	bl	800acda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0308 	and.w	r3, r3, #8
 800a84a:	2b08      	cmp	r3, #8
 800a84c:	d122      	bne.n	800a894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d11b      	bne.n	800a894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f06f 0208 	mvn.w	r2, #8
 800a864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2204      	movs	r2, #4
 800a86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa23 	bl	800acc6 <HAL_TIM_IC_CaptureCallback>
 800a880:	e005      	b.n	800a88e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa15 	bl	800acb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa26 	bl	800acda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 0310 	and.w	r3, r3, #16
 800a89e:	2b10      	cmp	r3, #16
 800a8a0:	d122      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	2b10      	cmp	r3, #16
 800a8ae:	d11b      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0210 	mvn.w	r2, #16
 800a8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2208      	movs	r2, #8
 800a8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f9f9 	bl	800acc6 <HAL_TIM_IC_CaptureCallback>
 800a8d4:	e005      	b.n	800a8e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f9eb 	bl	800acb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f9fc 	bl	800acda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d10e      	bne.n	800a914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b01      	cmp	r3, #1
 800a902:	d107      	bne.n	800a914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0201 	mvn.w	r2, #1
 800a90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7f8 f958 	bl	8002bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91e:	2b80      	cmp	r3, #128	; 0x80
 800a920:	d10e      	bne.n	800a940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92c:	2b80      	cmp	r3, #128	; 0x80
 800a92e:	d107      	bne.n	800a940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fd26 	bl	800b38c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94a:	2b40      	cmp	r3, #64	; 0x40
 800a94c:	d10e      	bne.n	800a96c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a958:	2b40      	cmp	r3, #64	; 0x40
 800a95a:	d107      	bne.n	800a96c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f9c1 	bl	800acee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b20      	cmp	r3, #32
 800a978:	d10e      	bne.n	800a998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b20      	cmp	r3, #32
 800a986:	d107      	bne.n	800a998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0220 	mvn.w	r2, #32
 800a990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fcf0 	bl	800b378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e0ae      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b0c      	cmp	r3, #12
 800a9ca:	f200 809f 	bhi.w	800ab0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a9ce:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d4:	0800aa09 	.word	0x0800aa09
 800a9d8:	0800ab0d 	.word	0x0800ab0d
 800a9dc:	0800ab0d 	.word	0x0800ab0d
 800a9e0:	0800ab0d 	.word	0x0800ab0d
 800a9e4:	0800aa49 	.word	0x0800aa49
 800a9e8:	0800ab0d 	.word	0x0800ab0d
 800a9ec:	0800ab0d 	.word	0x0800ab0d
 800a9f0:	0800ab0d 	.word	0x0800ab0d
 800a9f4:	0800aa8b 	.word	0x0800aa8b
 800a9f8:	0800ab0d 	.word	0x0800ab0d
 800a9fc:	0800ab0d 	.word	0x0800ab0d
 800aa00:	0800ab0d 	.word	0x0800ab0d
 800aa04:	0800aacb 	.word	0x0800aacb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f9f8 	bl	800ae04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699a      	ldr	r2, [r3, #24]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0208 	orr.w	r2, r2, #8
 800aa22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	699a      	ldr	r2, [r3, #24]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0204 	bic.w	r2, r2, #4
 800aa32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6999      	ldr	r1, [r3, #24]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	691a      	ldr	r2, [r3, #16]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	619a      	str	r2, [r3, #24]
      break;
 800aa46:	e064      	b.n	800ab12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fa3e 	bl	800aed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699a      	ldr	r2, [r3, #24]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6999      	ldr	r1, [r3, #24]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	021a      	lsls	r2, r3, #8
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	619a      	str	r2, [r3, #24]
      break;
 800aa88:	e043      	b.n	800ab12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fa89 	bl	800afa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	69da      	ldr	r2, [r3, #28]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f042 0208 	orr.w	r2, r2, #8
 800aaa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	69da      	ldr	r2, [r3, #28]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0204 	bic.w	r2, r2, #4
 800aab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69d9      	ldr	r1, [r3, #28]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	691a      	ldr	r2, [r3, #16]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	61da      	str	r2, [r3, #28]
      break;
 800aac8:	e023      	b.n	800ab12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fad3 	bl	800b07c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69da      	ldr	r2, [r3, #28]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69da      	ldr	r2, [r3, #28]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69d9      	ldr	r1, [r3, #28]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	021a      	lsls	r2, r3, #8
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	61da      	str	r2, [r3, #28]
      break;
 800ab0a:	e002      	b.n	800ab12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_TIM_ConfigClockSource+0x1c>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e0b4      	b.n	800acaa <HAL_TIM_ConfigClockSource+0x186>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab78:	d03e      	beq.n	800abf8 <HAL_TIM_ConfigClockSource+0xd4>
 800ab7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab7e:	f200 8087 	bhi.w	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800ab82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab86:	f000 8086 	beq.w	800ac96 <HAL_TIM_ConfigClockSource+0x172>
 800ab8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8e:	d87f      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800ab90:	2b70      	cmp	r3, #112	; 0x70
 800ab92:	d01a      	beq.n	800abca <HAL_TIM_ConfigClockSource+0xa6>
 800ab94:	2b70      	cmp	r3, #112	; 0x70
 800ab96:	d87b      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800ab98:	2b60      	cmp	r3, #96	; 0x60
 800ab9a:	d050      	beq.n	800ac3e <HAL_TIM_ConfigClockSource+0x11a>
 800ab9c:	2b60      	cmp	r3, #96	; 0x60
 800ab9e:	d877      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800aba0:	2b50      	cmp	r3, #80	; 0x50
 800aba2:	d03c      	beq.n	800ac1e <HAL_TIM_ConfigClockSource+0xfa>
 800aba4:	2b50      	cmp	r3, #80	; 0x50
 800aba6:	d873      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800aba8:	2b40      	cmp	r3, #64	; 0x40
 800abaa:	d058      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0x13a>
 800abac:	2b40      	cmp	r3, #64	; 0x40
 800abae:	d86f      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800abb0:	2b30      	cmp	r3, #48	; 0x30
 800abb2:	d064      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x15a>
 800abb4:	2b30      	cmp	r3, #48	; 0x30
 800abb6:	d86b      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800abb8:	2b20      	cmp	r3, #32
 800abba:	d060      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x15a>
 800abbc:	2b20      	cmp	r3, #32
 800abbe:	d867      	bhi.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d05c      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x15a>
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d05a      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0x15a>
 800abc8:	e062      	b.n	800ac90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	6899      	ldr	r1, [r3, #8]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f000 fb19 	bl	800b210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	609a      	str	r2, [r3, #8]
      break;
 800abf6:	e04f      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6818      	ldr	r0, [r3, #0]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	6899      	ldr	r1, [r3, #8]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f000 fb02 	bl	800b210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac1a:	609a      	str	r2, [r3, #8]
      break;
 800ac1c:	e03c      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	6859      	ldr	r1, [r3, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f000 fa76 	bl	800b11c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2150      	movs	r1, #80	; 0x50
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 facf 	bl	800b1da <TIM_ITRx_SetConfig>
      break;
 800ac3c:	e02c      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	6859      	ldr	r1, [r3, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f000 fa95 	bl	800b17a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2160      	movs	r1, #96	; 0x60
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fabf 	bl	800b1da <TIM_ITRx_SetConfig>
      break;
 800ac5c:	e01c      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	6859      	ldr	r1, [r3, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f000 fa56 	bl	800b11c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2140      	movs	r1, #64	; 0x40
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 faaf 	bl	800b1da <TIM_ITRx_SetConfig>
      break;
 800ac7c:	e00c      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f000 faa6 	bl	800b1da <TIM_ITRx_SetConfig>
      break;
 800ac8e:	e003      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	73fb      	strb	r3, [r7, #15]
      break;
 800ac94:	e000      	b.n	800ac98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b083      	sub	sp, #12
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acce:	bf00      	nop
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a34      	ldr	r2, [pc, #208]	; (800ade8 <TIM_Base_SetConfig+0xe4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00f      	beq.n	800ad3c <TIM_Base_SetConfig+0x38>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad22:	d00b      	beq.n	800ad3c <TIM_Base_SetConfig+0x38>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a31      	ldr	r2, [pc, #196]	; (800adec <TIM_Base_SetConfig+0xe8>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <TIM_Base_SetConfig+0x38>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a30      	ldr	r2, [pc, #192]	; (800adf0 <TIM_Base_SetConfig+0xec>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d003      	beq.n	800ad3c <TIM_Base_SetConfig+0x38>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a2f      	ldr	r2, [pc, #188]	; (800adf4 <TIM_Base_SetConfig+0xf0>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d108      	bne.n	800ad4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a25      	ldr	r2, [pc, #148]	; (800ade8 <TIM_Base_SetConfig+0xe4>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d01b      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5c:	d017      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a22      	ldr	r2, [pc, #136]	; (800adec <TIM_Base_SetConfig+0xe8>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d013      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a21      	ldr	r2, [pc, #132]	; (800adf0 <TIM_Base_SetConfig+0xec>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00f      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a20      	ldr	r2, [pc, #128]	; (800adf4 <TIM_Base_SetConfig+0xf0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00b      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a1f      	ldr	r2, [pc, #124]	; (800adf8 <TIM_Base_SetConfig+0xf4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d007      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a1e      	ldr	r2, [pc, #120]	; (800adfc <TIM_Base_SetConfig+0xf8>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <TIM_Base_SetConfig+0x8a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a1d      	ldr	r2, [pc, #116]	; (800ae00 <TIM_Base_SetConfig+0xfc>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d108      	bne.n	800ada0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	4313      	orrs	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a08      	ldr	r2, [pc, #32]	; (800ade8 <TIM_Base_SetConfig+0xe4>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d103      	bne.n	800add4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	615a      	str	r2, [r3, #20]
}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	40010000 	.word	0x40010000
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40014000 	.word	0x40014000
 800adfc:	40014400 	.word	0x40014400
 800ae00:	40014800 	.word	0x40014800

0800ae04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f023 0201 	bic.w	r2, r3, #1
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f023 0302 	bic.w	r3, r3, #2
 800ae4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	; (800aecc <TIM_OC1_SetConfig+0xc8>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10c      	bne.n	800ae7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f023 0308 	bic.w	r3, r3, #8
 800ae66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f023 0304 	bic.w	r3, r3, #4
 800ae78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a13      	ldr	r2, [pc, #76]	; (800aecc <TIM_OC1_SetConfig+0xc8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d111      	bne.n	800aea6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	621a      	str	r2, [r3, #32]
}
 800aec0:	bf00      	nop
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	40010000 	.word	0x40010000

0800aed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f023 0210 	bic.w	r2, r3, #16
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	4313      	orrs	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f023 0320 	bic.w	r3, r3, #32
 800af1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a1e      	ldr	r2, [pc, #120]	; (800afa4 <TIM_OC2_SetConfig+0xd4>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d10d      	bne.n	800af4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	011b      	lsls	r3, r3, #4
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4313      	orrs	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a15      	ldr	r2, [pc, #84]	; (800afa4 <TIM_OC2_SetConfig+0xd4>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d113      	bne.n	800af7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	4313      	orrs	r3, r2
 800af7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	621a      	str	r2, [r3, #32]
}
 800af96:	bf00      	nop
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	40010000 	.word	0x40010000

0800afa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	021b      	lsls	r3, r3, #8
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a1d      	ldr	r2, [pc, #116]	; (800b078 <TIM_OC3_SetConfig+0xd0>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d10d      	bne.n	800b022 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b00c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a14      	ldr	r2, [pc, #80]	; (800b078 <TIM_OC3_SetConfig+0xd0>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d113      	bne.n	800b052 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	4313      	orrs	r3, r2
 800b044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	011b      	lsls	r3, r3, #4
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4313      	orrs	r3, r2
 800b050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	621a      	str	r2, [r3, #32]
}
 800b06c:	bf00      	nop
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	40010000 	.word	0x40010000

0800b07c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	021b      	lsls	r3, r3, #8
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	031b      	lsls	r3, r3, #12
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a10      	ldr	r2, [pc, #64]	; (800b118 <TIM_OC4_SetConfig+0x9c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d109      	bne.n	800b0f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	019b      	lsls	r3, r3, #6
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	621a      	str	r2, [r3, #32]
}
 800b10a:	bf00      	nop
 800b10c:	371c      	adds	r7, #28
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	40010000 	.word	0x40010000

0800b11c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6a1b      	ldr	r3, [r3, #32]
 800b12c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f023 0201 	bic.w	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	4313      	orrs	r3, r2
 800b150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f023 030a 	bic.w	r3, r3, #10
 800b158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	4313      	orrs	r3, r2
 800b160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	621a      	str	r2, [r3, #32]
}
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b087      	sub	sp, #28
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	f023 0210 	bic.w	r2, r3, #16
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	031b      	lsls	r3, r3, #12
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	621a      	str	r2, [r3, #32]
}
 800b1ce:	bf00      	nop
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b085      	sub	sp, #20
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	f043 0307 	orr.w	r3, r3, #7
 800b1fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	609a      	str	r2, [r3, #8]
}
 800b204:	bf00      	nop
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b22a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	021a      	lsls	r2, r3, #8
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	431a      	orrs	r2, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	4313      	orrs	r3, r2
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	609a      	str	r2, [r3, #8]
}
 800b244:	bf00      	nop
 800b246:	371c      	adds	r7, #28
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f003 031f 	and.w	r3, r3, #31
 800b262:	2201      	movs	r2, #1
 800b264:	fa02 f303 	lsl.w	r3, r2, r3
 800b268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1a      	ldr	r2, [r3, #32]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	43db      	mvns	r3, r3
 800b272:	401a      	ands	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6a1a      	ldr	r2, [r3, #32]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f003 031f 	and.w	r3, r3, #31
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	fa01 f303 	lsl.w	r3, r1, r3
 800b288:	431a      	orrs	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	621a      	str	r2, [r3, #32]
}
 800b28e:	bf00      	nop
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
	...

0800b29c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d101      	bne.n	800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e050      	b.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2202      	movs	r2, #2
 800b2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a1c      	ldr	r2, [pc, #112]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d018      	beq.n	800b32a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b300:	d013      	beq.n	800b32a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a18      	ldr	r2, [pc, #96]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d00e      	beq.n	800b32a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a16      	ldr	r2, [pc, #88]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d009      	beq.n	800b32a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a15      	ldr	r2, [pc, #84]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d004      	beq.n	800b32a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a13      	ldr	r2, [pc, #76]	; (800b374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d10c      	bne.n	800b344 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	40010000 	.word	0x40010000
 800b368:	40000400 	.word	0x40000400
 800b36c:	40000800 	.word	0x40000800
 800b370:	40000c00 	.word	0x40000c00
 800b374:	40014000 	.word	0x40014000

0800b378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e03f      	b.n	800b432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d106      	bne.n	800b3cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7f7 ff02 	bl	80031d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2224      	movs	r2, #36	; 0x24
 800b3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fe5d 	bl	800c0a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	691a      	ldr	r2, [r3, #16]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	695a      	ldr	r2, [r3, #20]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68da      	ldr	r2, [r3, #12]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2220      	movs	r2, #32
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2220      	movs	r2, #32
 800b42c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b082      	sub	sp, #8
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e021      	b.n	800b490 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2224      	movs	r2, #36	; 0x24
 800b450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68da      	ldr	r2, [r3, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b462:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7f7 ff41 	bl	80032ec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	603b      	str	r3, [r7, #0]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b20      	cmp	r3, #32
 800b4b6:	d17c      	bne.n	800b5b2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <HAL_UART_Transmit+0x2c>
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e075      	b.n	800b5b4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d101      	bne.n	800b4d6 <HAL_UART_Transmit+0x3e>
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	e06e      	b.n	800b5b4 <HAL_UART_Transmit+0x11c>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2221      	movs	r2, #33	; 0x21
 800b4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4ec:	f7f8 f91c 	bl	8003728 <HAL_GetTick>
 800b4f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	88fa      	ldrh	r2, [r7, #6]
 800b4f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	88fa      	ldrh	r2, [r7, #6]
 800b4fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d108      	bne.n	800b51a <HAL_UART_Transmit+0x82>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d104      	bne.n	800b51a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	61bb      	str	r3, [r7, #24]
 800b518:	e003      	b.n	800b522 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b52a:	e02a      	b.n	800b582 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	2180      	movs	r1, #128	; 0x80
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 fb6e 	bl	800bc18 <UART_WaitOnFlagUntilTimeout>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e036      	b.n	800b5b4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10b      	bne.n	800b564 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b55a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	3302      	adds	r3, #2
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	e007      	b.n	800b574 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	3301      	adds	r3, #1
 800b572:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b578:	b29b      	uxth	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b586:	b29b      	uxth	r3, r3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1cf      	bne.n	800b52c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2200      	movs	r2, #0
 800b594:	2140      	movs	r1, #64	; 0x40
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 fb3e 	bl	800bc18 <UART_WaitOnFlagUntilTimeout>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e006      	b.n	800b5b4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e000      	b.n	800b5b4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b5b2:	2302      	movs	r3, #2
  }
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3720      	adds	r7, #32
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b20      	cmp	r3, #32
 800b5d4:	d11d      	bne.n	800b612 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <HAL_UART_Receive_IT+0x26>
 800b5dc:	88fb      	ldrh	r3, [r7, #6]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e016      	b.n	800b614 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d101      	bne.n	800b5f4 <HAL_UART_Receive_IT+0x38>
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	e00f      	b.n	800b614 <HAL_UART_Receive_IT+0x58>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b602:	88fb      	ldrh	r3, [r7, #6]
 800b604:	461a      	mov	r2, r3
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 fb73 	bl	800bcf4 <UART_Start_Receive_IT>
 800b60e:	4603      	mov	r3, r0
 800b610:	e000      	b.n	800b614 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b612:	2302      	movs	r3, #2
  }
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08c      	sub	sp, #48	; 0x30
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	4613      	mov	r3, r2
 800b628:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b20      	cmp	r3, #32
 800b634:	d152      	bne.n	800b6dc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b63c:	88fb      	ldrh	r3, [r7, #6]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e04b      	b.n	800b6de <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800b650:	2302      	movs	r3, #2
 800b652:	e044      	b.n	800b6de <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2201      	movs	r2, #1
 800b660:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b662:	88fb      	ldrh	r3, [r7, #6]
 800b664:	461a      	mov	r2, r3
 800b666:	68b9      	ldr	r1, [r7, #8]
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 fb43 	bl	800bcf4 <UART_Start_Receive_IT>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d12c      	bne.n	800b6d6 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b680:	2b01      	cmp	r3, #1
 800b682:	d125      	bne.n	800b6d0 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b684:	2300      	movs	r3, #0
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	330c      	adds	r3, #12
 800b6a0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f043 0310 	orr.w	r3, r3, #16
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	330c      	adds	r3, #12
 800b6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ba:	627a      	str	r2, [r7, #36]	; 0x24
 800b6bc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6be:	6a39      	ldr	r1, [r7, #32]
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1e5      	bne.n	800b69a <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800b6ce:	e002      	b.n	800b6d6 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6da:	e000      	b.n	800b6de <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800b6dc:	2302      	movs	r3, #2
  }
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3730      	adds	r7, #48	; 0x30
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b0ba      	sub	sp, #232	; 0xe8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b70e:	2300      	movs	r3, #0
 800b710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b714:	2300      	movs	r3, #0
 800b716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10f      	bne.n	800b74e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <HAL_UART_IRQHandler+0x66>
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fbf1 	bl	800bf2e <UART_Receive_IT>
      return;
 800b74c:	e256      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b74e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 80de 	beq.w	800b914 <HAL_UART_IRQHandler+0x22c>
 800b758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b768:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80d1 	beq.w	800b914 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <HAL_UART_IRQHandler+0xae>
 800b77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b786:	2b00      	cmp	r3, #0
 800b788:	d005      	beq.n	800b796 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	f043 0201 	orr.w	r2, r3, #1
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79a:	f003 0304 	and.w	r3, r3, #4
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <HAL_UART_IRQHandler+0xd2>
 800b7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b2:	f043 0202 	orr.w	r2, r3, #2
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00b      	beq.n	800b7de <HAL_UART_IRQHandler+0xf6>
 800b7c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d6:	f043 0204 	orr.w	r2, r3, #4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7e2:	f003 0308 	and.w	r3, r3, #8
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d011      	beq.n	800b80e <HAL_UART_IRQHandler+0x126>
 800b7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d105      	bne.n	800b802 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b7f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b806:	f043 0208 	orr.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 81ed 	beq.w	800bbf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81c:	f003 0320 	and.w	r3, r3, #32
 800b820:	2b00      	cmp	r3, #0
 800b822:	d008      	beq.n	800b836 <HAL_UART_IRQHandler+0x14e>
 800b824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b828:	f003 0320 	and.w	r3, r3, #32
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fb7c 	bl	800bf2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b840:	2b40      	cmp	r3, #64	; 0x40
 800b842:	bf0c      	ite	eq
 800b844:	2301      	moveq	r3, #1
 800b846:	2300      	movne	r3, #0
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d103      	bne.n	800b862 <HAL_UART_IRQHandler+0x17a>
 800b85a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d04f      	beq.n	800b902 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa84 	bl	800bd70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b872:	2b40      	cmp	r3, #64	; 0x40
 800b874:	d141      	bne.n	800b8fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3314      	adds	r3, #20
 800b87c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b88c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3314      	adds	r3, #20
 800b89e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b8ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8b2:	e841 2300 	strex	r3, r2, [r1]
 800b8b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1d9      	bne.n	800b876 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d013      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ce:	4a7d      	ldr	r2, [pc, #500]	; (800bac4 <HAL_UART_IRQHandler+0x3dc>)
 800b8d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f8 ff09 	bl	80046ee <HAL_DMA_Abort_IT>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d016      	beq.n	800b910 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f0:	e00e      	b.n	800b910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7f7 f9b6 	bl	8002c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f8:	e00a      	b.n	800b910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7f7 f9b2 	bl	8002c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b900:	e006      	b.n	800b910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7f7 f9ae 	bl	8002c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b90e:	e170      	b.n	800bbf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b910:	bf00      	nop
    return;
 800b912:	e16e      	b.n	800bbf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b918:	2b01      	cmp	r3, #1
 800b91a:	f040 814a 	bne.w	800bbb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b922:	f003 0310 	and.w	r3, r3, #16
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 8143 	beq.w	800bbb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b930:	f003 0310 	and.w	r3, r3, #16
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 813c 	beq.w	800bbb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	60bb      	str	r3, [r7, #8]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	60bb      	str	r3, [r7, #8]
 800b94e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95a:	2b40      	cmp	r3, #64	; 0x40
 800b95c:	f040 80b4 	bne.w	800bac8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b96c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 8140 	beq.w	800bbf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b97a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b97e:	429a      	cmp	r2, r3
 800b980:	f080 8139 	bcs.w	800bbf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b98a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b990:	69db      	ldr	r3, [r3, #28]
 800b992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b996:	f000 8088 	beq.w	800baaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	330c      	adds	r3, #12
 800b9a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b9b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b9c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b9d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b9de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1d9      	bne.n	800b99a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3314      	adds	r3, #20
 800b9ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9f0:	e853 3f00 	ldrex	r3, [r3]
 800b9f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9f8:	f023 0301 	bic.w	r3, r3, #1
 800b9fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3314      	adds	r3, #20
 800ba06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e1      	bne.n	800b9e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3314      	adds	r3, #20
 800ba28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3314      	adds	r3, #20
 800ba42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e3      	bne.n	800ba22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	330c      	adds	r3, #12
 800ba6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba72:	e853 3f00 	ldrex	r3, [r3]
 800ba76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba7a:	f023 0310 	bic.w	r3, r3, #16
 800ba7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	330c      	adds	r3, #12
 800ba88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba8c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba94:	e841 2300 	strex	r3, r2, [r1]
 800ba98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1e3      	bne.n	800ba68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7f8 fdb2 	bl	800460e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f007 fb7e 	bl	80131bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bac0:	e099      	b.n	800bbf6 <HAL_UART_IRQHandler+0x50e>
 800bac2:	bf00      	nop
 800bac4:	0800be37 	.word	0x0800be37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 808b 	beq.w	800bbfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 8086 	beq.w	800bbfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	330c      	adds	r3, #12
 800baf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	330c      	adds	r3, #12
 800bb0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb12:	647a      	str	r2, [r7, #68]	; 0x44
 800bb14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1e3      	bne.n	800baee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	623b      	str	r3, [r7, #32]
   return(result);
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	f023 0301 	bic.w	r3, r3, #1
 800bb3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3314      	adds	r3, #20
 800bb46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb4a:	633a      	str	r2, [r7, #48]	; 0x30
 800bb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb52:	e841 2300 	strex	r3, r2, [r1]
 800bb56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1e3      	bne.n	800bb26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2220      	movs	r2, #32
 800bb62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	330c      	adds	r3, #12
 800bb72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	e853 3f00 	ldrex	r3, [r3]
 800bb7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f023 0310 	bic.w	r3, r3, #16
 800bb82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	330c      	adds	r3, #12
 800bb8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb90:	61fa      	str	r2, [r7, #28]
 800bb92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb94:	69b9      	ldr	r1, [r7, #24]
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	e841 2300 	strex	r3, r2, [r1]
 800bb9c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1e3      	bne.n	800bb6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f007 fb06 	bl	80131bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbb0:	e023      	b.n	800bbfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bbb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d009      	beq.n	800bbd2 <HAL_UART_IRQHandler+0x4ea>
 800bbbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f947 	bl	800be5e <UART_Transmit_IT>
    return;
 800bbd0:	e014      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00e      	beq.n	800bbfc <HAL_UART_IRQHandler+0x514>
 800bbde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d008      	beq.n	800bbfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f987 	bl	800befe <UART_EndTransmit_IT>
    return;
 800bbf0:	e004      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
    return;
 800bbf2:	bf00      	nop
 800bbf4:	e002      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
      return;
 800bbf6:	bf00      	nop
 800bbf8:	e000      	b.n	800bbfc <HAL_UART_IRQHandler+0x514>
      return;
 800bbfa:	bf00      	nop
  }
}
 800bbfc:	37e8      	adds	r7, #232	; 0xe8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop

0800bc04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b090      	sub	sp, #64	; 0x40
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc28:	e050      	b.n	800bccc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc30:	d04c      	beq.n	800bccc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bc32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc38:	f7f7 fd76 	bl	8003728 <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d241      	bcs.n	800bccc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	330c      	adds	r3, #12
 800bc4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	e853 3f00 	ldrex	r3, [r3]
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	330c      	adds	r3, #12
 800bc66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc68:	637a      	str	r2, [r7, #52]	; 0x34
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc70:	e841 2300 	strex	r3, r2, [r1]
 800bc74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e5      	bne.n	800bc48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3314      	adds	r3, #20
 800bc82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	e853 3f00 	ldrex	r3, [r3]
 800bc8a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3314      	adds	r3, #20
 800bc9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc9c:	623a      	str	r2, [r7, #32]
 800bc9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca0:	69f9      	ldr	r1, [r7, #28]
 800bca2:	6a3a      	ldr	r2, [r7, #32]
 800bca4:	e841 2300 	strex	r3, r2, [r1]
 800bca8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e5      	bne.n	800bc7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2220      	movs	r2, #32
 800bcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	e00f      	b.n	800bcec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	bf0c      	ite	eq
 800bcdc:	2301      	moveq	r3, #1
 800bcde:	2300      	movne	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	461a      	mov	r2, r3
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d09f      	beq.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3740      	adds	r7, #64	; 0x40
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	88fa      	ldrh	r2, [r7, #6]
 800bd0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	88fa      	ldrh	r2, [r7, #6]
 800bd12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2222      	movs	r2, #34	; 0x22
 800bd1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d007      	beq.n	800bd42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68da      	ldr	r2, [r3, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	695a      	ldr	r2, [r3, #20]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f042 0201 	orr.w	r2, r2, #1
 800bd50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68da      	ldr	r2, [r3, #12]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f042 0220 	orr.w	r2, r2, #32
 800bd60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b095      	sub	sp, #84	; 0x54
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	330c      	adds	r3, #12
 800bd7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd82:	e853 3f00 	ldrex	r3, [r3]
 800bd86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	330c      	adds	r3, #12
 800bd96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd98:	643a      	str	r2, [r7, #64]	; 0x40
 800bd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bda0:	e841 2300 	strex	r3, r2, [r1]
 800bda4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1e5      	bne.n	800bd78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3314      	adds	r3, #20
 800bdb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	e853 3f00 	ldrex	r3, [r3]
 800bdba:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	f023 0301 	bic.w	r3, r3, #1
 800bdc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3314      	adds	r3, #20
 800bdca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd4:	e841 2300 	strex	r3, r2, [r1]
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e5      	bne.n	800bdac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d119      	bne.n	800be1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	330c      	adds	r3, #12
 800bdee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f023 0310 	bic.w	r3, r3, #16
 800bdfe:	647b      	str	r3, [r7, #68]	; 0x44
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	330c      	adds	r3, #12
 800be06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be08:	61ba      	str	r2, [r7, #24]
 800be0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	6979      	ldr	r1, [r7, #20]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	613b      	str	r3, [r7, #16]
   return(result);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e5      	bne.n	800bde8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be2a:	bf00      	nop
 800be2c:	3754      	adds	r7, #84	; 0x54
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f7f6 ff07 	bl	8002c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be56:	bf00      	nop
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be5e:	b480      	push	{r7}
 800be60:	b085      	sub	sp, #20
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b21      	cmp	r3, #33	; 0x21
 800be70:	d13e      	bne.n	800bef0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be7a:	d114      	bne.n	800bea6 <UART_Transmit_IT+0x48>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d110      	bne.n	800bea6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	1c9a      	adds	r2, r3, #2
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	621a      	str	r2, [r3, #32]
 800bea4:	e008      	b.n	800beb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	1c59      	adds	r1, r3, #1
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	6211      	str	r1, [r2, #32]
 800beb0:	781a      	ldrb	r2, [r3, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4619      	mov	r1, r3
 800bec6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10f      	bne.n	800beec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68da      	ldr	r2, [r3, #12]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800beda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	e000      	b.n	800bef2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bef0:	2302      	movs	r3, #2
  }
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68da      	ldr	r2, [r3, #12]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff fe70 	bl	800bc04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b08c      	sub	sp, #48	; 0x30
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b22      	cmp	r3, #34	; 0x22
 800bf40:	f040 80ab 	bne.w	800c09a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf4c:	d117      	bne.n	800bf7e <UART_Receive_IT+0x50>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d113      	bne.n	800bf7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf76:	1c9a      	adds	r2, r3, #2
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	629a      	str	r2, [r3, #40]	; 0x28
 800bf7c:	e026      	b.n	800bfcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf90:	d007      	beq.n	800bfa2 <UART_Receive_IT+0x74>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10a      	bne.n	800bfb0 <UART_Receive_IT+0x82>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d106      	bne.n	800bfb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	701a      	strb	r2, [r3, #0]
 800bfae:	e008      	b.n	800bfc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d15a      	bne.n	800c096 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 0220 	bic.w	r2, r2, #32
 800bfee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	695a      	ldr	r2, [r3, #20]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f022 0201 	bic.w	r2, r2, #1
 800c00e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2220      	movs	r2, #32
 800c014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d135      	bne.n	800c08c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	330c      	adds	r3, #12
 800c02c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	613b      	str	r3, [r7, #16]
   return(result);
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	f023 0310 	bic.w	r3, r3, #16
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	330c      	adds	r3, #12
 800c044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c046:	623a      	str	r2, [r7, #32]
 800c048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	69f9      	ldr	r1, [r7, #28]
 800c04c:	6a3a      	ldr	r2, [r7, #32]
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	61bb      	str	r3, [r7, #24]
   return(result);
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0310 	and.w	r3, r3, #16
 800c064:	2b10      	cmp	r3, #16
 800c066:	d10a      	bne.n	800c07e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f007 f899 	bl	80131bc <HAL_UARTEx_RxEventCallback>
 800c08a:	e002      	b.n	800c092 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f002 fc4d 	bl	800e92c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	e002      	b.n	800c09c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	e000      	b.n	800c09c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c09a:	2302      	movs	r3, #2
  }
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3730      	adds	r7, #48	; 0x30
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0a8:	b0c0      	sub	sp, #256	; 0x100
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c0:	68d9      	ldr	r1, [r3, #12]
 800c0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	ea40 0301 	orr.w	r3, r0, r1
 800c0cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d2:	689a      	ldr	r2, [r3, #8]
 800c0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	431a      	orrs	r2, r3
 800c0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c0fc:	f021 010c 	bic.w	r1, r1, #12
 800c100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c10a:	430b      	orrs	r3, r1
 800c10c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c11e:	6999      	ldr	r1, [r3, #24]
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	ea40 0301 	orr.w	r3, r0, r1
 800c12a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4b8f      	ldr	r3, [pc, #572]	; (800c370 <UART_SetConfig+0x2cc>)
 800c134:	429a      	cmp	r2, r3
 800c136:	d005      	beq.n	800c144 <UART_SetConfig+0xa0>
 800c138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4b8d      	ldr	r3, [pc, #564]	; (800c374 <UART_SetConfig+0x2d0>)
 800c140:	429a      	cmp	r2, r3
 800c142:	d104      	bne.n	800c14e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c144:	f7fc fb70 	bl	8008828 <HAL_RCC_GetPCLK2Freq>
 800c148:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c14c:	e003      	b.n	800c156 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c14e:	f7fc fb57 	bl	8008800 <HAL_RCC_GetPCLK1Freq>
 800c152:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c160:	f040 810c 	bne.w	800c37c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c168:	2200      	movs	r2, #0
 800c16a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c16e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c172:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c176:	4622      	mov	r2, r4
 800c178:	462b      	mov	r3, r5
 800c17a:	1891      	adds	r1, r2, r2
 800c17c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c17e:	415b      	adcs	r3, r3
 800c180:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c182:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c186:	4621      	mov	r1, r4
 800c188:	eb12 0801 	adds.w	r8, r2, r1
 800c18c:	4629      	mov	r1, r5
 800c18e:	eb43 0901 	adc.w	r9, r3, r1
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c19e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1a6:	4690      	mov	r8, r2
 800c1a8:	4699      	mov	r9, r3
 800c1aa:	4623      	mov	r3, r4
 800c1ac:	eb18 0303 	adds.w	r3, r8, r3
 800c1b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1b4:	462b      	mov	r3, r5
 800c1b6:	eb49 0303 	adc.w	r3, r9, r3
 800c1ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c1ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	18db      	adds	r3, r3, r3
 800c1d6:	653b      	str	r3, [r7, #80]	; 0x50
 800c1d8:	4613      	mov	r3, r2
 800c1da:	eb42 0303 	adc.w	r3, r2, r3
 800c1de:	657b      	str	r3, [r7, #84]	; 0x54
 800c1e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c1e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c1e8:	f7f4 fd66 	bl	8000cb8 <__aeabi_uldivmod>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4b61      	ldr	r3, [pc, #388]	; (800c378 <UART_SetConfig+0x2d4>)
 800c1f2:	fba3 2302 	umull	r2, r3, r3, r2
 800c1f6:	095b      	lsrs	r3, r3, #5
 800c1f8:	011c      	lsls	r4, r3, #4
 800c1fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c204:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c208:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c20c:	4642      	mov	r2, r8
 800c20e:	464b      	mov	r3, r9
 800c210:	1891      	adds	r1, r2, r2
 800c212:	64b9      	str	r1, [r7, #72]	; 0x48
 800c214:	415b      	adcs	r3, r3
 800c216:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c21c:	4641      	mov	r1, r8
 800c21e:	eb12 0a01 	adds.w	sl, r2, r1
 800c222:	4649      	mov	r1, r9
 800c224:	eb43 0b01 	adc.w	fp, r3, r1
 800c228:	f04f 0200 	mov.w	r2, #0
 800c22c:	f04f 0300 	mov.w	r3, #0
 800c230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c234:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c23c:	4692      	mov	sl, r2
 800c23e:	469b      	mov	fp, r3
 800c240:	4643      	mov	r3, r8
 800c242:	eb1a 0303 	adds.w	r3, sl, r3
 800c246:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c24a:	464b      	mov	r3, r9
 800c24c:	eb4b 0303 	adc.w	r3, fp, r3
 800c250:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c260:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c264:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c268:	460b      	mov	r3, r1
 800c26a:	18db      	adds	r3, r3, r3
 800c26c:	643b      	str	r3, [r7, #64]	; 0x40
 800c26e:	4613      	mov	r3, r2
 800c270:	eb42 0303 	adc.w	r3, r2, r3
 800c274:	647b      	str	r3, [r7, #68]	; 0x44
 800c276:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c27a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c27e:	f7f4 fd1b 	bl	8000cb8 <__aeabi_uldivmod>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4611      	mov	r1, r2
 800c288:	4b3b      	ldr	r3, [pc, #236]	; (800c378 <UART_SetConfig+0x2d4>)
 800c28a:	fba3 2301 	umull	r2, r3, r3, r1
 800c28e:	095b      	lsrs	r3, r3, #5
 800c290:	2264      	movs	r2, #100	; 0x64
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	1acb      	subs	r3, r1, r3
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c29e:	4b36      	ldr	r3, [pc, #216]	; (800c378 <UART_SetConfig+0x2d4>)
 800c2a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c2a4:	095b      	lsrs	r3, r3, #5
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c2ac:	441c      	add	r4, r3
 800c2ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c2bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	1891      	adds	r1, r2, r2
 800c2c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2c8:	415b      	adcs	r3, r3
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2d0:	4641      	mov	r1, r8
 800c2d2:	1851      	adds	r1, r2, r1
 800c2d4:	6339      	str	r1, [r7, #48]	; 0x30
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	414b      	adcs	r3, r1
 800c2da:	637b      	str	r3, [r7, #52]	; 0x34
 800c2dc:	f04f 0200 	mov.w	r2, #0
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c2e8:	4659      	mov	r1, fp
 800c2ea:	00cb      	lsls	r3, r1, #3
 800c2ec:	4651      	mov	r1, sl
 800c2ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2f2:	4651      	mov	r1, sl
 800c2f4:	00ca      	lsls	r2, r1, #3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4642      	mov	r2, r8
 800c2fe:	189b      	adds	r3, r3, r2
 800c300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c304:	464b      	mov	r3, r9
 800c306:	460a      	mov	r2, r1
 800c308:	eb42 0303 	adc.w	r3, r2, r3
 800c30c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c31c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c320:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c324:	460b      	mov	r3, r1
 800c326:	18db      	adds	r3, r3, r3
 800c328:	62bb      	str	r3, [r7, #40]	; 0x28
 800c32a:	4613      	mov	r3, r2
 800c32c:	eb42 0303 	adc.w	r3, r2, r3
 800c330:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c336:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c33a:	f7f4 fcbd 	bl	8000cb8 <__aeabi_uldivmod>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4b0d      	ldr	r3, [pc, #52]	; (800c378 <UART_SetConfig+0x2d4>)
 800c344:	fba3 1302 	umull	r1, r3, r3, r2
 800c348:	095b      	lsrs	r3, r3, #5
 800c34a:	2164      	movs	r1, #100	; 0x64
 800c34c:	fb01 f303 	mul.w	r3, r1, r3
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	3332      	adds	r3, #50	; 0x32
 800c356:	4a08      	ldr	r2, [pc, #32]	; (800c378 <UART_SetConfig+0x2d4>)
 800c358:	fba2 2303 	umull	r2, r3, r2, r3
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	f003 0207 	and.w	r2, r3, #7
 800c362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4422      	add	r2, r4
 800c36a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c36c:	e105      	b.n	800c57a <UART_SetConfig+0x4d6>
 800c36e:	bf00      	nop
 800c370:	40011000 	.word	0x40011000
 800c374:	40011400 	.word	0x40011400
 800c378:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c37c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c380:	2200      	movs	r2, #0
 800c382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c386:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c38a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c38e:	4642      	mov	r2, r8
 800c390:	464b      	mov	r3, r9
 800c392:	1891      	adds	r1, r2, r2
 800c394:	6239      	str	r1, [r7, #32]
 800c396:	415b      	adcs	r3, r3
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
 800c39a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c39e:	4641      	mov	r1, r8
 800c3a0:	1854      	adds	r4, r2, r1
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	eb43 0501 	adc.w	r5, r3, r1
 800c3a8:	f04f 0200 	mov.w	r2, #0
 800c3ac:	f04f 0300 	mov.w	r3, #0
 800c3b0:	00eb      	lsls	r3, r5, #3
 800c3b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3b6:	00e2      	lsls	r2, r4, #3
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	461d      	mov	r5, r3
 800c3bc:	4643      	mov	r3, r8
 800c3be:	18e3      	adds	r3, r4, r3
 800c3c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3c4:	464b      	mov	r3, r9
 800c3c6:	eb45 0303 	adc.w	r3, r5, r3
 800c3ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3de:	f04f 0200 	mov.w	r2, #0
 800c3e2:	f04f 0300 	mov.w	r3, #0
 800c3e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	008b      	lsls	r3, r1, #2
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	008a      	lsls	r2, r1, #2
 800c3f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c3fc:	f7f4 fc5c 	bl	8000cb8 <__aeabi_uldivmod>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	4b60      	ldr	r3, [pc, #384]	; (800c588 <UART_SetConfig+0x4e4>)
 800c406:	fba3 2302 	umull	r2, r3, r3, r2
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	011c      	lsls	r4, r3, #4
 800c40e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c412:	2200      	movs	r2, #0
 800c414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c418:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c41c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c420:	4642      	mov	r2, r8
 800c422:	464b      	mov	r3, r9
 800c424:	1891      	adds	r1, r2, r2
 800c426:	61b9      	str	r1, [r7, #24]
 800c428:	415b      	adcs	r3, r3
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c430:	4641      	mov	r1, r8
 800c432:	1851      	adds	r1, r2, r1
 800c434:	6139      	str	r1, [r7, #16]
 800c436:	4649      	mov	r1, r9
 800c438:	414b      	adcs	r3, r1
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	f04f 0200 	mov.w	r2, #0
 800c440:	f04f 0300 	mov.w	r3, #0
 800c444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c448:	4659      	mov	r1, fp
 800c44a:	00cb      	lsls	r3, r1, #3
 800c44c:	4651      	mov	r1, sl
 800c44e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c452:	4651      	mov	r1, sl
 800c454:	00ca      	lsls	r2, r1, #3
 800c456:	4610      	mov	r0, r2
 800c458:	4619      	mov	r1, r3
 800c45a:	4603      	mov	r3, r0
 800c45c:	4642      	mov	r2, r8
 800c45e:	189b      	adds	r3, r3, r2
 800c460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c464:	464b      	mov	r3, r9
 800c466:	460a      	mov	r2, r1
 800c468:	eb42 0303 	adc.w	r3, r2, r3
 800c46c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	67bb      	str	r3, [r7, #120]	; 0x78
 800c47a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c47c:	f04f 0200 	mov.w	r2, #0
 800c480:	f04f 0300 	mov.w	r3, #0
 800c484:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c488:	4649      	mov	r1, r9
 800c48a:	008b      	lsls	r3, r1, #2
 800c48c:	4641      	mov	r1, r8
 800c48e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c492:	4641      	mov	r1, r8
 800c494:	008a      	lsls	r2, r1, #2
 800c496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c49a:	f7f4 fc0d 	bl	8000cb8 <__aeabi_uldivmod>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4b39      	ldr	r3, [pc, #228]	; (800c588 <UART_SetConfig+0x4e4>)
 800c4a4:	fba3 1302 	umull	r1, r3, r3, r2
 800c4a8:	095b      	lsrs	r3, r3, #5
 800c4aa:	2164      	movs	r1, #100	; 0x64
 800c4ac:	fb01 f303 	mul.w	r3, r1, r3
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	011b      	lsls	r3, r3, #4
 800c4b4:	3332      	adds	r3, #50	; 0x32
 800c4b6:	4a34      	ldr	r2, [pc, #208]	; (800c588 <UART_SetConfig+0x4e4>)
 800c4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4bc:	095b      	lsrs	r3, r3, #5
 800c4be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4c2:	441c      	add	r4, r3
 800c4c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	673b      	str	r3, [r7, #112]	; 0x70
 800c4cc:	677a      	str	r2, [r7, #116]	; 0x74
 800c4ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	1891      	adds	r1, r2, r2
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	415b      	adcs	r3, r3
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4e2:	4641      	mov	r1, r8
 800c4e4:	1851      	adds	r1, r2, r1
 800c4e6:	6039      	str	r1, [r7, #0]
 800c4e8:	4649      	mov	r1, r9
 800c4ea:	414b      	adcs	r3, r1
 800c4ec:	607b      	str	r3, [r7, #4]
 800c4ee:	f04f 0200 	mov.w	r2, #0
 800c4f2:	f04f 0300 	mov.w	r3, #0
 800c4f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4fa:	4659      	mov	r1, fp
 800c4fc:	00cb      	lsls	r3, r1, #3
 800c4fe:	4651      	mov	r1, sl
 800c500:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c504:	4651      	mov	r1, sl
 800c506:	00ca      	lsls	r2, r1, #3
 800c508:	4610      	mov	r0, r2
 800c50a:	4619      	mov	r1, r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	4642      	mov	r2, r8
 800c510:	189b      	adds	r3, r3, r2
 800c512:	66bb      	str	r3, [r7, #104]	; 0x68
 800c514:	464b      	mov	r3, r9
 800c516:	460a      	mov	r2, r1
 800c518:	eb42 0303 	adc.w	r3, r2, r3
 800c51c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	663b      	str	r3, [r7, #96]	; 0x60
 800c528:	667a      	str	r2, [r7, #100]	; 0x64
 800c52a:	f04f 0200 	mov.w	r2, #0
 800c52e:	f04f 0300 	mov.w	r3, #0
 800c532:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c536:	4649      	mov	r1, r9
 800c538:	008b      	lsls	r3, r1, #2
 800c53a:	4641      	mov	r1, r8
 800c53c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c540:	4641      	mov	r1, r8
 800c542:	008a      	lsls	r2, r1, #2
 800c544:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c548:	f7f4 fbb6 	bl	8000cb8 <__aeabi_uldivmod>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	4b0d      	ldr	r3, [pc, #52]	; (800c588 <UART_SetConfig+0x4e4>)
 800c552:	fba3 1302 	umull	r1, r3, r3, r2
 800c556:	095b      	lsrs	r3, r3, #5
 800c558:	2164      	movs	r1, #100	; 0x64
 800c55a:	fb01 f303 	mul.w	r3, r1, r3
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	3332      	adds	r3, #50	; 0x32
 800c564:	4a08      	ldr	r2, [pc, #32]	; (800c588 <UART_SetConfig+0x4e4>)
 800c566:	fba2 2303 	umull	r2, r3, r2, r3
 800c56a:	095b      	lsrs	r3, r3, #5
 800c56c:	f003 020f 	and.w	r2, r3, #15
 800c570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4422      	add	r2, r4
 800c578:	609a      	str	r2, [r3, #8]
}
 800c57a:	bf00      	nop
 800c57c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c580:	46bd      	mov	sp, r7
 800c582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c586:	bf00      	nop
 800c588:	51eb851f 	.word	0x51eb851f

0800c58c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c58c:	b084      	sub	sp, #16
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	f107 001c 	add.w	r0, r7, #28
 800c59a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c5a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c5a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c5aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c5ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c5b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c5b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c5c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	431a      	orrs	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	b004      	add	sp, #16
 800c5e0:	4770      	bx	lr

0800c5e2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2203      	movs	r2, #3
 800c62a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0303 	and.w	r3, r3, #3
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c656:	b480      	push	{r7}
 800c658:	b085      	sub	sp, #20
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c674:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c67a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c680:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	4313      	orrs	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c690:	f023 030f 	bic.w	r3, r3, #15
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	431a      	orrs	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	b2db      	uxtb	r3, r3
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3314      	adds	r3, #20
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
}  
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c710:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c716:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c71c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	4313      	orrs	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	431a      	orrs	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c734:	2300      	movs	r3, #0

}
 800c736:	4618      	mov	r0, r3
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b088      	sub	sp, #32
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c750:	2310      	movs	r3, #16
 800c752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c754:	2340      	movs	r3, #64	; 0x40
 800c756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c758:	2300      	movs	r3, #0
 800c75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c762:	f107 0308 	add.w	r3, r7, #8
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff ff74 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c76e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c772:	2110      	movs	r1, #16
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f9d7 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c77a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c77c:	69fb      	ldr	r3, [r7, #28]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3720      	adds	r7, #32
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b088      	sub	sp, #32
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c794:	2311      	movs	r3, #17
 800c796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c798:	2340      	movs	r3, #64	; 0x40
 800c79a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c79c:	2300      	movs	r3, #0
 800c79e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7a6:	f107 0308 	add.w	r3, r7, #8
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ff52 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b6:	2111      	movs	r1, #17
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f9b5 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c7be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7c0:	69fb      	ldr	r3, [r7, #28]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b088      	sub	sp, #32
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c7d8:	2312      	movs	r3, #18
 800c7da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7dc:	2340      	movs	r3, #64	; 0x40
 800c7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7ea:	f107 0308 	add.w	r3, r7, #8
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ff30 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7fa:	2112      	movs	r1, #18
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f993 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c804:	69fb      	ldr	r3, [r7, #28]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3720      	adds	r7, #32
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b088      	sub	sp, #32
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c81c:	2318      	movs	r3, #24
 800c81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c820:	2340      	movs	r3, #64	; 0x40
 800c822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c82c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c82e:	f107 0308 	add.w	r3, r7, #8
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff ff0e 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c83a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c83e:	2118      	movs	r1, #24
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f971 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c848:	69fb      	ldr	r3, [r7, #28]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b088      	sub	sp, #32
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c860:	2319      	movs	r3, #25
 800c862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c864:	2340      	movs	r3, #64	; 0x40
 800c866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c868:	2300      	movs	r3, #0
 800c86a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	4619      	mov	r1, r3
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff feec 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c87e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c882:	2119      	movs	r1, #25
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f94f 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c88a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c88c:	69fb      	ldr	r3, [r7, #28]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3720      	adds	r7, #32
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8a4:	230c      	movs	r3, #12
 800c8a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8a8:	2340      	movs	r3, #64	; 0x40
 800c8aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8b6:	f107 0308 	add.w	r3, r7, #8
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff feca 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c8c2:	4a05      	ldr	r2, [pc, #20]	; (800c8d8 <SDMMC_CmdStopTransfer+0x40>)
 800c8c4:	210c      	movs	r1, #12
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f92e 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c8cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ce:	69fb      	ldr	r3, [r7, #28]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3720      	adds	r7, #32
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	05f5e100 	.word	0x05f5e100

0800c8dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c8ec:	2307      	movs	r3, #7
 800c8ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8f0:	2340      	movs	r3, #64	; 0x40
 800c8f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8fe:	f107 0310 	add.w	r3, r7, #16
 800c902:	4619      	mov	r1, r3
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f7ff fea6 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c90e:	2107      	movs	r1, #7
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f909 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c916:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3728      	adds	r7, #40	; 0x28
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b088      	sub	sp, #32
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c92a:	2300      	movs	r3, #0
 800c92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c932:	2300      	movs	r3, #0
 800c934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c93e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c940:	f107 0308 	add.w	r3, r7, #8
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff fe85 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fb23 	bl	800cf98 <SDMMC_GetCmdError>
 800c952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c954:	69fb      	ldr	r3, [r7, #28]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b088      	sub	sp, #32
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c966:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c96c:	2308      	movs	r3, #8
 800c96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c970:	2340      	movs	r3, #64	; 0x40
 800c972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c974:	2300      	movs	r3, #0
 800c976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c97c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff fe66 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fab6 	bl	800cefc <SDMMC_GetCmdResp7>
 800c990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c992:	69fb      	ldr	r3, [r7, #28]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3720      	adds	r7, #32
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b088      	sub	sp, #32
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9aa:	2337      	movs	r3, #55	; 0x37
 800c9ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9ae:	2340      	movs	r3, #64	; 0x40
 800c9b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9bc:	f107 0308 	add.w	r3, r7, #8
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7ff fe47 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9cc:	2137      	movs	r1, #55	; 0x37
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f8aa 	bl	800cb28 <SDMMC_GetCmdResp1>
 800c9d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9d6:	69fb      	ldr	r3, [r7, #28]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3720      	adds	r7, #32
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c9f6:	2329      	movs	r3, #41	; 0x29
 800c9f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9fa:	2340      	movs	r3, #64	; 0x40
 800c9fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fe21 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f9bd 	bl	800cd94 <SDMMC_GetCmdResp3>
 800ca1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca1c:	69fb      	ldr	r3, [r7, #28]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3720      	adds	r7, #32
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b088      	sub	sp, #32
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca32:	2302      	movs	r3, #2
 800ca34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ca36:	23c0      	movs	r3, #192	; 0xc0
 800ca38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca44:	f107 0308 	add.w	r3, r7, #8
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff fe03 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f957 	bl	800cd04 <SDMMC_GetCmdResp2>
 800ca56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca58:	69fb      	ldr	r3, [r7, #28]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b088      	sub	sp, #32
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ca70:	2309      	movs	r3, #9
 800ca72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ca74:	23c0      	movs	r3, #192	; 0xc0
 800ca76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fde4 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f938 	bl	800cd04 <SDMMC_GetCmdResp2>
 800ca94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca96:	69fb      	ldr	r3, [r7, #28]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3720      	adds	r7, #32
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800caae:	2303      	movs	r3, #3
 800cab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cab2:	2340      	movs	r3, #64	; 0x40
 800cab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cab6:	2300      	movs	r3, #0
 800cab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cabe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cac0:	f107 0308 	add.w	r3, r7, #8
 800cac4:	4619      	mov	r1, r3
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff fdc5 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cacc:	683a      	ldr	r2, [r7, #0]
 800cace:	2103      	movs	r1, #3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f99d 	bl	800ce10 <SDMMC_GetCmdResp6>
 800cad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cad8:	69fb      	ldr	r3, [r7, #28]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3720      	adds	r7, #32
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b088      	sub	sp, #32
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800caf0:	230d      	movs	r3, #13
 800caf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800caf4:	2340      	movs	r3, #64	; 0x40
 800caf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caf8:	2300      	movs	r3, #0
 800cafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb02:	f107 0308 	add.w	r3, r7, #8
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7ff fda4 	bl	800c656 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cb0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb12:	210d      	movs	r1, #13
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f807 	bl	800cb28 <SDMMC_GetCmdResp1>
 800cb1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb1c:	69fb      	ldr	r3, [r7, #28]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3720      	adds	r7, #32
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	460b      	mov	r3, r1
 800cb32:	607a      	str	r2, [r7, #4]
 800cb34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cb36:	4b70      	ldr	r3, [pc, #448]	; (800ccf8 <SDMMC_GetCmdResp1+0x1d0>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a70      	ldr	r2, [pc, #448]	; (800ccfc <SDMMC_GetCmdResp1+0x1d4>)
 800cb3c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb40:	0a5a      	lsrs	r2, r3, #9
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	fb02 f303 	mul.w	r3, r2, r3
 800cb48:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	1e5a      	subs	r2, r3, #1
 800cb4e:	61fa      	str	r2, [r7, #28]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb58:	e0c9      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb5e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0ef      	beq.n	800cb4a <SDMMC_GetCmdResp1+0x22>
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1ea      	bne.n	800cb4a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d004      	beq.n	800cb8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2204      	movs	r2, #4
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb86:	2304      	movs	r3, #4
 800cb88:	e0b1      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d004      	beq.n	800cba0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e0a6      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	22c5      	movs	r2, #197	; 0xc5
 800cba4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f7ff fd7f 	bl	800c6aa <SDIO_GetCommandResponse>
 800cbac:	4603      	mov	r3, r0
 800cbae:	461a      	mov	r2, r3
 800cbb0:	7afb      	ldrb	r3, [r7, #11]
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d001      	beq.n	800cbba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e099      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cbba:	2100      	movs	r1, #0
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff fd81 	bl	800c6c4 <SDIO_GetResponse>
 800cbc2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cbc4:	697a      	ldr	r2, [r7, #20]
 800cbc6:	4b4e      	ldr	r3, [pc, #312]	; (800cd00 <SDMMC_GetCmdResp1+0x1d8>)
 800cbc8:	4013      	ands	r3, r2
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e08d      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	da02      	bge.n	800cbde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cbd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cbdc:	e087      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cbe8:	2340      	movs	r3, #64	; 0x40
 800cbea:	e080      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cbf6:	2380      	movs	r3, #128	; 0x80
 800cbf8:	e079      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc08:	e071      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cc14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc18:	e069      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cc24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc28:	e061      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cc34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc38:	e059      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cc44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc48:	e051      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cc54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc58:	e049      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cc64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc68:	e041      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cc74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc78:	e039      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cc84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cc88:	e031      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d002      	beq.n	800cc9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cc94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cc98:	e029      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cca4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cca8:	e021      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ccb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ccb8:	e019      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ccc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ccc8:	e011      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d002      	beq.n	800ccda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ccd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ccd8:	e009      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f003 0308 	and.w	r3, r3, #8
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cce4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cce8:	e001      	b.n	800ccee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ccea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	2000000c 	.word	0x2000000c
 800ccfc:	10624dd3 	.word	0x10624dd3
 800cd00:	fdffe008 	.word	0xfdffe008

0800cd04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd0c:	4b1f      	ldr	r3, [pc, #124]	; (800cd8c <SDMMC_GetCmdResp2+0x88>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a1f      	ldr	r2, [pc, #124]	; (800cd90 <SDMMC_GetCmdResp2+0x8c>)
 800cd12:	fba2 2303 	umull	r2, r3, r2, r3
 800cd16:	0a5b      	lsrs	r3, r3, #9
 800cd18:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd1c:	fb02 f303 	mul.w	r3, r2, r3
 800cd20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1e5a      	subs	r2, r3, #1
 800cd26:	60fa      	str	r2, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd30:	e026      	b.n	800cd80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0ef      	beq.n	800cd22 <SDMMC_GetCmdResp2+0x1e>
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1ea      	bne.n	800cd22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd50:	f003 0304 	and.w	r3, r3, #4
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d004      	beq.n	800cd62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2204      	movs	r2, #4
 800cd5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd5e:	2304      	movs	r3, #4
 800cd60:	e00e      	b.n	800cd80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd66:	f003 0301 	and.w	r3, r3, #1
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d004      	beq.n	800cd78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2201      	movs	r2, #1
 800cd72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e003      	b.n	800cd80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	22c5      	movs	r2, #197	; 0xc5
 800cd7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	2000000c 	.word	0x2000000c
 800cd90:	10624dd3 	.word	0x10624dd3

0800cd94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd9c:	4b1a      	ldr	r3, [pc, #104]	; (800ce08 <SDMMC_GetCmdResp3+0x74>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a1a      	ldr	r2, [pc, #104]	; (800ce0c <SDMMC_GetCmdResp3+0x78>)
 800cda2:	fba2 2303 	umull	r2, r3, r2, r3
 800cda6:	0a5b      	lsrs	r3, r3, #9
 800cda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdac:	fb02 f303 	mul.w	r3, r2, r3
 800cdb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1e5a      	subs	r2, r3, #1
 800cdb6:	60fa      	str	r2, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d102      	bne.n	800cdc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdc0:	e01b      	b.n	800cdfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0ef      	beq.n	800cdb2 <SDMMC_GetCmdResp3+0x1e>
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1ea      	bne.n	800cdb2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde0:	f003 0304 	and.w	r3, r3, #4
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2204      	movs	r2, #4
 800cdec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdee:	2304      	movs	r3, #4
 800cdf0:	e003      	b.n	800cdfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	22c5      	movs	r2, #197	; 0xc5
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	2000000c 	.word	0x2000000c
 800ce0c:	10624dd3 	.word	0x10624dd3

0800ce10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce1e:	4b35      	ldr	r3, [pc, #212]	; (800cef4 <SDMMC_GetCmdResp6+0xe4>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a35      	ldr	r2, [pc, #212]	; (800cef8 <SDMMC_GetCmdResp6+0xe8>)
 800ce24:	fba2 2303 	umull	r2, r3, r2, r3
 800ce28:	0a5b      	lsrs	r3, r3, #9
 800ce2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce2e:	fb02 f303 	mul.w	r3, r2, r3
 800ce32:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	1e5a      	subs	r2, r3, #1
 800ce38:	61fa      	str	r2, [r7, #28]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce42:	e052      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0ef      	beq.n	800ce34 <SDMMC_GetCmdResp6+0x24>
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1ea      	bne.n	800ce34 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce62:	f003 0304 	and.w	r3, r3, #4
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d004      	beq.n	800ce74 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2204      	movs	r2, #4
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce70:	2304      	movs	r3, #4
 800ce72:	e03a      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2201      	movs	r2, #1
 800ce84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e02f      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f7ff fc0d 	bl	800c6aa <SDIO_GetCommandResponse>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461a      	mov	r2, r3
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d001      	beq.n	800ce9e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e025      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	22c5      	movs	r2, #197	; 0xc5
 800cea2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cea4:	2100      	movs	r1, #0
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f7ff fc0c 	bl	800c6c4 <SDIO_GetResponse>
 800ceac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	0c1b      	lsrs	r3, r3, #16
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e011      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ced0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ced4:	e009      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cee4:	e001      	b.n	800ceea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3720      	adds	r7, #32
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	2000000c 	.word	0x2000000c
 800cef8:	10624dd3 	.word	0x10624dd3

0800cefc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf04:	4b22      	ldr	r3, [pc, #136]	; (800cf90 <SDMMC_GetCmdResp7+0x94>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a22      	ldr	r2, [pc, #136]	; (800cf94 <SDMMC_GetCmdResp7+0x98>)
 800cf0a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf0e:	0a5b      	lsrs	r3, r3, #9
 800cf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf14:	fb02 f303 	mul.w	r3, r2, r3
 800cf18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	1e5a      	subs	r2, r3, #1
 800cf1e:	60fa      	str	r2, [r7, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d102      	bne.n	800cf2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf28:	e02c      	b.n	800cf84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0ef      	beq.n	800cf1a <SDMMC_GetCmdResp7+0x1e>
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1ea      	bne.n	800cf1a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d004      	beq.n	800cf5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2204      	movs	r2, #4
 800cf54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf56:	2304      	movs	r3, #4
 800cf58:	e014      	b.n	800cf84 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d004      	beq.n	800cf70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e009      	b.n	800cf84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2240      	movs	r2, #64	; 0x40
 800cf80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cf82:	2300      	movs	r3, #0
  
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	2000000c 	.word	0x2000000c
 800cf94:	10624dd3 	.word	0x10624dd3

0800cf98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cfa0:	4b11      	ldr	r3, [pc, #68]	; (800cfe8 <SDMMC_GetCmdError+0x50>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a11      	ldr	r2, [pc, #68]	; (800cfec <SDMMC_GetCmdError+0x54>)
 800cfa6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfaa:	0a5b      	lsrs	r3, r3, #9
 800cfac:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb0:	fb02 f303 	mul.w	r3, r2, r3
 800cfb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	1e5a      	subs	r2, r3, #1
 800cfba:	60fa      	str	r2, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d102      	bne.n	800cfc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfc4:	e009      	b.n	800cfda <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0f1      	beq.n	800cfb6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	22c5      	movs	r2, #197	; 0xc5
 800cfd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	2000000c 	.word	0x2000000c
 800cfec:	10624dd3 	.word	0x10624dd3

0800cff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cff0:	b084      	sub	sp, #16
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	f107 001c 	add.w	r0, r7, #28
 800cffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	2b01      	cmp	r3, #1
 800d006:	d122      	bne.n	800d04e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d032:	2b01      	cmp	r3, #1
 800d034:	d105      	bne.n	800d042 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f001 fc3e 	bl	800e8c4 <USB_CoreReset>
 800d048:	4603      	mov	r3, r0
 800d04a:	73fb      	strb	r3, [r7, #15]
 800d04c:	e01a      	b.n	800d084 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f001 fc32 	bl	800e8c4 <USB_CoreReset>
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	639a      	str	r2, [r3, #56]	; 0x38
 800d076:	e005      	b.n	800d084 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	2b01      	cmp	r3, #1
 800d088:	d10b      	bne.n	800d0a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f043 0206 	orr.w	r2, r3, #6
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f043 0220 	orr.w	r2, r3, #32
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0ae:	b004      	add	sp, #16
 800d0b0:	4770      	bx	lr
	...

0800d0b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b087      	sub	sp, #28
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	4613      	mov	r3, r2
 800d0c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d165      	bne.n	800d194 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	4a41      	ldr	r2, [pc, #260]	; (800d1d0 <USB_SetTurnaroundTime+0x11c>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d906      	bls.n	800d0de <USB_SetTurnaroundTime+0x2a>
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	4a40      	ldr	r2, [pc, #256]	; (800d1d4 <USB_SetTurnaroundTime+0x120>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d202      	bcs.n	800d0de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d0d8:	230f      	movs	r3, #15
 800d0da:	617b      	str	r3, [r7, #20]
 800d0dc:	e062      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	4a3c      	ldr	r2, [pc, #240]	; (800d1d4 <USB_SetTurnaroundTime+0x120>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d306      	bcc.n	800d0f4 <USB_SetTurnaroundTime+0x40>
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	4a3b      	ldr	r2, [pc, #236]	; (800d1d8 <USB_SetTurnaroundTime+0x124>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d202      	bcs.n	800d0f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d0ee:	230e      	movs	r3, #14
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	e057      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	4a38      	ldr	r2, [pc, #224]	; (800d1d8 <USB_SetTurnaroundTime+0x124>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d306      	bcc.n	800d10a <USB_SetTurnaroundTime+0x56>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	4a37      	ldr	r2, [pc, #220]	; (800d1dc <USB_SetTurnaroundTime+0x128>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d202      	bcs.n	800d10a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d104:	230d      	movs	r3, #13
 800d106:	617b      	str	r3, [r7, #20]
 800d108:	e04c      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	4a33      	ldr	r2, [pc, #204]	; (800d1dc <USB_SetTurnaroundTime+0x128>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d306      	bcc.n	800d120 <USB_SetTurnaroundTime+0x6c>
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	4a32      	ldr	r2, [pc, #200]	; (800d1e0 <USB_SetTurnaroundTime+0x12c>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d802      	bhi.n	800d120 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d11a:	230c      	movs	r3, #12
 800d11c:	617b      	str	r3, [r7, #20]
 800d11e:	e041      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	4a2f      	ldr	r2, [pc, #188]	; (800d1e0 <USB_SetTurnaroundTime+0x12c>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d906      	bls.n	800d136 <USB_SetTurnaroundTime+0x82>
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	4a2e      	ldr	r2, [pc, #184]	; (800d1e4 <USB_SetTurnaroundTime+0x130>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d802      	bhi.n	800d136 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d130:	230b      	movs	r3, #11
 800d132:	617b      	str	r3, [r7, #20]
 800d134:	e036      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	4a2a      	ldr	r2, [pc, #168]	; (800d1e4 <USB_SetTurnaroundTime+0x130>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d906      	bls.n	800d14c <USB_SetTurnaroundTime+0x98>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	4a29      	ldr	r2, [pc, #164]	; (800d1e8 <USB_SetTurnaroundTime+0x134>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d802      	bhi.n	800d14c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d146:	230a      	movs	r3, #10
 800d148:	617b      	str	r3, [r7, #20]
 800d14a:	e02b      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	4a26      	ldr	r2, [pc, #152]	; (800d1e8 <USB_SetTurnaroundTime+0x134>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d906      	bls.n	800d162 <USB_SetTurnaroundTime+0xae>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	4a25      	ldr	r2, [pc, #148]	; (800d1ec <USB_SetTurnaroundTime+0x138>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d202      	bcs.n	800d162 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d15c:	2309      	movs	r3, #9
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	e020      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	4a21      	ldr	r2, [pc, #132]	; (800d1ec <USB_SetTurnaroundTime+0x138>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d306      	bcc.n	800d178 <USB_SetTurnaroundTime+0xc4>
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	4a20      	ldr	r2, [pc, #128]	; (800d1f0 <USB_SetTurnaroundTime+0x13c>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d802      	bhi.n	800d178 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d172:	2308      	movs	r3, #8
 800d174:	617b      	str	r3, [r7, #20]
 800d176:	e015      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4a1d      	ldr	r2, [pc, #116]	; (800d1f0 <USB_SetTurnaroundTime+0x13c>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d906      	bls.n	800d18e <USB_SetTurnaroundTime+0xda>
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	4a1c      	ldr	r2, [pc, #112]	; (800d1f4 <USB_SetTurnaroundTime+0x140>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d202      	bcs.n	800d18e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d188:	2307      	movs	r3, #7
 800d18a:	617b      	str	r3, [r7, #20]
 800d18c:	e00a      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d18e:	2306      	movs	r3, #6
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	e007      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d102      	bne.n	800d1a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d19a:	2309      	movs	r3, #9
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e001      	b.n	800d1a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d1a0:	2309      	movs	r3, #9
 800d1a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	029b      	lsls	r3, r3, #10
 800d1b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d1bc:	431a      	orrs	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	371c      	adds	r7, #28
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	00d8acbf 	.word	0x00d8acbf
 800d1d4:	00e4e1c0 	.word	0x00e4e1c0
 800d1d8:	00f42400 	.word	0x00f42400
 800d1dc:	01067380 	.word	0x01067380
 800d1e0:	011a499f 	.word	0x011a499f
 800d1e4:	01312cff 	.word	0x01312cff
 800d1e8:	014ca43f 	.word	0x014ca43f
 800d1ec:	016e3600 	.word	0x016e3600
 800d1f0:	01a6ab1f 	.word	0x01a6ab1f
 800d1f4:	01e84800 	.word	0x01e84800

0800d1f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	f043 0201 	orr.w	r2, r3, #1
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d21a:	b480      	push	{r7}
 800d21c:	b083      	sub	sp, #12
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f023 0201 	bic.w	r2, r3, #1
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d258:	78fb      	ldrb	r3, [r7, #3]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d115      	bne.n	800d28a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d26a:	2001      	movs	r0, #1
 800d26c:	f7f6 fa68 	bl	8003740 <HAL_Delay>
      ms++;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3301      	adds	r3, #1
 800d274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 fa94 	bl	800e7a4 <USB_GetMode>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d01e      	beq.n	800d2c0 <USB_SetCurrentMode+0x84>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b31      	cmp	r3, #49	; 0x31
 800d286:	d9f0      	bls.n	800d26a <USB_SetCurrentMode+0x2e>
 800d288:	e01a      	b.n	800d2c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d115      	bne.n	800d2bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d29c:	2001      	movs	r0, #1
 800d29e:	f7f6 fa4f 	bl	8003740 <HAL_Delay>
      ms++;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f001 fa7b 	bl	800e7a4 <USB_GetMode>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <USB_SetCurrentMode+0x84>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b31      	cmp	r3, #49	; 0x31
 800d2b8:	d9f0      	bls.n	800d29c <USB_SetCurrentMode+0x60>
 800d2ba:	e001      	b.n	800d2c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e005      	b.n	800d2cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b32      	cmp	r3, #50	; 0x32
 800d2c4:	d101      	bne.n	800d2ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e000      	b.n	800d2cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b086      	sub	sp, #24
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	e009      	b.n	800d308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	3340      	adds	r3, #64	; 0x40
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	3301      	adds	r3, #1
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	2b0e      	cmp	r3, #14
 800d30c:	d9f2      	bls.n	800d2f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d310:	2b00      	cmp	r3, #0
 800d312:	d11c      	bne.n	800d34e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d322:	f043 0302 	orr.w	r3, r3, #2
 800d326:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d338:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d344:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	639a      	str	r2, [r3, #56]	; 0x38
 800d34c:	e00b      	b.n	800d366 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d352:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d36c:	461a      	mov	r2, r3
 800d36e:	2300      	movs	r3, #0
 800d370:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d378:	4619      	mov	r1, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d380:	461a      	mov	r2, r3
 800d382:	680b      	ldr	r3, [r1, #0]
 800d384:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d10c      	bne.n	800d3a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d104      	bne.n	800d39c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d392:	2100      	movs	r1, #0
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f965 	bl	800d664 <USB_SetDevSpeed>
 800d39a:	e008      	b.n	800d3ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d39c:	2101      	movs	r1, #1
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f960 	bl	800d664 <USB_SetDevSpeed>
 800d3a4:	e003      	b.n	800d3ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d3a6:	2103      	movs	r1, #3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f95b 	bl	800d664 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d3ae:	2110      	movs	r1, #16
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f8f3 	bl	800d59c <USB_FlushTxFifo>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f91f 	bl	800d604 <USB_FlushRxFifo>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	2300      	movs	r3, #0
 800d3da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	e043      	b.n	800d482 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d40c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d410:	d118      	bne.n	800d444 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10a      	bne.n	800d42e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	015a      	lsls	r2, r3, #5
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d424:	461a      	mov	r2, r3
 800d426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d42a:	6013      	str	r3, [r2, #0]
 800d42c:	e013      	b.n	800d456 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4413      	add	r3, r2
 800d436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43a:	461a      	mov	r2, r3
 800d43c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	e008      	b.n	800d456 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d450:	461a      	mov	r2, r3
 800d452:	2300      	movs	r3, #0
 800d454:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d462:	461a      	mov	r2, r3
 800d464:	2300      	movs	r3, #0
 800d466:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d474:	461a      	mov	r2, r3
 800d476:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d47a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	3301      	adds	r3, #1
 800d480:	613b      	str	r3, [r7, #16]
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	429a      	cmp	r2, r3
 800d488:	d3b7      	bcc.n	800d3fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d48a:	2300      	movs	r3, #0
 800d48c:	613b      	str	r3, [r7, #16]
 800d48e:	e043      	b.n	800d518 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a6:	d118      	bne.n	800d4da <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10a      	bne.n	800d4c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	015a      	lsls	r2, r3, #5
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4c0:	6013      	str	r3, [r2, #0]
 800d4c2:	e013      	b.n	800d4ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d4d6:	6013      	str	r3, [r2, #0]
 800d4d8:	e008      	b.n	800d4ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	015a      	lsls	r2, r3, #5
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	4413      	add	r3, r2
 800d506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50a:	461a      	mov	r2, r3
 800d50c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	3301      	adds	r3, #1
 800d516:	613b      	str	r3, [r7, #16]
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d3b7      	bcc.n	800d490 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d52e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d532:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d540:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	2b00      	cmp	r3, #0
 800d546:	d105      	bne.n	800d554 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	699b      	ldr	r3, [r3, #24]
 800d54c:	f043 0210 	orr.w	r2, r3, #16
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	699a      	ldr	r2, [r3, #24]
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <USB_DevInit+0x2c4>)
 800d55a:	4313      	orrs	r3, r2
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d005      	beq.n	800d572 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	f043 0208 	orr.w	r2, r3, #8
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d574:	2b01      	cmp	r3, #1
 800d576:	d107      	bne.n	800d588 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d580:	f043 0304 	orr.w	r3, r3, #4
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d588:	7dfb      	ldrb	r3, [r7, #23]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d594:	b004      	add	sp, #16
 800d596:	4770      	bx	lr
 800d598:	803c3800 	.word	0x803c3800

0800d59c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4a13      	ldr	r2, [pc, #76]	; (800d600 <USB_FlushTxFifo+0x64>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d901      	bls.n	800d5bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e01b      	b.n	800d5f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	daf2      	bge.n	800d5aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	019b      	lsls	r3, r3, #6
 800d5cc:	f043 0220 	orr.w	r2, r3, #32
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4a08      	ldr	r2, [pc, #32]	; (800d600 <USB_FlushTxFifo+0x64>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d901      	bls.n	800d5e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e006      	b.n	800d5f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	f003 0320 	and.w	r3, r3, #32
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	d0f0      	beq.n	800d5d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	00030d40 	.word	0x00030d40

0800d604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	3301      	adds	r3, #1
 800d614:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	4a11      	ldr	r2, [pc, #68]	; (800d660 <USB_FlushRxFifo+0x5c>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d901      	bls.n	800d622 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d61e:	2303      	movs	r3, #3
 800d620:	e018      	b.n	800d654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	daf2      	bge.n	800d610 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2210      	movs	r2, #16
 800d632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	4a08      	ldr	r2, [pc, #32]	; (800d660 <USB_FlushRxFifo+0x5c>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d901      	bls.n	800d646 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e006      	b.n	800d654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	f003 0310 	and.w	r3, r3, #16
 800d64e:	2b10      	cmp	r3, #16
 800d650:	d0f0      	beq.n	800d634 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	00030d40 	.word	0x00030d40

0800d664 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	68f9      	ldr	r1, [r7, #12]
 800d680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d684:	4313      	orrs	r3, r2
 800d686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d696:	b480      	push	{r7}
 800d698:	b087      	sub	sp, #28
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f003 0306 	and.w	r3, r3, #6
 800d6ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	75fb      	strb	r3, [r7, #23]
 800d6ba:	e00a      	b.n	800d6d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d002      	beq.n	800d6c8 <USB_GetDevSpeed+0x32>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2b06      	cmp	r3, #6
 800d6c6:	d102      	bne.n	800d6ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	75fb      	strb	r3, [r7, #23]
 800d6cc:	e001      	b.n	800d6d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d6ce:	230f      	movs	r3, #15
 800d6d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	371c      	adds	r7, #28
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	785b      	ldrb	r3, [r3, #1]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d13a      	bne.n	800d772 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d702:	69da      	ldr	r2, [r3, #28]
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	f003 030f 	and.w	r3, r3, #15
 800d70c:	2101      	movs	r1, #1
 800d70e:	fa01 f303 	lsl.w	r3, r1, r3
 800d712:	b29b      	uxth	r3, r3
 800d714:	68f9      	ldr	r1, [r7, #12]
 800d716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d71a:	4313      	orrs	r3, r2
 800d71c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d155      	bne.n	800d7e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	015a      	lsls	r2, r3, #5
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	4413      	add	r3, r2
 800d73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	791b      	ldrb	r3, [r3, #4]
 800d74e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d750:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	059b      	lsls	r3, r3, #22
 800d756:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d758:	4313      	orrs	r3, r2
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	0151      	lsls	r1, r2, #5
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	440a      	add	r2, r1
 800d762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d76a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	e036      	b.n	800d7e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d778:	69da      	ldr	r2, [r3, #28]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	f003 030f 	and.w	r3, r3, #15
 800d782:	2101      	movs	r1, #1
 800d784:	fa01 f303 	lsl.w	r3, r1, r3
 800d788:	041b      	lsls	r3, r3, #16
 800d78a:	68f9      	ldr	r1, [r7, #12]
 800d78c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d790:	4313      	orrs	r3, r2
 800d792:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	015a      	lsls	r2, r3, #5
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4413      	add	r3, r2
 800d79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d11a      	bne.n	800d7e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	015a      	lsls	r2, r3, #5
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	791b      	ldrb	r3, [r3, #4]
 800d7c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7c6:	430b      	orrs	r3, r1
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	0151      	lsls	r1, r2, #5
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	440a      	add	r2, r1
 800d7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
	...

0800d7f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	785b      	ldrb	r3, [r3, #1]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d161      	bne.n	800d8d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d81e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d822:	d11f      	bne.n	800d864 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	015a      	lsls	r2, r3, #5
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	0151      	lsls	r1, r2, #5
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	440a      	add	r2, r1
 800d83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d83e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d842:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	015a      	lsls	r2, r3, #5
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4413      	add	r3, r2
 800d84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	0151      	lsls	r1, r2, #5
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	440a      	add	r2, r1
 800d85a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d85e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d862:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f003 030f 	and.w	r3, r3, #15
 800d874:	2101      	movs	r1, #1
 800d876:	fa01 f303 	lsl.w	r3, r1, r3
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	43db      	mvns	r3, r3
 800d87e:	68f9      	ldr	r1, [r7, #12]
 800d880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d884:	4013      	ands	r3, r2
 800d886:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88e:	69da      	ldr	r2, [r3, #28]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	f003 030f 	and.w	r3, r3, #15
 800d898:	2101      	movs	r1, #1
 800d89a:	fa01 f303 	lsl.w	r3, r1, r3
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	43db      	mvns	r3, r3
 800d8a2:	68f9      	ldr	r1, [r7, #12]
 800d8a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	015a      	lsls	r2, r3, #5
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	0159      	lsls	r1, r3, #5
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	440b      	add	r3, r1
 800d8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	4b35      	ldr	r3, [pc, #212]	; (800d9a0 <USB_DeactivateEndpoint+0x1b0>)
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	600b      	str	r3, [r1, #0]
 800d8ce:	e060      	b.n	800d992 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	015a      	lsls	r2, r3, #5
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8e6:	d11f      	bne.n	800d928 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	015a      	lsls	r2, r3, #5
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	0151      	lsls	r1, r2, #5
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	440a      	add	r2, r1
 800d8fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d906:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	015a      	lsls	r2, r3, #5
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	4413      	add	r3, r2
 800d910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	0151      	lsls	r1, r2, #5
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	440a      	add	r2, r1
 800d91e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	f003 030f 	and.w	r3, r3, #15
 800d938:	2101      	movs	r1, #1
 800d93a:	fa01 f303 	lsl.w	r3, r1, r3
 800d93e:	041b      	lsls	r3, r3, #16
 800d940:	43db      	mvns	r3, r3
 800d942:	68f9      	ldr	r1, [r7, #12]
 800d944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d948:	4013      	ands	r3, r2
 800d94a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d952:	69da      	ldr	r2, [r3, #28]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f003 030f 	and.w	r3, r3, #15
 800d95c:	2101      	movs	r1, #1
 800d95e:	fa01 f303 	lsl.w	r3, r1, r3
 800d962:	041b      	lsls	r3, r3, #16
 800d964:	43db      	mvns	r3, r3
 800d966:	68f9      	ldr	r1, [r7, #12]
 800d968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d96c:	4013      	ands	r3, r2
 800d96e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	0159      	lsls	r1, r3, #5
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	440b      	add	r3, r1
 800d986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d98a:	4619      	mov	r1, r3
 800d98c:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <USB_DeactivateEndpoint+0x1b4>)
 800d98e:	4013      	ands	r3, r2
 800d990:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	ec337800 	.word	0xec337800
 800d9a4:	eff37800 	.word	0xeff37800

0800d9a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	; 0x28
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	785b      	ldrb	r3, [r3, #1]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	f040 815c 	bne.w	800dc82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	699b      	ldr	r3, [r3, #24]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d132      	bne.n	800da38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	015a      	lsls	r2, r3, #5
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	69ba      	ldr	r2, [r7, #24]
 800d9e2:	0151      	lsls	r1, r2, #5
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	440a      	add	r2, r1
 800d9e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d9f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	015a      	lsls	r2, r3, #5
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	0151      	lsls	r1, r2, #5
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	440a      	add	r2, r1
 800da0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	015a      	lsls	r2, r3, #5
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	4413      	add	r3, r2
 800da1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	69ba      	ldr	r2, [r7, #24]
 800da26:	0151      	lsls	r1, r2, #5
 800da28:	69fa      	ldr	r2, [r7, #28]
 800da2a:	440a      	add	r2, r1
 800da2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da30:	0cdb      	lsrs	r3, r3, #19
 800da32:	04db      	lsls	r3, r3, #19
 800da34:	6113      	str	r3, [r2, #16]
 800da36:	e074      	b.n	800db22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	015a      	lsls	r2, r3, #5
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	4413      	add	r3, r2
 800da40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	0151      	lsls	r1, r2, #5
 800da4a:	69fa      	ldr	r2, [r7, #28]
 800da4c:	440a      	add	r2, r1
 800da4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da52:	0cdb      	lsrs	r3, r3, #19
 800da54:	04db      	lsls	r3, r3, #19
 800da56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	0151      	lsls	r1, r2, #5
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	440a      	add	r2, r1
 800da6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	015a      	lsls	r2, r3, #5
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	4413      	add	r3, r2
 800da84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	6999      	ldr	r1, [r3, #24]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	440b      	add	r3, r1
 800da94:	1e59      	subs	r1, r3, #1
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	fbb1 f3f3 	udiv	r3, r1, r3
 800da9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800daa0:	4b9d      	ldr	r3, [pc, #628]	; (800dd18 <USB_EPStartXfer+0x370>)
 800daa2:	400b      	ands	r3, r1
 800daa4:	69b9      	ldr	r1, [r7, #24]
 800daa6:	0148      	lsls	r0, r1, #5
 800daa8:	69f9      	ldr	r1, [r7, #28]
 800daaa:	4401      	add	r1, r0
 800daac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dab0:	4313      	orrs	r3, r2
 800dab2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	015a      	lsls	r2, r3, #5
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	4413      	add	r3, r2
 800dabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac0:	691a      	ldr	r2, [r3, #16]
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	699b      	ldr	r3, [r3, #24]
 800dac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800daca:	69b9      	ldr	r1, [r7, #24]
 800dacc:	0148      	lsls	r0, r1, #5
 800dace:	69f9      	ldr	r1, [r7, #28]
 800dad0:	4401      	add	r1, r0
 800dad2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dad6:	4313      	orrs	r3, r2
 800dad8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	791b      	ldrb	r3, [r3, #4]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d11f      	bne.n	800db22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	015a      	lsls	r2, r3, #5
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	4413      	add	r3, r2
 800daea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	69ba      	ldr	r2, [r7, #24]
 800daf2:	0151      	lsls	r1, r2, #5
 800daf4:	69fa      	ldr	r2, [r7, #28]
 800daf6:	440a      	add	r2, r1
 800daf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dafc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800db00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	015a      	lsls	r2, r3, #5
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	4413      	add	r3, r2
 800db0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	0151      	lsls	r1, r2, #5
 800db14:	69fa      	ldr	r2, [r7, #28]
 800db16:	440a      	add	r2, r1
 800db18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800db22:	79fb      	ldrb	r3, [r7, #7]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d14b      	bne.n	800dbc0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	695b      	ldr	r3, [r3, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d009      	beq.n	800db44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	015a      	lsls	r2, r3, #5
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	4413      	add	r3, r2
 800db38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db3c:	461a      	mov	r2, r3
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	791b      	ldrb	r3, [r3, #4]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d128      	bne.n	800db9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d110      	bne.n	800db7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	69ba      	ldr	r2, [r7, #24]
 800db6c:	0151      	lsls	r1, r2, #5
 800db6e:	69fa      	ldr	r2, [r7, #28]
 800db70:	440a      	add	r2, r1
 800db72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db7a:	6013      	str	r3, [r2, #0]
 800db7c:	e00f      	b.n	800db9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	015a      	lsls	r2, r3, #5
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	4413      	add	r3, r2
 800db86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	0151      	lsls	r1, r2, #5
 800db90:	69fa      	ldr	r2, [r7, #28]
 800db92:	440a      	add	r2, r1
 800db94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	015a      	lsls	r2, r3, #5
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	4413      	add	r3, r2
 800dba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	69ba      	ldr	r2, [r7, #24]
 800dbae:	0151      	lsls	r1, r2, #5
 800dbb0:	69fa      	ldr	r2, [r7, #28]
 800dbb2:	440a      	add	r2, r1
 800dbb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	e133      	b.n	800de28 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	015a      	lsls	r2, r3, #5
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	69ba      	ldr	r2, [r7, #24]
 800dbd0:	0151      	lsls	r1, r2, #5
 800dbd2:	69fa      	ldr	r2, [r7, #28]
 800dbd4:	440a      	add	r2, r1
 800dbd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	791b      	ldrb	r3, [r3, #4]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d015      	beq.n	800dc14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f000 811b 	beq.w	800de28 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	f003 030f 	and.w	r3, r3, #15
 800dc02:	2101      	movs	r1, #1
 800dc04:	fa01 f303 	lsl.w	r3, r1, r3
 800dc08:	69f9      	ldr	r1, [r7, #28]
 800dc0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	634b      	str	r3, [r1, #52]	; 0x34
 800dc12:	e109      	b.n	800de28 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d110      	bne.n	800dc46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	69ba      	ldr	r2, [r7, #24]
 800dc34:	0151      	lsls	r1, r2, #5
 800dc36:	69fa      	ldr	r2, [r7, #28]
 800dc38:	440a      	add	r2, r1
 800dc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	e00f      	b.n	800dc66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	0151      	lsls	r1, r2, #5
 800dc58:	69fa      	ldr	r2, [r7, #28]
 800dc5a:	440a      	add	r2, r1
 800dc5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6919      	ldr	r1, [r3, #16]
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	781a      	ldrb	r2, [r3, #0]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	b298      	uxth	r0, r3
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4603      	mov	r3, r0
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fade 	bl	800e23c <USB_WritePacket>
 800dc80:	e0d2      	b.n	800de28 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	015a      	lsls	r2, r3, #5
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	4413      	add	r3, r2
 800dc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	69ba      	ldr	r2, [r7, #24]
 800dc92:	0151      	lsls	r1, r2, #5
 800dc94:	69fa      	ldr	r2, [r7, #28]
 800dc96:	440a      	add	r2, r1
 800dc98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc9c:	0cdb      	lsrs	r3, r3, #19
 800dc9e:	04db      	lsls	r3, r3, #19
 800dca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	015a      	lsls	r2, r3, #5
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	4413      	add	r3, r2
 800dcaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	69ba      	ldr	r2, [r7, #24]
 800dcb2:	0151      	lsls	r1, r2, #5
 800dcb4:	69fa      	ldr	r2, [r7, #28]
 800dcb6:	440a      	add	r2, r1
 800dcb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d126      	bne.n	800dd1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	015a      	lsls	r2, r3, #5
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcda:	691a      	ldr	r2, [r3, #16]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dce4:	69b9      	ldr	r1, [r7, #24]
 800dce6:	0148      	lsls	r0, r1, #5
 800dce8:	69f9      	ldr	r1, [r7, #28]
 800dcea:	4401      	add	r1, r0
 800dcec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	015a      	lsls	r2, r3, #5
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	69ba      	ldr	r2, [r7, #24]
 800dd04:	0151      	lsls	r1, r2, #5
 800dd06:	69fa      	ldr	r2, [r7, #28]
 800dd08:	440a      	add	r2, r1
 800dd0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd12:	6113      	str	r3, [r2, #16]
 800dd14:	e03a      	b.n	800dd8c <USB_EPStartXfer+0x3e4>
 800dd16:	bf00      	nop
 800dd18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	699a      	ldr	r2, [r3, #24]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	4413      	add	r3, r2
 800dd26:	1e5a      	subs	r2, r3, #1
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	8afa      	ldrh	r2, [r7, #22]
 800dd38:	fb03 f202 	mul.w	r2, r3, r2
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	015a      	lsls	r2, r3, #5
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4c:	691a      	ldr	r2, [r3, #16]
 800dd4e:	8afb      	ldrh	r3, [r7, #22]
 800dd50:	04d9      	lsls	r1, r3, #19
 800dd52:	4b38      	ldr	r3, [pc, #224]	; (800de34 <USB_EPStartXfer+0x48c>)
 800dd54:	400b      	ands	r3, r1
 800dd56:	69b9      	ldr	r1, [r7, #24]
 800dd58:	0148      	lsls	r0, r1, #5
 800dd5a:	69f9      	ldr	r1, [r7, #28]
 800dd5c:	4401      	add	r1, r0
 800dd5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd62:	4313      	orrs	r3, r2
 800dd64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd72:	691a      	ldr	r2, [r3, #16]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	69db      	ldr	r3, [r3, #28]
 800dd78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd7c:	69b9      	ldr	r1, [r7, #24]
 800dd7e:	0148      	lsls	r0, r1, #5
 800dd80:	69f9      	ldr	r1, [r7, #28]
 800dd82:	4401      	add	r1, r0
 800dd84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d10d      	bne.n	800ddae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d009      	beq.n	800ddae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	6919      	ldr	r1, [r3, #16]
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	015a      	lsls	r2, r3, #5
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	4413      	add	r3, r2
 800dda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddaa:	460a      	mov	r2, r1
 800ddac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	791b      	ldrb	r3, [r3, #4]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d128      	bne.n	800de08 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d110      	bne.n	800dde8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	015a      	lsls	r2, r3, #5
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	4413      	add	r3, r2
 800ddce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	0151      	lsls	r1, r2, #5
 800ddd8:	69fa      	ldr	r2, [r7, #28]
 800ddda:	440a      	add	r2, r1
 800dddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dde0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dde4:	6013      	str	r3, [r2, #0]
 800dde6:	e00f      	b.n	800de08 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	015a      	lsls	r2, r3, #5
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	4413      	add	r3, r2
 800ddf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	69ba      	ldr	r2, [r7, #24]
 800ddf8:	0151      	lsls	r1, r2, #5
 800ddfa:	69fa      	ldr	r2, [r7, #28]
 800ddfc:	440a      	add	r2, r1
 800ddfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	015a      	lsls	r2, r3, #5
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	4413      	add	r3, r2
 800de10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	69ba      	ldr	r2, [r7, #24]
 800de18:	0151      	lsls	r1, r2, #5
 800de1a:	69fa      	ldr	r2, [r7, #28]
 800de1c:	440a      	add	r2, r1
 800de1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3720      	adds	r7, #32
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	1ff80000 	.word	0x1ff80000

0800de38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800de38:	b480      	push	{r7}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	2b01      	cmp	r3, #1
 800de56:	f040 80ce 	bne.w	800dff6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d132      	bne.n	800dec8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	0151      	lsls	r1, r2, #5
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	440a      	add	r2, r1
 800de78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	015a      	lsls	r2, r3, #5
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	4413      	add	r3, r2
 800de8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	0151      	lsls	r1, r2, #5
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	440a      	add	r2, r1
 800de9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	015a      	lsls	r2, r3, #5
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	4413      	add	r3, r2
 800deae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	693a      	ldr	r2, [r7, #16]
 800deb6:	0151      	lsls	r1, r2, #5
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	440a      	add	r2, r1
 800debc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dec0:	0cdb      	lsrs	r3, r3, #19
 800dec2:	04db      	lsls	r3, r3, #19
 800dec4:	6113      	str	r3, [r2, #16]
 800dec6:	e04e      	b.n	800df66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	015a      	lsls	r2, r3, #5
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	4413      	add	r3, r2
 800ded0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	0151      	lsls	r1, r2, #5
 800deda:	697a      	ldr	r2, [r7, #20]
 800dedc:	440a      	add	r2, r1
 800dede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dee2:	0cdb      	lsrs	r3, r3, #19
 800dee4:	04db      	lsls	r3, r3, #19
 800dee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	015a      	lsls	r2, r3, #5
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	4413      	add	r3, r2
 800def0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	0151      	lsls	r1, r2, #5
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	440a      	add	r2, r1
 800defe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	699a      	ldr	r2, [r3, #24]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	429a      	cmp	r2, r3
 800df16:	d903      	bls.n	800df20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	68da      	ldr	r2, [r3, #12]
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	015a      	lsls	r2, r3, #5
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	4413      	add	r3, r2
 800df28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	0151      	lsls	r1, r2, #5
 800df32:	697a      	ldr	r2, [r7, #20]
 800df34:	440a      	add	r2, r1
 800df36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	4413      	add	r3, r2
 800df48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df4c:	691a      	ldr	r2, [r3, #16]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df56:	6939      	ldr	r1, [r7, #16]
 800df58:	0148      	lsls	r0, r1, #5
 800df5a:	6979      	ldr	r1, [r7, #20]
 800df5c:	4401      	add	r1, r0
 800df5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800df62:	4313      	orrs	r3, r2
 800df64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800df66:	79fb      	ldrb	r3, [r7, #7]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d11e      	bne.n	800dfaa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	695b      	ldr	r3, [r3, #20]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d009      	beq.n	800df88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df80:	461a      	mov	r2, r3
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	695b      	ldr	r3, [r3, #20]
 800df86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	0151      	lsls	r1, r2, #5
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	440a      	add	r2, r1
 800df9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	e097      	b.n	800e0da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	015a      	lsls	r2, r3, #5
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	0151      	lsls	r1, r2, #5
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	440a      	add	r2, r1
 800dfc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	699b      	ldr	r3, [r3, #24]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 8083 	beq.w	800e0da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	f003 030f 	and.w	r3, r3, #15
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800dfea:	6979      	ldr	r1, [r7, #20]
 800dfec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dff0:	4313      	orrs	r3, r2
 800dff2:	634b      	str	r3, [r1, #52]	; 0x34
 800dff4:	e071      	b.n	800e0da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	015a      	lsls	r2, r3, #5
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	4413      	add	r3, r2
 800dffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	693a      	ldr	r2, [r7, #16]
 800e006:	0151      	lsls	r1, r2, #5
 800e008:	697a      	ldr	r2, [r7, #20]
 800e00a:	440a      	add	r2, r1
 800e00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e010:	0cdb      	lsrs	r3, r3, #19
 800e012:	04db      	lsls	r3, r3, #19
 800e014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	693a      	ldr	r2, [r7, #16]
 800e026:	0151      	lsls	r1, r2, #5
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	440a      	add	r2, r1
 800e02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e038:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	68da      	ldr	r2, [r3, #12]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	68da      	ldr	r2, [r3, #12]
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	015a      	lsls	r2, r3, #5
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	4413      	add	r3, r2
 800e05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	0151      	lsls	r1, r2, #5
 800e064:	697a      	ldr	r2, [r7, #20]
 800e066:	440a      	add	r2, r1
 800e068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e06c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e07e:	691a      	ldr	r2, [r3, #16]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e088:	6939      	ldr	r1, [r7, #16]
 800e08a:	0148      	lsls	r0, r1, #5
 800e08c:	6979      	ldr	r1, [r7, #20]
 800e08e:	4401      	add	r1, r0
 800e090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e094:	4313      	orrs	r3, r2
 800e096:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d10d      	bne.n	800e0ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d009      	beq.n	800e0ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	6919      	ldr	r1, [r3, #16]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b6:	460a      	mov	r2, r1
 800e0b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	693a      	ldr	r2, [r7, #16]
 800e0ca:	0151      	lsls	r1, r2, #5
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	440a      	add	r2, r1
 800e0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	785b      	ldrb	r3, [r3, #1]
 800e102:	2b01      	cmp	r3, #1
 800e104:	d14a      	bne.n	800e19c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e11a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e11e:	f040 8086 	bne.w	800e22e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	7812      	ldrb	r2, [r2, #0]
 800e136:	0151      	lsls	r1, r2, #5
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	440a      	add	r2, r1
 800e13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e140:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e144:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	015a      	lsls	r2, r3, #5
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	4413      	add	r3, r2
 800e150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	7812      	ldrb	r2, [r2, #0]
 800e15a:	0151      	lsls	r1, r2, #5
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	440a      	add	r2, r1
 800e160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e168:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	3301      	adds	r3, #1
 800e16e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f242 7210 	movw	r2, #10000	; 0x2710
 800e176:	4293      	cmp	r3, r2
 800e178:	d902      	bls.n	800e180 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	75fb      	strb	r3, [r7, #23]
          break;
 800e17e:	e056      	b.n	800e22e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	015a      	lsls	r2, r3, #5
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	4413      	add	r3, r2
 800e18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e198:	d0e7      	beq.n	800e16a <USB_EPStopXfer+0x82>
 800e19a:	e048      	b.n	800e22e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	015a      	lsls	r2, r3, #5
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1b4:	d13b      	bne.n	800e22e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	7812      	ldrb	r2, [r2, #0]
 800e1ca:	0151      	lsls	r1, r2, #5
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	440a      	add	r2, r1
 800e1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e1d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	7812      	ldrb	r2, [r2, #0]
 800e1ee:	0151      	lsls	r1, r2, #5
 800e1f0:	693a      	ldr	r2, [r7, #16]
 800e1f2:	440a      	add	r2, r1
 800e1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3301      	adds	r3, #1
 800e202:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f242 7210 	movw	r2, #10000	; 0x2710
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d902      	bls.n	800e214 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	75fb      	strb	r3, [r7, #23]
          break;
 800e212:	e00c      	b.n	800e22e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e22c:	d0e7      	beq.n	800e1fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e230:	4618      	mov	r0, r3
 800e232:	371c      	adds	r7, #28
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b089      	sub	sp, #36	; 0x24
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	4611      	mov	r1, r2
 800e248:	461a      	mov	r2, r3
 800e24a:	460b      	mov	r3, r1
 800e24c:	71fb      	strb	r3, [r7, #7]
 800e24e:	4613      	mov	r3, r2
 800e250:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e25a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d123      	bne.n	800e2aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e262:	88bb      	ldrh	r3, [r7, #4]
 800e264:	3303      	adds	r3, #3
 800e266:	089b      	lsrs	r3, r3, #2
 800e268:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e26a:	2300      	movs	r3, #0
 800e26c:	61bb      	str	r3, [r7, #24]
 800e26e:	e018      	b.n	800e2a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	031a      	lsls	r2, r3, #12
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	4413      	add	r3, r2
 800e278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27c:	461a      	mov	r2, r3
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	3301      	adds	r3, #1
 800e288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	3301      	adds	r3, #1
 800e28e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	3301      	adds	r3, #1
 800e294:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	3301      	adds	r3, #1
 800e29a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	61bb      	str	r3, [r7, #24]
 800e2a2:	69ba      	ldr	r2, [r7, #24]
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d3e2      	bcc.n	800e270 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3724      	adds	r7, #36	; 0x24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b08b      	sub	sp, #44	; 0x2c
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e2ce:	88fb      	ldrh	r3, [r7, #6]
 800e2d0:	089b      	lsrs	r3, r3, #2
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e2d6:	88fb      	ldrh	r3, [r7, #6]
 800e2d8:	f003 0303 	and.w	r3, r3, #3
 800e2dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e2de:	2300      	movs	r3, #0
 800e2e0:	623b      	str	r3, [r7, #32]
 800e2e2:	e014      	b.n	800e30e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	3301      	adds	r3, #1
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	3301      	adds	r3, #1
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	3301      	adds	r3, #1
 800e30c:	623b      	str	r3, [r7, #32]
 800e30e:	6a3a      	ldr	r2, [r7, #32]
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	429a      	cmp	r2, r3
 800e314:	d3e6      	bcc.n	800e2e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e316:	8bfb      	ldrh	r3, [r7, #30]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01e      	beq.n	800e35a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e31c:	2300      	movs	r3, #0
 800e31e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e326:	461a      	mov	r2, r3
 800e328:	f107 0310 	add.w	r3, r7, #16
 800e32c:	6812      	ldr	r2, [r2, #0]
 800e32e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	00db      	lsls	r3, r3, #3
 800e338:	fa22 f303 	lsr.w	r3, r2, r3
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e340:	701a      	strb	r2, [r3, #0]
      i++;
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	3301      	adds	r3, #1
 800e346:	623b      	str	r3, [r7, #32]
      pDest++;
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	3301      	adds	r3, #1
 800e34c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e34e:	8bfb      	ldrh	r3, [r7, #30]
 800e350:	3b01      	subs	r3, #1
 800e352:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e354:	8bfb      	ldrh	r3, [r7, #30]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1ea      	bne.n	800e330 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	372c      	adds	r7, #44	; 0x2c
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	785b      	ldrb	r3, [r3, #1]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d12c      	bne.n	800e3de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	db12      	blt.n	800e3bc <USB_EPSetStall+0x54>
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00f      	beq.n	800e3bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	015a      	lsls	r2, r3, #5
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	0151      	lsls	r1, r2, #5
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	440a      	add	r2, r1
 800e3b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e3ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	015a      	lsls	r2, r3, #5
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	0151      	lsls	r1, r2, #5
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	440a      	add	r2, r1
 800e3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	e02b      	b.n	800e436 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	015a      	lsls	r2, r3, #5
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	db12      	blt.n	800e416 <USB_EPSetStall+0xae>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00f      	beq.n	800e416 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	015a      	lsls	r2, r3, #5
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	0151      	lsls	r1, r2, #5
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	440a      	add	r2, r1
 800e40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e414:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	015a      	lsls	r2, r3, #5
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	4413      	add	r3, r2
 800e41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	0151      	lsls	r1, r2, #5
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	440a      	add	r2, r1
 800e42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	785b      	ldrb	r3, [r3, #1]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d128      	bne.n	800e4b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	015a      	lsls	r2, r3, #5
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	4413      	add	r3, r2
 800e468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	0151      	lsls	r1, r2, #5
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	440a      	add	r2, r1
 800e476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e47a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e47e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	791b      	ldrb	r3, [r3, #4]
 800e484:	2b03      	cmp	r3, #3
 800e486:	d003      	beq.n	800e490 <USB_EPClearStall+0x4c>
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	791b      	ldrb	r3, [r3, #4]
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d138      	bne.n	800e502 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4413      	add	r3, r2
 800e498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	0151      	lsls	r1, r2, #5
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	440a      	add	r2, r1
 800e4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	e027      	b.n	800e502 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	015a      	lsls	r2, r3, #5
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	0151      	lsls	r1, r2, #5
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	440a      	add	r2, r1
 800e4c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e4d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	791b      	ldrb	r3, [r3, #4]
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d003      	beq.n	800e4e2 <USB_EPClearStall+0x9e>
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	791b      	ldrb	r3, [r3, #4]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d10f      	bne.n	800e502 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	015a      	lsls	r2, r3, #5
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	0151      	lsls	r1, r2, #5
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	440a      	add	r2, r1
 800e4f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e500:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800e51c:	2300      	movs	r3, #0
 800e51e:	617b      	str	r3, [r7, #20]
 800e520:	e016      	b.n	800e550 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e52e:	461a      	mov	r2, r3
 800e530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e534:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	015a      	lsls	r2, r3, #5
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	4413      	add	r3, r2
 800e53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e542:	461a      	mov	r2, r3
 800e544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e548:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	3301      	adds	r3, #1
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2b0e      	cmp	r3, #14
 800e554:	d9e5      	bls.n	800e522 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e55c:	461a      	mov	r2, r3
 800e55e:	2300      	movs	r3, #0
 800e560:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e568:	461a      	mov	r2, r3
 800e56a:	2300      	movs	r3, #0
 800e56c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e574:	461a      	mov	r2, r3
 800e576:	2300      	movs	r3, #0
 800e578:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7ff f842 	bl	800d604 <USB_FlushRxFifo>
 800e580:	4603      	mov	r3, r0
 800e582:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e584:	7bfb      	ldrb	r3, [r7, #15]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <USB_StopDevice+0x7e>
  {
    return ret;
 800e58a:	7bfb      	ldrb	r3, [r7, #15]
 800e58c:	e00b      	b.n	800e5a6 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800e58e:	2110      	movs	r1, #16
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff f803 	bl	800d59c <USB_FlushTxFifo>
 800e596:	4603      	mov	r3, r0
 800e598:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e59a:	7bfb      	ldrb	r3, [r7, #15]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <USB_StopDevice+0x94>
  {
    return ret;
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	e000      	b.n	800e5a6 <USB_StopDevice+0x96>
  }

  return ret;
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3718      	adds	r7, #24
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68fa      	ldr	r2, [r7, #12]
 800e5c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e5d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	78fb      	ldrb	r3, [r7, #3]
 800e5dc:	011b      	lsls	r3, r3, #4
 800e5de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e5e2:	68f9      	ldr	r1, [r7, #12]
 800e5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b085      	sub	sp, #20
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e614:	f023 0303 	bic.w	r3, r3, #3
 800e618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e628:	f023 0302 	bic.w	r3, r3, #2
 800e62c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	68fa      	ldr	r2, [r7, #12]
 800e652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e656:	f023 0303 	bic.w	r3, r3, #3
 800e65a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e66a:	f043 0302 	orr.w	r3, r3, #2
 800e66e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e67e:	b480      	push	{r7}
 800e680:	b085      	sub	sp, #20
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	695b      	ldr	r3, [r3, #20]
 800e68a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	4013      	ands	r3, r2
 800e694:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e696:	68fb      	ldr	r3, [r7, #12]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3714      	adds	r7, #20
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6b6:	699b      	ldr	r3, [r3, #24]
 800e6b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c0:	69db      	ldr	r3, [r3, #28]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	0c1b      	lsrs	r3, r3, #16
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	b29b      	uxth	r3, r3
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	015a      	lsls	r2, r3, #5
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	4413      	add	r3, r2
 800e724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e732:	695b      	ldr	r3, [r3, #20]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	4013      	ands	r3, r2
 800e738:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e73a:	68bb      	ldr	r3, [r7, #8]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e748:	b480      	push	{r7}
 800e74a:	b087      	sub	sp, #28
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	460b      	mov	r3, r1
 800e752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e76c:	78fb      	ldrb	r3, [r7, #3]
 800e76e:	f003 030f 	and.w	r3, r3, #15
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	fa22 f303 	lsr.w	r3, r2, r3
 800e778:	01db      	lsls	r3, r3, #7
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	693a      	ldr	r2, [r7, #16]
 800e77e:	4313      	orrs	r3, r2
 800e780:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e782:	78fb      	ldrb	r3, [r7, #3]
 800e784:	015a      	lsls	r2, r3, #5
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	4413      	add	r3, r2
 800e78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	693a      	ldr	r2, [r7, #16]
 800e792:	4013      	ands	r3, r2
 800e794:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e796:	68bb      	ldr	r3, [r7, #8]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	371c      	adds	r7, #28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	f003 0301 	and.w	r3, r3, #1
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e7de:	f023 0307 	bic.w	r3, r3, #7
 800e7e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr
	...

0800e808 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e808:	b480      	push	{r7}
 800e80a:	b087      	sub	sp, #28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	460b      	mov	r3, r1
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	333c      	adds	r3, #60	; 0x3c
 800e81e:	3304      	adds	r3, #4
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	4a26      	ldr	r2, [pc, #152]	; (800e8c0 <USB_EP0_OutStart+0xb8>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d90a      	bls.n	800e842 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e83c:	d101      	bne.n	800e842 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	e037      	b.n	800e8b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e848:	461a      	mov	r2, r3
 800e84a:	2300      	movs	r3, #0
 800e84c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e85c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e868:	691b      	ldr	r3, [r3, #16]
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e870:	f043 0318 	orr.w	r3, r3, #24
 800e874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e884:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e888:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e88a:	7afb      	ldrb	r3, [r7, #11]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d10f      	bne.n	800e8b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e896:	461a      	mov	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e8ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	371c      	adds	r7, #28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	4f54300a 	.word	0x4f54300a

0800e8c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	4a13      	ldr	r2, [pc, #76]	; (800e928 <USB_CoreReset+0x64>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d901      	bls.n	800e8e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	e01b      	b.n	800e91a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	691b      	ldr	r3, [r3, #16]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	daf2      	bge.n	800e8d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	f043 0201 	orr.w	r2, r3, #1
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4a09      	ldr	r2, [pc, #36]	; (800e928 <USB_CoreReset+0x64>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d901      	bls.n	800e90c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e908:	2303      	movs	r3, #3
 800e90a:	e006      	b.n	800e91a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	2b01      	cmp	r3, #1
 800e916:	d0f0      	beq.n	800e8fa <USB_CoreReset+0x36>

  return HAL_OK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3714      	adds	r7, #20
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	00030d40 	.word	0x00030d40

0800e92c <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time =0;
uint8_t invoke_date =0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a13      	ldr	r2, [pc, #76]	; (800e984 <HAL_UART_RxCpltCallback+0x58>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d11f      	bne.n	800e97c <HAL_UART_RxCpltCallback+0x50>
 800e93c:	4b12      	ldr	r3, [pc, #72]	; (800e988 <HAL_UART_RxCpltCallback+0x5c>)
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d01b      	beq.n	800e97c <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800e944:	2201      	movs	r2, #1
 800e946:	4911      	ldr	r1, [pc, #68]	; (800e98c <HAL_UART_RxCpltCallback+0x60>)
 800e948:	480e      	ldr	r0, [pc, #56]	; (800e984 <HAL_UART_RxCpltCallback+0x58>)
 800e94a:	f7fc fe37 	bl	800b5bc <HAL_UART_Receive_IT>
				UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800e94e:	4b10      	ldr	r3, [pc, #64]	; (800e990 <HAL_UART_RxCpltCallback+0x64>)
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10a      	bne.n	800e96c <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800e956:	4b0d      	ldr	r3, [pc, #52]	; (800e98c <HAL_UART_RxCpltCallback+0x60>)
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800e95c:	4b0d      	ldr	r3, [pc, #52]	; (800e994 <HAL_UART_RxCpltCallback+0x68>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	7bfa      	ldrb	r2, [r7, #15]
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f001 ff19 	bl	801079c <embeddedCliReceiveChar>
 800e96a:	e002      	b.n	800e972 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800e96c:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <HAL_UART_RxCpltCallback+0x6c>)
 800e96e:	2201      	movs	r2, #1
 800e970:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800e972:	f7f4 fed9 	bl	8003728 <HAL_GetTick>
 800e976:	4603      	mov	r3, r0
 800e978:	4a08      	ldr	r2, [pc, #32]	; (800e99c <HAL_UART_RxCpltCallback+0x70>)
 800e97a:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800e97c:	bf00      	nop
 800e97e:	3710      	adds	r7, #16
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	2000199c 	.word	0x2000199c
 800e988:	20001a59 	.word	0x20001a59
 800e98c:	20001a58 	.word	0x20001a58
 800e990:	20001a5a 	.word	0x20001a5a
 800e994:	20001a4c 	.word	0x20001a4c
 800e998:	20001a5b 	.word	0x20001a5b
 800e99c:	200016f4 	.word	0x200016f4

0800e9a0 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800e9ac:	78fb      	ldrb	r3, [r7, #3]
 800e9ae:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800e9b0:	f107 010f 	add.w	r1, r7, #15
 800e9b4:	2364      	movs	r3, #100	; 0x64
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	4803      	ldr	r0, [pc, #12]	; (800e9c8 <writeCharToCli+0x28>)
 800e9ba:	f7fc fd6d 	bl	800b498 <HAL_UART_Transmit>
}
 800e9be:	bf00      	nop
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	2000199c 	.word	0x2000199c

0800e9cc <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800e9cc:	b40e      	push	{r1, r2, r3}
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e9da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800e9de:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800e9e0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800e9e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e9e8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e9ec:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800e9ee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e9f2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e9f6:	f107 000c 	add.w	r0, r7, #12
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800ea00:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea04:	f00e fb46 	bl	801d094 <vsniprintf>
 800ea08:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800ea0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da08      	bge.n	800ea26 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800ea14:	4b0c      	ldr	r3, [pc, #48]	; (800ea48 <cli_printf+0x7c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	221d      	movs	r2, #29
 800ea1c:	2101      	movs	r1, #1
 800ea1e:	480b      	ldr	r0, [pc, #44]	; (800ea4c <cli_printf+0x80>)
 800ea20:	f00c fb42 	bl	801b0a8 <fwrite>
 800ea24:	e009      	b.n	800ea3a <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800ea26:	f107 020c 	add.w	r2, r7, #12
 800ea2a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ea2e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ea32:	4611      	mov	r1, r2
 800ea34:	6818      	ldr	r0, [r3, #0]
 800ea36:	f001 ff97 	bl	8010968 <embeddedCliPrint>
}
 800ea3a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ea44:	b003      	add	sp, #12
 800ea46:	4770      	bx	lr
 800ea48:	20000140 	.word	0x20000140
 800ea4c:	08020214 	.word	0x08020214

0800ea50 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b088      	sub	sp, #32
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	61fb      	str	r3, [r7, #28]
	   int i, j;
	prev_max_wait_time = HAL_GetTick();
 800ea60:	f7f4 fe62 	bl	8003728 <HAL_GetTick>
 800ea64:	4603      	mov	r3, r0
 800ea66:	4a5b      	ldr	r2, [pc, #364]	; (800ebd4 <receiveString+0x184>)
 800ea68:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800ea6a:	4b5b      	ldr	r3, [pc, #364]	; (800ebd8 <receiveString+0x188>)
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f000 80a0 	beq.w	800ebb4 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800ea74:	4b59      	ldr	r3, [pc, #356]	; (800ebdc <receiveString+0x18c>)
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	2b0d      	cmp	r3, #13
 800ea7a:	d004      	beq.n	800ea86 <receiveString+0x36>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	69fa      	ldr	r2, [r7, #28]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d164      	bne.n	800eb50 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800ea86:	68ba      	ldr	r2, [r7, #8]
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800ea90:	4b51      	ldr	r3, [pc, #324]	; (800ebd8 <receiveString+0x188>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				  //Iterating each character and removing non alphabetical characters.
				    for( i = 0; buffer[i] != '\0'; ++i)
 800ea96:	2300      	movs	r3, #0
 800ea98:	61bb      	str	r3, [r7, #24]
 800ea9a:	e052      	b.n	800eb42 <receiveString+0xf2>
								|| buffer[i] == '_'
								|| buffer[i] == ':'
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
								|| buffer[i] == '\0') )
				        {
				            for( j = i; buffer[j] != '\0'; ++j)
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	617b      	str	r3, [r7, #20]
 800eaa0:	e00b      	b.n	800eaba <receiveString+0x6a>
				            {
				            	buffer[j] = buffer[j+1];
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	441a      	add	r2, r3
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	68b9      	ldr	r1, [r7, #8]
 800eaae:	440b      	add	r3, r1
 800eab0:	7812      	ldrb	r2, [r2, #0]
 800eab2:	701a      	strb	r2, [r3, #0]
				            for( j = i; buffer[j] != '\0'; ++j)
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	3301      	adds	r3, #1
 800eab8:	617b      	str	r3, [r7, #20]
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	4413      	add	r3, r2
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1ed      	bne.n	800eaa2 <receiveString+0x52>
				            }
				            buffer[j] = '\0';
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	4413      	add	r3, r2
 800eacc:	2200      	movs	r2, #0
 800eace:	701a      	strb	r2, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	4413      	add	r3, r2
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	2b60      	cmp	r3, #96	; 0x60
 800eada:	d905      	bls.n	800eae8 <receiveString+0x98>
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b7a      	cmp	r3, #122	; 0x7a
 800eae6:	d929      	bls.n	800eb3c <receiveString+0xec>
				        		|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	4413      	add	r3, r2
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b40      	cmp	r3, #64	; 0x40
 800eaf2:	d905      	bls.n	800eb00 <receiveString+0xb0>
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	4413      	add	r3, r2
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2b5a      	cmp	r3, #90	; 0x5a
 800eafe:	d91d      	bls.n	800eb3c <receiveString+0xec>
								|| buffer[i] == '_'
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	4413      	add	r3, r2
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b5f      	cmp	r3, #95	; 0x5f
 800eb0a:	d017      	beq.n	800eb3c <receiveString+0xec>
								|| buffer[i] == ':'
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	4413      	add	r3, r2
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b3a      	cmp	r3, #58	; 0x3a
 800eb16:	d011      	beq.n	800eb3c <receiveString+0xec>
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	68ba      	ldr	r2, [r7, #8]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b2f      	cmp	r3, #47	; 0x2f
 800eb22:	d905      	bls.n	800eb30 <receiveString+0xe0>
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	4413      	add	r3, r2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	2b39      	cmp	r3, #57	; 0x39
 800eb2e:	d905      	bls.n	800eb3c <receiveString+0xec>
								|| buffer[i] == '\0') )
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	4413      	add	r3, r2
 800eb36:	781b      	ldrb	r3, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1af      	bne.n	800ea9c <receiveString+0x4c>
				    for( i = 0; buffer[i] != '\0'; ++i)
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	61bb      	str	r3, [r7, #24]
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	4413      	add	r3, r2
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1c0      	bne.n	800ead0 <receiveString+0x80>
				        }
				    }
				break;
 800eb4e:	e03d      	b.n	800ebcc <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b' || UART_CLI_rxBuffer[0] == 0x7F))
 800eb50:	4b22      	ldr	r3, [pc, #136]	; (800ebdc <receiveString+0x18c>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	2b08      	cmp	r3, #8
 800eb56:	d003      	beq.n	800eb60 <receiveString+0x110>
 800eb58:	4b20      	ldr	r3, [pc, #128]	; (800ebdc <receiveString+0x18c>)
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b7f      	cmp	r3, #127	; 0x7f
 800eb5e:	d117      	bne.n	800eb90 <receiveString+0x140>
				{
			        cli->writeChar(cli, '\b');
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2108      	movs	r1, #8
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	4798      	blx	r3
			        cli->writeChar(cli, ' ');
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2120      	movs	r1, #32
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	4798      	blx	r3
			        cli->writeChar(cli, '\b');
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2108      	movs	r1, #8
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	4798      	blx	r3
					--index;
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	61fb      	str	r3, [r7, #28]
				  	buffer[index] = '\0';
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	4413      	add	r3, r2
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]
 800eb8e:	e00e      	b.n	800ebae <receiveString+0x15e>
				}
				else
				{
				buffer[index++] = UART_CLI_rxBuffer[0];
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	61fa      	str	r2, [r7, #28]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	4413      	add	r3, r2
 800eb9a:	4a10      	ldr	r2, [pc, #64]	; (800ebdc <receiveString+0x18c>)
 800eb9c:	7812      	ldrb	r2, [r2, #0]
 800eb9e:	701a      	strb	r2, [r3, #0]
				cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a0d      	ldr	r2, [pc, #52]	; (800ebdc <receiveString+0x18c>)
 800eba6:	7812      	ldrb	r2, [r2, #0]
 800eba8:	4611      	mov	r1, r2
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800ebae:	4b0a      	ldr	r3, [pc, #40]	; (800ebd8 <receiveString+0x188>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - prev_max_wait_time > max_wait_time)
 800ebb4:	f7f4 fdb8 	bl	8003728 <HAL_GetTick>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	4b06      	ldr	r3, [pc, #24]	; (800ebd4 <receiveString+0x184>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	4b07      	ldr	r3, [pc, #28]	; (800ebe0 <receiveString+0x190>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d800      	bhi.n	800ebca <receiveString+0x17a>
		if (flag_cli) {
 800ebc8:	e74f      	b.n	800ea6a <receiveString+0x1a>
		{
          //we break the loop if time goes above 5min
			break;
 800ebca:	bf00      	nop
		}

	}
}
 800ebcc:	bf00      	nop
 800ebce:	3720      	adds	r7, #32
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20001a50 	.word	0x20001a50
 800ebd8:	20001a5b 	.word	0x20001a5b
 800ebdc:	20001a58 	.word	0x20001a58
 800ebe0:	20000018 	.word	0x20000018

0800ebe4 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800ebf0:	4903      	ldr	r1, [pc, #12]	; (800ec00 <onClearCLI+0x1c>)
 800ebf2:	68f8      	ldr	r0, [r7, #12]
 800ebf4:	f7ff feea 	bl	800e9cc <cli_printf>
}
 800ebf8:	bf00      	nop
 800ebfa:	3710      	adds	r7, #16
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	08020234 	.word	0x08020234

0800ec04 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b092      	sub	sp, #72	; 0x48
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800ec10:	4b24      	ldr	r3, [pc, #144]	; (800eca4 <debug_scd4x_PM25+0xa0>)
 800ec12:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to enable debug for scd4x and PM y/n?");
 800ec14:	4924      	ldr	r1, [pc, #144]	; (800eca8 <debug_scd4x_PM25+0xa4>)
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff fed8 	bl	800e9cc <cli_printf>

	cli_other = 1;
 800ec1c:	4b23      	ldr	r3, [pc, #140]	; (800ecac <debug_scd4x_PM25+0xa8>)
 800ec1e:	2201      	movs	r2, #1
 800ec20:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800ec22:	4b23      	ldr	r3, [pc, #140]	; (800ecb0 <debug_scd4x_PM25+0xac>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800ec28:	f107 0310 	add.w	r3, r7, #16
 800ec2c:	2232      	movs	r2, #50	; 0x32
 800ec2e:	4619      	mov	r1, r3
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f7ff ff0d 	bl	800ea50 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ec36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec38:	f7f1 fadc 	bl	80001f4 <strlen>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec46:	481b      	ldr	r0, [pc, #108]	; (800ecb4 <debug_scd4x_PM25+0xb0>)
 800ec48:	f7fc fc26 	bl	800b498 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800ec4c:	f107 0310 	add.w	r3, r7, #16
 800ec50:	2179      	movs	r1, #121	; 0x79
 800ec52:	4618      	mov	r0, r3
 800ec54:	f00d fab4 	bl	801c1c0 <strchr>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d007      	beq.n	800ec6e <debug_scd4x_PM25+0x6a>
		{
			debug_scd_pm=1;
 800ec5e:	4b16      	ldr	r3, [pc, #88]	; (800ecb8 <debug_scd4x_PM25+0xb4>)
 800ec60:	2201      	movs	r2, #1
 800ec62:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug enabled");
 800ec64:	4915      	ldr	r1, [pc, #84]	; (800ecbc <debug_scd4x_PM25+0xb8>)
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7ff feb0 	bl	800e9cc <cli_printf>
 800ec6c:	e00f      	b.n	800ec8e <debug_scd4x_PM25+0x8a>
		}
		else if(strstr(buffer, "n"))
 800ec6e:	f107 0310 	add.w	r3, r7, #16
 800ec72:	216e      	movs	r1, #110	; 0x6e
 800ec74:	4618      	mov	r0, r3
 800ec76:	f00d faa3 	bl	801c1c0 <strchr>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d006      	beq.n	800ec8e <debug_scd4x_PM25+0x8a>
		{
			debug_scd_pm=0;
 800ec80:	4b0d      	ldr	r3, [pc, #52]	; (800ecb8 <debug_scd4x_PM25+0xb4>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug disabled");
 800ec86:	490e      	ldr	r1, [pc, #56]	; (800ecc0 <debug_scd4x_PM25+0xbc>)
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7ff fe9f 	bl	800e9cc <cli_printf>
		}


		flag_cli = 0;
 800ec8e:	4b08      	ldr	r3, [pc, #32]	; (800ecb0 <debug_scd4x_PM25+0xac>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800ec94:	4b05      	ldr	r3, [pc, #20]	; (800ecac <debug_scd4x_PM25+0xa8>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	701a      	strb	r2, [r3, #0]
}
 800ec9a:	bf00      	nop
 800ec9c:	3748      	adds	r7, #72	; 0x48
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	0802023c 	.word	0x0802023c
 800eca8:	08020240 	.word	0x08020240
 800ecac:	20001a5a 	.word	0x20001a5a
 800ecb0:	20001a5b 	.word	0x20001a5b
 800ecb4:	2000199c 	.word	0x2000199c
 800ecb8:	200014ac 	.word	0x200014ac
 800ecbc:	08020274 	.word	0x08020274
 800ecc0:	08020284 	.word	0x08020284

0800ecc4 <DeviceSignature>:


void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli,"Device ID/Signature: TF241_%s.",	ver_GetUid());
 800ecd0:	f7f3 f90a 	bl	8001ee8 <ver_GetUid>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	4903      	ldr	r1, [pc, #12]	; (800ece8 <DeviceSignature+0x24>)
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f7ff fe76 	bl	800e9cc <cli_printf>
}
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	08020294 	.word	0x08020294

0800ecec <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b092      	sub	sp, #72	; 0x48
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ecf8:	4b2d      	ldr	r3, [pc, #180]	; (800edb0 <SetID+0xc4>)
 800ecfa:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ecfc:	492d      	ldr	r1, [pc, #180]	; (800edb4 <SetID+0xc8>)
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f7ff fe64 	bl	800e9cc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ed04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed06:	f7f1 fa75 	bl	80001f4 <strlen>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed14:	4828      	ldr	r0, [pc, #160]	; (800edb8 <SetID+0xcc>)
 800ed16:	f7fc fbbf 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"Set the ID. Keep ID below 30 characters");
 800ed1a:	4928      	ldr	r1, [pc, #160]	; (800edbc <SetID+0xd0>)
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f7ff fe55 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800ed22:	4b27      	ldr	r3, [pc, #156]	; (800edc0 <SetID+0xd4>)
 800ed24:	2201      	movs	r2, #1
 800ed26:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ed28:	4b26      	ldr	r3, [pc, #152]	; (800edc4 <SetID+0xd8>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ed2e:	f107 0310 	add.w	r3, r7, #16
 800ed32:	2232      	movs	r2, #50	; 0x32
 800ed34:	4619      	mov	r1, r3
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f7ff fe8a 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ed3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed3e:	f7f1 fa59 	bl	80001f4 <strlen>
 800ed42:	4603      	mov	r3, r0
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed4c:	481a      	ldr	r0, [pc, #104]	; (800edb8 <SetID+0xcc>)
 800ed4e:	f7fc fba3 	bl	800b498 <HAL_UART_Transmit>

	len = strlen(buffer);
 800ed52:	f107 0310 	add.w	r3, r7, #16
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7f1 fa4c 	bl	80001f4 <strlen>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 30)
 800ed62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed66:	2b1d      	cmp	r3, #29
 800ed68:	d814      	bhi.n	800ed94 <SetID+0xa8>
	{
	   if(buffer[0] != '\0' )
 800ed6a:	7c3b      	ldrb	r3, [r7, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d015      	beq.n	800ed9c <SetID+0xb0>
		{if(buffer != NULL)
		{
			strcpy(_Flash_Packet.id,buffer);
 800ed70:	f107 0310 	add.w	r3, r7, #16
 800ed74:	4619      	mov	r1, r3
 800ed76:	4814      	ldr	r0, [pc, #80]	; (800edc8 <SetID+0xdc>)
 800ed78:	f00d fa2f 	bl	801c1da <strcpy>
			set_param_flags();
 800ed7c:	4b13      	ldr	r3, [pc, #76]	; (800edcc <SetID+0xe0>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	701a      	strb	r2, [r3, #0]
 800ed82:	4b13      	ldr	r3, [pc, #76]	; (800edd0 <SetID+0xe4>)
 800ed84:	2201      	movs	r2, #1
 800ed86:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"ID is set to: %s",_Flash_Packet.id);
 800ed88:	4a0f      	ldr	r2, [pc, #60]	; (800edc8 <SetID+0xdc>)
 800ed8a:	4912      	ldr	r1, [pc, #72]	; (800edd4 <SetID+0xe8>)
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f7ff fe1d 	bl	800e9cc <cli_printf>
 800ed92:	e003      	b.n	800ed9c <SetID+0xb0>
		}
		}
	}
	else
	{
		cli_printf(cli,"ID is too long");
 800ed94:	4910      	ldr	r1, [pc, #64]	; (800edd8 <SetID+0xec>)
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff fe18 	bl	800e9cc <cli_printf>
	}

	flag_cli = 0;
 800ed9c:	4b09      	ldr	r3, [pc, #36]	; (800edc4 <SetID+0xd8>)
 800ed9e:	2200      	movs	r2, #0
 800eda0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800eda2:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <SetID+0xd4>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	701a      	strb	r2, [r3, #0]

}
 800eda8:	bf00      	nop
 800edaa:	3748      	adds	r7, #72	; 0x48
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	0802023c 	.word	0x0802023c
 800edb4:	080202b4 	.word	0x080202b4
 800edb8:	2000199c 	.word	0x2000199c
 800edbc:	080202ec 	.word	0x080202ec
 800edc0:	20001a5a 	.word	0x20001a5a
 800edc4:	20001a5b 	.word	0x20001a5b
 800edc8:	200013a5 	.word	0x200013a5
 800edcc:	200014ad 	.word	0x200014ad
 800edd0:	200014ae 	.word	0x200014ae
 800edd4:	08020314 	.word	0x08020314
 800edd8:	08020328 	.word	0x08020328

0800eddc <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800eddc:	b580      	push	{r7, lr}
 800edde:	b092      	sub	sp, #72	; 0x48
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ede8:	4b2d      	ldr	r3, [pc, #180]	; (800eea0 <SetLocation+0xc4>)
 800edea:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800edec:	492d      	ldr	r1, [pc, #180]	; (800eea4 <SetLocation+0xc8>)
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f7ff fdec 	bl	800e9cc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800edf4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800edf6:	f7f1 f9fd 	bl	80001f4 <strlen>
 800edfa:	4603      	mov	r3, r0
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee04:	4828      	ldr	r0, [pc, #160]	; (800eea8 <SetLocation+0xcc>)
 800ee06:	f7fc fb47 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"Set the Location. Keep Location below 15 characters");
 800ee0a:	4928      	ldr	r1, [pc, #160]	; (800eeac <SetLocation+0xd0>)
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f7ff fddd 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800ee12:	4b27      	ldr	r3, [pc, #156]	; (800eeb0 <SetLocation+0xd4>)
 800ee14:	2201      	movs	r2, #1
 800ee16:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ee18:	4b26      	ldr	r3, [pc, #152]	; (800eeb4 <SetLocation+0xd8>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ee1e:	f107 0310 	add.w	r3, r7, #16
 800ee22:	2232      	movs	r2, #50	; 0x32
 800ee24:	4619      	mov	r1, r3
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff fe12 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ee2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee2e:	f7f1 f9e1 	bl	80001f4 <strlen>
 800ee32:	4603      	mov	r3, r0
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3c:	481a      	ldr	r0, [pc, #104]	; (800eea8 <SetLocation+0xcc>)
 800ee3e:	f7fc fb2b 	bl	800b498 <HAL_UART_Transmit>

	len = strlen(buffer);
 800ee42:	f107 0310 	add.w	r3, r7, #16
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7f1 f9d4 	bl	80001f4 <strlen>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800ee52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee56:	2b0e      	cmp	r3, #14
 800ee58:	d814      	bhi.n	800ee84 <SetLocation+0xa8>
	{
		if(buffer[0] != '\0' )
 800ee5a:	7c3b      	ldrb	r3, [r7, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d015      	beq.n	800ee8c <SetLocation+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.location,buffer);
 800ee60:	f107 0310 	add.w	r3, r7, #16
 800ee64:	4619      	mov	r1, r3
 800ee66:	4814      	ldr	r0, [pc, #80]	; (800eeb8 <SetLocation+0xdc>)
 800ee68:	f00d f9b7 	bl	801c1da <strcpy>
			set_param_flags();
 800ee6c:	4b13      	ldr	r3, [pc, #76]	; (800eebc <SetLocation+0xe0>)
 800ee6e:	2201      	movs	r2, #1
 800ee70:	701a      	strb	r2, [r3, #0]
 800ee72:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <SetLocation+0xe4>)
 800ee74:	2201      	movs	r2, #1
 800ee76:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Location is set to: %s",_Flash_Packet.location);
 800ee78:	4a0f      	ldr	r2, [pc, #60]	; (800eeb8 <SetLocation+0xdc>)
 800ee7a:	4912      	ldr	r1, [pc, #72]	; (800eec4 <SetLocation+0xe8>)
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f7ff fda5 	bl	800e9cc <cli_printf>
 800ee82:	e003      	b.n	800ee8c <SetLocation+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"Location is too long");
 800ee84:	4910      	ldr	r1, [pc, #64]	; (800eec8 <SetLocation+0xec>)
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7ff fda0 	bl	800e9cc <cli_printf>
	}

	flag_cli = 0;
 800ee8c:	4b09      	ldr	r3, [pc, #36]	; (800eeb4 <SetLocation+0xd8>)
 800ee8e:	2200      	movs	r2, #0
 800ee90:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ee92:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <SetLocation+0xd4>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	701a      	strb	r2, [r3, #0]

}
 800ee98:	bf00      	nop
 800ee9a:	3748      	adds	r7, #72	; 0x48
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	0802023c 	.word	0x0802023c
 800eea4:	080202b4 	.word	0x080202b4
 800eea8:	2000199c 	.word	0x2000199c
 800eeac:	08020338 	.word	0x08020338
 800eeb0:	20001a5a 	.word	0x20001a5a
 800eeb4:	20001a5b 	.word	0x20001a5b
 800eeb8:	200013d7 	.word	0x200013d7
 800eebc:	200014ad 	.word	0x200014ad
 800eec0:	200014ae 	.word	0x200014ae
 800eec4:	0802036c 	.word	0x0802036c
 800eec8:	08020384 	.word	0x08020384

0800eecc <Setname>:

void Setname(EmbeddedCli *cli, char *args, void *context) {
 800eecc:	b580      	push	{r7, lr}
 800eece:	b092      	sub	sp, #72	; 0x48
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800eed8:	4b2d      	ldr	r3, [pc, #180]	; (800ef90 <Setname+0xc4>)
 800eeda:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800eedc:	492d      	ldr	r1, [pc, #180]	; (800ef94 <Setname+0xc8>)
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f7ff fd74 	bl	800e9cc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800eee4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eee6:	f7f1 f985 	bl	80001f4 <strlen>
 800eeea:	4603      	mov	r3, r0
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eef4:	4828      	ldr	r0, [pc, #160]	; (800ef98 <Setname+0xcc>)
 800eef6:	f7fc facf 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"Set the name. Keep name below 15 characters");
 800eefa:	4928      	ldr	r1, [pc, #160]	; (800ef9c <Setname+0xd0>)
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7ff fd65 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800ef02:	4b27      	ldr	r3, [pc, #156]	; (800efa0 <Setname+0xd4>)
 800ef04:	2201      	movs	r2, #1
 800ef06:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ef08:	4b26      	ldr	r3, [pc, #152]	; (800efa4 <Setname+0xd8>)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ef0e:	f107 0310 	add.w	r3, r7, #16
 800ef12:	2232      	movs	r2, #50	; 0x32
 800ef14:	4619      	mov	r1, r3
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7ff fd9a 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ef1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ef1e:	f7f1 f969 	bl	80001f4 <strlen>
 800ef22:	4603      	mov	r3, r0
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef2c:	481a      	ldr	r0, [pc, #104]	; (800ef98 <Setname+0xcc>)
 800ef2e:	f7fc fab3 	bl	800b498 <HAL_UART_Transmit>

	len = strlen(buffer);
 800ef32:	f107 0310 	add.w	r3, r7, #16
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7f1 f95c 	bl	80001f4 <strlen>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800ef42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef46:	2b0e      	cmp	r3, #14
 800ef48:	d814      	bhi.n	800ef74 <Setname+0xa8>
	{
		   if(buffer[0] != '\0' )
 800ef4a:	7c3b      	ldrb	r3, [r7, #16]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d015      	beq.n	800ef7c <Setname+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.name,buffer);
 800ef50:	f107 0310 	add.w	r3, r7, #16
 800ef54:	4619      	mov	r1, r3
 800ef56:	4814      	ldr	r0, [pc, #80]	; (800efa8 <Setname+0xdc>)
 800ef58:	f00d f93f 	bl	801c1da <strcpy>
			set_param_flags();
 800ef5c:	4b13      	ldr	r3, [pc, #76]	; (800efac <Setname+0xe0>)
 800ef5e:	2201      	movs	r2, #1
 800ef60:	701a      	strb	r2, [r3, #0]
 800ef62:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <Setname+0xe4>)
 800ef64:	2201      	movs	r2, #1
 800ef66:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"name is set to: %s",_Flash_Packet.name);
 800ef68:	4a0f      	ldr	r2, [pc, #60]	; (800efa8 <Setname+0xdc>)
 800ef6a:	4912      	ldr	r1, [pc, #72]	; (800efb4 <Setname+0xe8>)
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7ff fd2d 	bl	800e9cc <cli_printf>
 800ef72:	e003      	b.n	800ef7c <Setname+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"name is too long");
 800ef74:	4910      	ldr	r1, [pc, #64]	; (800efb8 <Setname+0xec>)
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f7ff fd28 	bl	800e9cc <cli_printf>
	}

	flag_cli = 0;
 800ef7c:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <Setname+0xd8>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ef82:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <Setname+0xd4>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	701a      	strb	r2, [r3, #0]

}
 800ef88:	bf00      	nop
 800ef8a:	3748      	adds	r7, #72	; 0x48
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	0802023c 	.word	0x0802023c
 800ef94:	080202b4 	.word	0x080202b4
 800ef98:	2000199c 	.word	0x2000199c
 800ef9c:	0802039c 	.word	0x0802039c
 800efa0:	20001a5a 	.word	0x20001a5a
 800efa4:	20001a5b 	.word	0x20001a5b
 800efa8:	20001409 	.word	0x20001409
 800efac:	200014ad 	.word	0x200014ad
 800efb0:	200014ae 	.word	0x200014ae
 800efb4:	080203c8 	.word	0x080203c8
 800efb8:	080203dc 	.word	0x080203dc

0800efbc <Setgroup>:

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b092      	sub	sp, #72	; 0x48
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800efc8:	4b2d      	ldr	r3, [pc, #180]	; (800f080 <Setgroup+0xc4>)
 800efca:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800efcc:	492d      	ldr	r1, [pc, #180]	; (800f084 <Setgroup+0xc8>)
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff fcfc 	bl	800e9cc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800efd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800efd6:	f7f1 f90d 	bl	80001f4 <strlen>
 800efda:	4603      	mov	r3, r0
 800efdc:	b29a      	uxth	r2, r3
 800efde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efe4:	4828      	ldr	r0, [pc, #160]	; (800f088 <Setgroup+0xcc>)
 800efe6:	f7fc fa57 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"Set the group. Keep name below 15 characters");
 800efea:	4928      	ldr	r1, [pc, #160]	; (800f08c <Setgroup+0xd0>)
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff fced 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800eff2:	4b27      	ldr	r3, [pc, #156]	; (800f090 <Setgroup+0xd4>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800eff8:	4b26      	ldr	r3, [pc, #152]	; (800f094 <Setgroup+0xd8>)
 800effa:	2200      	movs	r2, #0
 800effc:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800effe:	f107 0310 	add.w	r3, r7, #16
 800f002:	2232      	movs	r2, #50	; 0x32
 800f004:	4619      	mov	r1, r3
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7ff fd22 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f00c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f00e:	f7f1 f8f1 	bl	80001f4 <strlen>
 800f012:	4603      	mov	r3, r0
 800f014:	b29a      	uxth	r2, r3
 800f016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f01a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f01c:	481a      	ldr	r0, [pc, #104]	; (800f088 <Setgroup+0xcc>)
 800f01e:	f7fc fa3b 	bl	800b498 <HAL_UART_Transmit>

	len = strlen(buffer);
 800f022:	f107 0310 	add.w	r3, r7, #16
 800f026:	4618      	mov	r0, r3
 800f028:	f7f1 f8e4 	bl	80001f4 <strlen>
 800f02c:	4603      	mov	r3, r0
 800f02e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f032:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f036:	2b0e      	cmp	r3, #14
 800f038:	d814      	bhi.n	800f064 <Setgroup+0xa8>
	{
		   if(buffer[0] != '\0' )
 800f03a:	7c3b      	ldrb	r3, [r7, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d015      	beq.n	800f06c <Setgroup+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.group,buffer);
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	4619      	mov	r1, r3
 800f046:	4814      	ldr	r0, [pc, #80]	; (800f098 <Setgroup+0xdc>)
 800f048:	f00d f8c7 	bl	801c1da <strcpy>
			set_param_flags();
 800f04c:	4b13      	ldr	r3, [pc, #76]	; (800f09c <Setgroup+0xe0>)
 800f04e:	2201      	movs	r2, #1
 800f050:	701a      	strb	r2, [r3, #0]
 800f052:	4b13      	ldr	r3, [pc, #76]	; (800f0a0 <Setgroup+0xe4>)
 800f054:	2201      	movs	r2, #1
 800f056:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"group is set to: %s",_Flash_Packet.group);
 800f058:	4a0f      	ldr	r2, [pc, #60]	; (800f098 <Setgroup+0xdc>)
 800f05a:	4912      	ldr	r1, [pc, #72]	; (800f0a4 <Setgroup+0xe8>)
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff fcb5 	bl	800e9cc <cli_printf>
 800f062:	e003      	b.n	800f06c <Setgroup+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"group is too long");
 800f064:	4910      	ldr	r1, [pc, #64]	; (800f0a8 <Setgroup+0xec>)
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f7ff fcb0 	bl	800e9cc <cli_printf>
	}

	flag_cli = 0;
 800f06c:	4b09      	ldr	r3, [pc, #36]	; (800f094 <Setgroup+0xd8>)
 800f06e:	2200      	movs	r2, #0
 800f070:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f072:	4b07      	ldr	r3, [pc, #28]	; (800f090 <Setgroup+0xd4>)
 800f074:	2200      	movs	r2, #0
 800f076:	701a      	strb	r2, [r3, #0]

}
 800f078:	bf00      	nop
 800f07a:	3748      	adds	r7, #72	; 0x48
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	0802023c 	.word	0x0802023c
 800f084:	080202b4 	.word	0x080202b4
 800f088:	2000199c 	.word	0x2000199c
 800f08c:	080203f0 	.word	0x080203f0
 800f090:	20001a5a 	.word	0x20001a5a
 800f094:	20001a5b 	.word	0x20001a5b
 800f098:	2000143b 	.word	0x2000143b
 800f09c:	200014ad 	.word	0x200014ad
 800f0a0:	200014ae 	.word	0x200014ae
 800f0a4:	08020420 	.word	0x08020420
 800f0a8:	08020434 	.word	0x08020434

0800f0ac <GetID>:




void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"ID: %s",	_Flash_Packet.id);
 800f0b8:	4a04      	ldr	r2, [pc, #16]	; (800f0cc <GetID+0x20>)
 800f0ba:	4905      	ldr	r1, [pc, #20]	; (800f0d0 <GetID+0x24>)
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f7ff fc85 	bl	800e9cc <cli_printf>
}
 800f0c2:	bf00      	nop
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	200013a5 	.word	0x200013a5
 800f0d0:	08020448 	.word	0x08020448

0800f0d4 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Location: %s",	_Flash_Packet.location);
 800f0e0:	4a04      	ldr	r2, [pc, #16]	; (800f0f4 <GetLocation+0x20>)
 800f0e2:	4905      	ldr	r1, [pc, #20]	; (800f0f8 <GetLocation+0x24>)
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f7ff fc71 	bl	800e9cc <cli_printf>

}
 800f0ea:	bf00      	nop
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	200013d7 	.word	0x200013d7
 800f0f8:	08020450 	.word	0x08020450

0800f0fc <Getname>:

void Getname(EmbeddedCli *cli, char *args, void *context) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Name: %s",	_Flash_Packet.name);
 800f108:	4a04      	ldr	r2, [pc, #16]	; (800f11c <Getname+0x20>)
 800f10a:	4905      	ldr	r1, [pc, #20]	; (800f120 <Getname+0x24>)
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f7ff fc5d 	bl	800e9cc <cli_printf>

}
 800f112:	bf00      	nop
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	20001409 	.word	0x20001409
 800f120:	08020460 	.word	0x08020460

0800f124 <Getgroup>:

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Group: %s",	_Flash_Packet.group);
 800f130:	4a04      	ldr	r2, [pc, #16]	; (800f144 <Getgroup+0x20>)
 800f132:	4905      	ldr	r1, [pc, #20]	; (800f148 <Getgroup+0x24>)
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f7ff fc49 	bl	800e9cc <cli_printf>

}
 800f13a:	bf00      	nop
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	2000143b 	.word	0x2000143b
 800f148:	0802046c 	.word	0x0802046c

0800f14c <SetDate>:





void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b09a      	sub	sp, #104	; 0x68
 800f150:	af02      	add	r7, sp, #8
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f158:	4b26      	ldr	r3, [pc, #152]	; (800f1f4 <SetDate+0xa8>)
 800f15a:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set date in following format: day:month:year eg:(15:1:23).");
 800f15c:	4926      	ldr	r1, [pc, #152]	; (800f1f8 <SetDate+0xac>)
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7ff fc34 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800f164:	4b25      	ldr	r3, [pc, #148]	; (800f1fc <SetDate+0xb0>)
 800f166:	2201      	movs	r2, #1
 800f168:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f16a:	4b25      	ldr	r3, [pc, #148]	; (800f200 <SetDate+0xb4>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f174:	2232      	movs	r2, #50	; 0x32
 800f176:	4619      	mov	r1, r3
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f7ff fc69 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f17e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f180:	f7f1 f838 	bl	80001f4 <strlen>
 800f184:	4603      	mov	r3, r0
 800f186:	b29a      	uxth	r2, r3
 800f188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f18c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f18e:	481d      	ldr	r0, [pc, #116]	; (800f204 <SetDate+0xb8>)
 800f190:	f7fc f982 	bl	800b498 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d004      	beq.n	800f1a6 <SetDate+0x5a>
	{
	Set_Date(buffer);
 800f19c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f002 fdbb 	bl	8011d1c <Set_Date>
	}
	flag_cli = 0;
 800f1a6:	4b16      	ldr	r3, [pc, #88]	; (800f200 <SetDate+0xb4>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f1ac:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <SetDate+0xb0>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	4813      	ldr	r0, [pc, #76]	; (800f208 <SetDate+0xbc>)
 800f1bc:	f7f9 fe28 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f1c0:	f107 0310 	add.w	r3, r7, #16
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	480f      	ldr	r0, [pc, #60]	; (800f208 <SetDate+0xbc>)
 800f1ca:	f7f9 fd3f 	bl	8008c4c <HAL_RTC_GetTime>
	cli_printf(cli,"Set Date: %02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f1ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f1d8:	4619      	mov	r1, r3
 800f1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	490a      	ldr	r1, [pc, #40]	; (800f20c <SetDate+0xc0>)
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	f7ff fbf1 	bl	800e9cc <cli_printf>

}
 800f1ea:	bf00      	nop
 800f1ec:	3760      	adds	r7, #96	; 0x60
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	0802023c 	.word	0x0802023c
 800f1f8:	08020478 	.word	0x08020478
 800f1fc:	20001a5a 	.word	0x20001a5a
 800f200:	20001a5b 	.word	0x20001a5b
 800f204:	2000199c 	.word	0x2000199c
 800f208:	200017c0 	.word	0x200017c0
 800f20c:	080204b4 	.word	0x080204b4

0800f210 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b09a      	sub	sp, #104	; 0x68
 800f214:	af02      	add	r7, sp, #8
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f21c:	4b26      	ldr	r3, [pc, #152]	; (800f2b8 <SetTime+0xa8>)
 800f21e:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
 800f220:	4926      	ldr	r1, [pc, #152]	; (800f2bc <SetTime+0xac>)
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f7ff fbd2 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800f228:	4b25      	ldr	r3, [pc, #148]	; (800f2c0 <SetTime+0xb0>)
 800f22a:	2201      	movs	r2, #1
 800f22c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f22e:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <SetTime+0xb4>)
 800f230:	2200      	movs	r2, #0
 800f232:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f238:	2232      	movs	r2, #50	; 0x32
 800f23a:	4619      	mov	r1, r3
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f7ff fc07 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f242:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f244:	f7f0 ffd6 	bl	80001f4 <strlen>
 800f248:	4603      	mov	r3, r0
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f250:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f252:	481d      	ldr	r0, [pc, #116]	; (800f2c8 <SetTime+0xb8>)
 800f254:	f7fc f920 	bl	800b498 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f258:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d004      	beq.n	800f26a <SetTime+0x5a>
	{
	Set_Time(buffer);
 800f260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f264:	4618      	mov	r0, r3
 800f266:	f002 fdfb 	bl	8011e60 <Set_Time>
    }
	flag_cli = 0;
 800f26a:	4b16      	ldr	r3, [pc, #88]	; (800f2c4 <SetTime+0xb4>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f270:	4b13      	ldr	r3, [pc, #76]	; (800f2c0 <SetTime+0xb0>)
 800f272:	2200      	movs	r2, #0
 800f274:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f276:	4b15      	ldr	r3, [pc, #84]	; (800f2cc <SetTime+0xbc>)
 800f278:	2201      	movs	r2, #1
 800f27a:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f27c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f280:	2200      	movs	r2, #0
 800f282:	4619      	mov	r1, r3
 800f284:	4812      	ldr	r0, [pc, #72]	; (800f2d0 <SetTime+0xc0>)
 800f286:	f7f9 fdc3 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f28a:	f107 0310 	add.w	r3, r7, #16
 800f28e:	2200      	movs	r2, #0
 800f290:	4619      	mov	r1, r3
 800f292:	480f      	ldr	r0, [pc, #60]	; (800f2d0 <SetTime+0xc0>)
 800f294:	f7f9 fcda 	bl	8008c4c <HAL_RTC_GetTime>
	cli_printf(cli,"Set Time: %02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f298:	7c3b      	ldrb	r3, [r7, #16]
 800f29a:	461a      	mov	r2, r3
 800f29c:	7c7b      	ldrb	r3, [r7, #17]
 800f29e:	4619      	mov	r1, r3
 800f2a0:	7cbb      	ldrb	r3, [r7, #18]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	490b      	ldr	r1, [pc, #44]	; (800f2d4 <SetTime+0xc4>)
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f7ff fb8f 	bl	800e9cc <cli_printf>

}
 800f2ae:	bf00      	nop
 800f2b0:	3760      	adds	r7, #96	; 0x60
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	0802023c 	.word	0x0802023c
 800f2bc:	080204d0 	.word	0x080204d0
 800f2c0:	20001a5a 	.word	0x20001a5a
 800f2c4:	20001a5b 	.word	0x20001a5b
 800f2c8:	2000199c 	.word	0x2000199c
 800f2cc:	20000025 	.word	0x20000025
 800f2d0:	200017c0 	.word	0x200017c0
 800f2d4:	08020514 	.word	0x08020514

0800f2d8 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08c      	sub	sp, #48	; 0x30
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]



	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	480f      	ldr	r0, [pc, #60]	; (800f32c <GetDate+0x54>)
 800f2ee:	f7f9 fd8f 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f2f2:	f107 0310 	add.w	r3, r7, #16
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	480c      	ldr	r0, [pc, #48]	; (800f32c <GetDate+0x54>)
 800f2fc:	f7f9 fca6 	bl	8008c4c <HAL_RTC_GetTime>
	cli_printf(cli,"%02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f304:	461a      	mov	r2, r3
 800f306:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f30a:	4619      	mov	r1, r3
 800f30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	460b      	mov	r3, r1
 800f314:	4906      	ldr	r1, [pc, #24]	; (800f330 <GetDate+0x58>)
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7ff fb58 	bl	800e9cc <cli_printf>
	HAL_Delay(100);
 800f31c:	2064      	movs	r0, #100	; 0x64
 800f31e:	f7f4 fa0f 	bl	8003740 <HAL_Delay>
}
 800f322:	bf00      	nop
 800f324:	3728      	adds	r7, #40	; 0x28
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	200017c0 	.word	0x200017c0
 800f330:	08020530 	.word	0x08020530

0800f334 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b08c      	sub	sp, #48	; 0x30
 800f338:	af02      	add	r7, sp, #8
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f344:	2200      	movs	r2, #0
 800f346:	4619      	mov	r1, r3
 800f348:	480d      	ldr	r0, [pc, #52]	; (800f380 <GetTime+0x4c>)
 800f34a:	f7f9 fd61 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f34e:	f107 0310 	add.w	r3, r7, #16
 800f352:	2200      	movs	r2, #0
 800f354:	4619      	mov	r1, r3
 800f356:	480a      	ldr	r0, [pc, #40]	; (800f380 <GetTime+0x4c>)
 800f358:	f7f9 fc78 	bl	8008c4c <HAL_RTC_GetTime>
	cli_printf(cli,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f35c:	7c3b      	ldrb	r3, [r7, #16]
 800f35e:	461a      	mov	r2, r3
 800f360:	7c7b      	ldrb	r3, [r7, #17]
 800f362:	4619      	mov	r1, r3
 800f364:	7cbb      	ldrb	r3, [r7, #18]
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	460b      	mov	r3, r1
 800f36a:	4906      	ldr	r1, [pc, #24]	; (800f384 <GetTime+0x50>)
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f7ff fb2d 	bl	800e9cc <cli_printf>
	HAL_Delay(100);
 800f372:	2064      	movs	r0, #100	; 0x64
 800f374:	f7f4 f9e4 	bl	8003740 <HAL_Delay>
}
 800f378:	bf00      	nop
 800f37a:	3728      	adds	r7, #40	; 0x28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	200017c0 	.word	0x200017c0
 800f384:	08020540 	.word	0x08020540

0800f388 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f388:	b580      	push	{r7, lr}
 800f38a:	b092      	sub	sp, #72	; 0x48
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f394:	4b54      	ldr	r3, [pc, #336]	; (800f4e8 <SetInterval+0x160>)
 800f396:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f398:	4954      	ldr	r1, [pc, #336]	; (800f4ec <SetInterval+0x164>)
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f7ff fb16 	bl	800e9cc <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f3a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f3a2:	f7f0 ff27 	bl	80001f4 <strlen>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3b0:	484f      	ldr	r0, [pc, #316]	; (800f4f0 <SetInterval+0x168>)
 800f3b2:	f7fc f871 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"Enter 1 for 5min.");
 800f3b6:	494f      	ldr	r1, [pc, #316]	; (800f4f4 <SetInterval+0x16c>)
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f7ff fb07 	bl	800e9cc <cli_printf>
	cli_printf(cli,"Enter 2 for 15min.");
 800f3be:	494e      	ldr	r1, [pc, #312]	; (800f4f8 <SetInterval+0x170>)
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f7ff fb03 	bl	800e9cc <cli_printf>
	cli_printf(cli,"Enter 3 for 60min.");
 800f3c6:	494d      	ldr	r1, [pc, #308]	; (800f4fc <SetInterval+0x174>)
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f7ff faff 	bl	800e9cc <cli_printf>
	cli_printf(cli,"Disclaimer: The battery life will be reduced if interval is reduced.");
 800f3ce:	494c      	ldr	r1, [pc, #304]	; (800f500 <SetInterval+0x178>)
 800f3d0:	68f8      	ldr	r0, [r7, #12]
 800f3d2:	f7ff fafb 	bl	800e9cc <cli_printf>
	cli_other = 1;
 800f3d6:	4b4b      	ldr	r3, [pc, #300]	; (800f504 <SetInterval+0x17c>)
 800f3d8:	2201      	movs	r2, #1
 800f3da:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f3dc:	4b4a      	ldr	r3, [pc, #296]	; (800f508 <SetInterval+0x180>)
 800f3de:	2200      	movs	r2, #0
 800f3e0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f3e2:	f107 0310 	add.w	r3, r7, #16
 800f3e6:	2232      	movs	r2, #50	; 0x32
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f7ff fb30 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f3f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f3f2:	f7f0 feff 	bl	80001f4 <strlen>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f400:	483b      	ldr	r0, [pc, #236]	; (800f4f0 <SetInterval+0x168>)
 800f402:	f7fc f849 	bl	800b498 <HAL_UART_Transmit>


	if(strstr(buffer, "1"))
 800f406:	f107 0310 	add.w	r3, r7, #16
 800f40a:	2131      	movs	r1, #49	; 0x31
 800f40c:	4618      	mov	r0, r3
 800f40e:	f00c fed7 	bl	801c1c0 <strchr>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d015      	beq.n	800f444 <SetInterval+0xbc>
	{
        _Flash_Packet.Time_Interval = 5;
 800f418:	4b3c      	ldr	r3, [pc, #240]	; (800f50c <SetInterval+0x184>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	f042 0205 	orr.w	r2, r2, #5
 800f420:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f424:	2200      	movs	r2, #0
 800f426:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f430:	2200      	movs	r2, #0
 800f432:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        set_param_flags();
 800f436:	4b36      	ldr	r3, [pc, #216]	; (800f510 <SetInterval+0x188>)
 800f438:	2201      	movs	r2, #1
 800f43a:	701a      	strb	r2, [r3, #0]
 800f43c:	4b35      	ldr	r3, [pc, #212]	; (800f514 <SetInterval+0x18c>)
 800f43e:	2201      	movs	r2, #1
 800f440:	701a      	strb	r2, [r3, #0]
 800f442:	e03c      	b.n	800f4be <SetInterval+0x136>
	}
	else if(strstr(buffer, "2"))
 800f444:	f107 0310 	add.w	r3, r7, #16
 800f448:	2132      	movs	r1, #50	; 0x32
 800f44a:	4618      	mov	r0, r3
 800f44c:	f00c feb8 	bl	801c1c0 <strchr>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d015      	beq.n	800f482 <SetInterval+0xfa>
	{
		_Flash_Packet.Time_Interval = 15;
 800f456:	4b2d      	ldr	r3, [pc, #180]	; (800f50c <SetInterval+0x184>)
 800f458:	2200      	movs	r2, #0
 800f45a:	f042 020f 	orr.w	r2, r2, #15
 800f45e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f462:	2200      	movs	r2, #0
 800f464:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f474:	4b26      	ldr	r3, [pc, #152]	; (800f510 <SetInterval+0x188>)
 800f476:	2201      	movs	r2, #1
 800f478:	701a      	strb	r2, [r3, #0]
 800f47a:	4b26      	ldr	r3, [pc, #152]	; (800f514 <SetInterval+0x18c>)
 800f47c:	2201      	movs	r2, #1
 800f47e:	701a      	strb	r2, [r3, #0]
 800f480:	e01d      	b.n	800f4be <SetInterval+0x136>
	}
	else if(strstr(buffer, "3"))
 800f482:	f107 0310 	add.w	r3, r7, #16
 800f486:	2133      	movs	r1, #51	; 0x33
 800f488:	4618      	mov	r0, r3
 800f48a:	f00c fe99 	bl	801c1c0 <strchr>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d014      	beq.n	800f4be <SetInterval+0x136>
	{
		_Flash_Packet.Time_Interval = 60;
 800f494:	4b1d      	ldr	r3, [pc, #116]	; (800f50c <SetInterval+0x184>)
 800f496:	2200      	movs	r2, #0
 800f498:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800f49c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f4b2:	4b17      	ldr	r3, [pc, #92]	; (800f510 <SetInterval+0x188>)
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	701a      	strb	r2, [r3, #0]
 800f4b8:	4b16      	ldr	r3, [pc, #88]	; (800f514 <SetInterval+0x18c>)
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f4be:	4b12      	ldr	r3, [pc, #72]	; (800f508 <SetInterval+0x180>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f4c4:	4b0f      	ldr	r3, [pc, #60]	; (800f504 <SetInterval+0x17c>)
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"Interval is set to: %ldmin",_Flash_Packet.Time_Interval);
 800f4ca:	4b10      	ldr	r3, [pc, #64]	; (800f50c <SetInterval+0x184>)
 800f4cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4911      	ldr	r1, [pc, #68]	; (800f518 <SetInterval+0x190>)
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7ff fa79 	bl	800e9cc <cli_printf>
	set_alarm_Time = 1;
 800f4da:	4b10      	ldr	r3, [pc, #64]	; (800f51c <SetInterval+0x194>)
 800f4dc:	2201      	movs	r2, #1
 800f4de:	701a      	strb	r2, [r3, #0]
}
 800f4e0:	bf00      	nop
 800f4e2:	3748      	adds	r7, #72	; 0x48
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	0802023c 	.word	0x0802023c
 800f4ec:	080202b4 	.word	0x080202b4
 800f4f0:	2000199c 	.word	0x2000199c
 800f4f4:	08020550 	.word	0x08020550
 800f4f8:	08020564 	.word	0x08020564
 800f4fc:	08020578 	.word	0x08020578
 800f500:	0802058c 	.word	0x0802058c
 800f504:	20001a5a 	.word	0x20001a5a
 800f508:	20001a5b 	.word	0x20001a5b
 800f50c:	200012d8 	.word	0x200012d8
 800f510:	200014ad 	.word	0x200014ad
 800f514:	200014ae 	.word	0x200014ae
 800f518:	080205d4 	.word	0x080205d4
 800f51c:	20000025 	.word	0x20000025

0800f520 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Interval is Set to: %ldmin",_Flash_Packet.Time_Interval);
 800f52c:	4b05      	ldr	r3, [pc, #20]	; (800f544 <GetInterval+0x24>)
 800f52e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f532:	461a      	mov	r2, r3
 800f534:	4904      	ldr	r1, [pc, #16]	; (800f548 <GetInterval+0x28>)
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f7ff fa48 	bl	800e9cc <cli_printf>

}
 800f53c:	bf00      	nop
 800f53e:	3710      	adds	r7, #16
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	200012d8 	.word	0x200012d8
 800f548:	080205f0 	.word	0x080205f0

0800f54c <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b092      	sub	sp, #72	; 0x48
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
uint16_t len;
	  const char *newLine = "\r\n";
 800f558:	4b31      	ldr	r3, [pc, #196]	; (800f620 <SetFilename+0xd4>)
 800f55a:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f55c:	4931      	ldr	r1, [pc, #196]	; (800f624 <SetFilename+0xd8>)
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f7ff fa34 	bl	800e9cc <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f564:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f566:	f7f0 fe45 	bl	80001f4 <strlen>
 800f56a:	4603      	mov	r3, r0
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f574:	482c      	ldr	r0, [pc, #176]	; (800f628 <SetFilename+0xdc>)
 800f576:	f7fb ff8f 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
 800f57a:	492c      	ldr	r1, [pc, #176]	; (800f62c <SetFilename+0xe0>)
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f7ff fa25 	bl	800e9cc <cli_printf>
	cli_printf(cli,"If any special characters they will be omitted automatically.");
 800f582:	492b      	ldr	r1, [pc, #172]	; (800f630 <SetFilename+0xe4>)
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f7ff fa21 	bl	800e9cc <cli_printf>

	cli_other = 1;
 800f58a:	4b2a      	ldr	r3, [pc, #168]	; (800f634 <SetFilename+0xe8>)
 800f58c:	2201      	movs	r2, #1
 800f58e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f590:	4b29      	ldr	r3, [pc, #164]	; (800f638 <SetFilename+0xec>)
 800f592:	2200      	movs	r2, #0
 800f594:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	2232      	movs	r2, #50	; 0x32
 800f59c:	4619      	mov	r1, r3
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f7ff fa56 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f5a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f5a6:	f7f0 fe25 	bl	80001f4 <strlen>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5b4:	481c      	ldr	r0, [pc, #112]	; (800f628 <SetFilename+0xdc>)
 800f5b6:	f7fb ff6f 	bl	800b498 <HAL_UART_Transmit>

len = strlen(buffer);
 800f5ba:	f107 0310 	add.w	r3, r7, #16
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7f0 fe18 	bl	80001f4 <strlen>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
if(len < 20)
 800f5ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5ce:	2b13      	cmp	r3, #19
 800f5d0:	d818      	bhi.n	800f604 <SetFilename+0xb8>
{
	   if(buffer[0] != '\0' )
 800f5d2:	7c3b      	ldrb	r3, [r7, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d019      	beq.n	800f60c <SetFilename+0xc0>
	   {
	if(buffer != NULL)
	{
		strcpy(_Flash_Packet.File_Name,buffer);
 800f5d8:	f107 0310 	add.w	r3, r7, #16
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4817      	ldr	r0, [pc, #92]	; (800f63c <SetFilename+0xf0>)
 800f5e0:	f00c fdfb 	bl	801c1da <strcpy>
		set_param_flags();
 800f5e4:	4b16      	ldr	r3, [pc, #88]	; (800f640 <SetFilename+0xf4>)
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	4b16      	ldr	r3, [pc, #88]	; (800f644 <SetFilename+0xf8>)
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.filename_changed = 1;
 800f5f0:	4b15      	ldr	r3, [pc, #84]	; (800f648 <SetFilename+0xfc>)
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f5f8:	4a10      	ldr	r2, [pc, #64]	; (800f63c <SetFilename+0xf0>)
 800f5fa:	4914      	ldr	r1, [pc, #80]	; (800f64c <SetFilename+0x100>)
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7ff f9e5 	bl	800e9cc <cli_printf>
 800f602:	e003      	b.n	800f60c <SetFilename+0xc0>
	}
	   }
}
else
{
	cli_printf(cli,"Filename is too long");
 800f604:	4912      	ldr	r1, [pc, #72]	; (800f650 <SetFilename+0x104>)
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f7ff f9e0 	bl	800e9cc <cli_printf>
}


	flag_cli = 0;
 800f60c:	4b0a      	ldr	r3, [pc, #40]	; (800f638 <SetFilename+0xec>)
 800f60e:	2200      	movs	r2, #0
 800f610:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f612:	4b08      	ldr	r3, [pc, #32]	; (800f634 <SetFilename+0xe8>)
 800f614:	2200      	movs	r2, #0
 800f616:	701a      	strb	r2, [r3, #0]


}
 800f618:	bf00      	nop
 800f61a:	3748      	adds	r7, #72	; 0x48
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	0802023c 	.word	0x0802023c
 800f624:	080202b4 	.word	0x080202b4
 800f628:	2000199c 	.word	0x2000199c
 800f62c:	0802060c 	.word	0x0802060c
 800f630:	08020680 	.word	0x08020680
 800f634:	20001a5a 	.word	0x20001a5a
 800f638:	20001a5b 	.word	0x20001a5b
 800f63c:	200012d8 	.word	0x200012d8
 800f640:	200014ad 	.word	0x200014ad
 800f644:	200014ae 	.word	0x200014ae
 800f648:	20001470 	.word	0x20001470
 800f64c:	080206c0 	.word	0x080206c0
 800f650:	080206d8 	.word	0x080206d8

0800f654 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f660:	4a04      	ldr	r2, [pc, #16]	; (800f674 <GetFilename+0x20>)
 800f662:	4905      	ldr	r1, [pc, #20]	; (800f678 <GetFilename+0x24>)
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f7ff f9b1 	bl	800e9cc <cli_printf>

}
 800f66a:	bf00      	nop
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	200012d8 	.word	0x200012d8
 800f678:	080206c0 	.word	0x080206c0

0800f67c <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b092      	sub	sp, #72	; 0x48
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800f688:	4b41      	ldr	r3, [pc, #260]	; (800f790 <SetFileformat+0x114>)
 800f68a:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f68c:	4941      	ldr	r1, [pc, #260]	; (800f794 <SetFileformat+0x118>)
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f7ff f99c 	bl	800e9cc <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f694:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f696:	f7f0 fdad 	bl	80001f4 <strlen>
 800f69a:	4603      	mov	r3, r0
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6a4:	483c      	ldr	r0, [pc, #240]	; (800f798 <SetFileformat+0x11c>)
 800f6a6:	f7fb fef7 	bl	800b498 <HAL_UART_Transmit>
	cli_printf(cli,"Following file formats are allowed:");
 800f6aa:	493c      	ldr	r1, [pc, #240]	; (800f79c <SetFileformat+0x120>)
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f7ff f98d 	bl	800e9cc <cli_printf>
	cli_printf(cli,"1. (.csv)");
 800f6b2:	493b      	ldr	r1, [pc, #236]	; (800f7a0 <SetFileformat+0x124>)
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff f989 	bl	800e9cc <cli_printf>
	cli_printf(cli,"2. (.json)");
 800f6ba:	493a      	ldr	r1, [pc, #232]	; (800f7a4 <SetFileformat+0x128>)
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f7ff f985 	bl	800e9cc <cli_printf>
	cli_printf(cli,"Enter the number to select your desired format");
 800f6c2:	4939      	ldr	r1, [pc, #228]	; (800f7a8 <SetFileformat+0x12c>)
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f7ff f981 	bl	800e9cc <cli_printf>

	cli_other = 1;
 800f6ca:	4b38      	ldr	r3, [pc, #224]	; (800f7ac <SetFileformat+0x130>)
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f6d0:	4b37      	ldr	r3, [pc, #220]	; (800f7b0 <SetFileformat+0x134>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f6d6:	f107 0310 	add.w	r3, r7, #16
 800f6da:	2232      	movs	r2, #50	; 0x32
 800f6dc:	4619      	mov	r1, r3
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7ff f9b6 	bl	800ea50 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f6e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f6e6:	f7f0 fd85 	bl	80001f4 <strlen>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6f4:	4828      	ldr	r0, [pc, #160]	; (800f798 <SetFileformat+0x11c>)
 800f6f6:	f7fb fecf 	bl	800b498 <HAL_UART_Transmit>

	if(strstr(buffer, "1"))
 800f6fa:	f107 0310 	add.w	r3, r7, #16
 800f6fe:	2131      	movs	r1, #49	; 0x31
 800f700:	4618      	mov	r0, r3
 800f702:	f00c fd5d 	bl	801c1c0 <strchr>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d014      	beq.n	800f736 <SetFileformat+0xba>
	{
		strcpy(_Flash_Packet.File_Format,".CSV");
 800f70c:	4b29      	ldr	r3, [pc, #164]	; (800f7b4 <SetFileformat+0x138>)
 800f70e:	4a2a      	ldr	r2, [pc, #168]	; (800f7b8 <SetFileformat+0x13c>)
 800f710:	6810      	ldr	r0, [r2, #0]
 800f712:	6018      	str	r0, [r3, #0]
 800f714:	7912      	ldrb	r2, [r2, #4]
 800f716:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800f718:	4b28      	ldr	r3, [pc, #160]	; (800f7bc <SetFileformat+0x140>)
 800f71a:	2201      	movs	r2, #1
 800f71c:	701a      	strb	r2, [r3, #0]
 800f71e:	4b28      	ldr	r3, [pc, #160]	; (800f7c0 <SetFileformat+0x144>)
 800f720:	2201      	movs	r2, #1
 800f722:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800f724:	4b27      	ldr	r3, [pc, #156]	; (800f7c4 <SetFileformat+0x148>)
 800f726:	2201      	movs	r2, #1
 800f728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 1;
 800f72c:	4b25      	ldr	r3, [pc, #148]	; (800f7c4 <SetFileformat+0x148>)
 800f72e:	2201      	movs	r2, #1
 800f730:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f734:	e01c      	b.n	800f770 <SetFileformat+0xf4>
	}
	else if(strstr(buffer, "2"))
 800f736:	f107 0310 	add.w	r3, r7, #16
 800f73a:	2132      	movs	r1, #50	; 0x32
 800f73c:	4618      	mov	r0, r3
 800f73e:	f00c fd3f 	bl	801c1c0 <strchr>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d013      	beq.n	800f770 <SetFileformat+0xf4>
	{
		strcpy(_Flash_Packet.File_Format,".JSON");
 800f748:	4b1a      	ldr	r3, [pc, #104]	; (800f7b4 <SetFileformat+0x138>)
 800f74a:	4a1f      	ldr	r2, [pc, #124]	; (800f7c8 <SetFileformat+0x14c>)
 800f74c:	6810      	ldr	r0, [r2, #0]
 800f74e:	6018      	str	r0, [r3, #0]
 800f750:	8892      	ldrh	r2, [r2, #4]
 800f752:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800f754:	4b19      	ldr	r3, [pc, #100]	; (800f7bc <SetFileformat+0x140>)
 800f756:	2201      	movs	r2, #1
 800f758:	701a      	strb	r2, [r3, #0]
 800f75a:	4b19      	ldr	r3, [pc, #100]	; (800f7c0 <SetFileformat+0x144>)
 800f75c:	2201      	movs	r2, #1
 800f75e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800f760:	4b18      	ldr	r3, [pc, #96]	; (800f7c4 <SetFileformat+0x148>)
 800f762:	2201      	movs	r2, #1
 800f764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 0;
 800f768:	4b16      	ldr	r3, [pc, #88]	; (800f7c4 <SetFileformat+0x148>)
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}


	flag_cli = 0;
 800f770:	4b0f      	ldr	r3, [pc, #60]	; (800f7b0 <SetFileformat+0x134>)
 800f772:	2200      	movs	r2, #0
 800f774:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f776:	4b0d      	ldr	r3, [pc, #52]	; (800f7ac <SetFileformat+0x130>)
 800f778:	2200      	movs	r2, #0
 800f77a:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800f77c:	4a0d      	ldr	r2, [pc, #52]	; (800f7b4 <SetFileformat+0x138>)
 800f77e:	4913      	ldr	r1, [pc, #76]	; (800f7cc <SetFileformat+0x150>)
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7ff f923 	bl	800e9cc <cli_printf>

}
 800f786:	bf00      	nop
 800f788:	3748      	adds	r7, #72	; 0x48
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	0802023c 	.word	0x0802023c
 800f794:	080202b4 	.word	0x080202b4
 800f798:	2000199c 	.word	0x2000199c
 800f79c:	080206f0 	.word	0x080206f0
 800f7a0:	08020714 	.word	0x08020714
 800f7a4:	08020720 	.word	0x08020720
 800f7a8:	0802072c 	.word	0x0802072c
 800f7ac:	20001a5a 	.word	0x20001a5a
 800f7b0:	20001a5b 	.word	0x20001a5b
 800f7b4:	2000133c 	.word	0x2000133c
 800f7b8:	0802075c 	.word	0x0802075c
 800f7bc:	200014ad 	.word	0x200014ad
 800f7c0:	200014ae 	.word	0x200014ae
 800f7c4:	20001470 	.word	0x20001470
 800f7c8:	08020764 	.word	0x08020764
 800f7cc:	0802076c 	.word	0x0802076c

0800f7d0 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800f7dc:	4a04      	ldr	r2, [pc, #16]	; (800f7f0 <GetFileformat+0x20>)
 800f7de:	4905      	ldr	r1, [pc, #20]	; (800f7f4 <GetFileformat+0x24>)
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f7ff f8f3 	bl	800e9cc <cli_printf>

}
 800f7e6:	bf00      	nop
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	2000133c 	.word	0x2000133c
 800f7f4:	0802076c 	.word	0x0802076c

0800f7f8 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b096      	sub	sp, #88	; 0x58
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800f804:	4b48      	ldr	r3, [pc, #288]	; (800f928 <fanclean+0x130>)
 800f806:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int counter = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800f80c:	4b47      	ldr	r3, [pc, #284]	; (800f92c <fanclean+0x134>)
 800f80e:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,"Do you want to initiate particle sensor fan-cleaning? y/n?");
 800f816:	4946      	ldr	r1, [pc, #280]	; (800f930 <fanclean+0x138>)
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f7ff f8d7 	bl	800e9cc <cli_printf>

	cli_other = 1;
 800f81e:	4b45      	ldr	r3, [pc, #276]	; (800f934 <fanclean+0x13c>)
 800f820:	2201      	movs	r2, #1
 800f822:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f824:	4b44      	ldr	r3, [pc, #272]	; (800f938 <fanclean+0x140>)
 800f826:	2200      	movs	r2, #0
 800f828:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800f82a:	f107 0314 	add.w	r3, r7, #20
 800f82e:	2232      	movs	r2, #50	; 0x32
 800f830:	4619      	mov	r1, r3
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f7ff f90c 	bl	800ea50 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f838:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f83a:	f7f0 fcdb 	bl	80001f4 <strlen>
 800f83e:	4603      	mov	r3, r0
 800f840:	b29a      	uxth	r2, r3
 800f842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f846:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f848:	483c      	ldr	r0, [pc, #240]	; (800f93c <fanclean+0x144>)
 800f84a:	f7fb fe25 	bl	800b498 <HAL_UART_Transmit>


        if(strstr(buffer, "n"))
 800f84e:	f107 0314 	add.w	r3, r7, #20
 800f852:	216e      	movs	r1, #110	; 0x6e
 800f854:	4618      	mov	r0, r3
 800f856:	f00c fcb3 	bl	801c1c0 <strchr>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00f      	beq.n	800f880 <fanclean+0x88>
		{
			_Flash_Packet.Calibration_Status=0;
 800f860:	4b37      	ldr	r3, [pc, #220]	; (800f940 <fanclean+0x148>)
 800f862:	2200      	movs	r2, #0
 800f864:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			_RunTime_Packet.PM_calibration=1;
 800f868:	4b36      	ldr	r3, [pc, #216]	; (800f944 <fanclean+0x14c>)
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			cli_printf(cli,"Particle sensor fan-cleaning aborted.");
 800f870:	4935      	ldr	r1, [pc, #212]	; (800f948 <fanclean+0x150>)
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f7ff f8aa 	bl	800e9cc <cli_printf>
			//set_param_flags();
			do_Calibration = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800f87e:	e00f      	b.n	800f8a0 <fanclean+0xa8>
		}
        else if(strstr(buffer, "y"))
 800f880:	f107 0314 	add.w	r3, r7, #20
 800f884:	2179      	movs	r1, #121	; 0x79
 800f886:	4618      	mov	r0, r3
 800f888:	f00c fc9a 	bl	801c1c0 <strchr>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d006      	beq.n	800f8a0 <fanclean+0xa8>
        {
        	_RunTime_Packet.PM_calibration=0;
 800f892:	4b2c      	ldr	r3, [pc, #176]	; (800f944 <fanclean+0x14c>)
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        	do_Calibration = 1;
 800f89a:	2301      	movs	r3, #1
 800f89c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        }



		   if(do_Calibration == 1)
 800f8a0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d135      	bne.n	800f914 <fanclean+0x11c>
		   {

				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f8a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f8aa:	f7f0 fca3 	bl	80001f4 <strlen>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f8b8:	4820      	ldr	r0, [pc, #128]	; (800f93c <fanclean+0x144>)
 800f8ba:	f7fb fded 	bl	800b498 <HAL_UART_Transmit>
				cli_printf(cli,"Particle sensor fan-cleaning initiated, please wait.");
 800f8be:	4923      	ldr	r1, [pc, #140]	; (800f94c <fanclean+0x154>)
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f7ff f883 	bl	800e9cc <cli_printf>
		   while(counter < 8 )
 800f8c6:	e013      	b.n	800f8f0 <fanclean+0xf8>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800f8c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f8ca:	f7f0 fc93 	bl	80001f4 <strlen>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f8d8:	4818      	ldr	r0, [pc, #96]	; (800f93c <fanclean+0x144>)
 800f8da:	f7fb fddd 	bl	800b498 <HAL_UART_Transmit>
                HAL_Delay(800);
 800f8de:	f44f 7048 	mov.w	r0, #800	; 0x320
 800f8e2:	f7f3 ff2d 	bl	8003740 <HAL_Delay>
                toggle_blue_led();
 800f8e6:	f7f1 fbf3 	bl	80010d0 <toggle_blue_led>
                counter++;
 800f8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 8 )
 800f8f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8f2:	2b07      	cmp	r3, #7
 800f8f4:	dde8      	ble.n	800f8c8 <fanclean+0xd0>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f8f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f8f8:	f7f0 fc7c 	bl	80001f4 <strlen>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f904:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f906:	480d      	ldr	r0, [pc, #52]	; (800f93c <fanclean+0x144>)
 800f908:	f7fb fdc6 	bl	800b498 <HAL_UART_Transmit>
			cli_printf(cli,"fan-cleaning done.");
 800f90c:	4910      	ldr	r1, [pc, #64]	; (800f950 <fanclean+0x158>)
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f7ff f85c 	bl	800e9cc <cli_printf>


		   }

		flag_cli = 0;
 800f914:	4b08      	ldr	r3, [pc, #32]	; (800f938 <fanclean+0x140>)
 800f916:	2200      	movs	r2, #0
 800f918:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f91a:	4b06      	ldr	r3, [pc, #24]	; (800f934 <fanclean+0x13c>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	701a      	strb	r2, [r3, #0]
}
 800f920:	bf00      	nop
 800f922:	3758      	adds	r7, #88	; 0x58
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	0802023c 	.word	0x0802023c
 800f92c:	08020788 	.word	0x08020788
 800f930:	08020794 	.word	0x08020794
 800f934:	20001a5a 	.word	0x20001a5a
 800f938:	20001a5b 	.word	0x20001a5b
 800f93c:	2000199c 	.word	0x2000199c
 800f940:	200012d8 	.word	0x200012d8
 800f944:	20001470 	.word	0x20001470
 800f948:	080207d0 	.word	0x080207d0
 800f94c:	080207f8 	.word	0x080207f8
 800f950:	08020830 	.word	0x08020830

0800f954 <co2calibrate>:


void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800f954:	b580      	push	{r7, lr}
 800f956:	b096      	sub	sp, #88	; 0x58
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f960:	4b50      	ldr	r3, [pc, #320]	; (800faa4 <co2calibrate+0x150>)
 800f962:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t val;
	  int counter = 0;
 800f964:	2300      	movs	r3, #0
 800f966:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800f968:	4b4f      	ldr	r3, [pc, #316]	; (800faa8 <co2calibrate+0x154>)
 800f96a:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	    cli_other = 1;
 800f972:	4b4e      	ldr	r3, [pc, #312]	; (800faac <co2calibrate+0x158>)
 800f974:	2201      	movs	r2, #1
 800f976:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f978:	4b4d      	ldr	r3, [pc, #308]	; (800fab0 <co2calibrate+0x15c>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer,'\0',sizeof(buffer));
 800f97e:	f107 0310 	add.w	r3, r7, #16
 800f982:	2232      	movs	r2, #50	; 0x32
 800f984:	2100      	movs	r1, #0
 800f986:	4618      	mov	r0, r3
 800f988:	f00b fbf4 	bl	801b174 <memset>
		cli_printf(cli,"To calibrate Co2 sensor, please provide Co2 concentration value.");
 800f98c:	4949      	ldr	r1, [pc, #292]	; (800fab4 <co2calibrate+0x160>)
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f7ff f81c 	bl	800e9cc <cli_printf>
		cli_printf(cli,"If Co2 concentration is unknown then just press enter to cancel the calibration.");
 800f994:	4948      	ldr	r1, [pc, #288]	; (800fab8 <co2calibrate+0x164>)
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f7ff f818 	bl	800e9cc <cli_printf>

		receiveString(cli,buffer,sizeof(buffer));
 800f99c:	f107 0310 	add.w	r3, r7, #16
 800f9a0:	2232      	movs	r2, #50	; 0x32
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f7ff f853 	bl	800ea50 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f9aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f9ac:	f7f0 fc22 	bl	80001f4 <strlen>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f9ba:	4840      	ldr	r0, [pc, #256]	; (800fabc <co2calibrate+0x168>)
 800f9bc:	f7fb fd6c 	bl	800b498 <HAL_UART_Transmit>

		   if(buffer[0] != '\0' )
 800f9c0:	7c3b      	ldrb	r3, [r7, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d01e      	beq.n	800fa04 <co2calibrate+0xb0>
			{
			   _RunTime_Packet.CO2_calibration = 1;
 800f9c6:	4b3e      	ldr	r3, [pc, #248]	; (800fac0 <co2calibrate+0x16c>)
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

                val = atoi(buffer);
 800f9ce:	f107 0310 	add.w	r3, r7, #16
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f00b fafe 	bl	801afd4 <atoi>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	647b      	str	r3, [r7, #68]	; 0x44

                if(val < 65535)
 800f9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d803      	bhi.n	800f9ee <co2calibrate+0x9a>
                {
                   _RunTime_Packet._target_co2_concentration = val;
 800f9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	4b35      	ldr	r3, [pc, #212]	; (800fac0 <co2calibrate+0x16c>)
 800f9ec:	869a      	strh	r2, [r3, #52]	; 0x34
                }

            	cli_printf(cli,"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",_RunTime_Packet._target_co2_concentration);
 800f9ee:	4b34      	ldr	r3, [pc, #208]	; (800fac0 <co2calibrate+0x16c>)
 800f9f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	4933      	ldr	r1, [pc, #204]	; (800fac4 <co2calibrate+0x170>)
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f7fe ffe8 	bl	800e9cc <cli_printf>
            	do_Calibration = 1;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fa02:	e00a      	b.n	800fa1a <co2calibrate+0xc6>
			 }
		   else
		   {
				cli_printf(cli,"Co2 sensor Calibration aborted.");
 800fa04:	4930      	ldr	r1, [pc, #192]	; (800fac8 <co2calibrate+0x174>)
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7fe ffe0 	bl	800e9cc <cli_printf>
				_RunTime_Packet.CO2_calibration = 0;
 800fa0c:	4b2c      	ldr	r3, [pc, #176]	; (800fac0 <co2calibrate+0x16c>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				do_Calibration = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		   }

		   if(do_Calibration == 1)
 800fa1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d135      	bne.n	800fa8e <co2calibrate+0x13a>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fa22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fa24:	f7f0 fbe6 	bl	80001f4 <strlen>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fa32:	4822      	ldr	r0, [pc, #136]	; (800fabc <co2calibrate+0x168>)
 800fa34:	f7fb fd30 	bl	800b498 <HAL_UART_Transmit>
				cli_printf(cli,"Co2 is calibrating, please wait.");
 800fa38:	4924      	ldr	r1, [pc, #144]	; (800facc <co2calibrate+0x178>)
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f7fe ffc6 	bl	800e9cc <cli_printf>
		   while(counter < 8 )
 800fa40:	e013      	b.n	800fa6a <co2calibrate+0x116>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800fa42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fa44:	f7f0 fbd6 	bl	80001f4 <strlen>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa50:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa52:	481a      	ldr	r0, [pc, #104]	; (800fabc <co2calibrate+0x168>)
 800fa54:	f7fb fd20 	bl	800b498 <HAL_UART_Transmit>
			    HAL_Delay(800);
 800fa58:	f44f 7048 	mov.w	r0, #800	; 0x320
 800fa5c:	f7f3 fe70 	bl	8003740 <HAL_Delay>
			    toggle_blue_led();
 800fa60:	f7f1 fb36 	bl	80010d0 <toggle_blue_led>
                counter++;
 800fa64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa66:	3301      	adds	r3, #1
 800fa68:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 8 )
 800fa6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa6c:	2b07      	cmp	r3, #7
 800fa6e:	dde8      	ble.n	800fa42 <co2calibrate+0xee>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fa70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fa72:	f7f0 fbbf 	bl	80001f4 <strlen>
 800fa76:	4603      	mov	r3, r0
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fa80:	480e      	ldr	r0, [pc, #56]	; (800fabc <co2calibrate+0x168>)
 800fa82:	f7fb fd09 	bl	800b498 <HAL_UART_Transmit>
			cli_printf(cli,"Sensor calibration done.");
 800fa86:	4912      	ldr	r1, [pc, #72]	; (800fad0 <co2calibrate+0x17c>)
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f7fe ff9f 	bl	800e9cc <cli_printf>
		   }

		flag_cli = 0;
 800fa8e:	4b08      	ldr	r3, [pc, #32]	; (800fab0 <co2calibrate+0x15c>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800fa94:	4b05      	ldr	r3, [pc, #20]	; (800faac <co2calibrate+0x158>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	701a      	strb	r2, [r3, #0]
}
 800fa9a:	bf00      	nop
 800fa9c:	3758      	adds	r7, #88	; 0x58
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	0802023c 	.word	0x0802023c
 800faa8:	08020788 	.word	0x08020788
 800faac:	20001a5a 	.word	0x20001a5a
 800fab0:	20001a5b 	.word	0x20001a5b
 800fab4:	08020844 	.word	0x08020844
 800fab8:	08020888 	.word	0x08020888
 800fabc:	2000199c 	.word	0x2000199c
 800fac0:	20001470 	.word	0x20001470
 800fac4:	080208dc 	.word	0x080208dc
 800fac8:	0802092c 	.word	0x0802092c
 800facc:	0802094c 	.word	0x0802094c
 800fad0:	08020970 	.word	0x08020970

0800fad4 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b092      	sub	sp, #72	; 0x48
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800fae0:	4b22      	ldr	r3, [pc, #136]	; (800fb6c <SystemRestart+0x98>)
 800fae2:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to restart the device y/n?");
 800fae4:	4922      	ldr	r1, [pc, #136]	; (800fb70 <SystemRestart+0x9c>)
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7fe ff70 	bl	800e9cc <cli_printf>

	cli_other = 1;
 800faec:	4b21      	ldr	r3, [pc, #132]	; (800fb74 <SystemRestart+0xa0>)
 800faee:	2201      	movs	r2, #1
 800faf0:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800faf2:	4b21      	ldr	r3, [pc, #132]	; (800fb78 <SystemRestart+0xa4>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800faf8:	f107 0310 	add.w	r3, r7, #16
 800fafc:	2232      	movs	r2, #50	; 0x32
 800fafe:	4619      	mov	r1, r3
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7fe ffa5 	bl	800ea50 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fb06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb08:	f7f0 fb74 	bl	80001f4 <strlen>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb16:	4819      	ldr	r0, [pc, #100]	; (800fb7c <SystemRestart+0xa8>)
 800fb18:	f7fb fcbe 	bl	800b498 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800fb1c:	f107 0310 	add.w	r3, r7, #16
 800fb20:	2179      	movs	r1, #121	; 0x79
 800fb22:	4618      	mov	r0, r3
 800fb24:	f00c fb4c 	bl	801c1c0 <strchr>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d006      	beq.n	800fb3c <SystemRestart+0x68>
		{
			cli_printf(cli,"Device is going to restart.");
 800fb2e:	4914      	ldr	r1, [pc, #80]	; (800fb80 <SystemRestart+0xac>)
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7fe ff4b 	bl	800e9cc <cli_printf>
			HAL_NVIC_SystemReset();
 800fb36:	f7f4 fc12 	bl	800435e <HAL_NVIC_SystemReset>
 800fb3a:	e00c      	b.n	800fb56 <SystemRestart+0x82>
		}
		else if(strstr(buffer, "n"))
 800fb3c:	f107 0310 	add.w	r3, r7, #16
 800fb40:	216e      	movs	r1, #110	; 0x6e
 800fb42:	4618      	mov	r0, r3
 800fb44:	f00c fb3c 	bl	801c1c0 <strchr>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d003      	beq.n	800fb56 <SystemRestart+0x82>
		{
			cli_printf(cli,"Device restart aborted.");
 800fb4e:	490d      	ldr	r1, [pc, #52]	; (800fb84 <SystemRestart+0xb0>)
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f7fe ff3b 	bl	800e9cc <cli_printf>
		}


		flag_cli = 0;
 800fb56:	4b08      	ldr	r3, [pc, #32]	; (800fb78 <SystemRestart+0xa4>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800fb5c:	4b05      	ldr	r3, [pc, #20]	; (800fb74 <SystemRestart+0xa0>)
 800fb5e:	2200      	movs	r2, #0
 800fb60:	701a      	strb	r2, [r3, #0]
}
 800fb62:	bf00      	nop
 800fb64:	3748      	adds	r7, #72	; 0x48
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	0802023c 	.word	0x0802023c
 800fb70:	0802098c 	.word	0x0802098c
 800fb74:	20001a5a 	.word	0x20001a5a
 800fb78:	20001a5b 	.word	0x20001a5b
 800fb7c:	2000199c 	.word	0x2000199c
 800fb80:	080209b4 	.word	0x080209b4
 800fb84:	080209d0 	.word	0x080209d0

0800fb88 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Co2 Value: %d",_RunTime_Packet.co2);
 800fb94:	4b05      	ldr	r3, [pc, #20]	; (800fbac <Co2Level+0x24>)
 800fb96:	881b      	ldrh	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4905      	ldr	r1, [pc, #20]	; (800fbb0 <Co2Level+0x28>)
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7fe ff15 	bl	800e9cc <cli_printf>
}
 800fba2:	bf00      	nop
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	20001470 	.word	0x20001470
 800fbb0:	080209e8 	.word	0x080209e8

0800fbb4 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Temperature Value: %dC ",_RunTime_Packet.temperature);
 800fbc0:	4b05      	ldr	r3, [pc, #20]	; (800fbd8 <TempLevel+0x24>)
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4905      	ldr	r1, [pc, #20]	; (800fbdc <TempLevel+0x28>)
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f7fe feff 	bl	800e9cc <cli_printf>
}
 800fbce:	bf00      	nop
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	20001470 	.word	0x20001470
 800fbdc:	080209f8 	.word	0x080209f8

0800fbe0 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Humidity Value: %d ",_RunTime_Packet.humidity);
 800fbec:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <HumidLevel+0x24>)
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	4905      	ldr	r1, [pc, #20]	; (800fc08 <HumidLevel+0x28>)
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f7fe fee9 	bl	800e9cc <cli_printf>
}
 800fbfa:	bf00      	nop
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	20001470 	.word	0x20001470
 800fc08:	08020a10 	.word	0x08020a10

0800fc0c <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"For 10seconds system will poll here to detect motion.");
 800fc18:	491f      	ldr	r1, [pc, #124]	; (800fc98 <MotionDetection+0x8c>)
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f7fe fed6 	bl	800e9cc <cli_printf>
	HAL_Delay(1500);
 800fc20:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800fc24:	f7f3 fd8c 	bl	8003740 <HAL_Delay>
         prev_max_wait_time_motion = HAL_GetTick();
 800fc28:	f7f3 fd7e 	bl	8003728 <HAL_GetTick>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	4a1b      	ldr	r2, [pc, #108]	; (800fc9c <MotionDetection+0x90>)
 800fc30:	6013      	str	r3, [r2, #0]
         prev_motion = 0;
 800fc32:	4b1b      	ldr	r3, [pc, #108]	; (800fca0 <MotionDetection+0x94>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800fc38:	e01c      	b.n	800fc74 <MotionDetection+0x68>
	{

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800fc3a:	2101      	movs	r1, #1
 800fc3c:	4819      	ldr	r0, [pc, #100]	; (800fca4 <MotionDetection+0x98>)
 800fc3e:	f7f5 fd3f 	bl	80056c0 <HAL_GPIO_ReadPin>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d003      	beq.n	800fc50 <MotionDetection+0x44>
				_RunTime_Packet.motion_detection = 1;
 800fc48:	4b17      	ldr	r3, [pc, #92]	; (800fca8 <MotionDetection+0x9c>)
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	731a      	strb	r2, [r3, #12]
 800fc4e:	e002      	b.n	800fc56 <MotionDetection+0x4a>
				//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
			}
			else {
				_RunTime_Packet.motion_detection = 0;
 800fc50:	4b15      	ldr	r3, [pc, #84]	; (800fca8 <MotionDetection+0x9c>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	731a      	strb	r2, [r3, #12]
			}

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
			cli_printf(cli,"PIR Motion: %s\r\n",_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 800fc56:	4b14      	ldr	r3, [pc, #80]	; (800fca8 <MotionDetection+0x9c>)
 800fc58:	7b1b      	ldrb	r3, [r3, #12]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d101      	bne.n	800fc62 <MotionDetection+0x56>
 800fc5e:	4b13      	ldr	r3, [pc, #76]	; (800fcac <MotionDetection+0xa0>)
 800fc60:	e000      	b.n	800fc64 <MotionDetection+0x58>
 800fc62:	4b13      	ldr	r3, [pc, #76]	; (800fcb0 <MotionDetection+0xa4>)
 800fc64:	461a      	mov	r2, r3
 800fc66:	4913      	ldr	r1, [pc, #76]	; (800fcb4 <MotionDetection+0xa8>)
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f7fe feaf 	bl	800e9cc <cli_printf>
//	         	}
HAL_Delay(100);
 800fc6e:	2064      	movs	r0, #100	; 0x64
 800fc70:	f7f3 fd66 	bl	8003740 <HAL_Delay>
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800fc74:	f7f3 fd58 	bl	8003728 <HAL_GetTick>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	4b08      	ldr	r3, [pc, #32]	; (800fc9c <MotionDetection+0x90>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	1ad2      	subs	r2, r2, r3
 800fc80:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <MotionDetection+0xac>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d3d8      	bcc.n	800fc3a <MotionDetection+0x2e>

	}

	cli_printf(cli,"Session ended");
 800fc88:	490c      	ldr	r1, [pc, #48]	; (800fcbc <MotionDetection+0xb0>)
 800fc8a:	68f8      	ldr	r0, [r7, #12]
 800fc8c:	f7fe fe9e 	bl	800e9cc <cli_printf>

}
 800fc90:	bf00      	nop
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08020a24 	.word	0x08020a24
 800fc9c:	20001a54 	.word	0x20001a54
 800fca0:	20001a5c 	.word	0x20001a5c
 800fca4:	40020000 	.word	0x40020000
 800fca8:	20001470 	.word	0x20001470
 800fcac:	08020a5c 	.word	0x08020a5c
 800fcb0:	08020a64 	.word	0x08020a64
 800fcb4:	08020a6c 	.word	0x08020a6c
 800fcb8:	2000001c 	.word	0x2000001c
 800fcbc:	08020a80 	.word	0x08020a80

0800fcc0 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"AirQuality Measured Values:");
 800fccc:	492c      	ldr	r1, [pc, #176]	; (800fd80 <AirQuality+0xc0>)
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f7fe fe7c 	bl	800e9cc <cli_printf>
	if(_RunTime_Packet.pm1_0 == 0 && _RunTime_Packet.pm2_5 == 0 && _RunTime_Packet.pm4_0 == 0 && _RunTime_Packet.pm10_0 == 0)
 800fcd4:	4b2b      	ldr	r3, [pc, #172]	; (800fd84 <AirQuality+0xc4>)
 800fcd6:	edd3 7a04 	vldr	s15, [r3, #16]
 800fcda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce2:	d11c      	bne.n	800fd1e <AirQuality+0x5e>
 800fce4:	4b27      	ldr	r3, [pc, #156]	; (800fd84 <AirQuality+0xc4>)
 800fce6:	edd3 7a05 	vldr	s15, [r3, #20]
 800fcea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf2:	d114      	bne.n	800fd1e <AirQuality+0x5e>
 800fcf4:	4b23      	ldr	r3, [pc, #140]	; (800fd84 <AirQuality+0xc4>)
 800fcf6:	edd3 7a06 	vldr	s15, [r3, #24]
 800fcfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	d10c      	bne.n	800fd1e <AirQuality+0x5e>
 800fd04:	4b1f      	ldr	r3, [pc, #124]	; (800fd84 <AirQuality+0xc4>)
 800fd06:	edd3 7a07 	vldr	s15, [r3, #28]
 800fd0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd12:	d104      	bne.n	800fd1e <AirQuality+0x5e>
	{
		cli_printf(cli,"Calculating, try again later");
 800fd14:	491c      	ldr	r1, [pc, #112]	; (800fd88 <AirQuality+0xc8>)
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7fe fe58 	bl	800e9cc <cli_printf>
 800fd1c:	e02c      	b.n	800fd78 <AirQuality+0xb8>
	}
	else
	{
	cli_printf(cli,"%0.2f pm1.0", _RunTime_Packet.pm1_0);
 800fd1e:	4b19      	ldr	r3, [pc, #100]	; (800fd84 <AirQuality+0xc4>)
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7f0 fc28 	bl	8000578 <__aeabi_f2d>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	4917      	ldr	r1, [pc, #92]	; (800fd8c <AirQuality+0xcc>)
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f7fe fe4c 	bl	800e9cc <cli_printf>
	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
 800fd34:	4b13      	ldr	r3, [pc, #76]	; (800fd84 <AirQuality+0xc4>)
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7f0 fc1d 	bl	8000578 <__aeabi_f2d>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	4913      	ldr	r1, [pc, #76]	; (800fd90 <AirQuality+0xd0>)
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f7fe fe41 	bl	800e9cc <cli_printf>
	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
 800fd4a:	4b0e      	ldr	r3, [pc, #56]	; (800fd84 <AirQuality+0xc4>)
 800fd4c:	699b      	ldr	r3, [r3, #24]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7f0 fc12 	bl	8000578 <__aeabi_f2d>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	490e      	ldr	r1, [pc, #56]	; (800fd94 <AirQuality+0xd4>)
 800fd5a:	68f8      	ldr	r0, [r7, #12]
 800fd5c:	f7fe fe36 	bl	800e9cc <cli_printf>
	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
 800fd60:	4b08      	ldr	r3, [pc, #32]	; (800fd84 <AirQuality+0xc4>)
 800fd62:	69db      	ldr	r3, [r3, #28]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f0 fc07 	bl	8000578 <__aeabi_f2d>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	490a      	ldr	r1, [pc, #40]	; (800fd98 <AirQuality+0xd8>)
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f7fe fe2b 	bl	800e9cc <cli_printf>
	}


}
 800fd76:	bf00      	nop
 800fd78:	bf00      	nop
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	08020a90 	.word	0x08020a90
 800fd84:	20001470 	.word	0x20001470
 800fd88:	08020aac 	.word	0x08020aac
 800fd8c:	08020acc 	.word	0x08020acc
 800fd90:	08020ad8 	.word	0x08020ad8
 800fd94:	08020ae8 	.word	0x08020ae8
 800fd98:	08020af8 	.word	0x08020af8

0800fd9c <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 800fda8:	4808      	ldr	r0, [pc, #32]	; (800fdcc <BattVolt+0x30>)
 800fdaa:	f002 f9e9 	bl	8012180 <adc_Measure>
	cli_printf(cli,"Battery voltage: %0.2f",_RunTime_Packet.battery_voltage);
 800fdae:	4b08      	ldr	r3, [pc, #32]	; (800fdd0 <BattVolt+0x34>)
 800fdb0:	6a1b      	ldr	r3, [r3, #32]
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7f0 fbe0 	bl	8000578 <__aeabi_f2d>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	4905      	ldr	r1, [pc, #20]	; (800fdd4 <BattVolt+0x38>)
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7fe fe04 	bl	800e9cc <cli_printf>


}
 800fdc4:	bf00      	nop
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20001490 	.word	0x20001490
 800fdd0:	20001470 	.word	0x20001470
 800fdd4:	08020b08 	.word	0x08020b08

0800fdd8 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 800fdd8:	b5b0      	push	{r4, r5, r7, lr}
 800fdda:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800fdde:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 800fde0:	f000 fcd1 	bl	8010786 <embeddedCliNewDefault>
 800fde4:	4603      	mov	r3, r0
 800fde6:	4aac      	ldr	r2, [pc, #688]	; (8010098 <initializeEmbeddedCli+0x2c0>)
 800fde8:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 800fdea:	4bac      	ldr	r3, [pc, #688]	; (801009c <initializeEmbeddedCli+0x2c4>)
 800fdec:	f507 7411 	add.w	r4, r7, #580	; 0x244
 800fdf0:	461d      	mov	r5, r3
 800fdf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdf6:	682b      	ldr	r3, [r5, #0]
 800fdf8:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 800fdfa:	4ba9      	ldr	r3, [pc, #676]	; (80100a0 <initializeEmbeddedCli+0x2c8>)
 800fdfc:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800fe00:	461d      	mov	r5, r3
 800fe02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe06:	682b      	ldr	r3, [r5, #0]
 800fe08:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor", .tokenizeArgs = true, .context = NULL,
			.binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature", .help =
 800fe0a:	4ba6      	ldr	r3, [pc, #664]	; (80100a4 <initializeEmbeddedCli+0x2cc>)
 800fe0c:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 800fe10:	461d      	mov	r5, r3
 800fe12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe16:	682b      	ldr	r3, [r5, #0]
 800fe18:	6023      	str	r3, [r4, #0]
				"Device Signature-Electronic ID", .tokenizeArgs = true, .context = NULL,
				.binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 800fe1a:	4ba3      	ldr	r3, [pc, #652]	; (80100a8 <initializeEmbeddedCli+0x2d0>)
 800fe1c:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800fe20:	461d      	mov	r5, r3
 800fe22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe26:	682b      	ldr	r3, [r5, #0]
 800fe28:	6023      	str	r3, [r4, #0]
				"Sets ID", .tokenizeArgs = true, .context = NULL,
				.binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 800fe2a:	4ba0      	ldr	r3, [pc, #640]	; (80100ac <initializeEmbeddedCli+0x2d4>)
 800fe2c:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 800fe30:	461d      	mov	r5, r3
 800fe32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe36:	682b      	ldr	r3, [r5, #0]
 800fe38:	6023      	str	r3, [r4, #0]
				"Sets Location", .tokenizeArgs = true, .context = NULL,
				.binding = SetLocation };

	CliCommandBinding Set_name = { .name = "set-name", .help =
 800fe3a:	4b9d      	ldr	r3, [pc, #628]	; (80100b0 <initializeEmbeddedCli+0x2d8>)
 800fe3c:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 800fe40:	461d      	mov	r5, r3
 800fe42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe46:	682b      	ldr	r3, [r5, #0]
 800fe48:	6023      	str	r3, [r4, #0]
				"Sets name", .tokenizeArgs = true, .context = NULL,
				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 800fe4a:	4b9a      	ldr	r3, [pc, #616]	; (80100b4 <initializeEmbeddedCli+0x2dc>)
 800fe4c:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 800fe50:	461d      	mov	r5, r3
 800fe52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe56:	682b      	ldr	r3, [r5, #0]
 800fe58:	6023      	str	r3, [r4, #0]
				"Sets group", .tokenizeArgs = true, .context = NULL,
				.binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help =
 800fe5a:	4b97      	ldr	r3, [pc, #604]	; (80100b8 <initializeEmbeddedCli+0x2e0>)
 800fe5c:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 800fe60:	461d      	mov	r5, r3
 800fe62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe66:	682b      	ldr	r3, [r5, #0]
 800fe68:	6023      	str	r3, [r4, #0]
				"gets ID", .tokenizeArgs = true, .context = NULL,
				.binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 800fe6a:	4b94      	ldr	r3, [pc, #592]	; (80100bc <initializeEmbeddedCli+0x2e4>)
 800fe6c:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800fe70:	461d      	mov	r5, r3
 800fe72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe76:	682b      	ldr	r3, [r5, #0]
 800fe78:	6023      	str	r3, [r4, #0]
				"gets Location", .tokenizeArgs = true, .context = NULL,
				.binding = GetLocation };

	CliCommandBinding Get_name = { .name = "get-name", .help =
 800fe7a:	4b91      	ldr	r3, [pc, #580]	; (80100c0 <initializeEmbeddedCli+0x2e8>)
 800fe7c:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 800fe80:	461d      	mov	r5, r3
 800fe82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe86:	682b      	ldr	r3, [r5, #0]
 800fe88:	6023      	str	r3, [r4, #0]
				"gets name", .tokenizeArgs = true, .context = NULL,
				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help =
 800fe8a:	4b8e      	ldr	r3, [pc, #568]	; (80100c4 <initializeEmbeddedCli+0x2ec>)
 800fe8c:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 800fe90:	461d      	mov	r5, r3
 800fe92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe96:	682b      	ldr	r3, [r5, #0]
 800fe98:	6023      	str	r3, [r4, #0]
				"gets group", .tokenizeArgs = true, .context = NULL,
				.binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 800fe9a:	4b8b      	ldr	r3, [pc, #556]	; (80100c8 <initializeEmbeddedCli+0x2f0>)
 800fe9c:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800fea0:	461d      	mov	r5, r3
 800fea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fea6:	682b      	ldr	r3, [r5, #0]
 800fea8:	6023      	str	r3, [r4, #0]
			"Set Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help =
 800feaa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800feae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800feb2:	4a86      	ldr	r2, [pc, #536]	; (80100cc <initializeEmbeddedCli+0x2f4>)
 800feb4:	461c      	mov	r4, r3
 800feb6:	4615      	mov	r5, r2
 800feb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800feba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	6023      	str	r3, [r4, #0]
			"Set Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 800fec0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fec4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800fec8:	4a81      	ldr	r2, [pc, #516]	; (80100d0 <initializeEmbeddedCli+0x2f8>)
 800feca:	461c      	mov	r4, r3
 800fecc:	4615      	mov	r5, r2
 800fece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fed2:	682b      	ldr	r3, [r5, #0]
 800fed4:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 800fed6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800feda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fede:	4a7d      	ldr	r2, [pc, #500]	; (80100d4 <initializeEmbeddedCli+0x2fc>)
 800fee0:	461c      	mov	r4, r3
 800fee2:	4615      	mov	r5, r2
 800fee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fee8:	682b      	ldr	r3, [r5, #0]
 800feea:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 800feec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fef0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800fef4:	4a78      	ldr	r2, [pc, #480]	; (80100d8 <initializeEmbeddedCli+0x300>)
 800fef6:	461c      	mov	r4, r3
 800fef8:	4615      	mov	r5, r2
 800fefa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fefc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true, .context = NULL,
			.binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 800ff02:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ff0a:	4a74      	ldr	r2, [pc, #464]	; (80100dc <initializeEmbeddedCli+0x304>)
 800ff0c:	461c      	mov	r4, r3
 800ff0e:	4615      	mov	r5, r2
 800ff10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };


	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 800ff18:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff1c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ff20:	4a6f      	ldr	r2, [pc, #444]	; (80100e0 <initializeEmbeddedCli+0x308>)
 800ff22:	461c      	mov	r4, r3
 800ff24:	4615      	mov	r5, r2
 800ff26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff2a:	682b      	ldr	r3, [r5, #0]
 800ff2c:	6023      	str	r3, [r4, #0]
			"Set desired filename", .tokenizeArgs = true, .context = NULL,
			.binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 800ff2e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ff36:	4a6b      	ldr	r2, [pc, #428]	; (80100e4 <initializeEmbeddedCli+0x30c>)
 800ff38:	461c      	mov	r4, r3
 800ff3a:	4615      	mov	r5, r2
 800ff3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL,
			.binding = GetFilename };


	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 800ff44:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ff4c:	4a66      	ldr	r2, [pc, #408]	; (80100e8 <initializeEmbeddedCli+0x310>)
 800ff4e:	461c      	mov	r4, r3
 800ff50:	4615      	mov	r5, r2
 800ff52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff56:	682b      	ldr	r3, [r5, #0]
 800ff58:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 800ff5a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff5e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ff62:	4a62      	ldr	r2, [pc, #392]	; (80100ec <initializeEmbeddedCli+0x314>)
 800ff64:	461c      	mov	r4, r3
 800ff66:	4615      	mov	r5, r2
 800ff68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL,
			.binding = GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 800ff70:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ff78:	4a5d      	ldr	r2, [pc, #372]	; (80100f0 <initializeEmbeddedCli+0x318>)
 800ff7a:	461c      	mov	r4, r3
 800ff7c:	4615      	mov	r5, r2
 800ff7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff82:	682b      	ldr	r3, [r5, #0]
 800ff84:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context = NULL,
			.binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 800ff86:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff8a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800ff8e:	4a59      	ldr	r2, [pc, #356]	; (80100f4 <initializeEmbeddedCli+0x31c>)
 800ff90:	461c      	mov	r4, r3
 800ff92:	4615      	mov	r5, r2
 800ff94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff98:	682b      	ldr	r3, [r5, #0]
 800ff9a:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 800ff9c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ffa0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ffa4:	4a54      	ldr	r2, [pc, #336]	; (80100f8 <initializeEmbeddedCli+0x320>)
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	4615      	mov	r5, r2
 800ffaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffae:	682b      	ldr	r3, [r5, #0]
 800ffb0:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 800ffb2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ffb6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ffba:	4a50      	ldr	r2, [pc, #320]	; (80100fc <initializeEmbeddedCli+0x324>)
 800ffbc:	461c      	mov	r4, r3
 800ffbe:	4615      	mov	r5, r2
 800ffc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	6023      	str	r3, [r4, #0]
			"Check Co2 level", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 800ffc8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ffcc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ffd0:	4a4b      	ldr	r2, [pc, #300]	; (8010100 <initializeEmbeddedCli+0x328>)
 800ffd2:	461c      	mov	r4, r3
 800ffd4:	4615      	mov	r5, r2
 800ffd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffda:	682b      	ldr	r3, [r5, #0]
 800ffdc:	6023      	str	r3, [r4, #0]
			"Check Temperature level", .tokenizeArgs = true, .context = NULL,
			.binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 800ffde:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ffe2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800ffe6:	4a47      	ldr	r2, [pc, #284]	; (8010104 <initializeEmbeddedCli+0x32c>)
 800ffe8:	461c      	mov	r4, r3
 800ffea:	4615      	mov	r5, r2
 800ffec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	6023      	str	r3, [r4, #0]
			"Check Humidity level", .tokenizeArgs = true, .context = NULL,
			.binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 800fff4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fff8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fffc:	4a42      	ldr	r2, [pc, #264]	; (8010108 <initializeEmbeddedCli+0x330>)
 800fffe:	461c      	mov	r4, r3
 8010000:	4615      	mov	r5, r2
 8010002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010006:	682b      	ldr	r3, [r5, #0]
 8010008:	6023      	str	r3, [r4, #0]
			"Detect Motion", .tokenizeArgs = true, .context = NULL,
			.binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 801000a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801000e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010012:	4a3e      	ldr	r2, [pc, #248]	; (801010c <initializeEmbeddedCli+0x334>)
 8010014:	461c      	mov	r4, r3
 8010016:	4615      	mov	r5, r2
 8010018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801001a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	6023      	str	r3, [r4, #0]
				"Check air quality level", .tokenizeArgs = true, .context = NULL,
				.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-volt", .help =
 8010020:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010024:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010028:	4a39      	ldr	r2, [pc, #228]	; (8010110 <initializeEmbeddedCli+0x338>)
 801002a:	461c      	mov	r4, r3
 801002c:	4615      	mov	r5, r2
 801002e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010032:	682b      	ldr	r3, [r5, #0]
 8010034:	6023      	str	r3, [r4, #0]
				.binding = BattVolt };



	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8010036:	4b18      	ldr	r3, [pc, #96]	; (8010098 <initializeEmbeddedCli+0x2c0>)
 8010038:	681c      	ldr	r4, [r3, #0]
 801003a:	466a      	mov	r2, sp
 801003c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010040:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010044:	e882 0003 	stmia.w	r2, {r0, r1}
 8010048:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801004c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801004e:	4620      	mov	r0, r4
 8010050:	f000 fc57 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8010054:	4b10      	ldr	r3, [pc, #64]	; (8010098 <initializeEmbeddedCli+0x2c0>)
 8010056:	681c      	ldr	r4, [r3, #0]
 8010058:	466a      	mov	r2, sp
 801005a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801005e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010062:	e882 0003 	stmia.w	r2, {r0, r1}
 8010066:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801006a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801006c:	4620      	mov	r0, r4
 801006e:	f000 fc48 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <initializeEmbeddedCli+0x2c0>)
 8010074:	681c      	ldr	r4, [r3, #0]
 8010076:	466a      	mov	r2, sp
 8010078:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801007c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010080:	e882 0003 	stmia.w	r2, {r0, r1}
 8010084:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010088:	cb0e      	ldmia	r3, {r1, r2, r3}
 801008a:	4620      	mov	r0, r4
 801008c:	f000 fc39 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8010090:	4b01      	ldr	r3, [pc, #4]	; (8010098 <initializeEmbeddedCli+0x2c0>)
 8010092:	681c      	ldr	r4, [r3, #0]
 8010094:	466a      	mov	r2, sp
 8010096:	e03d      	b.n	8010114 <initializeEmbeddedCli+0x33c>
 8010098:	20001a4c 	.word	0x20001a4c
 801009c:	08020b20 	.word	0x08020b20
 80100a0:	08020b34 	.word	0x08020b34
 80100a4:	08020b48 	.word	0x08020b48
 80100a8:	08020b5c 	.word	0x08020b5c
 80100ac:	08020b70 	.word	0x08020b70
 80100b0:	08020b84 	.word	0x08020b84
 80100b4:	08020b98 	.word	0x08020b98
 80100b8:	08020bac 	.word	0x08020bac
 80100bc:	08020bc0 	.word	0x08020bc0
 80100c0:	08020bd4 	.word	0x08020bd4
 80100c4:	08020be8 	.word	0x08020be8
 80100c8:	08020bfc 	.word	0x08020bfc
 80100cc:	08020c10 	.word	0x08020c10
 80100d0:	08020c24 	.word	0x08020c24
 80100d4:	08020c38 	.word	0x08020c38
 80100d8:	08020c4c 	.word	0x08020c4c
 80100dc:	08020c60 	.word	0x08020c60
 80100e0:	08020c74 	.word	0x08020c74
 80100e4:	08020c88 	.word	0x08020c88
 80100e8:	08020c9c 	.word	0x08020c9c
 80100ec:	08020cb0 	.word	0x08020cb0
 80100f0:	08020cc4 	.word	0x08020cc4
 80100f4:	08020cd8 	.word	0x08020cd8
 80100f8:	08020cec 	.word	0x08020cec
 80100fc:	08020d00 	.word	0x08020d00
 8010100:	08020d14 	.word	0x08020d14
 8010104:	08020d28 	.word	0x08020d28
 8010108:	08020d3c 	.word	0x08020d3c
 801010c:	08020d50 	.word	0x08020d50
 8010110:	08020d64 	.word	0x08020d64
 8010114:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8010118:	e893 0003 	ldmia.w	r3, {r0, r1}
 801011c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010126:	4620      	mov	r0, r4
 8010128:	f000 fbeb 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 801012c:	4bd6      	ldr	r3, [pc, #856]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801012e:	681c      	ldr	r4, [r3, #0]
 8010130:	466a      	mov	r2, sp
 8010132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8010136:	e893 0003 	ldmia.w	r3, {r0, r1}
 801013a:	e882 0003 	stmia.w	r2, {r0, r1}
 801013e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8010142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010144:	4620      	mov	r0, r4
 8010146:	f000 fbdc 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_name);
 801014a:	4bcf      	ldr	r3, [pc, #828]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801014c:	681c      	ldr	r4, [r3, #0]
 801014e:	466a      	mov	r2, sp
 8010150:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8010154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010158:	e882 0003 	stmia.w	r2, {r0, r1}
 801015c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8010160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010162:	4620      	mov	r0, r4
 8010164:	f000 fbcd 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_group);
 8010168:	4bc7      	ldr	r3, [pc, #796]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801016a:	681c      	ldr	r4, [r3, #0]
 801016c:	466a      	mov	r2, sp
 801016e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8010172:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010176:	e882 0003 	stmia.w	r2, {r0, r1}
 801017a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801017e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fbbe 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8010186:	4bc0      	ldr	r3, [pc, #768]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010188:	681c      	ldr	r4, [r3, #0]
 801018a:	466a      	mov	r2, sp
 801018c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8010190:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010194:	e882 0003 	stmia.w	r2, {r0, r1}
 8010198:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801019c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fbaf 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 80101a4:	4bb8      	ldr	r3, [pc, #736]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80101a6:	681c      	ldr	r4, [r3, #0]
 80101a8:	466a      	mov	r2, sp
 80101aa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80101ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101b2:	e882 0003 	stmia.w	r2, {r0, r1}
 80101b6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80101ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101bc:	4620      	mov	r0, r4
 80101be:	f000 fba0 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_name);
 80101c2:	4bb1      	ldr	r3, [pc, #708]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80101c4:	681c      	ldr	r4, [r3, #0]
 80101c6:	466a      	mov	r2, sp
 80101c8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80101cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80101d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80101d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101da:	4620      	mov	r0, r4
 80101dc:	f000 fb91 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_group);
 80101e0:	4ba9      	ldr	r3, [pc, #676]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80101e2:	681c      	ldr	r4, [r3, #0]
 80101e4:	466a      	mov	r2, sp
 80101e6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80101ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80101f2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80101f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 fb82 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 80101fe:	4ba2      	ldr	r3, [pc, #648]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010200:	681c      	ldr	r4, [r3, #0]
 8010202:	466a      	mov	r2, sp
 8010204:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010208:	e893 0003 	ldmia.w	r3, {r0, r1}
 801020c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010210:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8010214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010216:	4620      	mov	r0, r4
 8010218:	f000 fb73 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 801021c:	4b9a      	ldr	r3, [pc, #616]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801021e:	681c      	ldr	r4, [r3, #0]
 8010220:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010228:	466d      	mov	r5, sp
 801022a:	f103 020c 	add.w	r2, r3, #12
 801022e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010232:	e885 0003 	stmia.w	r5, {r0, r1}
 8010236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010238:	4620      	mov	r0, r4
 801023a:	f000 fb62 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 801023e:	4b92      	ldr	r3, [pc, #584]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010240:	681c      	ldr	r4, [r3, #0]
 8010242:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010246:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801024a:	466d      	mov	r5, sp
 801024c:	f103 020c 	add.w	r2, r3, #12
 8010250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010254:	e885 0003 	stmia.w	r5, {r0, r1}
 8010258:	cb0e      	ldmia	r3, {r1, r2, r3}
 801025a:	4620      	mov	r0, r4
 801025c:	f000 fb51 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8010260:	4b89      	ldr	r3, [pc, #548]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010262:	681c      	ldr	r4, [r3, #0]
 8010264:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801026c:	466d      	mov	r5, sp
 801026e:	f103 020c 	add.w	r2, r3, #12
 8010272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010276:	e885 0003 	stmia.w	r5, {r0, r1}
 801027a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801027c:	4620      	mov	r0, r4
 801027e:	f000 fb40 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8010282:	4b81      	ldr	r3, [pc, #516]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010284:	681c      	ldr	r4, [r3, #0]
 8010286:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801028a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801028e:	466d      	mov	r5, sp
 8010290:	f103 020c 	add.w	r2, r3, #12
 8010294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010298:	e885 0003 	stmia.w	r5, {r0, r1}
 801029c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801029e:	4620      	mov	r0, r4
 80102a0:	f000 fb2f 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 80102a4:	4b78      	ldr	r3, [pc, #480]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80102a6:	681c      	ldr	r4, [r3, #0]
 80102a8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102ac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80102b0:	466d      	mov	r5, sp
 80102b2:	f103 020c 	add.w	r2, r3, #12
 80102b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80102be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 fb1e 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 80102c6:	4b70      	ldr	r3, [pc, #448]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80102c8:	681c      	ldr	r4, [r3, #0]
 80102ca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80102d2:	466d      	mov	r5, sp
 80102d4:	f103 020c 	add.w	r2, r3, #12
 80102d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80102e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102e2:	4620      	mov	r0, r4
 80102e4:	f000 fb0d 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 80102e8:	4b67      	ldr	r3, [pc, #412]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80102ea:	681c      	ldr	r4, [r3, #0]
 80102ec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80102f4:	466d      	mov	r5, sp
 80102f6:	f103 020c 	add.w	r2, r3, #12
 80102fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8010302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010304:	4620      	mov	r0, r4
 8010306:	f000 fafc 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 801030a:	4b5f      	ldr	r3, [pc, #380]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801030c:	681c      	ldr	r4, [r3, #0]
 801030e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010312:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010316:	466d      	mov	r5, sp
 8010318:	f103 020c 	add.w	r2, r3, #12
 801031c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010320:	e885 0003 	stmia.w	r5, {r0, r1}
 8010324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010326:	4620      	mov	r0, r4
 8010328:	f000 faeb 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 801032c:	4b56      	ldr	r3, [pc, #344]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801032e:	681c      	ldr	r4, [r3, #0]
 8010330:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010334:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010338:	466d      	mov	r5, sp
 801033a:	f103 020c 	add.w	r2, r3, #12
 801033e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010342:	e885 0003 	stmia.w	r5, {r0, r1}
 8010346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010348:	4620      	mov	r0, r4
 801034a:	f000 fada 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 801034e:	4b4e      	ldr	r3, [pc, #312]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010350:	681c      	ldr	r4, [r3, #0]
 8010352:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010356:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801035a:	466d      	mov	r5, sp
 801035c:	f103 020c 	add.w	r2, r3, #12
 8010360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010364:	e885 0003 	stmia.w	r5, {r0, r1}
 8010368:	cb0e      	ldmia	r3, {r1, r2, r3}
 801036a:	4620      	mov	r0, r4
 801036c:	f000 fac9 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8010370:	4b45      	ldr	r3, [pc, #276]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010372:	681c      	ldr	r4, [r3, #0]
 8010374:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010378:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801037c:	466d      	mov	r5, sp
 801037e:	f103 020c 	add.w	r2, r3, #12
 8010382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010386:	e885 0003 	stmia.w	r5, {r0, r1}
 801038a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801038c:	4620      	mov	r0, r4
 801038e:	f000 fab8 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8010392:	4b3d      	ldr	r3, [pc, #244]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010394:	681c      	ldr	r4, [r3, #0]
 8010396:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801039a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801039e:	466d      	mov	r5, sp
 80103a0:	f103 020c 	add.w	r2, r3, #12
 80103a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80103ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 faa7 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 80103b4:	4b34      	ldr	r3, [pc, #208]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80103b6:	681c      	ldr	r4, [r3, #0]
 80103b8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103bc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80103c0:	466d      	mov	r5, sp
 80103c2:	f103 020c 	add.w	r2, r3, #12
 80103c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80103ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103d0:	4620      	mov	r0, r4
 80103d2:	f000 fa96 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 80103d6:	4b2c      	ldr	r3, [pc, #176]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80103d8:	681c      	ldr	r4, [r3, #0]
 80103da:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103de:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80103e2:	466d      	mov	r5, sp
 80103e4:	f103 020c 	add.w	r2, r3, #12
 80103e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80103f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103f2:	4620      	mov	r0, r4
 80103f4:	f000 fa85 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 80103f8:	4b23      	ldr	r3, [pc, #140]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 80103fa:	681c      	ldr	r4, [r3, #0]
 80103fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010400:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010404:	466d      	mov	r5, sp
 8010406:	f103 020c 	add.w	r2, r3, #12
 801040a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801040e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010414:	4620      	mov	r0, r4
 8010416:	f000 fa74 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 801041a:	4b1b      	ldr	r3, [pc, #108]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801041c:	681c      	ldr	r4, [r3, #0]
 801041e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010422:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010426:	466d      	mov	r5, sp
 8010428:	f103 020c 	add.w	r2, r3, #12
 801042c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010430:	e885 0003 	stmia.w	r5, {r0, r1}
 8010434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010436:	4620      	mov	r0, r4
 8010438:	f000 fa63 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 801043c:	4b12      	ldr	r3, [pc, #72]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 801043e:	681c      	ldr	r4, [r3, #0]
 8010440:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010444:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010448:	466d      	mov	r5, sp
 801044a:	f103 020c 	add.w	r2, r3, #12
 801044e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010452:	e885 0003 	stmia.w	r5, {r0, r1}
 8010456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010458:	4620      	mov	r0, r4
 801045a:	f000 fa52 	bl	8010902 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 801045e:	4b0a      	ldr	r3, [pc, #40]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010460:	681c      	ldr	r4, [r3, #0]
 8010462:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010466:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801046a:	466d      	mov	r5, sp
 801046c:	f103 020c 	add.w	r2, r3, #12
 8010470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010474:	e885 0003 	stmia.w	r5, {r0, r1}
 8010478:	cb0e      	ldmia	r3, {r1, r2, r3}
 801047a:	4620      	mov	r0, r4
 801047c:	f000 fa41 	bl	8010902 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8010480:	4b01      	ldr	r3, [pc, #4]	; (8010488 <initializeEmbeddedCli+0x6b0>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	e002      	b.n	801048c <initializeEmbeddedCli+0x6b4>
 8010486:	bf00      	nop
 8010488:	20001a4c 	.word	0x20001a4c
 801048c:	4a06      	ldr	r2, [pc, #24]	; (80104a8 <initializeEmbeddedCli+0x6d0>)
 801048e:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010490:	4b06      	ldr	r3, [pc, #24]	; (80104ac <initializeEmbeddedCli+0x6d4>)
 8010492:	2201      	movs	r2, #1
 8010494:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010496:	4b06      	ldr	r3, [pc, #24]	; (80104b0 <initializeEmbeddedCli+0x6d8>)
 8010498:	2200      	movs	r2, #0
 801049a:	701a      	strb	r2, [r3, #0]
}
 801049c:	bf00      	nop
 801049e:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bdb0      	pop	{r4, r5, r7, pc}
 80104a6:	bf00      	nop
 80104a8:	0800e9a1 	.word	0x0800e9a1
 80104ac:	20001a59 	.word	0x20001a59
 80104b0:	20001a5a 	.word	0x20001a5a

080104b4 <console_process>:

void console_process(void) {
 80104b4:	b580      	push	{r7, lr}
 80104b6:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 80104b8:	4b03      	ldr	r3, [pc, #12]	; (80104c8 <console_process+0x14>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f000 f990 	bl	80107e2 <embeddedCliProcess>
}
 80104c2:	bf00      	nop
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	20001a4c 	.word	0x20001a4c

080104cc <console_uart_deinit>:



void console_uart_deinit()
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80104d0:	4803      	ldr	r0, [pc, #12]	; (80104e0 <console_uart_deinit+0x14>)
 80104d2:	f7fa ffb2 	bl	800b43a <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 80104d6:	4802      	ldr	r0, [pc, #8]	; (80104e0 <console_uart_deinit+0x14>)
 80104d8:	f7f2 ff08 	bl	80032ec <HAL_UART_MspDeInit>
}
 80104dc:	bf00      	nop
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	2000199c 	.word	0x2000199c

080104e4 <console_uart_init>:
void console_uart_init()
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80104e8:	4815      	ldr	r0, [pc, #84]	; (8010540 <console_uart_init+0x5c>)
 80104ea:	f7fa ffa6 	bl	800b43a <HAL_UART_DeInit>
	  huart1.Instance = USART1;
 80104ee:	4b14      	ldr	r3, [pc, #80]	; (8010540 <console_uart_init+0x5c>)
 80104f0:	4a14      	ldr	r2, [pc, #80]	; (8010544 <console_uart_init+0x60>)
 80104f2:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 80104f4:	4b12      	ldr	r3, [pc, #72]	; (8010540 <console_uart_init+0x5c>)
 80104f6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80104fa:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80104fc:	4b10      	ldr	r3, [pc, #64]	; (8010540 <console_uart_init+0x5c>)
 80104fe:	2200      	movs	r2, #0
 8010500:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8010502:	4b0f      	ldr	r3, [pc, #60]	; (8010540 <console_uart_init+0x5c>)
 8010504:	2200      	movs	r2, #0
 8010506:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8010508:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <console_uart_init+0x5c>)
 801050a:	2200      	movs	r2, #0
 801050c:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 801050e:	4b0c      	ldr	r3, [pc, #48]	; (8010540 <console_uart_init+0x5c>)
 8010510:	220c      	movs	r2, #12
 8010512:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010514:	4b0a      	ldr	r3, [pc, #40]	; (8010540 <console_uart_init+0x5c>)
 8010516:	2200      	movs	r2, #0
 8010518:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801051a:	4b09      	ldr	r3, [pc, #36]	; (8010540 <console_uart_init+0x5c>)
 801051c:	2200      	movs	r2, #0
 801051e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010520:	4807      	ldr	r0, [pc, #28]	; (8010540 <console_uart_init+0x5c>)
 8010522:	f7fa ff3d 	bl	800b3a0 <HAL_UART_Init>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <console_uart_init+0x4c>
	  {
	    Error_Handler();
 801052c:	f7f2 fbbe 	bl	8002cac <Error_Handler>
	  }
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010530:	2201      	movs	r2, #1
 8010532:	4905      	ldr	r1, [pc, #20]	; (8010548 <console_uart_init+0x64>)
 8010534:	4802      	ldr	r0, [pc, #8]	; (8010540 <console_uart_init+0x5c>)
 8010536:	f7fb f841 	bl	800b5bc <HAL_UART_Receive_IT>
}
 801053a:	bf00      	nop
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	2000199c 	.word	0x2000199c
 8010544:	40011000 	.word	0x40011000
 8010548:	20001a58 	.word	0x20001a58

0801054c <console_init>:

void console_init(void) {
 801054c:	b580      	push	{r7, lr}
 801054e:	af00      	add	r7, sp, #0
	console_uart_init();
 8010550:	f7ff ffc8 	bl	80104e4 <console_uart_init>
	initializeEmbeddedCli();
 8010554:	f7ff fc40 	bl	800fdd8 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010558:	2201      	movs	r2, #1
 801055a:	4903      	ldr	r1, [pc, #12]	; (8010568 <console_init+0x1c>)
 801055c:	4803      	ldr	r0, [pc, #12]	; (801056c <console_init+0x20>)
 801055e:	f7fb f82d 	bl	800b5bc <HAL_UART_Receive_IT>
}
 8010562:	bf00      	nop
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	20001a58 	.word	0x20001a58
 801056c:	2000199c 	.word	0x2000199c

08010570 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8010570:	b480      	push	{r7}
 8010572:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8010574:	4b0e      	ldr	r3, [pc, #56]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 8010576:	2240      	movs	r2, #64	; 0x40
 8010578:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 801057a:	4b0d      	ldr	r3, [pc, #52]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 801057c:	2240      	movs	r2, #64	; 0x40
 801057e:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8010580:	4b0b      	ldr	r3, [pc, #44]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 8010582:	2280      	movs	r2, #128	; 0x80
 8010584:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8010586:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 8010588:	2200      	movs	r2, #0
 801058a:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 801058c:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 801058e:	2200      	movs	r2, #0
 8010590:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 8010592:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 8010594:	2232      	movs	r2, #50	; 0x32
 8010596:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010598:	4b05      	ldr	r3, [pc, #20]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 801059a:	2201      	movs	r2, #1
 801059c:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 801059e:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
 80105a0:	4a04      	ldr	r2, [pc, #16]	; (80105b4 <embeddedCliDefaultConfig+0x44>)
 80105a2:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 80105a4:	4b02      	ldr	r3, [pc, #8]	; (80105b0 <embeddedCliDefaultConfig+0x40>)
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr
 80105b0:	20001a60 	.word	0x20001a60
 80105b4:	08020d9c 	.word	0x08020d9c

080105b8 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80105b8:	b480      	push	{r7}
 80105ba:	b085      	sub	sp, #20
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	895b      	ldrh	r3, [r3, #10]
 80105c4:	2201      	movs	r2, #1
 80105c6:	4413      	add	r3, r2
 80105c8:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	889b      	ldrh	r3, [r3, #4]
 80105ce:	3303      	adds	r3, #3
 80105d0:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	88db      	ldrh	r3, [r3, #6]
 80105d6:	3303      	adds	r3, #3
 80105d8:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80105da:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	891b      	ldrh	r3, [r3, #8]
 80105e0:	3303      	adds	r3, #3
 80105e2:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80105e4:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80105e6:	89fa      	ldrh	r2, [r7, #14]
 80105e8:	4613      	mov	r3, r2
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	4413      	add	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	3303      	adds	r3, #3
 80105f2:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80105f4:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 80105f6:	89fb      	ldrh	r3, [r7, #14]
 80105f8:	3303      	adds	r3, #3
 80105fa:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80105fc:	4413      	add	r3, r2
 80105fe:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8010600:	b29b      	uxth	r3, r3
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	b29b      	uxth	r3, r3
}
 8010606:	4618      	mov	r0, r3
 8010608:	3714      	adds	r7, #20
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr

08010612 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8010612:	b580      	push	{r7, lr}
 8010614:	b088      	sub	sp, #32
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 801061a:	2300      	movs	r3, #0
 801061c:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	895b      	ldrh	r3, [r3, #10]
 8010622:	2201      	movs	r2, #1
 8010624:	4413      	add	r3, r2
 8010626:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff ffc5 	bl	80105b8 <embeddedCliRequiredSize>
 801062e:	4603      	mov	r3, r0
 8010630:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8010632:	2300      	movs	r3, #0
 8010634:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10f      	bne.n	801065e <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 801063e:	6938      	ldr	r0, [r7, #16]
 8010640:	f00a fd68 	bl	801b114 <malloc>
 8010644:	4603      	mov	r3, r0
 8010646:	461a      	mov	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d101      	bne.n	8010658 <embeddedCliNew+0x46>
            return NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	e092      	b.n	801077e <embeddedCliNew+0x16c>
        allocated = true;
 8010658:	2301      	movs	r3, #1
 801065a:	77fb      	strb	r3, [r7, #31]
 801065c:	e007      	b.n	801066e <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	8a1b      	ldrh	r3, [r3, #16]
 8010662:	461a      	mov	r2, r3
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	4293      	cmp	r3, r2
 8010668:	d901      	bls.n	801066e <embeddedCliNew+0x5c>
        return NULL;
 801066a:	2300      	movs	r3, #0
 801066c:	e087      	b.n	801077e <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	2100      	movs	r1, #0
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f00a fd7b 	bl	801b174 <memset>

    cli = (EmbeddedCli *) buf;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3310      	adds	r3, #16
 8010686:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	3334      	adds	r3, #52	; 0x34
 8010692:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	889b      	ldrh	r3, [r3, #4]
 80106a4:	3303      	adds	r3, #3
 80106a6:	f023 0303 	bic.w	r3, r3, #3
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	4413      	add	r3, r2
 80106ae:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	88db      	ldrh	r3, [r3, #6]
 80106ba:	3303      	adds	r3, #3
 80106bc:	f023 0303 	bic.w	r3, r3, #3
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	4413      	add	r3, r2
 80106c4:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 80106cc:	8afa      	ldrh	r2, [r7, #22]
 80106ce:	4613      	mov	r3, r2
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	4413      	add	r3, r2
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	3303      	adds	r3, #3
 80106d8:	f023 0303 	bic.w	r3, r3, #3
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	4413      	add	r3, r2
 80106e0:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 80106e8:	8afb      	ldrh	r3, [r7, #22]
 80106ea:	3303      	adds	r3, #3
 80106ec:	f023 0303 	bic.w	r3, r3, #3
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	4413      	add	r3, r2
 80106f4:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	891a      	ldrh	r2, [r3, #8]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8010704:	7ffb      	ldrb	r3, [r7, #31]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d008      	beq.n	801071c <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010710:	f043 0304 	orr.w	r3, r3, #4
 8010714:	b2da      	uxtb	r2, r3
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	7c9b      	ldrb	r3, [r3, #18]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d008      	beq.n	8010736 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801072a:	f043 0320 	orr.w	r3, r3, #32
 801072e:	b2da      	uxtb	r2, r3
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	889a      	ldrh	r2, [r3, #4]
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2200      	movs	r2, #0
 8010742:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2200      	movs	r2, #0
 8010748:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	88da      	ldrh	r2, [r3, #6]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2200      	movs	r2, #0
 8010756:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	895b      	ldrh	r3, [r3, #10]
 801075c:	2201      	movs	r2, #1
 801075e:	4413      	add	r3, r2
 8010760:	b29a      	uxth	r2, r3
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8010776:	69b8      	ldr	r0, [r7, #24]
 8010778:	f000 fc5e 	bl	8011038 <initInternalBindings>

    return cli;
 801077c:	69bb      	ldr	r3, [r7, #24]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3720      	adds	r7, #32
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8010786:	b580      	push	{r7, lr}
 8010788:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 801078a:	f7ff fef1 	bl	8010570 <embeddedCliDefaultConfig>
 801078e:	4603      	mov	r3, r0
 8010790:	4618      	mov	r0, r3
 8010792:	f7ff ff3e 	bl	8010612 <embeddedCliNew>
 8010796:	4603      	mov	r3, r0
}
 8010798:	4618      	mov	r0, r3
 801079a:	bd80      	pop	{r7, pc}

0801079c <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	460b      	mov	r3, r1
 80107a6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	3310      	adds	r3, #16
 80107b2:	78fa      	ldrb	r2, [r7, #3]
 80107b4:	4611      	mov	r1, r2
 80107b6:	4618      	mov	r0, r3
 80107b8:	f000 ffe1 	bl	801177e <fifoBufPush>
 80107bc:	4603      	mov	r3, r0
 80107be:	f083 0301 	eor.w	r3, r3, #1
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d008      	beq.n	80107da <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80107ce:	f043 0301 	orr.w	r3, r3, #1
 80107d2:	b2da      	uxtb	r2, r3
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 80107da:	bf00      	nop
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b084      	sub	sp, #16
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f000 8083 	beq.w	80108fa <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010800:	f003 0302 	and.w	r3, r3, #2
 8010804:	2b00      	cmp	r3, #0
 8010806:	d155      	bne.n	80108b4 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801080e:	f043 0302 	orr.w	r3, r3, #2
 8010812:	b2da      	uxtb	r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	4619      	mov	r1, r3
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 ff0b 	bl	801163c <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010826:	e045      	b.n	80108b4 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	3310      	adds	r3, #16
 801082c:	4618      	mov	r0, r3
 801082e:	f000 ff7e 	bl	801172e <fifoBufPop>
 8010832:	4603      	mov	r3, r0
 8010834:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801083c:	f003 0308 	and.w	r3, r3, #8
 8010840:	2b00      	cmp	r3, #0
 8010842:	d005      	beq.n	8010850 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8010844:	7afb      	ldrb	r3, [r7, #11]
 8010846:	4619      	mov	r1, r3
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 fa17 	bl	8010c7c <onEscapedInput>
 801084e:	e02a      	b.n	80108a6 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010856:	2b1b      	cmp	r3, #27
 8010858:	d10c      	bne.n	8010874 <embeddedCliProcess+0x92>
 801085a:	7afb      	ldrb	r3, [r7, #11]
 801085c:	2b5b      	cmp	r3, #91	; 0x5b
 801085e:	d109      	bne.n	8010874 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010866:	f043 0308 	orr.w	r3, r3, #8
 801086a:	b2da      	uxtb	r2, r3
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010872:	e018      	b.n	80108a6 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8010874:	7afb      	ldrb	r3, [r7, #11]
 8010876:	4618      	mov	r0, r3
 8010878:	f000 ff01 	bl	801167e <isControlChar>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d005      	beq.n	801088e <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8010882:	7afb      	ldrb	r3, [r7, #11]
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fa54 	bl	8010d34 <onControlInput>
 801088c:	e00b      	b.n	80108a6 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 801088e:	7afb      	ldrb	r3, [r7, #11]
 8010890:	4618      	mov	r0, r3
 8010892:	f000 ff14 	bl	80116be <isDisplayableChar>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d004      	beq.n	80108a6 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 801089c:	7afb      	ldrb	r3, [r7, #11]
 801089e:	4619      	mov	r1, r3
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 fa17 	bl	8010cd4 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 fdb1 	bl	801140e <printLiveAutocompletion>

        impl->lastChar = c;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	7afa      	ldrb	r2, [r7, #11]
 80108b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	3310      	adds	r3, #16
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 ff17 	bl	80116ec <fifoBufAvailable>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1b1      	bne.n	8010828 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80108ca:	f003 0301 	and.w	r3, r3, #1
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d014      	beq.n	80108fc <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2200      	movs	r2, #0
 80108d6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	69db      	ldr	r3, [r3, #28]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	8c12      	ldrh	r2, [r2, #32]
 80108e0:	4413      	add	r3, r2
 80108e2:	2200      	movs	r2, #0
 80108e4:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80108ec:	f023 0301 	bic.w	r3, r3, #1
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80108f8:	e000      	b.n	80108fc <embeddedCliProcess+0x11a>
        return;
 80108fa:	bf00      	nop
    }
}
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 8010902:	b084      	sub	sp, #16
 8010904:	b4b0      	push	{r4, r5, r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010910:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010922:	429a      	cmp	r2, r3
 8010924:	d101      	bne.n	801092a <embeddedCliAddBinding+0x28>
        return false;
 8010926:	2300      	movs	r3, #0
 8010928:	e017      	b.n	801095a <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010932:	4619      	mov	r1, r3
 8010934:	460b      	mov	r3, r1
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	440b      	add	r3, r1
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	461d      	mov	r5, r3
 8010940:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010950:	3301      	adds	r3, #1
 8010952:	b29a      	uxth	r2, r3
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8010958:	2301      	movs	r3, #1
}
 801095a:	4618      	mov	r0, r3
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	bcb0      	pop	{r4, r5, r7}
 8010962:	b004      	add	sp, #16
 8010964:	4770      	bx	lr
	...

08010968 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d031      	beq.n	80109de <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010986:	f003 0310 	and.w	r3, r3, #16
 801098a:	2b00      	cmp	r3, #0
 801098c:	d102      	bne.n	8010994 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fe22 	bl	80115d8 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8010994:	6839      	ldr	r1, [r7, #0]
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 fe50 	bl	801163c <writeToOutput>
    writeToOutput(cli, lineBreak);
 801099c:	4b12      	ldr	r3, [pc, #72]	; (80109e8 <embeddedCliPrint+0x80>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4619      	mov	r1, r3
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fe4a 	bl	801163c <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80109ae:	f003 0310 	and.w	r3, r3, #16
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d114      	bne.n	80109e0 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4619      	mov	r1, r3
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 fe3d 	bl	801163c <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	69db      	ldr	r3, [r3, #28]
 80109c6:	4619      	mov	r1, r3
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 fe37 	bl	801163c <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	8c1a      	ldrh	r2, [r3, #32]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fd19 	bl	801140e <printLiveAutocompletion>
 80109dc:	e000      	b.n	80109e0 <embeddedCliPrint+0x78>
        return;
 80109de:	bf00      	nop
    }
}
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	20000020 	.word	0x20000020

080109ec <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b088      	sub	sp, #32
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d066      	beq.n	8010ac8 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80109fa:	4b35      	ldr	r3, [pc, #212]	; (8010ad0 <embeddedCliTokenizeArgs+0xe4>)
 80109fc:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80109fe:	2300      	movs	r3, #0
 8010a00:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8010a02:	2300      	movs	r3, #0
 8010a04:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8010a0e:	e047      	b.n	8010aa0 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	3301      	adds	r3, #1
 8010a14:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8010a16:	7fbb      	ldrb	r3, [r7, #30]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d002      	beq.n	8010a22 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	77bb      	strb	r3, [r7, #30]
 8010a20:	e029      	b.n	8010a76 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8010a22:	7cfb      	ldrb	r3, [r7, #19]
 8010a24:	2b5c      	cmp	r3, #92	; 0x5c
 8010a26:	d102      	bne.n	8010a2e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8010a28:	2301      	movs	r3, #1
 8010a2a:	77bb      	strb	r3, [r7, #30]
            continue;
 8010a2c:	e038      	b.n	8010aa0 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8010a2e:	7cfb      	ldrb	r3, [r7, #19]
 8010a30:	2b22      	cmp	r3, #34	; 0x22
 8010a32:	d110      	bne.n	8010a56 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8010a34:	7ffb      	ldrb	r3, [r7, #31]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	bf14      	ite	ne
 8010a3a:	2301      	movne	r3, #1
 8010a3c:	2300      	moveq	r3, #0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f083 0301 	eor.w	r3, r3, #1
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	77fb      	strb	r3, [r7, #31]
 8010a48:	7ffb      	ldrb	r3, [r7, #31]
 8010a4a:	f003 0301 	and.w	r3, r3, #1
 8010a4e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8010a50:	2300      	movs	r3, #0
 8010a52:	74fb      	strb	r3, [r7, #19]
 8010a54:	e00f      	b.n	8010a76 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8010a56:	7ffb      	ldrb	r3, [r7, #31]
 8010a58:	f083 0301 	eor.w	r3, r3, #1
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d009      	beq.n	8010a76 <embeddedCliTokenizeArgs+0x8a>
 8010a62:	7cfb      	ldrb	r3, [r7, #19]
 8010a64:	4619      	mov	r1, r3
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f00b fbaa 	bl	801c1c0 <strchr>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d001      	beq.n	8010a76 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8010a72:	2300      	movs	r3, #0
 8010a74:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8010a76:	7cfb      	ldrb	r3, [r7, #19]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d109      	bne.n	8010a90 <embeddedCliTokenizeArgs+0xa4>
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	dd0e      	ble.n	8010aa0 <embeddedCliTokenizeArgs+0xb4>
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	3b01      	subs	r3, #1
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	4413      	add	r3, r2
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d007      	beq.n	8010aa0 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8010a90:	69bb      	ldr	r3, [r7, #24]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	4413      	add	r3, r2
 8010a96:	7cfa      	ldrb	r2, [r7, #19]
 8010a98:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	74fb      	strb	r3, [r7, #19]
 8010aaa:	7cfb      	ldrb	r3, [r7, #19]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1af      	bne.n	8010a10 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8010ab0:	69bb      	ldr	r3, [r7, #24]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	3301      	adds	r3, #1
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	701a      	strb	r2, [r3, #0]
 8010ac6:	e000      	b.n	8010aca <embeddedCliTokenizeArgs+0xde>
        return;
 8010ac8:	bf00      	nop
}
 8010aca:	3720      	adds	r7, #32
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	08020da0 	.word	0x08020da0

08010ad4 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	460b      	mov	r3, r1
 8010ade:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010ae0:	887b      	ldrh	r3, [r7, #2]
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 ff51 	bl	801198c <getTokenPosition>
 8010aea:	4603      	mov	r3, r0
 8010aec:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010aee:	89fb      	ldrh	r3, [r7, #14]
 8010af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d003      	beq.n	8010b00 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8010af8:	89fb      	ldrh	r3, [r7, #14]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	4413      	add	r3, r2
 8010afe:	e000      	b.n	8010b02 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b084      	sub	sp, #16
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	460b      	mov	r3, r1
 8010b14:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010b16:	887b      	ldrh	r3, [r7, #2]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 ff36 	bl	801198c <getTokenPosition>
 8010b20:	4603      	mov	r3, r0
 8010b22:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010b24:	89fb      	ldrh	r3, [r7, #14]
 8010b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d003      	beq.n	8010b36 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8010b2e:	89fb      	ldrh	r3, [r7, #14]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	4413      	add	r3, r2
 8010b34:	e000      	b.n	8010b38 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8010b36:	2300      	movs	r3, #0
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d003      	beq.n	8010b56 <embeddedCliGetTokenCount+0x16>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	e019      	b.n	8010b8e <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	4413      	add	r3, r2
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d109      	bne.n	8010b82 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	3301      	adds	r3, #1
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	4413      	add	r3, r2
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d006      	beq.n	8010b8a <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8010b7c:	897b      	ldrh	r3, [r7, #10]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	3301      	adds	r3, #1
 8010b86:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8010b88:	e7eb      	b.n	8010b62 <embeddedCliGetTokenCount+0x22>
                break;
 8010b8a:	bf00      	nop
    }

    return tokenCount;
 8010b8c:	897b      	ldrh	r3, [r7, #10]
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3714      	adds	r7, #20
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr
	...

08010b9c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	899b      	ldrh	r3, [r3, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d05c      	beq.n	8010c70 <navigateHistory+0xd4>
 8010bb6:	78fb      	ldrb	r3, [r7, #3]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d005      	beq.n	8010bc8 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	895a      	ldrh	r2, [r3, #10]
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	899b      	ldrh	r3, [r3, #12]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d053      	beq.n	8010c70 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8010bc8:	78fb      	ldrb	r3, [r7, #3]
 8010bca:	f083 0301 	eor.w	r3, r3, #1
 8010bce:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d003      	beq.n	8010bdc <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	895b      	ldrh	r3, [r3, #10]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d049      	beq.n	8010c70 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fcfb 	bl	80115d8 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4619      	mov	r1, r3
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 fd27 	bl	801163c <writeToOutput>

    if (navigateUp)
 8010bee:	78fb      	ldrb	r3, [r7, #3]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d006      	beq.n	8010c02 <navigateHistory+0x66>
        ++impl->history.current;
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	895b      	ldrh	r3, [r3, #10]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	815a      	strh	r2, [r3, #10]
 8010c00:	e005      	b.n	8010c0e <navigateHistory+0x72>
    else
        --impl->history.current;
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	895b      	ldrh	r3, [r3, #10]
 8010c06:	3b01      	subs	r3, #1
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	1d1a      	adds	r2, r3, #4
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	895b      	ldrh	r3, [r3, #10]
 8010c16:	4619      	mov	r1, r3
 8010c18:	4610      	mov	r0, r2
 8010c1a:	f000 fe3e 	bl	801189a <historyGet>
 8010c1e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d101      	bne.n	8010c2a <navigateHistory+0x8e>
        item = "";
 8010c26:	4b14      	ldr	r3, [pc, #80]	; (8010c78 <navigateHistory+0xdc>)
 8010c28:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8010c2a:	6978      	ldr	r0, [r7, #20]
 8010c2c:	f7ef fae2 	bl	80001f4 <strlen>
 8010c30:	4603      	mov	r3, r0
 8010c32:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	69db      	ldr	r3, [r3, #28]
 8010c38:	89fa      	ldrh	r2, [r7, #14]
 8010c3a:	6979      	ldr	r1, [r7, #20]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f00a fa71 	bl	801b124 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	69da      	ldr	r2, [r3, #28]
 8010c46:	89fb      	ldrh	r3, [r7, #14]
 8010c48:	4413      	add	r3, r2
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	89fa      	ldrh	r2, [r7, #14]
 8010c52:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	69db      	ldr	r3, [r3, #28]
 8010c58:	4619      	mov	r1, r3
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 fcee 	bl	801163c <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	8c1a      	ldrh	r2, [r3, #32]
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 fbd0 	bl	801140e <printLiveAutocompletion>
 8010c6e:	e000      	b.n	8010c72 <navigateHistory+0xd6>
        return;
 8010c70:	bf00      	nop
}
 8010c72:	3718      	adds	r7, #24
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	08020da4 	.word	0x08020da4

08010c7c <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	460b      	mov	r3, r1
 8010c86:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8010c8e:	78fb      	ldrb	r3, [r7, #3]
 8010c90:	2b3f      	cmp	r3, #63	; 0x3f
 8010c92:	d91b      	bls.n	8010ccc <onEscapedInput+0x50>
 8010c94:	78fb      	ldrb	r3, [r7, #3]
 8010c96:	2b7e      	cmp	r3, #126	; 0x7e
 8010c98:	d818      	bhi.n	8010ccc <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ca0:	f023 0308 	bic.w	r3, r3, #8
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 8010cac:	78fb      	ldrb	r3, [r7, #3]
 8010cae:	2b41      	cmp	r3, #65	; 0x41
 8010cb0:	d002      	beq.n	8010cb8 <onEscapedInput+0x3c>
 8010cb2:	78fb      	ldrb	r3, [r7, #3]
 8010cb4:	2b42      	cmp	r3, #66	; 0x42
 8010cb6:	d109      	bne.n	8010ccc <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8010cb8:	78fb      	ldrb	r3, [r7, #3]
 8010cba:	2b41      	cmp	r3, #65	; 0x41
 8010cbc:	bf0c      	ite	eq
 8010cbe:	2301      	moveq	r3, #1
 8010cc0:	2300      	movne	r3, #0
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f7ff ff68 	bl	8010b9c <navigateHistory>
        }
    }
}
 8010ccc:	bf00      	nop
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	8c1b      	ldrh	r3, [r3, #32]
 8010cea:	3302      	adds	r3, #2
 8010cec:	68fa      	ldr	r2, [r7, #12]
 8010cee:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	da1a      	bge.n	8010d2a <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	69db      	ldr	r3, [r3, #28]
 8010cf8:	68fa      	ldr	r2, [r7, #12]
 8010cfa:	8c12      	ldrh	r2, [r2, #32]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	78fa      	ldrb	r2, [r7, #3]
 8010d00:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	8c1b      	ldrh	r3, [r3, #32]
 8010d06:	3301      	adds	r3, #1
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	69db      	ldr	r3, [r3, #28]
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	8c12      	ldrh	r2, [r2, #32]
 8010d16:	4413      	add	r3, r2
 8010d18:	2200      	movs	r2, #0
 8010d1a:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	78fa      	ldrb	r2, [r7, #3]
 8010d22:	4611      	mov	r1, r2
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	4798      	blx	r3
 8010d28:	e000      	b.n	8010d2c <onCharInput+0x58>
        return;
 8010d2a:	bf00      	nop
}
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010d4c:	2b0d      	cmp	r3, #13
 8010d4e:	d102      	bne.n	8010d56 <onControlInput+0x22>
 8010d50:	78fb      	ldrb	r3, [r7, #3]
 8010d52:	2b0a      	cmp	r3, #10
 8010d54:	d062      	beq.n	8010e1c <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8010d5c:	2b0a      	cmp	r3, #10
 8010d5e:	d102      	bne.n	8010d66 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8010d60:	78fb      	ldrb	r3, [r7, #3]
 8010d62:	2b0d      	cmp	r3, #13
 8010d64:	d05a      	beq.n	8010e1c <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8010d66:	78fb      	ldrb	r3, [r7, #3]
 8010d68:	2b0d      	cmp	r3, #13
 8010d6a:	d002      	beq.n	8010d72 <onControlInput+0x3e>
 8010d6c:	78fb      	ldrb	r3, [r7, #3]
 8010d6e:	2b0a      	cmp	r3, #10
 8010d70:	d126      	bne.n	8010dc0 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 fba6 	bl	80114c4 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8010d78:	4b2a      	ldr	r3, [pc, #168]	; (8010e24 <onControlInput+0xf0>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 fc5c 	bl	801163c <writeToOutput>

        if (impl->cmdSize > 0)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	8c1b      	ldrh	r3, [r3, #32]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <onControlInput+0x5e>
            parseCommand(cli);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f000 f84b 	bl	8010e28 <parseCommand>
        impl->cmdSize = 0;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2200      	movs	r2, #0
 8010d96:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	69db      	ldr	r3, [r3, #28]
 8010d9c:	68fa      	ldr	r2, [r7, #12]
 8010d9e:	8c12      	ldrh	r2, [r2, #32]
 8010da0:	4413      	add	r3, r2
 8010da2:	2200      	movs	r2, #0
 8010da4:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2200      	movs	r2, #0
 8010daa:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2200      	movs	r2, #0
 8010db0:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4619      	mov	r1, r3
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f000 fc3f 	bl	801163c <writeToOutput>
 8010dbe:	e02e      	b.n	8010e1e <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8010dc0:	78fb      	ldrb	r3, [r7, #3]
 8010dc2:	2b08      	cmp	r3, #8
 8010dc4:	d002      	beq.n	8010dcc <onControlInput+0x98>
 8010dc6:	78fb      	ldrb	r3, [r7, #3]
 8010dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8010dca:	d120      	bne.n	8010e0e <onControlInput+0xda>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	8c1b      	ldrh	r3, [r3, #32]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d01c      	beq.n	8010e0e <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2108      	movs	r1, #8
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2120      	movs	r1, #32
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2108      	movs	r1, #8
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	8c1b      	ldrh	r3, [r3, #32]
 8010df6:	3b01      	subs	r3, #1
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	69db      	ldr	r3, [r3, #28]
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	8c12      	ldrh	r2, [r2, #32]
 8010e06:	4413      	add	r3, r2
 8010e08:	2200      	movs	r2, #0
 8010e0a:	701a      	strb	r2, [r3, #0]
 8010e0c:	e007      	b.n	8010e1e <onControlInput+0xea>
    } else if (c == '\t') {
 8010e0e:	78fb      	ldrb	r3, [r7, #3]
 8010e10:	2b09      	cmp	r3, #9
 8010e12:	d104      	bne.n	8010e1e <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fb55 	bl	80114c4 <onAutocompleteRequest>
 8010e1a:	e000      	b.n	8010e1e <onControlInput+0xea>
        return;
 8010e1c:	bf00      	nop
    }

}
 8010e1e:	3710      	adds	r7, #16
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	20000020 	.word	0x20000020

08010e28 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8010e28:	b590      	push	{r4, r7, lr}
 8010e2a:	b08f      	sub	sp, #60	; 0x3c
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8010e36:	2301      	movs	r3, #1
 8010e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8010e40:	e00d      	b.n	8010e5e <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	69da      	ldr	r2, [r3, #28]
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	4413      	add	r3, r2
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	2b20      	cmp	r3, #32
 8010e4e:	d003      	beq.n	8010e58 <parseCommand+0x30>
            isEmpty = false;
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8010e56:	e008      	b.n	8010e6a <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	8c1b      	ldrh	r3, [r3, #32]
 8010e62:	461a      	mov	r2, r3
 8010e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e66:	4293      	cmp	r3, r2
 8010e68:	dbeb      	blt.n	8010e42 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8010e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f040 80dc 	bne.w	801102c <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	1d1a      	adds	r2, r3, #4
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	69db      	ldr	r3, [r3, #28]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	4610      	mov	r0, r2
 8010e80:	f000 fca7 	bl	80117d2 <historyPut>

    char *cmdName = NULL;
 8010e84:	2300      	movs	r3, #0
 8010e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010e92:	2300      	movs	r3, #0
 8010e94:	623b      	str	r3, [r7, #32]
 8010e96:	e030      	b.n	8010efa <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	69da      	ldr	r2, [r3, #28]
 8010e9c:	6a3b      	ldr	r3, [r7, #32]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
 8010ea6:	2b20      	cmp	r3, #32
 8010ea8:	d10f      	bne.n	8010eca <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8010eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d105      	bne.n	8010ebc <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	69da      	ldr	r2, [r3, #28]
 8010eb4:	6a3b      	ldr	r3, [r7, #32]
 8010eb6:	4413      	add	r3, r2
 8010eb8:	2200      	movs	r2, #0
 8010eba:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d018      	beq.n	8010ef4 <parseCommand+0xcc>
                nameFinished = true;
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ec8:	e014      	b.n	8010ef4 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8010eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d105      	bne.n	8010edc <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	69da      	ldr	r2, [r3, #28]
 8010ed4:	6a3b      	ldr	r3, [r7, #32]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010eda:	e00b      	b.n	8010ef4 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d108      	bne.n	8010ef4 <parseCommand+0xcc>
 8010ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d004      	beq.n	8010ef4 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	69da      	ldr	r2, [r3, #28]
 8010eee:	6a3b      	ldr	r3, [r7, #32]
 8010ef0:	4413      	add	r3, r2
 8010ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010ef4:	6a3b      	ldr	r3, [r7, #32]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	623b      	str	r3, [r7, #32]
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	8c1b      	ldrh	r3, [r3, #32]
 8010efe:	461a      	mov	r2, r3
 8010f00:	6a3b      	ldr	r3, [r7, #32]
 8010f02:	4293      	cmp	r3, r2
 8010f04:	dbc8      	blt.n	8010e98 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	69da      	ldr	r2, [r3, #28]
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	8c1b      	ldrh	r3, [r3, #32]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	4413      	add	r3, r2
 8010f12:	2200      	movs	r2, #0
 8010f14:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8010f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 8089 	beq.w	8011030 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010f1e:	2300      	movs	r3, #0
 8010f20:	61fb      	str	r3, [r7, #28]
 8010f22:	e054      	b.n	8010fce <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f28:	69fa      	ldr	r2, [r7, #28]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	4413      	add	r3, r2
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	440b      	add	r3, r1
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4619      	mov	r1, r3
 8010f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f3a:	f7ef f951 	bl	80001e0 <strcmp>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d141      	bne.n	8010fc8 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f48:	69fa      	ldr	r2, [r7, #28]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	009b      	lsls	r3, r3, #2
 8010f4e:	4413      	add	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	440b      	add	r3, r1
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d040      	beq.n	8010fdc <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f5e:	69fa      	ldr	r2, [r7, #28]
 8010f60:	4613      	mov	r3, r2
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	4413      	add	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	440b      	add	r3, r1
 8010f6a:	7a1b      	ldrb	r3, [r3, #8]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d002      	beq.n	8010f76 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8010f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f72:	f7ff fd3b 	bl	80109ec <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010f7c:	f043 0310 	orr.w	r3, r3, #16
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f8c:	69fa      	ldr	r2, [r7, #28]
 8010f8e:	4613      	mov	r3, r2
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	4413      	add	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	440b      	add	r3, r1
 8010f98:	691c      	ldr	r4, [r3, #16]
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f9e:	69fa      	ldr	r2, [r7, #28]
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	4413      	add	r3, r2
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	440b      	add	r3, r1
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	461a      	mov	r2, r3
 8010fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010fba:	f023 0310 	bic.w	r3, r3, #16
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 8010fc6:	e034      	b.n	8011032 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	3301      	adds	r3, #1
 8010fcc:	61fb      	str	r3, [r7, #28]
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	dba4      	blt.n	8010f24 <parseCommand+0xfc>
 8010fda:	e000      	b.n	8010fde <parseCommand+0x1b6>
                break;
 8010fdc:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d01d      	beq.n	8011022 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8010fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fec:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ff4:	f043 0310 	orr.w	r3, r3, #16
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	f107 020c 	add.w	r2, r7, #12
 8011008:	4611      	mov	r1, r2
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801100e:	69bb      	ldr	r3, [r7, #24]
 8011010:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011014:	f023 0310 	bic.w	r3, r3, #16
 8011018:	b2da      	uxtb	r2, r3
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8011020:	e007      	b.n	8011032 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8011022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 f913 	bl	8011250 <onUnknownCommand>
 801102a:	e002      	b.n	8011032 <parseCommand+0x20a>
        return;
 801102c:	bf00      	nop
 801102e:	e000      	b.n	8011032 <parseCommand+0x20a>
        return;
 8011030:	bf00      	nop
    }
}
 8011032:	373c      	adds	r7, #60	; 0x3c
 8011034:	46bd      	mov	sp, r7
 8011036:	bd90      	pop	{r4, r7, pc}

08011038 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8011038:	b5b0      	push	{r4, r5, r7, lr}
 801103a:	b08a      	sub	sp, #40	; 0x28
 801103c:	af02      	add	r7, sp, #8
 801103e:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8011040:	4b0c      	ldr	r3, [pc, #48]	; (8011074 <initInternalBindings+0x3c>)
 8011042:	f107 040c 	add.w	r4, r7, #12
 8011046:	461d      	mov	r5, r3
 8011048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 8011050:	466a      	mov	r2, sp
 8011052:	f107 0318 	add.w	r3, r7, #24
 8011056:	e893 0003 	ldmia.w	r3, {r0, r1}
 801105a:	e882 0003 	stmia.w	r2, {r0, r1}
 801105e:	f107 030c 	add.w	r3, r7, #12
 8011062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7ff fc4c 	bl	8010902 <embeddedCliAddBinding>
}
 801106a:	bf00      	nop
 801106c:	3720      	adds	r7, #32
 801106e:	46bd      	mov	sp, r7
 8011070:	bdb0      	pop	{r4, r5, r7, pc}
 8011072:	bf00      	nop
 8011074:	08020da8 	.word	0x08020da8

08011078 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8011078:	b580      	push	{r7, lr}
 801107a:	b08c      	sub	sp, #48	; 0x30
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10a      	bne.n	80110a8 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8011092:	496b      	ldr	r1, [pc, #428]	; (8011240 <onHelp+0x1c8>)
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	f000 fad1 	bl	801163c <writeToOutput>
        writeToOutput(cli, lineBreak);
 801109a:	4b6a      	ldr	r3, [pc, #424]	; (8011244 <onHelp+0x1cc>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4619      	mov	r1, r3
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f000 facb 	bl	801163c <writeToOutput>
        return;
 80110a6:	e0c8      	b.n	801123a <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 80110a8:	68b8      	ldr	r0, [r7, #8]
 80110aa:	f7ff fd49 	bl	8010b40 <embeddedCliGetTokenCount>
 80110ae:	4603      	mov	r3, r0
 80110b0:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 80110b2:	8b7b      	ldrh	r3, [r7, #26]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d146      	bne.n	8011146 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80110b8:	2300      	movs	r3, #0
 80110ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110bc:	e03c      	b.n	8011138 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 80110be:	4962      	ldr	r1, [pc, #392]	; (8011248 <onHelp+0x1d0>)
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f000 fabb 	bl	801163c <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80110ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110cc:	4613      	mov	r3, r2
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	4413      	add	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	440b      	add	r3, r1
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4619      	mov	r1, r3
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f000 faae 	bl	801163c <writeToOutput>
            writeToOutput(cli, lineBreak);
 80110e0:	4b58      	ldr	r3, [pc, #352]	; (8011244 <onHelp+0x1cc>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4619      	mov	r1, r3
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f000 faa8 	bl	801163c <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80110f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110f2:	4613      	mov	r3, r2
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	4413      	add	r3, r2
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	440b      	add	r3, r1
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d017      	beq.n	8011132 <onHelp+0xba>
                cli->writeChar(cli, '\t');
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2109      	movs	r1, #9
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011112:	4613      	mov	r3, r2
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	4413      	add	r3, r2
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	440b      	add	r3, r1
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	4619      	mov	r1, r3
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f000 fa8b 	bl	801163c <writeToOutput>
                writeToOutput(cli, lineBreak);
 8011126:	4b47      	ldr	r3, [pc, #284]	; (8011244 <onHelp+0x1cc>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4619      	mov	r1, r3
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f000 fa85 	bl	801163c <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011134:	3301      	adds	r3, #1
 8011136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801113c:	461a      	mov	r2, r3
 801113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011140:	4293      	cmp	r3, r2
 8011142:	dbbc      	blt.n	80110be <onHelp+0x46>
 8011144:	e079      	b.n	801123a <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 8011146:	8b7b      	ldrh	r3, [r7, #26]
 8011148:	2b01      	cmp	r3, #1
 801114a:	d16c      	bne.n	8011226 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 801114c:	2300      	movs	r3, #0
 801114e:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8011150:	2101      	movs	r1, #1
 8011152:	68b8      	ldr	r0, [r7, #8]
 8011154:	f7ff fcbe 	bl	8010ad4 <embeddedCliGetToken>
 8011158:	6178      	str	r0, [r7, #20]
        bool found = false;
 801115a:	2300      	movs	r3, #0
 801115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011160:	2300      	movs	r3, #0
 8011162:	623b      	str	r3, [r7, #32]
 8011164:	e020      	b.n	80111a8 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801116a:	6a3a      	ldr	r2, [r7, #32]
 801116c:	4613      	mov	r3, r2
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	4413      	add	r3, r2
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	440b      	add	r3, r1
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	6979      	ldr	r1, [r7, #20]
 801117a:	4618      	mov	r0, r3
 801117c:	f7ef f830 	bl	80001e0 <strcmp>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d10d      	bne.n	80111a2 <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801118a:	6a3a      	ldr	r2, [r7, #32]
 801118c:	4613      	mov	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	4413      	add	r3, r2
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	440b      	add	r3, r1
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 801119a:	2301      	movs	r3, #1
 801119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80111a0:	e008      	b.n	80111b4 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80111a2:	6a3b      	ldr	r3, [r7, #32]
 80111a4:	3301      	adds	r3, #1
 80111a6:	623b      	str	r3, [r7, #32]
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80111ac:	461a      	mov	r2, r3
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	4293      	cmp	r3, r2
 80111b2:	dbd8      	blt.n	8011166 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 80111b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d020      	beq.n	80111fe <onHelp+0x186>
 80111bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d01d      	beq.n	80111fe <onHelp+0x186>
            writeToOutput(cli, " * ");
 80111c2:	4921      	ldr	r1, [pc, #132]	; (8011248 <onHelp+0x1d0>)
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f000 fa39 	bl	801163c <writeToOutput>
            writeToOutput(cli, cmdName);
 80111ca:	6979      	ldr	r1, [r7, #20]
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f000 fa35 	bl	801163c <writeToOutput>
            writeToOutput(cli, lineBreak);
 80111d2:	4b1c      	ldr	r3, [pc, #112]	; (8011244 <onHelp+0x1cc>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	4619      	mov	r1, r3
 80111d8:	68f8      	ldr	r0, [r7, #12]
 80111da:	f000 fa2f 	bl	801163c <writeToOutput>
            cli->writeChar(cli, '\t');
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2109      	movs	r1, #9
 80111e4:	68f8      	ldr	r0, [r7, #12]
 80111e6:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 80111e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f000 fa26 	bl	801163c <writeToOutput>
            writeToOutput(cli, lineBreak);
 80111f0:	4b14      	ldr	r3, [pc, #80]	; (8011244 <onHelp+0x1cc>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4619      	mov	r1, r3
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 fa20 	bl	801163c <writeToOutput>
 80111fc:	e01d      	b.n	801123a <onHelp+0x1c2>
        } else if (found) {
 80111fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011202:	2b00      	cmp	r3, #0
 8011204:	d00a      	beq.n	801121c <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 8011206:	490e      	ldr	r1, [pc, #56]	; (8011240 <onHelp+0x1c8>)
 8011208:	68f8      	ldr	r0, [r7, #12]
 801120a:	f000 fa17 	bl	801163c <writeToOutput>
            writeToOutput(cli, lineBreak);
 801120e:	4b0d      	ldr	r3, [pc, #52]	; (8011244 <onHelp+0x1cc>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	4619      	mov	r1, r3
 8011214:	68f8      	ldr	r0, [r7, #12]
 8011216:	f000 fa11 	bl	801163c <writeToOutput>
 801121a:	e00e      	b.n	801123a <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 801121c:	6979      	ldr	r1, [r7, #20]
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f000 f816 	bl	8011250 <onUnknownCommand>
 8011224:	e009      	b.n	801123a <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011226:	4909      	ldr	r1, [pc, #36]	; (801124c <onHelp+0x1d4>)
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	f000 fa07 	bl	801163c <writeToOutput>
        writeToOutput(cli, lineBreak);
 801122e:	4b05      	ldr	r3, [pc, #20]	; (8011244 <onHelp+0x1cc>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4619      	mov	r1, r3
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f000 fa01 	bl	801163c <writeToOutput>
    }
}
 801123a:	3730      	adds	r7, #48	; 0x30
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	08020dbc 	.word	0x08020dbc
 8011244:	20000020 	.word	0x20000020
 8011248:	08020dd4 	.word	0x08020dd4
 801124c:	08020dd8 	.word	0x08020dd8

08011250 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 801125a:	490b      	ldr	r1, [pc, #44]	; (8011288 <onUnknownCommand+0x38>)
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 f9ed 	bl	801163c <writeToOutput>
    writeToOutput(cli, name);
 8011262:	6839      	ldr	r1, [r7, #0]
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f000 f9e9 	bl	801163c <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 801126a:	4908      	ldr	r1, [pc, #32]	; (801128c <onUnknownCommand+0x3c>)
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 f9e5 	bl	801163c <writeToOutput>
    writeToOutput(cli, lineBreak);
 8011272:	4b07      	ldr	r3, [pc, #28]	; (8011290 <onUnknownCommand+0x40>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4619      	mov	r1, r3
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f000 f9df 	bl	801163c <writeToOutput>
}
 801127e:	bf00      	nop
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	08020e08 	.word	0x08020e08
 801128c:	08020e1c 	.word	0x08020e1c
 8011290:	20000020 	.word	0x20000020

08011294 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011294:	b580      	push	{r7, lr}
 8011296:	b08e      	sub	sp, #56	; 0x38
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 80112a0:	2300      	movs	r3, #0
 80112a2:	613b      	str	r3, [r7, #16]
 80112a4:	2300      	movs	r3, #0
 80112a6:	82bb      	strh	r3, [r7, #20]
 80112a8:	2300      	movs	r3, #0
 80112aa:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ee ffa1 	bl	80001f4 <strlen>
 80112b2:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d002      	beq.n	80112c8 <getAutocompletedCommand+0x34>
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d108      	bne.n	80112da <getAutocompletedCommand+0x46>
        return cmd;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	461a      	mov	r2, r3
 80112cc:	f107 0310 	add.w	r3, r7, #16
 80112d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80112d8:	e095      	b.n	8011406 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 80112da:	2300      	movs	r3, #0
 80112dc:	637b      	str	r3, [r7, #52]	; 0x34
 80112de:	e083      	b.n	80113e8 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 80112e0:	6a3b      	ldr	r3, [r7, #32]
 80112e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80112e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112e6:	4613      	mov	r3, r2
 80112e8:	009b      	lsls	r3, r3, #2
 80112ea:	4413      	add	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	440b      	add	r3, r1
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80112f4:	69f8      	ldr	r0, [r7, #28]
 80112f6:	f7ee ff7d 	bl	80001f4 <strlen>
 80112fa:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80112fc:	6a3b      	ldr	r3, [r7, #32]
 80112fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011302:	4413      	add	r3, r2
 8011304:	781a      	ldrb	r2, [r3, #0]
 8011306:	6a3b      	ldr	r3, [r7, #32]
 8011308:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130c:	440b      	add	r3, r1
 801130e:	f022 0201 	bic.w	r2, r2, #1
 8011312:	b2d2      	uxtb	r2, r2
 8011314:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011316:	69ba      	ldr	r2, [r7, #24]
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131a:	429a      	cmp	r2, r3
 801131c:	d35e      	bcc.n	80113dc <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 801131e:	2301      	movs	r3, #1
 8011320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011324:	2300      	movs	r3, #0
 8011326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011328:	e010      	b.n	801134c <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	4413      	add	r3, r2
 8011330:	781a      	ldrb	r2, [r3, #0]
 8011332:	69f9      	ldr	r1, [r7, #28]
 8011334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011336:	440b      	add	r3, r1
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d003      	beq.n	8011346 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 801133e:	2300      	movs	r3, #0
 8011340:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 8011344:	e006      	b.n	8011354 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8011346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011348:	3301      	adds	r3, #1
 801134a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801134c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	429a      	cmp	r2, r3
 8011352:	d3ea      	bcc.n	801132a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8011354:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011358:	f083 0301 	eor.w	r3, r3, #1
 801135c:	b2db      	uxtb	r3, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	d13e      	bne.n	80113e0 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011368:	4413      	add	r3, r2
 801136a:	781a      	ldrb	r2, [r3, #0]
 801136c:	6a3b      	ldr	r3, [r7, #32]
 801136e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011372:	440b      	add	r3, r1
 8011374:	f042 0201 	orr.w	r2, r2, #1
 8011378:	b2d2      	uxtb	r2, r2
 801137a:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 801137c:	8afb      	ldrh	r3, [r7, #22]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d004      	beq.n	801138c <getAutocompletedCommand+0xf8>
 8011382:	8abb      	ldrh	r3, [r7, #20]
 8011384:	461a      	mov	r2, r3
 8011386:	69bb      	ldr	r3, [r7, #24]
 8011388:	4293      	cmp	r3, r2
 801138a:	d202      	bcs.n	8011392 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	b29b      	uxth	r3, r3
 8011390:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8011392:	8afb      	ldrh	r3, [r7, #22]
 8011394:	3301      	adds	r3, #1
 8011396:	b29b      	uxth	r3, r3
 8011398:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 801139a:	8afb      	ldrh	r3, [r7, #22]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d102      	bne.n	80113a6 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	613b      	str	r3, [r7, #16]
            continue;
 80113a4:	e01d      	b.n	80113e2 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80113a6:	6a3b      	ldr	r3, [r7, #32]
 80113a8:	8c1b      	ldrh	r3, [r3, #32]
 80113aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ac:	e010      	b.n	80113d0 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b2:	4413      	add	r3, r2
 80113b4:	781a      	ldrb	r2, [r3, #0]
 80113b6:	69f9      	ldr	r1, [r7, #28]
 80113b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ba:	440b      	add	r3, r1
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d003      	beq.n	80113ca <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 80113c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	82bb      	strh	r3, [r7, #20]
                break;
 80113c8:	e00b      	b.n	80113e2 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	3301      	adds	r3, #1
 80113ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80113d0:	8abb      	ldrh	r3, [r7, #20]
 80113d2:	461a      	mov	r2, r3
 80113d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d3e9      	bcc.n	80113ae <getAutocompletedCommand+0x11a>
 80113da:	e002      	b.n	80113e2 <getAutocompletedCommand+0x14e>
            continue;
 80113dc:	bf00      	nop
 80113de:	e000      	b.n	80113e2 <getAutocompletedCommand+0x14e>
            continue;
 80113e0:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80113e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e4:	3301      	adds	r3, #1
 80113e6:	637b      	str	r3, [r7, #52]	; 0x34
 80113e8:	6a3b      	ldr	r3, [r7, #32]
 80113ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80113ec:	461a      	mov	r2, r3
 80113ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113f0:	4293      	cmp	r3, r2
 80113f2:	f6ff af75 	blt.w	80112e0 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	461a      	mov	r2, r3
 80113fa:	f107 0310 	add.w	r3, r7, #16
 80113fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011402:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	3738      	adds	r7, #56	; 0x38
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 801140e:	b580      	push	{r7, lr}
 8011410:	b088      	sub	sp, #32
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011422:	f003 0320 	and.w	r3, r3, #32
 8011426:	2b00      	cmp	r3, #0
 8011428:	d048      	beq.n	80114bc <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	69da      	ldr	r2, [r3, #28]
 801142e:	f107 030c 	add.w	r3, r7, #12
 8011432:	6879      	ldr	r1, [r7, #4]
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff ff2d 	bl	8011294 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 801143a:	8a7b      	ldrh	r3, [r7, #18]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d102      	bne.n	8011446 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	8c1b      	ldrh	r3, [r3, #32]
 8011444:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	8c1b      	ldrh	r3, [r3, #32]
 801144a:	61fb      	str	r3, [r7, #28]
 801144c:	e00b      	b.n	8011466 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68f9      	ldr	r1, [r7, #12]
 8011454:	69fa      	ldr	r2, [r7, #28]
 8011456:	440a      	add	r2, r1
 8011458:	7812      	ldrb	r2, [r2, #0]
 801145a:	4611      	mov	r1, r2
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	3301      	adds	r3, #1
 8011464:	61fb      	str	r3, [r7, #28]
 8011466:	8a3b      	ldrh	r3, [r7, #16]
 8011468:	461a      	mov	r2, r3
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	4293      	cmp	r3, r2
 801146e:	d3ee      	bcc.n	801144e <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011470:	8a3b      	ldrh	r3, [r7, #16]
 8011472:	61bb      	str	r3, [r7, #24]
 8011474:	e007      	b.n	8011486 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2120      	movs	r1, #32
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	3301      	adds	r3, #1
 8011484:	61bb      	str	r3, [r7, #24]
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801148a:	461a      	mov	r2, r3
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	4293      	cmp	r3, r2
 8011490:	d3f1      	bcc.n	8011476 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8011492:	8a3a      	ldrh	r2, [r7, #16]
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	210d      	movs	r1, #13
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4619      	mov	r1, r3
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f000 f8c7 	bl	801163c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	69db      	ldr	r3, [r3, #28]
 80114b2:	4619      	mov	r1, r3
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 f8c1 	bl	801163c <writeToOutput>
 80114ba:	e000      	b.n	80114be <printLiveAutocompletion+0xb0>
        return;
 80114bc:	bf00      	nop
}
 80114be:	3720      	adds	r7, #32
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b088      	sub	sp, #32
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80114d2:	69bb      	ldr	r3, [r7, #24]
 80114d4:	69da      	ldr	r2, [r3, #28]
 80114d6:	f107 030c 	add.w	r3, r7, #12
 80114da:	6879      	ldr	r1, [r7, #4]
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff fed9 	bl	8011294 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 80114e2:	8a7b      	ldrh	r3, [r7, #18]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d071      	beq.n	80115cc <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80114e8:	8a7b      	ldrh	r3, [r7, #18]
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d004      	beq.n	80114f8 <onAutocompleteRequest+0x34>
 80114ee:	8a3a      	ldrh	r2, [r7, #16]
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	8c1b      	ldrh	r3, [r3, #32]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d92a      	bls.n	801154e <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	69db      	ldr	r3, [r3, #28]
 80114fc:	68f9      	ldr	r1, [r7, #12]
 80114fe:	8a3a      	ldrh	r2, [r7, #16]
 8011500:	4618      	mov	r0, r3
 8011502:	f009 fe0f 	bl	801b124 <memcpy>
        if (cmd.candidateCount == 1) {
 8011506:	8a7b      	ldrh	r3, [r7, #18]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d109      	bne.n	8011520 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	69db      	ldr	r3, [r3, #28]
 8011510:	8a3a      	ldrh	r2, [r7, #16]
 8011512:	4413      	add	r3, r2
 8011514:	2220      	movs	r2, #32
 8011516:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8011518:	8a3b      	ldrh	r3, [r7, #16]
 801151a:	3301      	adds	r3, #1
 801151c:	b29b      	uxth	r3, r3
 801151e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	69db      	ldr	r3, [r3, #28]
 8011524:	8a3a      	ldrh	r2, [r7, #16]
 8011526:	4413      	add	r3, r2
 8011528:	2200      	movs	r2, #0
 801152a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	69db      	ldr	r3, [r3, #28]
 8011530:	69ba      	ldr	r2, [r7, #24]
 8011532:	8c12      	ldrh	r2, [r2, #32]
 8011534:	4413      	add	r3, r2
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f000 f87f 	bl	801163c <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 801153e:	8a3a      	ldrh	r2, [r7, #16]
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	8c1a      	ldrh	r2, [r3, #32]
 8011548:	69bb      	ldr	r3, [r7, #24]
 801154a:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 801154c:	e03f      	b.n	80115ce <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f000 f842 	bl	80115d8 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011554:	2300      	movs	r3, #0
 8011556:	61fb      	str	r3, [r7, #28]
 8011558:	e021      	b.n	801159e <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	4413      	add	r3, r2
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	f003 0301 	and.w	r3, r3, #1
 8011568:	2b00      	cmp	r3, #0
 801156a:	d014      	beq.n	8011596 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011570:	69fa      	ldr	r2, [r7, #28]
 8011572:	4613      	mov	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	440b      	add	r3, r1
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8011580:	6979      	ldr	r1, [r7, #20]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 f85a 	bl	801163c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011588:	4b12      	ldr	r3, [pc, #72]	; (80115d4 <onAutocompleteRequest+0x110>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4619      	mov	r1, r3
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 f854 	bl	801163c <writeToOutput>
 8011594:	e000      	b.n	8011598 <onAutocompleteRequest+0xd4>
            continue;
 8011596:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	3301      	adds	r3, #1
 801159c:	61fb      	str	r3, [r7, #28]
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115a2:	461a      	mov	r2, r3
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	4293      	cmp	r3, r2
 80115a8:	dbd7      	blt.n	801155a <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4619      	mov	r1, r3
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f843 	bl	801163c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	69db      	ldr	r3, [r3, #28]
 80115ba:	4619      	mov	r1, r3
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f000 f83d 	bl	801163c <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80115c2:	69bb      	ldr	r3, [r7, #24]
 80115c4:	8c1a      	ldrh	r2, [r3, #32]
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80115ca:	e000      	b.n	80115ce <onAutocompleteRequest+0x10a>
        return;
 80115cc:	bf00      	nop
}
 80115ce:	3720      	adds	r7, #32
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	20000020 	.word	0x20000020

080115d8 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80115d8:	b590      	push	{r4, r7, lr}
 80115da:	b087      	sub	sp, #28
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80115ea:	461c      	mov	r4, r3
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7ee fdff 	bl	80001f4 <strlen>
 80115f6:	4603      	mov	r3, r0
 80115f8:	4423      	add	r3, r4
 80115fa:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	210d      	movs	r1, #13
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011606:	2300      	movs	r3, #0
 8011608:	617b      	str	r3, [r7, #20]
 801160a:	e007      	b.n	801161c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2120      	movs	r1, #32
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	3301      	adds	r3, #1
 801161a:	617b      	str	r3, [r7, #20]
 801161c:	697a      	ldr	r2, [r7, #20]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	429a      	cmp	r2, r3
 8011622:	d3f3      	bcc.n	801160c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	210d      	movs	r1, #13
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	4798      	blx	r3
    impl->inputLineLength = 0;
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	2200      	movs	r2, #0
 8011632:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8011634:	bf00      	nop
 8011636:	371c      	adds	r7, #28
 8011638:	46bd      	mov	sp, r7
 801163a:	bd90      	pop	{r4, r7, pc}

0801163c <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011646:	6838      	ldr	r0, [r7, #0]
 8011648:	f7ee fdd4 	bl	80001f4 <strlen>
 801164c:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 801164e:	2300      	movs	r3, #0
 8011650:	60fb      	str	r3, [r7, #12]
 8011652:	e00b      	b.n	801166c <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	68fa      	ldr	r2, [r7, #12]
 801165c:	440a      	add	r2, r1
 801165e:	7812      	ldrb	r2, [r2, #0]
 8011660:	4611      	mov	r1, r2
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	3301      	adds	r3, #1
 801166a:	60fb      	str	r3, [r7, #12]
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	429a      	cmp	r2, r3
 8011672:	d3ef      	bcc.n	8011654 <writeToOutput+0x18>
    }
}
 8011674:	bf00      	nop
 8011676:	bf00      	nop
 8011678:	3710      	adds	r7, #16
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <isControlChar>:

static bool isControlChar(char c) {
 801167e:	b480      	push	{r7}
 8011680:	b083      	sub	sp, #12
 8011682:	af00      	add	r7, sp, #0
 8011684:	4603      	mov	r3, r0
 8011686:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8011688:	79fb      	ldrb	r3, [r7, #7]
 801168a:	2b0d      	cmp	r3, #13
 801168c:	d00b      	beq.n	80116a6 <isControlChar+0x28>
 801168e:	79fb      	ldrb	r3, [r7, #7]
 8011690:	2b0a      	cmp	r3, #10
 8011692:	d008      	beq.n	80116a6 <isControlChar+0x28>
 8011694:	79fb      	ldrb	r3, [r7, #7]
 8011696:	2b08      	cmp	r3, #8
 8011698:	d005      	beq.n	80116a6 <isControlChar+0x28>
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	2b09      	cmp	r3, #9
 801169e:	d002      	beq.n	80116a6 <isControlChar+0x28>
 80116a0:	79fb      	ldrb	r3, [r7, #7]
 80116a2:	2b7f      	cmp	r3, #127	; 0x7f
 80116a4:	d101      	bne.n	80116aa <isControlChar+0x2c>
 80116a6:	2301      	movs	r3, #1
 80116a8:	e000      	b.n	80116ac <isControlChar+0x2e>
 80116aa:	2300      	movs	r3, #0
 80116ac:	f003 0301 	and.w	r3, r3, #1
 80116b0:	b2db      	uxtb	r3, r3
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	370c      	adds	r7, #12
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr

080116be <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80116be:	b480      	push	{r7}
 80116c0:	b083      	sub	sp, #12
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	4603      	mov	r3, r0
 80116c6:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80116c8:	79fb      	ldrb	r3, [r7, #7]
 80116ca:	2b1f      	cmp	r3, #31
 80116cc:	d904      	bls.n	80116d8 <isDisplayableChar+0x1a>
 80116ce:	79fb      	ldrb	r3, [r7, #7]
 80116d0:	2b7e      	cmp	r3, #126	; 0x7e
 80116d2:	d801      	bhi.n	80116d8 <isDisplayableChar+0x1a>
 80116d4:	2301      	movs	r3, #1
 80116d6:	e000      	b.n	80116da <isDisplayableChar+0x1c>
 80116d8:	2300      	movs	r3, #0
 80116da:	f003 0301 	and.w	r3, r3, #1
 80116de:	b2db      	uxtb	r3, r3
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	88da      	ldrh	r2, [r3, #6]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	889b      	ldrh	r3, [r3, #4]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d306      	bcc.n	801170e <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	88da      	ldrh	r2, [r3, #6]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	889b      	ldrh	r3, [r3, #4]
 8011708:	1ad3      	subs	r3, r2, r3
 801170a:	b29b      	uxth	r3, r3
 801170c:	e009      	b.n	8011722 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	891a      	ldrh	r2, [r3, #8]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	889b      	ldrh	r3, [r3, #4]
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	b29a      	uxth	r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	88db      	ldrh	r3, [r3, #6]
 801171e:	4413      	add	r3, r2
 8011720:	b29b      	uxth	r3, r3
}
 8011722:	4618      	mov	r0, r3
 8011724:	370c      	adds	r7, #12
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr

0801172e <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 801172e:	b480      	push	{r7}
 8011730:	b085      	sub	sp, #20
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8011736:	2300      	movs	r3, #0
 8011738:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	889a      	ldrh	r2, [r3, #4]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	88db      	ldrh	r3, [r3, #6]
 8011742:	429a      	cmp	r2, r3
 8011744:	d014      	beq.n	8011770 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	8892      	ldrh	r2, [r2, #4]
 801174e:	4413      	add	r3, r2
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	889b      	ldrh	r3, [r3, #4]
 8011758:	3301      	adds	r3, #1
 801175a:	b29b      	uxth	r3, r3
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	8912      	ldrh	r2, [r2, #8]
 8011760:	fbb3 f1f2 	udiv	r1, r3, r2
 8011764:	fb01 f202 	mul.w	r2, r1, r2
 8011768:	1a9b      	subs	r3, r3, r2
 801176a:	b29a      	uxth	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8011770:	7bfb      	ldrb	r3, [r7, #15]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr

0801177e <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 801177e:	b480      	push	{r7}
 8011780:	b085      	sub	sp, #20
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	460b      	mov	r3, r1
 8011788:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	88db      	ldrh	r3, [r3, #6]
 801178e:	3301      	adds	r3, #1
 8011790:	b29b      	uxth	r3, r3
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	8912      	ldrh	r2, [r2, #8]
 8011796:	fbb3 f1f2 	udiv	r1, r3, r2
 801179a:	fb01 f202 	mul.w	r2, r1, r2
 801179e:	1a9b      	subs	r3, r3, r2
 80117a0:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	889b      	ldrh	r3, [r3, #4]
 80117a6:	89fa      	ldrh	r2, [r7, #14]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d00b      	beq.n	80117c4 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	88d2      	ldrh	r2, [r2, #6]
 80117b4:	4413      	add	r3, r2
 80117b6:	78fa      	ldrb	r2, [r7, #3]
 80117b8:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	89fa      	ldrh	r2, [r7, #14]
 80117be:	80da      	strh	r2, [r3, #6]
        return true;
 80117c0:	2301      	movs	r3, #1
 80117c2:	e000      	b.n	80117c6 <fifoBufPush+0x48>
    }
    return false;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3714      	adds	r7, #20
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr

080117d2 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b088      	sub	sp, #32
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
 80117da:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80117dc:	6838      	ldr	r0, [r7, #0]
 80117de:	f7ee fd09 	bl	80001f4 <strlen>
 80117e2:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	889b      	ldrh	r3, [r3, #4]
 80117e8:	461a      	mov	r2, r3
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	3301      	adds	r3, #1
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d201      	bcs.n	80117f6 <historyPut+0x24>
        return false;
 80117f2:	2300      	movs	r3, #0
 80117f4:	e04d      	b.n	8011892 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80117f6:	6839      	ldr	r1, [r7, #0]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 f86a 	bl	80118d2 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80117fe:	e024      	b.n	801184a <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	891b      	ldrh	r3, [r3, #8]
 8011804:	4619      	mov	r1, r3
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 f847 	bl	801189a <historyGet>
 801180c:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 801180e:	6978      	ldr	r0, [r7, #20]
 8011810:	f7ee fcf0 	bl	80001f4 <strlen>
 8011814:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	697a      	ldr	r2, [r7, #20]
 801181c:	1ad3      	subs	r3, r2, r3
 801181e:	461a      	mov	r2, r3
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	4413      	add	r3, r2
 8011824:	3301      	adds	r3, #1
 8011826:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	889b      	ldrh	r3, [r3, #4]
 801182c:	461a      	mov	r2, r3
 801182e:	69fb      	ldr	r3, [r7, #28]
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	3301      	adds	r3, #1
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	429a      	cmp	r2, r3
 801183c:	d20a      	bcs.n	8011854 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	891b      	ldrh	r3, [r3, #8]
 8011842:	3b01      	subs	r3, #1
 8011844:	b29a      	uxth	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	891b      	ldrh	r3, [r3, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d1d6      	bne.n	8011800 <historyPut+0x2e>
 8011852:	e000      	b.n	8011856 <historyPut+0x84>
            break;
 8011854:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	891b      	ldrh	r3, [r3, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00a      	beq.n	8011874 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	3301      	adds	r3, #1
 8011866:	18d0      	adds	r0, r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	69fa      	ldr	r2, [r7, #28]
 801186e:	4619      	mov	r1, r3
 8011870:	f009 fc66 	bl	801b140 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6818      	ldr	r0, [r3, #0]
 8011878:	69bb      	ldr	r3, [r7, #24]
 801187a:	3301      	adds	r3, #1
 801187c:	461a      	mov	r2, r3
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	f009 fc50 	bl	801b124 <memcpy>
    ++history->itemsCount;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	891b      	ldrh	r3, [r3, #8]
 8011888:	3301      	adds	r3, #1
 801188a:	b29a      	uxth	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	811a      	strh	r2, [r3, #8]

    return true;
 8011890:	2301      	movs	r3, #1
}
 8011892:	4618      	mov	r0, r3
 8011894:	3720      	adds	r7, #32
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 801189a:	b580      	push	{r7, lr}
 801189c:	b082      	sub	sp, #8
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
 80118a2:	460b      	mov	r3, r1
 80118a4:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80118a6:	887b      	ldrh	r3, [r7, #2]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d004      	beq.n	80118b6 <historyGet+0x1c>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	891b      	ldrh	r3, [r3, #8]
 80118b0:	887a      	ldrh	r2, [r7, #2]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d901      	bls.n	80118ba <historyGet+0x20>
        return NULL;
 80118b6:	2300      	movs	r3, #0
 80118b8:	e007      	b.n	80118ca <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	887a      	ldrh	r2, [r7, #2]
 80118c0:	4611      	mov	r1, r2
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ff f906 	bl	8010ad4 <embeddedCliGetToken>
 80118c8:	4603      	mov	r3, r0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}

080118d2 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b086      	sub	sp, #24
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
 80118da:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d04c      	beq.n	801197c <historyRemove+0xaa>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	891b      	ldrh	r3, [r3, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d048      	beq.n	801197c <historyRemove+0xaa>
        return;
    char *item = NULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80118ee:	2301      	movs	r3, #1
 80118f0:	827b      	strh	r3, [r7, #18]
 80118f2:	e013      	b.n	801191c <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	8a7a      	ldrh	r2, [r7, #18]
 80118fa:	4611      	mov	r1, r2
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7ff f904 	bl	8010b0a <embeddedCliGetTokenVariable>
 8011902:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8011904:	6839      	ldr	r1, [r7, #0]
 8011906:	6978      	ldr	r0, [r7, #20]
 8011908:	f7ee fc6a 	bl	80001e0 <strcmp>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8011912:	2300      	movs	r3, #0
 8011914:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011916:	8a7b      	ldrh	r3, [r7, #18]
 8011918:	3301      	adds	r3, #1
 801191a:	827b      	strh	r3, [r7, #18]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	891b      	ldrh	r3, [r3, #8]
 8011920:	8a7a      	ldrh	r2, [r7, #18]
 8011922:	429a      	cmp	r2, r3
 8011924:	d9e6      	bls.n	80118f4 <historyRemove+0x22>
 8011926:	e000      	b.n	801192a <historyRemove+0x58>
            break;
 8011928:	bf00      	nop
    }
    if (item == NULL)
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d027      	beq.n	8011980 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	891b      	ldrh	r3, [r3, #8]
 8011934:	3b01      	subs	r3, #1
 8011936:	b29a      	uxth	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 801193c:	8a7a      	ldrh	r2, [r7, #18]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	891b      	ldrh	r3, [r3, #8]
 8011942:	3301      	adds	r3, #1
 8011944:	429a      	cmp	r2, r3
 8011946:	d01d      	beq.n	8011984 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8011948:	6978      	ldr	r0, [r7, #20]
 801194a:	f7ee fc53 	bl	80001f4 <strlen>
 801194e:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	889b      	ldrh	r3, [r3, #4]
 8011954:	4619      	mov	r1, r3
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	3301      	adds	r3, #1
 801195a:	697a      	ldr	r2, [r7, #20]
 801195c:	441a      	add	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	1acb      	subs	r3, r1, r3
 8011966:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	3301      	adds	r3, #1
 801196c:	697a      	ldr	r2, [r7, #20]
 801196e:	4413      	add	r3, r2
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	4619      	mov	r1, r3
 8011974:	6978      	ldr	r0, [r7, #20]
 8011976:	f009 fbe3 	bl	801b140 <memmove>
 801197a:	e004      	b.n	8011986 <historyRemove+0xb4>
        return;
 801197c:	bf00      	nop
 801197e:	e002      	b.n	8011986 <historyRemove+0xb4>
        return;
 8011980:	bf00      	nop
 8011982:	e000      	b.n	8011986 <historyRemove+0xb4>
        return;
 8011984:	bf00      	nop
}
 8011986:	3718      	adds	r7, #24
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 801198c:	b480      	push	{r7}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	460b      	mov	r3, r1
 8011996:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d002      	beq.n	80119a4 <getTokenPosition+0x18>
 801199e:	887b      	ldrh	r3, [r7, #2]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d102      	bne.n	80119aa <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80119a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119a8:	e028      	b.n	80119fc <getTokenPosition+0x70>
    uint16_t i = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80119ae:	2301      	movs	r3, #1
 80119b0:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80119b2:	89ba      	ldrh	r2, [r7, #12]
 80119b4:	887b      	ldrh	r3, [r7, #2]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d013      	beq.n	80119e2 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80119ba:	89fb      	ldrh	r3, [r7, #14]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	4413      	add	r3, r2
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d109      	bne.n	80119da <getTokenPosition+0x4e>
            ++tokenCount;
 80119c6:	89bb      	ldrh	r3, [r7, #12]
 80119c8:	3301      	adds	r3, #1
 80119ca:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80119cc:	89fb      	ldrh	r3, [r7, #14]
 80119ce:	3301      	adds	r3, #1
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	4413      	add	r3, r2
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d005      	beq.n	80119e6 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80119da:	89fb      	ldrh	r3, [r7, #14]
 80119dc:	3301      	adds	r3, #1
 80119de:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 80119e0:	e7e7      	b.n	80119b2 <getTokenPosition+0x26>
            break;
 80119e2:	bf00      	nop
 80119e4:	e000      	b.n	80119e8 <getTokenPosition+0x5c>
                break;
 80119e6:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80119e8:	89fb      	ldrh	r3, [r7, #14]
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	4413      	add	r3, r2
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d001      	beq.n	80119f8 <getTokenPosition+0x6c>
        return i;
 80119f4:	89fb      	ldrh	r3, [r7, #14]
 80119f6:	e001      	b.n	80119fc <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80119f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3714      	adds	r7, #20
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011a0c:	4904      	ldr	r1, [pc, #16]	; (8011a20 <MX_FATFS_Init+0x18>)
 8011a0e:	4805      	ldr	r0, [pc, #20]	; (8011a24 <MX_FATFS_Init+0x1c>)
 8011a10:	f007 fefc 	bl	801980c <FATFS_LinkDriver>
 8011a14:	4603      	mov	r3, r0
 8011a16:	461a      	mov	r2, r3
 8011a18:	4b03      	ldr	r3, [pc, #12]	; (8011a28 <MX_FATFS_Init+0x20>)
 8011a1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011a1c:	bf00      	nop
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	20001a78 	.word	0x20001a78
 8011a24:	08021690 	.word	0x08021690
 8011a28:	20001a74 	.word	0x20001a74

08011a2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011a30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011a42:	2300      	movs	r3, #0
 8011a44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011a46:	f000 f86b 	bl	8011b20 <BSP_SD_IsDetected>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d001      	beq.n	8011a54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011a50:	2301      	movs	r3, #1
 8011a52:	e005      	b.n	8011a60 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011a54:	4804      	ldr	r0, [pc, #16]	; (8011a68 <BSP_SD_Init+0x2c>)
 8011a56:	f7f7 fc7a 	bl	800934e <HAL_SD_Init>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8011a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	200017e0 	.word	0x200017e0

08011a6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b088      	sub	sp, #32
 8011a70:	af02      	add	r7, sp, #8
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	68ba      	ldr	r2, [r7, #8]
 8011a86:	68f9      	ldr	r1, [r7, #12]
 8011a88:	4806      	ldr	r0, [pc, #24]	; (8011aa4 <BSP_SD_ReadBlocks+0x38>)
 8011a8a:	f7f7 fd11 	bl	80094b0 <HAL_SD_ReadBlocks>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d001      	beq.n	8011a98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011a94:	2301      	movs	r3, #1
 8011a96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3718      	adds	r7, #24
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	200017e0 	.word	0x200017e0

08011aa8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b088      	sub	sp, #32
 8011aac:	af02      	add	r7, sp, #8
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
 8011ab4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	9300      	str	r3, [sp, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	68ba      	ldr	r2, [r7, #8]
 8011ac2:	68f9      	ldr	r1, [r7, #12]
 8011ac4:	4806      	ldr	r0, [pc, #24]	; (8011ae0 <BSP_SD_WriteBlocks+0x38>)
 8011ac6:	f7f7 fed1 	bl	800986c <HAL_SD_WriteBlocks>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d001      	beq.n	8011ad4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3718      	adds	r7, #24
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	200017e0 	.word	0x200017e0

08011ae4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011ae8:	4805      	ldr	r0, [pc, #20]	; (8011b00 <BSP_SD_GetCardState+0x1c>)
 8011aea:	f7f8 fa15 	bl	8009f18 <HAL_SD_GetCardState>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b04      	cmp	r3, #4
 8011af2:	bf14      	ite	ne
 8011af4:	2301      	movne	r3, #1
 8011af6:	2300      	moveq	r3, #0
 8011af8:	b2db      	uxtb	r3, r3
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	200017e0 	.word	0x200017e0

08011b04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011b0c:	6879      	ldr	r1, [r7, #4]
 8011b0e:	4803      	ldr	r0, [pc, #12]	; (8011b1c <BSP_SD_GetCardInfo+0x18>)
 8011b10:	f7f8 f9d6 	bl	8009ec0 <HAL_SD_GetCardInfo>
}
 8011b14:	bf00      	nop
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	200017e0 	.word	0x200017e0

08011b20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b083      	sub	sp, #12
 8011b24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011b26:	2301      	movs	r3, #1
 8011b28:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8011b2a:	79fb      	ldrb	r3, [r7, #7]
 8011b2c:	b2db      	uxtb	r3, r3
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	370c      	adds	r7, #12
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr
	...

08011b3c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	4603      	mov	r3, r0
 8011b44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011b46:	4b0b      	ldr	r3, [pc, #44]	; (8011b74 <SD_CheckStatus+0x38>)
 8011b48:	2201      	movs	r2, #1
 8011b4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011b4c:	f7ff ffca 	bl	8011ae4 <BSP_SD_GetCardState>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d107      	bne.n	8011b66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011b56:	4b07      	ldr	r3, [pc, #28]	; (8011b74 <SD_CheckStatus+0x38>)
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	f023 0301 	bic.w	r3, r3, #1
 8011b60:	b2da      	uxtb	r2, r3
 8011b62:	4b04      	ldr	r3, [pc, #16]	; (8011b74 <SD_CheckStatus+0x38>)
 8011b64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011b66:	4b03      	ldr	r3, [pc, #12]	; (8011b74 <SD_CheckStatus+0x38>)
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	b2db      	uxtb	r3, r3
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	20000024 	.word	0x20000024

08011b78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	4603      	mov	r3, r0
 8011b80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011b82:	4b0b      	ldr	r3, [pc, #44]	; (8011bb0 <SD_initialize+0x38>)
 8011b84:	2201      	movs	r2, #1
 8011b86:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011b88:	f7ff ff58 	bl	8011a3c <BSP_SD_Init>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d107      	bne.n	8011ba2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011b92:	79fb      	ldrb	r3, [r7, #7]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff ffd1 	bl	8011b3c <SD_CheckStatus>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	4b04      	ldr	r3, [pc, #16]	; (8011bb0 <SD_initialize+0x38>)
 8011ba0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011ba2:	4b03      	ldr	r3, [pc, #12]	; (8011bb0 <SD_initialize+0x38>)
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	b2db      	uxtb	r3, r3
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	20000024 	.word	0x20000024

08011bb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011bbe:	79fb      	ldrb	r3, [r7, #7]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ff ffbb 	bl	8011b3c <SD_CheckStatus>
 8011bc6:	4603      	mov	r3, r0
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b086      	sub	sp, #24
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60b9      	str	r1, [r7, #8]
 8011bd8:	607a      	str	r2, [r7, #4]
 8011bda:	603b      	str	r3, [r7, #0]
 8011bdc:	4603      	mov	r3, r0
 8011bde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011be0:	2301      	movs	r3, #1
 8011be2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011be4:	f04f 33ff 	mov.w	r3, #4294967295
 8011be8:	683a      	ldr	r2, [r7, #0]
 8011bea:	6879      	ldr	r1, [r7, #4]
 8011bec:	68b8      	ldr	r0, [r7, #8]
 8011bee:	f7ff ff3d 	bl	8011a6c <BSP_SD_ReadBlocks>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d107      	bne.n	8011c08 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011bf8:	bf00      	nop
 8011bfa:	f7ff ff73 	bl	8011ae4 <BSP_SD_GetCardState>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d1fa      	bne.n	8011bfa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011c04:	2300      	movs	r3, #0
 8011c06:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3718      	adds	r7, #24
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b086      	sub	sp, #24
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
 8011c1c:	603b      	str	r3, [r7, #0]
 8011c1e:	4603      	mov	r3, r0
 8011c20:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011c22:	2301      	movs	r3, #1
 8011c24:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011c26:	f04f 33ff 	mov.w	r3, #4294967295
 8011c2a:	683a      	ldr	r2, [r7, #0]
 8011c2c:	6879      	ldr	r1, [r7, #4]
 8011c2e:	68b8      	ldr	r0, [r7, #8]
 8011c30:	f7ff ff3a 	bl	8011aa8 <BSP_SD_WriteBlocks>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d107      	bne.n	8011c4a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011c3a:	bf00      	nop
 8011c3c:	f7ff ff52 	bl	8011ae4 <BSP_SD_GetCardState>
 8011c40:	4603      	mov	r3, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1fa      	bne.n	8011c3c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b08c      	sub	sp, #48	; 0x30
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	603a      	str	r2, [r7, #0]
 8011c5e:	71fb      	strb	r3, [r7, #7]
 8011c60:	460b      	mov	r3, r1
 8011c62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011c64:	2301      	movs	r3, #1
 8011c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011c6a:	4b25      	ldr	r3, [pc, #148]	; (8011d00 <SD_ioctl+0xac>)
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d001      	beq.n	8011c7c <SD_ioctl+0x28>
 8011c78:	2303      	movs	r3, #3
 8011c7a:	e03c      	b.n	8011cf6 <SD_ioctl+0xa2>

  switch (cmd)
 8011c7c:	79bb      	ldrb	r3, [r7, #6]
 8011c7e:	2b03      	cmp	r3, #3
 8011c80:	d834      	bhi.n	8011cec <SD_ioctl+0x98>
 8011c82:	a201      	add	r2, pc, #4	; (adr r2, 8011c88 <SD_ioctl+0x34>)
 8011c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c88:	08011c99 	.word	0x08011c99
 8011c8c:	08011ca1 	.word	0x08011ca1
 8011c90:	08011cb9 	.word	0x08011cb9
 8011c94:	08011cd3 	.word	0x08011cd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011c9e:	e028      	b.n	8011cf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ca0:	f107 030c 	add.w	r3, r7, #12
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff ff2d 	bl	8011b04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011cb6:	e01c      	b.n	8011cf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011cb8:	f107 030c 	add.w	r3, r7, #12
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff ff21 	bl	8011b04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011cd0:	e00f      	b.n	8011cf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011cd2:	f107 030c 	add.w	r3, r7, #12
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7ff ff14 	bl	8011b04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cde:	0a5a      	lsrs	r2, r3, #9
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011cea:	e002      	b.n	8011cf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011cec:	2304      	movs	r3, #4
 8011cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3730      	adds	r7, #48	; 0x30
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	20000024 	.word	0x20000024

08011d04 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;

void RtcInt()
{
 8011d04:	b480      	push	{r7}
 8011d06:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8011d08:	4b03      	ldr	r3, [pc, #12]	; (8011d18 <RtcInt+0x14>)
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8011d0e:	bf00      	nop
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	20000025 	.word	0x20000025

08011d1c <Set_Date>:

void Set_Date(char *Datebuffer) {
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b088      	sub	sp, #32
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8011d24:	f107 030c 	add.w	r3, r7, #12
 8011d28:	4619      	mov	r1, r3
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 f8c8 	bl	8011ec0 <Parse_Date>
 8011d30:	4603      	mov	r3, r0
 8011d32:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8011d34:	7ffb      	ldrb	r3, [r7, #31]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10c      	bne.n	8011d54 <Set_Date+0x38>
		sDate.Date = date[0];
 8011d3a:	7b3b      	ldrb	r3, [r7, #12]
 8011d3c:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8011d3e:	7b7b      	ldrb	r3, [r7, #13]
 8011d40:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8011d42:	7bbb      	ldrb	r3, [r7, #14]
 8011d44:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8011d46:	f107 0318 	add.w	r3, r7, #24
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	4805      	ldr	r0, [pc, #20]	; (8011d64 <Set_Date+0x48>)
 8011d50:	f7f6 ffda 	bl	8008d08 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8011d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011d58:	f7f1 fcf2 	bl	8003740 <HAL_Delay>
}
 8011d5c:	bf00      	nop
 8011d5e:	3720      	adds	r7, #32
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	200017c0 	.word	0x200017c0

08011d68 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b092      	sub	sp, #72	; 0x48
 8011d6c:	af00      	add	r7, sp, #0
uint16_t minute;



if(set_alarm_Time)
 8011d6e:	4b38      	ldr	r3, [pc, #224]	; (8011e50 <Rtc_set_alarm+0xe8>)
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d068      	beq.n	8011e48 <Rtc_set_alarm+0xe0>
{
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011d76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4835      	ldr	r0, [pc, #212]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011d80:	f7f6 ff64 	bl	8008c4c <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8011d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d88:	2200      	movs	r2, #0
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	4831      	ldr	r0, [pc, #196]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011d8e:	f7f7 f83f 	bl	8008e10 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8011d92:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	4b2f      	ldr	r3, [pc, #188]	; (8011e58 <Rtc_set_alarm+0xf0>)
 8011d9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	4413      	add	r3, r2
 8011da2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(minute > 59)
 8011da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011daa:	2b3b      	cmp	r3, #59	; 0x3b
 8011dac:	d912      	bls.n	8011dd4 <Rtc_set_alarm+0x6c>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8011dae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011db2:	4a29      	ldr	r2, [pc, #164]	; (8011e58 <Rtc_set_alarm+0xf0>)
 8011db4:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8011db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dbc:	fb01 f202 	mul.w	r2, r1, r2
 8011dc0:	1a9b      	subs	r3, r3, r2
 8011dc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	if(minute == 0)
 8011dc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d102      	bne.n	8011dd4 <Rtc_set_alarm+0x6c>
    	{
    		minute = 1;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	}
    }

      RTC_AlarmTypeDef sAlarm = {0};
 8011dd4:	1d3b      	adds	r3, r7, #4
 8011dd6:	2228      	movs	r2, #40	; 0x28
 8011dd8:	2100      	movs	r1, #0
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f009 f9ca 	bl	801b174 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8011de0:	2300      	movs	r3, #0
 8011de2:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8011de4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8011dec:	2300      	movs	r3, #0
 8011dee:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8011df0:	2300      	movs	r3, #0
 8011df2:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011df4:	2300      	movs	r3, #0
 8011df6:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8011dfc:	4b17      	ldr	r3, [pc, #92]	; (8011e5c <Rtc_set_alarm+0xf4>)
 8011dfe:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8011e00:	2300      	movs	r3, #0
 8011e02:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8011e04:	2300      	movs	r3, #0
 8011e06:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8011e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e12:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8011e14:	1d3b      	adds	r3, r7, #4
 8011e16:	2200      	movs	r2, #0
 8011e18:	4619      	mov	r1, r3
 8011e1a:	480e      	ldr	r0, [pc, #56]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011e1c:	f7f7 f848 	bl	8008eb0 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8011e20:	4b0c      	ldr	r3, [pc, #48]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	689a      	ldr	r2, [r3, #8]
 8011e26:	4b0b      	ldr	r3, [pc, #44]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011e2e:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8011e30:	4b08      	ldr	r3, [pc, #32]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	4b06      	ldr	r3, [pc, #24]	; (8011e54 <Rtc_set_alarm+0xec>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8011e40:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8011e42:	4b03      	ldr	r3, [pc, #12]	; (8011e50 <Rtc_set_alarm+0xe8>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8011e48:	bf00      	nop
 8011e4a:	3748      	adds	r7, #72	; 0x48
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	20000025 	.word	0x20000025
 8011e54:	200017c0 	.word	0x200017c0
 8011e58:	200012d8 	.word	0x200012d8
 8011e5c:	80800080 	.word	0x80800080

08011e60 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b08c      	sub	sp, #48	; 0x30
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8011e68:	f107 030c 	add.w	r3, r7, #12
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 f890 	bl	8011f94 <Parse_Time>
 8011e74:	4603      	mov	r3, r0
 8011e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8011e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d113      	bne.n	8011eaa <Set_Time+0x4a>
		sTime.Hours = time[0];
 8011e82:	7b3b      	ldrb	r3, [r7, #12]
 8011e84:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8011e86:	7b7b      	ldrb	r3, [r7, #13]
 8011e88:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8011e8a:	7bbb      	ldrb	r3, [r7, #14]
 8011e8c:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011e92:	2300      	movs	r3, #0
 8011e94:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8011e96:	f107 0318 	add.w	r3, r7, #24
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	4807      	ldr	r0, [pc, #28]	; (8011ebc <Set_Time+0x5c>)
 8011ea0:	f7f6 fe3a 	bl	8008b18 <HAL_RTC_SetTime>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 8011eaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011eae:	f7f1 fc47 	bl	8003740 <HAL_Delay>

}
 8011eb2:	bf00      	nop
 8011eb4:	3730      	adds	r7, #48	; 0x30
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	200017c0 	.word	0x200017c0

08011ec0 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8011ed2:	492e      	ldr	r1, [pc, #184]	; (8011f8c <Parse_Date+0xcc>)
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f00a ffc7 	bl	801ce68 <strtok>
 8011eda:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d14b      	bne.n	8011f7a <Parse_Date+0xba>
		{
			return 1;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e04d      	b.n	8011f82 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8011ee6:	68b8      	ldr	r0, [r7, #8]
 8011ee8:	f009 f874 	bl	801afd4 <atoi>
 8011eec:	4603      	mov	r3, r0
 8011eee:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8011ef0:	89fb      	ldrh	r3, [r7, #14]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d10a      	bne.n	8011f0c <Parse_Date+0x4c>
 8011ef6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011efa:	2b1f      	cmp	r3, #31
 8011efc:	dc03      	bgt.n	8011f06 <Parse_Date+0x46>
 8011efe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	dc02      	bgt.n	8011f0c <Parse_Date+0x4c>
			{
				val= 1;
 8011f06:	2301      	movs	r3, #1
 8011f08:	81bb      	strh	r3, [r7, #12]
 8011f0a:	e028      	b.n	8011f5e <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8011f0c:	89fb      	ldrh	r3, [r7, #14]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d10a      	bne.n	8011f28 <Parse_Date+0x68>
 8011f12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011f16:	2b0c      	cmp	r3, #12
 8011f18:	dc03      	bgt.n	8011f22 <Parse_Date+0x62>
 8011f1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	dc02      	bgt.n	8011f28 <Parse_Date+0x68>
			{
				val= 1;
 8011f22:	2301      	movs	r3, #1
 8011f24:	81bb      	strh	r3, [r7, #12]
 8011f26:	e01a      	b.n	8011f5e <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8011f28:	89fb      	ldrh	r3, [r7, #14]
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d112      	bne.n	8011f54 <Parse_Date+0x94>
 8011f2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f36:	dd0d      	ble.n	8011f54 <Parse_Date+0x94>
			{
				val=val%100;
 8011f38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011f3c:	4a14      	ldr	r2, [pc, #80]	; (8011f90 <Parse_Date+0xd0>)
 8011f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8011f42:	1151      	asrs	r1, r2, #5
 8011f44:	17da      	asrs	r2, r3, #31
 8011f46:	1a8a      	subs	r2, r1, r2
 8011f48:	2164      	movs	r1, #100	; 0x64
 8011f4a:	fb01 f202 	mul.w	r2, r1, r2
 8011f4e:	1a9b      	subs	r3, r3, r2
 8011f50:	81bb      	strh	r3, [r7, #12]
 8011f52:	e004      	b.n	8011f5e <Parse_Date+0x9e>
			}
			else if(i > 2)
 8011f54:	89fb      	ldrh	r3, [r7, #14]
 8011f56:	2b02      	cmp	r3, #2
 8011f58:	d901      	bls.n	8011f5e <Parse_Date+0x9e>
			{
				return 1;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e011      	b.n	8011f82 <Parse_Date+0xc2>
			}


		   date[i] =val;
 8011f5e:	89fb      	ldrh	r3, [r7, #14]
 8011f60:	683a      	ldr	r2, [r7, #0]
 8011f62:	4413      	add	r3, r2
 8011f64:	89ba      	ldrh	r2, [r7, #12]
 8011f66:	b2d2      	uxtb	r2, r2
 8011f68:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8011f6a:	4908      	ldr	r1, [pc, #32]	; (8011f8c <Parse_Date+0xcc>)
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	f00a ff7b 	bl	801ce68 <strtok>
 8011f72:	60b8      	str	r0, [r7, #8]
		i++;
 8011f74:	89fb      	ldrh	r3, [r7, #14]
 8011f76:	3301      	adds	r3, #1
 8011f78:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1b2      	bne.n	8011ee6 <Parse_Date+0x26>
	}

	}

	return 0;
 8011f80:	2300      	movs	r3, #0

}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3710      	adds	r7, #16
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	08020e50 	.word	0x08020e50
 8011f90:	51eb851f 	.word	0x51eb851f

08011f94 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b084      	sub	sp, #16
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8011fa6:	492a      	ldr	r1, [pc, #168]	; (8012050 <Parse_Time+0xbc>)
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f00a ff5d 	bl	801ce68 <strtok>
 8011fae:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d143      	bne.n	801203e <Parse_Time+0xaa>
			{
				return 1;
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	e045      	b.n	8012046 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8011fba:	68b8      	ldr	r0, [r7, #8]
 8011fbc:	f009 f80a 	bl	801afd4 <atoi>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8011fc4:	89fb      	ldrh	r3, [r7, #14]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10a      	bne.n	8011fe0 <Parse_Time+0x4c>
 8011fca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011fce:	2b18      	cmp	r3, #24
 8011fd0:	dc03      	bgt.n	8011fda <Parse_Time+0x46>
 8011fd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	da02      	bge.n	8011fe0 <Parse_Time+0x4c>
				{
					val= 24;
 8011fda:	2318      	movs	r3, #24
 8011fdc:	81bb      	strh	r3, [r7, #12]
 8011fde:	e020      	b.n	8012022 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8011fe0:	89fb      	ldrh	r3, [r7, #14]
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d10a      	bne.n	8011ffc <Parse_Time+0x68>
 8011fe6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011fea:	2b3b      	cmp	r3, #59	; 0x3b
 8011fec:	dc03      	bgt.n	8011ff6 <Parse_Time+0x62>
 8011fee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	da02      	bge.n	8011ffc <Parse_Time+0x68>
				{
					val= 59;
 8011ff6:	233b      	movs	r3, #59	; 0x3b
 8011ff8:	81bb      	strh	r3, [r7, #12]
 8011ffa:	e012      	b.n	8012022 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8011ffc:	89fb      	ldrh	r3, [r7, #14]
 8011ffe:	2b02      	cmp	r3, #2
 8012000:	d10a      	bne.n	8012018 <Parse_Time+0x84>
 8012002:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012006:	2b3b      	cmp	r3, #59	; 0x3b
 8012008:	dc03      	bgt.n	8012012 <Parse_Time+0x7e>
 801200a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	da02      	bge.n	8012018 <Parse_Time+0x84>
				{
					val=59;
 8012012:	233b      	movs	r3, #59	; 0x3b
 8012014:	81bb      	strh	r3, [r7, #12]
 8012016:	e004      	b.n	8012022 <Parse_Time+0x8e>
				}
				else if(i > 2)
 8012018:	89fb      	ldrh	r3, [r7, #14]
 801201a:	2b02      	cmp	r3, #2
 801201c:	d901      	bls.n	8012022 <Parse_Time+0x8e>
				{
					return 1;
 801201e:	2301      	movs	r3, #1
 8012020:	e011      	b.n	8012046 <Parse_Time+0xb2>
				}


				time[i] =val;
 8012022:	89fb      	ldrh	r3, [r7, #14]
 8012024:	683a      	ldr	r2, [r7, #0]
 8012026:	4413      	add	r3, r2
 8012028:	89ba      	ldrh	r2, [r7, #12]
 801202a:	b2d2      	uxtb	r2, r2
 801202c:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 801202e:	4908      	ldr	r1, [pc, #32]	; (8012050 <Parse_Time+0xbc>)
 8012030:	2000      	movs	r0, #0
 8012032:	f00a ff19 	bl	801ce68 <strtok>
 8012036:	60b8      	str	r0, [r7, #8]
			i++;
 8012038:	89fb      	ldrh	r3, [r7, #14]
 801203a:	3301      	adds	r3, #1
 801203c:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1ba      	bne.n	8011fba <Parse_Time+0x26>
		}

		}

		return 0;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	08020e50 	.word	0x08020e50

08012054 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	460b      	mov	r3, r1
 801205e:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8012060:	78fb      	ldrb	r3, [r7, #3]
 8012062:	091b      	lsrs	r3, r3, #4
 8012064:	b2db      	uxtb	r3, r3
 8012066:	4619      	mov	r1, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	1c5a      	adds	r2, r3, #1
 801206c:	607a      	str	r2, [r7, #4]
 801206e:	4a08      	ldr	r2, [pc, #32]	; (8012090 <CharToHexasc+0x3c>)
 8012070:	5c52      	ldrb	r2, [r2, r1]
 8012072:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8012074:	78fb      	ldrb	r3, [r7, #3]
 8012076:	f003 030f 	and.w	r3, r3, #15
 801207a:	4a05      	ldr	r2, [pc, #20]	; (8012090 <CharToHexasc+0x3c>)
 801207c:	5cd2      	ldrb	r2, [r2, r3]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	701a      	strb	r2, [r3, #0]
}
 8012082:	bf00      	nop
 8012084:	370c      	adds	r7, #12
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	080216a4 	.word	0x080216a4

08012094 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
	adc_Disable();
 801209a:	4830      	ldr	r0, [pc, #192]	; (801215c <adc_InitOneShotMode+0xc8>)
 801209c:	f7f1 fbfb 	bl	8003896 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 80120a0:	f107 0314 	add.w	r3, r7, #20
 80120a4:	2200      	movs	r2, #0
 80120a6:	601a      	str	r2, [r3, #0]
 80120a8:	605a      	str	r2, [r3, #4]
 80120aa:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 80120ac:	4b2b      	ldr	r3, [pc, #172]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120ae:	4a2c      	ldr	r2, [pc, #176]	; (8012160 <adc_InitOneShotMode+0xcc>)
 80120b0:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80120b2:	4b2a      	ldr	r3, [pc, #168]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80120b8:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80120ba:	4b28      	ldr	r3, [pc, #160]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120bc:	2200      	movs	r2, #0
 80120be:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 80120c0:	4b26      	ldr	r3, [pc, #152]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120c2:	2200      	movs	r2, #0
 80120c4:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80120c6:	4b25      	ldr	r3, [pc, #148]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80120cc:	4b23      	ldr	r3, [pc, #140]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80120d4:	4b21      	ldr	r3, [pc, #132]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120d6:	2200      	movs	r2, #0
 80120d8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80120da:	4b20      	ldr	r3, [pc, #128]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120dc:	4a21      	ldr	r2, [pc, #132]	; (8012164 <adc_InitOneShotMode+0xd0>)
 80120de:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80120e0:	4b1e      	ldr	r3, [pc, #120]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 80120e6:	4b1d      	ldr	r3, [pc, #116]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120e8:	2201      	movs	r2, #1
 80120ea:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80120ec:	4b1b      	ldr	r3, [pc, #108]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120ee:	2200      	movs	r2, #0
 80120f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80120f4:	4b19      	ldr	r3, [pc, #100]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120f6:	2201      	movs	r2, #1
 80120f8:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80120fa:	4818      	ldr	r0, [pc, #96]	; (801215c <adc_InitOneShotMode+0xc8>)
 80120fc:	f7f1 fb88 	bl	8003810 <HAL_ADC_Init>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d001      	beq.n	801210a <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8012106:	f7f0 fdd1 	bl	8002cac <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 801210a:	2300      	movs	r3, #0
 801210c:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801210e:	f107 0314 	add.w	r3, r7, #20
 8012112:	4619      	mov	r1, r3
 8012114:	4811      	ldr	r0, [pc, #68]	; (801215c <adc_InitOneShotMode+0xc8>)
 8012116:	f7f1 ff8f 	bl	8004038 <HAL_ADCEx_MultiModeConfigChannel>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8012120:	f7f0 fdc4 	bl	8002cac <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8012124:	1d3b      	adds	r3, r7, #4
 8012126:	2200      	movs	r2, #0
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	605a      	str	r2, [r3, #4]
 801212c:	609a      	str	r2, [r3, #8]
 801212e:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8012130:	230a      	movs	r3, #10
 8012132:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8012134:	2301      	movs	r3, #1
 8012136:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8012138:	2302      	movs	r3, #2
 801213a:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 801213c:	2300      	movs	r3, #0
 801213e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012140:	1d3b      	adds	r3, r7, #4
 8012142:	4619      	mov	r1, r3
 8012144:	4805      	ldr	r0, [pc, #20]	; (801215c <adc_InitOneShotMode+0xc8>)
 8012146:	f7f1 fd59 	bl	8003bfc <HAL_ADC_ConfigChannel>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8012150:	f7f0 fdac 	bl	8002cac <Error_Handler>
		  }



}
 8012154:	bf00      	nop
 8012156:	3720      	adds	r7, #32
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	20001724 	.word	0x20001724
 8012160:	40012000 	.word	0x40012000
 8012164:	0f000001 	.word	0x0f000001

08012168 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8012168:	b580      	push	{r7, lr}
 801216a:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 801216c:	4802      	ldr	r0, [pc, #8]	; (8012178 <adc_Getval+0x10>)
 801216e:	f7f1 fd37 	bl	8003be0 <HAL_ADC_GetValue>
 8012172:	4603      	mov	r3, r0

}
 8012174:	4618      	mov	r0, r3
 8012176:	bd80      	pop	{r7, pc}
 8012178:	20001724 	.word	0x20001724
 801217c:	00000000 	.word	0x00000000

08012180 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8012188:	f7ff ff84 	bl	8012094 <adc_InitOneShotMode>
	HAL_Delay(1);
 801218c:	2001      	movs	r0, #1
 801218e:	f7f1 fad7 	bl	8003740 <HAL_Delay>
	adc_Start();
 8012192:	4847      	ldr	r0, [pc, #284]	; (80122b0 <adc_Measure+0x130>)
 8012194:	f7f1 fbb2 	bl	80038fc <HAL_ADC_Start>
	HAL_Delay(1);
 8012198:	2001      	movs	r0, #1
 801219a:	f7f1 fad1 	bl	8003740 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801219e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80121a2:	4843      	ldr	r0, [pc, #268]	; (80122b0 <adc_Measure+0x130>)
 80121a4:	f7f1 fc91 	bl	8003aca <HAL_ADC_PollForConversion>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d01d      	beq.n	80121ea <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 80121ae:	2001      	movs	r0, #1
 80121b0:	f7f1 fac6 	bl	8003740 <HAL_Delay>
		   adc_Start();
 80121b4:	483e      	ldr	r0, [pc, #248]	; (80122b0 <adc_Measure+0x130>)
 80121b6:	f7f1 fba1 	bl	80038fc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80121ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80121be:	483c      	ldr	r0, [pc, #240]	; (80122b0 <adc_Measure+0x130>)
 80121c0:	f7f1 fc83 	bl	8003aca <HAL_ADC_PollForConversion>
 80121c4:	4603      	mov	r3, r0
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00f      	beq.n	80121ea <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 80121ca:	2001      	movs	r0, #1
 80121cc:	f7f1 fab8 	bl	8003740 <HAL_Delay>
				adc_Start();
 80121d0:	4837      	ldr	r0, [pc, #220]	; (80122b0 <adc_Measure+0x130>)
 80121d2:	f7f1 fb93 	bl	80038fc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80121d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80121da:	4835      	ldr	r0, [pc, #212]	; (80122b0 <adc_Measure+0x130>)
 80121dc:	f7f1 fc75 	bl	8003aca <HAL_ADC_PollForConversion>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <adc_Measure+0x6a>
				{
					return 0;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e05a      	b.n	80122a0 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80121ea:	4831      	ldr	r0, [pc, #196]	; (80122b0 <adc_Measure+0x130>)
 80121ec:	f7f1 fc3a 	bl	8003a64 <HAL_ADC_Stop>

	val = adc_Getval();
 80121f0:	f7ff ffba 	bl	8012168 <adc_Getval>
 80121f4:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 80121f6:	2001      	movs	r0, #1
 80121f8:	f7f1 faa2 	bl	8003740 <HAL_Delay>
	adc_Start();
 80121fc:	482c      	ldr	r0, [pc, #176]	; (80122b0 <adc_Measure+0x130>)
 80121fe:	f7f1 fb7d 	bl	80038fc <HAL_ADC_Start>
	HAL_Delay(1);
 8012202:	2001      	movs	r0, #1
 8012204:	f7f1 fa9c 	bl	8003740 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801220c:	4828      	ldr	r0, [pc, #160]	; (80122b0 <adc_Measure+0x130>)
 801220e:	f7f1 fc5c 	bl	8003aca <HAL_ADC_PollForConversion>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d01d      	beq.n	8012254 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012218:	2001      	movs	r0, #1
 801221a:	f7f1 fa91 	bl	8003740 <HAL_Delay>
		   adc_Start();
 801221e:	4824      	ldr	r0, [pc, #144]	; (80122b0 <adc_Measure+0x130>)
 8012220:	f7f1 fb6c 	bl	80038fc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012224:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012228:	4821      	ldr	r0, [pc, #132]	; (80122b0 <adc_Measure+0x130>)
 801222a:	f7f1 fc4e 	bl	8003aca <HAL_ADC_PollForConversion>
 801222e:	4603      	mov	r3, r0
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00f      	beq.n	8012254 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8012234:	2001      	movs	r0, #1
 8012236:	f7f1 fa83 	bl	8003740 <HAL_Delay>
				adc_Start();
 801223a:	481d      	ldr	r0, [pc, #116]	; (80122b0 <adc_Measure+0x130>)
 801223c:	f7f1 fb5e 	bl	80038fc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012244:	481a      	ldr	r0, [pc, #104]	; (80122b0 <adc_Measure+0x130>)
 8012246:	f7f1 fc40 	bl	8003aca <HAL_ADC_PollForConversion>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <adc_Measure+0xd4>
				{
					return 0;
 8012250:	2300      	movs	r3, #0
 8012252:	e025      	b.n	80122a0 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012254:	4816      	ldr	r0, [pc, #88]	; (80122b0 <adc_Measure+0x130>)
 8012256:	f7f1 fc05 	bl	8003a64 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 801225a:	f7ff ff85 	bl	8012168 <adc_Getval>
 801225e:	4602      	mov	r2, r0
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	4413      	add	r3, r2
 8012264:	085b      	lsrs	r3, r3, #1
 8012266:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	ee07 3a90 	vmov	s15, r3
 801226e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012272:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80122b4 <adc_Measure+0x134>
 8012276:	ee67 7a87 	vmul.f32	s15, s15, s14
 801227a:	ee17 0a90 	vmov	r0, s15
 801227e:	f7ee f97b 	bl	8000578 <__aeabi_f2d>
 8012282:	a309      	add	r3, pc, #36	; (adr r3, 80122a8 <adc_Measure+0x128>)
 8012284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012288:	f7ee f9ce 	bl	8000628 <__aeabi_dmul>
 801228c:	4602      	mov	r2, r0
 801228e:	460b      	mov	r3, r1
 8012290:	4610      	mov	r0, r2
 8012292:	4619      	mov	r1, r3
 8012294:	f7ee fcc0 	bl	8000c18 <__aeabi_d2f>
 8012298:	4602      	mov	r2, r0
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	601a      	str	r2, [r3, #0]


	return 1;
 801229e:	2301      	movs	r3, #1


}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	851eb852 	.word	0x851eb852
 80122ac:	3ff451eb 	.word	0x3ff451eb
 80122b0:	20001724 	.word	0x20001724
 80122b4:	3a533333 	.word	0x3a533333

080122b8 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80122be:	2300      	movs	r3, #0
 80122c0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 80122c2:	88f9      	ldrh	r1, [r7, #6]
 80122c4:	463b      	mov	r3, r7
 80122c6:	f242 12b1 	movw	r2, #8625	; 0x21b1
 80122ca:	4618      	mov	r0, r3
 80122cc:	f000 fa8d 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 80122d0:	4603      	mov	r3, r0
 80122d2:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80122d4:	88fa      	ldrh	r2, [r7, #6]
 80122d6:	463b      	mov	r3, r7
 80122d8:	4619      	mov	r1, r3
 80122da:	2062      	movs	r0, #98	; 0x62
 80122dc:	f000 fad8 	bl	8012890 <sensirion_i2c_write_data>
 80122e0:	4603      	mov	r3, r0
 80122e2:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80122e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <scd4x_start_periodic_measurement+0x3a>
        return error;
 80122ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122f0:	e004      	b.n	80122fc <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 80122f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122f6:	f000 fbb9 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 8012304:	b580      	push	{r7, lr}
 8012306:	b088      	sub	sp, #32
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012310:	2300      	movs	r3, #0
 8012312:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 8012314:	8bf9      	ldrh	r1, [r7, #30]
 8012316:	f107 0310 	add.w	r3, r7, #16
 801231a:	f64e 4205 	movw	r2, #60421	; 0xec05
 801231e:	4618      	mov	r0, r3
 8012320:	f000 fa63 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 8012324:	4603      	mov	r3, r0
 8012326:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012328:	8bfa      	ldrh	r2, [r7, #30]
 801232a:	f107 0310 	add.w	r3, r7, #16
 801232e:	4619      	mov	r1, r3
 8012330:	2062      	movs	r0, #98	; 0x62
 8012332:	f000 faad 	bl	8012890 <sensirion_i2c_write_data>
 8012336:	4603      	mov	r3, r0
 8012338:	83bb      	strh	r3, [r7, #28]
    if (error) {
 801233a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d002      	beq.n	8012348 <scd4x_read_measurement_ticks+0x44>
        return error;
 8012342:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012346:	e031      	b.n	80123ac <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801234c:	f000 fb8e 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012350:	f107 0310 	add.w	r3, r7, #16
 8012354:	2206      	movs	r2, #6
 8012356:	4619      	mov	r1, r3
 8012358:	2062      	movs	r0, #98	; 0x62
 801235a:	f000 faad 	bl	80128b8 <sensirion_i2c_read_data_inplace>
 801235e:	4603      	mov	r3, r0
 8012360:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012362:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d002      	beq.n	8012370 <scd4x_read_measurement_ticks+0x6c>
        return error;
 801236a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801236e:	e01d      	b.n	80123ac <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012370:	f107 0310 	add.w	r3, r7, #16
 8012374:	4618      	mov	r0, r3
 8012376:	f000 f9d2 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 801237a:	4603      	mov	r3, r0
 801237c:	461a      	mov	r2, r3
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8012382:	f107 0310 	add.w	r3, r7, #16
 8012386:	3302      	adds	r3, #2
 8012388:	4618      	mov	r0, r3
 801238a:	f000 f9c8 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 801238e:	4603      	mov	r3, r0
 8012390:	461a      	mov	r2, r3
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012396:	f107 0310 	add.w	r3, r7, #16
 801239a:	3304      	adds	r3, #4
 801239c:	4618      	mov	r0, r3
 801239e:	f000 f9be 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 80123a2:	4603      	mov	r3, r0
 80123a4:	461a      	mov	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80123aa:	2300      	movs	r3, #0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3720      	adds	r7, #32
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b086      	sub	sp, #24
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 80123c0:	f107 0212 	add.w	r2, r7, #18
 80123c4:	f107 0314 	add.w	r3, r7, #20
 80123c8:	4619      	mov	r1, r3
 80123ca:	68f8      	ldr	r0, [r7, #12]
 80123cc:	f7ff ff9a 	bl	8012304 <scd4x_read_measurement_ticks>
 80123d0:	4603      	mov	r3, r0
 80123d2:	82fb      	strh	r3, [r7, #22]
    if (error) {
 80123d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d002      	beq.n	80123e2 <scd4x_read_measurement+0x2e>
        return error;
 80123dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123e0:	e015      	b.n	801240e <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 80123e2:	8abb      	ldrh	r3, [r7, #20]
 80123e4:	461a      	mov	r2, r3
 80123e6:	f245 5373 	movw	r3, #21875	; 0x5573
 80123ea:	fb02 f303 	mul.w	r3, r2, r3
 80123ee:	135b      	asrs	r3, r3, #13
 80123f0:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80123f4:	3bc8      	subs	r3, #200	; 0xc8
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 80123fa:	8a7b      	ldrh	r3, [r7, #18]
 80123fc:	461a      	mov	r2, r3
 80123fe:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8012402:	fb02 f303 	mul.w	r3, r2, r3
 8012406:	135a      	asrs	r2, r3, #13
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8012422:	88f9      	ldrh	r1, [r7, #6]
 8012424:	463b      	mov	r3, r7
 8012426:	f643 7286 	movw	r2, #16262	; 0x3f86
 801242a:	4618      	mov	r0, r3
 801242c:	f000 f9dd 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 8012430:	4603      	mov	r3, r0
 8012432:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012434:	88fa      	ldrh	r2, [r7, #6]
 8012436:	463b      	mov	r3, r7
 8012438:	4619      	mov	r1, r3
 801243a:	2062      	movs	r0, #98	; 0x62
 801243c:	f000 fa28 	bl	8012890 <sensirion_i2c_write_data>
 8012440:	4603      	mov	r3, r0
 8012442:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012444:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d002      	beq.n	8012452 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 801244c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012450:	e003      	b.n	801245a <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8012452:	4804      	ldr	r0, [pc, #16]	; (8012464 <scd4x_stop_periodic_measurement+0x4c>)
 8012454:	f000 fb0a 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	0007a120 	.word	0x0007a120

08012468 <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 8012468:	b580      	push	{r7, lr}
 801246a:	b086      	sub	sp, #24
 801246c:	af00      	add	r7, sp, #0
 801246e:	4603      	mov	r3, r0
 8012470:	6039      	str	r1, [r7, #0]
 8012472:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 8012474:	2300      	movs	r3, #0
 8012476:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 8012478:	8af9      	ldrh	r1, [r7, #22]
 801247a:	f107 030c 	add.w	r3, r7, #12
 801247e:	f243 622f 	movw	r2, #13871	; 0x362f
 8012482:	4618      	mov	r0, r3
 8012484:	f000 f9b1 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 8012488:	4603      	mov	r3, r0
 801248a:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 801248c:	88fa      	ldrh	r2, [r7, #6]
 801248e:	8af9      	ldrh	r1, [r7, #22]
 8012490:	f107 030c 	add.w	r3, r7, #12
 8012494:	4618      	mov	r0, r3
 8012496:	f000 f9cb 	bl	8012830 <sensirion_i2c_add_uint16_t_to_buffer>
 801249a:	4603      	mov	r3, r0
 801249c:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801249e:	8afa      	ldrh	r2, [r7, #22]
 80124a0:	f107 030c 	add.w	r3, r7, #12
 80124a4:	4619      	mov	r1, r3
 80124a6:	2062      	movs	r0, #98	; 0x62
 80124a8:	f000 f9f2 	bl	8012890 <sensirion_i2c_write_data>
 80124ac:	4603      	mov	r3, r0
 80124ae:	82bb      	strh	r3, [r7, #20]
    if (error) {
 80124b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d002      	beq.n	80124be <scd4x_perform_forced_recalibration+0x56>
        return error;
 80124b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80124bc:	e01c      	b.n	80124f8 <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 80124be:	4810      	ldr	r0, [pc, #64]	; (8012500 <scd4x_perform_forced_recalibration+0x98>)
 80124c0:	f000 fad4 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 80124c4:	f107 030c 	add.w	r3, r7, #12
 80124c8:	2202      	movs	r2, #2
 80124ca:	4619      	mov	r1, r3
 80124cc:	2062      	movs	r0, #98	; 0x62
 80124ce:	f000 f9f3 	bl	80128b8 <sensirion_i2c_read_data_inplace>
 80124d2:	4603      	mov	r3, r0
 80124d4:	82bb      	strh	r3, [r7, #20]
    if (error) {
 80124d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d002      	beq.n	80124e4 <scd4x_perform_forced_recalibration+0x7c>
        return error;
 80124de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80124e2:	e009      	b.n	80124f8 <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80124e4:	f107 030c 	add.w	r3, r7, #12
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 f918 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 80124ee:	4603      	mov	r3, r0
 80124f0:	461a      	mov	r2, r3
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80124f6:	2300      	movs	r3, #0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3718      	adds	r7, #24
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	00061a80 	.word	0x00061a80

08012504 <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 8012510:	2300      	movs	r3, #0
 8012512:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 8012514:	8af9      	ldrh	r1, [r7, #22]
 8012516:	f107 030c 	add.w	r3, r7, #12
 801251a:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 801251e:	4618      	mov	r0, r3
 8012520:	f000 f963 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 8012524:	4603      	mov	r3, r0
 8012526:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012528:	8afa      	ldrh	r2, [r7, #22]
 801252a:	f107 030c 	add.w	r3, r7, #12
 801252e:	4619      	mov	r1, r3
 8012530:	2062      	movs	r0, #98	; 0x62
 8012532:	f000 f9ad 	bl	8012890 <sensirion_i2c_write_data>
 8012536:	4603      	mov	r3, r0
 8012538:	827b      	strh	r3, [r7, #18]
    if (error) {
 801253a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d002      	beq.n	8012548 <scd4x_get_data_ready_flag+0x44>
        return error;
 8012542:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012546:	e025      	b.n	8012594 <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801254c:	f000 fa8e 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8012550:	f107 030c 	add.w	r3, r7, #12
 8012554:	2202      	movs	r2, #2
 8012556:	4619      	mov	r1, r3
 8012558:	2062      	movs	r0, #98	; 0x62
 801255a:	f000 f9ad 	bl	80128b8 <sensirion_i2c_read_data_inplace>
 801255e:	4603      	mov	r3, r0
 8012560:	827b      	strh	r3, [r7, #18]
    if (error) {
 8012562:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d002      	beq.n	8012570 <scd4x_get_data_ready_flag+0x6c>
        return error;
 801256a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801256e:	e011      	b.n	8012594 <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012570:	f107 030c 	add.w	r3, r7, #12
 8012574:	4618      	mov	r0, r3
 8012576:	f000 f8d2 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 801257a:	4603      	mov	r3, r0
 801257c:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 801257e:	8abb      	ldrh	r3, [r7, #20]
 8012580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012584:	2b00      	cmp	r3, #0
 8012586:	bf14      	ite	ne
 8012588:	2301      	movne	r3, #1
 801258a:	2300      	moveq	r3, #0
 801258c:	b2da      	uxtb	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3718      	adds	r7, #24
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 801259c:	b580      	push	{r7, lr}
 801259e:	b088      	sub	sp, #32
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 80125a8:	2300      	movs	r3, #0
 80125aa:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 80125ac:	8bf9      	ldrh	r1, [r7, #30]
 80125ae:	f107 0310 	add.w	r3, r7, #16
 80125b2:	f243 6282 	movw	r2, #13954	; 0x3682
 80125b6:	4618      	mov	r0, r3
 80125b8:	f000 f917 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 80125bc:	4603      	mov	r3, r0
 80125be:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80125c0:	8bfa      	ldrh	r2, [r7, #30]
 80125c2:	f107 0310 	add.w	r3, r7, #16
 80125c6:	4619      	mov	r1, r3
 80125c8:	2062      	movs	r0, #98	; 0x62
 80125ca:	f000 f961 	bl	8012890 <sensirion_i2c_write_data>
 80125ce:	4603      	mov	r3, r0
 80125d0:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80125d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d002      	beq.n	80125e0 <scd4x_get_serial_number+0x44>
        return error;
 80125da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80125de:	e031      	b.n	8012644 <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80125e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80125e4:	f000 fa42 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 80125e8:	f107 0310 	add.w	r3, r7, #16
 80125ec:	2206      	movs	r2, #6
 80125ee:	4619      	mov	r1, r3
 80125f0:	2062      	movs	r0, #98	; 0x62
 80125f2:	f000 f961 	bl	80128b8 <sensirion_i2c_read_data_inplace>
 80125f6:	4603      	mov	r3, r0
 80125f8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80125fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d002      	beq.n	8012608 <scd4x_get_serial_number+0x6c>
        return error;
 8012602:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012606:	e01d      	b.n	8012644 <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012608:	f107 0310 	add.w	r3, r7, #16
 801260c:	4618      	mov	r0, r3
 801260e:	f000 f886 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 8012612:	4603      	mov	r3, r0
 8012614:	461a      	mov	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 801261a:	f107 0310 	add.w	r3, r7, #16
 801261e:	3302      	adds	r3, #2
 8012620:	4618      	mov	r0, r3
 8012622:	f000 f87c 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 8012626:	4603      	mov	r3, r0
 8012628:	461a      	mov	r2, r3
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 801262e:	f107 0310 	add.w	r3, r7, #16
 8012632:	3304      	adds	r3, #4
 8012634:	4618      	mov	r0, r3
 8012636:	f000 f872 	bl	801271e <sensirion_common_bytes_to_uint16_t>
 801263a:	4603      	mov	r3, r0
 801263c:	461a      	mov	r2, r3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012642:	2300      	movs	r3, #0
}
 8012644:	4618      	mov	r0, r3
 8012646:	3720      	adds	r7, #32
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012652:	2300      	movs	r3, #0
 8012654:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8012656:	88f9      	ldrh	r1, [r7, #6]
 8012658:	463b      	mov	r3, r7
 801265a:	f243 6246 	movw	r2, #13894	; 0x3646
 801265e:	4618      	mov	r0, r3
 8012660:	f000 f8c3 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 8012664:	4603      	mov	r3, r0
 8012666:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012668:	88fa      	ldrh	r2, [r7, #6]
 801266a:	463b      	mov	r3, r7
 801266c:	4619      	mov	r1, r3
 801266e:	2062      	movs	r0, #98	; 0x62
 8012670:	f000 f90e 	bl	8012890 <sensirion_i2c_write_data>
 8012674:	4603      	mov	r3, r0
 8012676:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <scd4x_reinit+0x3a>
        return error;
 8012680:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012684:	e004      	b.n	8012690 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8012686:	f644 6020 	movw	r0, #20000	; 0x4e20
 801268a:	f000 f9ef 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 801268e:	2300      	movs	r3, #0
}
 8012690:	4618      	mov	r0, r3
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 801269e:	2300      	movs	r3, #0
 80126a0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 80126a2:	88f9      	ldrh	r1, [r7, #6]
 80126a4:	463b      	mov	r3, r7
 80126a6:	f243 62e0 	movw	r2, #14048	; 0x36e0
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 f89d 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 80126b0:	4603      	mov	r3, r0
 80126b2:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80126b4:	88fa      	ldrh	r2, [r7, #6]
 80126b6:	463b      	mov	r3, r7
 80126b8:	4619      	mov	r1, r3
 80126ba:	2062      	movs	r0, #98	; 0x62
 80126bc:	f000 f8e8 	bl	8012890 <sensirion_i2c_write_data>
 80126c0:	4603      	mov	r3, r0
 80126c2:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80126c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d002      	beq.n	80126d2 <scd4x_power_down+0x3a>
        return error;
 80126cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80126d0:	e004      	b.n	80126dc <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 80126d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126d6:	f000 f9c9 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80126da:	2300      	movs	r3, #0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 80126ea:	2300      	movs	r3, #0
 80126ec:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 80126ee:	88f9      	ldrh	r1, [r7, #6]
 80126f0:	1d3b      	adds	r3, r7, #4
 80126f2:	f243 62f6 	movw	r2, #14070	; 0x36f6
 80126f6:	4618      	mov	r0, r3
 80126f8:	f000 f877 	bl	80127ea <sensirion_i2c_add_command_to_buffer>
 80126fc:	4603      	mov	r3, r0
 80126fe:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012700:	88fa      	ldrh	r2, [r7, #6]
 8012702:	1d3b      	adds	r3, r7, #4
 8012704:	4619      	mov	r1, r3
 8012706:	2062      	movs	r0, #98	; 0x62
 8012708:	f000 f8c2 	bl	8012890 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 801270c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012710:	f000 f9ac 	bl	8012a6c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012714:	2300      	movs	r3, #0
}
 8012716:	4618      	mov	r0, r3
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 801271e:	b480      	push	{r7}
 8012720:	b083      	sub	sp, #12
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	021b      	lsls	r3, r3, #8
 801272c:	b21a      	sxth	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	3301      	adds	r3, #1
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	b21b      	sxth	r3, r3
 8012736:	4313      	orrs	r3, r2
 8012738:	b21b      	sxth	r3, r3
 801273a:	b29b      	uxth	r3, r3
}
 801273c:	4618      	mov	r0, r3
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012746:	4770      	bx	lr

08012748 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8012748:	b480      	push	{r7}
 801274a:	b085      	sub	sp, #20
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	460b      	mov	r3, r1
 8012752:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8012754:	23ff      	movs	r3, #255	; 0xff
 8012756:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012758:	2300      	movs	r3, #0
 801275a:	81fb      	strh	r3, [r7, #14]
 801275c:	e021      	b.n	80127a2 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 801275e:	89fb      	ldrh	r3, [r7, #14]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	4413      	add	r3, r2
 8012764:	781a      	ldrb	r2, [r3, #0]
 8012766:	7b7b      	ldrb	r3, [r7, #13]
 8012768:	4053      	eors	r3, r2
 801276a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 801276c:	2308      	movs	r3, #8
 801276e:	733b      	strb	r3, [r7, #12]
 8012770:	e011      	b.n	8012796 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8012772:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012776:	2b00      	cmp	r3, #0
 8012778:	da07      	bge.n	801278a <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 801277a:	7b7b      	ldrb	r3, [r7, #13]
 801277c:	005b      	lsls	r3, r3, #1
 801277e:	b25b      	sxtb	r3, r3
 8012780:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8012784:	b25b      	sxtb	r3, r3
 8012786:	737b      	strb	r3, [r7, #13]
 8012788:	e002      	b.n	8012790 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 801278a:	7b7b      	ldrb	r3, [r7, #13]
 801278c:	005b      	lsls	r3, r3, #1
 801278e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8012790:	7b3b      	ldrb	r3, [r7, #12]
 8012792:	3b01      	subs	r3, #1
 8012794:	733b      	strb	r3, [r7, #12]
 8012796:	7b3b      	ldrb	r3, [r7, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d1ea      	bne.n	8012772 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 801279c:	89fb      	ldrh	r3, [r7, #14]
 801279e:	3301      	adds	r3, #1
 80127a0:	81fb      	strh	r3, [r7, #14]
 80127a2:	89fa      	ldrh	r2, [r7, #14]
 80127a4:	887b      	ldrh	r3, [r7, #2]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d3d9      	bcc.n	801275e <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 80127aa:	7b7b      	ldrb	r3, [r7, #13]
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3714      	adds	r7, #20
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	460b      	mov	r3, r1
 80127c2:	807b      	strh	r3, [r7, #2]
 80127c4:	4613      	mov	r3, r2
 80127c6:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80127c8:	887b      	ldrh	r3, [r7, #2]
 80127ca:	4619      	mov	r1, r3
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7ff ffbb 	bl	8012748 <sensirion_i2c_generate_crc>
 80127d2:	4603      	mov	r3, r0
 80127d4:	461a      	mov	r2, r3
 80127d6:	787b      	ldrb	r3, [r7, #1]
 80127d8:	4293      	cmp	r3, r2
 80127da:	d001      	beq.n	80127e0 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 80127dc:	2301      	movs	r3, #1
 80127de:	e000      	b.n	80127e2 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 80127ea:	b480      	push	{r7}
 80127ec:	b083      	sub	sp, #12
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
 80127f2:	460b      	mov	r3, r1
 80127f4:	807b      	strh	r3, [r7, #2]
 80127f6:	4613      	mov	r3, r2
 80127f8:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 80127fa:	883b      	ldrh	r3, [r7, #0]
 80127fc:	0a1b      	lsrs	r3, r3, #8
 80127fe:	b29a      	uxth	r2, r3
 8012800:	887b      	ldrh	r3, [r7, #2]
 8012802:	1c59      	adds	r1, r3, #1
 8012804:	8079      	strh	r1, [r7, #2]
 8012806:	4619      	mov	r1, r3
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	440b      	add	r3, r1
 801280c:	b2d2      	uxtb	r2, r2
 801280e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8012810:	887b      	ldrh	r3, [r7, #2]
 8012812:	1c5a      	adds	r2, r3, #1
 8012814:	807a      	strh	r2, [r7, #2]
 8012816:	461a      	mov	r2, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	4413      	add	r3, r2
 801281c:	883a      	ldrh	r2, [r7, #0]
 801281e:	b2d2      	uxtb	r2, r2
 8012820:	701a      	strb	r2, [r3, #0]
    return offset;
 8012822:	887b      	ldrh	r3, [r7, #2]
}
 8012824:	4618      	mov	r0, r3
 8012826:	370c      	adds	r7, #12
 8012828:	46bd      	mov	sp, r7
 801282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282e:	4770      	bx	lr

08012830 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8012830:	b590      	push	{r4, r7, lr}
 8012832:	b083      	sub	sp, #12
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	460b      	mov	r3, r1
 801283a:	807b      	strh	r3, [r7, #2]
 801283c:	4613      	mov	r3, r2
 801283e:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8012840:	883b      	ldrh	r3, [r7, #0]
 8012842:	0a1b      	lsrs	r3, r3, #8
 8012844:	b29a      	uxth	r2, r3
 8012846:	887b      	ldrh	r3, [r7, #2]
 8012848:	1c59      	adds	r1, r3, #1
 801284a:	8079      	strh	r1, [r7, #2]
 801284c:	4619      	mov	r1, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	440b      	add	r3, r1
 8012852:	b2d2      	uxtb	r2, r2
 8012854:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8012856:	887b      	ldrh	r3, [r7, #2]
 8012858:	1c5a      	adds	r2, r3, #1
 801285a:	807a      	strh	r2, [r7, #2]
 801285c:	461a      	mov	r2, r3
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4413      	add	r3, r2
 8012862:	883a      	ldrh	r2, [r7, #0]
 8012864:	b2d2      	uxtb	r2, r2
 8012866:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8012868:	887b      	ldrh	r3, [r7, #2]
 801286a:	3b02      	subs	r3, #2
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8012870:	887b      	ldrh	r3, [r7, #2]
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	18d4      	adds	r4, r2, r3
 8012876:	2102      	movs	r1, #2
 8012878:	f7ff ff66 	bl	8012748 <sensirion_i2c_generate_crc>
 801287c:	4603      	mov	r3, r0
 801287e:	7023      	strb	r3, [r4, #0]
    offset++;
 8012880:	887b      	ldrh	r3, [r7, #2]
 8012882:	3301      	adds	r3, #1
 8012884:	807b      	strh	r3, [r7, #2]

    return offset;
 8012886:	887b      	ldrh	r3, [r7, #2]
}
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	bd90      	pop	{r4, r7, pc}

08012890 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	4603      	mov	r3, r0
 8012898:	6039      	str	r1, [r7, #0]
 801289a:	71fb      	strb	r3, [r7, #7]
 801289c:	4613      	mov	r3, r2
 801289e:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 80128a0:	88ba      	ldrh	r2, [r7, #4]
 80128a2:	79fb      	ldrb	r3, [r7, #7]
 80128a4:	6839      	ldr	r1, [r7, #0]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f000 f8c4 	bl	8012a34 <sensirion_i2c_hal_write>
 80128ac:	4603      	mov	r3, r0
 80128ae:	b21b      	sxth	r3, r3
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	4603      	mov	r3, r0
 80128c0:	6039      	str	r1, [r7, #0]
 80128c2:	71fb      	strb	r3, [r7, #7]
 80128c4:	4613      	mov	r3, r2
 80128c6:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80128c8:	88bb      	ldrh	r3, [r7, #4]
 80128ca:	085b      	lsrs	r3, r3, #1
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	461a      	mov	r2, r3
 80128d0:	0052      	lsls	r2, r2, #1
 80128d2:	4413      	add	r3, r2
 80128d4:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80128d6:	88bb      	ldrh	r3, [r7, #4]
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	b29b      	uxth	r3, r3
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d001      	beq.n	80128e6 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 80128e2:	2304      	movs	r3, #4
 80128e4:	e047      	b.n	8012976 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80128e6:	897a      	ldrh	r2, [r7, #10]
 80128e8:	79fb      	ldrb	r3, [r7, #7]
 80128ea:	6839      	ldr	r1, [r7, #0]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f000 f885 	bl	80129fc <sensirion_i2c_hal_read>
 80128f2:	4603      	mov	r3, r0
 80128f4:	813b      	strh	r3, [r7, #8]
    if (error) {
 80128f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d002      	beq.n	8012904 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 80128fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012902:	e038      	b.n	8012976 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012904:	2300      	movs	r3, #0
 8012906:	81fb      	strh	r3, [r7, #14]
 8012908:	2300      	movs	r3, #0
 801290a:	81bb      	strh	r3, [r7, #12]
 801290c:	e02e      	b.n	801296c <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801290e:	89fb      	ldrh	r3, [r7, #14]
 8012910:	683a      	ldr	r2, [r7, #0]
 8012912:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8012914:	89fb      	ldrh	r3, [r7, #14]
 8012916:	3302      	adds	r3, #2
 8012918:	683a      	ldr	r2, [r7, #0]
 801291a:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	461a      	mov	r2, r3
 8012920:	2102      	movs	r1, #2
 8012922:	f7ff ff49 	bl	80127b8 <sensirion_i2c_check_crc>
 8012926:	4603      	mov	r3, r0
 8012928:	813b      	strh	r3, [r7, #8]
        if (error) {
 801292a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d002      	beq.n	8012938 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8012932:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012936:	e01e      	b.n	8012976 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8012938:	89fb      	ldrh	r3, [r7, #14]
 801293a:	683a      	ldr	r2, [r7, #0]
 801293c:	441a      	add	r2, r3
 801293e:	89bb      	ldrh	r3, [r7, #12]
 8012940:	1c59      	adds	r1, r3, #1
 8012942:	81b9      	strh	r1, [r7, #12]
 8012944:	4619      	mov	r1, r3
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	440b      	add	r3, r1
 801294a:	7812      	ldrb	r2, [r2, #0]
 801294c:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 801294e:	89fb      	ldrh	r3, [r7, #14]
 8012950:	3301      	adds	r3, #1
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	441a      	add	r2, r3
 8012956:	89bb      	ldrh	r3, [r7, #12]
 8012958:	1c59      	adds	r1, r3, #1
 801295a:	81b9      	strh	r1, [r7, #12]
 801295c:	4619      	mov	r1, r3
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	440b      	add	r3, r1
 8012962:	7812      	ldrb	r2, [r2, #0]
 8012964:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012966:	89fb      	ldrh	r3, [r7, #14]
 8012968:	3303      	adds	r3, #3
 801296a:	81fb      	strh	r3, [r7, #14]
 801296c:	89fa      	ldrh	r2, [r7, #14]
 801296e:	897b      	ldrh	r3, [r7, #10]
 8012970:	429a      	cmp	r2, r3
 8012972:	d3cc      	bcc.n	801290e <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8012974:	2300      	movs	r3, #0
}
 8012976:	4618      	mov	r0, r3
 8012978:	3710      	adds	r7, #16
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
	...

08012980 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8012984:	4814      	ldr	r0, [pc, #80]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 8012986:	f7f3 f829 	bl	80059dc <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 801298a:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 801298c:	4a13      	ldr	r2, [pc, #76]	; (80129dc <sensirion_i2c_hal_init+0x5c>)
 801298e:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8012990:	4b11      	ldr	r3, [pc, #68]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 8012992:	4a13      	ldr	r2, [pc, #76]	; (80129e0 <sensirion_i2c_hal_init+0x60>)
 8012994:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012996:	4b10      	ldr	r3, [pc, #64]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 8012998:	2200      	movs	r2, #0
 801299a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 801299c:	4b0e      	ldr	r3, [pc, #56]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 801299e:	2200      	movs	r2, #0
 80129a0:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80129a2:	4b0d      	ldr	r3, [pc, #52]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 80129a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80129a8:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80129aa:	4b0b      	ldr	r3, [pc, #44]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 80129ac:	2200      	movs	r2, #0
 80129ae:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80129b0:	4b09      	ldr	r3, [pc, #36]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80129b6:	4b08      	ldr	r3, [pc, #32]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 80129b8:	2200      	movs	r2, #0
 80129ba:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80129bc:	4b06      	ldr	r3, [pc, #24]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 80129be:	2200      	movs	r2, #0
 80129c0:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80129c2:	4805      	ldr	r0, [pc, #20]	; (80129d8 <sensirion_i2c_hal_init+0x58>)
 80129c4:	f7f2 fec6 	bl	8005754 <HAL_I2C_Init>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 80129ce:	f7f0 f96d 	bl	8002cac <Error_Handler>
	  }
}
 80129d2:	bf00      	nop
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	2000176c 	.word	0x2000176c
 80129dc:	40005400 	.word	0x40005400
 80129e0:	00061a80 	.word	0x00061a80

080129e4 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 80129e4:	b580      	push	{r7, lr}
 80129e6:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 80129e8:	4803      	ldr	r0, [pc, #12]	; (80129f8 <sensirion_i2c_hal_free+0x14>)
 80129ea:	f7f2 fff7 	bl	80059dc <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 80129ee:	4802      	ldr	r0, [pc, #8]	; (80129f8 <sensirion_i2c_hal_free+0x14>)
 80129f0:	f7f0 fa34 	bl	8002e5c <HAL_I2C_MspDeInit>
}
 80129f4:	bf00      	nop
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	2000176c 	.word	0x2000176c

080129fc <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af02      	add	r7, sp, #8
 8012a02:	4603      	mov	r3, r0
 8012a04:	6039      	str	r1, [r7, #0]
 8012a06:	71fb      	strb	r3, [r7, #7]
 8012a08:	4613      	mov	r3, r2
 8012a0a:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012a0c:	79fb      	ldrb	r3, [r7, #7]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	b299      	uxth	r1, r3
 8012a14:	88bb      	ldrh	r3, [r7, #4]
 8012a16:	f04f 32ff 	mov.w	r2, #4294967295
 8012a1a:	9200      	str	r2, [sp, #0]
 8012a1c:	683a      	ldr	r2, [r7, #0]
 8012a1e:	4804      	ldr	r0, [pc, #16]	; (8012a30 <sensirion_i2c_hal_read+0x34>)
 8012a20:	f7f3 f90a 	bl	8005c38 <HAL_I2C_Master_Receive>
 8012a24:	4603      	mov	r3, r0
 8012a26:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	2000176c 	.word	0x2000176c

08012a34 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	af02      	add	r7, sp, #8
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	6039      	str	r1, [r7, #0]
 8012a3e:	71fb      	strb	r3, [r7, #7]
 8012a40:	4613      	mov	r3, r2
 8012a42:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012a44:	79fb      	ldrb	r3, [r7, #7]
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	005b      	lsls	r3, r3, #1
 8012a4a:	b299      	uxth	r1, r3
 8012a4c:	88bb      	ldrh	r3, [r7, #4]
 8012a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a52:	9200      	str	r2, [sp, #0]
 8012a54:	683a      	ldr	r2, [r7, #0]
 8012a56:	4804      	ldr	r0, [pc, #16]	; (8012a68 <sensirion_i2c_hal_write+0x34>)
 8012a58:	f7f2 fff0 	bl	8005a3c <HAL_I2C_Master_Transmit>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	2000176c 	.word	0x2000176c

08012a6c <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	4a05      	ldr	r2, [pc, #20]	; (8012a8c <sensirion_i2c_hal_sleep_usec+0x20>)
 8012a78:	fba2 2303 	umull	r2, r3, r2, r3
 8012a7c:	099b      	lsrs	r3, r3, #6
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7f0 fe5e 	bl	8003740 <HAL_Delay>
}
 8012a84:	bf00      	nop
 8012a86:	3708      	adds	r7, #8
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	10624dd3 	.word	0x10624dd3

08012a90 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	061a      	lsls	r2, r3, #24
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	041b      	lsls	r3, r3, #16
 8012aa6:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3302      	adds	r3, #2
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012ab0:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	3203      	adds	r2, #3
 8012ab6:	7812      	ldrb	r2, [r2, #0]
 8012ab8:	4313      	orrs	r3, r2
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	370c      	adds	r7, #12
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr

08012ac6 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b084      	sub	sp, #16
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f7ff ffde 	bl	8012a90 <sensirion_bytes_to_uint32_t>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	ee07 3a90 	vmov	s15, r3
}
 8012ade:	eeb0 0a67 	vmov.f32	s0, s15
 8012ae2:	3710      	adds	r7, #16
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8012ae8:	b480      	push	{r7}
 8012aea:	b083      	sub	sp, #12
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	4603      	mov	r3, r0
 8012af0:	603a      	str	r2, [r7, #0]
 8012af2:	71fb      	strb	r3, [r7, #7]
 8012af4:	460b      	mov	r3, r1
 8012af6:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8012af8:	79fa      	ldrb	r2, [r7, #7]
 8012afa:	79bb      	ldrb	r3, [r7, #6]
 8012afc:	4413      	add	r3, r2
 8012afe:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8012b00:	e006      	b.n	8012b10 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	1c5a      	adds	r2, r3, #1
 8012b06:	603a      	str	r2, [r7, #0]
 8012b08:	781a      	ldrb	r2, [r3, #0]
 8012b0a:	79fb      	ldrb	r3, [r7, #7]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8012b10:	79bb      	ldrb	r3, [r7, #6]
 8012b12:	1e5a      	subs	r2, r3, #1
 8012b14:	71ba      	strb	r2, [r7, #6]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d1f3      	bne.n	8012b02 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8012b1a:	79fb      	ldrb	r3, [r7, #7]
 8012b1c:	43db      	mvns	r3, r3
 8012b1e:	b2db      	uxtb	r3, r3
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8012b2c:	b480      	push	{r7}
 8012b2e:	b087      	sub	sp, #28
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	4603      	mov	r3, r0
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	607a      	str	r2, [r7, #4]
 8012b38:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8012b3e:	e026      	b.n	8012b8e <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	60ba      	str	r2, [r7, #8]
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	757b      	strb	r3, [r7, #21]
        switch (c) {
 8012b4a:	7d7b      	ldrb	r3, [r7, #21]
 8012b4c:	2b7e      	cmp	r3, #126	; 0x7e
 8012b4e:	dc16      	bgt.n	8012b7e <sensirion_shdlc_stuff_data+0x52>
 8012b50:	2b7d      	cmp	r3, #125	; 0x7d
 8012b52:	da03      	bge.n	8012b5c <sensirion_shdlc_stuff_data+0x30>
 8012b54:	2b11      	cmp	r3, #17
 8012b56:	d001      	beq.n	8012b5c <sensirion_shdlc_stuff_data+0x30>
 8012b58:	2b13      	cmp	r3, #19
 8012b5a:	d110      	bne.n	8012b7e <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	1c5a      	adds	r2, r3, #1
 8012b60:	607a      	str	r2, [r7, #4]
 8012b62:	227d      	movs	r2, #125	; 0x7d
 8012b64:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	1c5a      	adds	r2, r3, #1
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	7d7a      	ldrb	r2, [r7, #21]
 8012b6e:	f082 0220 	eor.w	r2, r2, #32
 8012b72:	b2d2      	uxtb	r2, r2
 8012b74:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8012b76:	8afb      	ldrh	r3, [r7, #22]
 8012b78:	3302      	adds	r3, #2
 8012b7a:	82fb      	strh	r3, [r7, #22]
                break;
 8012b7c:	e007      	b.n	8012b8e <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	1c5a      	adds	r2, r3, #1
 8012b82:	607a      	str	r2, [r7, #4]
 8012b84:	7d7a      	ldrb	r2, [r7, #21]
 8012b86:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8012b88:	8afb      	ldrh	r3, [r7, #22]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
 8012b90:	1e5a      	subs	r2, r3, #1
 8012b92:	73fa      	strb	r2, [r7, #15]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1d3      	bne.n	8012b40 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8012b98:	8afb      	ldrh	r3, [r7, #22]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	371c      	adds	r7, #28
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr

08012ba6 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8012ba6:	b480      	push	{r7}
 8012ba8:	b083      	sub	sp, #12
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	4603      	mov	r3, r0
 8012bae:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8012bb0:	79fb      	ldrb	r3, [r7, #7]
 8012bb2:	2b7d      	cmp	r3, #125	; 0x7d
 8012bb4:	bf0c      	ite	eq
 8012bb6:	2301      	moveq	r3, #1
 8012bb8:	2300      	movne	r3, #0
 8012bba:	b2db      	uxtb	r3, r3
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr

08012bc8 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8012bc8:	b480      	push	{r7}
 8012bca:	b083      	sub	sp, #12
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	4603      	mov	r3, r0
 8012bd0:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8012bd2:	79fb      	ldrb	r3, [r7, #7]
 8012bd4:	2b5e      	cmp	r3, #94	; 0x5e
 8012bd6:	d010      	beq.n	8012bfa <sensirion_shdlc_unstuff_byte+0x32>
 8012bd8:	2b5e      	cmp	r3, #94	; 0x5e
 8012bda:	dc10      	bgt.n	8012bfe <sensirion_shdlc_unstuff_byte+0x36>
 8012bdc:	2b5d      	cmp	r3, #93	; 0x5d
 8012bde:	d00a      	beq.n	8012bf6 <sensirion_shdlc_unstuff_byte+0x2e>
 8012be0:	2b5d      	cmp	r3, #93	; 0x5d
 8012be2:	dc0c      	bgt.n	8012bfe <sensirion_shdlc_unstuff_byte+0x36>
 8012be4:	2b31      	cmp	r3, #49	; 0x31
 8012be6:	d002      	beq.n	8012bee <sensirion_shdlc_unstuff_byte+0x26>
 8012be8:	2b33      	cmp	r3, #51	; 0x33
 8012bea:	d002      	beq.n	8012bf2 <sensirion_shdlc_unstuff_byte+0x2a>
 8012bec:	e007      	b.n	8012bfe <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8012bee:	2311      	movs	r3, #17
 8012bf0:	e006      	b.n	8012c00 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8012bf2:	2313      	movs	r3, #19
 8012bf4:	e004      	b.n	8012c00 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8012bf6:	237d      	movs	r3, #125	; 0x7d
 8012bf8:	e002      	b.n	8012c00 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8012bfa:	237e      	movs	r3, #126	; 0x7e
 8012bfc:	e000      	b.n	8012c00 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8012bfe:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	370c      	adds	r7, #12
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	603b      	str	r3, [r7, #0]
 8012c14:	4603      	mov	r3, r0
 8012c16:	71fb      	strb	r3, [r7, #7]
 8012c18:	460b      	mov	r3, r1
 8012c1a:	71bb      	strb	r3, [r7, #6]
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8012c20:	797a      	ldrb	r2, [r7, #5]
 8012c22:	79b9      	ldrb	r1, [r7, #6]
 8012c24:	79f8      	ldrb	r0, [r7, #7]
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	f000 f818 	bl	8012c5c <sensirion_shdlc_tx>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8012c30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d002      	beq.n	8012c3e <sensirion_shdlc_xcv+0x32>
        return ret;
 8012c38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c3c:	e00a      	b.n	8012c54 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8012c3e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012c42:	f000 fb07 	bl	8013254 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 8012c46:	7e3b      	ldrb	r3, [r7, #24]
 8012c48:	6a3a      	ldr	r2, [r7, #32]
 8012c4a:	69f9      	ldr	r1, [r7, #28]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f000 f8d7 	bl	8012e00 <sensirion_shdlc_rx>
 8012c52:	4603      	mov	r3, r0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3710      	adds	r7, #16
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8012c5c:	b590      	push	{r4, r7, lr}
 8012c5e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	4604      	mov	r4, r0
 8012c66:	4608      	mov	r0, r1
 8012c68:	4611      	mov	r1, r2
 8012c6a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8012c6e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8012c72:	6013      	str	r3, [r2, #0]
 8012c74:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012c78:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	701a      	strb	r2, [r3, #0]
 8012c80:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012c84:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8012c88:	4602      	mov	r2, r0
 8012c8a:	701a      	strb	r2, [r3, #0]
 8012c8c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012c90:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012c94:	460a      	mov	r2, r1
 8012c96:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8012c9e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012ca2:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8012ca6:	781a      	ldrb	r2, [r3, #0]
 8012ca8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012cac:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	4413      	add	r3, r2
 8012cb4:	b2d8      	uxtb	r0, r3
 8012cb6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012cba:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012cbe:	7819      	ldrb	r1, [r3, #0]
 8012cc0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012cc4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	f7ff ff0d 	bl	8012ae8 <sensirion_shdlc_crc>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8012cd4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012cd8:	1c5a      	adds	r2, r3, #1
 8012cda:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8012cde:	461a      	mov	r2, r3
 8012ce0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012ce4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012ce8:	217e      	movs	r1, #126	; 0x7e
 8012cea:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8012cec:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012cf0:	f107 0208 	add.w	r2, r7, #8
 8012cf4:	441a      	add	r2, r3
 8012cf6:	1dfb      	adds	r3, r7, #7
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	2001      	movs	r0, #1
 8012cfc:	f7ff ff16 	bl	8012b2c <sensirion_shdlc_stuff_data>
 8012d00:	4603      	mov	r3, r0
 8012d02:	461a      	mov	r2, r3
 8012d04:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d08:	4413      	add	r3, r2
 8012d0a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8012d0e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d12:	f107 0208 	add.w	r2, r7, #8
 8012d16:	441a      	add	r2, r3
 8012d18:	1dbb      	adds	r3, r7, #6
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	2001      	movs	r0, #1
 8012d1e:	f7ff ff05 	bl	8012b2c <sensirion_shdlc_stuff_data>
 8012d22:	4603      	mov	r3, r0
 8012d24:	461a      	mov	r2, r3
 8012d26:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d2a:	4413      	add	r3, r2
 8012d2c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8012d30:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d34:	f107 0208 	add.w	r2, r7, #8
 8012d38:	441a      	add	r2, r3
 8012d3a:	1d7b      	adds	r3, r7, #5
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	2001      	movs	r0, #1
 8012d40:	f7ff fef4 	bl	8012b2c <sensirion_shdlc_stuff_data>
 8012d44:	4603      	mov	r3, r0
 8012d46:	461a      	mov	r2, r3
 8012d48:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d4c:	4413      	add	r3, r2
 8012d4e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8012d52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012d56:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012d5a:	7818      	ldrb	r0, [r3, #0]
 8012d5c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d60:	f107 0208 	add.w	r2, r7, #8
 8012d64:	441a      	add	r2, r3
 8012d66:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012d6a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012d6e:	6819      	ldr	r1, [r3, #0]
 8012d70:	f7ff fedc 	bl	8012b2c <sensirion_shdlc_stuff_data>
 8012d74:	4603      	mov	r3, r0
 8012d76:	461a      	mov	r2, r3
 8012d78:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d7c:	4413      	add	r3, r2
 8012d7e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8012d82:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012d86:	f107 0208 	add.w	r2, r7, #8
 8012d8a:	441a      	add	r2, r3
 8012d8c:	f207 2313 	addw	r3, r7, #531	; 0x213
 8012d90:	4619      	mov	r1, r3
 8012d92:	2001      	movs	r0, #1
 8012d94:	f7ff feca 	bl	8012b2c <sensirion_shdlc_stuff_data>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012da0:	4413      	add	r3, r2
 8012da2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8012da6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012daa:	1c5a      	adds	r2, r3, #1
 8012dac:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8012db0:	461a      	mov	r2, r3
 8012db2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012db6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012dba:	217e      	movs	r1, #126	; 0x7e
 8012dbc:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8012dbe:	f107 0208 	add.w	r2, r7, #8
 8012dc2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f000 f9db 	bl	8013184 <sensirion_uart_tx>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 8012dd4:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	da02      	bge.n	8012de2 <sensirion_shdlc_tx+0x186>
        return ret;
 8012ddc:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8012de0:	e009      	b.n	8012df6 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8012de2:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 8012de6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d002      	beq.n	8012df4 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8012dee:	f06f 0305 	mvn.w	r3, #5
 8012df2:	e000      	b.n	8012df6 <sensirion_shdlc_tx+0x19a>
    return 0;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd90      	pop	{r4, r7, pc}

08012e00 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8012e00:	b590      	push	{r4, r7, lr}
 8012e02:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e0c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012e10:	6019      	str	r1, [r3, #0]
 8012e12:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e16:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012e1a:	601a      	str	r2, [r3, #0]
 8012e1c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e20:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8012e24:	4602      	mov	r2, r0
 8012e26:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8012e28:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e2c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8012e36:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e3a:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	3306      	adds	r3, #6
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	f107 0210 	add.w	r2, r7, #16
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 f9d2 	bl	80131f8 <sensirion_uart_rx>
 8012e54:	4603      	mov	r3, r0
 8012e56:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8012e5a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	dd03      	ble.n	8012e6a <sensirion_shdlc_rx+0x6a>
 8012e62:	4ba0      	ldr	r3, [pc, #640]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	2b7e      	cmp	r3, #126	; 0x7e
 8012e68:	d002      	beq.n	8012e70 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8012e6a:	f06f 0301 	mvn.w	r3, #1
 8012e6e:	e133      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8012e70:	2300      	movs	r3, #0
 8012e72:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012e76:	2301      	movs	r3, #1
 8012e78:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8012e82:	e03a      	b.n	8012efa <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8012e84:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d015      	beq.n	8012eb8 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8012e8c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012e90:	4a94      	ldr	r2, [pc, #592]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012e92:	5cd2      	ldrb	r2, [r2, r3]
 8012e94:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012e98:	1c59      	adds	r1, r3, #1
 8012e9a:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012ea4:	185c      	adds	r4, r3, r1
 8012ea6:	4610      	mov	r0, r2
 8012ea8:	f7ff fe8e 	bl	8012bc8 <sensirion_shdlc_unstuff_byte>
 8012eac:	4603      	mov	r3, r0
 8012eae:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012eb6:	e01b      	b.n	8012ef0 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8012eb8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012ebc:	4a89      	ldr	r2, [pc, #548]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012ebe:	5cd3      	ldrb	r3, [r2, r3]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff fe70 	bl	8012ba6 <sensirion_shdlc_check_unstuff>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8012ecc:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d10d      	bne.n	8012ef0 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8012ed4:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012ed8:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012edc:	1c59      	adds	r1, r3, #1
 8012ede:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012ee8:	440b      	add	r3, r1
 8012eea:	497e      	ldr	r1, [pc, #504]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012eec:	5c8a      	ldrb	r2, [r1, r2]
 8012eee:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8012ef0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012efa:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012efe:	2b03      	cmp	r3, #3
 8012f00:	d806      	bhi.n	8012f10 <sensirion_shdlc_rx+0x110>
 8012f02:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012f06:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012f0a:	3b02      	subs	r3, #2
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	dbb9      	blt.n	8012e84 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8012f10:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012f14:	2b04      	cmp	r3, #4
 8012f16:	d103      	bne.n	8012f20 <sensirion_shdlc_rx+0x120>
 8012f18:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d002      	beq.n	8012f26 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012f20:	f06f 0304 	mvn.w	r3, #4
 8012f24:	e0d8      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8012f26:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012f2a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	78db      	ldrb	r3, [r3, #3]
 8012f32:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8012f36:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 8012f3a:	7812      	ldrb	r2, [r2, #0]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d202      	bcs.n	8012f46 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8012f40:	f06f 0306 	mvn.w	r3, #6
 8012f44:	e0c8      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8012f46:	2300      	movs	r3, #0
 8012f48:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8012f52:	e040      	b.n	8012fd6 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8012f54:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d018      	beq.n	8012f8e <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8012f5c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012f60:	4a60      	ldr	r2, [pc, #384]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012f62:	5cd2      	ldrb	r2, [r2, r3]
 8012f64:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012f68:	1c59      	adds	r1, r3, #1
 8012f6a:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012f6e:	4619      	mov	r1, r3
 8012f70:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012f74:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	185c      	adds	r4, r3, r1
 8012f7c:	4610      	mov	r0, r2
 8012f7e:	f7ff fe23 	bl	8012bc8 <sensirion_shdlc_unstuff_byte>
 8012f82:	4603      	mov	r3, r0
 8012f84:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8012f86:	2300      	movs	r3, #0
 8012f88:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012f8c:	e01e      	b.n	8012fcc <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8012f8e:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012f92:	4a54      	ldr	r2, [pc, #336]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012f94:	5cd3      	ldrb	r3, [r2, r3]
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7ff fe05 	bl	8012ba6 <sensirion_shdlc_check_unstuff>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8012fa2:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d110      	bne.n	8012fcc <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8012faa:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012fae:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012fb2:	1c59      	adds	r1, r3, #1
 8012fb4:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012fb8:	4619      	mov	r1, r3
 8012fba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012fbe:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	440b      	add	r3, r1
 8012fc6:	4947      	ldr	r1, [pc, #284]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8012fc8:	5c8a      	ldrb	r2, [r1, r2]
 8012fca:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8012fcc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012fd6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012fda:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	78db      	ldrb	r3, [r3, #3]
 8012fe2:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d206      	bcs.n	8012ff8 <sensirion_shdlc_rx+0x1f8>
 8012fea:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012fee:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012ff2:	3b02      	subs	r3, #2
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	dbad      	blt.n	8012f54 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8012ff8:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d002      	beq.n	8013006 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013000:	f06f 0304 	mvn.w	r3, #4
 8013004:	e068      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8013006:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801300a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	78db      	ldrb	r3, [r3, #3]
 8013012:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8013016:	429a      	cmp	r2, r3
 8013018:	d202      	bcs.n	8013020 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801301a:	f06f 0304 	mvn.w	r3, #4
 801301e:	e05b      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8013020:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013024:	1c5a      	adds	r2, r3, #1
 8013026:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 801302a:	461a      	mov	r2, r3
 801302c:	4b2d      	ldr	r3, [pc, #180]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 801302e:	5c9b      	ldrb	r3, [r3, r2]
 8013030:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8013034:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8013038:	4618      	mov	r0, r3
 801303a:	f7ff fdb4 	bl	8012ba6 <sensirion_shdlc_check_unstuff>
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00d      	beq.n	8013060 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8013044:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013048:	1c5a      	adds	r2, r3, #1
 801304a:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 801304e:	461a      	mov	r2, r3
 8013050:	4b24      	ldr	r3, [pc, #144]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 8013052:	5c9b      	ldrb	r3, [r3, r2]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff fdb7 	bl	8012bc8 <sensirion_shdlc_unstuff_byte>
 801305a:	4603      	mov	r3, r0
 801305c:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8013060:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013064:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	781a      	ldrb	r2, [r3, #0]
 801306c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013070:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	785b      	ldrb	r3, [r3, #1]
 8013078:	4413      	add	r3, r2
 801307a:	b2da      	uxtb	r2, r3
 801307c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013080:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	789b      	ldrb	r3, [r3, #2]
 8013088:	4413      	add	r3, r2
 801308a:	b2d8      	uxtb	r0, r3
 801308c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013090:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	78d9      	ldrb	r1, [r3, #3]
 8013098:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801309c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	f7ff fd21 	bl	8012ae8 <sensirion_shdlc_crc>
 80130a6:	4603      	mov	r3, r0
 80130a8:	461a      	mov	r2, r3
 80130aa:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d002      	beq.n	80130b8 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 80130b2:	f06f 0303 	mvn.w	r3, #3
 80130b6:	e00f      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 80130b8:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 80130bc:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80130c0:	429a      	cmp	r2, r3
 80130c2:	da05      	bge.n	80130d0 <sensirion_shdlc_rx+0x2d0>
 80130c4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80130c8:	4a06      	ldr	r2, [pc, #24]	; (80130e4 <sensirion_shdlc_rx+0x2e4>)
 80130ca:	5cd3      	ldrb	r3, [r2, r3]
 80130cc:	2b7e      	cmp	r3, #126	; 0x7e
 80130ce:	d002      	beq.n	80130d6 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 80130d0:	f06f 0302 	mvn.w	r3, #2
 80130d4:	e000      	b.n	80130d8 <sensirion_shdlc_rx+0x2d8>

    return 0;
 80130d6:	2300      	movs	r3, #0
}
 80130d8:	4618      	mov	r0, r3
 80130da:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd90      	pop	{r4, r7, pc}
 80130e2:	bf00      	nop
 80130e4:	200014c0 	.word	0x200014c0

080130e8 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 80130ec:	4819      	ldr	r0, [pc, #100]	; (8013154 <sensirion_uart_open+0x6c>)
 80130ee:	f7f8 f9a4 	bl	800b43a <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 80130f2:	4b18      	ldr	r3, [pc, #96]	; (8013154 <sensirion_uart_open+0x6c>)
 80130f4:	4a18      	ldr	r2, [pc, #96]	; (8013158 <sensirion_uart_open+0x70>)
 80130f6:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80130f8:	4b16      	ldr	r3, [pc, #88]	; (8013154 <sensirion_uart_open+0x6c>)
 80130fa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80130fe:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013100:	4b14      	ldr	r3, [pc, #80]	; (8013154 <sensirion_uart_open+0x6c>)
 8013102:	2200      	movs	r2, #0
 8013104:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8013106:	4b13      	ldr	r3, [pc, #76]	; (8013154 <sensirion_uart_open+0x6c>)
 8013108:	2200      	movs	r2, #0
 801310a:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 801310c:	4b11      	ldr	r3, [pc, #68]	; (8013154 <sensirion_uart_open+0x6c>)
 801310e:	2200      	movs	r2, #0
 8013110:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8013112:	4b10      	ldr	r3, [pc, #64]	; (8013154 <sensirion_uart_open+0x6c>)
 8013114:	220c      	movs	r2, #12
 8013116:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013118:	4b0e      	ldr	r3, [pc, #56]	; (8013154 <sensirion_uart_open+0x6c>)
 801311a:	2200      	movs	r2, #0
 801311c:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801311e:	4b0d      	ldr	r3, [pc, #52]	; (8013154 <sensirion_uart_open+0x6c>)
 8013120:	2200      	movs	r2, #0
 8013122:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013124:	480b      	ldr	r0, [pc, #44]	; (8013154 <sensirion_uart_open+0x6c>)
 8013126:	f7f8 f93b 	bl	800b3a0 <HAL_UART_Init>
 801312a:	4603      	mov	r3, r0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d001      	beq.n	8013134 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8013130:	f7ef fdbc 	bl	8002cac <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8013134:	f240 220a 	movw	r2, #522	; 0x20a
 8013138:	4908      	ldr	r1, [pc, #32]	; (801315c <sensirion_uart_open+0x74>)
 801313a:	4806      	ldr	r0, [pc, #24]	; (8013154 <sensirion_uart_open+0x6c>)
 801313c:	f7f8 fa6e 	bl	800b61c <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8013140:	4b07      	ldr	r3, [pc, #28]	; (8013160 <sensirion_uart_open+0x78>)
 8013142:	2200      	movs	r2, #0
 8013144:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8013146:	4b07      	ldr	r3, [pc, #28]	; (8013164 <sensirion_uart_open+0x7c>)
 8013148:	2200      	movs	r2, #0
 801314a:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	200019e0 	.word	0x200019e0
 8013158:	40004400 	.word	0x40004400
 801315c:	200014c0 	.word	0x200014c0
 8013160:	20001a7c 	.word	0x20001a7c
 8013164:	20001a7e 	.word	0x20001a7e

08013168 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8013168:	b580      	push	{r7, lr}
 801316a:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 801316c:	4804      	ldr	r0, [pc, #16]	; (8013180 <sensirion_uart_close+0x18>)
 801316e:	f7f8 f964 	bl	800b43a <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8013172:	4803      	ldr	r0, [pc, #12]	; (8013180 <sensirion_uart_close+0x18>)
 8013174:	f7f0 f8ba 	bl	80032ec <HAL_UART_MspDeInit>
    return 0;
 8013178:	2300      	movs	r3, #0
}
 801317a:	4618      	mov	r0, r3
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	200019e0 	.word	0x200019e0

08013184 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	4603      	mov	r3, r0
 801318c:	6039      	str	r1, [r7, #0]
 801318e:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013190:	88fa      	ldrh	r2, [r7, #6]
 8013192:	f04f 33ff 	mov.w	r3, #4294967295
 8013196:	6839      	ldr	r1, [r7, #0]
 8013198:	4807      	ldr	r0, [pc, #28]	; (80131b8 <sensirion_uart_tx+0x34>)
 801319a:	f7f8 f97d 	bl	800b498 <HAL_UART_Transmit>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d102      	bne.n	80131aa <sensirion_uart_tx+0x26>
		{
			return data_len;
 80131a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80131a8:	e001      	b.n	80131ae <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 80131aa:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	200019e0 	.word	0x200019e0

080131bc <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	460b      	mov	r3, r1
 80131c6:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 80131c8:	4a07      	ldr	r2, [pc, #28]	; (80131e8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80131ca:	887b      	ldrh	r3, [r7, #2]
 80131cc:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 80131ce:	4b07      	ldr	r3, [pc, #28]	; (80131ec <HAL_UARTEx_RxEventCallback+0x30>)
 80131d0:	2201      	movs	r2, #1
 80131d2:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 80131d4:	f240 220a 	movw	r2, #522	; 0x20a
 80131d8:	4905      	ldr	r1, [pc, #20]	; (80131f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80131da:	4806      	ldr	r0, [pc, #24]	; (80131f4 <HAL_UARTEx_RxEventCallback+0x38>)
 80131dc:	f7f8 fa1e 	bl	800b61c <HAL_UARTEx_ReceiveToIdle_IT>
}
 80131e0:	bf00      	nop
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	20001a7c 	.word	0x20001a7c
 80131ec:	20001a80 	.word	0x20001a80
 80131f0:	200014c0 	.word	0x200014c0
 80131f4:	200019e0 	.word	0x200019e0

080131f8 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	6039      	str	r1, [r7, #0]
 8013202:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8013204:	2300      	movs	r3, #0
 8013206:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013208:	e005      	b.n	8013216 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	3301      	adds	r3, #1
 801320e:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013210:	200a      	movs	r0, #10
 8013212:	f7f0 fa95 	bl	8003740 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8013216:	4b0b      	ldr	r3, [pc, #44]	; (8013244 <sensirion_uart_rx+0x4c>)
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d102      	bne.n	8013224 <sensirion_uart_rx+0x2c>
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2b02      	cmp	r3, #2
 8013222:	d9f2      	bls.n	801320a <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8013224:	4b07      	ldr	r3, [pc, #28]	; (8013244 <sensirion_uart_rx+0x4c>)
 8013226:	2200      	movs	r2, #0
 8013228:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 801322a:	4b07      	ldr	r3, [pc, #28]	; (8013248 <sensirion_uart_rx+0x50>)
 801322c:	2200      	movs	r2, #0
 801322e:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8013230:	4b06      	ldr	r3, [pc, #24]	; (801324c <sensirion_uart_rx+0x54>)
 8013232:	2200      	movs	r2, #0
 8013234:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8013236:	4b06      	ldr	r3, [pc, #24]	; (8013250 <sensirion_uart_rx+0x58>)
 8013238:	881b      	ldrh	r3, [r3, #0]
 801323a:	b21b      	sxth	r3, r3
	//return i;
}
 801323c:	4618      	mov	r0, r3
 801323e:	3710      	adds	r7, #16
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	20001a80 	.word	0x20001a80
 8013248:	20001a82 	.word	0x20001a82
 801324c:	20001a7e 	.word	0x20001a7e
 8013250:	20001a7c 	.word	0x20001a7c

08013254 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	4a06      	ldr	r2, [pc, #24]	; (8013278 <sensirion_sleep_usec+0x24>)
 8013260:	fba2 2303 	umull	r2, r3, r2, r3
 8013264:	099b      	lsrs	r3, r3, #6
 8013266:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f7f0 fa69 	bl	8003740 <HAL_Delay>
}
 801326e:	bf00      	nop
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	10624dd3 	.word	0x10624dd3

0801327c <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 801327c:	b580      	push	{r7, lr}
 801327e:	b08a      	sub	sp, #40	; 0x28
 8013280:	af04      	add	r7, sp, #16
 8013282:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8013284:	2303      	movs	r3, #3
 8013286:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8013288:	f107 020c 	add.w	r2, r7, #12
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	9302      	str	r3, [sp, #8]
 8013290:	f107 0310 	add.w	r3, r7, #16
 8013294:	9301      	str	r3, [sp, #4]
 8013296:	2320      	movs	r3, #32
 8013298:	9300      	str	r3, [sp, #0]
 801329a:	4613      	mov	r3, r2
 801329c:	2201      	movs	r2, #1
 801329e:	21d0      	movs	r1, #208	; 0xd0
 80132a0:	2000      	movs	r0, #0
 80132a2:	f7ff fcb3 	bl	8012c0c <sensirion_shdlc_xcv>
 80132a6:	4603      	mov	r3, r0
 80132a8:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 80132aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	da02      	bge.n	80132b8 <sps30_get_serial+0x3c>
        return ret;
 80132b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80132b6:	e009      	b.n	80132cc <sps30_get_serial+0x50>

    if (header.state)
 80132b8:	7cbb      	ldrb	r3, [r7, #18]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d005      	beq.n	80132ca <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 80132be:	7cbb      	ldrb	r3, [r7, #18]
 80132c0:	b21b      	sxth	r3, r3
 80132c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80132c6:	b21b      	sxth	r3, r3
 80132c8:	e000      	b.n	80132cc <sps30_get_serial+0x50>

    return 0;
 80132ca:	2300      	movs	r3, #0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3718      	adds	r7, #24
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b086      	sub	sp, #24
 80132d8:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 80132da:	f240 3301 	movw	r3, #769	; 0x301
 80132de:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 80132e0:	463a      	mov	r2, r7
 80132e2:	2300      	movs	r3, #0
 80132e4:	9302      	str	r3, [sp, #8]
 80132e6:	1d3b      	adds	r3, r7, #4
 80132e8:	9301      	str	r3, [sp, #4]
 80132ea:	2300      	movs	r3, #0
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	4613      	mov	r3, r2
 80132f0:	2202      	movs	r2, #2
 80132f2:	2100      	movs	r1, #0
 80132f4:	2000      	movs	r0, #0
 80132f6:	f7ff fc89 	bl	8012c0c <sensirion_shdlc_xcv>
 80132fa:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3708      	adds	r7, #8
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 801330a:	2300      	movs	r3, #0
 801330c:	9302      	str	r3, [sp, #8]
 801330e:	1d3b      	adds	r3, r7, #4
 8013310:	9301      	str	r3, [sp, #4]
 8013312:	2300      	movs	r3, #0
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	2300      	movs	r3, #0
 8013318:	2200      	movs	r2, #0
 801331a:	2101      	movs	r1, #1
 801331c:	2000      	movs	r0, #0
 801331e:	f7ff fc75 	bl	8012c0c <sensirion_shdlc_xcv>
 8013322:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013324:	4618      	mov	r0, r3
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 801332c:	b580      	push	{r7, lr}
 801332e:	b092      	sub	sp, #72	; 0x48
 8013330:	af04      	add	r7, sp, #16
 8013332:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8013334:	f107 0308 	add.w	r3, r7, #8
 8013338:	9302      	str	r3, [sp, #8]
 801333a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801333e:	9301      	str	r3, [sp, #4]
 8013340:	2328      	movs	r3, #40	; 0x28
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	2300      	movs	r3, #0
 8013346:	2200      	movs	r2, #0
 8013348:	2103      	movs	r1, #3
 801334a:	2000      	movs	r0, #0
 801334c:	f7ff fc5e 	bl	8012c0c <sensirion_shdlc_xcv>
 8013350:	4603      	mov	r3, r0
 8013352:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8013354:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013358:	2b00      	cmp	r3, #0
 801335a:	d002      	beq.n	8013362 <sps30_read_measurement+0x36>
        return error;
 801335c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013360:	e07f      	b.n	8013462 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8013362:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013366:	2b28      	cmp	r3, #40	; 0x28
 8013368:	d002      	beq.n	8013370 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801336a:	f04f 33ff 	mov.w	r3, #4294967295
 801336e:	e078      	b.n	8013462 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8013370:	f107 0308 	add.w	r3, r7, #8
 8013374:	4618      	mov	r0, r3
 8013376:	f7ff fba6 	bl	8012ac6 <sensirion_bytes_to_float>
 801337a:	eef0 7a40 	vmov.f32	s15, s0
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8013384:	f107 0308 	add.w	r3, r7, #8
 8013388:	3304      	adds	r3, #4
 801338a:	4618      	mov	r0, r3
 801338c:	f7ff fb9b 	bl	8012ac6 <sensirion_bytes_to_float>
 8013390:	eef0 7a40 	vmov.f32	s15, s0
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 801339a:	f107 0308 	add.w	r3, r7, #8
 801339e:	3308      	adds	r3, #8
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7ff fb90 	bl	8012ac6 <sensirion_bytes_to_float>
 80133a6:	eef0 7a40 	vmov.f32	s15, s0
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 80133b0:	f107 0308 	add.w	r3, r7, #8
 80133b4:	330c      	adds	r3, #12
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff fb85 	bl	8012ac6 <sensirion_bytes_to_float>
 80133bc:	eef0 7a40 	vmov.f32	s15, s0
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 80133c6:	f107 0308 	add.w	r3, r7, #8
 80133ca:	3310      	adds	r3, #16
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7ff fb7a 	bl	8012ac6 <sensirion_bytes_to_float>
 80133d2:	eef0 7a40 	vmov.f32	s15, s0
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 80133dc:	f107 0308 	add.w	r3, r7, #8
 80133e0:	3314      	adds	r3, #20
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff fb6f 	bl	8012ac6 <sensirion_bytes_to_float>
 80133e8:	eef0 7a40 	vmov.f32	s15, s0
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 80133f2:	f107 0308 	add.w	r3, r7, #8
 80133f6:	3318      	adds	r3, #24
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff fb64 	bl	8012ac6 <sensirion_bytes_to_float>
 80133fe:	eef0 7a40 	vmov.f32	s15, s0
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8013408:	f107 0308 	add.w	r3, r7, #8
 801340c:	331c      	adds	r3, #28
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff fb59 	bl	8012ac6 <sensirion_bytes_to_float>
 8013414:	eef0 7a40 	vmov.f32	s15, s0
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 801341e:	f107 0308 	add.w	r3, r7, #8
 8013422:	3320      	adds	r3, #32
 8013424:	4618      	mov	r0, r3
 8013426:	f7ff fb4e 	bl	8012ac6 <sensirion_bytes_to_float>
 801342a:	eef0 7a40 	vmov.f32	s15, s0
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8013434:	f107 0308 	add.w	r3, r7, #8
 8013438:	3324      	adds	r3, #36	; 0x24
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff fb43 	bl	8012ac6 <sensirion_bytes_to_float>
 8013440:	eef0 7a40 	vmov.f32	s15, s0
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 801344a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801344e:	2b00      	cmp	r3, #0
 8013450:	d006      	beq.n	8013460 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8013452:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013456:	b21b      	sxth	r3, r3
 8013458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801345c:	b21b      	sxth	r3, r3
 801345e:	e000      	b.n	8013462 <sps30_read_measurement+0x136>
    }

    return 0;
 8013460:	2300      	movs	r3, #0
}
 8013462:	4618      	mov	r0, r3
 8013464:	3738      	adds	r7, #56	; 0x38
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}

0801346a <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 801346a:	b580      	push	{r7, lr}
 801346c:	b086      	sub	sp, #24
 801346e:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8013470:	2300      	movs	r3, #0
 8013472:	9302      	str	r3, [sp, #8]
 8013474:	1d3b      	adds	r3, r7, #4
 8013476:	9301      	str	r3, [sp, #4]
 8013478:	2300      	movs	r3, #0
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	2300      	movs	r3, #0
 801347e:	2200      	movs	r2, #0
 8013480:	2156      	movs	r1, #86	; 0x56
 8013482:	2000      	movs	r0, #0
 8013484:	f7ff fbc2 	bl	8012c0c <sensirion_shdlc_xcv>
 8013488:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 801348a:	4618      	mov	r0, r3
 801348c:	3708      	adds	r7, #8
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8013492:	b580      	push	{r7, lr}
 8013494:	b08a      	sub	sp, #40	; 0x28
 8013496:	af04      	add	r7, sp, #16
 8013498:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 801349a:	f107 0308 	add.w	r3, r7, #8
 801349e:	9302      	str	r3, [sp, #8]
 80134a0:	f107 0310 	add.w	r3, r7, #16
 80134a4:	9301      	str	r3, [sp, #4]
 80134a6:	2307      	movs	r3, #7
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	2300      	movs	r3, #0
 80134ac:	2200      	movs	r2, #0
 80134ae:	21d1      	movs	r1, #209	; 0xd1
 80134b0:	2000      	movs	r0, #0
 80134b2:	f7ff fbab 	bl	8012c0c <sensirion_shdlc_xcv>
 80134b6:	4603      	mov	r3, r0
 80134b8:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 80134ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d002      	beq.n	80134c8 <sps30_read_version+0x36>
        return error;
 80134c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80134c6:	e01f      	b.n	8013508 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 80134c8:	7cfb      	ldrb	r3, [r7, #19]
 80134ca:	2b07      	cmp	r3, #7
 80134cc:	d002      	beq.n	80134d4 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80134ce:	f04f 33ff 	mov.w	r3, #4294967295
 80134d2:	e019      	b.n	8013508 <sps30_read_version+0x76>
    }

    if (header.state) {
 80134d4:	7cbb      	ldrb	r3, [r7, #18]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d005      	beq.n	80134e6 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 80134da:	7cbb      	ldrb	r3, [r7, #18]
 80134dc:	b21b      	sxth	r3, r3
 80134de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134e2:	b21b      	sxth	r3, r3
 80134e4:	e010      	b.n	8013508 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 80134e6:	7a3a      	ldrb	r2, [r7, #8]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 80134ec:	7a7a      	ldrb	r2, [r7, #9]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 80134f2:	7afa      	ldrb	r2, [r7, #11]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 80134f8:	7b7a      	ldrb	r2, [r7, #13]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 80134fe:	7bba      	ldrb	r2, [r7, #14]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	711a      	strb	r2, [r3, #4]

    return error;
 8013504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3718      	adds	r7, #24
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	460b      	mov	r3, r1
 801351a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801351c:	f640 0074 	movw	r0, #2164	; 0x874
 8013520:	f007 fd14 	bl	801af4c <USBD_static_malloc>
 8013524:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d109      	bne.n	8013540 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	32b0      	adds	r2, #176	; 0xb0
 8013536:	2100      	movs	r1, #0
 8013538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801353c:	2302      	movs	r3, #2
 801353e:	e06e      	b.n	801361e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	32b0      	adds	r2, #176	; 0xb0
 801354a:	68f9      	ldr	r1, [r7, #12]
 801354c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	32b0      	adds	r2, #176	; 0xb0
 801355a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	7c1b      	ldrb	r3, [r3, #16]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d12b      	bne.n	80135c4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801356c:	4b2e      	ldr	r3, [pc, #184]	; (8013628 <USBD_MSC_Init+0x118>)
 801356e:	7819      	ldrb	r1, [r3, #0]
 8013570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013574:	2202      	movs	r2, #2
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f007 fba5 	bl	801acc6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801357c:	4b2a      	ldr	r3, [pc, #168]	; (8013628 <USBD_MSC_Init+0x118>)
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	f003 020f 	and.w	r2, r3, #15
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	4613      	mov	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	4413      	add	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	440b      	add	r3, r1
 8013590:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013594:	2201      	movs	r2, #1
 8013596:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013598:	4b24      	ldr	r3, [pc, #144]	; (801362c <USBD_MSC_Init+0x11c>)
 801359a:	7819      	ldrb	r1, [r3, #0]
 801359c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135a0:	2202      	movs	r2, #2
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f007 fb8f 	bl	801acc6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80135a8:	4b20      	ldr	r3, [pc, #128]	; (801362c <USBD_MSC_Init+0x11c>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	f003 020f 	and.w	r2, r3, #15
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	4613      	mov	r3, r2
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	4413      	add	r3, r2
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	440b      	add	r3, r1
 80135bc:	3324      	adds	r3, #36	; 0x24
 80135be:	2201      	movs	r2, #1
 80135c0:	801a      	strh	r2, [r3, #0]
 80135c2:	e028      	b.n	8013616 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80135c4:	4b18      	ldr	r3, [pc, #96]	; (8013628 <USBD_MSC_Init+0x118>)
 80135c6:	7819      	ldrb	r1, [r3, #0]
 80135c8:	2340      	movs	r3, #64	; 0x40
 80135ca:	2202      	movs	r2, #2
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f007 fb7a 	bl	801acc6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80135d2:	4b15      	ldr	r3, [pc, #84]	; (8013628 <USBD_MSC_Init+0x118>)
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	f003 020f 	and.w	r2, r3, #15
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	4613      	mov	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	440b      	add	r3, r1
 80135e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80135ea:	2201      	movs	r2, #1
 80135ec:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80135ee:	4b0f      	ldr	r3, [pc, #60]	; (801362c <USBD_MSC_Init+0x11c>)
 80135f0:	7819      	ldrb	r1, [r3, #0]
 80135f2:	2340      	movs	r3, #64	; 0x40
 80135f4:	2202      	movs	r2, #2
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f007 fb65 	bl	801acc6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80135fc:	4b0b      	ldr	r3, [pc, #44]	; (801362c <USBD_MSC_Init+0x11c>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	f003 020f 	and.w	r2, r3, #15
 8013604:	6879      	ldr	r1, [r7, #4]
 8013606:	4613      	mov	r3, r2
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	4413      	add	r3, r2
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	440b      	add	r3, r1
 8013610:	3324      	adds	r3, #36	; 0x24
 8013612:	2201      	movs	r2, #1
 8013614:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 fa2c 	bl	8013a74 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801361c:	2300      	movs	r3, #0
}
 801361e:	4618      	mov	r0, r3
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	2000008b 	.word	0x2000008b
 801362c:	2000008a 	.word	0x2000008a

08013630 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801363c:	4b26      	ldr	r3, [pc, #152]	; (80136d8 <USBD_MSC_DeInit+0xa8>)
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f007 fb65 	bl	801ad12 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8013648:	4b23      	ldr	r3, [pc, #140]	; (80136d8 <USBD_MSC_DeInit+0xa8>)
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	f003 020f 	and.w	r2, r3, #15
 8013650:	6879      	ldr	r1, [r7, #4]
 8013652:	4613      	mov	r3, r2
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	4413      	add	r3, r2
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	440b      	add	r3, r1
 801365c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013660:	2200      	movs	r2, #0
 8013662:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8013664:	4b1d      	ldr	r3, [pc, #116]	; (80136dc <USBD_MSC_DeInit+0xac>)
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	4619      	mov	r1, r3
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f007 fb51 	bl	801ad12 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8013670:	4b1a      	ldr	r3, [pc, #104]	; (80136dc <USBD_MSC_DeInit+0xac>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	f003 020f 	and.w	r2, r3, #15
 8013678:	6879      	ldr	r1, [r7, #4]
 801367a:	4613      	mov	r3, r2
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	4413      	add	r3, r2
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	440b      	add	r3, r1
 8013684:	3324      	adds	r3, #36	; 0x24
 8013686:	2200      	movs	r2, #0
 8013688:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	32b0      	adds	r2, #176	; 0xb0
 8013694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d018      	beq.n	80136ce <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fa67 	bl	8013b70 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	32b0      	adds	r2, #176	; 0xb0
 80136ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f007 fc59 	bl	801af68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	32b0      	adds	r2, #176	; 0xb0
 80136c0:	2100      	movs	r1, #0
 80136c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2200      	movs	r2, #0
 80136ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80136ce:	2300      	movs	r3, #0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	2000008b 	.word	0x2000008b
 80136dc:	2000008a 	.word	0x2000008a

080136e0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	32b0      	adds	r2, #176	; 0xb0
 80136f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80136fa:	2300      	movs	r3, #0
 80136fc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80136fe:	2300      	movs	r3, #0
 8013700:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d101      	bne.n	801370c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013708:	2303      	movs	r3, #3
 801370a:	e0e1      	b.n	80138d0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013714:	2b00      	cmp	r3, #0
 8013716:	d053      	beq.n	80137c0 <USBD_MSC_Setup+0xe0>
 8013718:	2b20      	cmp	r3, #32
 801371a:	f040 80d1 	bne.w	80138c0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	785b      	ldrb	r3, [r3, #1]
 8013722:	2bfe      	cmp	r3, #254	; 0xfe
 8013724:	d002      	beq.n	801372c <USBD_MSC_Setup+0x4c>
 8013726:	2bff      	cmp	r3, #255	; 0xff
 8013728:	d02a      	beq.n	8013780 <USBD_MSC_Setup+0xa0>
 801372a:	e041      	b.n	80137b0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	885b      	ldrh	r3, [r3, #2]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d11e      	bne.n	8013772 <USBD_MSC_Setup+0x92>
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	88db      	ldrh	r3, [r3, #6]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d11a      	bne.n	8013772 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013742:	2b00      	cmp	r3, #0
 8013744:	da15      	bge.n	8013772 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	33b0      	adds	r3, #176	; 0xb0
 8013750:	009b      	lsls	r3, r3, #2
 8013752:	4413      	add	r3, r2
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	699b      	ldr	r3, [r3, #24]
 8013758:	4798      	blx	r3
 801375a:	4603      	mov	r3, r0
 801375c:	461a      	mov	r2, r3
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	2201      	movs	r2, #1
 8013766:	4619      	mov	r1, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f003 f949 	bl	8016a00 <USBD_CtlSendData>
 801376e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013770:	e025      	b.n	80137be <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8013772:	6839      	ldr	r1, [r7, #0]
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f003 f8d2 	bl	801691e <USBD_CtlError>
            ret = USBD_FAIL;
 801377a:	2303      	movs	r3, #3
 801377c:	75fb      	strb	r3, [r7, #23]
          break;
 801377e:	e01e      	b.n	80137be <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	885b      	ldrh	r3, [r3, #2]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d10c      	bne.n	80137a2 <USBD_MSC_Setup+0xc2>
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	88db      	ldrh	r3, [r3, #6]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d108      	bne.n	80137a2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013796:	2b00      	cmp	r3, #0
 8013798:	db03      	blt.n	80137a2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 f9b4 	bl	8013b08 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137a0:	e00d      	b.n	80137be <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80137a2:	6839      	ldr	r1, [r7, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f003 f8ba 	bl	801691e <USBD_CtlError>
            ret = USBD_FAIL;
 80137aa:	2303      	movs	r3, #3
 80137ac:	75fb      	strb	r3, [r7, #23]
          break;
 80137ae:	e006      	b.n	80137be <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80137b0:	6839      	ldr	r1, [r7, #0]
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f003 f8b3 	bl	801691e <USBD_CtlError>
          ret = USBD_FAIL;
 80137b8:	2303      	movs	r3, #3
 80137ba:	75fb      	strb	r3, [r7, #23]
          break;
 80137bc:	bf00      	nop
      }
      break;
 80137be:	e086      	b.n	80138ce <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	785b      	ldrb	r3, [r3, #1]
 80137c4:	2b0b      	cmp	r3, #11
 80137c6:	d872      	bhi.n	80138ae <USBD_MSC_Setup+0x1ce>
 80137c8:	a201      	add	r2, pc, #4	; (adr r2, 80137d0 <USBD_MSC_Setup+0xf0>)
 80137ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137ce:	bf00      	nop
 80137d0:	08013801 	.word	0x08013801
 80137d4:	0801387d 	.word	0x0801387d
 80137d8:	080138af 	.word	0x080138af
 80137dc:	080138af 	.word	0x080138af
 80137e0:	080138af 	.word	0x080138af
 80137e4:	080138af 	.word	0x080138af
 80137e8:	080138af 	.word	0x080138af
 80137ec:	080138af 	.word	0x080138af
 80137f0:	080138af 	.word	0x080138af
 80137f4:	080138af 	.word	0x080138af
 80137f8:	0801382b 	.word	0x0801382b
 80137fc:	08013855 	.word	0x08013855
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013806:	b2db      	uxtb	r3, r3
 8013808:	2b03      	cmp	r3, #3
 801380a:	d107      	bne.n	801381c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801380c:	f107 030e 	add.w	r3, r7, #14
 8013810:	2202      	movs	r2, #2
 8013812:	4619      	mov	r1, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f003 f8f3 	bl	8016a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801381a:	e050      	b.n	80138be <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801381c:	6839      	ldr	r1, [r7, #0]
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f003 f87d 	bl	801691e <USBD_CtlError>
            ret = USBD_FAIL;
 8013824:	2303      	movs	r3, #3
 8013826:	75fb      	strb	r3, [r7, #23]
          break;
 8013828:	e049      	b.n	80138be <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013830:	b2db      	uxtb	r3, r3
 8013832:	2b03      	cmp	r3, #3
 8013834:	d107      	bne.n	8013846 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	3304      	adds	r3, #4
 801383a:	2201      	movs	r2, #1
 801383c:	4619      	mov	r1, r3
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f003 f8de 	bl	8016a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013844:	e03b      	b.n	80138be <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013846:	6839      	ldr	r1, [r7, #0]
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f003 f868 	bl	801691e <USBD_CtlError>
            ret = USBD_FAIL;
 801384e:	2303      	movs	r3, #3
 8013850:	75fb      	strb	r3, [r7, #23]
          break;
 8013852:	e034      	b.n	80138be <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801385a:	b2db      	uxtb	r3, r3
 801385c:	2b03      	cmp	r3, #3
 801385e:	d106      	bne.n	801386e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	885b      	ldrh	r3, [r3, #2]
 8013864:	b2db      	uxtb	r3, r3
 8013866:	461a      	mov	r2, r3
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801386c:	e027      	b.n	80138be <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f003 f854 	bl	801691e <USBD_CtlError>
            ret = USBD_FAIL;
 8013876:	2303      	movs	r3, #3
 8013878:	75fb      	strb	r3, [r7, #23]
          break;
 801387a:	e020      	b.n	80138be <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013882:	b2db      	uxtb	r3, r3
 8013884:	2b03      	cmp	r3, #3
 8013886:	d119      	bne.n	80138bc <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	885b      	ldrh	r3, [r3, #2]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d115      	bne.n	80138bc <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	889b      	ldrh	r3, [r3, #4]
 8013894:	b2db      	uxtb	r3, r3
 8013896:	4619      	mov	r1, r3
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f007 fa59 	bl	801ad50 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	889b      	ldrh	r3, [r3, #4]
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	4619      	mov	r1, r3
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f000 fb2e 	bl	8013f08 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80138ac:	e006      	b.n	80138bc <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80138ae:	6839      	ldr	r1, [r7, #0]
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f003 f834 	bl	801691e <USBD_CtlError>
          ret = USBD_FAIL;
 80138b6:	2303      	movs	r3, #3
 80138b8:	75fb      	strb	r3, [r7, #23]
          break;
 80138ba:	e000      	b.n	80138be <USBD_MSC_Setup+0x1de>
          break;
 80138bc:	bf00      	nop
      }
      break;
 80138be:	e006      	b.n	80138ce <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f003 f82b 	bl	801691e <USBD_CtlError>
      ret = USBD_FAIL;
 80138c8:	2303      	movs	r3, #3
 80138ca:	75fb      	strb	r3, [r7, #23]
      break;
 80138cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80138ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3718      	adds	r7, #24
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	460b      	mov	r3, r1
 80138e2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80138e4:	78fb      	ldrb	r3, [r7, #3]
 80138e6:	4619      	mov	r1, r3
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 f959 	bl	8013ba0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	460b      	mov	r3, r1
 8013902:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013904:	78fb      	ldrb	r3, [r7, #3]
 8013906:	4619      	mov	r1, r3
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f000 f983 	bl	8013c14 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801390e:	2300      	movs	r3, #0
}
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013920:	2181      	movs	r1, #129	; 0x81
 8013922:	4812      	ldr	r0, [pc, #72]	; (801396c <USBD_MSC_GetHSCfgDesc+0x54>)
 8013924:	f002 f9c3 	bl	8015cae <USBD_GetEpDesc>
 8013928:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801392a:	2101      	movs	r1, #1
 801392c:	480f      	ldr	r0, [pc, #60]	; (801396c <USBD_MSC_GetHSCfgDesc+0x54>)
 801392e:	f002 f9be 	bl	8015cae <USBD_GetEpDesc>
 8013932:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d006      	beq.n	8013948 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2200      	movs	r2, #0
 801393e:	711a      	strb	r2, [r3, #4]
 8013940:	2200      	movs	r2, #0
 8013942:	f042 0202 	orr.w	r2, r2, #2
 8013946:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d006      	beq.n	801395c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	2200      	movs	r2, #0
 8013952:	711a      	strb	r2, [r3, #4]
 8013954:	2200      	movs	r2, #0
 8013956:	f042 0202 	orr.w	r2, r2, #2
 801395a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2220      	movs	r2, #32
 8013960:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013962:	4b02      	ldr	r3, [pc, #8]	; (801396c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	20000060 	.word	0x20000060

08013970 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013978:	2181      	movs	r1, #129	; 0x81
 801397a:	4812      	ldr	r0, [pc, #72]	; (80139c4 <USBD_MSC_GetFSCfgDesc+0x54>)
 801397c:	f002 f997 	bl	8015cae <USBD_GetEpDesc>
 8013980:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013982:	2101      	movs	r1, #1
 8013984:	480f      	ldr	r0, [pc, #60]	; (80139c4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8013986:	f002 f992 	bl	8015cae <USBD_GetEpDesc>
 801398a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d006      	beq.n	80139a0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2200      	movs	r2, #0
 8013996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801399a:	711a      	strb	r2, [r3, #4]
 801399c:	2200      	movs	r2, #0
 801399e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d006      	beq.n	80139b4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	2200      	movs	r2, #0
 80139aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139ae:	711a      	strb	r2, [r3, #4]
 80139b0:	2200      	movs	r2, #0
 80139b2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2220      	movs	r2, #32
 80139b8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80139ba:	4b02      	ldr	r3, [pc, #8]	; (80139c4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3710      	adds	r7, #16
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	20000060 	.word	0x20000060

080139c8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80139d0:	2181      	movs	r1, #129	; 0x81
 80139d2:	4812      	ldr	r0, [pc, #72]	; (8013a1c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80139d4:	f002 f96b 	bl	8015cae <USBD_GetEpDesc>
 80139d8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80139da:	2101      	movs	r1, #1
 80139dc:	480f      	ldr	r0, [pc, #60]	; (8013a1c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80139de:	f002 f966 	bl	8015cae <USBD_GetEpDesc>
 80139e2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d006      	beq.n	80139f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2200      	movs	r2, #0
 80139ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139f2:	711a      	strb	r2, [r3, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d006      	beq.n	8013a0c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	2200      	movs	r2, #0
 8013a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a06:	711a      	strb	r2, [r3, #4]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2220      	movs	r2, #32
 8013a10:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013a12:	4b02      	ldr	r3, [pc, #8]	; (8013a1c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3710      	adds	r7, #16
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}
 8013a1c:	20000060 	.word	0x20000060

08013a20 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b083      	sub	sp, #12
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	220a      	movs	r2, #10
 8013a2c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013a2e:	4b03      	ldr	r3, [pc, #12]	; (8013a3c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	20000080 	.word	0x20000080

08013a40 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d101      	bne.n	8013a54 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a50:	2303      	movs	r3, #3
 8013a52:	e009      	b.n	8013a68 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	33b0      	adds	r3, #176	; 0xb0
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	4413      	add	r3, r2
 8013a62:	683a      	ldr	r2, [r7, #0]
 8013a64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013a66:	2300      	movs	r3, #0
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	370c      	adds	r7, #12
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	32b0      	adds	r2, #176	; 0xb0
 8013a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a8a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d032      	beq.n	8013af8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2200      	movs	r2, #0
 8013a96:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	33b0      	adds	r3, #176	; 0xb0
 8013ac0:	009b      	lsls	r3, r3, #2
 8013ac2:	4413      	add	r3, r2
 8013ac4:	685b      	ldr	r3, [r3, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2000      	movs	r0, #0
 8013aca:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013acc:	4b0c      	ldr	r3, [pc, #48]	; (8013b00 <MSC_BOT_Init+0x8c>)
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f007 f93c 	bl	801ad50 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013ad8:	4b0a      	ldr	r3, [pc, #40]	; (8013b04 <MSC_BOT_Init+0x90>)
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	4619      	mov	r1, r3
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f007 f936 	bl	801ad50 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013ae4:	4b06      	ldr	r3, [pc, #24]	; (8013b00 <MSC_BOT_Init+0x8c>)
 8013ae6:	7819      	ldrb	r1, [r3, #0]
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013aee:	231f      	movs	r3, #31
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f007 f9f6 	bl	801aee2 <USBD_LL_PrepareReceive>
 8013af6:	e000      	b.n	8013afa <MSC_BOT_Init+0x86>
    return;
 8013af8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	2000008b 	.word	0x2000008b
 8013b04:	2000008a 	.word	0x2000008a

08013b08 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b084      	sub	sp, #16
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	32b0      	adds	r2, #176	; 0xb0
 8013b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b1e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d01b      	beq.n	8013b5e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2200      	movs	r2, #0
 8013b2a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2201      	movs	r2, #1
 8013b30:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8013b32:	4b0d      	ldr	r3, [pc, #52]	; (8013b68 <MSC_BOT_Reset+0x60>)
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	4619      	mov	r1, r3
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f007 f947 	bl	801adcc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8013b3e:	4b0b      	ldr	r3, [pc, #44]	; (8013b6c <MSC_BOT_Reset+0x64>)
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	4619      	mov	r1, r3
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f007 f941 	bl	801adcc <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013b4a:	4b08      	ldr	r3, [pc, #32]	; (8013b6c <MSC_BOT_Reset+0x64>)
 8013b4c:	7819      	ldrb	r1, [r3, #0]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013b54:	231f      	movs	r3, #31
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f007 f9c3 	bl	801aee2 <USBD_LL_PrepareReceive>
 8013b5c:	e000      	b.n	8013b60 <MSC_BOT_Reset+0x58>
    return;
 8013b5e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013b60:	3710      	adds	r7, #16
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}
 8013b66:	bf00      	nop
 8013b68:	2000008a 	.word	0x2000008a
 8013b6c:	2000008b 	.word	0x2000008b

08013b70 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b085      	sub	sp, #20
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	32b0      	adds	r2, #176	; 0xb0
 8013b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b86:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d002      	beq.n	8013b94 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2200      	movs	r2, #0
 8013b92:	721a      	strb	r2, [r3, #8]
  }
}
 8013b94:	bf00      	nop
 8013b96:	3714      	adds	r7, #20
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b084      	sub	sp, #16
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	460b      	mov	r3, r1
 8013baa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	32b0      	adds	r2, #176	; 0xb0
 8013bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d020      	beq.n	8013c04 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	7a1b      	ldrb	r3, [r3, #8]
 8013bc6:	2b02      	cmp	r3, #2
 8013bc8:	d005      	beq.n	8013bd6 <MSC_BOT_DataIn+0x36>
 8013bca:	2b02      	cmp	r3, #2
 8013bcc:	db1c      	blt.n	8013c08 <MSC_BOT_DataIn+0x68>
 8013bce:	3b03      	subs	r3, #3
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d819      	bhi.n	8013c08 <MSC_BOT_DataIn+0x68>
 8013bd4:	e011      	b.n	8013bfa <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013be2:	461a      	mov	r2, r3
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 f9c9 	bl	8013f7c <SCSI_ProcessCmd>
 8013bea:	4603      	mov	r3, r0
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	da0d      	bge.n	8013c0c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013bf0:	2101      	movs	r1, #1
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f90c 	bl	8013e10 <MSC_BOT_SendCSW>
      }
      break;
 8013bf8:	e008      	b.n	8013c0c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 f907 	bl	8013e10 <MSC_BOT_SendCSW>
      break;
 8013c02:	e004      	b.n	8013c0e <MSC_BOT_DataIn+0x6e>
    return;
 8013c04:	bf00      	nop
 8013c06:	e002      	b.n	8013c0e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8013c08:	bf00      	nop
 8013c0a:	e000      	b.n	8013c0e <MSC_BOT_DataIn+0x6e>
      break;
 8013c0c:	bf00      	nop
  }
}
 8013c0e:	3710      	adds	r7, #16
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	32b0      	adds	r2, #176	; 0xb0
 8013c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c2e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d01c      	beq.n	8013c70 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	7a1b      	ldrb	r3, [r3, #8]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d002      	beq.n	8013c44 <MSC_BOT_DataOut+0x30>
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d004      	beq.n	8013c4c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013c42:	e018      	b.n	8013c76 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 f819 	bl	8013c7c <MSC_BOT_CBW_Decode>
      break;
 8013c4a:	e014      	b.n	8013c76 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013c58:	461a      	mov	r2, r3
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 f98e 	bl	8013f7c <SCSI_ProcessCmd>
 8013c60:	4603      	mov	r3, r0
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	da06      	bge.n	8013c74 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013c66:	2101      	movs	r1, #1
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 f8d1 	bl	8013e10 <MSC_BOT_SendCSW>
      break;
 8013c6e:	e001      	b.n	8013c74 <MSC_BOT_DataOut+0x60>
    return;
 8013c70:	bf00      	nop
 8013c72:	e000      	b.n	8013c76 <MSC_BOT_DataOut+0x62>
      break;
 8013c74:	bf00      	nop
  }
}
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	32b0      	adds	r2, #176	; 0xb0
 8013c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c92:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d079      	beq.n	8013d8e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013cb2:	4b3a      	ldr	r3, [pc, #232]	; (8013d9c <MSC_BOT_CBW_Decode+0x120>)
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f007 f933 	bl	801af24 <USBD_LL_GetRxDataSize>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b1f      	cmp	r3, #31
 8013cc2:	d114      	bne.n	8013cee <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013cca:	4a35      	ldr	r2, [pc, #212]	; (8013da0 <MSC_BOT_CBW_Decode+0x124>)
 8013ccc:	4293      	cmp	r3, r2
 8013cce:	d10e      	bne.n	8013cee <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d809      	bhi.n	8013cee <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d004      	beq.n	8013cee <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013cea:	2b10      	cmp	r3, #16
 8013cec:	d90e      	bls.n	8013d0c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013cf4:	2320      	movs	r3, #32
 8013cf6:	2205      	movs	r2, #5
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 fe2b 	bl	8014954 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2202      	movs	r2, #2
 8013d02:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f000 f8bd 	bl	8013e84 <MSC_BOT_Abort>
 8013d0a:	e043      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013d18:	461a      	mov	r2, r3
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f92e 	bl	8013f7c <SCSI_ProcessCmd>
 8013d20:	4603      	mov	r3, r0
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	da0c      	bge.n	8013d40 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	7a1b      	ldrb	r3, [r3, #8]
 8013d2a:	2b05      	cmp	r3, #5
 8013d2c:	d104      	bne.n	8013d38 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013d2e:	2101      	movs	r1, #1
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 f86d 	bl	8013e10 <MSC_BOT_SendCSW>
 8013d36:	e02d      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f000 f8a3 	bl	8013e84 <MSC_BOT_Abort>
 8013d3e:	e029      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	7a1b      	ldrb	r3, [r3, #8]
 8013d44:	2b02      	cmp	r3, #2
 8013d46:	d024      	beq.n	8013d92 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d020      	beq.n	8013d92 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013d54:	2b03      	cmp	r3, #3
 8013d56:	d01c      	beq.n	8013d92 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d009      	beq.n	8013d74 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	f103 0110 	add.w	r1, r3, #16
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f000 f819 	bl	8013da4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013d72:	e00f      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	68db      	ldr	r3, [r3, #12]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d104      	bne.n	8013d86 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 f846 	bl	8013e10 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013d84:	e006      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f000 f87c 	bl	8013e84 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013d8c:	e002      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
    return;
 8013d8e:	bf00      	nop
 8013d90:	e000      	b.n	8013d94 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8013d92:	bf00      	nop
    }
  }
}
 8013d94:	3710      	adds	r7, #16
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	2000008b 	.word	0x2000008b
 8013da0:	43425355 	.word	0x43425355

08013da4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b086      	sub	sp, #24
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	32b0      	adds	r2, #176	; 0xb0
 8013dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dbe:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d01e      	beq.n	8013e04 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	bf28      	it	cs
 8013dd2:	4613      	movcs	r3, r2
 8013dd4:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	1ad2      	subs	r2, r2, r3
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	2200      	movs	r2, #0
 8013dea:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2204      	movs	r2, #4
 8013df2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8013df4:	4b05      	ldr	r3, [pc, #20]	; (8013e0c <MSC_BOT_SendData+0x68>)
 8013df6:	7819      	ldrb	r1, [r3, #0]
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	68ba      	ldr	r2, [r7, #8]
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f007 f84f 	bl	801aea0 <USBD_LL_Transmit>
 8013e02:	e000      	b.n	8013e06 <MSC_BOT_SendData+0x62>
    return;
 8013e04:	bf00      	nop
}
 8013e06:	3718      	adds	r7, #24
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	2000008a 	.word	0x2000008a

08013e10 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	460b      	mov	r3, r1
 8013e1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	32b0      	adds	r2, #176	; 0xb0
 8013e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e2a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d01d      	beq.n	8013e6e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	4a10      	ldr	r2, [pc, #64]	; (8013e78 <MSC_BOT_SendCSW+0x68>)
 8013e36:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	78fa      	ldrb	r2, [r7, #3]
 8013e3e:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2200      	movs	r2, #0
 8013e46:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8013e48:	4b0c      	ldr	r3, [pc, #48]	; (8013e7c <MSC_BOT_SendCSW+0x6c>)
 8013e4a:	7819      	ldrb	r1, [r3, #0]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8013e52:	230d      	movs	r3, #13
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f007 f823 	bl	801aea0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013e5a:	4b09      	ldr	r3, [pc, #36]	; (8013e80 <MSC_BOT_SendCSW+0x70>)
 8013e5c:	7819      	ldrb	r1, [r3, #0]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013e64:	231f      	movs	r3, #31
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f007 f83b 	bl	801aee2 <USBD_LL_PrepareReceive>
 8013e6c:	e000      	b.n	8013e70 <MSC_BOT_SendCSW+0x60>
    return;
 8013e6e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013e70:	3710      	adds	r7, #16
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	53425355 	.word	0x53425355
 8013e7c:	2000008a 	.word	0x2000008a
 8013e80:	2000008b 	.word	0x2000008b

08013e84 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	32b0      	adds	r2, #176	; 0xb0
 8013e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e9a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d02a      	beq.n	8013ef8 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d10e      	bne.n	8013eca <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d009      	beq.n	8013eca <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d105      	bne.n	8013eca <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013ebe:	4b10      	ldr	r3, [pc, #64]	; (8013f00 <MSC_BOT_Abort+0x7c>)
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f006 ff62 	bl	801ad8e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013eca:	4b0e      	ldr	r3, [pc, #56]	; (8013f04 <MSC_BOT_Abort+0x80>)
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	4619      	mov	r1, r3
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f006 ff5c 	bl	801ad8e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	7a5b      	ldrb	r3, [r3, #9]
 8013eda:	2b02      	cmp	r3, #2
 8013edc:	d10d      	bne.n	8013efa <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013ede:	4b09      	ldr	r3, [pc, #36]	; (8013f04 <MSC_BOT_Abort+0x80>)
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f006 ff52 	bl	801ad8e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013eea:	4b05      	ldr	r3, [pc, #20]	; (8013f00 <MSC_BOT_Abort+0x7c>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	4619      	mov	r1, r3
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f006 ff4c 	bl	801ad8e <USBD_LL_StallEP>
 8013ef6:	e000      	b.n	8013efa <MSC_BOT_Abort+0x76>
    return;
 8013ef8:	bf00      	nop
  }
}
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	2000008b 	.word	0x2000008b
 8013f04:	2000008a 	.word	0x2000008a

08013f08 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	460b      	mov	r3, r1
 8013f12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	32b0      	adds	r2, #176	; 0xb0
 8013f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f22:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d01d      	beq.n	8013f66 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	7a5b      	ldrb	r3, [r3, #9]
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	d10c      	bne.n	8013f4c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013f32:	4b10      	ldr	r3, [pc, #64]	; (8013f74 <MSC_BOT_CplClrFeature+0x6c>)
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	4619      	mov	r1, r3
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f006 ff28 	bl	801ad8e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013f3e:	4b0e      	ldr	r3, [pc, #56]	; (8013f78 <MSC_BOT_CplClrFeature+0x70>)
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	4619      	mov	r1, r3
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f006 ff22 	bl	801ad8e <USBD_LL_StallEP>
 8013f4a:	e00f      	b.n	8013f6c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	da0a      	bge.n	8013f6a <MSC_BOT_CplClrFeature+0x62>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	7a5b      	ldrb	r3, [r3, #9]
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d006      	beq.n	8013f6a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013f5c:	2101      	movs	r1, #1
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7ff ff56 	bl	8013e10 <MSC_BOT_SendCSW>
 8013f64:	e002      	b.n	8013f6c <MSC_BOT_CplClrFeature+0x64>
    return;
 8013f66:	bf00      	nop
 8013f68:	e000      	b.n	8013f6c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8013f6a:	bf00      	nop
  }
}
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	2000008a 	.word	0x2000008a
 8013f78:	2000008b 	.word	0x2000008b

08013f7c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	460b      	mov	r3, r1
 8013f86:	607a      	str	r2, [r7, #4]
 8013f88:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	32b0      	adds	r2, #176	; 0xb0
 8013f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f98:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d102      	bne.n	8013fa6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8013fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa4:	e168      	b.n	8014278 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	2baa      	cmp	r3, #170	; 0xaa
 8013fac:	f000 8144 	beq.w	8014238 <SCSI_ProcessCmd+0x2bc>
 8013fb0:	2baa      	cmp	r3, #170	; 0xaa
 8013fb2:	f300 8153 	bgt.w	801425c <SCSI_ProcessCmd+0x2e0>
 8013fb6:	2ba8      	cmp	r3, #168	; 0xa8
 8013fb8:	f000 812c 	beq.w	8014214 <SCSI_ProcessCmd+0x298>
 8013fbc:	2ba8      	cmp	r3, #168	; 0xa8
 8013fbe:	f300 814d 	bgt.w	801425c <SCSI_ProcessCmd+0x2e0>
 8013fc2:	2b5a      	cmp	r3, #90	; 0x5a
 8013fc4:	f300 80c0 	bgt.w	8014148 <SCSI_ProcessCmd+0x1cc>
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f2c0 8147 	blt.w	801425c <SCSI_ProcessCmd+0x2e0>
 8013fce:	2b5a      	cmp	r3, #90	; 0x5a
 8013fd0:	f200 8144 	bhi.w	801425c <SCSI_ProcessCmd+0x2e0>
 8013fd4:	a201      	add	r2, pc, #4	; (adr r2, 8013fdc <SCSI_ProcessCmd+0x60>)
 8013fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fda:	bf00      	nop
 8013fdc:	0801414f 	.word	0x0801414f
 8013fe0:	0801425d 	.word	0x0801425d
 8013fe4:	0801425d 	.word	0x0801425d
 8013fe8:	08014161 	.word	0x08014161
 8013fec:	0801425d 	.word	0x0801425d
 8013ff0:	0801425d 	.word	0x0801425d
 8013ff4:	0801425d 	.word	0x0801425d
 8013ff8:	0801425d 	.word	0x0801425d
 8013ffc:	0801425d 	.word	0x0801425d
 8014000:	0801425d 	.word	0x0801425d
 8014004:	0801425d 	.word	0x0801425d
 8014008:	0801425d 	.word	0x0801425d
 801400c:	0801425d 	.word	0x0801425d
 8014010:	0801425d 	.word	0x0801425d
 8014014:	0801425d 	.word	0x0801425d
 8014018:	0801425d 	.word	0x0801425d
 801401c:	0801425d 	.word	0x0801425d
 8014020:	0801425d 	.word	0x0801425d
 8014024:	08014173 	.word	0x08014173
 8014028:	0801425d 	.word	0x0801425d
 801402c:	0801425d 	.word	0x0801425d
 8014030:	0801425d 	.word	0x0801425d
 8014034:	0801425d 	.word	0x0801425d
 8014038:	0801425d 	.word	0x0801425d
 801403c:	0801425d 	.word	0x0801425d
 8014040:	0801425d 	.word	0x0801425d
 8014044:	080141a9 	.word	0x080141a9
 8014048:	08014185 	.word	0x08014185
 801404c:	0801425d 	.word	0x0801425d
 8014050:	0801425d 	.word	0x0801425d
 8014054:	08014197 	.word	0x08014197
 8014058:	0801425d 	.word	0x0801425d
 801405c:	0801425d 	.word	0x0801425d
 8014060:	0801425d 	.word	0x0801425d
 8014064:	0801425d 	.word	0x0801425d
 8014068:	080141cd 	.word	0x080141cd
 801406c:	0801425d 	.word	0x0801425d
 8014070:	080141df 	.word	0x080141df
 8014074:	0801425d 	.word	0x0801425d
 8014078:	0801425d 	.word	0x0801425d
 801407c:	08014203 	.word	0x08014203
 8014080:	0801425d 	.word	0x0801425d
 8014084:	08014227 	.word	0x08014227
 8014088:	0801425d 	.word	0x0801425d
 801408c:	0801425d 	.word	0x0801425d
 8014090:	0801425d 	.word	0x0801425d
 8014094:	0801425d 	.word	0x0801425d
 8014098:	0801424b 	.word	0x0801424b
 801409c:	0801425d 	.word	0x0801425d
 80140a0:	0801425d 	.word	0x0801425d
 80140a4:	0801425d 	.word	0x0801425d
 80140a8:	0801425d 	.word	0x0801425d
 80140ac:	0801425d 	.word	0x0801425d
 80140b0:	0801425d 	.word	0x0801425d
 80140b4:	0801425d 	.word	0x0801425d
 80140b8:	0801425d 	.word	0x0801425d
 80140bc:	0801425d 	.word	0x0801425d
 80140c0:	0801425d 	.word	0x0801425d
 80140c4:	0801425d 	.word	0x0801425d
 80140c8:	0801425d 	.word	0x0801425d
 80140cc:	0801425d 	.word	0x0801425d
 80140d0:	0801425d 	.word	0x0801425d
 80140d4:	0801425d 	.word	0x0801425d
 80140d8:	0801425d 	.word	0x0801425d
 80140dc:	0801425d 	.word	0x0801425d
 80140e0:	0801425d 	.word	0x0801425d
 80140e4:	0801425d 	.word	0x0801425d
 80140e8:	0801425d 	.word	0x0801425d
 80140ec:	0801425d 	.word	0x0801425d
 80140f0:	0801425d 	.word	0x0801425d
 80140f4:	0801425d 	.word	0x0801425d
 80140f8:	0801425d 	.word	0x0801425d
 80140fc:	0801425d 	.word	0x0801425d
 8014100:	0801425d 	.word	0x0801425d
 8014104:	0801425d 	.word	0x0801425d
 8014108:	0801425d 	.word	0x0801425d
 801410c:	0801425d 	.word	0x0801425d
 8014110:	0801425d 	.word	0x0801425d
 8014114:	0801425d 	.word	0x0801425d
 8014118:	0801425d 	.word	0x0801425d
 801411c:	0801425d 	.word	0x0801425d
 8014120:	0801425d 	.word	0x0801425d
 8014124:	0801425d 	.word	0x0801425d
 8014128:	0801425d 	.word	0x0801425d
 801412c:	0801425d 	.word	0x0801425d
 8014130:	0801425d 	.word	0x0801425d
 8014134:	0801425d 	.word	0x0801425d
 8014138:	0801425d 	.word	0x0801425d
 801413c:	0801425d 	.word	0x0801425d
 8014140:	0801425d 	.word	0x0801425d
 8014144:	080141bb 	.word	0x080141bb
 8014148:	2b9e      	cmp	r3, #158	; 0x9e
 801414a:	d051      	beq.n	80141f0 <SCSI_ProcessCmd+0x274>
 801414c:	e086      	b.n	801425c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801414e:	7afb      	ldrb	r3, [r7, #11]
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	4619      	mov	r1, r3
 8014154:	68f8      	ldr	r0, [r7, #12]
 8014156:	f000 f893 	bl	8014280 <SCSI_TestUnitReady>
 801415a:	4603      	mov	r3, r0
 801415c:	75fb      	strb	r3, [r7, #23]
      break;
 801415e:	e089      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014160:	7afb      	ldrb	r3, [r7, #11]
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	4619      	mov	r1, r3
 8014166:	68f8      	ldr	r0, [r7, #12]
 8014168:	f000 fb6e 	bl	8014848 <SCSI_RequestSense>
 801416c:	4603      	mov	r3, r0
 801416e:	75fb      	strb	r3, [r7, #23]
      break;
 8014170:	e080      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8014172:	7afb      	ldrb	r3, [r7, #11]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	4619      	mov	r1, r3
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f000 f8db 	bl	8014334 <SCSI_Inquiry>
 801417e:	4603      	mov	r3, r0
 8014180:	75fb      	strb	r3, [r7, #23]
      break;
 8014182:	e077      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014184:	7afb      	ldrb	r3, [r7, #11]
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	4619      	mov	r1, r3
 801418a:	68f8      	ldr	r0, [r7, #12]
 801418c:	f000 fc30 	bl	80149f0 <SCSI_StartStopUnit>
 8014190:	4603      	mov	r3, r0
 8014192:	75fb      	strb	r3, [r7, #23]
      break;
 8014194:	e06e      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014196:	7afb      	ldrb	r3, [r7, #11]
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	4619      	mov	r1, r3
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	f000 fc7c 	bl	8014a9a <SCSI_AllowPreventRemovable>
 80141a2:	4603      	mov	r3, r0
 80141a4:	75fb      	strb	r3, [r7, #23]
      break;
 80141a6:	e065      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80141a8:	7afb      	ldrb	r3, [r7, #11]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	4619      	mov	r1, r3
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f000 faea 	bl	8014788 <SCSI_ModeSense6>
 80141b4:	4603      	mov	r3, r0
 80141b6:	75fb      	strb	r3, [r7, #23]
      break;
 80141b8:	e05c      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80141ba:	7afb      	ldrb	r3, [r7, #11]
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	4619      	mov	r1, r3
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	f000 fb11 	bl	80147e8 <SCSI_ModeSense10>
 80141c6:	4603      	mov	r3, r0
 80141c8:	75fb      	strb	r3, [r7, #23]
      break;
 80141ca:	e053      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80141cc:	7afb      	ldrb	r3, [r7, #11]
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	4619      	mov	r1, r3
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f000 fa5d 	bl	8014692 <SCSI_ReadFormatCapacity>
 80141d8:	4603      	mov	r3, r0
 80141da:	75fb      	strb	r3, [r7, #23]
      break;
 80141dc:	e04a      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80141de:	7afb      	ldrb	r3, [r7, #11]
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	4619      	mov	r1, r3
 80141e4:	68f8      	ldr	r0, [r7, #12]
 80141e6:	f000 f923 	bl	8014430 <SCSI_ReadCapacity10>
 80141ea:	4603      	mov	r3, r0
 80141ec:	75fb      	strb	r3, [r7, #23]
      break;
 80141ee:	e041      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80141f0:	7afb      	ldrb	r3, [r7, #11]
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	4619      	mov	r1, r3
 80141f6:	68f8      	ldr	r0, [r7, #12]
 80141f8:	f000 f998 	bl	801452c <SCSI_ReadCapacity16>
 80141fc:	4603      	mov	r3, r0
 80141fe:	75fb      	strb	r3, [r7, #23]
      break;
 8014200:	e038      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014202:	7afb      	ldrb	r3, [r7, #11]
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	4619      	mov	r1, r3
 8014208:	68f8      	ldr	r0, [r7, #12]
 801420a:	f000 fc73 	bl	8014af4 <SCSI_Read10>
 801420e:	4603      	mov	r3, r0
 8014210:	75fb      	strb	r3, [r7, #23]
      break;
 8014212:	e02f      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014214:	7afb      	ldrb	r3, [r7, #11]
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	4619      	mov	r1, r3
 801421a:	68f8      	ldr	r0, [r7, #12]
 801421c:	f000 fd14 	bl	8014c48 <SCSI_Read12>
 8014220:	4603      	mov	r3, r0
 8014222:	75fb      	strb	r3, [r7, #23]
      break;
 8014224:	e026      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014226:	7afb      	ldrb	r3, [r7, #11]
 8014228:	687a      	ldr	r2, [r7, #4]
 801422a:	4619      	mov	r1, r3
 801422c:	68f8      	ldr	r0, [r7, #12]
 801422e:	f000 fdbf 	bl	8014db0 <SCSI_Write10>
 8014232:	4603      	mov	r3, r0
 8014234:	75fb      	strb	r3, [r7, #23]
      break;
 8014236:	e01d      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8014238:	7afb      	ldrb	r3, [r7, #11]
 801423a:	687a      	ldr	r2, [r7, #4]
 801423c:	4619      	mov	r1, r3
 801423e:	68f8      	ldr	r0, [r7, #12]
 8014240:	f000 fe8c 	bl	8014f5c <SCSI_Write12>
 8014244:	4603      	mov	r3, r0
 8014246:	75fb      	strb	r3, [r7, #23]
      break;
 8014248:	e014      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801424a:	7afb      	ldrb	r3, [r7, #11]
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	4619      	mov	r1, r3
 8014250:	68f8      	ldr	r0, [r7, #12]
 8014252:	f000 ff69 	bl	8015128 <SCSI_Verify10>
 8014256:	4603      	mov	r3, r0
 8014258:	75fb      	strb	r3, [r7, #23]
      break;
 801425a:	e00b      	b.n	8014274 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801425c:	7af9      	ldrb	r1, [r7, #11]
 801425e:	2320      	movs	r3, #32
 8014260:	2205      	movs	r2, #5
 8014262:	68f8      	ldr	r0, [r7, #12]
 8014264:	f000 fb76 	bl	8014954 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	2202      	movs	r2, #2
 801426c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801426e:	23ff      	movs	r3, #255	; 0xff
 8014270:	75fb      	strb	r3, [r7, #23]
      break;
 8014272:	bf00      	nop
  }

  return ret;
 8014274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3718      	adds	r7, #24
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b086      	sub	sp, #24
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	460b      	mov	r3, r1
 801428a:	607a      	str	r2, [r7, #4]
 801428c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	32b0      	adds	r2, #176	; 0xb0
 8014298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801429c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d102      	bne.n	80142aa <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80142a4:	f04f 33ff 	mov.w	r3, #4294967295
 80142a8:	e03f      	b.n	801432a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d00a      	beq.n	80142ca <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80142ba:	2320      	movs	r3, #32
 80142bc:	2205      	movs	r2, #5
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	f000 fb48 	bl	8014954 <SCSI_SenseCode>

    return -1;
 80142c4:	f04f 33ff 	mov.w	r3, #4294967295
 80142c8:	e02f      	b.n	801432a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80142d0:	2b02      	cmp	r3, #2
 80142d2:	d10b      	bne.n	80142ec <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80142d4:	7af9      	ldrb	r1, [r7, #11]
 80142d6:	233a      	movs	r3, #58	; 0x3a
 80142d8:	2202      	movs	r2, #2
 80142da:	68f8      	ldr	r0, [r7, #12]
 80142dc:	f000 fb3a 	bl	8014954 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	2205      	movs	r2, #5
 80142e4:	721a      	strb	r2, [r3, #8]
    return -1;
 80142e6:	f04f 33ff 	mov.w	r3, #4294967295
 80142ea:	e01e      	b.n	801432a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	33b0      	adds	r3, #176	; 0xb0
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	4413      	add	r3, r2
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	689b      	ldr	r3, [r3, #8]
 80142fe:	7afa      	ldrb	r2, [r7, #11]
 8014300:	4610      	mov	r0, r2
 8014302:	4798      	blx	r3
 8014304:	4603      	mov	r3, r0
 8014306:	2b00      	cmp	r3, #0
 8014308:	d00b      	beq.n	8014322 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801430a:	7af9      	ldrb	r1, [r7, #11]
 801430c:	233a      	movs	r3, #58	; 0x3a
 801430e:	2202      	movs	r2, #2
 8014310:	68f8      	ldr	r0, [r7, #12]
 8014312:	f000 fb1f 	bl	8014954 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2205      	movs	r2, #5
 801431a:	721a      	strb	r2, [r3, #8]

    return -1;
 801431c:	f04f 33ff 	mov.w	r3, #4294967295
 8014320:	e003      	b.n	801432a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	2200      	movs	r2, #0
 8014326:	60da      	str	r2, [r3, #12]

  return 0;
 8014328:	2300      	movs	r3, #0
}
 801432a:	4618      	mov	r0, r3
 801432c:	3718      	adds	r7, #24
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
	...

08014334 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b088      	sub	sp, #32
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	460b      	mov	r3, r1
 801433e:	607a      	str	r2, [r7, #4]
 8014340:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	32b0      	adds	r2, #176	; 0xb0
 801434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014350:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d102      	bne.n	801435e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8014358:	f04f 33ff 	mov.w	r3, #4294967295
 801435c:	e05f      	b.n	801441e <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801435e:	69bb      	ldr	r3, [r7, #24]
 8014360:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014364:	2b00      	cmp	r3, #0
 8014366:	d10a      	bne.n	801437e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801436e:	2320      	movs	r3, #32
 8014370:	2205      	movs	r2, #5
 8014372:	68f8      	ldr	r0, [r7, #12]
 8014374:	f000 faee 	bl	8014954 <SCSI_SenseCode>
    return -1;
 8014378:	f04f 33ff 	mov.w	r3, #4294967295
 801437c:	e04f      	b.n	801441e <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	3301      	adds	r3, #1
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d020      	beq.n	80143ce <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	3302      	adds	r3, #2
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d105      	bne.n	80143a2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014396:	2206      	movs	r2, #6
 8014398:	4923      	ldr	r1, [pc, #140]	; (8014428 <SCSI_Inquiry+0xf4>)
 801439a:	69b8      	ldr	r0, [r7, #24]
 801439c:	f001 f84a 	bl	8015434 <SCSI_UpdateBotData>
 80143a0:	e03c      	b.n	801441c <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	3302      	adds	r3, #2
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	2b80      	cmp	r3, #128	; 0x80
 80143aa:	d105      	bne.n	80143b8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80143ac:	2208      	movs	r2, #8
 80143ae:	491f      	ldr	r1, [pc, #124]	; (801442c <SCSI_Inquiry+0xf8>)
 80143b0:	69b8      	ldr	r0, [r7, #24]
 80143b2:	f001 f83f 	bl	8015434 <SCSI_UpdateBotData>
 80143b6:	e031      	b.n	801441c <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80143be:	2324      	movs	r3, #36	; 0x24
 80143c0:	2205      	movs	r2, #5
 80143c2:	68f8      	ldr	r0, [r7, #12]
 80143c4:	f000 fac6 	bl	8014954 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80143c8:	f04f 33ff 	mov.w	r3, #4294967295
 80143cc:	e027      	b.n	801441e <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	33b0      	adds	r3, #176	; 0xb0
 80143d8:	009b      	lsls	r3, r3, #2
 80143da:	4413      	add	r3, r2
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	69d9      	ldr	r1, [r3, #28]
 80143e0:	7afa      	ldrb	r2, [r7, #11]
 80143e2:	4613      	mov	r3, r2
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	4413      	add	r3, r2
 80143e8:	009b      	lsls	r3, r3, #2
 80143ea:	440b      	add	r3, r1
 80143ec:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	3304      	adds	r3, #4
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	3305      	adds	r3, #5
 80143f8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	3304      	adds	r3, #4
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	b29b      	uxth	r3, r3
 8014402:	8bfa      	ldrh	r2, [r7, #30]
 8014404:	429a      	cmp	r2, r3
 8014406:	d303      	bcc.n	8014410 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	3304      	adds	r3, #4
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014410:	8bfb      	ldrh	r3, [r7, #30]
 8014412:	461a      	mov	r2, r3
 8014414:	6979      	ldr	r1, [r7, #20]
 8014416:	69b8      	ldr	r0, [r7, #24]
 8014418:	f001 f80c 	bl	8015434 <SCSI_UpdateBotData>
  }

  return 0;
 801441c:	2300      	movs	r3, #0
}
 801441e:	4618      	mov	r0, r3
 8014420:	3720      	adds	r7, #32
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	2000008c 	.word	0x2000008c
 801442c:	20000094 	.word	0x20000094

08014430 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b086      	sub	sp, #24
 8014434:	af00      	add	r7, sp, #0
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	460b      	mov	r3, r1
 801443a:	607a      	str	r2, [r7, #4]
 801443c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	32b0      	adds	r2, #176	; 0xb0
 8014448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801444c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d102      	bne.n	801445a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8014454:	f04f 33ff 	mov.w	r3, #4294967295
 8014458:	e064      	b.n	8014524 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	33b0      	adds	r3, #176	; 0xb0
 8014464:	009b      	lsls	r3, r3, #2
 8014466:	4413      	add	r3, r2
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	697a      	ldr	r2, [r7, #20]
 801446e:	f602 0168 	addw	r1, r2, #2152	; 0x868
 8014472:	697a      	ldr	r2, [r7, #20]
 8014474:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8014478:	7af8      	ldrb	r0, [r7, #11]
 801447a:	4798      	blx	r3
 801447c:	4603      	mov	r3, r0
 801447e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014480:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d104      	bne.n	8014492 <SCSI_ReadCapacity10+0x62>
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 801448e:	2b02      	cmp	r3, #2
 8014490:	d108      	bne.n	80144a4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014492:	7af9      	ldrb	r1, [r7, #11]
 8014494:	233a      	movs	r3, #58	; 0x3a
 8014496:	2202      	movs	r2, #2
 8014498:	68f8      	ldr	r0, [r7, #12]
 801449a:	f000 fa5b 	bl	8014954 <SCSI_SenseCode>
    return -1;
 801449e:	f04f 33ff 	mov.w	r3, #4294967295
 80144a2:	e03f      	b.n	8014524 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80144aa:	3b01      	subs	r3, #1
 80144ac:	0e1b      	lsrs	r3, r3, #24
 80144ae:	b2da      	uxtb	r2, r3
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80144ba:	3b01      	subs	r3, #1
 80144bc:	0c1b      	lsrs	r3, r3, #16
 80144be:	b2da      	uxtb	r2, r3
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80144ca:	3b01      	subs	r3, #1
 80144cc:	0a1b      	lsrs	r3, r3, #8
 80144ce:	b2da      	uxtb	r2, r3
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	3b01      	subs	r3, #1
 80144de:	b2da      	uxtb	r2, r3
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80144ea:	161b      	asrs	r3, r3, #24
 80144ec:	b2da      	uxtb	r2, r3
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80144f8:	141b      	asrs	r3, r3, #16
 80144fa:	b2da      	uxtb	r2, r3
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014506:	0a1b      	lsrs	r3, r3, #8
 8014508:	b29b      	uxth	r3, r3
 801450a:	b2da      	uxtb	r2, r3
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014516:	b2da      	uxtb	r2, r3
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	2208      	movs	r2, #8
 8014520:	60da      	str	r2, [r3, #12]

  return 0;
 8014522:	2300      	movs	r3, #0

}
 8014524:	4618      	mov	r0, r3
 8014526:	3718      	adds	r7, #24
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b088      	sub	sp, #32
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	460b      	mov	r3, r1
 8014536:	607a      	str	r2, [r7, #4]
 8014538:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	32b0      	adds	r2, #176	; 0xb0
 8014544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014548:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d102      	bne.n	8014556 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8014550:	f04f 33ff 	mov.w	r3, #4294967295
 8014554:	e099      	b.n	801468a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801455c:	68fa      	ldr	r2, [r7, #12]
 801455e:	33b0      	adds	r3, #176	; 0xb0
 8014560:	009b      	lsls	r3, r3, #2
 8014562:	4413      	add	r3, r2
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	69ba      	ldr	r2, [r7, #24]
 801456a:	f602 0168 	addw	r1, r2, #2152	; 0x868
 801456e:	69ba      	ldr	r2, [r7, #24]
 8014570:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8014574:	7af8      	ldrb	r0, [r7, #11]
 8014576:	4798      	blx	r3
 8014578:	4603      	mov	r3, r0
 801457a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801457c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d104      	bne.n	801458e <SCSI_ReadCapacity16+0x62>
 8014584:	69bb      	ldr	r3, [r7, #24]
 8014586:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 801458a:	2b02      	cmp	r3, #2
 801458c:	d108      	bne.n	80145a0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801458e:	7af9      	ldrb	r1, [r7, #11]
 8014590:	233a      	movs	r3, #58	; 0x3a
 8014592:	2202      	movs	r2, #2
 8014594:	68f8      	ldr	r0, [r7, #12]
 8014596:	f000 f9dd 	bl	8014954 <SCSI_SenseCode>
    return -1;
 801459a:	f04f 33ff 	mov.w	r3, #4294967295
 801459e:	e074      	b.n	801468a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	330a      	adds	r3, #10
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	330b      	adds	r3, #11
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80145b0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	330c      	adds	r3, #12
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80145ba:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	320d      	adds	r2, #13
 80145c0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80145c2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80145c8:	2300      	movs	r3, #0
 80145ca:	77fb      	strb	r3, [r7, #31]
 80145cc:	e007      	b.n	80145de <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 80145ce:	7ffb      	ldrb	r3, [r7, #31]
 80145d0:	69ba      	ldr	r2, [r7, #24]
 80145d2:	4413      	add	r3, r2
 80145d4:	2200      	movs	r2, #0
 80145d6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80145d8:	7ffb      	ldrb	r3, [r7, #31]
 80145da:	3301      	adds	r3, #1
 80145dc:	77fb      	strb	r3, [r7, #31]
 80145de:	7ffa      	ldrb	r2, [r7, #31]
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d3f2      	bcc.n	80145ce <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80145ee:	3b01      	subs	r3, #1
 80145f0:	0e1b      	lsrs	r3, r3, #24
 80145f2:	b2da      	uxtb	r2, r3
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80145fe:	3b01      	subs	r3, #1
 8014600:	0c1b      	lsrs	r3, r3, #16
 8014602:	b2da      	uxtb	r2, r3
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801460e:	3b01      	subs	r3, #1
 8014610:	0a1b      	lsrs	r3, r3, #8
 8014612:	b2da      	uxtb	r2, r3
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014618:	69bb      	ldr	r3, [r7, #24]
 801461a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801461e:	b2db      	uxtb	r3, r3
 8014620:	3b01      	subs	r3, #1
 8014622:	b2da      	uxtb	r2, r3
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014628:	69bb      	ldr	r3, [r7, #24]
 801462a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801462e:	161b      	asrs	r3, r3, #24
 8014630:	b2da      	uxtb	r2, r3
 8014632:	69bb      	ldr	r3, [r7, #24]
 8014634:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801463c:	141b      	asrs	r3, r3, #16
 801463e:	b2da      	uxtb	r2, r3
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014644:	69bb      	ldr	r3, [r7, #24]
 8014646:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801464a:	0a1b      	lsrs	r3, r3, #8
 801464c:	b29b      	uxth	r3, r3
 801464e:	b2da      	uxtb	r2, r3
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801465a:	b2da      	uxtb	r2, r3
 801465c:	69bb      	ldr	r3, [r7, #24]
 801465e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	330a      	adds	r3, #10
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	330b      	adds	r3, #11
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014670:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	330c      	adds	r3, #12
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801467a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	320d      	adds	r2, #13
 8014680:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014682:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	60da      	str	r2, [r3, #12]

  return 0;
 8014688:	2300      	movs	r3, #0
}
 801468a:	4618      	mov	r0, r3
 801468c:	3720      	adds	r7, #32
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}

08014692 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014692:	b580      	push	{r7, lr}
 8014694:	b088      	sub	sp, #32
 8014696:	af00      	add	r7, sp, #0
 8014698:	60f8      	str	r0, [r7, #12]
 801469a:	460b      	mov	r3, r1
 801469c:	607a      	str	r2, [r7, #4]
 801469e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	32b0      	adds	r2, #176	; 0xb0
 80146aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ae:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d102      	bne.n	80146bc <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 80146b6:	f04f 33ff 	mov.w	r3, #4294967295
 80146ba:	e061      	b.n	8014780 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146c2:	68fa      	ldr	r2, [r7, #12]
 80146c4:	33b0      	adds	r3, #176	; 0xb0
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	4413      	add	r3, r2
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	f107 0214 	add.w	r2, r7, #20
 80146d2:	f107 0110 	add.w	r1, r7, #16
 80146d6:	7af8      	ldrb	r0, [r7, #11]
 80146d8:	4798      	blx	r3
 80146da:	4603      	mov	r3, r0
 80146dc:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80146de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d104      	bne.n	80146f0 <SCSI_ReadFormatCapacity+0x5e>
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d108      	bne.n	8014702 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80146f0:	7af9      	ldrb	r1, [r7, #11]
 80146f2:	233a      	movs	r3, #58	; 0x3a
 80146f4:	2202      	movs	r2, #2
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f000 f92c 	bl	8014954 <SCSI_SenseCode>
    return -1;
 80146fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014700:	e03e      	b.n	8014780 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8014702:	2300      	movs	r3, #0
 8014704:	83fb      	strh	r3, [r7, #30]
 8014706:	e007      	b.n	8014718 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014708:	8bfb      	ldrh	r3, [r7, #30]
 801470a:	69ba      	ldr	r2, [r7, #24]
 801470c:	4413      	add	r3, r2
 801470e:	2200      	movs	r2, #0
 8014710:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014712:	8bfb      	ldrh	r3, [r7, #30]
 8014714:	3301      	adds	r3, #1
 8014716:	83fb      	strh	r3, [r7, #30]
 8014718:	8bfb      	ldrh	r3, [r7, #30]
 801471a:	2b0b      	cmp	r3, #11
 801471c:	d9f4      	bls.n	8014708 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 801471e:	69bb      	ldr	r3, [r7, #24]
 8014720:	2208      	movs	r2, #8
 8014722:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	3b01      	subs	r3, #1
 8014728:	0e1b      	lsrs	r3, r3, #24
 801472a:	b2da      	uxtb	r2, r3
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	3b01      	subs	r3, #1
 8014734:	0c1b      	lsrs	r3, r3, #16
 8014736:	b2da      	uxtb	r2, r3
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	3b01      	subs	r3, #1
 8014740:	0a1b      	lsrs	r3, r3, #8
 8014742:	b2da      	uxtb	r2, r3
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	b2db      	uxtb	r3, r3
 801474c:	3b01      	subs	r3, #1
 801474e:	b2da      	uxtb	r2, r3
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	2202      	movs	r2, #2
 8014758:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801475a:	8abb      	ldrh	r3, [r7, #20]
 801475c:	141b      	asrs	r3, r3, #16
 801475e:	b2da      	uxtb	r2, r3
 8014760:	69bb      	ldr	r3, [r7, #24]
 8014762:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014764:	8abb      	ldrh	r3, [r7, #20]
 8014766:	0a1b      	lsrs	r3, r3, #8
 8014768:	b29b      	uxth	r3, r3
 801476a:	b2da      	uxtb	r2, r3
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8014770:	8abb      	ldrh	r3, [r7, #20]
 8014772:	b2da      	uxtb	r2, r3
 8014774:	69bb      	ldr	r3, [r7, #24]
 8014776:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014778:	69bb      	ldr	r3, [r7, #24]
 801477a:	220c      	movs	r2, #12
 801477c:	60da      	str	r2, [r3, #12]

  return 0;
 801477e:	2300      	movs	r3, #0
}
 8014780:	4618      	mov	r0, r3
 8014782:	3720      	adds	r7, #32
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b086      	sub	sp, #24
 801478c:	af00      	add	r7, sp, #0
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	460b      	mov	r3, r1
 8014792:	607a      	str	r2, [r7, #4]
 8014794:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	32b0      	adds	r2, #176	; 0xb0
 80147a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147a4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80147a6:	2317      	movs	r3, #23
 80147a8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d102      	bne.n	80147b6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 80147b0:	f04f 33ff 	mov.w	r3, #4294967295
 80147b4:	e011      	b.n	80147da <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	3304      	adds	r3, #4
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	b29b      	uxth	r3, r3
 80147be:	8afa      	ldrh	r2, [r7, #22]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d303      	bcc.n	80147cc <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	3304      	adds	r3, #4
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80147cc:	8afb      	ldrh	r3, [r7, #22]
 80147ce:	461a      	mov	r2, r3
 80147d0:	4904      	ldr	r1, [pc, #16]	; (80147e4 <SCSI_ModeSense6+0x5c>)
 80147d2:	6938      	ldr	r0, [r7, #16]
 80147d4:	f000 fe2e 	bl	8015434 <SCSI_UpdateBotData>

  return 0;
 80147d8:	2300      	movs	r3, #0
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3718      	adds	r7, #24
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	2000009c 	.word	0x2000009c

080147e8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	460b      	mov	r3, r1
 80147f2:	607a      	str	r2, [r7, #4]
 80147f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	32b0      	adds	r2, #176	; 0xb0
 8014800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014804:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8014806:	231b      	movs	r3, #27
 8014808:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d102      	bne.n	8014816 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8014810:	f04f 33ff 	mov.w	r3, #4294967295
 8014814:	e011      	b.n	801483a <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	3308      	adds	r3, #8
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	b29b      	uxth	r3, r3
 801481e:	8afa      	ldrh	r2, [r7, #22]
 8014820:	429a      	cmp	r2, r3
 8014822:	d303      	bcc.n	801482c <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	3308      	adds	r3, #8
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801482c:	8afb      	ldrh	r3, [r7, #22]
 801482e:	461a      	mov	r2, r3
 8014830:	4904      	ldr	r1, [pc, #16]	; (8014844 <SCSI_ModeSense10+0x5c>)
 8014832:	6938      	ldr	r0, [r7, #16]
 8014834:	f000 fdfe 	bl	8015434 <SCSI_UpdateBotData>

  return 0;
 8014838:	2300      	movs	r3, #0
}
 801483a:	4618      	mov	r0, r3
 801483c:	3718      	adds	r7, #24
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	200000b4 	.word	0x200000b4

08014848 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b086      	sub	sp, #24
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	460b      	mov	r3, r1
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	32b0      	adds	r2, #176	; 0xb0
 8014860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014864:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d102      	bne.n	8014872 <SCSI_RequestSense+0x2a>
  {
    return -1;
 801486c:	f04f 33ff 	mov.w	r3, #4294967295
 8014870:	e06c      	b.n	801494c <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014878:	2b00      	cmp	r3, #0
 801487a:	d10a      	bne.n	8014892 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014882:	2320      	movs	r3, #32
 8014884:	2205      	movs	r2, #5
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f000 f864 	bl	8014954 <SCSI_SenseCode>
    return -1;
 801488c:	f04f 33ff 	mov.w	r3, #4294967295
 8014890:	e05c      	b.n	801494c <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014892:	2300      	movs	r3, #0
 8014894:	75fb      	strb	r3, [r7, #23]
 8014896:	e007      	b.n	80148a8 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8014898:	7dfb      	ldrb	r3, [r7, #23]
 801489a:	693a      	ldr	r2, [r7, #16]
 801489c:	4413      	add	r3, r2
 801489e:	2200      	movs	r2, #0
 80148a0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80148a2:	7dfb      	ldrb	r3, [r7, #23]
 80148a4:	3301      	adds	r3, #1
 80148a6:	75fb      	strb	r3, [r7, #23]
 80148a8:	7dfb      	ldrb	r3, [r7, #23]
 80148aa:	2b11      	cmp	r3, #17
 80148ac:	d9f4      	bls.n	8014898 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	2270      	movs	r2, #112	; 0x70
 80148b2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	220c      	movs	r2, #12
 80148b8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d031      	beq.n	801492e <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 80148d0:	461a      	mov	r2, r3
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80148d8:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 80148e6:	693a      	ldr	r2, [r7, #16]
 80148e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	4413      	add	r3, r2
 80148f0:	791a      	ldrb	r2, [r3, #4]
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 80148fc:	693a      	ldr	r2, [r7, #16]
 80148fe:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014902:	00db      	lsls	r3, r3, #3
 8014904:	4413      	add	r3, r2
 8014906:	795a      	ldrb	r2, [r3, #5]
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014912:	3301      	adds	r3, #1
 8014914:	b2da      	uxtb	r2, r3
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014922:	2b04      	cmp	r3, #4
 8014924:	d103      	bne.n	801492e <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	2200      	movs	r2, #0
 801492a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	2212      	movs	r2, #18
 8014932:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	3304      	adds	r3, #4
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	2b12      	cmp	r3, #18
 801493c:	d805      	bhi.n	801494a <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	3304      	adds	r3, #4
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	461a      	mov	r2, r3
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801494a:	2300      	movs	r3, #0
}
 801494c:	4618      	mov	r0, r3
 801494e:	3718      	adds	r7, #24
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8014954:	b480      	push	{r7}
 8014956:	b085      	sub	sp, #20
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	4608      	mov	r0, r1
 801495e:	4611      	mov	r1, r2
 8014960:	461a      	mov	r2, r3
 8014962:	4603      	mov	r3, r0
 8014964:	70fb      	strb	r3, [r7, #3]
 8014966:	460b      	mov	r3, r1
 8014968:	70bb      	strb	r3, [r7, #2]
 801496a:	4613      	mov	r3, r2
 801496c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	32b0      	adds	r2, #176	; 0xb0
 8014978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801497c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d02f      	beq.n	80149e4 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801498a:	461a      	mov	r2, r3
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014992:	78b9      	ldrb	r1, [r7, #2]
 8014994:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80149a4:	00db      	lsls	r3, r3, #3
 80149a6:	4413      	add	r3, r2
 80149a8:	787a      	ldrb	r2, [r7, #1]
 80149aa:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80149b2:	68fa      	ldr	r2, [r7, #12]
 80149b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	4413      	add	r3, r2
 80149bc:	2200      	movs	r2, #0
 80149be:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80149c6:	3301      	adds	r3, #1
 80149c8:	b2da      	uxtb	r2, r3
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80149d6:	2b04      	cmp	r3, #4
 80149d8:	d105      	bne.n	80149e6 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2200      	movs	r2, #0
 80149de:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 80149e2:	e000      	b.n	80149e6 <SCSI_SenseCode+0x92>
    return;
 80149e4:	bf00      	nop
  }
}
 80149e6:	3714      	adds	r7, #20
 80149e8:	46bd      	mov	sp, r7
 80149ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ee:	4770      	bx	lr

080149f0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	460b      	mov	r3, r1
 80149fa:	607a      	str	r2, [r7, #4]
 80149fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	32b0      	adds	r2, #176	; 0xb0
 8014a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d102      	bne.n	8014a1a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8014a14:	f04f 33ff 	mov.w	r3, #4294967295
 8014a18:	e03b      	b.n	8014a92 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d10f      	bne.n	8014a44 <SCSI_StartStopUnit+0x54>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	3304      	adds	r3, #4
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	f003 0303 	and.w	r3, r3, #3
 8014a2e:	2b02      	cmp	r3, #2
 8014a30:	d108      	bne.n	8014a44 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014a32:	7af9      	ldrb	r1, [r7, #11]
 8014a34:	2324      	movs	r3, #36	; 0x24
 8014a36:	2205      	movs	r2, #5
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	f7ff ff8b 	bl	8014954 <SCSI_SenseCode>

    return -1;
 8014a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a42:	e026      	b.n	8014a92 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	3304      	adds	r3, #4
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	f003 0303 	and.w	r3, r3, #3
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	d104      	bne.n	8014a5c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	2200      	movs	r2, #0
 8014a56:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014a5a:	e016      	b.n	8014a8a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	3304      	adds	r3, #4
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	f003 0303 	and.w	r3, r3, #3
 8014a66:	2b02      	cmp	r3, #2
 8014a68:	d104      	bne.n	8014a74 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	2202      	movs	r2, #2
 8014a6e:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014a72:	e00a      	b.n	8014a8a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	3304      	adds	r3, #4
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	f003 0303 	and.w	r3, r3, #3
 8014a7e:	2b03      	cmp	r3, #3
 8014a80:	d103      	bne.n	8014a8a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2200      	movs	r2, #0
 8014a86:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	60da      	str	r2, [r3, #12]

  return 0;
 8014a90:	2300      	movs	r3, #0
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}

08014a9a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014a9a:	b480      	push	{r7}
 8014a9c:	b087      	sub	sp, #28
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	60f8      	str	r0, [r7, #12]
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	607a      	str	r2, [r7, #4]
 8014aa6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	32b0      	adds	r2, #176	; 0xb0
 8014ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d102      	bne.n	8014ac4 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8014abe:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac2:	e011      	b.n	8014ae8 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d104      	bne.n	8014ad8 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014ad6:	e003      	b.n	8014ae0 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	2201      	movs	r2, #1
 8014adc:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	60da      	str	r2, [r3, #12]

  return 0;
 8014ae6:	2300      	movs	r3, #0
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	371c      	adds	r7, #28
 8014aec:	46bd      	mov	sp, r7
 8014aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af2:	4770      	bx	lr

08014af4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	460b      	mov	r3, r1
 8014afe:	607a      	str	r2, [r7, #4]
 8014b00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	32b0      	adds	r2, #176	; 0xb0
 8014b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b10:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d102      	bne.n	8014b1e <SCSI_Read10+0x2a>
  {
    return -1;
 8014b18:	f04f 33ff 	mov.w	r3, #4294967295
 8014b1c:	e090      	b.n	8014c40 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	7a1b      	ldrb	r3, [r3, #8]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f040 8082 	bne.w	8014c2c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014b2e:	b25b      	sxtb	r3, r3
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	db0a      	blt.n	8014b4a <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014b3a:	2320      	movs	r3, #32
 8014b3c:	2205      	movs	r2, #5
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f7ff ff08 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014b44:	f04f 33ff 	mov.w	r3, #4294967295
 8014b48:	e07a      	b.n	8014c40 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d108      	bne.n	8014b66 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b54:	7af9      	ldrb	r1, [r7, #11]
 8014b56:	233a      	movs	r3, #58	; 0x3a
 8014b58:	2202      	movs	r2, #2
 8014b5a:	68f8      	ldr	r0, [r7, #12]
 8014b5c:	f7ff fefa 	bl	8014954 <SCSI_SenseCode>

      return -1;
 8014b60:	f04f 33ff 	mov.w	r3, #4294967295
 8014b64:	e06c      	b.n	8014c40 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b6c:	68fa      	ldr	r2, [r7, #12]
 8014b6e:	33b0      	adds	r3, #176	; 0xb0
 8014b70:	009b      	lsls	r3, r3, #2
 8014b72:	4413      	add	r3, r2
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	689b      	ldr	r3, [r3, #8]
 8014b78:	7afa      	ldrb	r2, [r7, #11]
 8014b7a:	4610      	mov	r0, r2
 8014b7c:	4798      	blx	r3
 8014b7e:	4603      	mov	r3, r0
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d008      	beq.n	8014b96 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b84:	7af9      	ldrb	r1, [r7, #11]
 8014b86:	233a      	movs	r3, #58	; 0x3a
 8014b88:	2202      	movs	r2, #2
 8014b8a:	68f8      	ldr	r0, [r7, #12]
 8014b8c:	f7ff fee2 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014b90:	f04f 33ff 	mov.w	r3, #4294967295
 8014b94:	e054      	b.n	8014c40 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	3302      	adds	r3, #2
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	3303      	adds	r3, #3
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ba6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	3304      	adds	r3, #4
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014bb0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	3205      	adds	r2, #5
 8014bb6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014bb8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	3307      	adds	r3, #7
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	021b      	lsls	r3, r3, #8
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	3208      	adds	r2, #8
 8014bcc:	7812      	ldrb	r2, [r2, #0]
 8014bce:	431a      	orrs	r2, r3
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014be2:	7af9      	ldrb	r1, [r7, #11]
 8014be4:	68f8      	ldr	r0, [r7, #12]
 8014be6:	f000 fadc 	bl	80151a2 <SCSI_CheckAddressRange>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	da02      	bge.n	8014bf6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf4:	e024      	b.n	8014c40 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014c02:	6979      	ldr	r1, [r7, #20]
 8014c04:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014c08:	fb01 f303 	mul.w	r3, r1, r3
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d00a      	beq.n	8014c26 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c16:	2320      	movs	r3, #32
 8014c18:	2205      	movs	r2, #5
 8014c1a:	68f8      	ldr	r0, [r7, #12]
 8014c1c:	f7ff fe9a 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014c20:	f04f 33ff 	mov.w	r3, #4294967295
 8014c24:	e00c      	b.n	8014c40 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	2202      	movs	r2, #2
 8014c2a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c32:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014c34:	7afb      	ldrb	r3, [r7, #11]
 8014c36:	4619      	mov	r1, r3
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f000 fadf 	bl	80151fc <SCSI_ProcessRead>
 8014c3e:	4603      	mov	r3, r0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3718      	adds	r7, #24
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	460b      	mov	r3, r1
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	32b0      	adds	r2, #176	; 0xb0
 8014c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c64:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d102      	bne.n	8014c72 <SCSI_Read12+0x2a>
  {
    return -1;
 8014c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c70:	e09a      	b.n	8014da8 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	7a1b      	ldrb	r3, [r3, #8]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f040 808c 	bne.w	8014d94 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014c82:	b25b      	sxtb	r3, r3
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	db0a      	blt.n	8014c9e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c8e:	2320      	movs	r3, #32
 8014c90:	2205      	movs	r2, #5
 8014c92:	68f8      	ldr	r0, [r7, #12]
 8014c94:	f7ff fe5e 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014c98:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9c:	e084      	b.n	8014da8 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014ca4:	2b02      	cmp	r3, #2
 8014ca6:	d108      	bne.n	8014cba <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014ca8:	7af9      	ldrb	r1, [r7, #11]
 8014caa:	233a      	movs	r3, #58	; 0x3a
 8014cac:	2202      	movs	r2, #2
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f7ff fe50 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb8:	e076      	b.n	8014da8 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cc0:	68fa      	ldr	r2, [r7, #12]
 8014cc2:	33b0      	adds	r3, #176	; 0xb0
 8014cc4:	009b      	lsls	r3, r3, #2
 8014cc6:	4413      	add	r3, r2
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	689b      	ldr	r3, [r3, #8]
 8014ccc:	7afa      	ldrb	r2, [r7, #11]
 8014cce:	4610      	mov	r0, r2
 8014cd0:	4798      	blx	r3
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d008      	beq.n	8014cea <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014cd8:	7af9      	ldrb	r1, [r7, #11]
 8014cda:	233a      	movs	r3, #58	; 0x3a
 8014cdc:	2202      	movs	r2, #2
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	f7ff fe38 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ce8:	e05e      	b.n	8014da8 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	3302      	adds	r3, #2
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	3303      	adds	r3, #3
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014cfa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	3304      	adds	r3, #4
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014d04:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	3205      	adds	r2, #5
 8014d0a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014d0c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	3306      	adds	r3, #6
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	3307      	adds	r3, #7
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014d24:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	3308      	adds	r3, #8
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014d2e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	3209      	adds	r2, #9
 8014d34:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014d36:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014d4a:	7af9      	ldrb	r1, [r7, #11]
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f000 fa28 	bl	80151a2 <SCSI_CheckAddressRange>
 8014d52:	4603      	mov	r3, r0
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	da02      	bge.n	8014d5e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014d58:	f04f 33ff 	mov.w	r3, #4294967295
 8014d5c:	e024      	b.n	8014da8 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014d6a:	6979      	ldr	r1, [r7, #20]
 8014d6c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014d70:	fb01 f303 	mul.w	r3, r1, r3
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d00a      	beq.n	8014d8e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014d7e:	2320      	movs	r3, #32
 8014d80:	2205      	movs	r2, #5
 8014d82:	68f8      	ldr	r0, [r7, #12]
 8014d84:	f7ff fde6 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014d88:	f04f 33ff 	mov.w	r3, #4294967295
 8014d8c:	e00c      	b.n	8014da8 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	2202      	movs	r2, #2
 8014d92:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014d9a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014d9c:	7afb      	ldrb	r3, [r7, #11]
 8014d9e:	4619      	mov	r1, r3
 8014da0:	68f8      	ldr	r0, [r7, #12]
 8014da2:	f000 fa2b 	bl	80151fc <SCSI_ProcessRead>
 8014da6:	4603      	mov	r3, r0
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3718      	adds	r7, #24
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b086      	sub	sp, #24
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	460b      	mov	r3, r1
 8014dba:	607a      	str	r2, [r7, #4]
 8014dbc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	32b0      	adds	r2, #176	; 0xb0
 8014dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dcc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d102      	bne.n	8014dda <SCSI_Write10+0x2a>
  {
    return -1;
 8014dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd8:	e0ba      	b.n	8014f50 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	7a1b      	ldrb	r3, [r3, #8]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f040 80b0 	bne.w	8014f44 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d10a      	bne.n	8014e04 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014df4:	2320      	movs	r3, #32
 8014df6:	2205      	movs	r2, #5
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f7ff fdab 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014e02:	e0a5      	b.n	8014f50 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014e0a:	b25b      	sxtb	r3, r3
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	da0a      	bge.n	8014e26 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014e16:	2320      	movs	r3, #32
 8014e18:	2205      	movs	r2, #5
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f7ff fd9a 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014e20:	f04f 33ff 	mov.w	r3, #4294967295
 8014e24:	e094      	b.n	8014f50 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e2c:	68fa      	ldr	r2, [r7, #12]
 8014e2e:	33b0      	adds	r3, #176	; 0xb0
 8014e30:	009b      	lsls	r3, r3, #2
 8014e32:	4413      	add	r3, r2
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	689b      	ldr	r3, [r3, #8]
 8014e38:	7afa      	ldrb	r2, [r7, #11]
 8014e3a:	4610      	mov	r0, r2
 8014e3c:	4798      	blx	r3
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d008      	beq.n	8014e56 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014e44:	7af9      	ldrb	r1, [r7, #11]
 8014e46:	233a      	movs	r3, #58	; 0x3a
 8014e48:	2202      	movs	r2, #2
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	f7ff fd82 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295
 8014e54:	e07c      	b.n	8014f50 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e5c:	68fa      	ldr	r2, [r7, #12]
 8014e5e:	33b0      	adds	r3, #176	; 0xb0
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	4413      	add	r3, r2
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	68db      	ldr	r3, [r3, #12]
 8014e68:	7afa      	ldrb	r2, [r7, #11]
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	4798      	blx	r3
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d008      	beq.n	8014e86 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014e74:	7af9      	ldrb	r1, [r7, #11]
 8014e76:	2327      	movs	r3, #39	; 0x27
 8014e78:	2202      	movs	r2, #2
 8014e7a:	68f8      	ldr	r0, [r7, #12]
 8014e7c:	f7ff fd6a 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014e80:	f04f 33ff 	mov.w	r3, #4294967295
 8014e84:	e064      	b.n	8014f50 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	3302      	adds	r3, #2
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	3303      	adds	r3, #3
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e96:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3304      	adds	r3, #4
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ea0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	3205      	adds	r2, #5
 8014ea6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014ea8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	3307      	adds	r3, #7
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	3208      	adds	r2, #8
 8014ebc:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014ebe:	431a      	orrs	r2, r3
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014ed2:	7af9      	ldrb	r1, [r7, #11]
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f000 f964 	bl	80151a2 <SCSI_CheckAddressRange>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	da02      	bge.n	8014ee6 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee4:	e034      	b.n	8014f50 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014eec:	697a      	ldr	r2, [r7, #20]
 8014eee:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8014ef2:	fb02 f303 	mul.w	r3, r2, r3
 8014ef6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014efe:	693a      	ldr	r2, [r7, #16]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d00a      	beq.n	8014f1a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014f0a:	2320      	movs	r3, #32
 8014f0c:	2205      	movs	r2, #5
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f7ff fd20 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014f14:	f04f 33ff 	mov.w	r3, #4294967295
 8014f18:	e01a      	b.n	8014f50 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f20:	bf28      	it	cs
 8014f22:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8014f26:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014f2e:	4b0a      	ldr	r3, [pc, #40]	; (8014f58 <SCSI_Write10+0x1a8>)
 8014f30:	7819      	ldrb	r1, [r3, #0]
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	f103 0210 	add.w	r2, r3, #16
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f005 ffd1 	bl	801aee2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014f40:	2300      	movs	r3, #0
 8014f42:	e005      	b.n	8014f50 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8014f44:	7afb      	ldrb	r3, [r7, #11]
 8014f46:	4619      	mov	r1, r3
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f000 f9dd 	bl	8015308 <SCSI_ProcessWrite>
 8014f4e:	4603      	mov	r3, r0
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3718      	adds	r7, #24
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	2000008b 	.word	0x2000008b

08014f5c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	460b      	mov	r3, r1
 8014f66:	607a      	str	r2, [r7, #4]
 8014f68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	32b0      	adds	r2, #176	; 0xb0
 8014f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f78:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d102      	bne.n	8014f86 <SCSI_Write12+0x2a>
  {
    return -1;
 8014f80:	f04f 33ff 	mov.w	r3, #4294967295
 8014f84:	e0ca      	b.n	801511c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	7a1b      	ldrb	r3, [r3, #8]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f040 80c0 	bne.w	8015110 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d10a      	bne.n	8014fb0 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014fa0:	2320      	movs	r3, #32
 8014fa2:	2205      	movs	r2, #5
 8014fa4:	68f8      	ldr	r0, [r7, #12]
 8014fa6:	f7ff fcd5 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014faa:	f04f 33ff 	mov.w	r3, #4294967295
 8014fae:	e0b5      	b.n	801511c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014fb6:	b25b      	sxtb	r3, r3
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	da0a      	bge.n	8014fd2 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014fc2:	2320      	movs	r3, #32
 8014fc4:	2205      	movs	r2, #5
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f7ff fcc4 	bl	8014954 <SCSI_SenseCode>
      return -1;
 8014fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd0:	e0a4      	b.n	801511c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fd8:	68fa      	ldr	r2, [r7, #12]
 8014fda:	33b0      	adds	r3, #176	; 0xb0
 8014fdc:	009b      	lsls	r3, r3, #2
 8014fde:	4413      	add	r3, r2
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	689b      	ldr	r3, [r3, #8]
 8014fe4:	7afa      	ldrb	r2, [r7, #11]
 8014fe6:	4610      	mov	r0, r2
 8014fe8:	4798      	blx	r3
 8014fea:	4603      	mov	r3, r0
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00b      	beq.n	8015008 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014ff0:	7af9      	ldrb	r1, [r7, #11]
 8014ff2:	233a      	movs	r3, #58	; 0x3a
 8014ff4:	2202      	movs	r2, #2
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f7ff fcac 	bl	8014954 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	2205      	movs	r2, #5
 8015000:	721a      	strb	r2, [r3, #8]
      return -1;
 8015002:	f04f 33ff 	mov.w	r3, #4294967295
 8015006:	e089      	b.n	801511c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801500e:	68fa      	ldr	r2, [r7, #12]
 8015010:	33b0      	adds	r3, #176	; 0xb0
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	4413      	add	r3, r2
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	7afa      	ldrb	r2, [r7, #11]
 801501c:	4610      	mov	r0, r2
 801501e:	4798      	blx	r3
 8015020:	4603      	mov	r3, r0
 8015022:	2b00      	cmp	r3, #0
 8015024:	d00b      	beq.n	801503e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015026:	7af9      	ldrb	r1, [r7, #11]
 8015028:	2327      	movs	r3, #39	; 0x27
 801502a:	2202      	movs	r2, #2
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f7ff fc91 	bl	8014954 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	2205      	movs	r2, #5
 8015036:	721a      	strb	r2, [r3, #8]
      return -1;
 8015038:	f04f 33ff 	mov.w	r3, #4294967295
 801503c:	e06e      	b.n	801511c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	3302      	adds	r3, #2
 8015042:	781b      	ldrb	r3, [r3, #0]
 8015044:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	3303      	adds	r3, #3
 801504a:	781b      	ldrb	r3, [r3, #0]
 801504c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801504e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	3304      	adds	r3, #4
 8015054:	781b      	ldrb	r3, [r3, #0]
 8015056:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015058:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801505a:	687a      	ldr	r2, [r7, #4]
 801505c:	3205      	adds	r2, #5
 801505e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015060:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	3306      	adds	r3, #6
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	3307      	adds	r3, #7
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015078:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	3308      	adds	r3, #8
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015082:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	3209      	adds	r2, #9
 8015088:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801508a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801508c:	697b      	ldr	r3, [r7, #20]
 801508e:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801509e:	7af9      	ldrb	r1, [r7, #11]
 80150a0:	68f8      	ldr	r0, [r7, #12]
 80150a2:	f000 f87e 	bl	80151a2 <SCSI_CheckAddressRange>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	da02      	bge.n	80150b2 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80150ac:	f04f 33ff 	mov.w	r3, #4294967295
 80150b0:	e034      	b.n	801511c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80150b2:	697b      	ldr	r3, [r7, #20]
 80150b4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80150b8:	697a      	ldr	r2, [r7, #20]
 80150ba:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80150be:	fb02 f303 	mul.w	r3, r2, r3
 80150c2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80150ca:	693a      	ldr	r2, [r7, #16]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d00a      	beq.n	80150e6 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80150d6:	2320      	movs	r3, #32
 80150d8:	2205      	movs	r2, #5
 80150da:	68f8      	ldr	r0, [r7, #12]
 80150dc:	f7ff fc3a 	bl	8014954 <SCSI_SenseCode>
      return -1;
 80150e0:	f04f 33ff 	mov.w	r3, #4294967295
 80150e4:	e01a      	b.n	801511c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80150ec:	bf28      	it	cs
 80150ee:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80150f2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	2201      	movs	r2, #1
 80150f8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80150fa:	4b0a      	ldr	r3, [pc, #40]	; (8015124 <SCSI_Write12+0x1c8>)
 80150fc:	7819      	ldrb	r1, [r3, #0]
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	f103 0210 	add.w	r2, r3, #16
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	68f8      	ldr	r0, [r7, #12]
 8015108:	f005 feeb 	bl	801aee2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801510c:	2300      	movs	r3, #0
 801510e:	e005      	b.n	801511c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8015110:	7afb      	ldrb	r3, [r7, #11]
 8015112:	4619      	mov	r1, r3
 8015114:	68f8      	ldr	r0, [r7, #12]
 8015116:	f000 f8f7 	bl	8015308 <SCSI_ProcessWrite>
 801511a:	4603      	mov	r3, r0
}
 801511c:	4618      	mov	r0, r3
 801511e:	3718      	adds	r7, #24
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	2000008b 	.word	0x2000008b

08015128 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b086      	sub	sp, #24
 801512c:	af00      	add	r7, sp, #0
 801512e:	60f8      	str	r0, [r7, #12]
 8015130:	460b      	mov	r3, r1
 8015132:	607a      	str	r2, [r7, #4]
 8015134:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	32b0      	adds	r2, #176	; 0xb0
 8015140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015144:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d102      	bne.n	8015152 <SCSI_Verify10+0x2a>
  {
    return -1;
 801514c:	f04f 33ff 	mov.w	r3, #4294967295
 8015150:	e023      	b.n	801519a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	3301      	adds	r3, #1
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	f003 0302 	and.w	r3, r3, #2
 801515c:	2b00      	cmp	r3, #0
 801515e:	d008      	beq.n	8015172 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015160:	7af9      	ldrb	r1, [r7, #11]
 8015162:	2324      	movs	r3, #36	; 0x24
 8015164:	2205      	movs	r2, #5
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f7ff fbf4 	bl	8014954 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801516c:	f04f 33ff 	mov.w	r3, #4294967295
 8015170:	e013      	b.n	801519a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801517e:	7af9      	ldrb	r1, [r7, #11]
 8015180:	68f8      	ldr	r0, [r7, #12]
 8015182:	f000 f80e 	bl	80151a2 <SCSI_CheckAddressRange>
 8015186:	4603      	mov	r3, r0
 8015188:	2b00      	cmp	r3, #0
 801518a:	da02      	bge.n	8015192 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 801518c:	f04f 33ff 	mov.w	r3, #4294967295
 8015190:	e003      	b.n	801519a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	2200      	movs	r2, #0
 8015196:	60da      	str	r2, [r3, #12]

  return 0;
 8015198:	2300      	movs	r3, #0
}
 801519a:	4618      	mov	r0, r3
 801519c:	3718      	adds	r7, #24
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b086      	sub	sp, #24
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	60f8      	str	r0, [r7, #12]
 80151aa:	607a      	str	r2, [r7, #4]
 80151ac:	603b      	str	r3, [r7, #0]
 80151ae:	460b      	mov	r3, r1
 80151b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	32b0      	adds	r2, #176	; 0xb0
 80151bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d102      	bne.n	80151ce <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80151c8:	f04f 33ff 	mov.w	r3, #4294967295
 80151cc:	e011      	b.n	80151f2 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80151ce:	687a      	ldr	r2, [r7, #4]
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	441a      	add	r2, r3
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80151da:	429a      	cmp	r2, r3
 80151dc:	d908      	bls.n	80151f0 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80151de:	7af9      	ldrb	r1, [r7, #11]
 80151e0:	2321      	movs	r3, #33	; 0x21
 80151e2:	2205      	movs	r2, #5
 80151e4:	68f8      	ldr	r0, [r7, #12]
 80151e6:	f7ff fbb5 	bl	8014954 <SCSI_SenseCode>
    return -1;
 80151ea:	f04f 33ff 	mov.w	r3, #4294967295
 80151ee:	e000      	b.n	80151f2 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80151f0:	2300      	movs	r3, #0
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3718      	adds	r7, #24
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
	...

080151fc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80151fc:	b590      	push	{r4, r7, lr}
 80151fe:	b085      	sub	sp, #20
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	460b      	mov	r3, r1
 8015206:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	32b0      	adds	r2, #176	; 0xb0
 8015212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015216:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d102      	bne.n	8015224 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801521e:	f04f 33ff 	mov.w	r3, #4294967295
 8015222:	e06a      	b.n	80152fa <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015230:	fb02 f303 	mul.w	r3, r2, r3
 8015234:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801523c:	bf28      	it	cs
 801523e:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015242:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	33b0      	adds	r3, #176	; 0xb0
 801524e:	009b      	lsls	r3, r3, #2
 8015250:	4413      	add	r3, r2
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	691c      	ldr	r4, [r3, #16]
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	f103 0110 	add.w	r1, r3, #16
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015268:	4618      	mov	r0, r3
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015270:	b29b      	uxth	r3, r3
 8015272:	78f8      	ldrb	r0, [r7, #3]
 8015274:	47a0      	blx	r4
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	da08      	bge.n	801528e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801527c:	78f9      	ldrb	r1, [r7, #3]
 801527e:	2311      	movs	r3, #17
 8015280:	2204      	movs	r2, #4
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f7ff fb66 	bl	8014954 <SCSI_SenseCode>
    return -1;
 8015288:	f04f 33ff 	mov.w	r3, #4294967295
 801528c:	e035      	b.n	80152fa <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801528e:	4b1d      	ldr	r3, [pc, #116]	; (8015304 <SCSI_ProcessRead+0x108>)
 8015290:	7819      	ldrb	r1, [r3, #0]
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	f103 0210 	add.w	r2, r3, #16
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f005 fe00 	bl	801aea0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80152ac:	4619      	mov	r1, r3
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80152b4:	441a      	add	r2, r3
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80152c8:	4619      	mov	r1, r3
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80152d0:	1ad2      	subs	r2, r2, r3
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	1ad2      	subs	r2, r2, r3
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d102      	bne.n	80152f8 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2203      	movs	r2, #3
 80152f6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80152f8:	2300      	movs	r3, #0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3714      	adds	r7, #20
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd90      	pop	{r4, r7, pc}
 8015302:	bf00      	nop
 8015304:	2000008a 	.word	0x2000008a

08015308 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015308:	b590      	push	{r4, r7, lr}
 801530a:	b085      	sub	sp, #20
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	460b      	mov	r3, r1
 8015312:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	32b0      	adds	r2, #176	; 0xb0
 801531e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015322:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d102      	bne.n	8015330 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 801532a:	f04f 33ff 	mov.w	r3, #4294967295
 801532e:	e07a      	b.n	8015426 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015336:	68fa      	ldr	r2, [r7, #12]
 8015338:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801533c:	fb02 f303 	mul.w	r3, r2, r3
 8015340:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015348:	bf28      	it	cs
 801534a:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 801534e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015356:	687a      	ldr	r2, [r7, #4]
 8015358:	33b0      	adds	r3, #176	; 0xb0
 801535a:	009b      	lsls	r3, r3, #2
 801535c:	4413      	add	r3, r2
 801535e:	685b      	ldr	r3, [r3, #4]
 8015360:	695c      	ldr	r4, [r3, #20]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f103 0110 	add.w	r1, r3, #16
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015374:	4618      	mov	r0, r3
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801537c:	b29b      	uxth	r3, r3
 801537e:	78f8      	ldrb	r0, [r7, #3]
 8015380:	47a0      	blx	r4
 8015382:	4603      	mov	r3, r0
 8015384:	2b00      	cmp	r3, #0
 8015386:	da08      	bge.n	801539a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015388:	78f9      	ldrb	r1, [r7, #3]
 801538a:	2303      	movs	r3, #3
 801538c:	2204      	movs	r2, #4
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f7ff fae0 	bl	8014954 <SCSI_SenseCode>
    return -1;
 8015394:	f04f 33ff 	mov.w	r3, #4294967295
 8015398:	e045      	b.n	8015426 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80153a6:	4619      	mov	r1, r3
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80153ae:	441a      	add	r2, r3
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80153c2:	4619      	mov	r1, r3
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80153ca:	1ad2      	subs	r2, r2, r3
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	1ad2      	subs	r2, r2, r3
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d104      	bne.n	80153f6 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80153ec:	2100      	movs	r1, #0
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f7fe fd0e 	bl	8013e10 <MSC_BOT_SendCSW>
 80153f4:	e016      	b.n	8015424 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80153fc:	68fa      	ldr	r2, [r7, #12]
 80153fe:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015402:	fb02 f303 	mul.w	r3, r2, r3
 8015406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801540a:	bf28      	it	cs
 801540c:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015410:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015412:	4b07      	ldr	r3, [pc, #28]	; (8015430 <SCSI_ProcessWrite+0x128>)
 8015414:	7819      	ldrb	r1, [r3, #0]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f103 0210 	add.w	r2, r3, #16
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f005 fd5f 	bl	801aee2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8015424:	2300      	movs	r3, #0
}
 8015426:	4618      	mov	r0, r3
 8015428:	3714      	adds	r7, #20
 801542a:	46bd      	mov	sp, r7
 801542c:	bd90      	pop	{r4, r7, pc}
 801542e:	bf00      	nop
 8015430:	2000008b 	.word	0x2000008b

08015434 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015434:	b480      	push	{r7}
 8015436:	b087      	sub	sp, #28
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	4613      	mov	r3, r2
 8015440:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8015442:	88fb      	ldrh	r3, [r7, #6]
 8015444:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d102      	bne.n	8015452 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801544c:	f04f 33ff 	mov.w	r3, #4294967295
 8015450:	e013      	b.n	801547a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8015452:	8afa      	ldrh	r2, [r7, #22]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015458:	e00b      	b.n	8015472 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801545a:	8afb      	ldrh	r3, [r7, #22]
 801545c:	3b01      	subs	r3, #1
 801545e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015460:	8afb      	ldrh	r3, [r7, #22]
 8015462:	68ba      	ldr	r2, [r7, #8]
 8015464:	441a      	add	r2, r3
 8015466:	8afb      	ldrh	r3, [r7, #22]
 8015468:	7811      	ldrb	r1, [r2, #0]
 801546a:	68fa      	ldr	r2, [r7, #12]
 801546c:	4413      	add	r3, r2
 801546e:	460a      	mov	r2, r1
 8015470:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015472:	8afb      	ldrh	r3, [r7, #22]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d1f0      	bne.n	801545a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8015478:	2300      	movs	r3, #0
}
 801547a:	4618      	mov	r0, r3
 801547c:	371c      	adds	r7, #28
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr

08015486 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015486:	b580      	push	{r7, lr}
 8015488:	b086      	sub	sp, #24
 801548a:	af00      	add	r7, sp, #0
 801548c:	60f8      	str	r0, [r7, #12]
 801548e:	60b9      	str	r1, [r7, #8]
 8015490:	4613      	mov	r3, r2
 8015492:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d101      	bne.n	801549e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801549a:	2303      	movs	r3, #3
 801549c:	e01f      	b.n	80154de <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2200      	movs	r2, #0
 80154a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	2200      	movs	r2, #0
 80154aa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2200      	movs	r2, #0
 80154b2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d003      	beq.n	80154c4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	68ba      	ldr	r2, [r7, #8]
 80154c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2201      	movs	r2, #1
 80154c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	79fa      	ldrb	r2, [r7, #7]
 80154d0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80154d2:	68f8      	ldr	r0, [r7, #12]
 80154d4:	f005 fb5a 	bl	801ab8c <USBD_LL_Init>
 80154d8:	4603      	mov	r3, r0
 80154da:	75fb      	strb	r3, [r7, #23]

  return ret;
 80154dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3718      	adds	r7, #24
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}

080154e6 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 80154e6:	b580      	push	{r7, lr}
 80154e8:	b084      	sub	sp, #16
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f005 fbce 	bl	801ac90 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2201      	movs	r2, #1
 80154f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015502:	2b00      	cmp	r3, #0
 8015504:	d009      	beq.n	801551a <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	687a      	ldr	r2, [r7, #4]
 8015510:	6852      	ldr	r2, [r2, #4]
 8015512:	b2d2      	uxtb	r2, r2
 8015514:	4611      	mov	r1, r2
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2200      	movs	r2, #0
 801551e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2200      	movs	r2, #0
 8015526:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2200      	movs	r2, #0
 801552e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f005 fb76 	bl	801ac24 <USBD_LL_DeInit>
 8015538:	4603      	mov	r3, r0
 801553a:	73fb      	strb	r3, [r7, #15]

  return ret;
 801553c:	7bfb      	ldrb	r3, [r7, #15]
}
 801553e:	4618      	mov	r0, r3
 8015540:	3710      	adds	r7, #16
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b084      	sub	sp, #16
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015550:	2300      	movs	r3, #0
 8015552:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d101      	bne.n	801555e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801555a:	2303      	movs	r3, #3
 801555c:	e025      	b.n	80155aa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	683a      	ldr	r2, [r7, #0]
 8015562:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	32ae      	adds	r2, #174	; 0xae
 8015570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00f      	beq.n	801559a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	32ae      	adds	r2, #174	; 0xae
 8015584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801558a:	f107 020e 	add.w	r2, r7, #14
 801558e:	4610      	mov	r0, r2
 8015590:	4798      	blx	r3
 8015592:	4602      	mov	r2, r0
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80155a0:	1c5a      	adds	r2, r3, #1
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80155a8:	2300      	movs	r3, #0
}
 80155aa:	4618      	mov	r0, r3
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}

080155b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80155b2:	b580      	push	{r7, lr}
 80155b4:	b082      	sub	sp, #8
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f005 fb4d 	bl	801ac5a <USBD_LL_Start>
 80155c0:	4603      	mov	r3, r0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b082      	sub	sp, #8
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f005 fb5c 	bl	801ac90 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d009      	beq.n	80155f6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	6852      	ldr	r2, [r2, #4]
 80155ee:	b2d2      	uxtb	r2, r2
 80155f0:	4611      	mov	r1, r2
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 80155f6:	2300      	movs	r3, #0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015600:	b480      	push	{r7}
 8015602:	b083      	sub	sp, #12
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015608:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801560a:	4618      	mov	r0, r3
 801560c:	370c      	adds	r7, #12
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b084      	sub	sp, #16
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015622:	2300      	movs	r3, #0
 8015624:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801562c:	2b00      	cmp	r3, #0
 801562e:	d009      	beq.n	8015644 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	78fa      	ldrb	r2, [r7, #3]
 801563a:	4611      	mov	r1, r2
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	4798      	blx	r3
 8015640:	4603      	mov	r3, r0
 8015642:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015644:	7bfb      	ldrb	r3, [r7, #15]
}
 8015646:	4618      	mov	r0, r3
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b084      	sub	sp, #16
 8015652:	af00      	add	r7, sp, #0
 8015654:	6078      	str	r0, [r7, #4]
 8015656:	460b      	mov	r3, r1
 8015658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801565a:	2300      	movs	r3, #0
 801565c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	78fa      	ldrb	r2, [r7, #3]
 8015668:	4611      	mov	r1, r2
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	4798      	blx	r3
 801566e:	4603      	mov	r3, r0
 8015670:	2b00      	cmp	r3, #0
 8015672:	d001      	beq.n	8015678 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015674:	2303      	movs	r3, #3
 8015676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015678:	7bfb      	ldrb	r3, [r7, #15]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}

08015682 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015682:	b580      	push	{r7, lr}
 8015684:	b084      	sub	sp, #16
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
 801568a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015692:	6839      	ldr	r1, [r7, #0]
 8015694:	4618      	mov	r0, r3
 8015696:	f001 f908 	bl	80168aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80156a8:	461a      	mov	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80156b6:	f003 031f 	and.w	r3, r3, #31
 80156ba:	2b02      	cmp	r3, #2
 80156bc:	d01a      	beq.n	80156f4 <USBD_LL_SetupStage+0x72>
 80156be:	2b02      	cmp	r3, #2
 80156c0:	d822      	bhi.n	8015708 <USBD_LL_SetupStage+0x86>
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d002      	beq.n	80156cc <USBD_LL_SetupStage+0x4a>
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	d00a      	beq.n	80156e0 <USBD_LL_SetupStage+0x5e>
 80156ca:	e01d      	b.n	8015708 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80156d2:	4619      	mov	r1, r3
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 fb5f 	bl	8015d98 <USBD_StdDevReq>
 80156da:	4603      	mov	r3, r0
 80156dc:	73fb      	strb	r3, [r7, #15]
      break;
 80156de:	e020      	b.n	8015722 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80156e6:	4619      	mov	r1, r3
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f000 fbc7 	bl	8015e7c <USBD_StdItfReq>
 80156ee:	4603      	mov	r3, r0
 80156f0:	73fb      	strb	r3, [r7, #15]
      break;
 80156f2:	e016      	b.n	8015722 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80156fa:	4619      	mov	r1, r3
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f000 fc29 	bl	8015f54 <USBD_StdEPReq>
 8015702:	4603      	mov	r3, r0
 8015704:	73fb      	strb	r3, [r7, #15]
      break;
 8015706:	e00c      	b.n	8015722 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801570e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015712:	b2db      	uxtb	r3, r3
 8015714:	4619      	mov	r1, r3
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f005 fb39 	bl	801ad8e <USBD_LL_StallEP>
 801571c:	4603      	mov	r3, r0
 801571e:	73fb      	strb	r3, [r7, #15]
      break;
 8015720:	bf00      	nop
  }

  return ret;
 8015722:	7bfb      	ldrb	r3, [r7, #15]
}
 8015724:	4618      	mov	r0, r3
 8015726:	3710      	adds	r7, #16
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b086      	sub	sp, #24
 8015730:	af00      	add	r7, sp, #0
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	460b      	mov	r3, r1
 8015736:	607a      	str	r2, [r7, #4]
 8015738:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801573a:	2300      	movs	r3, #0
 801573c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801573e:	7afb      	ldrb	r3, [r7, #11]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d16e      	bne.n	8015822 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801574a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015752:	2b03      	cmp	r3, #3
 8015754:	f040 8098 	bne.w	8015888 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	689a      	ldr	r2, [r3, #8]
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	429a      	cmp	r2, r3
 8015762:	d913      	bls.n	801578c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	689a      	ldr	r2, [r3, #8]
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	68db      	ldr	r3, [r3, #12]
 801576c:	1ad2      	subs	r2, r2, r3
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	68da      	ldr	r2, [r3, #12]
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	4293      	cmp	r3, r2
 801577c:	bf28      	it	cs
 801577e:	4613      	movcs	r3, r2
 8015780:	461a      	mov	r2, r3
 8015782:	6879      	ldr	r1, [r7, #4]
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f001 f967 	bl	8016a58 <USBD_CtlContinueRx>
 801578a:	e07d      	b.n	8015888 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015792:	f003 031f 	and.w	r3, r3, #31
 8015796:	2b02      	cmp	r3, #2
 8015798:	d014      	beq.n	80157c4 <USBD_LL_DataOutStage+0x98>
 801579a:	2b02      	cmp	r3, #2
 801579c:	d81d      	bhi.n	80157da <USBD_LL_DataOutStage+0xae>
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d002      	beq.n	80157a8 <USBD_LL_DataOutStage+0x7c>
 80157a2:	2b01      	cmp	r3, #1
 80157a4:	d003      	beq.n	80157ae <USBD_LL_DataOutStage+0x82>
 80157a6:	e018      	b.n	80157da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80157a8:	2300      	movs	r3, #0
 80157aa:	75bb      	strb	r3, [r7, #22]
            break;
 80157ac:	e018      	b.n	80157e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	4619      	mov	r1, r3
 80157b8:	68f8      	ldr	r0, [r7, #12]
 80157ba:	f000 fa5e 	bl	8015c7a <USBD_CoreFindIF>
 80157be:	4603      	mov	r3, r0
 80157c0:	75bb      	strb	r3, [r7, #22]
            break;
 80157c2:	e00d      	b.n	80157e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	4619      	mov	r1, r3
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f000 fa60 	bl	8015c94 <USBD_CoreFindEP>
 80157d4:	4603      	mov	r3, r0
 80157d6:	75bb      	strb	r3, [r7, #22]
            break;
 80157d8:	e002      	b.n	80157e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80157da:	2300      	movs	r3, #0
 80157dc:	75bb      	strb	r3, [r7, #22]
            break;
 80157de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80157e0:	7dbb      	ldrb	r3, [r7, #22]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d119      	bne.n	801581a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	2b03      	cmp	r3, #3
 80157f0:	d113      	bne.n	801581a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80157f2:	7dba      	ldrb	r2, [r7, #22]
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	32ae      	adds	r2, #174	; 0xae
 80157f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157fc:	691b      	ldr	r3, [r3, #16]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d00b      	beq.n	801581a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015802:	7dba      	ldrb	r2, [r7, #22]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801580a:	7dba      	ldrb	r2, [r7, #22]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	32ae      	adds	r2, #174	; 0xae
 8015810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015814:	691b      	ldr	r3, [r3, #16]
 8015816:	68f8      	ldr	r0, [r7, #12]
 8015818:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801581a:	68f8      	ldr	r0, [r7, #12]
 801581c:	f001 f92d 	bl	8016a7a <USBD_CtlSendStatus>
 8015820:	e032      	b.n	8015888 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015822:	7afb      	ldrb	r3, [r7, #11]
 8015824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015828:	b2db      	uxtb	r3, r3
 801582a:	4619      	mov	r1, r3
 801582c:	68f8      	ldr	r0, [r7, #12]
 801582e:	f000 fa31 	bl	8015c94 <USBD_CoreFindEP>
 8015832:	4603      	mov	r3, r0
 8015834:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015836:	7dbb      	ldrb	r3, [r7, #22]
 8015838:	2bff      	cmp	r3, #255	; 0xff
 801583a:	d025      	beq.n	8015888 <USBD_LL_DataOutStage+0x15c>
 801583c:	7dbb      	ldrb	r3, [r7, #22]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d122      	bne.n	8015888 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015848:	b2db      	uxtb	r3, r3
 801584a:	2b03      	cmp	r3, #3
 801584c:	d117      	bne.n	801587e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801584e:	7dba      	ldrb	r2, [r7, #22]
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	32ae      	adds	r2, #174	; 0xae
 8015854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015858:	699b      	ldr	r3, [r3, #24]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d00f      	beq.n	801587e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801585e:	7dba      	ldrb	r2, [r7, #22]
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015866:	7dba      	ldrb	r2, [r7, #22]
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	32ae      	adds	r2, #174	; 0xae
 801586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015870:	699b      	ldr	r3, [r3, #24]
 8015872:	7afa      	ldrb	r2, [r7, #11]
 8015874:	4611      	mov	r1, r2
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	4798      	blx	r3
 801587a:	4603      	mov	r3, r0
 801587c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801587e:	7dfb      	ldrb	r3, [r7, #23]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d001      	beq.n	8015888 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015884:	7dfb      	ldrb	r3, [r7, #23]
 8015886:	e000      	b.n	801588a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015888:	2300      	movs	r3, #0
}
 801588a:	4618      	mov	r0, r3
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015892:	b580      	push	{r7, lr}
 8015894:	b086      	sub	sp, #24
 8015896:	af00      	add	r7, sp, #0
 8015898:	60f8      	str	r0, [r7, #12]
 801589a:	460b      	mov	r3, r1
 801589c:	607a      	str	r2, [r7, #4]
 801589e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80158a0:	7afb      	ldrb	r3, [r7, #11]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d16f      	bne.n	8015986 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	3314      	adds	r3, #20
 80158aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80158b2:	2b02      	cmp	r3, #2
 80158b4:	d15a      	bne.n	801596c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	689a      	ldr	r2, [r3, #8]
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d914      	bls.n	80158ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	689a      	ldr	r2, [r3, #8]
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	1ad2      	subs	r2, r2, r3
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	689b      	ldr	r3, [r3, #8]
 80158d4:	461a      	mov	r2, r3
 80158d6:	6879      	ldr	r1, [r7, #4]
 80158d8:	68f8      	ldr	r0, [r7, #12]
 80158da:	f001 f8ac 	bl	8016a36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80158de:	2300      	movs	r3, #0
 80158e0:	2200      	movs	r2, #0
 80158e2:	2100      	movs	r1, #0
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f005 fafc 	bl	801aee2 <USBD_LL_PrepareReceive>
 80158ea:	e03f      	b.n	801596c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	68da      	ldr	r2, [r3, #12]
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d11c      	bne.n	8015932 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	685a      	ldr	r2, [r3, #4]
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015900:	429a      	cmp	r2, r3
 8015902:	d316      	bcc.n	8015932 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801590e:	429a      	cmp	r2, r3
 8015910:	d20f      	bcs.n	8015932 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015912:	2200      	movs	r2, #0
 8015914:	2100      	movs	r1, #0
 8015916:	68f8      	ldr	r0, [r7, #12]
 8015918:	f001 f88d 	bl	8016a36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	2200      	movs	r2, #0
 8015920:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015924:	2300      	movs	r3, #0
 8015926:	2200      	movs	r2, #0
 8015928:	2100      	movs	r1, #0
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	f005 fad9 	bl	801aee2 <USBD_LL_PrepareReceive>
 8015930:	e01c      	b.n	801596c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015938:	b2db      	uxtb	r3, r3
 801593a:	2b03      	cmp	r3, #3
 801593c:	d10f      	bne.n	801595e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d009      	beq.n	801595e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	2200      	movs	r2, #0
 801594e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	68f8      	ldr	r0, [r7, #12]
 801595c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801595e:	2180      	movs	r1, #128	; 0x80
 8015960:	68f8      	ldr	r0, [r7, #12]
 8015962:	f005 fa14 	bl	801ad8e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015966:	68f8      	ldr	r0, [r7, #12]
 8015968:	f001 f89a 	bl	8016aa0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015972:	2b00      	cmp	r3, #0
 8015974:	d03a      	beq.n	80159ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015976:	68f8      	ldr	r0, [r7, #12]
 8015978:	f7ff fe42 	bl	8015600 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2200      	movs	r2, #0
 8015980:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015984:	e032      	b.n	80159ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015986:	7afb      	ldrb	r3, [r7, #11]
 8015988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801598c:	b2db      	uxtb	r3, r3
 801598e:	4619      	mov	r1, r3
 8015990:	68f8      	ldr	r0, [r7, #12]
 8015992:	f000 f97f 	bl	8015c94 <USBD_CoreFindEP>
 8015996:	4603      	mov	r3, r0
 8015998:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801599a:	7dfb      	ldrb	r3, [r7, #23]
 801599c:	2bff      	cmp	r3, #255	; 0xff
 801599e:	d025      	beq.n	80159ec <USBD_LL_DataInStage+0x15a>
 80159a0:	7dfb      	ldrb	r3, [r7, #23]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d122      	bne.n	80159ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	2b03      	cmp	r3, #3
 80159b0:	d11c      	bne.n	80159ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80159b2:	7dfa      	ldrb	r2, [r7, #23]
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	32ae      	adds	r2, #174	; 0xae
 80159b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159bc:	695b      	ldr	r3, [r3, #20]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d014      	beq.n	80159ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80159c2:	7dfa      	ldrb	r2, [r7, #23]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80159ca:	7dfa      	ldrb	r2, [r7, #23]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	32ae      	adds	r2, #174	; 0xae
 80159d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159d4:	695b      	ldr	r3, [r3, #20]
 80159d6:	7afa      	ldrb	r2, [r7, #11]
 80159d8:	4611      	mov	r1, r2
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	4798      	blx	r3
 80159de:	4603      	mov	r3, r0
 80159e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80159e2:	7dbb      	ldrb	r3, [r7, #22]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d001      	beq.n	80159ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80159e8:	7dbb      	ldrb	r3, [r7, #22]
 80159ea:	e000      	b.n	80159ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80159ec:	2300      	movs	r3, #0
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3718      	adds	r7, #24
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b084      	sub	sp, #16
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80159fe:	2300      	movs	r3, #0
 8015a00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2201      	movs	r2, #1
 8015a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2200      	movs	r2, #0
 8015a16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2200      	movs	r2, #0
 8015a24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d014      	beq.n	8015a5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00e      	beq.n	8015a5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	6852      	ldr	r2, [r2, #4]
 8015a4a:	b2d2      	uxtb	r2, r2
 8015a4c:	4611      	mov	r1, r2
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	4798      	blx	r3
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015a58:	2303      	movs	r3, #3
 8015a5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015a5c:	2340      	movs	r3, #64	; 0x40
 8015a5e:	2200      	movs	r2, #0
 8015a60:	2100      	movs	r1, #0
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f005 f92f 	bl	801acc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2240      	movs	r2, #64	; 0x40
 8015a74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015a78:	2340      	movs	r3, #64	; 0x40
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	2180      	movs	r1, #128	; 0x80
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f005 f921 	bl	801acc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2201      	movs	r2, #1
 8015a88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2240      	movs	r2, #64	; 0x40
 8015a8e:	621a      	str	r2, [r3, #32]

  return ret;
 8015a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3710      	adds	r7, #16
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015a9a:	b480      	push	{r7}
 8015a9c:	b083      	sub	sp, #12
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	78fa      	ldrb	r2, [r7, #3]
 8015aaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015aac:	2300      	movs	r3, #0
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	370c      	adds	r7, #12
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab8:	4770      	bx	lr

08015aba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015aba:	b480      	push	{r7}
 8015abc:	b083      	sub	sp, #12
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ac8:	b2da      	uxtb	r2, r3
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2204      	movs	r2, #4
 8015ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015ad8:	2300      	movs	r3, #0
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	370c      	adds	r7, #12
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr

08015ae6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015ae6:	b480      	push	{r7}
 8015ae8:	b083      	sub	sp, #12
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	2b04      	cmp	r3, #4
 8015af8:	d106      	bne.n	8015b08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015b00:	b2da      	uxtb	r2, r3
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015b08:	2300      	movs	r3, #0
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	370c      	adds	r7, #12
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr

08015b16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b082      	sub	sp, #8
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b24:	b2db      	uxtb	r3, r3
 8015b26:	2b03      	cmp	r3, #3
 8015b28:	d110      	bne.n	8015b4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d00b      	beq.n	8015b4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b3a:	69db      	ldr	r3, [r3, #28]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d005      	beq.n	8015b4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b46:	69db      	ldr	r3, [r3, #28]
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015b4c:	2300      	movs	r3, #0
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3708      	adds	r7, #8
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b082      	sub	sp, #8
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	460b      	mov	r3, r1
 8015b60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	32ae      	adds	r2, #174	; 0xae
 8015b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d101      	bne.n	8015b78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015b74:	2303      	movs	r3, #3
 8015b76:	e01c      	b.n	8015bb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	2b03      	cmp	r3, #3
 8015b82:	d115      	bne.n	8015bb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	32ae      	adds	r2, #174	; 0xae
 8015b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b92:	6a1b      	ldr	r3, [r3, #32]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d00b      	beq.n	8015bb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	32ae      	adds	r2, #174	; 0xae
 8015ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba6:	6a1b      	ldr	r3, [r3, #32]
 8015ba8:	78fa      	ldrb	r2, [r7, #3]
 8015baa:	4611      	mov	r1, r2
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015bb0:	2300      	movs	r3, #0
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3708      	adds	r7, #8
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}

08015bba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b082      	sub	sp, #8
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	32ae      	adds	r2, #174	; 0xae
 8015bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d101      	bne.n	8015bdc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015bd8:	2303      	movs	r3, #3
 8015bda:	e01c      	b.n	8015c16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015be2:	b2db      	uxtb	r3, r3
 8015be4:	2b03      	cmp	r3, #3
 8015be6:	d115      	bne.n	8015c14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	32ae      	adds	r2, #174	; 0xae
 8015bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d00b      	beq.n	8015c14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	32ae      	adds	r2, #174	; 0xae
 8015c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c0c:	78fa      	ldrb	r2, [r7, #3]
 8015c0e:	4611      	mov	r1, r2
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c14:	2300      	movs	r3, #0
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3708      	adds	r7, #8
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015c1e:	b480      	push	{r7}
 8015c20:	b083      	sub	sp, #12
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015c26:	2300      	movs	r3, #0
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	370c      	adds	r7, #12
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c32:	4770      	bx	lr

08015c34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2201      	movs	r2, #1
 8015c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d00e      	beq.n	8015c70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	687a      	ldr	r2, [r7, #4]
 8015c5c:	6852      	ldr	r2, [r2, #4]
 8015c5e:	b2d2      	uxtb	r2, r2
 8015c60:	4611      	mov	r1, r2
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	4798      	blx	r3
 8015c66:	4603      	mov	r3, r0
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d001      	beq.n	8015c70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015c6c:	2303      	movs	r3, #3
 8015c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015c7a:	b480      	push	{r7}
 8015c7c:	b083      	sub	sp, #12
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	6078      	str	r0, [r7, #4]
 8015c82:	460b      	mov	r3, r1
 8015c84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015c86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	370c      	adds	r7, #12
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr

08015c94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015c94:	b480      	push	{r7}
 8015c96:	b083      	sub	sp, #12
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015ca0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	370c      	adds	r7, #12
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cac:	4770      	bx	lr

08015cae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015cae:	b580      	push	{r7, lr}
 8015cb0:	b086      	sub	sp, #24
 8015cb2:	af00      	add	r7, sp, #0
 8015cb4:	6078      	str	r0, [r7, #4]
 8015cb6:	460b      	mov	r3, r1
 8015cb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	885b      	ldrh	r3, [r3, #2]
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d920      	bls.n	8015d18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015cde:	e013      	b.n	8015d08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015ce0:	f107 030a 	add.w	r3, r7, #10
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	6978      	ldr	r0, [r7, #20]
 8015ce8:	f000 f81b 	bl	8015d22 <USBD_GetNextDesc>
 8015cec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	785b      	ldrb	r3, [r3, #1]
 8015cf2:	2b05      	cmp	r3, #5
 8015cf4:	d108      	bne.n	8015d08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015cf6:	697b      	ldr	r3, [r7, #20]
 8015cf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	789b      	ldrb	r3, [r3, #2]
 8015cfe:	78fa      	ldrb	r2, [r7, #3]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d008      	beq.n	8015d16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015d04:	2300      	movs	r3, #0
 8015d06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	885b      	ldrh	r3, [r3, #2]
 8015d0c:	b29a      	uxth	r2, r3
 8015d0e:	897b      	ldrh	r3, [r7, #10]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d8e5      	bhi.n	8015ce0 <USBD_GetEpDesc+0x32>
 8015d14:	e000      	b.n	8015d18 <USBD_GetEpDesc+0x6a>
          break;
 8015d16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015d18:	693b      	ldr	r3, [r7, #16]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3718      	adds	r7, #24
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015d22:	b480      	push	{r7}
 8015d24:	b085      	sub	sp, #20
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
 8015d2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	881a      	ldrh	r2, [r3, #0]
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	4413      	add	r3, r2
 8015d3c:	b29a      	uxth	r2, r3
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	461a      	mov	r2, r3
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	4413      	add	r3, r2
 8015d4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015d4e:	68fb      	ldr	r3, [r7, #12]
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3714      	adds	r7, #20
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr

08015d5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	b087      	sub	sp, #28
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	3301      	adds	r3, #1
 8015d72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015d7a:	8a3b      	ldrh	r3, [r7, #16]
 8015d7c:	021b      	lsls	r3, r3, #8
 8015d7e:	b21a      	sxth	r2, r3
 8015d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d84:	4313      	orrs	r3, r2
 8015d86:	b21b      	sxth	r3, r3
 8015d88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	371c      	adds	r7, #28
 8015d90:	46bd      	mov	sp, r7
 8015d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d96:	4770      	bx	lr

08015d98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015da2:	2300      	movs	r3, #0
 8015da4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015dae:	2b40      	cmp	r3, #64	; 0x40
 8015db0:	d005      	beq.n	8015dbe <USBD_StdDevReq+0x26>
 8015db2:	2b40      	cmp	r3, #64	; 0x40
 8015db4:	d857      	bhi.n	8015e66 <USBD_StdDevReq+0xce>
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00f      	beq.n	8015dda <USBD_StdDevReq+0x42>
 8015dba:	2b20      	cmp	r3, #32
 8015dbc:	d153      	bne.n	8015e66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	32ae      	adds	r2, #174	; 0xae
 8015dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dcc:	689b      	ldr	r3, [r3, #8]
 8015dce:	6839      	ldr	r1, [r7, #0]
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	4798      	blx	r3
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8015dd8:	e04a      	b.n	8015e70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	785b      	ldrb	r3, [r3, #1]
 8015dde:	2b09      	cmp	r3, #9
 8015de0:	d83b      	bhi.n	8015e5a <USBD_StdDevReq+0xc2>
 8015de2:	a201      	add	r2, pc, #4	; (adr r2, 8015de8 <USBD_StdDevReq+0x50>)
 8015de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015de8:	08015e3d 	.word	0x08015e3d
 8015dec:	08015e51 	.word	0x08015e51
 8015df0:	08015e5b 	.word	0x08015e5b
 8015df4:	08015e47 	.word	0x08015e47
 8015df8:	08015e5b 	.word	0x08015e5b
 8015dfc:	08015e1b 	.word	0x08015e1b
 8015e00:	08015e11 	.word	0x08015e11
 8015e04:	08015e5b 	.word	0x08015e5b
 8015e08:	08015e33 	.word	0x08015e33
 8015e0c:	08015e25 	.word	0x08015e25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fa3c 	bl	8016290 <USBD_GetDescriptor>
          break;
 8015e18:	e024      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015e1a:	6839      	ldr	r1, [r7, #0]
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f000 fba1 	bl	8016564 <USBD_SetAddress>
          break;
 8015e22:	e01f      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015e24:	6839      	ldr	r1, [r7, #0]
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 fbe0 	bl	80165ec <USBD_SetConfig>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	73fb      	strb	r3, [r7, #15]
          break;
 8015e30:	e018      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015e32:	6839      	ldr	r1, [r7, #0]
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f000 fc83 	bl	8016740 <USBD_GetConfig>
          break;
 8015e3a:	e013      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 fcb4 	bl	80167ac <USBD_GetStatus>
          break;
 8015e44:	e00e      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015e46:	6839      	ldr	r1, [r7, #0]
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f000 fce3 	bl	8016814 <USBD_SetFeature>
          break;
 8015e4e:	e009      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015e50:	6839      	ldr	r1, [r7, #0]
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f000 fd07 	bl	8016866 <USBD_ClrFeature>
          break;
 8015e58:	e004      	b.n	8015e64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015e5a:	6839      	ldr	r1, [r7, #0]
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f000 fd5e 	bl	801691e <USBD_CtlError>
          break;
 8015e62:	bf00      	nop
      }
      break;
 8015e64:	e004      	b.n	8015e70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015e66:	6839      	ldr	r1, [r7, #0]
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f000 fd58 	bl	801691e <USBD_CtlError>
      break;
 8015e6e:	bf00      	nop
  }

  return ret;
 8015e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop

08015e7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e86:	2300      	movs	r3, #0
 8015e88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	781b      	ldrb	r3, [r3, #0]
 8015e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e92:	2b40      	cmp	r3, #64	; 0x40
 8015e94:	d005      	beq.n	8015ea2 <USBD_StdItfReq+0x26>
 8015e96:	2b40      	cmp	r3, #64	; 0x40
 8015e98:	d852      	bhi.n	8015f40 <USBD_StdItfReq+0xc4>
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d001      	beq.n	8015ea2 <USBD_StdItfReq+0x26>
 8015e9e:	2b20      	cmp	r3, #32
 8015ea0:	d14e      	bne.n	8015f40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	3b01      	subs	r3, #1
 8015eac:	2b02      	cmp	r3, #2
 8015eae:	d840      	bhi.n	8015f32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	889b      	ldrh	r3, [r3, #4]
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	2b01      	cmp	r3, #1
 8015eb8:	d836      	bhi.n	8015f28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	889b      	ldrh	r3, [r3, #4]
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f7ff fed9 	bl	8015c7a <USBD_CoreFindIF>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ecc:	7bbb      	ldrb	r3, [r7, #14]
 8015ece:	2bff      	cmp	r3, #255	; 0xff
 8015ed0:	d01d      	beq.n	8015f0e <USBD_StdItfReq+0x92>
 8015ed2:	7bbb      	ldrb	r3, [r7, #14]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d11a      	bne.n	8015f0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015ed8:	7bba      	ldrb	r2, [r7, #14]
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	32ae      	adds	r2, #174	; 0xae
 8015ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ee2:	689b      	ldr	r3, [r3, #8]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00f      	beq.n	8015f08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015ee8:	7bba      	ldrb	r2, [r7, #14]
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ef0:	7bba      	ldrb	r2, [r7, #14]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	32ae      	adds	r2, #174	; 0xae
 8015ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015efa:	689b      	ldr	r3, [r3, #8]
 8015efc:	6839      	ldr	r1, [r7, #0]
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	4798      	blx	r3
 8015f02:	4603      	mov	r3, r0
 8015f04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015f06:	e004      	b.n	8015f12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015f08:	2303      	movs	r3, #3
 8015f0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015f0c:	e001      	b.n	8015f12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015f0e:	2303      	movs	r3, #3
 8015f10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	88db      	ldrh	r3, [r3, #6]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d110      	bne.n	8015f3c <USBD_StdItfReq+0xc0>
 8015f1a:	7bfb      	ldrb	r3, [r7, #15]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10d      	bne.n	8015f3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 fdaa 	bl	8016a7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015f26:	e009      	b.n	8015f3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 fcf7 	bl	801691e <USBD_CtlError>
          break;
 8015f30:	e004      	b.n	8015f3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fcf2 	bl	801691e <USBD_CtlError>
          break;
 8015f3a:	e000      	b.n	8015f3e <USBD_StdItfReq+0xc2>
          break;
 8015f3c:	bf00      	nop
      }
      break;
 8015f3e:	e004      	b.n	8015f4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015f40:	6839      	ldr	r1, [r7, #0]
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 fceb 	bl	801691e <USBD_CtlError>
      break;
 8015f48:	bf00      	nop
  }

  return ret;
 8015f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3710      	adds	r7, #16
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	889b      	ldrh	r3, [r3, #4]
 8015f66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f70:	2b40      	cmp	r3, #64	; 0x40
 8015f72:	d007      	beq.n	8015f84 <USBD_StdEPReq+0x30>
 8015f74:	2b40      	cmp	r3, #64	; 0x40
 8015f76:	f200 817f 	bhi.w	8016278 <USBD_StdEPReq+0x324>
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d02a      	beq.n	8015fd4 <USBD_StdEPReq+0x80>
 8015f7e:	2b20      	cmp	r3, #32
 8015f80:	f040 817a 	bne.w	8016278 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015f84:	7bbb      	ldrb	r3, [r7, #14]
 8015f86:	4619      	mov	r1, r3
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f7ff fe83 	bl	8015c94 <USBD_CoreFindEP>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f92:	7b7b      	ldrb	r3, [r7, #13]
 8015f94:	2bff      	cmp	r3, #255	; 0xff
 8015f96:	f000 8174 	beq.w	8016282 <USBD_StdEPReq+0x32e>
 8015f9a:	7b7b      	ldrb	r3, [r7, #13]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	f040 8170 	bne.w	8016282 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015fa2:	7b7a      	ldrb	r2, [r7, #13]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015faa:	7b7a      	ldrb	r2, [r7, #13]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	32ae      	adds	r2, #174	; 0xae
 8015fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fb4:	689b      	ldr	r3, [r3, #8]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	f000 8163 	beq.w	8016282 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015fbc:	7b7a      	ldrb	r2, [r7, #13]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	32ae      	adds	r2, #174	; 0xae
 8015fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fc6:	689b      	ldr	r3, [r3, #8]
 8015fc8:	6839      	ldr	r1, [r7, #0]
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	4798      	blx	r3
 8015fce:	4603      	mov	r3, r0
 8015fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015fd2:	e156      	b.n	8016282 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	785b      	ldrb	r3, [r3, #1]
 8015fd8:	2b03      	cmp	r3, #3
 8015fda:	d008      	beq.n	8015fee <USBD_StdEPReq+0x9a>
 8015fdc:	2b03      	cmp	r3, #3
 8015fde:	f300 8145 	bgt.w	801626c <USBD_StdEPReq+0x318>
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f000 809b 	beq.w	801611e <USBD_StdEPReq+0x1ca>
 8015fe8:	2b01      	cmp	r3, #1
 8015fea:	d03c      	beq.n	8016066 <USBD_StdEPReq+0x112>
 8015fec:	e13e      	b.n	801626c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	2b02      	cmp	r3, #2
 8015ff8:	d002      	beq.n	8016000 <USBD_StdEPReq+0xac>
 8015ffa:	2b03      	cmp	r3, #3
 8015ffc:	d016      	beq.n	801602c <USBD_StdEPReq+0xd8>
 8015ffe:	e02c      	b.n	801605a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016000:	7bbb      	ldrb	r3, [r7, #14]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d00d      	beq.n	8016022 <USBD_StdEPReq+0xce>
 8016006:	7bbb      	ldrb	r3, [r7, #14]
 8016008:	2b80      	cmp	r3, #128	; 0x80
 801600a:	d00a      	beq.n	8016022 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801600c:	7bbb      	ldrb	r3, [r7, #14]
 801600e:	4619      	mov	r1, r3
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f004 febc 	bl	801ad8e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016016:	2180      	movs	r1, #128	; 0x80
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f004 feb8 	bl	801ad8e <USBD_LL_StallEP>
 801601e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016020:	e020      	b.n	8016064 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016022:	6839      	ldr	r1, [r7, #0]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 fc7a 	bl	801691e <USBD_CtlError>
              break;
 801602a:	e01b      	b.n	8016064 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	885b      	ldrh	r3, [r3, #2]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d10e      	bne.n	8016052 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016034:	7bbb      	ldrb	r3, [r7, #14]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d00b      	beq.n	8016052 <USBD_StdEPReq+0xfe>
 801603a:	7bbb      	ldrb	r3, [r7, #14]
 801603c:	2b80      	cmp	r3, #128	; 0x80
 801603e:	d008      	beq.n	8016052 <USBD_StdEPReq+0xfe>
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	88db      	ldrh	r3, [r3, #6]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d104      	bne.n	8016052 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016048:	7bbb      	ldrb	r3, [r7, #14]
 801604a:	4619      	mov	r1, r3
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f004 fe9e 	bl	801ad8e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f000 fd11 	bl	8016a7a <USBD_CtlSendStatus>

              break;
 8016058:	e004      	b.n	8016064 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801605a:	6839      	ldr	r1, [r7, #0]
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f000 fc5e 	bl	801691e <USBD_CtlError>
              break;
 8016062:	bf00      	nop
          }
          break;
 8016064:	e107      	b.n	8016276 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801606c:	b2db      	uxtb	r3, r3
 801606e:	2b02      	cmp	r3, #2
 8016070:	d002      	beq.n	8016078 <USBD_StdEPReq+0x124>
 8016072:	2b03      	cmp	r3, #3
 8016074:	d016      	beq.n	80160a4 <USBD_StdEPReq+0x150>
 8016076:	e04b      	b.n	8016110 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016078:	7bbb      	ldrb	r3, [r7, #14]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d00d      	beq.n	801609a <USBD_StdEPReq+0x146>
 801607e:	7bbb      	ldrb	r3, [r7, #14]
 8016080:	2b80      	cmp	r3, #128	; 0x80
 8016082:	d00a      	beq.n	801609a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016084:	7bbb      	ldrb	r3, [r7, #14]
 8016086:	4619      	mov	r1, r3
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f004 fe80 	bl	801ad8e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801608e:	2180      	movs	r1, #128	; 0x80
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f004 fe7c 	bl	801ad8e <USBD_LL_StallEP>
 8016096:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016098:	e040      	b.n	801611c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801609a:	6839      	ldr	r1, [r7, #0]
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 fc3e 	bl	801691e <USBD_CtlError>
              break;
 80160a2:	e03b      	b.n	801611c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	885b      	ldrh	r3, [r3, #2]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d136      	bne.n	801611a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80160ac:	7bbb      	ldrb	r3, [r7, #14]
 80160ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d004      	beq.n	80160c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80160b6:	7bbb      	ldrb	r3, [r7, #14]
 80160b8:	4619      	mov	r1, r3
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f004 fe86 	bl	801adcc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f000 fcda 	bl	8016a7a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80160c6:	7bbb      	ldrb	r3, [r7, #14]
 80160c8:	4619      	mov	r1, r3
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ff fde2 	bl	8015c94 <USBD_CoreFindEP>
 80160d0:	4603      	mov	r3, r0
 80160d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160d4:	7b7b      	ldrb	r3, [r7, #13]
 80160d6:	2bff      	cmp	r3, #255	; 0xff
 80160d8:	d01f      	beq.n	801611a <USBD_StdEPReq+0x1c6>
 80160da:	7b7b      	ldrb	r3, [r7, #13]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d11c      	bne.n	801611a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80160e0:	7b7a      	ldrb	r2, [r7, #13]
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80160e8:	7b7a      	ldrb	r2, [r7, #13]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	32ae      	adds	r2, #174	; 0xae
 80160ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160f2:	689b      	ldr	r3, [r3, #8]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d010      	beq.n	801611a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80160f8:	7b7a      	ldrb	r2, [r7, #13]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	32ae      	adds	r2, #174	; 0xae
 80160fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016102:	689b      	ldr	r3, [r3, #8]
 8016104:	6839      	ldr	r1, [r7, #0]
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	4798      	blx	r3
 801610a:	4603      	mov	r3, r0
 801610c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801610e:	e004      	b.n	801611a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016110:	6839      	ldr	r1, [r7, #0]
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 fc03 	bl	801691e <USBD_CtlError>
              break;
 8016118:	e000      	b.n	801611c <USBD_StdEPReq+0x1c8>
              break;
 801611a:	bf00      	nop
          }
          break;
 801611c:	e0ab      	b.n	8016276 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016124:	b2db      	uxtb	r3, r3
 8016126:	2b02      	cmp	r3, #2
 8016128:	d002      	beq.n	8016130 <USBD_StdEPReq+0x1dc>
 801612a:	2b03      	cmp	r3, #3
 801612c:	d032      	beq.n	8016194 <USBD_StdEPReq+0x240>
 801612e:	e097      	b.n	8016260 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016130:	7bbb      	ldrb	r3, [r7, #14]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d007      	beq.n	8016146 <USBD_StdEPReq+0x1f2>
 8016136:	7bbb      	ldrb	r3, [r7, #14]
 8016138:	2b80      	cmp	r3, #128	; 0x80
 801613a:	d004      	beq.n	8016146 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801613c:	6839      	ldr	r1, [r7, #0]
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f000 fbed 	bl	801691e <USBD_CtlError>
                break;
 8016144:	e091      	b.n	801626a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801614a:	2b00      	cmp	r3, #0
 801614c:	da0b      	bge.n	8016166 <USBD_StdEPReq+0x212>
 801614e:	7bbb      	ldrb	r3, [r7, #14]
 8016150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016154:	4613      	mov	r3, r2
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	4413      	add	r3, r2
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	3310      	adds	r3, #16
 801615e:	687a      	ldr	r2, [r7, #4]
 8016160:	4413      	add	r3, r2
 8016162:	3304      	adds	r3, #4
 8016164:	e00b      	b.n	801617e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016166:	7bbb      	ldrb	r3, [r7, #14]
 8016168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801616c:	4613      	mov	r3, r2
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	4413      	add	r3, r2
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016178:	687a      	ldr	r2, [r7, #4]
 801617a:	4413      	add	r3, r2
 801617c:	3304      	adds	r3, #4
 801617e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	2200      	movs	r2, #0
 8016184:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	2202      	movs	r2, #2
 801618a:	4619      	mov	r1, r3
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 fc37 	bl	8016a00 <USBD_CtlSendData>
              break;
 8016192:	e06a      	b.n	801626a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016198:	2b00      	cmp	r3, #0
 801619a:	da11      	bge.n	80161c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801619c:	7bbb      	ldrb	r3, [r7, #14]
 801619e:	f003 020f 	and.w	r2, r3, #15
 80161a2:	6879      	ldr	r1, [r7, #4]
 80161a4:	4613      	mov	r3, r2
 80161a6:	009b      	lsls	r3, r3, #2
 80161a8:	4413      	add	r3, r2
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	440b      	add	r3, r1
 80161ae:	3324      	adds	r3, #36	; 0x24
 80161b0:	881b      	ldrh	r3, [r3, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d117      	bne.n	80161e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80161b6:	6839      	ldr	r1, [r7, #0]
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	f000 fbb0 	bl	801691e <USBD_CtlError>
                  break;
 80161be:	e054      	b.n	801626a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80161c0:	7bbb      	ldrb	r3, [r7, #14]
 80161c2:	f003 020f 	and.w	r2, r3, #15
 80161c6:	6879      	ldr	r1, [r7, #4]
 80161c8:	4613      	mov	r3, r2
 80161ca:	009b      	lsls	r3, r3, #2
 80161cc:	4413      	add	r3, r2
 80161ce:	009b      	lsls	r3, r3, #2
 80161d0:	440b      	add	r3, r1
 80161d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80161d6:	881b      	ldrh	r3, [r3, #0]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d104      	bne.n	80161e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80161dc:	6839      	ldr	r1, [r7, #0]
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 fb9d 	bl	801691e <USBD_CtlError>
                  break;
 80161e4:	e041      	b.n	801626a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	da0b      	bge.n	8016206 <USBD_StdEPReq+0x2b2>
 80161ee:	7bbb      	ldrb	r3, [r7, #14]
 80161f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161f4:	4613      	mov	r3, r2
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	4413      	add	r3, r2
 80161fa:	009b      	lsls	r3, r3, #2
 80161fc:	3310      	adds	r3, #16
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	4413      	add	r3, r2
 8016202:	3304      	adds	r3, #4
 8016204:	e00b      	b.n	801621e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016206:	7bbb      	ldrb	r3, [r7, #14]
 8016208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801620c:	4613      	mov	r3, r2
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	4413      	add	r3, r2
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	4413      	add	r3, r2
 801621c:	3304      	adds	r3, #4
 801621e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016220:	7bbb      	ldrb	r3, [r7, #14]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <USBD_StdEPReq+0x2d8>
 8016226:	7bbb      	ldrb	r3, [r7, #14]
 8016228:	2b80      	cmp	r3, #128	; 0x80
 801622a:	d103      	bne.n	8016234 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	2200      	movs	r2, #0
 8016230:	601a      	str	r2, [r3, #0]
 8016232:	e00e      	b.n	8016252 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016234:	7bbb      	ldrb	r3, [r7, #14]
 8016236:	4619      	mov	r1, r3
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f004 fde6 	bl	801ae0a <USBD_LL_IsStallEP>
 801623e:	4603      	mov	r3, r0
 8016240:	2b00      	cmp	r3, #0
 8016242:	d003      	beq.n	801624c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	2201      	movs	r2, #1
 8016248:	601a      	str	r2, [r3, #0]
 801624a:	e002      	b.n	8016252 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	2200      	movs	r2, #0
 8016250:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	2202      	movs	r2, #2
 8016256:	4619      	mov	r1, r3
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f000 fbd1 	bl	8016a00 <USBD_CtlSendData>
              break;
 801625e:	e004      	b.n	801626a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016260:	6839      	ldr	r1, [r7, #0]
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f000 fb5b 	bl	801691e <USBD_CtlError>
              break;
 8016268:	bf00      	nop
          }
          break;
 801626a:	e004      	b.n	8016276 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801626c:	6839      	ldr	r1, [r7, #0]
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 fb55 	bl	801691e <USBD_CtlError>
          break;
 8016274:	bf00      	nop
      }
      break;
 8016276:	e005      	b.n	8016284 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016278:	6839      	ldr	r1, [r7, #0]
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 fb4f 	bl	801691e <USBD_CtlError>
      break;
 8016280:	e000      	b.n	8016284 <USBD_StdEPReq+0x330>
      break;
 8016282:	bf00      	nop
  }

  return ret;
 8016284:	7bfb      	ldrb	r3, [r7, #15]
}
 8016286:	4618      	mov	r0, r3
 8016288:	3710      	adds	r7, #16
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
	...

08016290 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
 8016298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801629a:	2300      	movs	r3, #0
 801629c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801629e:	2300      	movs	r3, #0
 80162a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80162a2:	2300      	movs	r3, #0
 80162a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	885b      	ldrh	r3, [r3, #2]
 80162aa:	0a1b      	lsrs	r3, r3, #8
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	3b01      	subs	r3, #1
 80162b0:	2b06      	cmp	r3, #6
 80162b2:	f200 8128 	bhi.w	8016506 <USBD_GetDescriptor+0x276>
 80162b6:	a201      	add	r2, pc, #4	; (adr r2, 80162bc <USBD_GetDescriptor+0x2c>)
 80162b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162bc:	080162d9 	.word	0x080162d9
 80162c0:	080162f1 	.word	0x080162f1
 80162c4:	08016331 	.word	0x08016331
 80162c8:	08016507 	.word	0x08016507
 80162cc:	08016507 	.word	0x08016507
 80162d0:	080164a7 	.word	0x080164a7
 80162d4:	080164d3 	.word	0x080164d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	7c12      	ldrb	r2, [r2, #16]
 80162e4:	f107 0108 	add.w	r1, r7, #8
 80162e8:	4610      	mov	r0, r2
 80162ea:	4798      	blx	r3
 80162ec:	60f8      	str	r0, [r7, #12]
      break;
 80162ee:	e112      	b.n	8016516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	7c1b      	ldrb	r3, [r3, #16]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d10d      	bne.n	8016314 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016300:	f107 0208 	add.w	r2, r7, #8
 8016304:	4610      	mov	r0, r2
 8016306:	4798      	blx	r3
 8016308:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	3301      	adds	r3, #1
 801630e:	2202      	movs	r2, #2
 8016310:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016312:	e100      	b.n	8016516 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801631c:	f107 0208 	add.w	r2, r7, #8
 8016320:	4610      	mov	r0, r2
 8016322:	4798      	blx	r3
 8016324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	3301      	adds	r3, #1
 801632a:	2202      	movs	r2, #2
 801632c:	701a      	strb	r2, [r3, #0]
      break;
 801632e:	e0f2      	b.n	8016516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	885b      	ldrh	r3, [r3, #2]
 8016334:	b2db      	uxtb	r3, r3
 8016336:	2b05      	cmp	r3, #5
 8016338:	f200 80ac 	bhi.w	8016494 <USBD_GetDescriptor+0x204>
 801633c:	a201      	add	r2, pc, #4	; (adr r2, 8016344 <USBD_GetDescriptor+0xb4>)
 801633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016342:	bf00      	nop
 8016344:	0801635d 	.word	0x0801635d
 8016348:	08016391 	.word	0x08016391
 801634c:	080163c5 	.word	0x080163c5
 8016350:	080163f9 	.word	0x080163f9
 8016354:	0801642d 	.word	0x0801642d
 8016358:	08016461 	.word	0x08016461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d00b      	beq.n	8016380 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	7c12      	ldrb	r2, [r2, #16]
 8016374:	f107 0108 	add.w	r1, r7, #8
 8016378:	4610      	mov	r0, r2
 801637a:	4798      	blx	r3
 801637c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801637e:	e091      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016380:	6839      	ldr	r1, [r7, #0]
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 facb 	bl	801691e <USBD_CtlError>
            err++;
 8016388:	7afb      	ldrb	r3, [r7, #11]
 801638a:	3301      	adds	r3, #1
 801638c:	72fb      	strb	r3, [r7, #11]
          break;
 801638e:	e089      	b.n	80164a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016396:	689b      	ldr	r3, [r3, #8]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d00b      	beq.n	80163b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163a2:	689b      	ldr	r3, [r3, #8]
 80163a4:	687a      	ldr	r2, [r7, #4]
 80163a6:	7c12      	ldrb	r2, [r2, #16]
 80163a8:	f107 0108 	add.w	r1, r7, #8
 80163ac:	4610      	mov	r0, r2
 80163ae:	4798      	blx	r3
 80163b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80163b2:	e077      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80163b4:	6839      	ldr	r1, [r7, #0]
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 fab1 	bl	801691e <USBD_CtlError>
            err++;
 80163bc:	7afb      	ldrb	r3, [r7, #11]
 80163be:	3301      	adds	r3, #1
 80163c0:	72fb      	strb	r3, [r7, #11]
          break;
 80163c2:	e06f      	b.n	80164a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d00b      	beq.n	80163e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163d6:	68db      	ldr	r3, [r3, #12]
 80163d8:	687a      	ldr	r2, [r7, #4]
 80163da:	7c12      	ldrb	r2, [r2, #16]
 80163dc:	f107 0108 	add.w	r1, r7, #8
 80163e0:	4610      	mov	r0, r2
 80163e2:	4798      	blx	r3
 80163e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80163e6:	e05d      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80163e8:	6839      	ldr	r1, [r7, #0]
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f000 fa97 	bl	801691e <USBD_CtlError>
            err++;
 80163f0:	7afb      	ldrb	r3, [r7, #11]
 80163f2:	3301      	adds	r3, #1
 80163f4:	72fb      	strb	r3, [r7, #11]
          break;
 80163f6:	e055      	b.n	80164a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163fe:	691b      	ldr	r3, [r3, #16]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d00b      	beq.n	801641c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801640a:	691b      	ldr	r3, [r3, #16]
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	7c12      	ldrb	r2, [r2, #16]
 8016410:	f107 0108 	add.w	r1, r7, #8
 8016414:	4610      	mov	r0, r2
 8016416:	4798      	blx	r3
 8016418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801641a:	e043      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801641c:	6839      	ldr	r1, [r7, #0]
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f000 fa7d 	bl	801691e <USBD_CtlError>
            err++;
 8016424:	7afb      	ldrb	r3, [r7, #11]
 8016426:	3301      	adds	r3, #1
 8016428:	72fb      	strb	r3, [r7, #11]
          break;
 801642a:	e03b      	b.n	80164a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016432:	695b      	ldr	r3, [r3, #20]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d00b      	beq.n	8016450 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801643e:	695b      	ldr	r3, [r3, #20]
 8016440:	687a      	ldr	r2, [r7, #4]
 8016442:	7c12      	ldrb	r2, [r2, #16]
 8016444:	f107 0108 	add.w	r1, r7, #8
 8016448:	4610      	mov	r0, r2
 801644a:	4798      	blx	r3
 801644c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801644e:	e029      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016450:	6839      	ldr	r1, [r7, #0]
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 fa63 	bl	801691e <USBD_CtlError>
            err++;
 8016458:	7afb      	ldrb	r3, [r7, #11]
 801645a:	3301      	adds	r3, #1
 801645c:	72fb      	strb	r3, [r7, #11]
          break;
 801645e:	e021      	b.n	80164a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016466:	699b      	ldr	r3, [r3, #24]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00b      	beq.n	8016484 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016472:	699b      	ldr	r3, [r3, #24]
 8016474:	687a      	ldr	r2, [r7, #4]
 8016476:	7c12      	ldrb	r2, [r2, #16]
 8016478:	f107 0108 	add.w	r1, r7, #8
 801647c:	4610      	mov	r0, r2
 801647e:	4798      	blx	r3
 8016480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016482:	e00f      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016484:	6839      	ldr	r1, [r7, #0]
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	f000 fa49 	bl	801691e <USBD_CtlError>
            err++;
 801648c:	7afb      	ldrb	r3, [r7, #11]
 801648e:	3301      	adds	r3, #1
 8016490:	72fb      	strb	r3, [r7, #11]
          break;
 8016492:	e007      	b.n	80164a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016494:	6839      	ldr	r1, [r7, #0]
 8016496:	6878      	ldr	r0, [r7, #4]
 8016498:	f000 fa41 	bl	801691e <USBD_CtlError>
          err++;
 801649c:	7afb      	ldrb	r3, [r7, #11]
 801649e:	3301      	adds	r3, #1
 80164a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80164a2:	bf00      	nop
      }
      break;
 80164a4:	e037      	b.n	8016516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	7c1b      	ldrb	r3, [r3, #16]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d109      	bne.n	80164c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b6:	f107 0208 	add.w	r2, r7, #8
 80164ba:	4610      	mov	r0, r2
 80164bc:	4798      	blx	r3
 80164be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80164c0:	e029      	b.n	8016516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80164c2:	6839      	ldr	r1, [r7, #0]
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f000 fa2a 	bl	801691e <USBD_CtlError>
        err++;
 80164ca:	7afb      	ldrb	r3, [r7, #11]
 80164cc:	3301      	adds	r3, #1
 80164ce:	72fb      	strb	r3, [r7, #11]
      break;
 80164d0:	e021      	b.n	8016516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	7c1b      	ldrb	r3, [r3, #16]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d10d      	bne.n	80164f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164e2:	f107 0208 	add.w	r2, r7, #8
 80164e6:	4610      	mov	r0, r2
 80164e8:	4798      	blx	r3
 80164ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	3301      	adds	r3, #1
 80164f0:	2207      	movs	r2, #7
 80164f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80164f4:	e00f      	b.n	8016516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80164f6:	6839      	ldr	r1, [r7, #0]
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f000 fa10 	bl	801691e <USBD_CtlError>
        err++;
 80164fe:	7afb      	ldrb	r3, [r7, #11]
 8016500:	3301      	adds	r3, #1
 8016502:	72fb      	strb	r3, [r7, #11]
      break;
 8016504:	e007      	b.n	8016516 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016506:	6839      	ldr	r1, [r7, #0]
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f000 fa08 	bl	801691e <USBD_CtlError>
      err++;
 801650e:	7afb      	ldrb	r3, [r7, #11]
 8016510:	3301      	adds	r3, #1
 8016512:	72fb      	strb	r3, [r7, #11]
      break;
 8016514:	bf00      	nop
  }

  if (err != 0U)
 8016516:	7afb      	ldrb	r3, [r7, #11]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d11e      	bne.n	801655a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	88db      	ldrh	r3, [r3, #6]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d016      	beq.n	8016552 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016524:	893b      	ldrh	r3, [r7, #8]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d00e      	beq.n	8016548 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	88da      	ldrh	r2, [r3, #6]
 801652e:	893b      	ldrh	r3, [r7, #8]
 8016530:	4293      	cmp	r3, r2
 8016532:	bf28      	it	cs
 8016534:	4613      	movcs	r3, r2
 8016536:	b29b      	uxth	r3, r3
 8016538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801653a:	893b      	ldrh	r3, [r7, #8]
 801653c:	461a      	mov	r2, r3
 801653e:	68f9      	ldr	r1, [r7, #12]
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f000 fa5d 	bl	8016a00 <USBD_CtlSendData>
 8016546:	e009      	b.n	801655c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016548:	6839      	ldr	r1, [r7, #0]
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f000 f9e7 	bl	801691e <USBD_CtlError>
 8016550:	e004      	b.n	801655c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f000 fa91 	bl	8016a7a <USBD_CtlSendStatus>
 8016558:	e000      	b.n	801655c <USBD_GetDescriptor+0x2cc>
    return;
 801655a:	bf00      	nop
  }
}
 801655c:	3710      	adds	r7, #16
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop

08016564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b084      	sub	sp, #16
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	889b      	ldrh	r3, [r3, #4]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d131      	bne.n	80165da <USBD_SetAddress+0x76>
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	88db      	ldrh	r3, [r3, #6]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d12d      	bne.n	80165da <USBD_SetAddress+0x76>
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	885b      	ldrh	r3, [r3, #2]
 8016582:	2b7f      	cmp	r3, #127	; 0x7f
 8016584:	d829      	bhi.n	80165da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	885b      	ldrh	r3, [r3, #2]
 801658a:	b2db      	uxtb	r3, r3
 801658c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016598:	b2db      	uxtb	r3, r3
 801659a:	2b03      	cmp	r3, #3
 801659c:	d104      	bne.n	80165a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801659e:	6839      	ldr	r1, [r7, #0]
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 f9bc 	bl	801691e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165a6:	e01d      	b.n	80165e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	7bfa      	ldrb	r2, [r7, #15]
 80165ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80165b0:	7bfb      	ldrb	r3, [r7, #15]
 80165b2:	4619      	mov	r1, r3
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f004 fc54 	bl	801ae62 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f000 fa5d 	bl	8016a7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80165c0:	7bfb      	ldrb	r3, [r7, #15]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d004      	beq.n	80165d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2202      	movs	r2, #2
 80165ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165ce:	e009      	b.n	80165e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165d8:	e004      	b.n	80165e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 f99e 	bl	801691e <USBD_CtlError>
  }
}
 80165e2:	bf00      	nop
 80165e4:	bf00      	nop
 80165e6:	3710      	adds	r7, #16
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b084      	sub	sp, #16
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80165f6:	2300      	movs	r3, #0
 80165f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	885b      	ldrh	r3, [r3, #2]
 80165fe:	b2da      	uxtb	r2, r3
 8016600:	4b4e      	ldr	r3, [pc, #312]	; (801673c <USBD_SetConfig+0x150>)
 8016602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016604:	4b4d      	ldr	r3, [pc, #308]	; (801673c <USBD_SetConfig+0x150>)
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	2b01      	cmp	r3, #1
 801660a:	d905      	bls.n	8016618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f000 f985 	bl	801691e <USBD_CtlError>
    return USBD_FAIL;
 8016614:	2303      	movs	r3, #3
 8016616:	e08c      	b.n	8016732 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801661e:	b2db      	uxtb	r3, r3
 8016620:	2b02      	cmp	r3, #2
 8016622:	d002      	beq.n	801662a <USBD_SetConfig+0x3e>
 8016624:	2b03      	cmp	r3, #3
 8016626:	d029      	beq.n	801667c <USBD_SetConfig+0x90>
 8016628:	e075      	b.n	8016716 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801662a:	4b44      	ldr	r3, [pc, #272]	; (801673c <USBD_SetConfig+0x150>)
 801662c:	781b      	ldrb	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d020      	beq.n	8016674 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016632:	4b42      	ldr	r3, [pc, #264]	; (801673c <USBD_SetConfig+0x150>)
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	461a      	mov	r2, r3
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801663c:	4b3f      	ldr	r3, [pc, #252]	; (801673c <USBD_SetConfig+0x150>)
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	4619      	mov	r1, r3
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	f7fe ffe7 	bl	8015616 <USBD_SetClassConfig>
 8016648:	4603      	mov	r3, r0
 801664a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801664c:	7bfb      	ldrb	r3, [r7, #15]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d008      	beq.n	8016664 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016652:	6839      	ldr	r1, [r7, #0]
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f000 f962 	bl	801691e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2202      	movs	r2, #2
 801665e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016662:	e065      	b.n	8016730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f000 fa08 	bl	8016a7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	2203      	movs	r2, #3
 801666e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016672:	e05d      	b.n	8016730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f000 fa00 	bl	8016a7a <USBD_CtlSendStatus>
      break;
 801667a:	e059      	b.n	8016730 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801667c:	4b2f      	ldr	r3, [pc, #188]	; (801673c <USBD_SetConfig+0x150>)
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d112      	bne.n	80166aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2202      	movs	r2, #2
 8016688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801668c:	4b2b      	ldr	r3, [pc, #172]	; (801673c <USBD_SetConfig+0x150>)
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	461a      	mov	r2, r3
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016696:	4b29      	ldr	r3, [pc, #164]	; (801673c <USBD_SetConfig+0x150>)
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	4619      	mov	r1, r3
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f7fe ffd6 	bl	801564e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f000 f9e9 	bl	8016a7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80166a8:	e042      	b.n	8016730 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80166aa:	4b24      	ldr	r3, [pc, #144]	; (801673c <USBD_SetConfig+0x150>)
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	461a      	mov	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d02a      	beq.n	801670e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	685b      	ldr	r3, [r3, #4]
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	4619      	mov	r1, r3
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f7fe ffc4 	bl	801564e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80166c6:	4b1d      	ldr	r3, [pc, #116]	; (801673c <USBD_SetConfig+0x150>)
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	461a      	mov	r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80166d0:	4b1a      	ldr	r3, [pc, #104]	; (801673c <USBD_SetConfig+0x150>)
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	4619      	mov	r1, r3
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f7fe ff9d 	bl	8015616 <USBD_SetClassConfig>
 80166dc:	4603      	mov	r3, r0
 80166de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80166e0:	7bfb      	ldrb	r3, [r7, #15]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d00f      	beq.n	8016706 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80166e6:	6839      	ldr	r1, [r7, #0]
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f000 f918 	bl	801691e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	685b      	ldr	r3, [r3, #4]
 80166f2:	b2db      	uxtb	r3, r3
 80166f4:	4619      	mov	r1, r3
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f7fe ffa9 	bl	801564e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2202      	movs	r2, #2
 8016700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016704:	e014      	b.n	8016730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f000 f9b7 	bl	8016a7a <USBD_CtlSendStatus>
      break;
 801670c:	e010      	b.n	8016730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f000 f9b3 	bl	8016a7a <USBD_CtlSendStatus>
      break;
 8016714:	e00c      	b.n	8016730 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016716:	6839      	ldr	r1, [r7, #0]
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 f900 	bl	801691e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801671e:	4b07      	ldr	r3, [pc, #28]	; (801673c <USBD_SetConfig+0x150>)
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	4619      	mov	r1, r3
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f7fe ff92 	bl	801564e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801672a:	2303      	movs	r3, #3
 801672c:	73fb      	strb	r3, [r7, #15]
      break;
 801672e:	bf00      	nop
  }

  return ret;
 8016730:	7bfb      	ldrb	r3, [r7, #15]
}
 8016732:	4618      	mov	r0, r3
 8016734:	3710      	adds	r7, #16
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	20001a84 	.word	0x20001a84

08016740 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	88db      	ldrh	r3, [r3, #6]
 801674e:	2b01      	cmp	r3, #1
 8016750:	d004      	beq.n	801675c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016752:	6839      	ldr	r1, [r7, #0]
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f000 f8e2 	bl	801691e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801675a:	e023      	b.n	80167a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016762:	b2db      	uxtb	r3, r3
 8016764:	2b02      	cmp	r3, #2
 8016766:	dc02      	bgt.n	801676e <USBD_GetConfig+0x2e>
 8016768:	2b00      	cmp	r3, #0
 801676a:	dc03      	bgt.n	8016774 <USBD_GetConfig+0x34>
 801676c:	e015      	b.n	801679a <USBD_GetConfig+0x5a>
 801676e:	2b03      	cmp	r3, #3
 8016770:	d00b      	beq.n	801678a <USBD_GetConfig+0x4a>
 8016772:	e012      	b.n	801679a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2200      	movs	r2, #0
 8016778:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	3308      	adds	r3, #8
 801677e:	2201      	movs	r2, #1
 8016780:	4619      	mov	r1, r3
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f000 f93c 	bl	8016a00 <USBD_CtlSendData>
        break;
 8016788:	e00c      	b.n	80167a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	3304      	adds	r3, #4
 801678e:	2201      	movs	r2, #1
 8016790:	4619      	mov	r1, r3
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 f934 	bl	8016a00 <USBD_CtlSendData>
        break;
 8016798:	e004      	b.n	80167a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f000 f8be 	bl	801691e <USBD_CtlError>
        break;
 80167a2:	bf00      	nop
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	3b01      	subs	r3, #1
 80167c0:	2b02      	cmp	r3, #2
 80167c2:	d81e      	bhi.n	8016802 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	88db      	ldrh	r3, [r3, #6]
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d004      	beq.n	80167d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80167cc:	6839      	ldr	r1, [r7, #0]
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 f8a5 	bl	801691e <USBD_CtlError>
        break;
 80167d4:	e01a      	b.n	801680c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2201      	movs	r2, #1
 80167da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d005      	beq.n	80167f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	68db      	ldr	r3, [r3, #12]
 80167ea:	f043 0202 	orr.w	r2, r3, #2
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	330c      	adds	r3, #12
 80167f6:	2202      	movs	r2, #2
 80167f8:	4619      	mov	r1, r3
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f000 f900 	bl	8016a00 <USBD_CtlSendData>
      break;
 8016800:	e004      	b.n	801680c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016802:	6839      	ldr	r1, [r7, #0]
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f000 f88a 	bl	801691e <USBD_CtlError>
      break;
 801680a:	bf00      	nop
  }
}
 801680c:	bf00      	nop
 801680e:	3708      	adds	r7, #8
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}

08016814 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	885b      	ldrh	r3, [r3, #2]
 8016822:	2b01      	cmp	r3, #1
 8016824:	d107      	bne.n	8016836 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2201      	movs	r2, #1
 801682a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 f923 	bl	8016a7a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016834:	e013      	b.n	801685e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	885b      	ldrh	r3, [r3, #2]
 801683a:	2b02      	cmp	r3, #2
 801683c:	d10b      	bne.n	8016856 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	889b      	ldrh	r3, [r3, #4]
 8016842:	0a1b      	lsrs	r3, r3, #8
 8016844:	b29b      	uxth	r3, r3
 8016846:	b2da      	uxtb	r2, r3
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f000 f913 	bl	8016a7a <USBD_CtlSendStatus>
}
 8016854:	e003      	b.n	801685e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016856:	6839      	ldr	r1, [r7, #0]
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f000 f860 	bl	801691e <USBD_CtlError>
}
 801685e:	bf00      	nop
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016866:	b580      	push	{r7, lr}
 8016868:	b082      	sub	sp, #8
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
 801686e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016876:	b2db      	uxtb	r3, r3
 8016878:	3b01      	subs	r3, #1
 801687a:	2b02      	cmp	r3, #2
 801687c:	d80b      	bhi.n	8016896 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	885b      	ldrh	r3, [r3, #2]
 8016882:	2b01      	cmp	r3, #1
 8016884:	d10c      	bne.n	80168a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2200      	movs	r2, #0
 801688a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f000 f8f3 	bl	8016a7a <USBD_CtlSendStatus>
      }
      break;
 8016894:	e004      	b.n	80168a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016896:	6839      	ldr	r1, [r7, #0]
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f000 f840 	bl	801691e <USBD_CtlError>
      break;
 801689e:	e000      	b.n	80168a2 <USBD_ClrFeature+0x3c>
      break;
 80168a0:	bf00      	nop
  }
}
 80168a2:	bf00      	nop
 80168a4:	3708      	adds	r7, #8
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}

080168aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80168aa:	b580      	push	{r7, lr}
 80168ac:	b084      	sub	sp, #16
 80168ae:	af00      	add	r7, sp, #0
 80168b0:	6078      	str	r0, [r7, #4]
 80168b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	781a      	ldrb	r2, [r3, #0]
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	3301      	adds	r3, #1
 80168c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	781a      	ldrb	r2, [r3, #0]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	3301      	adds	r3, #1
 80168d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80168d4:	68f8      	ldr	r0, [r7, #12]
 80168d6:	f7ff fa41 	bl	8015d5c <SWAPBYTE>
 80168da:	4603      	mov	r3, r0
 80168dc:	461a      	mov	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	3301      	adds	r3, #1
 80168e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	3301      	adds	r3, #1
 80168ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80168ee:	68f8      	ldr	r0, [r7, #12]
 80168f0:	f7ff fa34 	bl	8015d5c <SWAPBYTE>
 80168f4:	4603      	mov	r3, r0
 80168f6:	461a      	mov	r2, r3
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	3301      	adds	r3, #1
 8016900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	3301      	adds	r3, #1
 8016906:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016908:	68f8      	ldr	r0, [r7, #12]
 801690a:	f7ff fa27 	bl	8015d5c <SWAPBYTE>
 801690e:	4603      	mov	r3, r0
 8016910:	461a      	mov	r2, r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	80da      	strh	r2, [r3, #6]
}
 8016916:	bf00      	nop
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b082      	sub	sp, #8
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
 8016926:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016928:	2180      	movs	r1, #128	; 0x80
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f004 fa2f 	bl	801ad8e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016930:	2100      	movs	r1, #0
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f004 fa2b 	bl	801ad8e <USBD_LL_StallEP>
}
 8016938:	bf00      	nop
 801693a:	3708      	adds	r7, #8
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b086      	sub	sp, #24
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801694c:	2300      	movs	r3, #0
 801694e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d036      	beq.n	80169c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801695a:	6938      	ldr	r0, [r7, #16]
 801695c:	f000 f836 	bl	80169cc <USBD_GetLen>
 8016960:	4603      	mov	r3, r0
 8016962:	3301      	adds	r3, #1
 8016964:	b29b      	uxth	r3, r3
 8016966:	005b      	lsls	r3, r3, #1
 8016968:	b29a      	uxth	r2, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801696e:	7dfb      	ldrb	r3, [r7, #23]
 8016970:	68ba      	ldr	r2, [r7, #8]
 8016972:	4413      	add	r3, r2
 8016974:	687a      	ldr	r2, [r7, #4]
 8016976:	7812      	ldrb	r2, [r2, #0]
 8016978:	701a      	strb	r2, [r3, #0]
  idx++;
 801697a:	7dfb      	ldrb	r3, [r7, #23]
 801697c:	3301      	adds	r3, #1
 801697e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016980:	7dfb      	ldrb	r3, [r7, #23]
 8016982:	68ba      	ldr	r2, [r7, #8]
 8016984:	4413      	add	r3, r2
 8016986:	2203      	movs	r2, #3
 8016988:	701a      	strb	r2, [r3, #0]
  idx++;
 801698a:	7dfb      	ldrb	r3, [r7, #23]
 801698c:	3301      	adds	r3, #1
 801698e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016990:	e013      	b.n	80169ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016992:	7dfb      	ldrb	r3, [r7, #23]
 8016994:	68ba      	ldr	r2, [r7, #8]
 8016996:	4413      	add	r3, r2
 8016998:	693a      	ldr	r2, [r7, #16]
 801699a:	7812      	ldrb	r2, [r2, #0]
 801699c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	3301      	adds	r3, #1
 80169a2:	613b      	str	r3, [r7, #16]
    idx++;
 80169a4:	7dfb      	ldrb	r3, [r7, #23]
 80169a6:	3301      	adds	r3, #1
 80169a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80169aa:	7dfb      	ldrb	r3, [r7, #23]
 80169ac:	68ba      	ldr	r2, [r7, #8]
 80169ae:	4413      	add	r3, r2
 80169b0:	2200      	movs	r2, #0
 80169b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80169b4:	7dfb      	ldrb	r3, [r7, #23]
 80169b6:	3301      	adds	r3, #1
 80169b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80169ba:	693b      	ldr	r3, [r7, #16]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1e7      	bne.n	8016992 <USBD_GetString+0x52>
 80169c2:	e000      	b.n	80169c6 <USBD_GetString+0x86>
    return;
 80169c4:	bf00      	nop
  }
}
 80169c6:	3718      	adds	r7, #24
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}

080169cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80169cc:	b480      	push	{r7}
 80169ce:	b085      	sub	sp, #20
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80169d4:	2300      	movs	r3, #0
 80169d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80169dc:	e005      	b.n	80169ea <USBD_GetLen+0x1e>
  {
    len++;
 80169de:	7bfb      	ldrb	r3, [r7, #15]
 80169e0:	3301      	adds	r3, #1
 80169e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	3301      	adds	r3, #1
 80169e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d1f5      	bne.n	80169de <USBD_GetLen+0x12>
  }

  return len;
 80169f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3714      	adds	r7, #20
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr

08016a00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b084      	sub	sp, #16
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	2202      	movs	r2, #2
 8016a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	687a      	ldr	r2, [r7, #4]
 8016a1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	68ba      	ldr	r2, [r7, #8]
 8016a24:	2100      	movs	r1, #0
 8016a26:	68f8      	ldr	r0, [r7, #12]
 8016a28:	f004 fa3a 	bl	801aea0 <USBD_LL_Transmit>

  return USBD_OK;
 8016a2c:	2300      	movs	r3, #0
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}

08016a36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016a36:	b580      	push	{r7, lr}
 8016a38:	b084      	sub	sp, #16
 8016a3a:	af00      	add	r7, sp, #0
 8016a3c:	60f8      	str	r0, [r7, #12]
 8016a3e:	60b9      	str	r1, [r7, #8]
 8016a40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	68ba      	ldr	r2, [r7, #8]
 8016a46:	2100      	movs	r1, #0
 8016a48:	68f8      	ldr	r0, [r7, #12]
 8016a4a:	f004 fa29 	bl	801aea0 <USBD_LL_Transmit>

  return USBD_OK;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3710      	adds	r7, #16
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b084      	sub	sp, #16
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	68ba      	ldr	r2, [r7, #8]
 8016a68:	2100      	movs	r1, #0
 8016a6a:	68f8      	ldr	r0, [r7, #12]
 8016a6c:	f004 fa39 	bl	801aee2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016a70:	2300      	movs	r3, #0
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3710      	adds	r7, #16
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}

08016a7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016a7a:	b580      	push	{r7, lr}
 8016a7c:	b082      	sub	sp, #8
 8016a7e:	af00      	add	r7, sp, #0
 8016a80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2204      	movs	r2, #4
 8016a86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	2100      	movs	r1, #0
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f004 fa05 	bl	801aea0 <USBD_LL_Transmit>

  return USBD_OK;
 8016a96:	2300      	movs	r3, #0
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3708      	adds	r7, #8
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2205      	movs	r2, #5
 8016aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	2100      	movs	r1, #0
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f004 fa13 	bl	801aee2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016abc:	2300      	movs	r3, #0
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
	...

08016ac8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b084      	sub	sp, #16
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	4603      	mov	r3, r0
 8016ad0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016ad2:	79fb      	ldrb	r3, [r7, #7]
 8016ad4:	4a08      	ldr	r2, [pc, #32]	; (8016af8 <disk_status+0x30>)
 8016ad6:	009b      	lsls	r3, r3, #2
 8016ad8:	4413      	add	r3, r2
 8016ada:	685b      	ldr	r3, [r3, #4]
 8016adc:	685b      	ldr	r3, [r3, #4]
 8016ade:	79fa      	ldrb	r2, [r7, #7]
 8016ae0:	4905      	ldr	r1, [pc, #20]	; (8016af8 <disk_status+0x30>)
 8016ae2:	440a      	add	r2, r1
 8016ae4:	7a12      	ldrb	r2, [r2, #8]
 8016ae6:	4610      	mov	r0, r2
 8016ae8:	4798      	blx	r3
 8016aea:	4603      	mov	r3, r0
 8016aec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3710      	adds	r7, #16
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	20001cb0 	.word	0x20001cb0

08016afc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b084      	sub	sp, #16
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	4603      	mov	r3, r0
 8016b04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016b06:	2300      	movs	r3, #0
 8016b08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016b0a:	79fb      	ldrb	r3, [r7, #7]
 8016b0c:	4a0d      	ldr	r2, [pc, #52]	; (8016b44 <disk_initialize+0x48>)
 8016b0e:	5cd3      	ldrb	r3, [r2, r3]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d111      	bne.n	8016b38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016b14:	79fb      	ldrb	r3, [r7, #7]
 8016b16:	4a0b      	ldr	r2, [pc, #44]	; (8016b44 <disk_initialize+0x48>)
 8016b18:	2101      	movs	r1, #1
 8016b1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016b1c:	79fb      	ldrb	r3, [r7, #7]
 8016b1e:	4a09      	ldr	r2, [pc, #36]	; (8016b44 <disk_initialize+0x48>)
 8016b20:	009b      	lsls	r3, r3, #2
 8016b22:	4413      	add	r3, r2
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	79fa      	ldrb	r2, [r7, #7]
 8016b2a:	4906      	ldr	r1, [pc, #24]	; (8016b44 <disk_initialize+0x48>)
 8016b2c:	440a      	add	r2, r1
 8016b2e:	7a12      	ldrb	r2, [r2, #8]
 8016b30:	4610      	mov	r0, r2
 8016b32:	4798      	blx	r3
 8016b34:	4603      	mov	r3, r0
 8016b36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	20001cb0 	.word	0x20001cb0

08016b48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016b48:	b590      	push	{r4, r7, lr}
 8016b4a:	b087      	sub	sp, #28
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	60b9      	str	r1, [r7, #8]
 8016b50:	607a      	str	r2, [r7, #4]
 8016b52:	603b      	str	r3, [r7, #0]
 8016b54:	4603      	mov	r3, r0
 8016b56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016b58:	7bfb      	ldrb	r3, [r7, #15]
 8016b5a:	4a0a      	ldr	r2, [pc, #40]	; (8016b84 <disk_read+0x3c>)
 8016b5c:	009b      	lsls	r3, r3, #2
 8016b5e:	4413      	add	r3, r2
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	689c      	ldr	r4, [r3, #8]
 8016b64:	7bfb      	ldrb	r3, [r7, #15]
 8016b66:	4a07      	ldr	r2, [pc, #28]	; (8016b84 <disk_read+0x3c>)
 8016b68:	4413      	add	r3, r2
 8016b6a:	7a18      	ldrb	r0, [r3, #8]
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	68b9      	ldr	r1, [r7, #8]
 8016b72:	47a0      	blx	r4
 8016b74:	4603      	mov	r3, r0
 8016b76:	75fb      	strb	r3, [r7, #23]
  return res;
 8016b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	371c      	adds	r7, #28
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd90      	pop	{r4, r7, pc}
 8016b82:	bf00      	nop
 8016b84:	20001cb0 	.word	0x20001cb0

08016b88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016b88:	b590      	push	{r4, r7, lr}
 8016b8a:	b087      	sub	sp, #28
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60b9      	str	r1, [r7, #8]
 8016b90:	607a      	str	r2, [r7, #4]
 8016b92:	603b      	str	r3, [r7, #0]
 8016b94:	4603      	mov	r3, r0
 8016b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016b98:	7bfb      	ldrb	r3, [r7, #15]
 8016b9a:	4a0a      	ldr	r2, [pc, #40]	; (8016bc4 <disk_write+0x3c>)
 8016b9c:	009b      	lsls	r3, r3, #2
 8016b9e:	4413      	add	r3, r2
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	68dc      	ldr	r4, [r3, #12]
 8016ba4:	7bfb      	ldrb	r3, [r7, #15]
 8016ba6:	4a07      	ldr	r2, [pc, #28]	; (8016bc4 <disk_write+0x3c>)
 8016ba8:	4413      	add	r3, r2
 8016baa:	7a18      	ldrb	r0, [r3, #8]
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	687a      	ldr	r2, [r7, #4]
 8016bb0:	68b9      	ldr	r1, [r7, #8]
 8016bb2:	47a0      	blx	r4
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8016bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	371c      	adds	r7, #28
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd90      	pop	{r4, r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	20001cb0 	.word	0x20001cb0

08016bc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	4603      	mov	r3, r0
 8016bd0:	603a      	str	r2, [r7, #0]
 8016bd2:	71fb      	strb	r3, [r7, #7]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016bd8:	79fb      	ldrb	r3, [r7, #7]
 8016bda:	4a09      	ldr	r2, [pc, #36]	; (8016c00 <disk_ioctl+0x38>)
 8016bdc:	009b      	lsls	r3, r3, #2
 8016bde:	4413      	add	r3, r2
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	691b      	ldr	r3, [r3, #16]
 8016be4:	79fa      	ldrb	r2, [r7, #7]
 8016be6:	4906      	ldr	r1, [pc, #24]	; (8016c00 <disk_ioctl+0x38>)
 8016be8:	440a      	add	r2, r1
 8016bea:	7a10      	ldrb	r0, [r2, #8]
 8016bec:	79b9      	ldrb	r1, [r7, #6]
 8016bee:	683a      	ldr	r2, [r7, #0]
 8016bf0:	4798      	blx	r3
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	73fb      	strb	r3, [r7, #15]
  return res;
 8016bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3710      	adds	r7, #16
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}
 8016c00:	20001cb0 	.word	0x20001cb0

08016c04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016c04:	b480      	push	{r7}
 8016c06:	b085      	sub	sp, #20
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016c14:	89fb      	ldrh	r3, [r7, #14]
 8016c16:	021b      	lsls	r3, r3, #8
 8016c18:	b21a      	sxth	r2, r3
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	b21b      	sxth	r3, r3
 8016c20:	4313      	orrs	r3, r2
 8016c22:	b21b      	sxth	r3, r3
 8016c24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016c26:	89fb      	ldrh	r3, [r7, #14]
}
 8016c28:	4618      	mov	r0, r3
 8016c2a:	3714      	adds	r7, #20
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c32:	4770      	bx	lr

08016c34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016c34:	b480      	push	{r7}
 8016c36:	b085      	sub	sp, #20
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	3303      	adds	r3, #3
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	021b      	lsls	r3, r3, #8
 8016c48:	687a      	ldr	r2, [r7, #4]
 8016c4a:	3202      	adds	r2, #2
 8016c4c:	7812      	ldrb	r2, [r2, #0]
 8016c4e:	4313      	orrs	r3, r2
 8016c50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	021b      	lsls	r3, r3, #8
 8016c56:	687a      	ldr	r2, [r7, #4]
 8016c58:	3201      	adds	r2, #1
 8016c5a:	7812      	ldrb	r2, [r2, #0]
 8016c5c:	4313      	orrs	r3, r2
 8016c5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	021b      	lsls	r3, r3, #8
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	7812      	ldrb	r2, [r2, #0]
 8016c68:	4313      	orrs	r3, r2
 8016c6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3714      	adds	r7, #20
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	b083      	sub	sp, #12
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	460b      	mov	r3, r1
 8016c84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	1c5a      	adds	r2, r3, #1
 8016c8a:	607a      	str	r2, [r7, #4]
 8016c8c:	887a      	ldrh	r2, [r7, #2]
 8016c8e:	b2d2      	uxtb	r2, r2
 8016c90:	701a      	strb	r2, [r3, #0]
 8016c92:	887b      	ldrh	r3, [r7, #2]
 8016c94:	0a1b      	lsrs	r3, r3, #8
 8016c96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	1c5a      	adds	r2, r3, #1
 8016c9c:	607a      	str	r2, [r7, #4]
 8016c9e:	887a      	ldrh	r2, [r7, #2]
 8016ca0:	b2d2      	uxtb	r2, r2
 8016ca2:	701a      	strb	r2, [r3, #0]
}
 8016ca4:	bf00      	nop
 8016ca6:	370c      	adds	r7, #12
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr

08016cb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016cb0:	b480      	push	{r7}
 8016cb2:	b083      	sub	sp, #12
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
 8016cb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	1c5a      	adds	r2, r3, #1
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	683a      	ldr	r2, [r7, #0]
 8016cc2:	b2d2      	uxtb	r2, r2
 8016cc4:	701a      	strb	r2, [r3, #0]
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	0a1b      	lsrs	r3, r3, #8
 8016cca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	1c5a      	adds	r2, r3, #1
 8016cd0:	607a      	str	r2, [r7, #4]
 8016cd2:	683a      	ldr	r2, [r7, #0]
 8016cd4:	b2d2      	uxtb	r2, r2
 8016cd6:	701a      	strb	r2, [r3, #0]
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	0a1b      	lsrs	r3, r3, #8
 8016cdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	1c5a      	adds	r2, r3, #1
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	683a      	ldr	r2, [r7, #0]
 8016ce6:	b2d2      	uxtb	r2, r2
 8016ce8:	701a      	strb	r2, [r3, #0]
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	0a1b      	lsrs	r3, r3, #8
 8016cee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	1c5a      	adds	r2, r3, #1
 8016cf4:	607a      	str	r2, [r7, #4]
 8016cf6:	683a      	ldr	r2, [r7, #0]
 8016cf8:	b2d2      	uxtb	r2, r2
 8016cfa:	701a      	strb	r2, [r3, #0]
}
 8016cfc:	bf00      	nop
 8016cfe:	370c      	adds	r7, #12
 8016d00:	46bd      	mov	sp, r7
 8016d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d06:	4770      	bx	lr

08016d08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016d08:	b480      	push	{r7}
 8016d0a:	b087      	sub	sp, #28
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00d      	beq.n	8016d3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016d22:	693a      	ldr	r2, [r7, #16]
 8016d24:	1c53      	adds	r3, r2, #1
 8016d26:	613b      	str	r3, [r7, #16]
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	1c59      	adds	r1, r3, #1
 8016d2c:	6179      	str	r1, [r7, #20]
 8016d2e:	7812      	ldrb	r2, [r2, #0]
 8016d30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	3b01      	subs	r3, #1
 8016d36:	607b      	str	r3, [r7, #4]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d1f1      	bne.n	8016d22 <mem_cpy+0x1a>
	}
}
 8016d3e:	bf00      	nop
 8016d40:	371c      	adds	r7, #28
 8016d42:	46bd      	mov	sp, r7
 8016d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d48:	4770      	bx	lr

08016d4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016d4a:	b480      	push	{r7}
 8016d4c:	b087      	sub	sp, #28
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	60f8      	str	r0, [r7, #12]
 8016d52:	60b9      	str	r1, [r7, #8]
 8016d54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	1c5a      	adds	r2, r3, #1
 8016d5e:	617a      	str	r2, [r7, #20]
 8016d60:	68ba      	ldr	r2, [r7, #8]
 8016d62:	b2d2      	uxtb	r2, r2
 8016d64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	3b01      	subs	r3, #1
 8016d6a:	607b      	str	r3, [r7, #4]
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d1f3      	bne.n	8016d5a <mem_set+0x10>
}
 8016d72:	bf00      	nop
 8016d74:	bf00      	nop
 8016d76:	371c      	adds	r7, #28
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7e:	4770      	bx	lr

08016d80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016d80:	b480      	push	{r7}
 8016d82:	b089      	sub	sp, #36	; 0x24
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	61fb      	str	r3, [r7, #28]
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016d94:	2300      	movs	r3, #0
 8016d96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016d98:	69fb      	ldr	r3, [r7, #28]
 8016d9a:	1c5a      	adds	r2, r3, #1
 8016d9c:	61fa      	str	r2, [r7, #28]
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	4619      	mov	r1, r3
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	1c5a      	adds	r2, r3, #1
 8016da6:	61ba      	str	r2, [r7, #24]
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	1acb      	subs	r3, r1, r3
 8016dac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	3b01      	subs	r3, #1
 8016db2:	607b      	str	r3, [r7, #4]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d002      	beq.n	8016dc0 <mem_cmp+0x40>
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d0eb      	beq.n	8016d98 <mem_cmp+0x18>

	return r;
 8016dc0:	697b      	ldr	r3, [r7, #20]
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3724      	adds	r7, #36	; 0x24
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dcc:	4770      	bx	lr

08016dce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016dce:	b480      	push	{r7}
 8016dd0:	b083      	sub	sp, #12
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	6078      	str	r0, [r7, #4]
 8016dd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016dd8:	e002      	b.n	8016de0 <chk_chr+0x12>
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	3301      	adds	r3, #1
 8016dde:	607b      	str	r3, [r7, #4]
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d005      	beq.n	8016df4 <chk_chr+0x26>
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	461a      	mov	r2, r3
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d1f2      	bne.n	8016dda <chk_chr+0xc>
	return *str;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	781b      	ldrb	r3, [r3, #0]
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	370c      	adds	r7, #12
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e02:	4770      	bx	lr

08016e04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016e04:	b480      	push	{r7}
 8016e06:	b085      	sub	sp, #20
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016e0e:	2300      	movs	r3, #0
 8016e10:	60bb      	str	r3, [r7, #8]
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	60fb      	str	r3, [r7, #12]
 8016e16:	e029      	b.n	8016e6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016e18:	4a27      	ldr	r2, [pc, #156]	; (8016eb8 <chk_lock+0xb4>)
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	011b      	lsls	r3, r3, #4
 8016e1e:	4413      	add	r3, r2
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d01d      	beq.n	8016e62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016e26:	4a24      	ldr	r2, [pc, #144]	; (8016eb8 <chk_lock+0xb4>)
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	011b      	lsls	r3, r3, #4
 8016e2c:	4413      	add	r3, r2
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d116      	bne.n	8016e66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016e38:	4a1f      	ldr	r2, [pc, #124]	; (8016eb8 <chk_lock+0xb4>)
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	011b      	lsls	r3, r3, #4
 8016e3e:	4413      	add	r3, r2
 8016e40:	3304      	adds	r3, #4
 8016e42:	681a      	ldr	r2, [r3, #0]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d10c      	bne.n	8016e66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016e4c:	4a1a      	ldr	r2, [pc, #104]	; (8016eb8 <chk_lock+0xb4>)
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	011b      	lsls	r3, r3, #4
 8016e52:	4413      	add	r3, r2
 8016e54:	3308      	adds	r3, #8
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d102      	bne.n	8016e66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016e60:	e007      	b.n	8016e72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016e62:	2301      	movs	r3, #1
 8016e64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	60fb      	str	r3, [r7, #12]
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	2b01      	cmp	r3, #1
 8016e70:	d9d2      	bls.n	8016e18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	2b02      	cmp	r3, #2
 8016e76:	d109      	bne.n	8016e8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d102      	bne.n	8016e84 <chk_lock+0x80>
 8016e7e:	683b      	ldr	r3, [r7, #0]
 8016e80:	2b02      	cmp	r3, #2
 8016e82:	d101      	bne.n	8016e88 <chk_lock+0x84>
 8016e84:	2300      	movs	r3, #0
 8016e86:	e010      	b.n	8016eaa <chk_lock+0xa6>
 8016e88:	2312      	movs	r3, #18
 8016e8a:	e00e      	b.n	8016eaa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d108      	bne.n	8016ea4 <chk_lock+0xa0>
 8016e92:	4a09      	ldr	r2, [pc, #36]	; (8016eb8 <chk_lock+0xb4>)
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	011b      	lsls	r3, r3, #4
 8016e98:	4413      	add	r3, r2
 8016e9a:	330c      	adds	r3, #12
 8016e9c:	881b      	ldrh	r3, [r3, #0]
 8016e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ea2:	d101      	bne.n	8016ea8 <chk_lock+0xa4>
 8016ea4:	2310      	movs	r3, #16
 8016ea6:	e000      	b.n	8016eaa <chk_lock+0xa6>
 8016ea8:	2300      	movs	r3, #0
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3714      	adds	r7, #20
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb4:	4770      	bx	lr
 8016eb6:	bf00      	nop
 8016eb8:	20001a90 	.word	0x20001a90

08016ebc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b083      	sub	sp, #12
 8016ec0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	607b      	str	r3, [r7, #4]
 8016ec6:	e002      	b.n	8016ece <enq_lock+0x12>
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	3301      	adds	r3, #1
 8016ecc:	607b      	str	r3, [r7, #4]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2b01      	cmp	r3, #1
 8016ed2:	d806      	bhi.n	8016ee2 <enq_lock+0x26>
 8016ed4:	4a09      	ldr	r2, [pc, #36]	; (8016efc <enq_lock+0x40>)
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	011b      	lsls	r3, r3, #4
 8016eda:	4413      	add	r3, r2
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d1f2      	bne.n	8016ec8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2b02      	cmp	r3, #2
 8016ee6:	bf14      	ite	ne
 8016ee8:	2301      	movne	r3, #1
 8016eea:	2300      	moveq	r3, #0
 8016eec:	b2db      	uxtb	r3, r3
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	370c      	adds	r7, #12
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef8:	4770      	bx	lr
 8016efa:	bf00      	nop
 8016efc:	20001a90 	.word	0x20001a90

08016f00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016f00:	b480      	push	{r7}
 8016f02:	b085      	sub	sp, #20
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
 8016f08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	60fb      	str	r3, [r7, #12]
 8016f0e:	e01f      	b.n	8016f50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016f10:	4a41      	ldr	r2, [pc, #260]	; (8017018 <inc_lock+0x118>)
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	011b      	lsls	r3, r3, #4
 8016f16:	4413      	add	r3, r2
 8016f18:	681a      	ldr	r2, [r3, #0]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d113      	bne.n	8016f4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016f22:	4a3d      	ldr	r2, [pc, #244]	; (8017018 <inc_lock+0x118>)
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	011b      	lsls	r3, r3, #4
 8016f28:	4413      	add	r3, r2
 8016f2a:	3304      	adds	r3, #4
 8016f2c:	681a      	ldr	r2, [r3, #0]
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d109      	bne.n	8016f4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016f36:	4a38      	ldr	r2, [pc, #224]	; (8017018 <inc_lock+0x118>)
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	011b      	lsls	r3, r3, #4
 8016f3c:	4413      	add	r3, r2
 8016f3e:	3308      	adds	r3, #8
 8016f40:	681a      	ldr	r2, [r3, #0]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016f46:	429a      	cmp	r2, r3
 8016f48:	d006      	beq.n	8016f58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	60fb      	str	r3, [r7, #12]
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d9dc      	bls.n	8016f10 <inc_lock+0x10>
 8016f56:	e000      	b.n	8016f5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016f58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	2b02      	cmp	r3, #2
 8016f5e:	d132      	bne.n	8016fc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016f60:	2300      	movs	r3, #0
 8016f62:	60fb      	str	r3, [r7, #12]
 8016f64:	e002      	b.n	8016f6c <inc_lock+0x6c>
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	60fb      	str	r3, [r7, #12]
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	d806      	bhi.n	8016f80 <inc_lock+0x80>
 8016f72:	4a29      	ldr	r2, [pc, #164]	; (8017018 <inc_lock+0x118>)
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	011b      	lsls	r3, r3, #4
 8016f78:	4413      	add	r3, r2
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d1f2      	bne.n	8016f66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	2b02      	cmp	r3, #2
 8016f84:	d101      	bne.n	8016f8a <inc_lock+0x8a>
 8016f86:	2300      	movs	r3, #0
 8016f88:	e040      	b.n	801700c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681a      	ldr	r2, [r3, #0]
 8016f8e:	4922      	ldr	r1, [pc, #136]	; (8017018 <inc_lock+0x118>)
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	011b      	lsls	r3, r3, #4
 8016f94:	440b      	add	r3, r1
 8016f96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	689a      	ldr	r2, [r3, #8]
 8016f9c:	491e      	ldr	r1, [pc, #120]	; (8017018 <inc_lock+0x118>)
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	011b      	lsls	r3, r3, #4
 8016fa2:	440b      	add	r3, r1
 8016fa4:	3304      	adds	r3, #4
 8016fa6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	695a      	ldr	r2, [r3, #20]
 8016fac:	491a      	ldr	r1, [pc, #104]	; (8017018 <inc_lock+0x118>)
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	011b      	lsls	r3, r3, #4
 8016fb2:	440b      	add	r3, r1
 8016fb4:	3308      	adds	r3, #8
 8016fb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016fb8:	4a17      	ldr	r2, [pc, #92]	; (8017018 <inc_lock+0x118>)
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	011b      	lsls	r3, r3, #4
 8016fbe:	4413      	add	r3, r2
 8016fc0:	330c      	adds	r3, #12
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d009      	beq.n	8016fe0 <inc_lock+0xe0>
 8016fcc:	4a12      	ldr	r2, [pc, #72]	; (8017018 <inc_lock+0x118>)
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	011b      	lsls	r3, r3, #4
 8016fd2:	4413      	add	r3, r2
 8016fd4:	330c      	adds	r3, #12
 8016fd6:	881b      	ldrh	r3, [r3, #0]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d001      	beq.n	8016fe0 <inc_lock+0xe0>
 8016fdc:	2300      	movs	r3, #0
 8016fde:	e015      	b.n	801700c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d108      	bne.n	8016ff8 <inc_lock+0xf8>
 8016fe6:	4a0c      	ldr	r2, [pc, #48]	; (8017018 <inc_lock+0x118>)
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	011b      	lsls	r3, r3, #4
 8016fec:	4413      	add	r3, r2
 8016fee:	330c      	adds	r3, #12
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	b29a      	uxth	r2, r3
 8016ff6:	e001      	b.n	8016ffc <inc_lock+0xfc>
 8016ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ffc:	4906      	ldr	r1, [pc, #24]	; (8017018 <inc_lock+0x118>)
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	011b      	lsls	r3, r3, #4
 8017002:	440b      	add	r3, r1
 8017004:	330c      	adds	r3, #12
 8017006:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	3301      	adds	r3, #1
}
 801700c:	4618      	mov	r0, r3
 801700e:	3714      	adds	r7, #20
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr
 8017018:	20001a90 	.word	0x20001a90

0801701c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801701c:	b480      	push	{r7}
 801701e:	b085      	sub	sp, #20
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	3b01      	subs	r3, #1
 8017028:	607b      	str	r3, [r7, #4]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2b01      	cmp	r3, #1
 801702e:	d825      	bhi.n	801707c <dec_lock+0x60>
		n = Files[i].ctr;
 8017030:	4a17      	ldr	r2, [pc, #92]	; (8017090 <dec_lock+0x74>)
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	011b      	lsls	r3, r3, #4
 8017036:	4413      	add	r3, r2
 8017038:	330c      	adds	r3, #12
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801703e:	89fb      	ldrh	r3, [r7, #14]
 8017040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017044:	d101      	bne.n	801704a <dec_lock+0x2e>
 8017046:	2300      	movs	r3, #0
 8017048:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801704a:	89fb      	ldrh	r3, [r7, #14]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d002      	beq.n	8017056 <dec_lock+0x3a>
 8017050:	89fb      	ldrh	r3, [r7, #14]
 8017052:	3b01      	subs	r3, #1
 8017054:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017056:	4a0e      	ldr	r2, [pc, #56]	; (8017090 <dec_lock+0x74>)
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	011b      	lsls	r3, r3, #4
 801705c:	4413      	add	r3, r2
 801705e:	330c      	adds	r3, #12
 8017060:	89fa      	ldrh	r2, [r7, #14]
 8017062:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017064:	89fb      	ldrh	r3, [r7, #14]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d105      	bne.n	8017076 <dec_lock+0x5a>
 801706a:	4a09      	ldr	r2, [pc, #36]	; (8017090 <dec_lock+0x74>)
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	011b      	lsls	r3, r3, #4
 8017070:	4413      	add	r3, r2
 8017072:	2200      	movs	r2, #0
 8017074:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017076:	2300      	movs	r3, #0
 8017078:	737b      	strb	r3, [r7, #13]
 801707a:	e001      	b.n	8017080 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801707c:	2302      	movs	r3, #2
 801707e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017080:	7b7b      	ldrb	r3, [r7, #13]
}
 8017082:	4618      	mov	r0, r3
 8017084:	3714      	adds	r7, #20
 8017086:	46bd      	mov	sp, r7
 8017088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708c:	4770      	bx	lr
 801708e:	bf00      	nop
 8017090:	20001a90 	.word	0x20001a90

08017094 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017094:	b480      	push	{r7}
 8017096:	b085      	sub	sp, #20
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801709c:	2300      	movs	r3, #0
 801709e:	60fb      	str	r3, [r7, #12]
 80170a0:	e010      	b.n	80170c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80170a2:	4a0d      	ldr	r2, [pc, #52]	; (80170d8 <clear_lock+0x44>)
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	011b      	lsls	r3, r3, #4
 80170a8:	4413      	add	r3, r2
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	687a      	ldr	r2, [r7, #4]
 80170ae:	429a      	cmp	r2, r3
 80170b0:	d105      	bne.n	80170be <clear_lock+0x2a>
 80170b2:	4a09      	ldr	r2, [pc, #36]	; (80170d8 <clear_lock+0x44>)
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	011b      	lsls	r3, r3, #4
 80170b8:	4413      	add	r3, r2
 80170ba:	2200      	movs	r2, #0
 80170bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	3301      	adds	r3, #1
 80170c2:	60fb      	str	r3, [r7, #12]
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d9eb      	bls.n	80170a2 <clear_lock+0xe>
	}
}
 80170ca:	bf00      	nop
 80170cc:	bf00      	nop
 80170ce:	3714      	adds	r7, #20
 80170d0:	46bd      	mov	sp, r7
 80170d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d6:	4770      	bx	lr
 80170d8:	20001a90 	.word	0x20001a90

080170dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80170e4:	2300      	movs	r3, #0
 80170e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	78db      	ldrb	r3, [r3, #3]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d034      	beq.n	801715a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	7858      	ldrb	r0, [r3, #1]
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017100:	2301      	movs	r3, #1
 8017102:	697a      	ldr	r2, [r7, #20]
 8017104:	f7ff fd40 	bl	8016b88 <disk_write>
 8017108:	4603      	mov	r3, r0
 801710a:	2b00      	cmp	r3, #0
 801710c:	d002      	beq.n	8017114 <sync_window+0x38>
			res = FR_DISK_ERR;
 801710e:	2301      	movs	r3, #1
 8017110:	73fb      	strb	r3, [r7, #15]
 8017112:	e022      	b.n	801715a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2200      	movs	r2, #0
 8017118:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801711e:	697a      	ldr	r2, [r7, #20]
 8017120:	1ad2      	subs	r2, r2, r3
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	69db      	ldr	r3, [r3, #28]
 8017126:	429a      	cmp	r2, r3
 8017128:	d217      	bcs.n	801715a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	789b      	ldrb	r3, [r3, #2]
 801712e:	613b      	str	r3, [r7, #16]
 8017130:	e010      	b.n	8017154 <sync_window+0x78>
					wsect += fs->fsize;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	69db      	ldr	r3, [r3, #28]
 8017136:	697a      	ldr	r2, [r7, #20]
 8017138:	4413      	add	r3, r2
 801713a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	7858      	ldrb	r0, [r3, #1]
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017146:	2301      	movs	r3, #1
 8017148:	697a      	ldr	r2, [r7, #20]
 801714a:	f7ff fd1d 	bl	8016b88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801714e:	693b      	ldr	r3, [r7, #16]
 8017150:	3b01      	subs	r3, #1
 8017152:	613b      	str	r3, [r7, #16]
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	2b01      	cmp	r3, #1
 8017158:	d8eb      	bhi.n	8017132 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801715a:	7bfb      	ldrb	r3, [r7, #15]
}
 801715c:	4618      	mov	r0, r3
 801715e:	3718      	adds	r7, #24
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}

08017164 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b084      	sub	sp, #16
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801716e:	2300      	movs	r3, #0
 8017170:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017176:	683a      	ldr	r2, [r7, #0]
 8017178:	429a      	cmp	r2, r3
 801717a:	d01b      	beq.n	80171b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f7ff ffad 	bl	80170dc <sync_window>
 8017182:	4603      	mov	r3, r0
 8017184:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017186:	7bfb      	ldrb	r3, [r7, #15]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d113      	bne.n	80171b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	7858      	ldrb	r0, [r3, #1]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017196:	2301      	movs	r3, #1
 8017198:	683a      	ldr	r2, [r7, #0]
 801719a:	f7ff fcd5 	bl	8016b48 <disk_read>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d004      	beq.n	80171ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80171a4:	f04f 33ff 	mov.w	r3, #4294967295
 80171a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80171aa:	2301      	movs	r3, #1
 80171ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	683a      	ldr	r2, [r7, #0]
 80171b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3710      	adds	r7, #16
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}
	...

080171c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f7ff ff87 	bl	80170dc <sync_window>
 80171ce:	4603      	mov	r3, r0
 80171d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80171d2:	7bfb      	ldrb	r3, [r7, #15]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d158      	bne.n	801728a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	781b      	ldrb	r3, [r3, #0]
 80171dc:	2b03      	cmp	r3, #3
 80171de:	d148      	bne.n	8017272 <sync_fs+0xb2>
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	791b      	ldrb	r3, [r3, #4]
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d144      	bne.n	8017272 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	3334      	adds	r3, #52	; 0x34
 80171ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80171f0:	2100      	movs	r1, #0
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7ff fda9 	bl	8016d4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	3334      	adds	r3, #52	; 0x34
 80171fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017200:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017204:	4618      	mov	r0, r3
 8017206:	f7ff fd38 	bl	8016c7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	3334      	adds	r3, #52	; 0x34
 801720e:	4921      	ldr	r1, [pc, #132]	; (8017294 <sync_fs+0xd4>)
 8017210:	4618      	mov	r0, r3
 8017212:	f7ff fd4d 	bl	8016cb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	3334      	adds	r3, #52	; 0x34
 801721a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801721e:	491e      	ldr	r1, [pc, #120]	; (8017298 <sync_fs+0xd8>)
 8017220:	4618      	mov	r0, r3
 8017222:	f7ff fd45 	bl	8016cb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	3334      	adds	r3, #52	; 0x34
 801722a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	695b      	ldr	r3, [r3, #20]
 8017232:	4619      	mov	r1, r3
 8017234:	4610      	mov	r0, r2
 8017236:	f7ff fd3b 	bl	8016cb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	3334      	adds	r3, #52	; 0x34
 801723e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	691b      	ldr	r3, [r3, #16]
 8017246:	4619      	mov	r1, r3
 8017248:	4610      	mov	r0, r2
 801724a:	f7ff fd31 	bl	8016cb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6a1b      	ldr	r3, [r3, #32]
 8017252:	1c5a      	adds	r2, r3, #1
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	7858      	ldrb	r0, [r3, #1]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017266:	2301      	movs	r3, #1
 8017268:	f7ff fc8e 	bl	8016b88 <disk_write>
			fs->fsi_flag = 0;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2200      	movs	r2, #0
 8017270:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	785b      	ldrb	r3, [r3, #1]
 8017276:	2200      	movs	r2, #0
 8017278:	2100      	movs	r1, #0
 801727a:	4618      	mov	r0, r3
 801727c:	f7ff fca4 	bl	8016bc8 <disk_ioctl>
 8017280:	4603      	mov	r3, r0
 8017282:	2b00      	cmp	r3, #0
 8017284:	d001      	beq.n	801728a <sync_fs+0xca>
 8017286:	2301      	movs	r3, #1
 8017288:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801728a:	7bfb      	ldrb	r3, [r7, #15]
}
 801728c:	4618      	mov	r0, r3
 801728e:	3710      	adds	r7, #16
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	41615252 	.word	0x41615252
 8017298:	61417272 	.word	0x61417272

0801729c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801729c:	b480      	push	{r7}
 801729e:	b083      	sub	sp, #12
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
 80172a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	3b02      	subs	r3, #2
 80172aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	699b      	ldr	r3, [r3, #24]
 80172b0:	3b02      	subs	r3, #2
 80172b2:	683a      	ldr	r2, [r7, #0]
 80172b4:	429a      	cmp	r2, r3
 80172b6:	d301      	bcc.n	80172bc <clust2sect+0x20>
 80172b8:	2300      	movs	r3, #0
 80172ba:	e008      	b.n	80172ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	895b      	ldrh	r3, [r3, #10]
 80172c0:	461a      	mov	r2, r3
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	fb03 f202 	mul.w	r2, r3, r2
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172cc:	4413      	add	r3, r2
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	370c      	adds	r7, #12
 80172d2:	46bd      	mov	sp, r7
 80172d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d8:	4770      	bx	lr

080172da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b086      	sub	sp, #24
 80172de:	af00      	add	r7, sp, #0
 80172e0:	6078      	str	r0, [r7, #4]
 80172e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	2b01      	cmp	r3, #1
 80172ee:	d904      	bls.n	80172fa <get_fat+0x20>
 80172f0:	693b      	ldr	r3, [r7, #16]
 80172f2:	699b      	ldr	r3, [r3, #24]
 80172f4:	683a      	ldr	r2, [r7, #0]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d302      	bcc.n	8017300 <get_fat+0x26>
		val = 1;	/* Internal error */
 80172fa:	2301      	movs	r3, #1
 80172fc:	617b      	str	r3, [r7, #20]
 80172fe:	e08f      	b.n	8017420 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017300:	f04f 33ff 	mov.w	r3, #4294967295
 8017304:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	2b03      	cmp	r3, #3
 801730c:	d062      	beq.n	80173d4 <get_fat+0xfa>
 801730e:	2b03      	cmp	r3, #3
 8017310:	dc7c      	bgt.n	801740c <get_fat+0x132>
 8017312:	2b01      	cmp	r3, #1
 8017314:	d002      	beq.n	801731c <get_fat+0x42>
 8017316:	2b02      	cmp	r3, #2
 8017318:	d042      	beq.n	80173a0 <get_fat+0xc6>
 801731a:	e077      	b.n	801740c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	60fb      	str	r3, [r7, #12]
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	085b      	lsrs	r3, r3, #1
 8017324:	68fa      	ldr	r2, [r7, #12]
 8017326:	4413      	add	r3, r2
 8017328:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	0a5b      	lsrs	r3, r3, #9
 8017332:	4413      	add	r3, r2
 8017334:	4619      	mov	r1, r3
 8017336:	6938      	ldr	r0, [r7, #16]
 8017338:	f7ff ff14 	bl	8017164 <move_window>
 801733c:	4603      	mov	r3, r0
 801733e:	2b00      	cmp	r3, #0
 8017340:	d167      	bne.n	8017412 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	1c5a      	adds	r2, r3, #1
 8017346:	60fa      	str	r2, [r7, #12]
 8017348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801734c:	693a      	ldr	r2, [r7, #16]
 801734e:	4413      	add	r3, r2
 8017350:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017354:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	0a5b      	lsrs	r3, r3, #9
 801735e:	4413      	add	r3, r2
 8017360:	4619      	mov	r1, r3
 8017362:	6938      	ldr	r0, [r7, #16]
 8017364:	f7ff fefe 	bl	8017164 <move_window>
 8017368:	4603      	mov	r3, r0
 801736a:	2b00      	cmp	r3, #0
 801736c:	d153      	bne.n	8017416 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017374:	693a      	ldr	r2, [r7, #16]
 8017376:	4413      	add	r3, r2
 8017378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801737c:	021b      	lsls	r3, r3, #8
 801737e:	461a      	mov	r2, r3
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	4313      	orrs	r3, r2
 8017384:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	f003 0301 	and.w	r3, r3, #1
 801738c:	2b00      	cmp	r3, #0
 801738e:	d002      	beq.n	8017396 <get_fat+0xbc>
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	091b      	lsrs	r3, r3, #4
 8017394:	e002      	b.n	801739c <get_fat+0xc2>
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801739c:	617b      	str	r3, [r7, #20]
			break;
 801739e:	e03f      	b.n	8017420 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80173a0:	693b      	ldr	r3, [r7, #16]
 80173a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	0a1b      	lsrs	r3, r3, #8
 80173a8:	4413      	add	r3, r2
 80173aa:	4619      	mov	r1, r3
 80173ac:	6938      	ldr	r0, [r7, #16]
 80173ae:	f7ff fed9 	bl	8017164 <move_window>
 80173b2:	4603      	mov	r3, r0
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d130      	bne.n	801741a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80173b8:	693b      	ldr	r3, [r7, #16]
 80173ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80173be:	683b      	ldr	r3, [r7, #0]
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80173c6:	4413      	add	r3, r2
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7ff fc1b 	bl	8016c04 <ld_word>
 80173ce:	4603      	mov	r3, r0
 80173d0:	617b      	str	r3, [r7, #20]
			break;
 80173d2:	e025      	b.n	8017420 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	09db      	lsrs	r3, r3, #7
 80173dc:	4413      	add	r3, r2
 80173de:	4619      	mov	r1, r3
 80173e0:	6938      	ldr	r0, [r7, #16]
 80173e2:	f7ff febf 	bl	8017164 <move_window>
 80173e6:	4603      	mov	r3, r0
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d118      	bne.n	801741e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80173ec:	693b      	ldr	r3, [r7, #16]
 80173ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80173fa:	4413      	add	r3, r2
 80173fc:	4618      	mov	r0, r3
 80173fe:	f7ff fc19 	bl	8016c34 <ld_dword>
 8017402:	4603      	mov	r3, r0
 8017404:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017408:	617b      	str	r3, [r7, #20]
			break;
 801740a:	e009      	b.n	8017420 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801740c:	2301      	movs	r3, #1
 801740e:	617b      	str	r3, [r7, #20]
 8017410:	e006      	b.n	8017420 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017412:	bf00      	nop
 8017414:	e004      	b.n	8017420 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017416:	bf00      	nop
 8017418:	e002      	b.n	8017420 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801741a:	bf00      	nop
 801741c:	e000      	b.n	8017420 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801741e:	bf00      	nop
		}
	}

	return val;
 8017420:	697b      	ldr	r3, [r7, #20]
}
 8017422:	4618      	mov	r0, r3
 8017424:	3718      	adds	r7, #24
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}

0801742a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801742a:	b590      	push	{r4, r7, lr}
 801742c:	b089      	sub	sp, #36	; 0x24
 801742e:	af00      	add	r7, sp, #0
 8017430:	60f8      	str	r0, [r7, #12]
 8017432:	60b9      	str	r1, [r7, #8]
 8017434:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017436:	2302      	movs	r3, #2
 8017438:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	2b01      	cmp	r3, #1
 801743e:	f240 80d2 	bls.w	80175e6 <put_fat+0x1bc>
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	699b      	ldr	r3, [r3, #24]
 8017446:	68ba      	ldr	r2, [r7, #8]
 8017448:	429a      	cmp	r2, r3
 801744a:	f080 80cc 	bcs.w	80175e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	2b03      	cmp	r3, #3
 8017454:	f000 8096 	beq.w	8017584 <put_fat+0x15a>
 8017458:	2b03      	cmp	r3, #3
 801745a:	f300 80cd 	bgt.w	80175f8 <put_fat+0x1ce>
 801745e:	2b01      	cmp	r3, #1
 8017460:	d002      	beq.n	8017468 <put_fat+0x3e>
 8017462:	2b02      	cmp	r3, #2
 8017464:	d06e      	beq.n	8017544 <put_fat+0x11a>
 8017466:	e0c7      	b.n	80175f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017468:	68bb      	ldr	r3, [r7, #8]
 801746a:	61bb      	str	r3, [r7, #24]
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	085b      	lsrs	r3, r3, #1
 8017470:	69ba      	ldr	r2, [r7, #24]
 8017472:	4413      	add	r3, r2
 8017474:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801747a:	69bb      	ldr	r3, [r7, #24]
 801747c:	0a5b      	lsrs	r3, r3, #9
 801747e:	4413      	add	r3, r2
 8017480:	4619      	mov	r1, r3
 8017482:	68f8      	ldr	r0, [r7, #12]
 8017484:	f7ff fe6e 	bl	8017164 <move_window>
 8017488:	4603      	mov	r3, r0
 801748a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801748c:	7ffb      	ldrb	r3, [r7, #31]
 801748e:	2b00      	cmp	r3, #0
 8017490:	f040 80ab 	bne.w	80175ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801749a:	69bb      	ldr	r3, [r7, #24]
 801749c:	1c59      	adds	r1, r3, #1
 801749e:	61b9      	str	r1, [r7, #24]
 80174a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174a4:	4413      	add	r3, r2
 80174a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	f003 0301 	and.w	r3, r3, #1
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d00d      	beq.n	80174ce <put_fat+0xa4>
 80174b2:	697b      	ldr	r3, [r7, #20]
 80174b4:	781b      	ldrb	r3, [r3, #0]
 80174b6:	b25b      	sxtb	r3, r3
 80174b8:	f003 030f 	and.w	r3, r3, #15
 80174bc:	b25a      	sxtb	r2, r3
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	b2db      	uxtb	r3, r3
 80174c2:	011b      	lsls	r3, r3, #4
 80174c4:	b25b      	sxtb	r3, r3
 80174c6:	4313      	orrs	r3, r2
 80174c8:	b25b      	sxtb	r3, r3
 80174ca:	b2db      	uxtb	r3, r3
 80174cc:	e001      	b.n	80174d2 <put_fat+0xa8>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	b2db      	uxtb	r3, r3
 80174d2:	697a      	ldr	r2, [r7, #20]
 80174d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	2201      	movs	r2, #1
 80174da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80174e0:	69bb      	ldr	r3, [r7, #24]
 80174e2:	0a5b      	lsrs	r3, r3, #9
 80174e4:	4413      	add	r3, r2
 80174e6:	4619      	mov	r1, r3
 80174e8:	68f8      	ldr	r0, [r7, #12]
 80174ea:	f7ff fe3b 	bl	8017164 <move_window>
 80174ee:	4603      	mov	r3, r0
 80174f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80174f2:	7ffb      	ldrb	r3, [r7, #31]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d17a      	bne.n	80175ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80174fe:	69bb      	ldr	r3, [r7, #24]
 8017500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017504:	4413      	add	r3, r2
 8017506:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	f003 0301 	and.w	r3, r3, #1
 801750e:	2b00      	cmp	r3, #0
 8017510:	d003      	beq.n	801751a <put_fat+0xf0>
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	091b      	lsrs	r3, r3, #4
 8017516:	b2db      	uxtb	r3, r3
 8017518:	e00e      	b.n	8017538 <put_fat+0x10e>
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	b25b      	sxtb	r3, r3
 8017520:	f023 030f 	bic.w	r3, r3, #15
 8017524:	b25a      	sxtb	r2, r3
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	0a1b      	lsrs	r3, r3, #8
 801752a:	b25b      	sxtb	r3, r3
 801752c:	f003 030f 	and.w	r3, r3, #15
 8017530:	b25b      	sxtb	r3, r3
 8017532:	4313      	orrs	r3, r2
 8017534:	b25b      	sxtb	r3, r3
 8017536:	b2db      	uxtb	r3, r3
 8017538:	697a      	ldr	r2, [r7, #20]
 801753a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	2201      	movs	r2, #1
 8017540:	70da      	strb	r2, [r3, #3]
			break;
 8017542:	e059      	b.n	80175f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	0a1b      	lsrs	r3, r3, #8
 801754c:	4413      	add	r3, r2
 801754e:	4619      	mov	r1, r3
 8017550:	68f8      	ldr	r0, [r7, #12]
 8017552:	f7ff fe07 	bl	8017164 <move_window>
 8017556:	4603      	mov	r3, r0
 8017558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801755a:	7ffb      	ldrb	r3, [r7, #31]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d148      	bne.n	80175f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	005b      	lsls	r3, r3, #1
 801756a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801756e:	4413      	add	r3, r2
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	b292      	uxth	r2, r2
 8017574:	4611      	mov	r1, r2
 8017576:	4618      	mov	r0, r3
 8017578:	f7ff fb7f 	bl	8016c7a <st_word>
			fs->wflag = 1;
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	2201      	movs	r2, #1
 8017580:	70da      	strb	r2, [r3, #3]
			break;
 8017582:	e039      	b.n	80175f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	09db      	lsrs	r3, r3, #7
 801758c:	4413      	add	r3, r2
 801758e:	4619      	mov	r1, r3
 8017590:	68f8      	ldr	r0, [r7, #12]
 8017592:	f7ff fde7 	bl	8017164 <move_window>
 8017596:	4603      	mov	r3, r0
 8017598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801759a:	7ffb      	ldrb	r3, [r7, #31]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d12a      	bne.n	80175f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80175b4:	4413      	add	r3, r2
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7ff fb3c 	bl	8016c34 <ld_dword>
 80175bc:	4603      	mov	r3, r0
 80175be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80175c2:	4323      	orrs	r3, r4
 80175c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80175cc:	68bb      	ldr	r3, [r7, #8]
 80175ce:	009b      	lsls	r3, r3, #2
 80175d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80175d4:	4413      	add	r3, r2
 80175d6:	6879      	ldr	r1, [r7, #4]
 80175d8:	4618      	mov	r0, r3
 80175da:	f7ff fb69 	bl	8016cb0 <st_dword>
			fs->wflag = 1;
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	2201      	movs	r2, #1
 80175e2:	70da      	strb	r2, [r3, #3]
			break;
 80175e4:	e008      	b.n	80175f8 <put_fat+0x1ce>
		}
	}
 80175e6:	bf00      	nop
 80175e8:	e006      	b.n	80175f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80175ea:	bf00      	nop
 80175ec:	e004      	b.n	80175f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80175ee:	bf00      	nop
 80175f0:	e002      	b.n	80175f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80175f2:	bf00      	nop
 80175f4:	e000      	b.n	80175f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80175f6:	bf00      	nop
	return res;
 80175f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	3724      	adds	r7, #36	; 0x24
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd90      	pop	{r4, r7, pc}

08017602 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017602:	b580      	push	{r7, lr}
 8017604:	b088      	sub	sp, #32
 8017606:	af00      	add	r7, sp, #0
 8017608:	60f8      	str	r0, [r7, #12]
 801760a:	60b9      	str	r1, [r7, #8]
 801760c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801760e:	2300      	movs	r3, #0
 8017610:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	2b01      	cmp	r3, #1
 801761c:	d904      	bls.n	8017628 <remove_chain+0x26>
 801761e:	69bb      	ldr	r3, [r7, #24]
 8017620:	699b      	ldr	r3, [r3, #24]
 8017622:	68ba      	ldr	r2, [r7, #8]
 8017624:	429a      	cmp	r2, r3
 8017626:	d301      	bcc.n	801762c <remove_chain+0x2a>
 8017628:	2302      	movs	r3, #2
 801762a:	e04b      	b.n	80176c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d00c      	beq.n	801764c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017632:	f04f 32ff 	mov.w	r2, #4294967295
 8017636:	6879      	ldr	r1, [r7, #4]
 8017638:	69b8      	ldr	r0, [r7, #24]
 801763a:	f7ff fef6 	bl	801742a <put_fat>
 801763e:	4603      	mov	r3, r0
 8017640:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017642:	7ffb      	ldrb	r3, [r7, #31]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d001      	beq.n	801764c <remove_chain+0x4a>
 8017648:	7ffb      	ldrb	r3, [r7, #31]
 801764a:	e03b      	b.n	80176c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801764c:	68b9      	ldr	r1, [r7, #8]
 801764e:	68f8      	ldr	r0, [r7, #12]
 8017650:	f7ff fe43 	bl	80172da <get_fat>
 8017654:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d031      	beq.n	80176c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801765c:	697b      	ldr	r3, [r7, #20]
 801765e:	2b01      	cmp	r3, #1
 8017660:	d101      	bne.n	8017666 <remove_chain+0x64>
 8017662:	2302      	movs	r3, #2
 8017664:	e02e      	b.n	80176c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801766c:	d101      	bne.n	8017672 <remove_chain+0x70>
 801766e:	2301      	movs	r3, #1
 8017670:	e028      	b.n	80176c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017672:	2200      	movs	r2, #0
 8017674:	68b9      	ldr	r1, [r7, #8]
 8017676:	69b8      	ldr	r0, [r7, #24]
 8017678:	f7ff fed7 	bl	801742a <put_fat>
 801767c:	4603      	mov	r3, r0
 801767e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017680:	7ffb      	ldrb	r3, [r7, #31]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d001      	beq.n	801768a <remove_chain+0x88>
 8017686:	7ffb      	ldrb	r3, [r7, #31]
 8017688:	e01c      	b.n	80176c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801768a:	69bb      	ldr	r3, [r7, #24]
 801768c:	695a      	ldr	r2, [r3, #20]
 801768e:	69bb      	ldr	r3, [r7, #24]
 8017690:	699b      	ldr	r3, [r3, #24]
 8017692:	3b02      	subs	r3, #2
 8017694:	429a      	cmp	r2, r3
 8017696:	d20b      	bcs.n	80176b0 <remove_chain+0xae>
			fs->free_clst++;
 8017698:	69bb      	ldr	r3, [r7, #24]
 801769a:	695b      	ldr	r3, [r3, #20]
 801769c:	1c5a      	adds	r2, r3, #1
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80176a2:	69bb      	ldr	r3, [r7, #24]
 80176a4:	791b      	ldrb	r3, [r3, #4]
 80176a6:	f043 0301 	orr.w	r3, r3, #1
 80176aa:	b2da      	uxtb	r2, r3
 80176ac:	69bb      	ldr	r3, [r7, #24]
 80176ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80176b4:	69bb      	ldr	r3, [r7, #24]
 80176b6:	699b      	ldr	r3, [r3, #24]
 80176b8:	68ba      	ldr	r2, [r7, #8]
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d3c6      	bcc.n	801764c <remove_chain+0x4a>
 80176be:	e000      	b.n	80176c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80176c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80176c2:	2300      	movs	r3, #0
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3720      	adds	r7, #32
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b088      	sub	sp, #32
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d10d      	bne.n	80176fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	691b      	ldr	r3, [r3, #16]
 80176e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80176e8:	69bb      	ldr	r3, [r7, #24]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d004      	beq.n	80176f8 <create_chain+0x2c>
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	699b      	ldr	r3, [r3, #24]
 80176f2:	69ba      	ldr	r2, [r7, #24]
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d31b      	bcc.n	8017730 <create_chain+0x64>
 80176f8:	2301      	movs	r3, #1
 80176fa:	61bb      	str	r3, [r7, #24]
 80176fc:	e018      	b.n	8017730 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80176fe:	6839      	ldr	r1, [r7, #0]
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7ff fdea 	bl	80172da <get_fat>
 8017706:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	2b01      	cmp	r3, #1
 801770c:	d801      	bhi.n	8017712 <create_chain+0x46>
 801770e:	2301      	movs	r3, #1
 8017710:	e070      	b.n	80177f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017718:	d101      	bne.n	801771e <create_chain+0x52>
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	e06a      	b.n	80177f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801771e:	693b      	ldr	r3, [r7, #16]
 8017720:	699b      	ldr	r3, [r3, #24]
 8017722:	68fa      	ldr	r2, [r7, #12]
 8017724:	429a      	cmp	r2, r3
 8017726:	d201      	bcs.n	801772c <create_chain+0x60>
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	e063      	b.n	80177f4 <create_chain+0x128>
		scl = clst;
 801772c:	683b      	ldr	r3, [r7, #0]
 801772e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017730:	69bb      	ldr	r3, [r7, #24]
 8017732:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017734:	69fb      	ldr	r3, [r7, #28]
 8017736:	3301      	adds	r3, #1
 8017738:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	699b      	ldr	r3, [r3, #24]
 801773e:	69fa      	ldr	r2, [r7, #28]
 8017740:	429a      	cmp	r2, r3
 8017742:	d307      	bcc.n	8017754 <create_chain+0x88>
				ncl = 2;
 8017744:	2302      	movs	r3, #2
 8017746:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017748:	69fa      	ldr	r2, [r7, #28]
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	429a      	cmp	r2, r3
 801774e:	d901      	bls.n	8017754 <create_chain+0x88>
 8017750:	2300      	movs	r3, #0
 8017752:	e04f      	b.n	80177f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017754:	69f9      	ldr	r1, [r7, #28]
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f7ff fdbf 	bl	80172da <get_fat>
 801775c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d00e      	beq.n	8017782 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d003      	beq.n	8017772 <create_chain+0xa6>
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017770:	d101      	bne.n	8017776 <create_chain+0xaa>
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	e03e      	b.n	80177f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017776:	69fa      	ldr	r2, [r7, #28]
 8017778:	69bb      	ldr	r3, [r7, #24]
 801777a:	429a      	cmp	r2, r3
 801777c:	d1da      	bne.n	8017734 <create_chain+0x68>
 801777e:	2300      	movs	r3, #0
 8017780:	e038      	b.n	80177f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017782:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017784:	f04f 32ff 	mov.w	r2, #4294967295
 8017788:	69f9      	ldr	r1, [r7, #28]
 801778a:	6938      	ldr	r0, [r7, #16]
 801778c:	f7ff fe4d 	bl	801742a <put_fat>
 8017790:	4603      	mov	r3, r0
 8017792:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017794:	7dfb      	ldrb	r3, [r7, #23]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d109      	bne.n	80177ae <create_chain+0xe2>
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d006      	beq.n	80177ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80177a0:	69fa      	ldr	r2, [r7, #28]
 80177a2:	6839      	ldr	r1, [r7, #0]
 80177a4:	6938      	ldr	r0, [r7, #16]
 80177a6:	f7ff fe40 	bl	801742a <put_fat>
 80177aa:	4603      	mov	r3, r0
 80177ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80177ae:	7dfb      	ldrb	r3, [r7, #23]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d116      	bne.n	80177e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	69fa      	ldr	r2, [r7, #28]
 80177b8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	695a      	ldr	r2, [r3, #20]
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	699b      	ldr	r3, [r3, #24]
 80177c2:	3b02      	subs	r3, #2
 80177c4:	429a      	cmp	r2, r3
 80177c6:	d804      	bhi.n	80177d2 <create_chain+0x106>
 80177c8:	693b      	ldr	r3, [r7, #16]
 80177ca:	695b      	ldr	r3, [r3, #20]
 80177cc:	1e5a      	subs	r2, r3, #1
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80177d2:	693b      	ldr	r3, [r7, #16]
 80177d4:	791b      	ldrb	r3, [r3, #4]
 80177d6:	f043 0301 	orr.w	r3, r3, #1
 80177da:	b2da      	uxtb	r2, r3
 80177dc:	693b      	ldr	r3, [r7, #16]
 80177de:	711a      	strb	r2, [r3, #4]
 80177e0:	e007      	b.n	80177f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80177e2:	7dfb      	ldrb	r3, [r7, #23]
 80177e4:	2b01      	cmp	r3, #1
 80177e6:	d102      	bne.n	80177ee <create_chain+0x122>
 80177e8:	f04f 33ff 	mov.w	r3, #4294967295
 80177ec:	e000      	b.n	80177f0 <create_chain+0x124>
 80177ee:	2301      	movs	r3, #1
 80177f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80177f2:	69fb      	ldr	r3, [r7, #28]
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3720      	adds	r7, #32
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}

080177fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80177fc:	b480      	push	{r7}
 80177fe:	b087      	sub	sp, #28
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017810:	3304      	adds	r3, #4
 8017812:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	0a5b      	lsrs	r3, r3, #9
 8017818:	68fa      	ldr	r2, [r7, #12]
 801781a:	8952      	ldrh	r2, [r2, #10]
 801781c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017820:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	1d1a      	adds	r2, r3, #4
 8017826:	613a      	str	r2, [r7, #16]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d101      	bne.n	8017836 <clmt_clust+0x3a>
 8017832:	2300      	movs	r3, #0
 8017834:	e010      	b.n	8017858 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017836:	697a      	ldr	r2, [r7, #20]
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	429a      	cmp	r2, r3
 801783c:	d307      	bcc.n	801784e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801783e:	697a      	ldr	r2, [r7, #20]
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	1ad3      	subs	r3, r2, r3
 8017844:	617b      	str	r3, [r7, #20]
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	3304      	adds	r3, #4
 801784a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801784c:	e7e9      	b.n	8017822 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801784e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	697b      	ldr	r3, [r7, #20]
 8017856:	4413      	add	r3, r2
}
 8017858:	4618      	mov	r0, r3
 801785a:	371c      	adds	r7, #28
 801785c:	46bd      	mov	sp, r7
 801785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017862:	4770      	bx	lr

08017864 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b086      	sub	sp, #24
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
 801786c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801787a:	d204      	bcs.n	8017886 <dir_sdi+0x22>
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	f003 031f 	and.w	r3, r3, #31
 8017882:	2b00      	cmp	r3, #0
 8017884:	d001      	beq.n	801788a <dir_sdi+0x26>
		return FR_INT_ERR;
 8017886:	2302      	movs	r3, #2
 8017888:	e063      	b.n	8017952 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	683a      	ldr	r2, [r7, #0]
 801788e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	689b      	ldr	r3, [r3, #8]
 8017894:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d106      	bne.n	80178aa <dir_sdi+0x46>
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	2b02      	cmp	r3, #2
 80178a2:	d902      	bls.n	80178aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d10c      	bne.n	80178ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	095b      	lsrs	r3, r3, #5
 80178b4:	693a      	ldr	r2, [r7, #16]
 80178b6:	8912      	ldrh	r2, [r2, #8]
 80178b8:	4293      	cmp	r3, r2
 80178ba:	d301      	bcc.n	80178c0 <dir_sdi+0x5c>
 80178bc:	2302      	movs	r3, #2
 80178be:	e048      	b.n	8017952 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	61da      	str	r2, [r3, #28]
 80178c8:	e029      	b.n	801791e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80178ca:	693b      	ldr	r3, [r7, #16]
 80178cc:	895b      	ldrh	r3, [r3, #10]
 80178ce:	025b      	lsls	r3, r3, #9
 80178d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80178d2:	e019      	b.n	8017908 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6979      	ldr	r1, [r7, #20]
 80178d8:	4618      	mov	r0, r3
 80178da:	f7ff fcfe 	bl	80172da <get_fat>
 80178de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80178e0:	697b      	ldr	r3, [r7, #20]
 80178e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178e6:	d101      	bne.n	80178ec <dir_sdi+0x88>
 80178e8:	2301      	movs	r3, #1
 80178ea:	e032      	b.n	8017952 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80178ec:	697b      	ldr	r3, [r7, #20]
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d904      	bls.n	80178fc <dir_sdi+0x98>
 80178f2:	693b      	ldr	r3, [r7, #16]
 80178f4:	699b      	ldr	r3, [r3, #24]
 80178f6:	697a      	ldr	r2, [r7, #20]
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d301      	bcc.n	8017900 <dir_sdi+0x9c>
 80178fc:	2302      	movs	r3, #2
 80178fe:	e028      	b.n	8017952 <dir_sdi+0xee>
			ofs -= csz;
 8017900:	683a      	ldr	r2, [r7, #0]
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	1ad3      	subs	r3, r2, r3
 8017906:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017908:	683a      	ldr	r2, [r7, #0]
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	429a      	cmp	r2, r3
 801790e:	d2e1      	bcs.n	80178d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017910:	6979      	ldr	r1, [r7, #20]
 8017912:	6938      	ldr	r0, [r7, #16]
 8017914:	f7ff fcc2 	bl	801729c <clust2sect>
 8017918:	4602      	mov	r2, r0
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	697a      	ldr	r2, [r7, #20]
 8017922:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	69db      	ldr	r3, [r3, #28]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d101      	bne.n	8017930 <dir_sdi+0xcc>
 801792c:	2302      	movs	r3, #2
 801792e:	e010      	b.n	8017952 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	69da      	ldr	r2, [r3, #28]
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	0a5b      	lsrs	r3, r3, #9
 8017938:	441a      	add	r2, r3
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801794a:	441a      	add	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017950:	2300      	movs	r3, #0
}
 8017952:	4618      	mov	r0, r3
 8017954:	3718      	adds	r7, #24
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}

0801795a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801795a:	b580      	push	{r7, lr}
 801795c:	b086      	sub	sp, #24
 801795e:	af00      	add	r7, sp, #0
 8017960:	6078      	str	r0, [r7, #4]
 8017962:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	695b      	ldr	r3, [r3, #20]
 801796e:	3320      	adds	r3, #32
 8017970:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	69db      	ldr	r3, [r3, #28]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d003      	beq.n	8017982 <dir_next+0x28>
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017980:	d301      	bcc.n	8017986 <dir_next+0x2c>
 8017982:	2304      	movs	r3, #4
 8017984:	e0aa      	b.n	8017adc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801798c:	2b00      	cmp	r3, #0
 801798e:	f040 8098 	bne.w	8017ac2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	69db      	ldr	r3, [r3, #28]
 8017996:	1c5a      	adds	r2, r3, #1
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	699b      	ldr	r3, [r3, #24]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d10b      	bne.n	80179bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	095b      	lsrs	r3, r3, #5
 80179a8:	68fa      	ldr	r2, [r7, #12]
 80179aa:	8912      	ldrh	r2, [r2, #8]
 80179ac:	4293      	cmp	r3, r2
 80179ae:	f0c0 8088 	bcc.w	8017ac2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2200      	movs	r2, #0
 80179b6:	61da      	str	r2, [r3, #28]
 80179b8:	2304      	movs	r3, #4
 80179ba:	e08f      	b.n	8017adc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	0a5b      	lsrs	r3, r3, #9
 80179c0:	68fa      	ldr	r2, [r7, #12]
 80179c2:	8952      	ldrh	r2, [r2, #10]
 80179c4:	3a01      	subs	r2, #1
 80179c6:	4013      	ands	r3, r2
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d17a      	bne.n	8017ac2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80179cc:	687a      	ldr	r2, [r7, #4]
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	699b      	ldr	r3, [r3, #24]
 80179d2:	4619      	mov	r1, r3
 80179d4:	4610      	mov	r0, r2
 80179d6:	f7ff fc80 	bl	80172da <get_fat>
 80179da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	2b01      	cmp	r3, #1
 80179e0:	d801      	bhi.n	80179e6 <dir_next+0x8c>
 80179e2:	2302      	movs	r3, #2
 80179e4:	e07a      	b.n	8017adc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80179e6:	697b      	ldr	r3, [r7, #20]
 80179e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179ec:	d101      	bne.n	80179f2 <dir_next+0x98>
 80179ee:	2301      	movs	r3, #1
 80179f0:	e074      	b.n	8017adc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	699b      	ldr	r3, [r3, #24]
 80179f6:	697a      	ldr	r2, [r7, #20]
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d358      	bcc.n	8017aae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d104      	bne.n	8017a0c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	61da      	str	r2, [r3, #28]
 8017a08:	2304      	movs	r3, #4
 8017a0a:	e067      	b.n	8017adc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017a0c:	687a      	ldr	r2, [r7, #4]
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	699b      	ldr	r3, [r3, #24]
 8017a12:	4619      	mov	r1, r3
 8017a14:	4610      	mov	r0, r2
 8017a16:	f7ff fe59 	bl	80176cc <create_chain>
 8017a1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d101      	bne.n	8017a26 <dir_next+0xcc>
 8017a22:	2307      	movs	r3, #7
 8017a24:	e05a      	b.n	8017adc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	2b01      	cmp	r3, #1
 8017a2a:	d101      	bne.n	8017a30 <dir_next+0xd6>
 8017a2c:	2302      	movs	r3, #2
 8017a2e:	e055      	b.n	8017adc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a36:	d101      	bne.n	8017a3c <dir_next+0xe2>
 8017a38:	2301      	movs	r3, #1
 8017a3a:	e04f      	b.n	8017adc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017a3c:	68f8      	ldr	r0, [r7, #12]
 8017a3e:	f7ff fb4d 	bl	80170dc <sync_window>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d001      	beq.n	8017a4c <dir_next+0xf2>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	e047      	b.n	8017adc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	3334      	adds	r3, #52	; 0x34
 8017a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a54:	2100      	movs	r1, #0
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7ff f977 	bl	8016d4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	613b      	str	r3, [r7, #16]
 8017a60:	6979      	ldr	r1, [r7, #20]
 8017a62:	68f8      	ldr	r0, [r7, #12]
 8017a64:	f7ff fc1a 	bl	801729c <clust2sect>
 8017a68:	4602      	mov	r2, r0
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8017a6e:	e012      	b.n	8017a96 <dir_next+0x13c>
						fs->wflag = 1;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	2201      	movs	r2, #1
 8017a74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017a76:	68f8      	ldr	r0, [r7, #12]
 8017a78:	f7ff fb30 	bl	80170dc <sync_window>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d001      	beq.n	8017a86 <dir_next+0x12c>
 8017a82:	2301      	movs	r3, #1
 8017a84:	e02a      	b.n	8017adc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	613b      	str	r3, [r7, #16]
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a90:	1c5a      	adds	r2, r3, #1
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	631a      	str	r2, [r3, #48]	; 0x30
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	895b      	ldrh	r3, [r3, #10]
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	693b      	ldr	r3, [r7, #16]
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	d3e6      	bcc.n	8017a70 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	1ad2      	subs	r2, r2, r3
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	697a      	ldr	r2, [r7, #20]
 8017ab2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017ab4:	6979      	ldr	r1, [r7, #20]
 8017ab6:	68f8      	ldr	r0, [r7, #12]
 8017ab8:	f7ff fbf0 	bl	801729c <clust2sect>
 8017abc:	4602      	mov	r2, r0
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	68ba      	ldr	r2, [r7, #8]
 8017ac6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017ace:	68bb      	ldr	r3, [r7, #8]
 8017ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ad4:	441a      	add	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017ada:	2300      	movs	r3, #0
}
 8017adc:	4618      	mov	r0, r3
 8017ade:	3718      	adds	r7, #24
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}

08017ae4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b086      	sub	sp, #24
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017af4:	2100      	movs	r1, #0
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f7ff feb4 	bl	8017864 <dir_sdi>
 8017afc:	4603      	mov	r3, r0
 8017afe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017b00:	7dfb      	ldrb	r3, [r7, #23]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d12b      	bne.n	8017b5e <dir_alloc+0x7a>
		n = 0;
 8017b06:	2300      	movs	r3, #0
 8017b08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	69db      	ldr	r3, [r3, #28]
 8017b0e:	4619      	mov	r1, r3
 8017b10:	68f8      	ldr	r0, [r7, #12]
 8017b12:	f7ff fb27 	bl	8017164 <move_window>
 8017b16:	4603      	mov	r3, r0
 8017b18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017b1a:	7dfb      	ldrb	r3, [r7, #23]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d11d      	bne.n	8017b5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6a1b      	ldr	r3, [r3, #32]
 8017b24:	781b      	ldrb	r3, [r3, #0]
 8017b26:	2be5      	cmp	r3, #229	; 0xe5
 8017b28:	d004      	beq.n	8017b34 <dir_alloc+0x50>
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	6a1b      	ldr	r3, [r3, #32]
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d107      	bne.n	8017b44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	3301      	adds	r3, #1
 8017b38:	613b      	str	r3, [r7, #16]
 8017b3a:	693a      	ldr	r2, [r7, #16]
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d102      	bne.n	8017b48 <dir_alloc+0x64>
 8017b42:	e00c      	b.n	8017b5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017b44:	2300      	movs	r3, #0
 8017b46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017b48:	2101      	movs	r1, #1
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f7ff ff05 	bl	801795a <dir_next>
 8017b50:	4603      	mov	r3, r0
 8017b52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017b54:	7dfb      	ldrb	r3, [r7, #23]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d0d7      	beq.n	8017b0a <dir_alloc+0x26>
 8017b5a:	e000      	b.n	8017b5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017b5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017b5e:	7dfb      	ldrb	r3, [r7, #23]
 8017b60:	2b04      	cmp	r3, #4
 8017b62:	d101      	bne.n	8017b68 <dir_alloc+0x84>
 8017b64:	2307      	movs	r3, #7
 8017b66:	75fb      	strb	r3, [r7, #23]
	return res;
 8017b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3718      	adds	r7, #24
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}

08017b72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017b72:	b580      	push	{r7, lr}
 8017b74:	b084      	sub	sp, #16
 8017b76:	af00      	add	r7, sp, #0
 8017b78:	6078      	str	r0, [r7, #4]
 8017b7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	331a      	adds	r3, #26
 8017b80:	4618      	mov	r0, r3
 8017b82:	f7ff f83f 	bl	8016c04 <ld_word>
 8017b86:	4603      	mov	r3, r0
 8017b88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	781b      	ldrb	r3, [r3, #0]
 8017b8e:	2b03      	cmp	r3, #3
 8017b90:	d109      	bne.n	8017ba6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	3314      	adds	r3, #20
 8017b96:	4618      	mov	r0, r3
 8017b98:	f7ff f834 	bl	8016c04 <ld_word>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	041b      	lsls	r3, r3, #16
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	4313      	orrs	r3, r2
 8017ba4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3710      	adds	r7, #16
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b084      	sub	sp, #16
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017bbc:	68bb      	ldr	r3, [r7, #8]
 8017bbe:	331a      	adds	r3, #26
 8017bc0:	687a      	ldr	r2, [r7, #4]
 8017bc2:	b292      	uxth	r2, r2
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7ff f857 	bl	8016c7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	2b03      	cmp	r3, #3
 8017bd2:	d109      	bne.n	8017be8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	f103 0214 	add.w	r2, r3, #20
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	0c1b      	lsrs	r3, r3, #16
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	4619      	mov	r1, r3
 8017be2:	4610      	mov	r0, r2
 8017be4:	f7ff f849 	bl	8016c7a <st_word>
	}
}
 8017be8:	bf00      	nop
 8017bea:	3710      	adds	r7, #16
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017bf0:	b590      	push	{r4, r7, lr}
 8017bf2:	b087      	sub	sp, #28
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8017bfa:	683b      	ldr	r3, [r7, #0]
 8017bfc:	331a      	adds	r3, #26
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7ff f800 	bl	8016c04 <ld_word>
 8017c04:	4603      	mov	r3, r0
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d001      	beq.n	8017c0e <cmp_lfn+0x1e>
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	e059      	b.n	8017cc2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8017c0e:	683b      	ldr	r3, [r7, #0]
 8017c10:	781b      	ldrb	r3, [r3, #0]
 8017c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c16:	1e5a      	subs	r2, r3, #1
 8017c18:	4613      	mov	r3, r2
 8017c1a:	005b      	lsls	r3, r3, #1
 8017c1c:	4413      	add	r3, r2
 8017c1e:	009b      	lsls	r3, r3, #2
 8017c20:	4413      	add	r3, r2
 8017c22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017c24:	2301      	movs	r3, #1
 8017c26:	81fb      	strh	r3, [r7, #14]
 8017c28:	2300      	movs	r3, #0
 8017c2a:	613b      	str	r3, [r7, #16]
 8017c2c:	e033      	b.n	8017c96 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8017c2e:	4a27      	ldr	r2, [pc, #156]	; (8017ccc <cmp_lfn+0xdc>)
 8017c30:	693b      	ldr	r3, [r7, #16]
 8017c32:	4413      	add	r3, r2
 8017c34:	781b      	ldrb	r3, [r3, #0]
 8017c36:	461a      	mov	r2, r3
 8017c38:	683b      	ldr	r3, [r7, #0]
 8017c3a:	4413      	add	r3, r2
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7fe ffe1 	bl	8016c04 <ld_word>
 8017c42:	4603      	mov	r3, r0
 8017c44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8017c46:	89fb      	ldrh	r3, [r7, #14]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d01a      	beq.n	8017c82 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8017c4c:	697b      	ldr	r3, [r7, #20]
 8017c4e:	2bfe      	cmp	r3, #254	; 0xfe
 8017c50:	d812      	bhi.n	8017c78 <cmp_lfn+0x88>
 8017c52:	89bb      	ldrh	r3, [r7, #12]
 8017c54:	4618      	mov	r0, r3
 8017c56:	f001 fe25 	bl	80198a4 <ff_wtoupper>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	461c      	mov	r4, r3
 8017c5e:	697b      	ldr	r3, [r7, #20]
 8017c60:	1c5a      	adds	r2, r3, #1
 8017c62:	617a      	str	r2, [r7, #20]
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	4413      	add	r3, r2
 8017c6a:	881b      	ldrh	r3, [r3, #0]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f001 fe19 	bl	80198a4 <ff_wtoupper>
 8017c72:	4603      	mov	r3, r0
 8017c74:	429c      	cmp	r4, r3
 8017c76:	d001      	beq.n	8017c7c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8017c78:	2300      	movs	r3, #0
 8017c7a:	e022      	b.n	8017cc2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8017c7c:	89bb      	ldrh	r3, [r7, #12]
 8017c7e:	81fb      	strh	r3, [r7, #14]
 8017c80:	e006      	b.n	8017c90 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8017c82:	89bb      	ldrh	r3, [r7, #12]
 8017c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d001      	beq.n	8017c90 <cmp_lfn+0xa0>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	e018      	b.n	8017cc2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	3301      	adds	r3, #1
 8017c94:	613b      	str	r3, [r7, #16]
 8017c96:	693b      	ldr	r3, [r7, #16]
 8017c98:	2b0c      	cmp	r3, #12
 8017c9a:	d9c8      	bls.n	8017c2e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d00b      	beq.n	8017cc0 <cmp_lfn+0xd0>
 8017ca8:	89fb      	ldrh	r3, [r7, #14]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d008      	beq.n	8017cc0 <cmp_lfn+0xd0>
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	005b      	lsls	r3, r3, #1
 8017cb2:	687a      	ldr	r2, [r7, #4]
 8017cb4:	4413      	add	r3, r2
 8017cb6:	881b      	ldrh	r3, [r3, #0]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d001      	beq.n	8017cc0 <cmp_lfn+0xd0>
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	e000      	b.n	8017cc2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017cc0:	2301      	movs	r3, #1
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	371c      	adds	r7, #28
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd90      	pop	{r4, r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	08021734 	.word	0x08021734

08017cd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b088      	sub	sp, #32
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	4611      	mov	r1, r2
 8017cdc:	461a      	mov	r2, r3
 8017cde:	460b      	mov	r3, r1
 8017ce0:	71fb      	strb	r3, [r7, #7]
 8017ce2:	4613      	mov	r3, r2
 8017ce4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8017ce6:	68bb      	ldr	r3, [r7, #8]
 8017ce8:	330d      	adds	r3, #13
 8017cea:	79ba      	ldrb	r2, [r7, #6]
 8017cec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	330b      	adds	r3, #11
 8017cf2:	220f      	movs	r2, #15
 8017cf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	330c      	adds	r3, #12
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	331a      	adds	r3, #26
 8017d02:	2100      	movs	r1, #0
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7fe ffb8 	bl	8016c7a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017d0a:	79fb      	ldrb	r3, [r7, #7]
 8017d0c:	1e5a      	subs	r2, r3, #1
 8017d0e:	4613      	mov	r3, r2
 8017d10:	005b      	lsls	r3, r3, #1
 8017d12:	4413      	add	r3, r2
 8017d14:	009b      	lsls	r3, r3, #2
 8017d16:	4413      	add	r3, r2
 8017d18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	82fb      	strh	r3, [r7, #22]
 8017d1e:	2300      	movs	r3, #0
 8017d20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017d22:	8afb      	ldrh	r3, [r7, #22]
 8017d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d007      	beq.n	8017d3c <put_lfn+0x6c>
 8017d2c:	69fb      	ldr	r3, [r7, #28]
 8017d2e:	1c5a      	adds	r2, r3, #1
 8017d30:	61fa      	str	r2, [r7, #28]
 8017d32:	005b      	lsls	r3, r3, #1
 8017d34:	68fa      	ldr	r2, [r7, #12]
 8017d36:	4413      	add	r3, r2
 8017d38:	881b      	ldrh	r3, [r3, #0]
 8017d3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8017d3c:	4a17      	ldr	r2, [pc, #92]	; (8017d9c <put_lfn+0xcc>)
 8017d3e:	69bb      	ldr	r3, [r7, #24]
 8017d40:	4413      	add	r3, r2
 8017d42:	781b      	ldrb	r3, [r3, #0]
 8017d44:	461a      	mov	r2, r3
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	4413      	add	r3, r2
 8017d4a:	8afa      	ldrh	r2, [r7, #22]
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7fe ff93 	bl	8016c7a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8017d54:	8afb      	ldrh	r3, [r7, #22]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d102      	bne.n	8017d60 <put_lfn+0x90>
 8017d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8017d60:	69bb      	ldr	r3, [r7, #24]
 8017d62:	3301      	adds	r3, #1
 8017d64:	61bb      	str	r3, [r7, #24]
 8017d66:	69bb      	ldr	r3, [r7, #24]
 8017d68:	2b0c      	cmp	r3, #12
 8017d6a:	d9da      	bls.n	8017d22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8017d6c:	8afb      	ldrh	r3, [r7, #22]
 8017d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d72:	4293      	cmp	r3, r2
 8017d74:	d006      	beq.n	8017d84 <put_lfn+0xb4>
 8017d76:	69fb      	ldr	r3, [r7, #28]
 8017d78:	005b      	lsls	r3, r3, #1
 8017d7a:	68fa      	ldr	r2, [r7, #12]
 8017d7c:	4413      	add	r3, r2
 8017d7e:	881b      	ldrh	r3, [r3, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d103      	bne.n	8017d8c <put_lfn+0xbc>
 8017d84:	79fb      	ldrb	r3, [r7, #7]
 8017d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	79fa      	ldrb	r2, [r7, #7]
 8017d90:	701a      	strb	r2, [r3, #0]
}
 8017d92:	bf00      	nop
 8017d94:	3720      	adds	r7, #32
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	08021734 	.word	0x08021734

08017da0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b08c      	sub	sp, #48	; 0x30
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	607a      	str	r2, [r7, #4]
 8017dac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8017dae:	220b      	movs	r2, #11
 8017db0:	68b9      	ldr	r1, [r7, #8]
 8017db2:	68f8      	ldr	r0, [r7, #12]
 8017db4:	f7fe ffa8 	bl	8016d08 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	2b05      	cmp	r3, #5
 8017dbc:	d92b      	bls.n	8017e16 <gen_numname+0x76>
		sr = seq;
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8017dc2:	e022      	b.n	8017e0a <gen_numname+0x6a>
			wc = *lfn++;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	1c9a      	adds	r2, r3, #2
 8017dc8:	607a      	str	r2, [r7, #4]
 8017dca:	881b      	ldrh	r3, [r3, #0]
 8017dcc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8017dce:	2300      	movs	r3, #0
 8017dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017dd2:	e017      	b.n	8017e04 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8017dd4:	69fb      	ldr	r3, [r7, #28]
 8017dd6:	005a      	lsls	r2, r3, #1
 8017dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dda:	f003 0301 	and.w	r3, r3, #1
 8017dde:	4413      	add	r3, r2
 8017de0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8017de2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017de4:	085b      	lsrs	r3, r3, #1
 8017de6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017de8:	69fb      	ldr	r3, [r7, #28]
 8017dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d005      	beq.n	8017dfe <gen_numname+0x5e>
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8017df8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8017dfc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8017dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e00:	3301      	adds	r3, #1
 8017e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e06:	2b0f      	cmp	r3, #15
 8017e08:	d9e4      	bls.n	8017dd4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	881b      	ldrh	r3, [r3, #0]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d1d8      	bne.n	8017dc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8017e16:	2307      	movs	r3, #7
 8017e18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8017e1a:	683b      	ldr	r3, [r7, #0]
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	f003 030f 	and.w	r3, r3, #15
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	3330      	adds	r3, #48	; 0x30
 8017e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8017e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e2e:	2b39      	cmp	r3, #57	; 0x39
 8017e30:	d904      	bls.n	8017e3c <gen_numname+0x9c>
 8017e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e36:	3307      	adds	r3, #7
 8017e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8017e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e3e:	1e5a      	subs	r2, r3, #1
 8017e40:	62ba      	str	r2, [r7, #40]	; 0x28
 8017e42:	3330      	adds	r3, #48	; 0x30
 8017e44:	443b      	add	r3, r7
 8017e46:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017e4a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	091b      	lsrs	r3, r3, #4
 8017e52:	603b      	str	r3, [r7, #0]
	} while (seq);
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d1df      	bne.n	8017e1a <gen_numname+0x7a>
	ns[i] = '~';
 8017e5a:	f107 0214 	add.w	r2, r7, #20
 8017e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e60:	4413      	add	r3, r2
 8017e62:	227e      	movs	r2, #126	; 0x7e
 8017e64:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017e66:	2300      	movs	r3, #0
 8017e68:	627b      	str	r3, [r7, #36]	; 0x24
 8017e6a:	e002      	b.n	8017e72 <gen_numname+0xd2>
 8017e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6e:	3301      	adds	r3, #1
 8017e70:	627b      	str	r3, [r7, #36]	; 0x24
 8017e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d205      	bcs.n	8017e86 <gen_numname+0xe6>
 8017e7a:	68fa      	ldr	r2, [r7, #12]
 8017e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7e:	4413      	add	r3, r2
 8017e80:	781b      	ldrb	r3, [r3, #0]
 8017e82:	2b20      	cmp	r3, #32
 8017e84:	d1f2      	bne.n	8017e6c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e88:	2b07      	cmp	r3, #7
 8017e8a:	d807      	bhi.n	8017e9c <gen_numname+0xfc>
 8017e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e8e:	1c5a      	adds	r2, r3, #1
 8017e90:	62ba      	str	r2, [r7, #40]	; 0x28
 8017e92:	3330      	adds	r3, #48	; 0x30
 8017e94:	443b      	add	r3, r7
 8017e96:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017e9a:	e000      	b.n	8017e9e <gen_numname+0xfe>
 8017e9c:	2120      	movs	r1, #32
 8017e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea0:	1c5a      	adds	r2, r3, #1
 8017ea2:	627a      	str	r2, [r7, #36]	; 0x24
 8017ea4:	68fa      	ldr	r2, [r7, #12]
 8017ea6:	4413      	add	r3, r2
 8017ea8:	460a      	mov	r2, r1
 8017eaa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8017eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eae:	2b07      	cmp	r3, #7
 8017eb0:	d9e9      	bls.n	8017e86 <gen_numname+0xe6>
}
 8017eb2:	bf00      	nop
 8017eb4:	bf00      	nop
 8017eb6:	3730      	adds	r7, #48	; 0x30
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b085      	sub	sp, #20
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017ec8:	230b      	movs	r3, #11
 8017eca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017ecc:	7bfb      	ldrb	r3, [r7, #15]
 8017ece:	b2da      	uxtb	r2, r3
 8017ed0:	0852      	lsrs	r2, r2, #1
 8017ed2:	01db      	lsls	r3, r3, #7
 8017ed4:	4313      	orrs	r3, r2
 8017ed6:	b2da      	uxtb	r2, r3
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	1c59      	adds	r1, r3, #1
 8017edc:	6079      	str	r1, [r7, #4]
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	3b01      	subs	r3, #1
 8017ee8:	60bb      	str	r3, [r7, #8]
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d1ed      	bne.n	8017ecc <sum_sfn+0x10>
	return sum;
 8017ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3714      	adds	r7, #20
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efc:	4770      	bx	lr

08017efe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017efe:	b580      	push	{r7, lr}
 8017f00:	b086      	sub	sp, #24
 8017f02:	af00      	add	r7, sp, #0
 8017f04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	6878      	ldr	r0, [r7, #4]
 8017f10:	f7ff fca8 	bl	8017864 <dir_sdi>
 8017f14:	4603      	mov	r3, r0
 8017f16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017f18:	7dfb      	ldrb	r3, [r7, #23]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d001      	beq.n	8017f22 <dir_find+0x24>
 8017f1e:	7dfb      	ldrb	r3, [r7, #23]
 8017f20:	e0a9      	b.n	8018076 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017f22:	23ff      	movs	r3, #255	; 0xff
 8017f24:	753b      	strb	r3, [r7, #20]
 8017f26:	7d3b      	ldrb	r3, [r7, #20]
 8017f28:	757b      	strb	r3, [r7, #21]
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8017f30:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	69db      	ldr	r3, [r3, #28]
 8017f36:	4619      	mov	r1, r3
 8017f38:	6938      	ldr	r0, [r7, #16]
 8017f3a:	f7ff f913 	bl	8017164 <move_window>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017f42:	7dfb      	ldrb	r3, [r7, #23]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	f040 8090 	bne.w	801806a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	6a1b      	ldr	r3, [r3, #32]
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017f52:	7dbb      	ldrb	r3, [r7, #22]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d102      	bne.n	8017f5e <dir_find+0x60>
 8017f58:	2304      	movs	r3, #4
 8017f5a:	75fb      	strb	r3, [r7, #23]
 8017f5c:	e08a      	b.n	8018074 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6a1b      	ldr	r3, [r3, #32]
 8017f62:	330b      	adds	r3, #11
 8017f64:	781b      	ldrb	r3, [r3, #0]
 8017f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f6a:	73fb      	strb	r3, [r7, #15]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	7bfa      	ldrb	r2, [r7, #15]
 8017f70:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8017f72:	7dbb      	ldrb	r3, [r7, #22]
 8017f74:	2be5      	cmp	r3, #229	; 0xe5
 8017f76:	d007      	beq.n	8017f88 <dir_find+0x8a>
 8017f78:	7bfb      	ldrb	r3, [r7, #15]
 8017f7a:	f003 0308 	and.w	r3, r3, #8
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d009      	beq.n	8017f96 <dir_find+0x98>
 8017f82:	7bfb      	ldrb	r3, [r7, #15]
 8017f84:	2b0f      	cmp	r3, #15
 8017f86:	d006      	beq.n	8017f96 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017f88:	23ff      	movs	r3, #255	; 0xff
 8017f8a:	757b      	strb	r3, [r7, #21]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f92:	631a      	str	r2, [r3, #48]	; 0x30
 8017f94:	e05e      	b.n	8018054 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017f96:	7bfb      	ldrb	r3, [r7, #15]
 8017f98:	2b0f      	cmp	r3, #15
 8017f9a:	d136      	bne.n	801800a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d154      	bne.n	8018054 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017faa:	7dbb      	ldrb	r3, [r7, #22]
 8017fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d00d      	beq.n	8017fd0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6a1b      	ldr	r3, [r3, #32]
 8017fb8:	7b5b      	ldrb	r3, [r3, #13]
 8017fba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017fbc:	7dbb      	ldrb	r3, [r7, #22]
 8017fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017fc2:	75bb      	strb	r3, [r7, #22]
 8017fc4:	7dbb      	ldrb	r3, [r7, #22]
 8017fc6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	695a      	ldr	r2, [r3, #20]
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017fd0:	7dba      	ldrb	r2, [r7, #22]
 8017fd2:	7d7b      	ldrb	r3, [r7, #21]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d115      	bne.n	8018004 <dir_find+0x106>
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6a1b      	ldr	r3, [r3, #32]
 8017fdc:	330d      	adds	r3, #13
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	7d3a      	ldrb	r2, [r7, #20]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d10e      	bne.n	8018004 <dir_find+0x106>
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	68da      	ldr	r2, [r3, #12]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	6a1b      	ldr	r3, [r3, #32]
 8017fee:	4619      	mov	r1, r3
 8017ff0:	4610      	mov	r0, r2
 8017ff2:	f7ff fdfd 	bl	8017bf0 <cmp_lfn>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d003      	beq.n	8018004 <dir_find+0x106>
 8017ffc:	7d7b      	ldrb	r3, [r7, #21]
 8017ffe:	3b01      	subs	r3, #1
 8018000:	b2db      	uxtb	r3, r3
 8018002:	e000      	b.n	8018006 <dir_find+0x108>
 8018004:	23ff      	movs	r3, #255	; 0xff
 8018006:	757b      	strb	r3, [r7, #21]
 8018008:	e024      	b.n	8018054 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801800a:	7d7b      	ldrb	r3, [r7, #21]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d109      	bne.n	8018024 <dir_find+0x126>
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6a1b      	ldr	r3, [r3, #32]
 8018014:	4618      	mov	r0, r3
 8018016:	f7ff ff51 	bl	8017ebc <sum_sfn>
 801801a:	4603      	mov	r3, r0
 801801c:	461a      	mov	r2, r3
 801801e:	7d3b      	ldrb	r3, [r7, #20]
 8018020:	4293      	cmp	r3, r2
 8018022:	d024      	beq.n	801806e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801802a:	f003 0301 	and.w	r3, r3, #1
 801802e:	2b00      	cmp	r3, #0
 8018030:	d10a      	bne.n	8018048 <dir_find+0x14a>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6a18      	ldr	r0, [r3, #32]
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	3324      	adds	r3, #36	; 0x24
 801803a:	220b      	movs	r2, #11
 801803c:	4619      	mov	r1, r3
 801803e:	f7fe fe9f 	bl	8016d80 <mem_cmp>
 8018042:	4603      	mov	r3, r0
 8018044:	2b00      	cmp	r3, #0
 8018046:	d014      	beq.n	8018072 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018048:	23ff      	movs	r3, #255	; 0xff
 801804a:	757b      	strb	r3, [r7, #21]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f04f 32ff 	mov.w	r2, #4294967295
 8018052:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018054:	2100      	movs	r1, #0
 8018056:	6878      	ldr	r0, [r7, #4]
 8018058:	f7ff fc7f 	bl	801795a <dir_next>
 801805c:	4603      	mov	r3, r0
 801805e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018060:	7dfb      	ldrb	r3, [r7, #23]
 8018062:	2b00      	cmp	r3, #0
 8018064:	f43f af65 	beq.w	8017f32 <dir_find+0x34>
 8018068:	e004      	b.n	8018074 <dir_find+0x176>
		if (res != FR_OK) break;
 801806a:	bf00      	nop
 801806c:	e002      	b.n	8018074 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801806e:	bf00      	nop
 8018070:	e000      	b.n	8018074 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018072:	bf00      	nop

	return res;
 8018074:	7dfb      	ldrb	r3, [r7, #23]
}
 8018076:	4618      	mov	r0, r3
 8018078:	3718      	adds	r7, #24
 801807a:	46bd      	mov	sp, r7
 801807c:	bd80      	pop	{r7, pc}
	...

08018080 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b08c      	sub	sp, #48	; 0x30
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018094:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d001      	beq.n	80180a0 <dir_register+0x20>
 801809c:	2306      	movs	r3, #6
 801809e:	e0e0      	b.n	8018262 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80180a0:	2300      	movs	r3, #0
 80180a2:	627b      	str	r3, [r7, #36]	; 0x24
 80180a4:	e002      	b.n	80180ac <dir_register+0x2c>
 80180a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a8:	3301      	adds	r3, #1
 80180aa:	627b      	str	r3, [r7, #36]	; 0x24
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	68da      	ldr	r2, [r3, #12]
 80180b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b2:	005b      	lsls	r3, r3, #1
 80180b4:	4413      	add	r3, r2
 80180b6:	881b      	ldrh	r3, [r3, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d1f4      	bne.n	80180a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80180c2:	f107 030c 	add.w	r3, r7, #12
 80180c6:	220c      	movs	r2, #12
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7fe fe1d 	bl	8016d08 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80180ce:	7dfb      	ldrb	r3, [r7, #23]
 80180d0:	f003 0301 	and.w	r3, r3, #1
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d032      	beq.n	801813e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2240      	movs	r2, #64	; 0x40
 80180dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80180e0:	2301      	movs	r3, #1
 80180e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80180e4:	e016      	b.n	8018114 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80180ec:	69fb      	ldr	r3, [r7, #28]
 80180ee:	68da      	ldr	r2, [r3, #12]
 80180f0:	f107 010c 	add.w	r1, r7, #12
 80180f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f6:	f7ff fe53 	bl	8017da0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80180fa:	6878      	ldr	r0, [r7, #4]
 80180fc:	f7ff feff 	bl	8017efe <dir_find>
 8018100:	4603      	mov	r3, r0
 8018102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801810a:	2b00      	cmp	r3, #0
 801810c:	d106      	bne.n	801811c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018110:	3301      	adds	r3, #1
 8018112:	62bb      	str	r3, [r7, #40]	; 0x28
 8018114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018116:	2b63      	cmp	r3, #99	; 0x63
 8018118:	d9e5      	bls.n	80180e6 <dir_register+0x66>
 801811a:	e000      	b.n	801811e <dir_register+0x9e>
			if (res != FR_OK) break;
 801811c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018120:	2b64      	cmp	r3, #100	; 0x64
 8018122:	d101      	bne.n	8018128 <dir_register+0xa8>
 8018124:	2307      	movs	r3, #7
 8018126:	e09c      	b.n	8018262 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801812c:	2b04      	cmp	r3, #4
 801812e:	d002      	beq.n	8018136 <dir_register+0xb6>
 8018130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018134:	e095      	b.n	8018262 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018136:	7dfa      	ldrb	r2, [r7, #23]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801813e:	7dfb      	ldrb	r3, [r7, #23]
 8018140:	f003 0302 	and.w	r3, r3, #2
 8018144:	2b00      	cmp	r3, #0
 8018146:	d007      	beq.n	8018158 <dir_register+0xd8>
 8018148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814a:	330c      	adds	r3, #12
 801814c:	4a47      	ldr	r2, [pc, #284]	; (801826c <dir_register+0x1ec>)
 801814e:	fba2 2303 	umull	r2, r3, r2, r3
 8018152:	089b      	lsrs	r3, r3, #2
 8018154:	3301      	adds	r3, #1
 8018156:	e000      	b.n	801815a <dir_register+0xda>
 8018158:	2301      	movs	r3, #1
 801815a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801815c:	6a39      	ldr	r1, [r7, #32]
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f7ff fcc0 	bl	8017ae4 <dir_alloc>
 8018164:	4603      	mov	r3, r0
 8018166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801816a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801816e:	2b00      	cmp	r3, #0
 8018170:	d148      	bne.n	8018204 <dir_register+0x184>
 8018172:	6a3b      	ldr	r3, [r7, #32]
 8018174:	3b01      	subs	r3, #1
 8018176:	623b      	str	r3, [r7, #32]
 8018178:	6a3b      	ldr	r3, [r7, #32]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d042      	beq.n	8018204 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	695a      	ldr	r2, [r3, #20]
 8018182:	6a3b      	ldr	r3, [r7, #32]
 8018184:	015b      	lsls	r3, r3, #5
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	4619      	mov	r1, r3
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f7ff fb6a 	bl	8017864 <dir_sdi>
 8018190:	4603      	mov	r3, r0
 8018192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801819a:	2b00      	cmp	r3, #0
 801819c:	d132      	bne.n	8018204 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	3324      	adds	r3, #36	; 0x24
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7ff fe8a 	bl	8017ebc <sum_sfn>
 80181a8:	4603      	mov	r3, r0
 80181aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	69db      	ldr	r3, [r3, #28]
 80181b0:	4619      	mov	r1, r3
 80181b2:	69f8      	ldr	r0, [r7, #28]
 80181b4:	f7fe ffd6 	bl	8017164 <move_window>
 80181b8:	4603      	mov	r3, r0
 80181ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80181be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d11d      	bne.n	8018202 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80181c6:	69fb      	ldr	r3, [r7, #28]
 80181c8:	68d8      	ldr	r0, [r3, #12]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	6a19      	ldr	r1, [r3, #32]
 80181ce:	6a3b      	ldr	r3, [r7, #32]
 80181d0:	b2da      	uxtb	r2, r3
 80181d2:	7efb      	ldrb	r3, [r7, #27]
 80181d4:	f7ff fd7c 	bl	8017cd0 <put_lfn>
				fs->wflag = 1;
 80181d8:	69fb      	ldr	r3, [r7, #28]
 80181da:	2201      	movs	r2, #1
 80181dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80181de:	2100      	movs	r1, #0
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	f7ff fbba 	bl	801795a <dir_next>
 80181e6:	4603      	mov	r3, r0
 80181e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80181ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d107      	bne.n	8018204 <dir_register+0x184>
 80181f4:	6a3b      	ldr	r3, [r7, #32]
 80181f6:	3b01      	subs	r3, #1
 80181f8:	623b      	str	r3, [r7, #32]
 80181fa:	6a3b      	ldr	r3, [r7, #32]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d1d5      	bne.n	80181ac <dir_register+0x12c>
 8018200:	e000      	b.n	8018204 <dir_register+0x184>
				if (res != FR_OK) break;
 8018202:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018208:	2b00      	cmp	r3, #0
 801820a:	d128      	bne.n	801825e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	69db      	ldr	r3, [r3, #28]
 8018210:	4619      	mov	r1, r3
 8018212:	69f8      	ldr	r0, [r7, #28]
 8018214:	f7fe ffa6 	bl	8017164 <move_window>
 8018218:	4603      	mov	r3, r0
 801821a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801821e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018222:	2b00      	cmp	r3, #0
 8018224:	d11b      	bne.n	801825e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6a1b      	ldr	r3, [r3, #32]
 801822a:	2220      	movs	r2, #32
 801822c:	2100      	movs	r1, #0
 801822e:	4618      	mov	r0, r3
 8018230:	f7fe fd8b 	bl	8016d4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	6a18      	ldr	r0, [r3, #32]
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	3324      	adds	r3, #36	; 0x24
 801823c:	220b      	movs	r2, #11
 801823e:	4619      	mov	r1, r3
 8018240:	f7fe fd62 	bl	8016d08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6a1b      	ldr	r3, [r3, #32]
 801824e:	330c      	adds	r3, #12
 8018250:	f002 0218 	and.w	r2, r2, #24
 8018254:	b2d2      	uxtb	r2, r2
 8018256:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018258:	69fb      	ldr	r3, [r7, #28]
 801825a:	2201      	movs	r2, #1
 801825c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801825e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018262:	4618      	mov	r0, r3
 8018264:	3730      	adds	r7, #48	; 0x30
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	4ec4ec4f 	.word	0x4ec4ec4f

08018270 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b088      	sub	sp, #32
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	2200      	movs	r2, #0
 8018284:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	69db      	ldr	r3, [r3, #28]
 801828a:	2b00      	cmp	r3, #0
 801828c:	f000 80c9 	beq.w	8018422 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018298:	d032      	beq.n	8018300 <get_fileinfo+0x90>
			i = j = 0;
 801829a:	2300      	movs	r3, #0
 801829c:	61bb      	str	r3, [r7, #24]
 801829e:	69bb      	ldr	r3, [r7, #24]
 80182a0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80182a2:	e01b      	b.n	80182dc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80182a4:	89fb      	ldrh	r3, [r7, #14]
 80182a6:	2100      	movs	r1, #0
 80182a8:	4618      	mov	r0, r3
 80182aa:	f001 fabf 	bl	801982c <ff_convert>
 80182ae:	4603      	mov	r3, r0
 80182b0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80182b2:	89fb      	ldrh	r3, [r7, #14]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d102      	bne.n	80182be <get_fileinfo+0x4e>
 80182b8:	2300      	movs	r3, #0
 80182ba:	61fb      	str	r3, [r7, #28]
 80182bc:	e01a      	b.n	80182f4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80182be:	69fb      	ldr	r3, [r7, #28]
 80182c0:	2bfe      	cmp	r3, #254	; 0xfe
 80182c2:	d902      	bls.n	80182ca <get_fileinfo+0x5a>
 80182c4:	2300      	movs	r3, #0
 80182c6:	61fb      	str	r3, [r7, #28]
 80182c8:	e014      	b.n	80182f4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80182ca:	69fb      	ldr	r3, [r7, #28]
 80182cc:	1c5a      	adds	r2, r3, #1
 80182ce:	61fa      	str	r2, [r7, #28]
 80182d0:	89fa      	ldrh	r2, [r7, #14]
 80182d2:	b2d1      	uxtb	r1, r2
 80182d4:	683a      	ldr	r2, [r7, #0]
 80182d6:	4413      	add	r3, r2
 80182d8:	460a      	mov	r2, r1
 80182da:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80182dc:	693b      	ldr	r3, [r7, #16]
 80182de:	68da      	ldr	r2, [r3, #12]
 80182e0:	69bb      	ldr	r3, [r7, #24]
 80182e2:	1c59      	adds	r1, r3, #1
 80182e4:	61b9      	str	r1, [r7, #24]
 80182e6:	005b      	lsls	r3, r3, #1
 80182e8:	4413      	add	r3, r2
 80182ea:	881b      	ldrh	r3, [r3, #0]
 80182ec:	81fb      	strh	r3, [r7, #14]
 80182ee:	89fb      	ldrh	r3, [r7, #14]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d1d7      	bne.n	80182a4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80182f4:	683a      	ldr	r2, [r7, #0]
 80182f6:	69fb      	ldr	r3, [r7, #28]
 80182f8:	4413      	add	r3, r2
 80182fa:	3316      	adds	r3, #22
 80182fc:	2200      	movs	r2, #0
 80182fe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018300:	2300      	movs	r3, #0
 8018302:	61bb      	str	r3, [r7, #24]
 8018304:	69bb      	ldr	r3, [r7, #24]
 8018306:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018308:	683a      	ldr	r2, [r7, #0]
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	4413      	add	r3, r2
 801830e:	3316      	adds	r3, #22
 8018310:	781b      	ldrb	r3, [r3, #0]
 8018312:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8018314:	e04c      	b.n	80183b0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	6a1a      	ldr	r2, [r3, #32]
 801831a:	69fb      	ldr	r3, [r7, #28]
 801831c:	1c59      	adds	r1, r3, #1
 801831e:	61f9      	str	r1, [r7, #28]
 8018320:	4413      	add	r3, r2
 8018322:	781b      	ldrb	r3, [r3, #0]
 8018324:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8018326:	7dfb      	ldrb	r3, [r7, #23]
 8018328:	2b20      	cmp	r3, #32
 801832a:	d100      	bne.n	801832e <get_fileinfo+0xbe>
 801832c:	e040      	b.n	80183b0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801832e:	7dfb      	ldrb	r3, [r7, #23]
 8018330:	2b05      	cmp	r3, #5
 8018332:	d101      	bne.n	8018338 <get_fileinfo+0xc8>
 8018334:	23e5      	movs	r3, #229	; 0xe5
 8018336:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8018338:	69fb      	ldr	r3, [r7, #28]
 801833a:	2b09      	cmp	r3, #9
 801833c:	d10f      	bne.n	801835e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801833e:	89bb      	ldrh	r3, [r7, #12]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d105      	bne.n	8018350 <get_fileinfo+0xe0>
 8018344:	683a      	ldr	r2, [r7, #0]
 8018346:	69bb      	ldr	r3, [r7, #24]
 8018348:	4413      	add	r3, r2
 801834a:	3316      	adds	r3, #22
 801834c:	222e      	movs	r2, #46	; 0x2e
 801834e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8018350:	69bb      	ldr	r3, [r7, #24]
 8018352:	1c5a      	adds	r2, r3, #1
 8018354:	61ba      	str	r2, [r7, #24]
 8018356:	683a      	ldr	r2, [r7, #0]
 8018358:	4413      	add	r3, r2
 801835a:	222e      	movs	r2, #46	; 0x2e
 801835c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801835e:	683a      	ldr	r2, [r7, #0]
 8018360:	69bb      	ldr	r3, [r7, #24]
 8018362:	4413      	add	r3, r2
 8018364:	3309      	adds	r3, #9
 8018366:	7dfa      	ldrb	r2, [r7, #23]
 8018368:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801836a:	89bb      	ldrh	r3, [r7, #12]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d11c      	bne.n	80183aa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8018370:	7dfb      	ldrb	r3, [r7, #23]
 8018372:	2b40      	cmp	r3, #64	; 0x40
 8018374:	d913      	bls.n	801839e <get_fileinfo+0x12e>
 8018376:	7dfb      	ldrb	r3, [r7, #23]
 8018378:	2b5a      	cmp	r3, #90	; 0x5a
 801837a:	d810      	bhi.n	801839e <get_fileinfo+0x12e>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6a1b      	ldr	r3, [r3, #32]
 8018380:	330c      	adds	r3, #12
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	461a      	mov	r2, r3
 8018386:	69fb      	ldr	r3, [r7, #28]
 8018388:	2b08      	cmp	r3, #8
 801838a:	d901      	bls.n	8018390 <get_fileinfo+0x120>
 801838c:	2310      	movs	r3, #16
 801838e:	e000      	b.n	8018392 <get_fileinfo+0x122>
 8018390:	2308      	movs	r3, #8
 8018392:	4013      	ands	r3, r2
 8018394:	2b00      	cmp	r3, #0
 8018396:	d002      	beq.n	801839e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8018398:	7dfb      	ldrb	r3, [r7, #23]
 801839a:	3320      	adds	r3, #32
 801839c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801839e:	683a      	ldr	r2, [r7, #0]
 80183a0:	69bb      	ldr	r3, [r7, #24]
 80183a2:	4413      	add	r3, r2
 80183a4:	3316      	adds	r3, #22
 80183a6:	7dfa      	ldrb	r2, [r7, #23]
 80183a8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80183aa:	69bb      	ldr	r3, [r7, #24]
 80183ac:	3301      	adds	r3, #1
 80183ae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80183b0:	69fb      	ldr	r3, [r7, #28]
 80183b2:	2b0a      	cmp	r3, #10
 80183b4:	d9af      	bls.n	8018316 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80183b6:	89bb      	ldrh	r3, [r7, #12]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d10d      	bne.n	80183d8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80183bc:	683a      	ldr	r2, [r7, #0]
 80183be:	69bb      	ldr	r3, [r7, #24]
 80183c0:	4413      	add	r3, r2
 80183c2:	3316      	adds	r3, #22
 80183c4:	2200      	movs	r2, #0
 80183c6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	6a1b      	ldr	r3, [r3, #32]
 80183cc:	330c      	adds	r3, #12
 80183ce:	781b      	ldrb	r3, [r3, #0]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d101      	bne.n	80183d8 <get_fileinfo+0x168>
 80183d4:	2300      	movs	r3, #0
 80183d6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80183d8:	683a      	ldr	r2, [r7, #0]
 80183da:	69bb      	ldr	r3, [r7, #24]
 80183dc:	4413      	add	r3, r2
 80183de:	3309      	adds	r3, #9
 80183e0:	2200      	movs	r2, #0
 80183e2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6a1b      	ldr	r3, [r3, #32]
 80183e8:	7ada      	ldrb	r2, [r3, #11]
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6a1b      	ldr	r3, [r3, #32]
 80183f2:	331c      	adds	r3, #28
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7fe fc1d 	bl	8016c34 <ld_dword>
 80183fa:	4602      	mov	r2, r0
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6a1b      	ldr	r3, [r3, #32]
 8018404:	3316      	adds	r3, #22
 8018406:	4618      	mov	r0, r3
 8018408:	f7fe fc14 	bl	8016c34 <ld_dword>
 801840c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801840e:	68bb      	ldr	r3, [r7, #8]
 8018410:	b29a      	uxth	r2, r3
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	80da      	strh	r2, [r3, #6]
 8018416:	68bb      	ldr	r3, [r7, #8]
 8018418:	0c1b      	lsrs	r3, r3, #16
 801841a:	b29a      	uxth	r2, r3
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	809a      	strh	r2, [r3, #4]
 8018420:	e000      	b.n	8018424 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018422:	bf00      	nop
}
 8018424:	3720      	adds	r7, #32
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}
	...

0801842c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b08a      	sub	sp, #40	; 0x28
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
 8018434:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	613b      	str	r3, [r7, #16]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	68db      	ldr	r3, [r3, #12]
 8018442:	60fb      	str	r3, [r7, #12]
 8018444:	2300      	movs	r3, #0
 8018446:	617b      	str	r3, [r7, #20]
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801844c:	69bb      	ldr	r3, [r7, #24]
 801844e:	1c5a      	adds	r2, r3, #1
 8018450:	61ba      	str	r2, [r7, #24]
 8018452:	693a      	ldr	r2, [r7, #16]
 8018454:	4413      	add	r3, r2
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801845a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801845c:	2b1f      	cmp	r3, #31
 801845e:	d940      	bls.n	80184e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018462:	2b2f      	cmp	r3, #47	; 0x2f
 8018464:	d006      	beq.n	8018474 <create_name+0x48>
 8018466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018468:	2b5c      	cmp	r3, #92	; 0x5c
 801846a:	d110      	bne.n	801848e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801846c:	e002      	b.n	8018474 <create_name+0x48>
 801846e:	69bb      	ldr	r3, [r7, #24]
 8018470:	3301      	adds	r3, #1
 8018472:	61bb      	str	r3, [r7, #24]
 8018474:	693a      	ldr	r2, [r7, #16]
 8018476:	69bb      	ldr	r3, [r7, #24]
 8018478:	4413      	add	r3, r2
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	2b2f      	cmp	r3, #47	; 0x2f
 801847e:	d0f6      	beq.n	801846e <create_name+0x42>
 8018480:	693a      	ldr	r2, [r7, #16]
 8018482:	69bb      	ldr	r3, [r7, #24]
 8018484:	4413      	add	r3, r2
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	2b5c      	cmp	r3, #92	; 0x5c
 801848a:	d0f0      	beq.n	801846e <create_name+0x42>
			break;
 801848c:	e02a      	b.n	80184e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801848e:	697b      	ldr	r3, [r7, #20]
 8018490:	2bfe      	cmp	r3, #254	; 0xfe
 8018492:	d901      	bls.n	8018498 <create_name+0x6c>
 8018494:	2306      	movs	r3, #6
 8018496:	e17d      	b.n	8018794 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801849a:	b2db      	uxtb	r3, r3
 801849c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801849e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184a0:	2101      	movs	r1, #1
 80184a2:	4618      	mov	r0, r3
 80184a4:	f001 f9c2 	bl	801982c <ff_convert>
 80184a8:	4603      	mov	r3, r0
 80184aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80184ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d101      	bne.n	80184b6 <create_name+0x8a>
 80184b2:	2306      	movs	r3, #6
 80184b4:	e16e      	b.n	8018794 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80184b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184b8:	2b7f      	cmp	r3, #127	; 0x7f
 80184ba:	d809      	bhi.n	80184d0 <create_name+0xa4>
 80184bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184be:	4619      	mov	r1, r3
 80184c0:	488d      	ldr	r0, [pc, #564]	; (80186f8 <create_name+0x2cc>)
 80184c2:	f7fe fc84 	bl	8016dce <chk_chr>
 80184c6:	4603      	mov	r3, r0
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d001      	beq.n	80184d0 <create_name+0xa4>
 80184cc:	2306      	movs	r3, #6
 80184ce:	e161      	b.n	8018794 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80184d0:	697b      	ldr	r3, [r7, #20]
 80184d2:	1c5a      	adds	r2, r3, #1
 80184d4:	617a      	str	r2, [r7, #20]
 80184d6:	005b      	lsls	r3, r3, #1
 80184d8:	68fa      	ldr	r2, [r7, #12]
 80184da:	4413      	add	r3, r2
 80184dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80184de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80184e0:	e7b4      	b.n	801844c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80184e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80184e4:	693a      	ldr	r2, [r7, #16]
 80184e6:	69bb      	ldr	r3, [r7, #24]
 80184e8:	441a      	add	r2, r3
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80184ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184f0:	2b1f      	cmp	r3, #31
 80184f2:	d801      	bhi.n	80184f8 <create_name+0xcc>
 80184f4:	2304      	movs	r3, #4
 80184f6:	e000      	b.n	80184fa <create_name+0xce>
 80184f8:	2300      	movs	r3, #0
 80184fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80184fe:	e011      	b.n	8018524 <create_name+0xf8>
		w = lfn[di - 1];
 8018500:	697b      	ldr	r3, [r7, #20]
 8018502:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018506:	3b01      	subs	r3, #1
 8018508:	005b      	lsls	r3, r3, #1
 801850a:	68fa      	ldr	r2, [r7, #12]
 801850c:	4413      	add	r3, r2
 801850e:	881b      	ldrh	r3, [r3, #0]
 8018510:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018514:	2b20      	cmp	r3, #32
 8018516:	d002      	beq.n	801851e <create_name+0xf2>
 8018518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801851a:	2b2e      	cmp	r3, #46	; 0x2e
 801851c:	d106      	bne.n	801852c <create_name+0x100>
		di--;
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	3b01      	subs	r3, #1
 8018522:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d1ea      	bne.n	8018500 <create_name+0xd4>
 801852a:	e000      	b.n	801852e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801852c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	005b      	lsls	r3, r3, #1
 8018532:	68fa      	ldr	r2, [r7, #12]
 8018534:	4413      	add	r3, r2
 8018536:	2200      	movs	r2, #0
 8018538:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d101      	bne.n	8018544 <create_name+0x118>
 8018540:	2306      	movs	r3, #6
 8018542:	e127      	b.n	8018794 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	3324      	adds	r3, #36	; 0x24
 8018548:	220b      	movs	r2, #11
 801854a:	2120      	movs	r1, #32
 801854c:	4618      	mov	r0, r3
 801854e:	f7fe fbfc 	bl	8016d4a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018552:	2300      	movs	r3, #0
 8018554:	61bb      	str	r3, [r7, #24]
 8018556:	e002      	b.n	801855e <create_name+0x132>
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	3301      	adds	r3, #1
 801855c:	61bb      	str	r3, [r7, #24]
 801855e:	69bb      	ldr	r3, [r7, #24]
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	68fa      	ldr	r2, [r7, #12]
 8018564:	4413      	add	r3, r2
 8018566:	881b      	ldrh	r3, [r3, #0]
 8018568:	2b20      	cmp	r3, #32
 801856a:	d0f5      	beq.n	8018558 <create_name+0x12c>
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	005b      	lsls	r3, r3, #1
 8018570:	68fa      	ldr	r2, [r7, #12]
 8018572:	4413      	add	r3, r2
 8018574:	881b      	ldrh	r3, [r3, #0]
 8018576:	2b2e      	cmp	r3, #46	; 0x2e
 8018578:	d0ee      	beq.n	8018558 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801857a:	69bb      	ldr	r3, [r7, #24]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d009      	beq.n	8018594 <create_name+0x168>
 8018580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018584:	f043 0303 	orr.w	r3, r3, #3
 8018588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801858c:	e002      	b.n	8018594 <create_name+0x168>
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	3b01      	subs	r3, #1
 8018592:	617b      	str	r3, [r7, #20]
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d009      	beq.n	80185ae <create_name+0x182>
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80185a0:	3b01      	subs	r3, #1
 80185a2:	005b      	lsls	r3, r3, #1
 80185a4:	68fa      	ldr	r2, [r7, #12]
 80185a6:	4413      	add	r3, r2
 80185a8:	881b      	ldrh	r3, [r3, #0]
 80185aa:	2b2e      	cmp	r3, #46	; 0x2e
 80185ac:	d1ef      	bne.n	801858e <create_name+0x162>

	i = b = 0; ni = 8;
 80185ae:	2300      	movs	r3, #0
 80185b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80185b4:	2300      	movs	r3, #0
 80185b6:	623b      	str	r3, [r7, #32]
 80185b8:	2308      	movs	r3, #8
 80185ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80185bc:	69bb      	ldr	r3, [r7, #24]
 80185be:	1c5a      	adds	r2, r3, #1
 80185c0:	61ba      	str	r2, [r7, #24]
 80185c2:	005b      	lsls	r3, r3, #1
 80185c4:	68fa      	ldr	r2, [r7, #12]
 80185c6:	4413      	add	r3, r2
 80185c8:	881b      	ldrh	r3, [r3, #0]
 80185ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80185cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	f000 8090 	beq.w	80186f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80185d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185d6:	2b20      	cmp	r3, #32
 80185d8:	d006      	beq.n	80185e8 <create_name+0x1bc>
 80185da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185dc:	2b2e      	cmp	r3, #46	; 0x2e
 80185de:	d10a      	bne.n	80185f6 <create_name+0x1ca>
 80185e0:	69ba      	ldr	r2, [r7, #24]
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d006      	beq.n	80185f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80185e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ec:	f043 0303 	orr.w	r3, r3, #3
 80185f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185f4:	e07d      	b.n	80186f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80185f6:	6a3a      	ldr	r2, [r7, #32]
 80185f8:	69fb      	ldr	r3, [r7, #28]
 80185fa:	429a      	cmp	r2, r3
 80185fc:	d203      	bcs.n	8018606 <create_name+0x1da>
 80185fe:	69ba      	ldr	r2, [r7, #24]
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	429a      	cmp	r2, r3
 8018604:	d123      	bne.n	801864e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018606:	69fb      	ldr	r3, [r7, #28]
 8018608:	2b0b      	cmp	r3, #11
 801860a:	d106      	bne.n	801861a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801860c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018610:	f043 0303 	orr.w	r3, r3, #3
 8018614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018618:	e075      	b.n	8018706 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801861a:	69ba      	ldr	r2, [r7, #24]
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	429a      	cmp	r2, r3
 8018620:	d005      	beq.n	801862e <create_name+0x202>
 8018622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018626:	f043 0303 	orr.w	r3, r3, #3
 801862a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801862e:	69ba      	ldr	r2, [r7, #24]
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	429a      	cmp	r2, r3
 8018634:	d866      	bhi.n	8018704 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	61bb      	str	r3, [r7, #24]
 801863a:	2308      	movs	r3, #8
 801863c:	623b      	str	r3, [r7, #32]
 801863e:	230b      	movs	r3, #11
 8018640:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018642:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018646:	009b      	lsls	r3, r3, #2
 8018648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801864c:	e051      	b.n	80186f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801864e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018650:	2b7f      	cmp	r3, #127	; 0x7f
 8018652:	d914      	bls.n	801867e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018656:	2100      	movs	r1, #0
 8018658:	4618      	mov	r0, r3
 801865a:	f001 f8e7 	bl	801982c <ff_convert>
 801865e:	4603      	mov	r3, r0
 8018660:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018664:	2b00      	cmp	r3, #0
 8018666:	d004      	beq.n	8018672 <create_name+0x246>
 8018668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801866a:	3b80      	subs	r3, #128	; 0x80
 801866c:	4a23      	ldr	r2, [pc, #140]	; (80186fc <create_name+0x2d0>)
 801866e:	5cd3      	ldrb	r3, [r2, r3]
 8018670:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018676:	f043 0302 	orr.w	r3, r3, #2
 801867a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801867e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018680:	2b00      	cmp	r3, #0
 8018682:	d007      	beq.n	8018694 <create_name+0x268>
 8018684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018686:	4619      	mov	r1, r3
 8018688:	481d      	ldr	r0, [pc, #116]	; (8018700 <create_name+0x2d4>)
 801868a:	f7fe fba0 	bl	8016dce <chk_chr>
 801868e:	4603      	mov	r3, r0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d008      	beq.n	80186a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018694:	235f      	movs	r3, #95	; 0x5f
 8018696:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801869c:	f043 0303 	orr.w	r3, r3, #3
 80186a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80186a4:	e01b      	b.n	80186de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80186a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186a8:	2b40      	cmp	r3, #64	; 0x40
 80186aa:	d909      	bls.n	80186c0 <create_name+0x294>
 80186ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186ae:	2b5a      	cmp	r3, #90	; 0x5a
 80186b0:	d806      	bhi.n	80186c0 <create_name+0x294>
					b |= 2;
 80186b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80186b6:	f043 0302 	orr.w	r3, r3, #2
 80186ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80186be:	e00e      	b.n	80186de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80186c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186c2:	2b60      	cmp	r3, #96	; 0x60
 80186c4:	d90b      	bls.n	80186de <create_name+0x2b2>
 80186c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186c8:	2b7a      	cmp	r3, #122	; 0x7a
 80186ca:	d808      	bhi.n	80186de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80186cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80186d0:	f043 0301 	orr.w	r3, r3, #1
 80186d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80186d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186da:	3b20      	subs	r3, #32
 80186dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80186de:	6a3b      	ldr	r3, [r7, #32]
 80186e0:	1c5a      	adds	r2, r3, #1
 80186e2:	623a      	str	r2, [r7, #32]
 80186e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80186e6:	b2d1      	uxtb	r1, r2
 80186e8:	687a      	ldr	r2, [r7, #4]
 80186ea:	4413      	add	r3, r2
 80186ec:	460a      	mov	r2, r1
 80186ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80186f2:	e763      	b.n	80185bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80186f4:	bf00      	nop
 80186f6:	e006      	b.n	8018706 <create_name+0x2da>
 80186f8:	08020e54 	.word	0x08020e54
 80186fc:	080216b4 	.word	0x080216b4
 8018700:	08020e60 	.word	0x08020e60
			if (si > di) break;			/* No extension */
 8018704:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801870c:	2be5      	cmp	r3, #229	; 0xe5
 801870e:	d103      	bne.n	8018718 <create_name+0x2ec>
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	2205      	movs	r2, #5
 8018714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018718:	69fb      	ldr	r3, [r7, #28]
 801871a:	2b08      	cmp	r3, #8
 801871c:	d104      	bne.n	8018728 <create_name+0x2fc>
 801871e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018728:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801872c:	f003 030c 	and.w	r3, r3, #12
 8018730:	2b0c      	cmp	r3, #12
 8018732:	d005      	beq.n	8018740 <create_name+0x314>
 8018734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018738:	f003 0303 	and.w	r3, r3, #3
 801873c:	2b03      	cmp	r3, #3
 801873e:	d105      	bne.n	801874c <create_name+0x320>
 8018740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018744:	f043 0302 	orr.w	r3, r3, #2
 8018748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801874c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018750:	f003 0302 	and.w	r3, r3, #2
 8018754:	2b00      	cmp	r3, #0
 8018756:	d117      	bne.n	8018788 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801875c:	f003 0303 	and.w	r3, r3, #3
 8018760:	2b01      	cmp	r3, #1
 8018762:	d105      	bne.n	8018770 <create_name+0x344>
 8018764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018768:	f043 0310 	orr.w	r3, r3, #16
 801876c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018774:	f003 030c 	and.w	r3, r3, #12
 8018778:	2b04      	cmp	r3, #4
 801877a:	d105      	bne.n	8018788 <create_name+0x35c>
 801877c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018780:	f043 0308 	orr.w	r3, r3, #8
 8018784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801878e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018792:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018794:	4618      	mov	r0, r3
 8018796:	3728      	adds	r7, #40	; 0x28
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b086      	sub	sp, #24
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80187b0:	e002      	b.n	80187b8 <follow_path+0x1c>
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	3301      	adds	r3, #1
 80187b6:	603b      	str	r3, [r7, #0]
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	781b      	ldrb	r3, [r3, #0]
 80187bc:	2b2f      	cmp	r3, #47	; 0x2f
 80187be:	d0f8      	beq.n	80187b2 <follow_path+0x16>
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	2b5c      	cmp	r3, #92	; 0x5c
 80187c6:	d0f4      	beq.n	80187b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	2200      	movs	r2, #0
 80187cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	781b      	ldrb	r3, [r3, #0]
 80187d2:	2b1f      	cmp	r3, #31
 80187d4:	d80a      	bhi.n	80187ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2280      	movs	r2, #128	; 0x80
 80187da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80187de:	2100      	movs	r1, #0
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f7ff f83f 	bl	8017864 <dir_sdi>
 80187e6:	4603      	mov	r3, r0
 80187e8:	75fb      	strb	r3, [r7, #23]
 80187ea:	e043      	b.n	8018874 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80187ec:	463b      	mov	r3, r7
 80187ee:	4619      	mov	r1, r3
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f7ff fe1b 	bl	801842c <create_name>
 80187f6:	4603      	mov	r3, r0
 80187f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80187fa:	7dfb      	ldrb	r3, [r7, #23]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d134      	bne.n	801886a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f7ff fb7c 	bl	8017efe <dir_find>
 8018806:	4603      	mov	r3, r0
 8018808:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018810:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018812:	7dfb      	ldrb	r3, [r7, #23]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d00a      	beq.n	801882e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018818:	7dfb      	ldrb	r3, [r7, #23]
 801881a:	2b04      	cmp	r3, #4
 801881c:	d127      	bne.n	801886e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801881e:	7afb      	ldrb	r3, [r7, #11]
 8018820:	f003 0304 	and.w	r3, r3, #4
 8018824:	2b00      	cmp	r3, #0
 8018826:	d122      	bne.n	801886e <follow_path+0xd2>
 8018828:	2305      	movs	r3, #5
 801882a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801882c:	e01f      	b.n	801886e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801882e:	7afb      	ldrb	r3, [r7, #11]
 8018830:	f003 0304 	and.w	r3, r3, #4
 8018834:	2b00      	cmp	r3, #0
 8018836:	d11c      	bne.n	8018872 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018838:	693b      	ldr	r3, [r7, #16]
 801883a:	799b      	ldrb	r3, [r3, #6]
 801883c:	f003 0310 	and.w	r3, r3, #16
 8018840:	2b00      	cmp	r3, #0
 8018842:	d102      	bne.n	801884a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018844:	2305      	movs	r3, #5
 8018846:	75fb      	strb	r3, [r7, #23]
 8018848:	e014      	b.n	8018874 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	695b      	ldr	r3, [r3, #20]
 8018854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018858:	4413      	add	r3, r2
 801885a:	4619      	mov	r1, r3
 801885c:	68f8      	ldr	r0, [r7, #12]
 801885e:	f7ff f988 	bl	8017b72 <ld_clust>
 8018862:	4602      	mov	r2, r0
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018868:	e7c0      	b.n	80187ec <follow_path+0x50>
			if (res != FR_OK) break;
 801886a:	bf00      	nop
 801886c:	e002      	b.n	8018874 <follow_path+0xd8>
				break;
 801886e:	bf00      	nop
 8018870:	e000      	b.n	8018874 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018872:	bf00      	nop
			}
		}
	}

	return res;
 8018874:	7dfb      	ldrb	r3, [r7, #23]
}
 8018876:	4618      	mov	r0, r3
 8018878:	3718      	adds	r7, #24
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}

0801887e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801887e:	b480      	push	{r7}
 8018880:	b087      	sub	sp, #28
 8018882:	af00      	add	r7, sp, #0
 8018884:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018886:	f04f 33ff 	mov.w	r3, #4294967295
 801888a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d031      	beq.n	80188f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	617b      	str	r3, [r7, #20]
 801889a:	e002      	b.n	80188a2 <get_ldnumber+0x24>
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	3301      	adds	r3, #1
 80188a0:	617b      	str	r3, [r7, #20]
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	2b1f      	cmp	r3, #31
 80188a8:	d903      	bls.n	80188b2 <get_ldnumber+0x34>
 80188aa:	697b      	ldr	r3, [r7, #20]
 80188ac:	781b      	ldrb	r3, [r3, #0]
 80188ae:	2b3a      	cmp	r3, #58	; 0x3a
 80188b0:	d1f4      	bne.n	801889c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	781b      	ldrb	r3, [r3, #0]
 80188b6:	2b3a      	cmp	r3, #58	; 0x3a
 80188b8:	d11c      	bne.n	80188f4 <get_ldnumber+0x76>
			tp = *path;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	1c5a      	adds	r2, r3, #1
 80188c4:	60fa      	str	r2, [r7, #12]
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	3b30      	subs	r3, #48	; 0x30
 80188ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	2b09      	cmp	r3, #9
 80188d0:	d80e      	bhi.n	80188f0 <get_ldnumber+0x72>
 80188d2:	68fa      	ldr	r2, [r7, #12]
 80188d4:	697b      	ldr	r3, [r7, #20]
 80188d6:	429a      	cmp	r2, r3
 80188d8:	d10a      	bne.n	80188f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d107      	bne.n	80188f0 <get_ldnumber+0x72>
					vol = (int)i;
 80188e0:	68bb      	ldr	r3, [r7, #8]
 80188e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	3301      	adds	r3, #1
 80188e8:	617b      	str	r3, [r7, #20]
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	697a      	ldr	r2, [r7, #20]
 80188ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	e002      	b.n	80188fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80188f4:	2300      	movs	r3, #0
 80188f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80188f8:	693b      	ldr	r3, [r7, #16]
}
 80188fa:	4618      	mov	r0, r3
 80188fc:	371c      	adds	r7, #28
 80188fe:	46bd      	mov	sp, r7
 8018900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018904:	4770      	bx	lr
	...

08018908 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b082      	sub	sp, #8
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
 8018910:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2200      	movs	r2, #0
 8018916:	70da      	strb	r2, [r3, #3]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	f04f 32ff 	mov.w	r2, #4294967295
 801891e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018920:	6839      	ldr	r1, [r7, #0]
 8018922:	6878      	ldr	r0, [r7, #4]
 8018924:	f7fe fc1e 	bl	8017164 <move_window>
 8018928:	4603      	mov	r3, r0
 801892a:	2b00      	cmp	r3, #0
 801892c:	d001      	beq.n	8018932 <check_fs+0x2a>
 801892e:	2304      	movs	r3, #4
 8018930:	e038      	b.n	80189a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	3334      	adds	r3, #52	; 0x34
 8018936:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801893a:	4618      	mov	r0, r3
 801893c:	f7fe f962 	bl	8016c04 <ld_word>
 8018940:	4603      	mov	r3, r0
 8018942:	461a      	mov	r2, r3
 8018944:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018948:	429a      	cmp	r2, r3
 801894a:	d001      	beq.n	8018950 <check_fs+0x48>
 801894c:	2303      	movs	r3, #3
 801894e:	e029      	b.n	80189a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018956:	2be9      	cmp	r3, #233	; 0xe9
 8018958:	d009      	beq.n	801896e <check_fs+0x66>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018960:	2beb      	cmp	r3, #235	; 0xeb
 8018962:	d11e      	bne.n	80189a2 <check_fs+0x9a>
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801896a:	2b90      	cmp	r3, #144	; 0x90
 801896c:	d119      	bne.n	80189a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	3334      	adds	r3, #52	; 0x34
 8018972:	3336      	adds	r3, #54	; 0x36
 8018974:	4618      	mov	r0, r3
 8018976:	f7fe f95d 	bl	8016c34 <ld_dword>
 801897a:	4603      	mov	r3, r0
 801897c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018980:	4a0a      	ldr	r2, [pc, #40]	; (80189ac <check_fs+0xa4>)
 8018982:	4293      	cmp	r3, r2
 8018984:	d101      	bne.n	801898a <check_fs+0x82>
 8018986:	2300      	movs	r3, #0
 8018988:	e00c      	b.n	80189a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	3334      	adds	r3, #52	; 0x34
 801898e:	3352      	adds	r3, #82	; 0x52
 8018990:	4618      	mov	r0, r3
 8018992:	f7fe f94f 	bl	8016c34 <ld_dword>
 8018996:	4603      	mov	r3, r0
 8018998:	4a05      	ldr	r2, [pc, #20]	; (80189b0 <check_fs+0xa8>)
 801899a:	4293      	cmp	r3, r2
 801899c:	d101      	bne.n	80189a2 <check_fs+0x9a>
 801899e:	2300      	movs	r3, #0
 80189a0:	e000      	b.n	80189a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80189a2:	2302      	movs	r3, #2
}
 80189a4:	4618      	mov	r0, r3
 80189a6:	3708      	adds	r7, #8
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}
 80189ac:	00544146 	.word	0x00544146
 80189b0:	33544146 	.word	0x33544146

080189b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b096      	sub	sp, #88	; 0x58
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	60f8      	str	r0, [r7, #12]
 80189bc:	60b9      	str	r1, [r7, #8]
 80189be:	4613      	mov	r3, r2
 80189c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80189c2:	68bb      	ldr	r3, [r7, #8]
 80189c4:	2200      	movs	r2, #0
 80189c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80189c8:	68f8      	ldr	r0, [r7, #12]
 80189ca:	f7ff ff58 	bl	801887e <get_ldnumber>
 80189ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80189d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	da01      	bge.n	80189da <find_volume+0x26>
 80189d6:	230b      	movs	r3, #11
 80189d8:	e230      	b.n	8018e3c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80189da:	4aa1      	ldr	r2, [pc, #644]	; (8018c60 <find_volume+0x2ac>)
 80189dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80189e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80189e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d101      	bne.n	80189ee <find_volume+0x3a>
 80189ea:	230c      	movs	r3, #12
 80189ec:	e226      	b.n	8018e3c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80189f4:	79fb      	ldrb	r3, [r7, #7]
 80189f6:	f023 0301 	bic.w	r3, r3, #1
 80189fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80189fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189fe:	781b      	ldrb	r3, [r3, #0]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d01a      	beq.n	8018a3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8018a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a06:	785b      	ldrb	r3, [r3, #1]
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7fe f85d 	bl	8016ac8 <disk_status>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018a18:	f003 0301 	and.w	r3, r3, #1
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d10c      	bne.n	8018a3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018a20:	79fb      	ldrb	r3, [r7, #7]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d007      	beq.n	8018a36 <find_volume+0x82>
 8018a26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018a2a:	f003 0304 	and.w	r3, r3, #4
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d001      	beq.n	8018a36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018a32:	230a      	movs	r3, #10
 8018a34:	e202      	b.n	8018e3c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8018a36:	2300      	movs	r3, #0
 8018a38:	e200      	b.n	8018e3c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a42:	b2da      	uxtb	r2, r3
 8018a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a4a:	785b      	ldrb	r3, [r3, #1]
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f7fe f855 	bl	8016afc <disk_initialize>
 8018a52:	4603      	mov	r3, r0
 8018a54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018a58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018a5c:	f003 0301 	and.w	r3, r3, #1
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d001      	beq.n	8018a68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018a64:	2303      	movs	r3, #3
 8018a66:	e1e9      	b.n	8018e3c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018a68:	79fb      	ldrb	r3, [r7, #7]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d007      	beq.n	8018a7e <find_volume+0xca>
 8018a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018a72:	f003 0304 	and.w	r3, r3, #4
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d001      	beq.n	8018a7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018a7a:	230a      	movs	r3, #10
 8018a7c:	e1de      	b.n	8018e3c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8018a7e:	2300      	movs	r3, #0
 8018a80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018a82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018a86:	f7ff ff3f 	bl	8018908 <check_fs>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a94:	2b02      	cmp	r3, #2
 8018a96:	d149      	bne.n	8018b2c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018a98:	2300      	movs	r3, #0
 8018a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8018a9c:	e01e      	b.n	8018adc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018aa6:	011b      	lsls	r3, r3, #4
 8018aa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018aac:	4413      	add	r3, r2
 8018aae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab2:	3304      	adds	r3, #4
 8018ab4:	781b      	ldrb	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d006      	beq.n	8018ac8 <find_volume+0x114>
 8018aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abc:	3308      	adds	r3, #8
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7fe f8b8 	bl	8016c34 <ld_dword>
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	e000      	b.n	8018aca <find_volume+0x116>
 8018ac8:	2200      	movs	r2, #0
 8018aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018acc:	009b      	lsls	r3, r3, #2
 8018ace:	3358      	adds	r3, #88	; 0x58
 8018ad0:	443b      	add	r3, r7
 8018ad2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ad8:	3301      	adds	r3, #1
 8018ada:	643b      	str	r3, [r7, #64]	; 0x40
 8018adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ade:	2b03      	cmp	r3, #3
 8018ae0:	d9dd      	bls.n	8018a9e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d002      	beq.n	8018af2 <find_volume+0x13e>
 8018aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018aee:	3b01      	subs	r3, #1
 8018af0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	3358      	adds	r3, #88	; 0x58
 8018af8:	443b      	add	r3, r7
 8018afa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018afe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d005      	beq.n	8018b12 <find_volume+0x15e>
 8018b06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018b0a:	f7ff fefd 	bl	8018908 <check_fs>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	e000      	b.n	8018b14 <find_volume+0x160>
 8018b12:	2303      	movs	r3, #3
 8018b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b1c:	2b01      	cmp	r3, #1
 8018b1e:	d905      	bls.n	8018b2c <find_volume+0x178>
 8018b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b22:	3301      	adds	r3, #1
 8018b24:	643b      	str	r3, [r7, #64]	; 0x40
 8018b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b28:	2b03      	cmp	r3, #3
 8018b2a:	d9e2      	bls.n	8018af2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b30:	2b04      	cmp	r3, #4
 8018b32:	d101      	bne.n	8018b38 <find_volume+0x184>
 8018b34:	2301      	movs	r3, #1
 8018b36:	e181      	b.n	8018e3c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018b38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b3c:	2b01      	cmp	r3, #1
 8018b3e:	d901      	bls.n	8018b44 <find_volume+0x190>
 8018b40:	230d      	movs	r3, #13
 8018b42:	e17b      	b.n	8018e3c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b46:	3334      	adds	r3, #52	; 0x34
 8018b48:	330b      	adds	r3, #11
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7fe f85a 	bl	8016c04 <ld_word>
 8018b50:	4603      	mov	r3, r0
 8018b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b56:	d001      	beq.n	8018b5c <find_volume+0x1a8>
 8018b58:	230d      	movs	r3, #13
 8018b5a:	e16f      	b.n	8018e3c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5e:	3334      	adds	r3, #52	; 0x34
 8018b60:	3316      	adds	r3, #22
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7fe f84e 	bl	8016c04 <ld_word>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d106      	bne.n	8018b80 <find_volume+0x1cc>
 8018b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b74:	3334      	adds	r3, #52	; 0x34
 8018b76:	3324      	adds	r3, #36	; 0x24
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7fe f85b 	bl	8016c34 <ld_dword>
 8018b7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018b84:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b88:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8018b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b92:	789b      	ldrb	r3, [r3, #2]
 8018b94:	2b01      	cmp	r3, #1
 8018b96:	d005      	beq.n	8018ba4 <find_volume+0x1f0>
 8018b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9a:	789b      	ldrb	r3, [r3, #2]
 8018b9c:	2b02      	cmp	r3, #2
 8018b9e:	d001      	beq.n	8018ba4 <find_volume+0x1f0>
 8018ba0:	230d      	movs	r3, #13
 8018ba2:	e14b      	b.n	8018e3c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ba6:	789b      	ldrb	r3, [r3, #2]
 8018ba8:	461a      	mov	r2, r3
 8018baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bac:	fb02 f303 	mul.w	r3, r2, r3
 8018bb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc0:	895b      	ldrh	r3, [r3, #10]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d008      	beq.n	8018bd8 <find_volume+0x224>
 8018bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc8:	895b      	ldrh	r3, [r3, #10]
 8018bca:	461a      	mov	r2, r3
 8018bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bce:	895b      	ldrh	r3, [r3, #10]
 8018bd0:	3b01      	subs	r3, #1
 8018bd2:	4013      	ands	r3, r2
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d001      	beq.n	8018bdc <find_volume+0x228>
 8018bd8:	230d      	movs	r3, #13
 8018bda:	e12f      	b.n	8018e3c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bde:	3334      	adds	r3, #52	; 0x34
 8018be0:	3311      	adds	r3, #17
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7fe f80e 	bl	8016c04 <ld_word>
 8018be8:	4603      	mov	r3, r0
 8018bea:	461a      	mov	r2, r3
 8018bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf2:	891b      	ldrh	r3, [r3, #8]
 8018bf4:	f003 030f 	and.w	r3, r3, #15
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d001      	beq.n	8018c02 <find_volume+0x24e>
 8018bfe:	230d      	movs	r3, #13
 8018c00:	e11c      	b.n	8018e3c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c04:	3334      	adds	r3, #52	; 0x34
 8018c06:	3313      	adds	r3, #19
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7fd fffb 	bl	8016c04 <ld_word>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d106      	bne.n	8018c26 <find_volume+0x272>
 8018c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c1a:	3334      	adds	r3, #52	; 0x34
 8018c1c:	3320      	adds	r3, #32
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f7fe f808 	bl	8016c34 <ld_dword>
 8018c24:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8018c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c28:	3334      	adds	r3, #52	; 0x34
 8018c2a:	330e      	adds	r3, #14
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f7fd ffe9 	bl	8016c04 <ld_word>
 8018c32:	4603      	mov	r3, r0
 8018c34:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8018c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d101      	bne.n	8018c40 <find_volume+0x28c>
 8018c3c:	230d      	movs	r3, #13
 8018c3e:	e0fd      	b.n	8018e3c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018c40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c44:	4413      	add	r3, r2
 8018c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c48:	8912      	ldrh	r2, [r2, #8]
 8018c4a:	0912      	lsrs	r2, r2, #4
 8018c4c:	b292      	uxth	r2, r2
 8018c4e:	4413      	add	r3, r2
 8018c50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d204      	bcs.n	8018c64 <find_volume+0x2b0>
 8018c5a:	230d      	movs	r3, #13
 8018c5c:	e0ee      	b.n	8018e3c <find_volume+0x488>
 8018c5e:	bf00      	nop
 8018c60:	20001a88 	.word	0x20001a88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c68:	1ad3      	subs	r3, r2, r3
 8018c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c6c:	8952      	ldrh	r2, [r2, #10]
 8018c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c72:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d101      	bne.n	8018c7e <find_volume+0x2ca>
 8018c7a:	230d      	movs	r3, #13
 8018c7c:	e0de      	b.n	8018e3c <find_volume+0x488>
		fmt = FS_FAT32;
 8018c7e:	2303      	movs	r3, #3
 8018c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d802      	bhi.n	8018c94 <find_volume+0x2e0>
 8018c8e:	2302      	movs	r3, #2
 8018c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c96:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d802      	bhi.n	8018ca4 <find_volume+0x2f0>
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ca6:	1c9a      	adds	r2, r3, #2
 8018ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018caa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8018cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018cb0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018cb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018cb6:	441a      	add	r2, r3
 8018cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8018cbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cc0:	441a      	add	r2, r3
 8018cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cc4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8018cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018cca:	2b03      	cmp	r3, #3
 8018ccc:	d11e      	bne.n	8018d0c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd0:	3334      	adds	r3, #52	; 0x34
 8018cd2:	332a      	adds	r3, #42	; 0x2a
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7fd ff95 	bl	8016c04 <ld_word>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d001      	beq.n	8018ce4 <find_volume+0x330>
 8018ce0:	230d      	movs	r3, #13
 8018ce2:	e0ab      	b.n	8018e3c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce6:	891b      	ldrh	r3, [r3, #8]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d001      	beq.n	8018cf0 <find_volume+0x33c>
 8018cec:	230d      	movs	r3, #13
 8018cee:	e0a5      	b.n	8018e3c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cf2:	3334      	adds	r3, #52	; 0x34
 8018cf4:	332c      	adds	r3, #44	; 0x2c
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fd ff9c 	bl	8016c34 <ld_dword>
 8018cfc:	4602      	mov	r2, r0
 8018cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d04:	699b      	ldr	r3, [r3, #24]
 8018d06:	009b      	lsls	r3, r3, #2
 8018d08:	647b      	str	r3, [r7, #68]	; 0x44
 8018d0a:	e01f      	b.n	8018d4c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d0e:	891b      	ldrh	r3, [r3, #8]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d101      	bne.n	8018d18 <find_volume+0x364>
 8018d14:	230d      	movs	r3, #13
 8018d16:	e091      	b.n	8018e3c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d1e:	441a      	add	r2, r3
 8018d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d22:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018d28:	2b02      	cmp	r3, #2
 8018d2a:	d103      	bne.n	8018d34 <find_volume+0x380>
 8018d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d2e:	699b      	ldr	r3, [r3, #24]
 8018d30:	005b      	lsls	r3, r3, #1
 8018d32:	e00a      	b.n	8018d4a <find_volume+0x396>
 8018d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d36:	699a      	ldr	r2, [r3, #24]
 8018d38:	4613      	mov	r3, r2
 8018d3a:	005b      	lsls	r3, r3, #1
 8018d3c:	4413      	add	r3, r2
 8018d3e:	085a      	lsrs	r2, r3, #1
 8018d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d42:	699b      	ldr	r3, [r3, #24]
 8018d44:	f003 0301 	and.w	r3, r3, #1
 8018d48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018d4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d4e:	69da      	ldr	r2, [r3, #28]
 8018d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018d56:	0a5b      	lsrs	r3, r3, #9
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d201      	bcs.n	8018d60 <find_volume+0x3ac>
 8018d5c:	230d      	movs	r3, #13
 8018d5e:	e06d      	b.n	8018e3c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d62:	f04f 32ff 	mov.w	r2, #4294967295
 8018d66:	615a      	str	r2, [r3, #20]
 8018d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d6a:	695a      	ldr	r2, [r3, #20]
 8018d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8018d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d72:	2280      	movs	r2, #128	; 0x80
 8018d74:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018d7a:	2b03      	cmp	r3, #3
 8018d7c:	d149      	bne.n	8018e12 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d80:	3334      	adds	r3, #52	; 0x34
 8018d82:	3330      	adds	r3, #48	; 0x30
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7fd ff3d 	bl	8016c04 <ld_word>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	2b01      	cmp	r3, #1
 8018d8e:	d140      	bne.n	8018e12 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d92:	3301      	adds	r3, #1
 8018d94:	4619      	mov	r1, r3
 8018d96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018d98:	f7fe f9e4 	bl	8017164 <move_window>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d137      	bne.n	8018e12 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8018da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018da4:	2200      	movs	r2, #0
 8018da6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018daa:	3334      	adds	r3, #52	; 0x34
 8018dac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7fd ff27 	bl	8016c04 <ld_word>
 8018db6:	4603      	mov	r3, r0
 8018db8:	461a      	mov	r2, r3
 8018dba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d127      	bne.n	8018e12 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dc4:	3334      	adds	r3, #52	; 0x34
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fd ff34 	bl	8016c34 <ld_dword>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	4a1d      	ldr	r2, [pc, #116]	; (8018e44 <find_volume+0x490>)
 8018dd0:	4293      	cmp	r3, r2
 8018dd2:	d11e      	bne.n	8018e12 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dd6:	3334      	adds	r3, #52	; 0x34
 8018dd8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7fd ff29 	bl	8016c34 <ld_dword>
 8018de2:	4603      	mov	r3, r0
 8018de4:	4a18      	ldr	r2, [pc, #96]	; (8018e48 <find_volume+0x494>)
 8018de6:	4293      	cmp	r3, r2
 8018de8:	d113      	bne.n	8018e12 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dec:	3334      	adds	r3, #52	; 0x34
 8018dee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018df2:	4618      	mov	r0, r3
 8018df4:	f7fd ff1e 	bl	8016c34 <ld_dword>
 8018df8:	4602      	mov	r2, r0
 8018dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dfc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e00:	3334      	adds	r3, #52	; 0x34
 8018e02:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7fd ff14 	bl	8016c34 <ld_dword>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e10:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e14:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018e18:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018e1a:	4b0c      	ldr	r3, [pc, #48]	; (8018e4c <find_volume+0x498>)
 8018e1c:	881b      	ldrh	r3, [r3, #0]
 8018e1e:	3301      	adds	r3, #1
 8018e20:	b29a      	uxth	r2, r3
 8018e22:	4b0a      	ldr	r3, [pc, #40]	; (8018e4c <find_volume+0x498>)
 8018e24:	801a      	strh	r2, [r3, #0]
 8018e26:	4b09      	ldr	r3, [pc, #36]	; (8018e4c <find_volume+0x498>)
 8018e28:	881a      	ldrh	r2, [r3, #0]
 8018e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e2c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e30:	4a07      	ldr	r2, [pc, #28]	; (8018e50 <find_volume+0x49c>)
 8018e32:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018e34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018e36:	f7fe f92d 	bl	8017094 <clear_lock>
#endif
	return FR_OK;
 8018e3a:	2300      	movs	r3, #0
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3758      	adds	r7, #88	; 0x58
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}
 8018e44:	41615252 	.word	0x41615252
 8018e48:	61417272 	.word	0x61417272
 8018e4c:	20001a8c 	.word	0x20001a8c
 8018e50:	20001ab0 	.word	0x20001ab0

08018e54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b084      	sub	sp, #16
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018e5e:	2309      	movs	r3, #9
 8018e60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d01c      	beq.n	8018ea2 <validate+0x4e>
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d018      	beq.n	8018ea2 <validate+0x4e>
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d013      	beq.n	8018ea2 <validate+0x4e>
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	889a      	ldrh	r2, [r3, #4]
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	88db      	ldrh	r3, [r3, #6]
 8018e84:	429a      	cmp	r2, r3
 8018e86:	d10c      	bne.n	8018ea2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	785b      	ldrb	r3, [r3, #1]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7fd fe1a 	bl	8016ac8 <disk_status>
 8018e94:	4603      	mov	r3, r0
 8018e96:	f003 0301 	and.w	r3, r3, #1
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d101      	bne.n	8018ea2 <validate+0x4e>
			res = FR_OK;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018ea2:	7bfb      	ldrb	r3, [r7, #15]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d102      	bne.n	8018eae <validate+0x5a>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	e000      	b.n	8018eb0 <validate+0x5c>
 8018eae:	2300      	movs	r3, #0
 8018eb0:	683a      	ldr	r2, [r7, #0]
 8018eb2:	6013      	str	r3, [r2, #0]
	return res;
 8018eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
	...

08018ec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b088      	sub	sp, #32
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	60f8      	str	r0, [r7, #12]
 8018ec8:	60b9      	str	r1, [r7, #8]
 8018eca:	4613      	mov	r3, r2
 8018ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018ed2:	f107 0310 	add.w	r3, r7, #16
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f7ff fcd1 	bl	801887e <get_ldnumber>
 8018edc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018ede:	69fb      	ldr	r3, [r7, #28]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	da01      	bge.n	8018ee8 <f_mount+0x28>
 8018ee4:	230b      	movs	r3, #11
 8018ee6:	e02b      	b.n	8018f40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018ee8:	4a17      	ldr	r2, [pc, #92]	; (8018f48 <f_mount+0x88>)
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018ef0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018ef2:	69bb      	ldr	r3, [r7, #24]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d005      	beq.n	8018f04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018ef8:	69b8      	ldr	r0, [r7, #24]
 8018efa:	f7fe f8cb 	bl	8017094 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018efe:	69bb      	ldr	r3, [r7, #24]
 8018f00:	2200      	movs	r2, #0
 8018f02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d002      	beq.n	8018f10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018f10:	68fa      	ldr	r2, [r7, #12]
 8018f12:	490d      	ldr	r1, [pc, #52]	; (8018f48 <f_mount+0x88>)
 8018f14:	69fb      	ldr	r3, [r7, #28]
 8018f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d002      	beq.n	8018f26 <f_mount+0x66>
 8018f20:	79fb      	ldrb	r3, [r7, #7]
 8018f22:	2b01      	cmp	r3, #1
 8018f24:	d001      	beq.n	8018f2a <f_mount+0x6a>
 8018f26:	2300      	movs	r3, #0
 8018f28:	e00a      	b.n	8018f40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018f2a:	f107 010c 	add.w	r1, r7, #12
 8018f2e:	f107 0308 	add.w	r3, r7, #8
 8018f32:	2200      	movs	r2, #0
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7ff fd3d 	bl	80189b4 <find_volume>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f40:	4618      	mov	r0, r3
 8018f42:	3720      	adds	r7, #32
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd80      	pop	{r7, pc}
 8018f48:	20001a88 	.word	0x20001a88

08018f4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b09a      	sub	sp, #104	; 0x68
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	4613      	mov	r3, r2
 8018f58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d101      	bne.n	8018f64 <f_open+0x18>
 8018f60:	2309      	movs	r3, #9
 8018f62:	e1ad      	b.n	80192c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018f64:	79fb      	ldrb	r3, [r7, #7]
 8018f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018f6c:	79fa      	ldrb	r2, [r7, #7]
 8018f6e:	f107 0114 	add.w	r1, r7, #20
 8018f72:	f107 0308 	add.w	r3, r7, #8
 8018f76:	4618      	mov	r0, r3
 8018f78:	f7ff fd1c 	bl	80189b4 <find_volume>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8018f82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	f040 8191 	bne.w	80192ae <f_open+0x362>
		dj.obj.fs = fs;
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018f90:	68ba      	ldr	r2, [r7, #8]
 8018f92:	f107 0318 	add.w	r3, r7, #24
 8018f96:	4611      	mov	r1, r2
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7ff fbff 	bl	801879c <follow_path>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d11a      	bne.n	8018fe2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018fac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018fb0:	b25b      	sxtb	r3, r3
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	da03      	bge.n	8018fbe <f_open+0x72>
				res = FR_INVALID_NAME;
 8018fb6:	2306      	movs	r3, #6
 8018fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018fbc:	e011      	b.n	8018fe2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018fbe:	79fb      	ldrb	r3, [r7, #7]
 8018fc0:	f023 0301 	bic.w	r3, r3, #1
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	bf14      	ite	ne
 8018fc8:	2301      	movne	r3, #1
 8018fca:	2300      	moveq	r3, #0
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	461a      	mov	r2, r3
 8018fd0:	f107 0318 	add.w	r3, r7, #24
 8018fd4:	4611      	mov	r1, r2
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7fd ff14 	bl	8016e04 <chk_lock>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018fe2:	79fb      	ldrb	r3, [r7, #7]
 8018fe4:	f003 031c 	and.w	r3, r3, #28
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d07f      	beq.n	80190ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018fec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d017      	beq.n	8019024 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018ff8:	2b04      	cmp	r3, #4
 8018ffa:	d10e      	bne.n	801901a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018ffc:	f7fd ff5e 	bl	8016ebc <enq_lock>
 8019000:	4603      	mov	r3, r0
 8019002:	2b00      	cmp	r3, #0
 8019004:	d006      	beq.n	8019014 <f_open+0xc8>
 8019006:	f107 0318 	add.w	r3, r7, #24
 801900a:	4618      	mov	r0, r3
 801900c:	f7ff f838 	bl	8018080 <dir_register>
 8019010:	4603      	mov	r3, r0
 8019012:	e000      	b.n	8019016 <f_open+0xca>
 8019014:	2312      	movs	r3, #18
 8019016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801901a:	79fb      	ldrb	r3, [r7, #7]
 801901c:	f043 0308 	orr.w	r3, r3, #8
 8019020:	71fb      	strb	r3, [r7, #7]
 8019022:	e010      	b.n	8019046 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019024:	7fbb      	ldrb	r3, [r7, #30]
 8019026:	f003 0311 	and.w	r3, r3, #17
 801902a:	2b00      	cmp	r3, #0
 801902c:	d003      	beq.n	8019036 <f_open+0xea>
					res = FR_DENIED;
 801902e:	2307      	movs	r3, #7
 8019030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019034:	e007      	b.n	8019046 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019036:	79fb      	ldrb	r3, [r7, #7]
 8019038:	f003 0304 	and.w	r3, r3, #4
 801903c:	2b00      	cmp	r3, #0
 801903e:	d002      	beq.n	8019046 <f_open+0xfa>
 8019040:	2308      	movs	r3, #8
 8019042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019046:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801904a:	2b00      	cmp	r3, #0
 801904c:	d168      	bne.n	8019120 <f_open+0x1d4>
 801904e:	79fb      	ldrb	r3, [r7, #7]
 8019050:	f003 0308 	and.w	r3, r3, #8
 8019054:	2b00      	cmp	r3, #0
 8019056:	d063      	beq.n	8019120 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019058:	f7f8 fce8 	bl	8011a2c <get_fattime>
 801905c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019060:	330e      	adds	r3, #14
 8019062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019064:	4618      	mov	r0, r3
 8019066:	f7fd fe23 	bl	8016cb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801906c:	3316      	adds	r3, #22
 801906e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019070:	4618      	mov	r0, r3
 8019072:	f7fd fe1d 	bl	8016cb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019078:	330b      	adds	r3, #11
 801907a:	2220      	movs	r2, #32
 801907c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801907e:	697b      	ldr	r3, [r7, #20]
 8019080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019082:	4611      	mov	r1, r2
 8019084:	4618      	mov	r0, r3
 8019086:	f7fe fd74 	bl	8017b72 <ld_clust>
 801908a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019090:	2200      	movs	r2, #0
 8019092:	4618      	mov	r0, r3
 8019094:	f7fe fd8c 	bl	8017bb0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801909a:	331c      	adds	r3, #28
 801909c:	2100      	movs	r1, #0
 801909e:	4618      	mov	r0, r3
 80190a0:	f7fd fe06 	bl	8016cb0 <st_dword>
					fs->wflag = 1;
 80190a4:	697b      	ldr	r3, [r7, #20]
 80190a6:	2201      	movs	r2, #1
 80190a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80190aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d037      	beq.n	8019120 <f_open+0x1d4>
						dw = fs->winsect;
 80190b0:	697b      	ldr	r3, [r7, #20]
 80190b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190b4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80190b6:	f107 0318 	add.w	r3, r7, #24
 80190ba:	2200      	movs	r2, #0
 80190bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80190be:	4618      	mov	r0, r3
 80190c0:	f7fe fa9f 	bl	8017602 <remove_chain>
 80190c4:	4603      	mov	r3, r0
 80190c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80190ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d126      	bne.n	8019120 <f_open+0x1d4>
							res = move_window(fs, dw);
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7fe f844 	bl	8017164 <move_window>
 80190dc:	4603      	mov	r3, r0
 80190de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80190e6:	3a01      	subs	r2, #1
 80190e8:	611a      	str	r2, [r3, #16]
 80190ea:	e019      	b.n	8019120 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80190ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d115      	bne.n	8019120 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80190f4:	7fbb      	ldrb	r3, [r7, #30]
 80190f6:	f003 0310 	and.w	r3, r3, #16
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d003      	beq.n	8019106 <f_open+0x1ba>
					res = FR_NO_FILE;
 80190fe:	2304      	movs	r3, #4
 8019100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019104:	e00c      	b.n	8019120 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019106:	79fb      	ldrb	r3, [r7, #7]
 8019108:	f003 0302 	and.w	r3, r3, #2
 801910c:	2b00      	cmp	r3, #0
 801910e:	d007      	beq.n	8019120 <f_open+0x1d4>
 8019110:	7fbb      	ldrb	r3, [r7, #30]
 8019112:	f003 0301 	and.w	r3, r3, #1
 8019116:	2b00      	cmp	r3, #0
 8019118:	d002      	beq.n	8019120 <f_open+0x1d4>
						res = FR_DENIED;
 801911a:	2307      	movs	r3, #7
 801911c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019120:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019124:	2b00      	cmp	r3, #0
 8019126:	d128      	bne.n	801917a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019128:	79fb      	ldrb	r3, [r7, #7]
 801912a:	f003 0308 	and.w	r3, r3, #8
 801912e:	2b00      	cmp	r3, #0
 8019130:	d003      	beq.n	801913a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019132:	79fb      	ldrb	r3, [r7, #7]
 8019134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019138:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019148:	79fb      	ldrb	r3, [r7, #7]
 801914a:	f023 0301 	bic.w	r3, r3, #1
 801914e:	2b00      	cmp	r3, #0
 8019150:	bf14      	ite	ne
 8019152:	2301      	movne	r3, #1
 8019154:	2300      	moveq	r3, #0
 8019156:	b2db      	uxtb	r3, r3
 8019158:	461a      	mov	r2, r3
 801915a:	f107 0318 	add.w	r3, r7, #24
 801915e:	4611      	mov	r1, r2
 8019160:	4618      	mov	r0, r3
 8019162:	f7fd fecd 	bl	8016f00 <inc_lock>
 8019166:	4602      	mov	r2, r0
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	691b      	ldr	r3, [r3, #16]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d102      	bne.n	801917a <f_open+0x22e>
 8019174:	2302      	movs	r3, #2
 8019176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801917a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801917e:	2b00      	cmp	r3, #0
 8019180:	f040 8095 	bne.w	80192ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019184:	697b      	ldr	r3, [r7, #20]
 8019186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019188:	4611      	mov	r1, r2
 801918a:	4618      	mov	r0, r3
 801918c:	f7fe fcf1 	bl	8017b72 <ld_clust>
 8019190:	4602      	mov	r2, r0
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019198:	331c      	adds	r3, #28
 801919a:	4618      	mov	r0, r3
 801919c:	f7fd fd4a 	bl	8016c34 <ld_dword>
 80191a0:	4602      	mov	r2, r0
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	2200      	movs	r2, #0
 80191aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80191ac:	697a      	ldr	r2, [r7, #20]
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	88da      	ldrh	r2, [r3, #6]
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	79fa      	ldrb	r2, [r7, #7]
 80191be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	2200      	movs	r2, #0
 80191c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	2200      	movs	r2, #0
 80191ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	2200      	movs	r2, #0
 80191d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	3330      	adds	r3, #48	; 0x30
 80191d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191da:	2100      	movs	r1, #0
 80191dc:	4618      	mov	r0, r3
 80191de:	f7fd fdb4 	bl	8016d4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80191e2:	79fb      	ldrb	r3, [r7, #7]
 80191e4:	f003 0320 	and.w	r3, r3, #32
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d060      	beq.n	80192ae <f_open+0x362>
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	68db      	ldr	r3, [r3, #12]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d05c      	beq.n	80192ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	68da      	ldr	r2, [r3, #12]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	895b      	ldrh	r3, [r3, #10]
 8019200:	025b      	lsls	r3, r3, #9
 8019202:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	689b      	ldr	r3, [r3, #8]
 8019208:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	68db      	ldr	r3, [r3, #12]
 801920e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019210:	e016      	b.n	8019240 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019216:	4618      	mov	r0, r3
 8019218:	f7fe f85f 	bl	80172da <get_fat>
 801921c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801921e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019220:	2b01      	cmp	r3, #1
 8019222:	d802      	bhi.n	801922a <f_open+0x2de>
 8019224:	2302      	movs	r3, #2
 8019226:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801922a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801922c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019230:	d102      	bne.n	8019238 <f_open+0x2ec>
 8019232:	2301      	movs	r3, #1
 8019234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801923a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801923c:	1ad3      	subs	r3, r2, r3
 801923e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019240:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019244:	2b00      	cmp	r3, #0
 8019246:	d103      	bne.n	8019250 <f_open+0x304>
 8019248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801924a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801924c:	429a      	cmp	r2, r3
 801924e:	d8e0      	bhi.n	8019212 <f_open+0x2c6>
				}
				fp->clust = clst;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019254:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801925a:	2b00      	cmp	r3, #0
 801925c:	d127      	bne.n	80192ae <f_open+0x362>
 801925e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019264:	2b00      	cmp	r3, #0
 8019266:	d022      	beq.n	80192ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019268:	697b      	ldr	r3, [r7, #20]
 801926a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801926c:	4618      	mov	r0, r3
 801926e:	f7fe f815 	bl	801729c <clust2sect>
 8019272:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019276:	2b00      	cmp	r3, #0
 8019278:	d103      	bne.n	8019282 <f_open+0x336>
						res = FR_INT_ERR;
 801927a:	2302      	movs	r3, #2
 801927c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019280:	e015      	b.n	80192ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019284:	0a5a      	lsrs	r2, r3, #9
 8019286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019288:	441a      	add	r2, r3
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801928e:	697b      	ldr	r3, [r7, #20]
 8019290:	7858      	ldrb	r0, [r3, #1]
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	6a1a      	ldr	r2, [r3, #32]
 801929c:	2301      	movs	r3, #1
 801929e:	f7fd fc53 	bl	8016b48 <disk_read>
 80192a2:	4603      	mov	r3, r0
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d002      	beq.n	80192ae <f_open+0x362>
 80192a8:	2301      	movs	r3, #1
 80192aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80192ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d002      	beq.n	80192bc <f_open+0x370>
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	2200      	movs	r2, #0
 80192ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80192bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80192c0:	4618      	mov	r0, r3
 80192c2:	3768      	adds	r7, #104	; 0x68
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}

080192c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b08c      	sub	sp, #48	; 0x30
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	60f8      	str	r0, [r7, #12]
 80192d0:	60b9      	str	r1, [r7, #8]
 80192d2:	607a      	str	r2, [r7, #4]
 80192d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	2200      	movs	r2, #0
 80192de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	f107 0210 	add.w	r2, r7, #16
 80192e6:	4611      	mov	r1, r2
 80192e8:	4618      	mov	r0, r3
 80192ea:	f7ff fdb3 	bl	8018e54 <validate>
 80192ee:	4603      	mov	r3, r0
 80192f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80192f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d107      	bne.n	801930c <f_write+0x44>
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	7d5b      	ldrb	r3, [r3, #21]
 8019300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019308:	2b00      	cmp	r3, #0
 801930a:	d002      	beq.n	8019312 <f_write+0x4a>
 801930c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019310:	e14b      	b.n	80195aa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	7d1b      	ldrb	r3, [r3, #20]
 8019316:	f003 0302 	and.w	r3, r3, #2
 801931a:	2b00      	cmp	r3, #0
 801931c:	d101      	bne.n	8019322 <f_write+0x5a>
 801931e:	2307      	movs	r3, #7
 8019320:	e143      	b.n	80195aa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	699a      	ldr	r2, [r3, #24]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	441a      	add	r2, r3
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	699b      	ldr	r3, [r3, #24]
 801932e:	429a      	cmp	r2, r3
 8019330:	f080 812d 	bcs.w	801958e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	699b      	ldr	r3, [r3, #24]
 8019338:	43db      	mvns	r3, r3
 801933a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801933c:	e127      	b.n	801958e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	699b      	ldr	r3, [r3, #24]
 8019342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019346:	2b00      	cmp	r3, #0
 8019348:	f040 80e3 	bne.w	8019512 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	699b      	ldr	r3, [r3, #24]
 8019350:	0a5b      	lsrs	r3, r3, #9
 8019352:	693a      	ldr	r2, [r7, #16]
 8019354:	8952      	ldrh	r2, [r2, #10]
 8019356:	3a01      	subs	r2, #1
 8019358:	4013      	ands	r3, r2
 801935a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801935c:	69bb      	ldr	r3, [r7, #24]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d143      	bne.n	80193ea <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	699b      	ldr	r3, [r3, #24]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d10c      	bne.n	8019384 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	689b      	ldr	r3, [r3, #8]
 801936e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019372:	2b00      	cmp	r3, #0
 8019374:	d11a      	bne.n	80193ac <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	2100      	movs	r1, #0
 801937a:	4618      	mov	r0, r3
 801937c:	f7fe f9a6 	bl	80176cc <create_chain>
 8019380:	62b8      	str	r0, [r7, #40]	; 0x28
 8019382:	e013      	b.n	80193ac <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019388:	2b00      	cmp	r3, #0
 801938a:	d007      	beq.n	801939c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	699b      	ldr	r3, [r3, #24]
 8019390:	4619      	mov	r1, r3
 8019392:	68f8      	ldr	r0, [r7, #12]
 8019394:	f7fe fa32 	bl	80177fc <clmt_clust>
 8019398:	62b8      	str	r0, [r7, #40]	; 0x28
 801939a:	e007      	b.n	80193ac <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801939c:	68fa      	ldr	r2, [r7, #12]
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	69db      	ldr	r3, [r3, #28]
 80193a2:	4619      	mov	r1, r3
 80193a4:	4610      	mov	r0, r2
 80193a6:	f7fe f991 	bl	80176cc <create_chain>
 80193aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80193ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	f000 80f2 	beq.w	8019598 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80193b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d104      	bne.n	80193c4 <f_write+0xfc>
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2202      	movs	r2, #2
 80193be:	755a      	strb	r2, [r3, #21]
 80193c0:	2302      	movs	r3, #2
 80193c2:	e0f2      	b.n	80195aa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ca:	d104      	bne.n	80193d6 <f_write+0x10e>
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	2201      	movs	r2, #1
 80193d0:	755a      	strb	r2, [r3, #21]
 80193d2:	2301      	movs	r3, #1
 80193d4:	e0e9      	b.n	80195aa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	689b      	ldr	r3, [r3, #8]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d102      	bne.n	80193ea <f_write+0x122>
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	7d1b      	ldrb	r3, [r3, #20]
 80193ee:	b25b      	sxtb	r3, r3
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	da18      	bge.n	8019426 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	7858      	ldrb	r0, [r3, #1]
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	6a1a      	ldr	r2, [r3, #32]
 8019402:	2301      	movs	r3, #1
 8019404:	f7fd fbc0 	bl	8016b88 <disk_write>
 8019408:	4603      	mov	r3, r0
 801940a:	2b00      	cmp	r3, #0
 801940c:	d004      	beq.n	8019418 <f_write+0x150>
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	2201      	movs	r2, #1
 8019412:	755a      	strb	r2, [r3, #21]
 8019414:	2301      	movs	r3, #1
 8019416:	e0c8      	b.n	80195aa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	7d1b      	ldrb	r3, [r3, #20]
 801941c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019420:	b2da      	uxtb	r2, r3
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019426:	693a      	ldr	r2, [r7, #16]
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	69db      	ldr	r3, [r3, #28]
 801942c:	4619      	mov	r1, r3
 801942e:	4610      	mov	r0, r2
 8019430:	f7fd ff34 	bl	801729c <clust2sect>
 8019434:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019436:	697b      	ldr	r3, [r7, #20]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d104      	bne.n	8019446 <f_write+0x17e>
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	2202      	movs	r2, #2
 8019440:	755a      	strb	r2, [r3, #21]
 8019442:	2302      	movs	r3, #2
 8019444:	e0b1      	b.n	80195aa <f_write+0x2e2>
			sect += csect;
 8019446:	697a      	ldr	r2, [r7, #20]
 8019448:	69bb      	ldr	r3, [r7, #24]
 801944a:	4413      	add	r3, r2
 801944c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	0a5b      	lsrs	r3, r3, #9
 8019452:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019454:	6a3b      	ldr	r3, [r7, #32]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d03c      	beq.n	80194d4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801945a:	69ba      	ldr	r2, [r7, #24]
 801945c:	6a3b      	ldr	r3, [r7, #32]
 801945e:	4413      	add	r3, r2
 8019460:	693a      	ldr	r2, [r7, #16]
 8019462:	8952      	ldrh	r2, [r2, #10]
 8019464:	4293      	cmp	r3, r2
 8019466:	d905      	bls.n	8019474 <f_write+0x1ac>
					cc = fs->csize - csect;
 8019468:	693b      	ldr	r3, [r7, #16]
 801946a:	895b      	ldrh	r3, [r3, #10]
 801946c:	461a      	mov	r2, r3
 801946e:	69bb      	ldr	r3, [r7, #24]
 8019470:	1ad3      	subs	r3, r2, r3
 8019472:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	7858      	ldrb	r0, [r3, #1]
 8019478:	6a3b      	ldr	r3, [r7, #32]
 801947a:	697a      	ldr	r2, [r7, #20]
 801947c:	69f9      	ldr	r1, [r7, #28]
 801947e:	f7fd fb83 	bl	8016b88 <disk_write>
 8019482:	4603      	mov	r3, r0
 8019484:	2b00      	cmp	r3, #0
 8019486:	d004      	beq.n	8019492 <f_write+0x1ca>
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	2201      	movs	r2, #1
 801948c:	755a      	strb	r2, [r3, #21]
 801948e:	2301      	movs	r3, #1
 8019490:	e08b      	b.n	80195aa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	6a1a      	ldr	r2, [r3, #32]
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	1ad3      	subs	r3, r2, r3
 801949a:	6a3a      	ldr	r2, [r7, #32]
 801949c:	429a      	cmp	r2, r3
 801949e:	d915      	bls.n	80194cc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	6a1a      	ldr	r2, [r3, #32]
 80194aa:	697b      	ldr	r3, [r7, #20]
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	025b      	lsls	r3, r3, #9
 80194b0:	69fa      	ldr	r2, [r7, #28]
 80194b2:	4413      	add	r3, r2
 80194b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80194b8:	4619      	mov	r1, r3
 80194ba:	f7fd fc25 	bl	8016d08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	7d1b      	ldrb	r3, [r3, #20]
 80194c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80194c6:	b2da      	uxtb	r2, r3
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80194cc:	6a3b      	ldr	r3, [r7, #32]
 80194ce:	025b      	lsls	r3, r3, #9
 80194d0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80194d2:	e03f      	b.n	8019554 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	6a1b      	ldr	r3, [r3, #32]
 80194d8:	697a      	ldr	r2, [r7, #20]
 80194da:	429a      	cmp	r2, r3
 80194dc:	d016      	beq.n	801950c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	699a      	ldr	r2, [r3, #24]
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80194e6:	429a      	cmp	r2, r3
 80194e8:	d210      	bcs.n	801950c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80194ea:	693b      	ldr	r3, [r7, #16]
 80194ec:	7858      	ldrb	r0, [r3, #1]
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80194f4:	2301      	movs	r3, #1
 80194f6:	697a      	ldr	r2, [r7, #20]
 80194f8:	f7fd fb26 	bl	8016b48 <disk_read>
 80194fc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d004      	beq.n	801950c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	2201      	movs	r2, #1
 8019506:	755a      	strb	r2, [r3, #21]
 8019508:	2301      	movs	r3, #1
 801950a:	e04e      	b.n	80195aa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	697a      	ldr	r2, [r7, #20]
 8019510:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	699b      	ldr	r3, [r3, #24]
 8019516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801951a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801951e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	429a      	cmp	r2, r3
 8019526:	d901      	bls.n	801952c <f_write+0x264>
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	699b      	ldr	r3, [r3, #24]
 8019536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801953a:	4413      	add	r3, r2
 801953c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801953e:	69f9      	ldr	r1, [r7, #28]
 8019540:	4618      	mov	r0, r3
 8019542:	f7fd fbe1 	bl	8016d08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	7d1b      	ldrb	r3, [r3, #20]
 801954a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801954e:	b2da      	uxtb	r2, r3
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019554:	69fa      	ldr	r2, [r7, #28]
 8019556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019558:	4413      	add	r3, r2
 801955a:	61fb      	str	r3, [r7, #28]
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	699a      	ldr	r2, [r3, #24]
 8019560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019562:	441a      	add	r2, r3
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	619a      	str	r2, [r3, #24]
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	68da      	ldr	r2, [r3, #12]
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	699b      	ldr	r3, [r3, #24]
 8019570:	429a      	cmp	r2, r3
 8019572:	bf38      	it	cc
 8019574:	461a      	movcc	r2, r3
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	60da      	str	r2, [r3, #12]
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	681a      	ldr	r2, [r3, #0]
 801957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019580:	441a      	add	r2, r3
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	601a      	str	r2, [r3, #0]
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801958a:	1ad3      	subs	r3, r2, r3
 801958c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	2b00      	cmp	r3, #0
 8019592:	f47f aed4 	bne.w	801933e <f_write+0x76>
 8019596:	e000      	b.n	801959a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019598:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	7d1b      	ldrb	r3, [r3, #20]
 801959e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195a2:	b2da      	uxtb	r2, r3
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80195a8:	2300      	movs	r3, #0
}
 80195aa:	4618      	mov	r0, r3
 80195ac:	3730      	adds	r7, #48	; 0x30
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}

080195b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80195b2:	b580      	push	{r7, lr}
 80195b4:	b086      	sub	sp, #24
 80195b6:	af00      	add	r7, sp, #0
 80195b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	f107 0208 	add.w	r2, r7, #8
 80195c0:	4611      	mov	r1, r2
 80195c2:	4618      	mov	r0, r3
 80195c4:	f7ff fc46 	bl	8018e54 <validate>
 80195c8:	4603      	mov	r3, r0
 80195ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80195cc:	7dfb      	ldrb	r3, [r7, #23]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d168      	bne.n	80196a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	7d1b      	ldrb	r3, [r3, #20]
 80195d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d062      	beq.n	80196a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	7d1b      	ldrb	r3, [r3, #20]
 80195e2:	b25b      	sxtb	r3, r3
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	da15      	bge.n	8019614 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	7858      	ldrb	r0, [r3, #1]
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	6a1a      	ldr	r2, [r3, #32]
 80195f6:	2301      	movs	r3, #1
 80195f8:	f7fd fac6 	bl	8016b88 <disk_write>
 80195fc:	4603      	mov	r3, r0
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d001      	beq.n	8019606 <f_sync+0x54>
 8019602:	2301      	movs	r3, #1
 8019604:	e04f      	b.n	80196a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	7d1b      	ldrb	r3, [r3, #20]
 801960a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801960e:	b2da      	uxtb	r2, r3
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019614:	f7f8 fa0a 	bl	8011a2c <get_fattime>
 8019618:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801961a:	68ba      	ldr	r2, [r7, #8]
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019620:	4619      	mov	r1, r3
 8019622:	4610      	mov	r0, r2
 8019624:	f7fd fd9e 	bl	8017164 <move_window>
 8019628:	4603      	mov	r3, r0
 801962a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801962c:	7dfb      	ldrb	r3, [r7, #23]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d138      	bne.n	80196a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019636:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	330b      	adds	r3, #11
 801963c:	781a      	ldrb	r2, [r3, #0]
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	330b      	adds	r3, #11
 8019642:	f042 0220 	orr.w	r2, r2, #32
 8019646:	b2d2      	uxtb	r2, r2
 8019648:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	6818      	ldr	r0, [r3, #0]
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	689b      	ldr	r3, [r3, #8]
 8019652:	461a      	mov	r2, r3
 8019654:	68f9      	ldr	r1, [r7, #12]
 8019656:	f7fe faab 	bl	8017bb0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	f103 021c 	add.w	r2, r3, #28
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	68db      	ldr	r3, [r3, #12]
 8019664:	4619      	mov	r1, r3
 8019666:	4610      	mov	r0, r2
 8019668:	f7fd fb22 	bl	8016cb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	3316      	adds	r3, #22
 8019670:	6939      	ldr	r1, [r7, #16]
 8019672:	4618      	mov	r0, r3
 8019674:	f7fd fb1c 	bl	8016cb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	3312      	adds	r3, #18
 801967c:	2100      	movs	r1, #0
 801967e:	4618      	mov	r0, r3
 8019680:	f7fd fafb 	bl	8016c7a <st_word>
					fs->wflag = 1;
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	2201      	movs	r2, #1
 8019688:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801968a:	68bb      	ldr	r3, [r7, #8]
 801968c:	4618      	mov	r0, r3
 801968e:	f7fd fd97 	bl	80171c0 <sync_fs>
 8019692:	4603      	mov	r3, r0
 8019694:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	7d1b      	ldrb	r3, [r3, #20]
 801969a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801969e:	b2da      	uxtb	r2, r3
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80196a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3718      	adds	r7, #24
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}

080196ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80196ae:	b580      	push	{r7, lr}
 80196b0:	b084      	sub	sp, #16
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80196b6:	6878      	ldr	r0, [r7, #4]
 80196b8:	f7ff ff7b 	bl	80195b2 <f_sync>
 80196bc:	4603      	mov	r3, r0
 80196be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80196c0:	7bfb      	ldrb	r3, [r7, #15]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d118      	bne.n	80196f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f107 0208 	add.w	r2, r7, #8
 80196cc:	4611      	mov	r1, r2
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff fbc0 	bl	8018e54 <validate>
 80196d4:	4603      	mov	r3, r0
 80196d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80196d8:	7bfb      	ldrb	r3, [r7, #15]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d10c      	bne.n	80196f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	691b      	ldr	r3, [r3, #16]
 80196e2:	4618      	mov	r0, r3
 80196e4:	f7fd fc9a 	bl	801701c <dec_lock>
 80196e8:	4603      	mov	r3, r0
 80196ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80196ec:	7bfb      	ldrb	r3, [r7, #15]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d102      	bne.n	80196f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	2200      	movs	r2, #0
 80196f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80196f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3710      	adds	r7, #16
 80196fe:	46bd      	mov	sp, r7
 8019700:	bd80      	pop	{r7, pc}

08019702 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019702:	b580      	push	{r7, lr}
 8019704:	b090      	sub	sp, #64	; 0x40
 8019706:	af00      	add	r7, sp, #0
 8019708:	6078      	str	r0, [r7, #4]
 801970a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801970c:	f107 0108 	add.w	r1, r7, #8
 8019710:	1d3b      	adds	r3, r7, #4
 8019712:	2200      	movs	r2, #0
 8019714:	4618      	mov	r0, r3
 8019716:	f7ff f94d 	bl	80189b4 <find_volume>
 801971a:	4603      	mov	r3, r0
 801971c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019720:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019724:	2b00      	cmp	r3, #0
 8019726:	d11f      	bne.n	8019768 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019728:	687a      	ldr	r2, [r7, #4]
 801972a:	f107 0308 	add.w	r3, r7, #8
 801972e:	4611      	mov	r1, r2
 8019730:	4618      	mov	r0, r3
 8019732:	f7ff f833 	bl	801879c <follow_path>
 8019736:	4603      	mov	r3, r0
 8019738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801973c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019740:	2b00      	cmp	r3, #0
 8019742:	d111      	bne.n	8019768 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8019744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019748:	b25b      	sxtb	r3, r3
 801974a:	2b00      	cmp	r3, #0
 801974c:	da03      	bge.n	8019756 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801974e:	2306      	movs	r3, #6
 8019750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8019754:	e008      	b.n	8019768 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8019756:	683b      	ldr	r3, [r7, #0]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d005      	beq.n	8019768 <f_stat+0x66>
 801975c:	f107 0308 	add.w	r3, r7, #8
 8019760:	6839      	ldr	r1, [r7, #0]
 8019762:	4618      	mov	r0, r3
 8019764:	f7fe fd84 	bl	8018270 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8019768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801976c:	4618      	mov	r0, r3
 801976e:	3740      	adds	r7, #64	; 0x40
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}

08019774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019774:	b480      	push	{r7}
 8019776:	b087      	sub	sp, #28
 8019778:	af00      	add	r7, sp, #0
 801977a:	60f8      	str	r0, [r7, #12]
 801977c:	60b9      	str	r1, [r7, #8]
 801977e:	4613      	mov	r3, r2
 8019780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019782:	2301      	movs	r3, #1
 8019784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019786:	2300      	movs	r3, #0
 8019788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801978a:	4b1f      	ldr	r3, [pc, #124]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 801978c:	7a5b      	ldrb	r3, [r3, #9]
 801978e:	b2db      	uxtb	r3, r3
 8019790:	2b00      	cmp	r3, #0
 8019792:	d131      	bne.n	80197f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019794:	4b1c      	ldr	r3, [pc, #112]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 8019796:	7a5b      	ldrb	r3, [r3, #9]
 8019798:	b2db      	uxtb	r3, r3
 801979a:	461a      	mov	r2, r3
 801979c:	4b1a      	ldr	r3, [pc, #104]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 801979e:	2100      	movs	r1, #0
 80197a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80197a2:	4b19      	ldr	r3, [pc, #100]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 80197a4:	7a5b      	ldrb	r3, [r3, #9]
 80197a6:	b2db      	uxtb	r3, r3
 80197a8:	4a17      	ldr	r2, [pc, #92]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 80197aa:	009b      	lsls	r3, r3, #2
 80197ac:	4413      	add	r3, r2
 80197ae:	68fa      	ldr	r2, [r7, #12]
 80197b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80197b2:	4b15      	ldr	r3, [pc, #84]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 80197b4:	7a5b      	ldrb	r3, [r3, #9]
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	461a      	mov	r2, r3
 80197ba:	4b13      	ldr	r3, [pc, #76]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 80197bc:	4413      	add	r3, r2
 80197be:	79fa      	ldrb	r2, [r7, #7]
 80197c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80197c2:	4b11      	ldr	r3, [pc, #68]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 80197c4:	7a5b      	ldrb	r3, [r3, #9]
 80197c6:	b2db      	uxtb	r3, r3
 80197c8:	1c5a      	adds	r2, r3, #1
 80197ca:	b2d1      	uxtb	r1, r2
 80197cc:	4a0e      	ldr	r2, [pc, #56]	; (8019808 <FATFS_LinkDriverEx+0x94>)
 80197ce:	7251      	strb	r1, [r2, #9]
 80197d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80197d2:	7dbb      	ldrb	r3, [r7, #22]
 80197d4:	3330      	adds	r3, #48	; 0x30
 80197d6:	b2da      	uxtb	r2, r3
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80197dc:	68bb      	ldr	r3, [r7, #8]
 80197de:	3301      	adds	r3, #1
 80197e0:	223a      	movs	r2, #58	; 0x3a
 80197e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80197e4:	68bb      	ldr	r3, [r7, #8]
 80197e6:	3302      	adds	r3, #2
 80197e8:	222f      	movs	r2, #47	; 0x2f
 80197ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80197ec:	68bb      	ldr	r3, [r7, #8]
 80197ee:	3303      	adds	r3, #3
 80197f0:	2200      	movs	r2, #0
 80197f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80197f4:	2300      	movs	r3, #0
 80197f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80197f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80197fa:	4618      	mov	r0, r3
 80197fc:	371c      	adds	r7, #28
 80197fe:	46bd      	mov	sp, r7
 8019800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019804:	4770      	bx	lr
 8019806:	bf00      	nop
 8019808:	20001cb0 	.word	0x20001cb0

0801980c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b082      	sub	sp, #8
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019816:	2200      	movs	r2, #0
 8019818:	6839      	ldr	r1, [r7, #0]
 801981a:	6878      	ldr	r0, [r7, #4]
 801981c:	f7ff ffaa 	bl	8019774 <FATFS_LinkDriverEx>
 8019820:	4603      	mov	r3, r0
}
 8019822:	4618      	mov	r0, r3
 8019824:	3708      	adds	r7, #8
 8019826:	46bd      	mov	sp, r7
 8019828:	bd80      	pop	{r7, pc}
	...

0801982c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801982c:	b480      	push	{r7}
 801982e:	b085      	sub	sp, #20
 8019830:	af00      	add	r7, sp, #0
 8019832:	4603      	mov	r3, r0
 8019834:	6039      	str	r1, [r7, #0]
 8019836:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019838:	88fb      	ldrh	r3, [r7, #6]
 801983a:	2b7f      	cmp	r3, #127	; 0x7f
 801983c:	d802      	bhi.n	8019844 <ff_convert+0x18>
		c = chr;
 801983e:	88fb      	ldrh	r3, [r7, #6]
 8019840:	81fb      	strh	r3, [r7, #14]
 8019842:	e025      	b.n	8019890 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d00b      	beq.n	8019862 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801984a:	88fb      	ldrh	r3, [r7, #6]
 801984c:	2bff      	cmp	r3, #255	; 0xff
 801984e:	d805      	bhi.n	801985c <ff_convert+0x30>
 8019850:	88fb      	ldrh	r3, [r7, #6]
 8019852:	3b80      	subs	r3, #128	; 0x80
 8019854:	4a12      	ldr	r2, [pc, #72]	; (80198a0 <ff_convert+0x74>)
 8019856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801985a:	e000      	b.n	801985e <ff_convert+0x32>
 801985c:	2300      	movs	r3, #0
 801985e:	81fb      	strh	r3, [r7, #14]
 8019860:	e016      	b.n	8019890 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019862:	2300      	movs	r3, #0
 8019864:	81fb      	strh	r3, [r7, #14]
 8019866:	e009      	b.n	801987c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8019868:	89fb      	ldrh	r3, [r7, #14]
 801986a:	4a0d      	ldr	r2, [pc, #52]	; (80198a0 <ff_convert+0x74>)
 801986c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019870:	88fa      	ldrh	r2, [r7, #6]
 8019872:	429a      	cmp	r2, r3
 8019874:	d006      	beq.n	8019884 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8019876:	89fb      	ldrh	r3, [r7, #14]
 8019878:	3301      	adds	r3, #1
 801987a:	81fb      	strh	r3, [r7, #14]
 801987c:	89fb      	ldrh	r3, [r7, #14]
 801987e:	2b7f      	cmp	r3, #127	; 0x7f
 8019880:	d9f2      	bls.n	8019868 <ff_convert+0x3c>
 8019882:	e000      	b.n	8019886 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019884:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8019886:	89fb      	ldrh	r3, [r7, #14]
 8019888:	3380      	adds	r3, #128	; 0x80
 801988a:	b29b      	uxth	r3, r3
 801988c:	b2db      	uxtb	r3, r3
 801988e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019890:	89fb      	ldrh	r3, [r7, #14]
}
 8019892:	4618      	mov	r0, r3
 8019894:	3714      	adds	r7, #20
 8019896:	46bd      	mov	sp, r7
 8019898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop
 80198a0:	08021744 	.word	0x08021744

080198a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80198a4:	b480      	push	{r7}
 80198a6:	b087      	sub	sp, #28
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	4603      	mov	r3, r0
 80198ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80198ae:	88fb      	ldrh	r3, [r7, #6]
 80198b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80198b4:	d201      	bcs.n	80198ba <ff_wtoupper+0x16>
 80198b6:	4b3e      	ldr	r3, [pc, #248]	; (80199b0 <ff_wtoupper+0x10c>)
 80198b8:	e000      	b.n	80198bc <ff_wtoupper+0x18>
 80198ba:	4b3e      	ldr	r3, [pc, #248]	; (80199b4 <ff_wtoupper+0x110>)
 80198bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	1c9a      	adds	r2, r3, #2
 80198c2:	617a      	str	r2, [r7, #20]
 80198c4:	881b      	ldrh	r3, [r3, #0]
 80198c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80198c8:	8a7b      	ldrh	r3, [r7, #18]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d068      	beq.n	80199a0 <ff_wtoupper+0xfc>
 80198ce:	88fa      	ldrh	r2, [r7, #6]
 80198d0:	8a7b      	ldrh	r3, [r7, #18]
 80198d2:	429a      	cmp	r2, r3
 80198d4:	d364      	bcc.n	80199a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80198d6:	697b      	ldr	r3, [r7, #20]
 80198d8:	1c9a      	adds	r2, r3, #2
 80198da:	617a      	str	r2, [r7, #20]
 80198dc:	881b      	ldrh	r3, [r3, #0]
 80198de:	823b      	strh	r3, [r7, #16]
 80198e0:	8a3b      	ldrh	r3, [r7, #16]
 80198e2:	0a1b      	lsrs	r3, r3, #8
 80198e4:	81fb      	strh	r3, [r7, #14]
 80198e6:	8a3b      	ldrh	r3, [r7, #16]
 80198e8:	b2db      	uxtb	r3, r3
 80198ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80198ec:	88fa      	ldrh	r2, [r7, #6]
 80198ee:	8a79      	ldrh	r1, [r7, #18]
 80198f0:	8a3b      	ldrh	r3, [r7, #16]
 80198f2:	440b      	add	r3, r1
 80198f4:	429a      	cmp	r2, r3
 80198f6:	da49      	bge.n	801998c <ff_wtoupper+0xe8>
			switch (cmd) {
 80198f8:	89fb      	ldrh	r3, [r7, #14]
 80198fa:	2b08      	cmp	r3, #8
 80198fc:	d84f      	bhi.n	801999e <ff_wtoupper+0xfa>
 80198fe:	a201      	add	r2, pc, #4	; (adr r2, 8019904 <ff_wtoupper+0x60>)
 8019900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019904:	08019929 	.word	0x08019929
 8019908:	0801993b 	.word	0x0801993b
 801990c:	08019951 	.word	0x08019951
 8019910:	08019959 	.word	0x08019959
 8019914:	08019961 	.word	0x08019961
 8019918:	08019969 	.word	0x08019969
 801991c:	08019971 	.word	0x08019971
 8019920:	08019979 	.word	0x08019979
 8019924:	08019981 	.word	0x08019981
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019928:	88fa      	ldrh	r2, [r7, #6]
 801992a:	8a7b      	ldrh	r3, [r7, #18]
 801992c:	1ad3      	subs	r3, r2, r3
 801992e:	005b      	lsls	r3, r3, #1
 8019930:	697a      	ldr	r2, [r7, #20]
 8019932:	4413      	add	r3, r2
 8019934:	881b      	ldrh	r3, [r3, #0]
 8019936:	80fb      	strh	r3, [r7, #6]
 8019938:	e027      	b.n	801998a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801993a:	88fa      	ldrh	r2, [r7, #6]
 801993c:	8a7b      	ldrh	r3, [r7, #18]
 801993e:	1ad3      	subs	r3, r2, r3
 8019940:	b29b      	uxth	r3, r3
 8019942:	f003 0301 	and.w	r3, r3, #1
 8019946:	b29b      	uxth	r3, r3
 8019948:	88fa      	ldrh	r2, [r7, #6]
 801994a:	1ad3      	subs	r3, r2, r3
 801994c:	80fb      	strh	r3, [r7, #6]
 801994e:	e01c      	b.n	801998a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019950:	88fb      	ldrh	r3, [r7, #6]
 8019952:	3b10      	subs	r3, #16
 8019954:	80fb      	strh	r3, [r7, #6]
 8019956:	e018      	b.n	801998a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8019958:	88fb      	ldrh	r3, [r7, #6]
 801995a:	3b20      	subs	r3, #32
 801995c:	80fb      	strh	r3, [r7, #6]
 801995e:	e014      	b.n	801998a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019960:	88fb      	ldrh	r3, [r7, #6]
 8019962:	3b30      	subs	r3, #48	; 0x30
 8019964:	80fb      	strh	r3, [r7, #6]
 8019966:	e010      	b.n	801998a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8019968:	88fb      	ldrh	r3, [r7, #6]
 801996a:	3b1a      	subs	r3, #26
 801996c:	80fb      	strh	r3, [r7, #6]
 801996e:	e00c      	b.n	801998a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019970:	88fb      	ldrh	r3, [r7, #6]
 8019972:	3308      	adds	r3, #8
 8019974:	80fb      	strh	r3, [r7, #6]
 8019976:	e008      	b.n	801998a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8019978:	88fb      	ldrh	r3, [r7, #6]
 801997a:	3b50      	subs	r3, #80	; 0x50
 801997c:	80fb      	strh	r3, [r7, #6]
 801997e:	e004      	b.n	801998a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019980:	88fb      	ldrh	r3, [r7, #6]
 8019982:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8019986:	80fb      	strh	r3, [r7, #6]
 8019988:	bf00      	nop
			}
			break;
 801998a:	e008      	b.n	801999e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801998c:	89fb      	ldrh	r3, [r7, #14]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d195      	bne.n	80198be <ff_wtoupper+0x1a>
 8019992:	8a3b      	ldrh	r3, [r7, #16]
 8019994:	005b      	lsls	r3, r3, #1
 8019996:	697a      	ldr	r2, [r7, #20]
 8019998:	4413      	add	r3, r2
 801999a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801999c:	e78f      	b.n	80198be <ff_wtoupper+0x1a>
			break;
 801999e:	bf00      	nop
	}

	return chr;
 80199a0:	88fb      	ldrh	r3, [r7, #6]
}
 80199a2:	4618      	mov	r0, r3
 80199a4:	371c      	adds	r7, #28
 80199a6:	46bd      	mov	sp, r7
 80199a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ac:	4770      	bx	lr
 80199ae:	bf00      	nop
 80199b0:	08021844 	.word	0x08021844
 80199b4:	08021a38 	.word	0x08021a38

080199b8 <Mount_SD>:
//			}
//	}
//}

FRESULT Mount_SD (const TCHAR* path)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b082      	sub	sp, #8
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80199c0:	2201      	movs	r2, #1
 80199c2:	6879      	ldr	r1, [r7, #4]
 80199c4:	480e      	ldr	r0, [pc, #56]	; (8019a00 <Mount_SD+0x48>)
 80199c6:	f7ff fa7b 	bl	8018ec0 <f_mount>
 80199ca:	4603      	mov	r3, r0
 80199cc:	461a      	mov	r2, r3
 80199ce:	4b0d      	ldr	r3, [pc, #52]	; (8019a04 <Mount_SD+0x4c>)
 80199d0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 80199d2:	4b0c      	ldr	r3, [pc, #48]	; (8019a04 <Mount_SD+0x4c>)
 80199d4:	781b      	ldrb	r3, [r3, #0]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d006      	beq.n	80199e8 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 80199da:	2300      	movs	r3, #0
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d009      	beq.n	80199f4 <Mount_SD+0x3c>
 80199e0:	4809      	ldr	r0, [pc, #36]	; (8019a08 <Mount_SD+0x50>)
 80199e2:	f002 fbaf 	bl	801c144 <puts>
 80199e6:	e005      	b.n	80199f4 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 80199e8:	2300      	movs	r3, #0
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d002      	beq.n	80199f4 <Mount_SD+0x3c>
 80199ee:	4807      	ldr	r0, [pc, #28]	; (8019a0c <Mount_SD+0x54>)
 80199f0:	f002 fba8 	bl	801c144 <puts>

	return fresult;
 80199f4:	4b03      	ldr	r3, [pc, #12]	; (8019a04 <Mount_SD+0x4c>)
 80199f6:	781b      	ldrb	r3, [r3, #0]
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	3708      	adds	r7, #8
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd80      	pop	{r7, pc}
 8019a00:	20001cbc 	.word	0x20001cbc
 8019a04:	20002238 	.word	0x20002238
 8019a08:	08020e9c 	.word	0x08020e9c
 8019a0c:	08020ebc 	.word	0x08020ebc

08019a10 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b082      	sub	sp, #8
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8019a18:	2201      	movs	r2, #1
 8019a1a:	6879      	ldr	r1, [r7, #4]
 8019a1c:	2000      	movs	r0, #0
 8019a1e:	f7ff fa4f 	bl	8018ec0 <f_mount>
 8019a22:	4603      	mov	r3, r0
 8019a24:	461a      	mov	r2, r3
 8019a26:	4b0b      	ldr	r3, [pc, #44]	; (8019a54 <Unmount_SD+0x44>)
 8019a28:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8019a2a:	4b0a      	ldr	r3, [pc, #40]	; (8019a54 <Unmount_SD+0x44>)
 8019a2c:	781b      	ldrb	r3, [r3, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d106      	bne.n	8019a40 <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 8019a32:	2300      	movs	r3, #0
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d009      	beq.n	8019a4c <Unmount_SD+0x3c>
 8019a38:	4807      	ldr	r0, [pc, #28]	; (8019a58 <Unmount_SD+0x48>)
 8019a3a:	f002 fb83 	bl	801c144 <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8019a3e:	e005      	b.n	8019a4c <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8019a40:	2300      	movs	r3, #0
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d002      	beq.n	8019a4c <Unmount_SD+0x3c>
 8019a46:	4805      	ldr	r0, [pc, #20]	; (8019a5c <Unmount_SD+0x4c>)
 8019a48:	f002 fb7c 	bl	801c144 <puts>
}
 8019a4c:	bf00      	nop
 8019a4e:	3708      	adds	r7, #8
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}
 8019a54:	20002238 	.word	0x20002238
 8019a58:	08020edc 	.word	0x08020edc
 8019a5c:	08020f00 	.word	0x08020f00

08019a60 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b0a8      	sub	sp, #160	; 0xa0
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat (name, &fno);
 8019a68:	4941      	ldr	r1, [pc, #260]	; (8019b70 <Create_File+0x110>)
 8019a6a:	6878      	ldr	r0, [r7, #4]
 8019a6c:	f7ff fe49 	bl	8019702 <f_stat>
 8019a70:	4603      	mov	r3, r0
 8019a72:	461a      	mov	r2, r3
 8019a74:	4b3f      	ldr	r3, [pc, #252]	; (8019b74 <Create_File+0x114>)
 8019a76:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8019a78:	4b3e      	ldr	r3, [pc, #248]	; (8019b74 <Create_File+0x114>)
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d114      	bne.n	8019aaa <Create_File+0x4a>
	{
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 8019a80:	4b3d      	ldr	r3, [pc, #244]	; (8019b78 <Create_File+0x118>)
 8019a82:	2201      	movs	r2, #1
 8019a84:	701a      	strb	r2, [r3, #0]

		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 8019a86:	f107 0308 	add.w	r3, r7, #8
 8019a8a:	687a      	ldr	r2, [r7, #4]
 8019a8c:	493b      	ldr	r1, [pc, #236]	; (8019b7c <Create_File+0x11c>)
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f002 fb76 	bl	801c180 <siprintf>
		if(sdioPrints) printf(buf);
 8019a94:	2300      	movs	r3, #0
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d004      	beq.n	8019aa4 <Create_File+0x44>
 8019a9a:	f107 0308 	add.w	r3, r7, #8
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f002 faca 	bl	801c038 <iprintf>

	    return fresult;
 8019aa4:	4b33      	ldr	r3, [pc, #204]	; (8019b74 <Create_File+0x114>)
 8019aa6:	781b      	ldrb	r3, [r3, #0]
 8019aa8:	e05d      	b.n	8019b66 <Create_File+0x106>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8019aaa:	220b      	movs	r2, #11
 8019aac:	6879      	ldr	r1, [r7, #4]
 8019aae:	4834      	ldr	r0, [pc, #208]	; (8019b80 <Create_File+0x120>)
 8019ab0:	f7ff fa4c 	bl	8018f4c <f_open>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	461a      	mov	r2, r3
 8019ab8:	4b2e      	ldr	r3, [pc, #184]	; (8019b74 <Create_File+0x114>)
 8019aba:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019abc:	4b2d      	ldr	r3, [pc, #180]	; (8019b74 <Create_File+0x114>)
 8019abe:	781b      	ldrb	r3, [r3, #0]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d013      	beq.n	8019aec <Create_File+0x8c>
		{

			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 8019ac4:	4b2b      	ldr	r3, [pc, #172]	; (8019b74 <Create_File+0x114>)
 8019ac6:	781b      	ldrb	r3, [r3, #0]
 8019ac8:	461a      	mov	r2, r3
 8019aca:	f107 0008 	add.w	r0, r7, #8
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	492c      	ldr	r1, [pc, #176]	; (8019b84 <Create_File+0x124>)
 8019ad2:	f002 fb55 	bl	801c180 <siprintf>
			if(sdioPrints) printf(buf);
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d004      	beq.n	8019ae6 <Create_File+0x86>
 8019adc:	f107 0308 	add.w	r3, r7, #8
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f002 faa9 	bl	801c038 <iprintf>

		    return fresult;
 8019ae6:	4b23      	ldr	r3, [pc, #140]	; (8019b74 <Create_File+0x114>)
 8019ae8:	781b      	ldrb	r3, [r3, #0]
 8019aea:	e03c      	b.n	8019b66 <Create_File+0x106>
		}
		else
		{

			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8019aec:	f107 0308 	add.w	r3, r7, #8
 8019af0:	687a      	ldr	r2, [r7, #4]
 8019af2:	4925      	ldr	r1, [pc, #148]	; (8019b88 <Create_File+0x128>)
 8019af4:	4618      	mov	r0, r3
 8019af6:	f002 fb43 	bl	801c180 <siprintf>
			if(sdioPrints) printf(buf);
 8019afa:	2300      	movs	r3, #0
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d004      	beq.n	8019b0a <Create_File+0xaa>
 8019b00:	f107 0308 	add.w	r3, r7, #8
 8019b04:	4618      	mov	r0, r3
 8019b06:	f002 fa97 	bl	801c038 <iprintf>

		}

		fresult = f_close(&fil);
 8019b0a:	481d      	ldr	r0, [pc, #116]	; (8019b80 <Create_File+0x120>)
 8019b0c:	f7ff fdcf 	bl	80196ae <f_close>
 8019b10:	4603      	mov	r3, r0
 8019b12:	461a      	mov	r2, r3
 8019b14:	4b17      	ldr	r3, [pc, #92]	; (8019b74 <Create_File+0x114>)
 8019b16:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019b18:	4b16      	ldr	r3, [pc, #88]	; (8019b74 <Create_File+0x114>)
 8019b1a:	781b      	ldrb	r3, [r3, #0]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d011      	beq.n	8019b44 <Create_File+0xe4>
		{

			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8019b20:	4b14      	ldr	r3, [pc, #80]	; (8019b74 <Create_File+0x114>)
 8019b22:	781b      	ldrb	r3, [r3, #0]
 8019b24:	461a      	mov	r2, r3
 8019b26:	f107 0008 	add.w	r0, r7, #8
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	4917      	ldr	r1, [pc, #92]	; (8019b8c <Create_File+0x12c>)
 8019b2e:	f002 fb27 	bl	801c180 <siprintf>
			if(sdioPrints) printf(buf);
 8019b32:	2300      	movs	r3, #0
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d014      	beq.n	8019b62 <Create_File+0x102>
 8019b38:	f107 0308 	add.w	r3, r7, #8
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f002 fa7b 	bl	801c038 <iprintf>
 8019b42:	e00e      	b.n	8019b62 <Create_File+0x102>

		}
		else
		{

			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8019b44:	f107 0308 	add.w	r3, r7, #8
 8019b48:	687a      	ldr	r2, [r7, #4]
 8019b4a:	4911      	ldr	r1, [pc, #68]	; (8019b90 <Create_File+0x130>)
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f002 fb17 	bl	801c180 <siprintf>
			if(sdioPrints) printf(buf);
 8019b52:	2300      	movs	r3, #0
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d004      	beq.n	8019b62 <Create_File+0x102>
 8019b58:	f107 0308 	add.w	r3, r7, #8
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f002 fa6b 	bl	801c038 <iprintf>

		}
	}
    return fresult;
 8019b62:	4b04      	ldr	r3, [pc, #16]	; (8019b74 <Create_File+0x114>)
 8019b64:	781b      	ldrb	r3, [r3, #0]
}
 8019b66:	4618      	mov	r0, r3
 8019b68:	37a0      	adds	r7, #160	; 0xa0
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	20002120 	.word	0x20002120
 8019b74:	20002238 	.word	0x20002238
 8019b78:	200022a8 	.word	0x200022a8
 8019b7c:	080210c4 	.word	0x080210c4
 8019b80:	20001ef0 	.word	0x20001ef0
 8019b84:	080210f8 	.word	0x080210f8
 8019b88:	08021120 	.word	0x08021120
 8019b8c:	08021160 	.word	0x08021160
 8019b90:	080210a4 	.word	0x080210a4

08019b94 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b0a8      	sub	sp, #160	; 0xa0
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8019b9e:	4951      	ldr	r1, [pc, #324]	; (8019ce4 <Update_File+0x150>)
 8019ba0:	6878      	ldr	r0, [r7, #4]
 8019ba2:	f7ff fdae 	bl	8019702 <f_stat>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	461a      	mov	r2, r3
 8019baa:	4b4f      	ldr	r3, [pc, #316]	; (8019ce8 <Update_File+0x154>)
 8019bac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8019bae:	4b4e      	ldr	r3, [pc, #312]	; (8019ce8 <Update_File+0x154>)
 8019bb0:	781b      	ldrb	r3, [r3, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d011      	beq.n	8019bda <Update_File+0x46>
	{

		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8019bb6:	f107 0308 	add.w	r3, r7, #8
 8019bba:	687a      	ldr	r2, [r7, #4]
 8019bbc:	494b      	ldr	r1, [pc, #300]	; (8019cec <Update_File+0x158>)
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f002 fade 	bl	801c180 <siprintf>
		if(sdioPrints) printf (buf);
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d004      	beq.n	8019bd4 <Update_File+0x40>
 8019bca:	f107 0308 	add.w	r3, r7, #8
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f002 fa32 	bl	801c038 <iprintf>

	    return fresult;
 8019bd4:	4b44      	ldr	r3, [pc, #272]	; (8019ce8 <Update_File+0x154>)
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	e080      	b.n	8019cdc <Update_File+0x148>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8019bda:	2232      	movs	r2, #50	; 0x32
 8019bdc:	6879      	ldr	r1, [r7, #4]
 8019bde:	4844      	ldr	r0, [pc, #272]	; (8019cf0 <Update_File+0x15c>)
 8019be0:	f7ff f9b4 	bl	8018f4c <f_open>
 8019be4:	4603      	mov	r3, r0
 8019be6:	461a      	mov	r2, r3
 8019be8:	4b3f      	ldr	r3, [pc, #252]	; (8019ce8 <Update_File+0x154>)
 8019bea:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019bec:	4b3e      	ldr	r3, [pc, #248]	; (8019ce8 <Update_File+0x154>)
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d013      	beq.n	8019c1c <Update_File+0x88>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 8019bf4:	4b3c      	ldr	r3, [pc, #240]	; (8019ce8 <Update_File+0x154>)
 8019bf6:	781b      	ldrb	r3, [r3, #0]
 8019bf8:	461a      	mov	r2, r3
 8019bfa:	f107 0008 	add.w	r0, r7, #8
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	493c      	ldr	r1, [pc, #240]	; (8019cf4 <Update_File+0x160>)
 8019c02:	f002 fabd 	bl	801c180 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019c06:	2300      	movs	r3, #0
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d004      	beq.n	8019c16 <Update_File+0x82>
 8019c0c:	f107 0308 	add.w	r3, r7, #8
 8019c10:	4618      	mov	r0, r3
 8019c12:	f002 fa11 	bl	801c038 <iprintf>

	        return fresult;
 8019c16:	4b34      	ldr	r3, [pc, #208]	; (8019ce8 <Update_File+0x154>)
 8019c18:	781b      	ldrb	r3, [r3, #0]
 8019c1a:	e05f      	b.n	8019cdc <Update_File+0x148>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8019c1c:	6838      	ldr	r0, [r7, #0]
 8019c1e:	f7e6 fae9 	bl	80001f4 <strlen>
 8019c22:	4602      	mov	r2, r0
 8019c24:	4b34      	ldr	r3, [pc, #208]	; (8019cf8 <Update_File+0x164>)
 8019c26:	6839      	ldr	r1, [r7, #0]
 8019c28:	4831      	ldr	r0, [pc, #196]	; (8019cf0 <Update_File+0x15c>)
 8019c2a:	f7ff fb4d 	bl	80192c8 <f_write>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	461a      	mov	r2, r3
 8019c32:	4b2d      	ldr	r3, [pc, #180]	; (8019ce8 <Update_File+0x154>)
 8019c34:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019c36:	4b2c      	ldr	r3, [pc, #176]	; (8019ce8 <Update_File+0x154>)
 8019c38:	781b      	ldrb	r3, [r3, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d011      	beq.n	8019c62 <Update_File+0xce>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8019c3e:	4b2a      	ldr	r3, [pc, #168]	; (8019ce8 <Update_File+0x154>)
 8019c40:	781b      	ldrb	r3, [r3, #0]
 8019c42:	461a      	mov	r2, r3
 8019c44:	f107 0008 	add.w	r0, r7, #8
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	492c      	ldr	r1, [pc, #176]	; (8019cfc <Update_File+0x168>)
 8019c4c:	f002 fa98 	bl	801c180 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019c50:	2300      	movs	r3, #0
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d014      	beq.n	8019c80 <Update_File+0xec>
 8019c56:	f107 0308 	add.w	r3, r7, #8
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f002 f9ec 	bl	801c038 <iprintf>
 8019c60:	e00e      	b.n	8019c80 <Update_File+0xec>
	    }

	    else
	    {

	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8019c62:	f107 0308 	add.w	r3, r7, #8
 8019c66:	687a      	ldr	r2, [r7, #4]
 8019c68:	4925      	ldr	r1, [pc, #148]	; (8019d00 <Update_File+0x16c>)
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	f002 fa88 	bl	801c180 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019c70:	2300      	movs	r3, #0
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d004      	beq.n	8019c80 <Update_File+0xec>
 8019c76:	f107 0308 	add.w	r3, r7, #8
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f002 f9dc 	bl	801c038 <iprintf>

	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8019c80:	481b      	ldr	r0, [pc, #108]	; (8019cf0 <Update_File+0x15c>)
 8019c82:	f7ff fd14 	bl	80196ae <f_close>
 8019c86:	4603      	mov	r3, r0
 8019c88:	461a      	mov	r2, r3
 8019c8a:	4b17      	ldr	r3, [pc, #92]	; (8019ce8 <Update_File+0x154>)
 8019c8c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019c8e:	4b16      	ldr	r3, [pc, #88]	; (8019ce8 <Update_File+0x154>)
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d011      	beq.n	8019cba <Update_File+0x126>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 8019c96:	4b14      	ldr	r3, [pc, #80]	; (8019ce8 <Update_File+0x154>)
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	f107 0008 	add.w	r0, r7, #8
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	4918      	ldr	r1, [pc, #96]	; (8019d04 <Update_File+0x170>)
 8019ca4:	f002 fa6c 	bl	801c180 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019ca8:	2300      	movs	r3, #0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d014      	beq.n	8019cd8 <Update_File+0x144>
 8019cae:	f107 0308 	add.w	r3, r7, #8
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f002 f9c0 	bl	801c038 <iprintf>
 8019cb8:	e00e      	b.n	8019cd8 <Update_File+0x144>

	    }
	    else
	    {

	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8019cba:	f107 0308 	add.w	r3, r7, #8
 8019cbe:	687a      	ldr	r2, [r7, #4]
 8019cc0:	4911      	ldr	r1, [pc, #68]	; (8019d08 <Update_File+0x174>)
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f002 fa5c 	bl	801c180 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019cc8:	2300      	movs	r3, #0
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d004      	beq.n	8019cd8 <Update_File+0x144>
 8019cce:	f107 0308 	add.w	r3, r7, #8
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f002 f9b0 	bl	801c038 <iprintf>

	     }
	}
    return fresult;
 8019cd8:	4b03      	ldr	r3, [pc, #12]	; (8019ce8 <Update_File+0x154>)
 8019cda:	781b      	ldrb	r3, [r3, #0]
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	37a0      	adds	r7, #160	; 0xa0
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	20002120 	.word	0x20002120
 8019ce8:	20002238 	.word	0x20002238
 8019cec:	08020f54 	.word	0x08020f54
 8019cf0:	20001ef0 	.word	0x20001ef0
 8019cf4:	08020f74 	.word	0x08020f74
 8019cf8:	2000223c 	.word	0x2000223c
 8019cfc:	08021184 	.word	0x08021184
 8019d00:	080211ac 	.word	0x080211ac
 8019d04:	0802107c 	.word	0x0802107c
 8019d08:	080210a4 	.word	0x080210a4

08019d0c <json_update>:

char filename_with_format[100];
uint8_t file_already_exist = 0;
char buffer[255];

void json_update() {
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b088      	sub	sp, #32
 8019d10:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8019d12:	f107 0314 	add.w	r3, r7, #20
 8019d16:	2200      	movs	r2, #0
 8019d18:	4619      	mov	r1, r3
 8019d1a:	4889      	ldr	r0, [pc, #548]	; (8019f40 <json_update+0x234>)
 8019d1c:	f7ef f878 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8019d20:	463b      	mov	r3, r7
 8019d22:	2200      	movs	r2, #0
 8019d24:	4619      	mov	r1, r3
 8019d26:	4886      	ldr	r0, [pc, #536]	; (8019f40 <json_update+0x234>)
 8019d28:	f7ee ff90 	bl	8008c4c <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 8019d2c:	4885      	ldr	r0, [pc, #532]	; (8019f44 <json_update+0x238>)
 8019d2e:	f7ff fe43 	bl	80199b8 <Mount_SD>
 8019d32:	4603      	mov	r3, r0
 8019d34:	461a      	mov	r2, r3
 8019d36:	4b84      	ldr	r3, [pc, #528]	; (8019f48 <json_update+0x23c>)
 8019d38:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019d3a:	4b83      	ldr	r3, [pc, #524]	; (8019f48 <json_update+0x23c>)
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	f040 80f3 	bne.w	8019f2a <json_update+0x21e>
		//CAN Bus
		sprintf(buffer, "{\n");
 8019d44:	4981      	ldr	r1, [pc, #516]	; (8019f4c <json_update+0x240>)
 8019d46:	4882      	ldr	r0, [pc, #520]	; (8019f50 <json_update+0x244>)
 8019d48:	f002 fa1a 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d4c:	4980      	ldr	r1, [pc, #512]	; (8019f50 <json_update+0x244>)
 8019d4e:	4881      	ldr	r0, [pc, #516]	; (8019f54 <json_update+0x248>)
 8019d50:	f7ff ff20 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d54:	22ff      	movs	r2, #255	; 0xff
 8019d56:	2100      	movs	r1, #0
 8019d58:	487d      	ldr	r0, [pc, #500]	; (8019f50 <json_update+0x244>)
 8019d5a:	f001 fa0b 	bl	801b174 <memset>
		sprintf(buffer, "\"devEUI\":\"TF241_%s\",\n", ver_GetUid());
 8019d5e:	f7e8 f8c3 	bl	8001ee8 <ver_GetUid>
 8019d62:	4603      	mov	r3, r0
 8019d64:	461a      	mov	r2, r3
 8019d66:	497c      	ldr	r1, [pc, #496]	; (8019f58 <json_update+0x24c>)
 8019d68:	4879      	ldr	r0, [pc, #484]	; (8019f50 <json_update+0x244>)
 8019d6a:	f002 fa09 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d6e:	4978      	ldr	r1, [pc, #480]	; (8019f50 <json_update+0x244>)
 8019d70:	4878      	ldr	r0, [pc, #480]	; (8019f54 <json_update+0x248>)
 8019d72:	f7ff ff0f 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d76:	22ff      	movs	r2, #255	; 0xff
 8019d78:	2100      	movs	r1, #0
 8019d7a:	4875      	ldr	r0, [pc, #468]	; (8019f50 <json_update+0x244>)
 8019d7c:	f001 f9fa 	bl	801b174 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 8019d80:	4a76      	ldr	r2, [pc, #472]	; (8019f5c <json_update+0x250>)
 8019d82:	4977      	ldr	r1, [pc, #476]	; (8019f60 <json_update+0x254>)
 8019d84:	4872      	ldr	r0, [pc, #456]	; (8019f50 <json_update+0x244>)
 8019d86:	f002 f9fb 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d8a:	4971      	ldr	r1, [pc, #452]	; (8019f50 <json_update+0x244>)
 8019d8c:	4871      	ldr	r0, [pc, #452]	; (8019f54 <json_update+0x248>)
 8019d8e:	f7ff ff01 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d92:	22ff      	movs	r2, #255	; 0xff
 8019d94:	2100      	movs	r1, #0
 8019d96:	486e      	ldr	r0, [pc, #440]	; (8019f50 <json_update+0x244>)
 8019d98:	f001 f9ec 	bl	801b174 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019d9c:	783b      	ldrb	r3, [r7, #0]
 8019d9e:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 8019da0:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019da2:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 8019da4:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019da6:	9300      	str	r3, [sp, #0]
 8019da8:	460b      	mov	r3, r1
 8019daa:	496e      	ldr	r1, [pc, #440]	; (8019f64 <json_update+0x258>)
 8019dac:	4868      	ldr	r0, [pc, #416]	; (8019f50 <json_update+0x244>)
 8019dae:	f002 f9e7 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019db2:	4967      	ldr	r1, [pc, #412]	; (8019f50 <json_update+0x244>)
 8019db4:	4867      	ldr	r0, [pc, #412]	; (8019f54 <json_update+0x248>)
 8019db6:	f7ff feed 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019dba:	22ff      	movs	r2, #255	; 0xff
 8019dbc:	2100      	movs	r1, #0
 8019dbe:	4864      	ldr	r0, [pc, #400]	; (8019f50 <json_update+0x244>)
 8019dc0:	f001 f9d8 	bl	801b174 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 8019dc4:	4a68      	ldr	r2, [pc, #416]	; (8019f68 <json_update+0x25c>)
 8019dc6:	4969      	ldr	r1, [pc, #420]	; (8019f6c <json_update+0x260>)
 8019dc8:	4861      	ldr	r0, [pc, #388]	; (8019f50 <json_update+0x244>)
 8019dca:	f002 f9d9 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019dce:	4960      	ldr	r1, [pc, #384]	; (8019f50 <json_update+0x244>)
 8019dd0:	4860      	ldr	r0, [pc, #384]	; (8019f54 <json_update+0x248>)
 8019dd2:	f7ff fedf 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019dd6:	22ff      	movs	r2, #255	; 0xff
 8019dd8:	2100      	movs	r1, #0
 8019dda:	485d      	ldr	r0, [pc, #372]	; (8019f50 <json_update+0x244>)
 8019ddc:	f001 f9ca 	bl	801b174 <memset>
		sprintf(buffer, "\"name\":\"%s\",\n", _Flash_Packet.name);
 8019de0:	4a63      	ldr	r2, [pc, #396]	; (8019f70 <json_update+0x264>)
 8019de2:	4964      	ldr	r1, [pc, #400]	; (8019f74 <json_update+0x268>)
 8019de4:	485a      	ldr	r0, [pc, #360]	; (8019f50 <json_update+0x244>)
 8019de6:	f002 f9cb 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019dea:	4959      	ldr	r1, [pc, #356]	; (8019f50 <json_update+0x244>)
 8019dec:	4859      	ldr	r0, [pc, #356]	; (8019f54 <json_update+0x248>)
 8019dee:	f7ff fed1 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019df2:	22ff      	movs	r2, #255	; 0xff
 8019df4:	2100      	movs	r1, #0
 8019df6:	4856      	ldr	r0, [pc, #344]	; (8019f50 <json_update+0x244>)
 8019df8:	f001 f9bc 	bl	801b174 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 8019dfc:	4a5e      	ldr	r2, [pc, #376]	; (8019f78 <json_update+0x26c>)
 8019dfe:	495f      	ldr	r1, [pc, #380]	; (8019f7c <json_update+0x270>)
 8019e00:	4853      	ldr	r0, [pc, #332]	; (8019f50 <json_update+0x244>)
 8019e02:	f002 f9bd 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e06:	4952      	ldr	r1, [pc, #328]	; (8019f50 <json_update+0x244>)
 8019e08:	4852      	ldr	r0, [pc, #328]	; (8019f54 <json_update+0x248>)
 8019e0a:	f7ff fec3 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e0e:	22ff      	movs	r2, #255	; 0xff
 8019e10:	2100      	movs	r1, #0
 8019e12:	484f      	ldr	r0, [pc, #316]	; (8019f50 <json_update+0x244>)
 8019e14:	f001 f9ae 	bl	801b174 <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 8019e18:	4b59      	ldr	r3, [pc, #356]	; (8019f80 <json_update+0x274>)
 8019e1a:	881b      	ldrh	r3, [r3, #0]
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	4959      	ldr	r1, [pc, #356]	; (8019f84 <json_update+0x278>)
 8019e20:	484b      	ldr	r0, [pc, #300]	; (8019f50 <json_update+0x244>)
 8019e22:	f002 f9ad 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e26:	494a      	ldr	r1, [pc, #296]	; (8019f50 <json_update+0x244>)
 8019e28:	484a      	ldr	r0, [pc, #296]	; (8019f54 <json_update+0x248>)
 8019e2a:	f7ff feb3 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e2e:	22ff      	movs	r2, #255	; 0xff
 8019e30:	2100      	movs	r1, #0
 8019e32:	4847      	ldr	r0, [pc, #284]	; (8019f50 <json_update+0x244>)
 8019e34:	f001 f99e 	bl	801b174 <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 8019e38:	4b51      	ldr	r3, [pc, #324]	; (8019f80 <json_update+0x274>)
 8019e3a:	685b      	ldr	r3, [r3, #4]
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	4952      	ldr	r1, [pc, #328]	; (8019f88 <json_update+0x27c>)
 8019e40:	4843      	ldr	r0, [pc, #268]	; (8019f50 <json_update+0x244>)
 8019e42:	f002 f99d 	bl	801c180 <siprintf>
				_RunTime_Packet.temperature);
		Update_File(filename_with_format, buffer);
 8019e46:	4942      	ldr	r1, [pc, #264]	; (8019f50 <json_update+0x244>)
 8019e48:	4842      	ldr	r0, [pc, #264]	; (8019f54 <json_update+0x248>)
 8019e4a:	f7ff fea3 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e4e:	22ff      	movs	r2, #255	; 0xff
 8019e50:	2100      	movs	r1, #0
 8019e52:	483f      	ldr	r0, [pc, #252]	; (8019f50 <json_update+0x244>)
 8019e54:	f001 f98e 	bl	801b174 <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 8019e58:	4b49      	ldr	r3, [pc, #292]	; (8019f80 <json_update+0x274>)
 8019e5a:	689b      	ldr	r3, [r3, #8]
 8019e5c:	461a      	mov	r2, r3
 8019e5e:	494b      	ldr	r1, [pc, #300]	; (8019f8c <json_update+0x280>)
 8019e60:	483b      	ldr	r0, [pc, #236]	; (8019f50 <json_update+0x244>)
 8019e62:	f002 f98d 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e66:	493a      	ldr	r1, [pc, #232]	; (8019f50 <json_update+0x244>)
 8019e68:	483a      	ldr	r0, [pc, #232]	; (8019f54 <json_update+0x248>)
 8019e6a:	f7ff fe93 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e6e:	22ff      	movs	r2, #255	; 0xff
 8019e70:	2100      	movs	r1, #0
 8019e72:	4837      	ldr	r0, [pc, #220]	; (8019f50 <json_update+0x244>)
 8019e74:	f001 f97e 	bl	801b174 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 8019e78:	4b41      	ldr	r3, [pc, #260]	; (8019f80 <json_update+0x274>)
 8019e7a:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d001      	beq.n	8019e84 <json_update+0x178>
 8019e80:	4b43      	ldr	r3, [pc, #268]	; (8019f90 <json_update+0x284>)
 8019e82:	e000      	b.n	8019e86 <json_update+0x17a>
 8019e84:	4b43      	ldr	r3, [pc, #268]	; (8019f94 <json_update+0x288>)
 8019e86:	461a      	mov	r2, r3
 8019e88:	4943      	ldr	r1, [pc, #268]	; (8019f98 <json_update+0x28c>)
 8019e8a:	4831      	ldr	r0, [pc, #196]	; (8019f50 <json_update+0x244>)
 8019e8c:	f002 f978 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e90:	492f      	ldr	r1, [pc, #188]	; (8019f50 <json_update+0x244>)
 8019e92:	4830      	ldr	r0, [pc, #192]	; (8019f54 <json_update+0x248>)
 8019e94:	f7ff fe7e 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e98:	22ff      	movs	r2, #255	; 0xff
 8019e9a:	2100      	movs	r1, #0
 8019e9c:	482c      	ldr	r0, [pc, #176]	; (8019f50 <json_update+0x244>)
 8019e9e:	f001 f969 	bl	801b174 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 8019ea2:	4b37      	ldr	r3, [pc, #220]	; (8019f80 <json_update+0x274>)
 8019ea4:	695b      	ldr	r3, [r3, #20]
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f7e6 fb66 	bl	8000578 <__aeabi_f2d>
 8019eac:	4602      	mov	r2, r0
 8019eae:	460b      	mov	r3, r1
 8019eb0:	493a      	ldr	r1, [pc, #232]	; (8019f9c <json_update+0x290>)
 8019eb2:	4827      	ldr	r0, [pc, #156]	; (8019f50 <json_update+0x244>)
 8019eb4:	f002 f964 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019eb8:	4925      	ldr	r1, [pc, #148]	; (8019f50 <json_update+0x244>)
 8019eba:	4826      	ldr	r0, [pc, #152]	; (8019f54 <json_update+0x248>)
 8019ebc:	f7ff fe6a 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ec0:	22ff      	movs	r2, #255	; 0xff
 8019ec2:	2100      	movs	r1, #0
 8019ec4:	4822      	ldr	r0, [pc, #136]	; (8019f50 <json_update+0x244>)
 8019ec6:	f001 f955 	bl	801b174 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 8019eca:	4935      	ldr	r1, [pc, #212]	; (8019fa0 <json_update+0x294>)
 8019ecc:	4820      	ldr	r0, [pc, #128]	; (8019f50 <json_update+0x244>)
 8019ece:	f002 f957 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ed2:	491f      	ldr	r1, [pc, #124]	; (8019f50 <json_update+0x244>)
 8019ed4:	481f      	ldr	r0, [pc, #124]	; (8019f54 <json_update+0x248>)
 8019ed6:	f7ff fe5d 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019eda:	22ff      	movs	r2, #255	; 0xff
 8019edc:	2100      	movs	r1, #0
 8019ede:	481c      	ldr	r0, [pc, #112]	; (8019f50 <json_update+0x244>)
 8019ee0:	f001 f948 	bl	801b174 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 8019ee4:	4b26      	ldr	r3, [pc, #152]	; (8019f80 <json_update+0x274>)
 8019ee6:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7e6 fb45 	bl	8000578 <__aeabi_f2d>
 8019eee:	4602      	mov	r2, r0
 8019ef0:	460b      	mov	r3, r1
 8019ef2:	492c      	ldr	r1, [pc, #176]	; (8019fa4 <json_update+0x298>)
 8019ef4:	4816      	ldr	r0, [pc, #88]	; (8019f50 <json_update+0x244>)
 8019ef6:	f002 f943 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019efa:	4915      	ldr	r1, [pc, #84]	; (8019f50 <json_update+0x244>)
 8019efc:	4815      	ldr	r0, [pc, #84]	; (8019f54 <json_update+0x248>)
 8019efe:	f7ff fe49 	bl	8019b94 <Update_File>

		//we end it
		memset(buffer,0,sizeof(buffer));
 8019f02:	22ff      	movs	r2, #255	; 0xff
 8019f04:	2100      	movs	r1, #0
 8019f06:	4812      	ldr	r0, [pc, #72]	; (8019f50 <json_update+0x244>)
 8019f08:	f001 f934 	bl	801b174 <memset>
		sprintf(buffer, "}\n\n");
 8019f0c:	4926      	ldr	r1, [pc, #152]	; (8019fa8 <json_update+0x29c>)
 8019f0e:	4810      	ldr	r0, [pc, #64]	; (8019f50 <json_update+0x244>)
 8019f10:	f002 f936 	bl	801c180 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 8019f14:	490e      	ldr	r1, [pc, #56]	; (8019f50 <json_update+0x244>)
 8019f16:	480f      	ldr	r0, [pc, #60]	; (8019f54 <json_update+0x248>)
 8019f18:	f7ff fe3c 	bl	8019b94 <Update_File>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	461a      	mov	r2, r3
 8019f20:	4b09      	ldr	r3, [pc, #36]	; (8019f48 <json_update+0x23c>)
 8019f22:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 8019f24:	4807      	ldr	r0, [pc, #28]	; (8019f44 <json_update+0x238>)
 8019f26:	f7ff fd73 	bl	8019a10 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 8019f2a:	4b07      	ldr	r3, [pc, #28]	; (8019f48 <json_update+0x23c>)
 8019f2c:	781b      	ldrb	r3, [r3, #0]
 8019f2e:	b25a      	sxtb	r2, r3
 8019f30:	4b13      	ldr	r3, [pc, #76]	; (8019f80 <json_update+0x274>)
 8019f32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8019f36:	bf00      	nop
 8019f38:	3718      	adds	r7, #24
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd80      	pop	{r7, pc}
 8019f3e:	bf00      	nop
 8019f40:	200017c0 	.word	0x200017c0
 8019f44:	08021298 	.word	0x08021298
 8019f48:	20002240 	.word	0x20002240
 8019f4c:	0802129c 	.word	0x0802129c
 8019f50:	200022ac 	.word	0x200022ac
 8019f54:	20002244 	.word	0x20002244
 8019f58:	080212a0 	.word	0x080212a0
 8019f5c:	200013a5 	.word	0x200013a5
 8019f60:	080212b8 	.word	0x080212b8
 8019f64:	080212c4 	.word	0x080212c4
 8019f68:	200013d7 	.word	0x200013d7
 8019f6c:	080212e4 	.word	0x080212e4
 8019f70:	20001409 	.word	0x20001409
 8019f74:	080212f8 	.word	0x080212f8
 8019f78:	2000143b 	.word	0x2000143b
 8019f7c:	08021308 	.word	0x08021308
 8019f80:	20001470 	.word	0x20001470
 8019f84:	08021318 	.word	0x08021318
 8019f88:	08021328 	.word	0x08021328
 8019f8c:	08021340 	.word	0x08021340
 8019f90:	08021354 	.word	0x08021354
 8019f94:	0802135c 	.word	0x0802135c
 8019f98:	08021364 	.word	0x08021364
 8019f9c:	08021374 	.word	0x08021374
 8019fa0:	08021388 	.word	0x08021388
 8019fa4:	08021398 	.word	0x08021398
 8019fa8:	080213ac 	.word	0x080213ac

08019fac <csv_update>:
void csv_update() {
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b088      	sub	sp, #32
 8019fb0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8019fb2:	f107 0314 	add.w	r3, r7, #20
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	4619      	mov	r1, r3
 8019fba:	4880      	ldr	r0, [pc, #512]	; (801a1bc <csv_update+0x210>)
 8019fbc:	f7ee ff28 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8019fc0:	463b      	mov	r3, r7
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	487d      	ldr	r0, [pc, #500]	; (801a1bc <csv_update+0x210>)
 8019fc8:	f7ee fe40 	bl	8008c4c <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 8019fcc:	487c      	ldr	r0, [pc, #496]	; (801a1c0 <csv_update+0x214>)
 8019fce:	f7ff fcf3 	bl	80199b8 <Mount_SD>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	4b7b      	ldr	r3, [pc, #492]	; (801a1c4 <csv_update+0x218>)
 8019fd8:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019fda:	4b7a      	ldr	r3, [pc, #488]	; (801a1c4 <csv_update+0x218>)
 8019fdc:	781b      	ldrb	r3, [r3, #0]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	f040 80e2 	bne.w	801a1a8 <csv_update+0x1fc>
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);



		sprintf(buffer, "TF241_%s ,", ver_GetUid());
 8019fe4:	f7e7 ff80 	bl	8001ee8 <ver_GetUid>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	461a      	mov	r2, r3
 8019fec:	4976      	ldr	r1, [pc, #472]	; (801a1c8 <csv_update+0x21c>)
 8019fee:	4877      	ldr	r0, [pc, #476]	; (801a1cc <csv_update+0x220>)
 8019ff0:	f002 f8c6 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ff4:	4975      	ldr	r1, [pc, #468]	; (801a1cc <csv_update+0x220>)
 8019ff6:	4876      	ldr	r0, [pc, #472]	; (801a1d0 <csv_update+0x224>)
 8019ff8:	f7ff fdcc 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ffc:	22ff      	movs	r2, #255	; 0xff
 8019ffe:	2100      	movs	r1, #0
 801a000:	4872      	ldr	r0, [pc, #456]	; (801a1cc <csv_update+0x220>)
 801a002:	f001 f8b7 	bl	801b174 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801a006:	4a73      	ldr	r2, [pc, #460]	; (801a1d4 <csv_update+0x228>)
 801a008:	4973      	ldr	r1, [pc, #460]	; (801a1d8 <csv_update+0x22c>)
 801a00a:	4870      	ldr	r0, [pc, #448]	; (801a1cc <csv_update+0x220>)
 801a00c:	f002 f8b8 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a010:	496e      	ldr	r1, [pc, #440]	; (801a1cc <csv_update+0x220>)
 801a012:	486f      	ldr	r0, [pc, #444]	; (801a1d0 <csv_update+0x224>)
 801a014:	f7ff fdbe 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a018:	22ff      	movs	r2, #255	; 0xff
 801a01a:	2100      	movs	r1, #0
 801a01c:	486b      	ldr	r0, [pc, #428]	; (801a1cc <csv_update+0x220>)
 801a01e:	f001 f8a9 	bl	801b174 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes, sTime.Seconds);
 801a022:	783b      	ldrb	r3, [r7, #0]
 801a024:	461a      	mov	r2, r3
 801a026:	787b      	ldrb	r3, [r7, #1]
 801a028:	4619      	mov	r1, r3
 801a02a:	78bb      	ldrb	r3, [r7, #2]
 801a02c:	9300      	str	r3, [sp, #0]
 801a02e:	460b      	mov	r3, r1
 801a030:	496a      	ldr	r1, [pc, #424]	; (801a1dc <csv_update+0x230>)
 801a032:	4866      	ldr	r0, [pc, #408]	; (801a1cc <csv_update+0x220>)
 801a034:	f002 f8a4 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a038:	4964      	ldr	r1, [pc, #400]	; (801a1cc <csv_update+0x220>)
 801a03a:	4865      	ldr	r0, [pc, #404]	; (801a1d0 <csv_update+0x224>)
 801a03c:	f7ff fdaa 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a040:	22ff      	movs	r2, #255	; 0xff
 801a042:	2100      	movs	r1, #0
 801a044:	4861      	ldr	r0, [pc, #388]	; (801a1cc <csv_update+0x220>)
 801a046:	f001 f895 	bl	801b174 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801a04a:	4a65      	ldr	r2, [pc, #404]	; (801a1e0 <csv_update+0x234>)
 801a04c:	4962      	ldr	r1, [pc, #392]	; (801a1d8 <csv_update+0x22c>)
 801a04e:	485f      	ldr	r0, [pc, #380]	; (801a1cc <csv_update+0x220>)
 801a050:	f002 f896 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a054:	495d      	ldr	r1, [pc, #372]	; (801a1cc <csv_update+0x220>)
 801a056:	485e      	ldr	r0, [pc, #376]	; (801a1d0 <csv_update+0x224>)
 801a058:	f7ff fd9c 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a05c:	22ff      	movs	r2, #255	; 0xff
 801a05e:	2100      	movs	r1, #0
 801a060:	485a      	ldr	r0, [pc, #360]	; (801a1cc <csv_update+0x220>)
 801a062:	f001 f887 	bl	801b174 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.name);
 801a066:	4a5f      	ldr	r2, [pc, #380]	; (801a1e4 <csv_update+0x238>)
 801a068:	495b      	ldr	r1, [pc, #364]	; (801a1d8 <csv_update+0x22c>)
 801a06a:	4858      	ldr	r0, [pc, #352]	; (801a1cc <csv_update+0x220>)
 801a06c:	f002 f888 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a070:	4956      	ldr	r1, [pc, #344]	; (801a1cc <csv_update+0x220>)
 801a072:	4857      	ldr	r0, [pc, #348]	; (801a1d0 <csv_update+0x224>)
 801a074:	f7ff fd8e 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a078:	22ff      	movs	r2, #255	; 0xff
 801a07a:	2100      	movs	r1, #0
 801a07c:	4853      	ldr	r0, [pc, #332]	; (801a1cc <csv_update+0x220>)
 801a07e:	f001 f879 	bl	801b174 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801a082:	4a59      	ldr	r2, [pc, #356]	; (801a1e8 <csv_update+0x23c>)
 801a084:	4954      	ldr	r1, [pc, #336]	; (801a1d8 <csv_update+0x22c>)
 801a086:	4851      	ldr	r0, [pc, #324]	; (801a1cc <csv_update+0x220>)
 801a088:	f002 f87a 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a08c:	494f      	ldr	r1, [pc, #316]	; (801a1cc <csv_update+0x220>)
 801a08e:	4850      	ldr	r0, [pc, #320]	; (801a1d0 <csv_update+0x224>)
 801a090:	f7ff fd80 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a094:	22ff      	movs	r2, #255	; 0xff
 801a096:	2100      	movs	r1, #0
 801a098:	484c      	ldr	r0, [pc, #304]	; (801a1cc <csv_update+0x220>)
 801a09a:	f001 f86b 	bl	801b174 <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 801a09e:	4b53      	ldr	r3, [pc, #332]	; (801a1ec <csv_update+0x240>)
 801a0a0:	881b      	ldrh	r3, [r3, #0]
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	4952      	ldr	r1, [pc, #328]	; (801a1f0 <csv_update+0x244>)
 801a0a6:	4849      	ldr	r0, [pc, #292]	; (801a1cc <csv_update+0x220>)
 801a0a8:	f002 f86a 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0ac:	4947      	ldr	r1, [pc, #284]	; (801a1cc <csv_update+0x220>)
 801a0ae:	4848      	ldr	r0, [pc, #288]	; (801a1d0 <csv_update+0x224>)
 801a0b0:	f7ff fd70 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0b4:	22ff      	movs	r2, #255	; 0xff
 801a0b6:	2100      	movs	r1, #0
 801a0b8:	4844      	ldr	r0, [pc, #272]	; (801a1cc <csv_update+0x220>)
 801a0ba:	f001 f85b 	bl	801b174 <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 801a0be:	4b4b      	ldr	r3, [pc, #300]	; (801a1ec <csv_update+0x240>)
 801a0c0:	685b      	ldr	r3, [r3, #4]
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	494b      	ldr	r1, [pc, #300]	; (801a1f4 <csv_update+0x248>)
 801a0c6:	4841      	ldr	r0, [pc, #260]	; (801a1cc <csv_update+0x220>)
 801a0c8:	f002 f85a 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0cc:	493f      	ldr	r1, [pc, #252]	; (801a1cc <csv_update+0x220>)
 801a0ce:	4840      	ldr	r0, [pc, #256]	; (801a1d0 <csv_update+0x224>)
 801a0d0:	f7ff fd60 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0d4:	22ff      	movs	r2, #255	; 0xff
 801a0d6:	2100      	movs	r1, #0
 801a0d8:	483c      	ldr	r0, [pc, #240]	; (801a1cc <csv_update+0x220>)
 801a0da:	f001 f84b 	bl	801b174 <memset>
		sprintf(buffer, "%ld ,",  _RunTime_Packet.humidity);
 801a0de:	4b43      	ldr	r3, [pc, #268]	; (801a1ec <csv_update+0x240>)
 801a0e0:	689b      	ldr	r3, [r3, #8]
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	4943      	ldr	r1, [pc, #268]	; (801a1f4 <csv_update+0x248>)
 801a0e6:	4839      	ldr	r0, [pc, #228]	; (801a1cc <csv_update+0x220>)
 801a0e8:	f002 f84a 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0ec:	4937      	ldr	r1, [pc, #220]	; (801a1cc <csv_update+0x220>)
 801a0ee:	4838      	ldr	r0, [pc, #224]	; (801a1d0 <csv_update+0x224>)
 801a0f0:	f7ff fd50 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0f4:	22ff      	movs	r2, #255	; 0xff
 801a0f6:	2100      	movs	r1, #0
 801a0f8:	4834      	ldr	r0, [pc, #208]	; (801a1cc <csv_update+0x220>)
 801a0fa:	f001 f83b 	bl	801b174 <memset>
		sprintf(buffer, "%s ,", _RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801a0fe:	4b3b      	ldr	r3, [pc, #236]	; (801a1ec <csv_update+0x240>)
 801a100:	7b1b      	ldrb	r3, [r3, #12]
 801a102:	2b01      	cmp	r3, #1
 801a104:	d101      	bne.n	801a10a <csv_update+0x15e>
 801a106:	4b3c      	ldr	r3, [pc, #240]	; (801a1f8 <csv_update+0x24c>)
 801a108:	e000      	b.n	801a10c <csv_update+0x160>
 801a10a:	4b3c      	ldr	r3, [pc, #240]	; (801a1fc <csv_update+0x250>)
 801a10c:	461a      	mov	r2, r3
 801a10e:	4932      	ldr	r1, [pc, #200]	; (801a1d8 <csv_update+0x22c>)
 801a110:	482e      	ldr	r0, [pc, #184]	; (801a1cc <csv_update+0x220>)
 801a112:	f002 f835 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a116:	492d      	ldr	r1, [pc, #180]	; (801a1cc <csv_update+0x220>)
 801a118:	482d      	ldr	r0, [pc, #180]	; (801a1d0 <csv_update+0x224>)
 801a11a:	f7ff fd3b 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a11e:	22ff      	movs	r2, #255	; 0xff
 801a120:	2100      	movs	r1, #0
 801a122:	482a      	ldr	r0, [pc, #168]	; (801a1cc <csv_update+0x220>)
 801a124:	f001 f826 	bl	801b174 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801a128:	4b30      	ldr	r3, [pc, #192]	; (801a1ec <csv_update+0x240>)
 801a12a:	695b      	ldr	r3, [r3, #20]
 801a12c:	4618      	mov	r0, r3
 801a12e:	f7e6 fa23 	bl	8000578 <__aeabi_f2d>
 801a132:	4602      	mov	r2, r0
 801a134:	460b      	mov	r3, r1
 801a136:	4932      	ldr	r1, [pc, #200]	; (801a200 <csv_update+0x254>)
 801a138:	4824      	ldr	r0, [pc, #144]	; (801a1cc <csv_update+0x220>)
 801a13a:	f002 f821 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a13e:	4923      	ldr	r1, [pc, #140]	; (801a1cc <csv_update+0x220>)
 801a140:	4823      	ldr	r0, [pc, #140]	; (801a1d0 <csv_update+0x224>)
 801a142:	f7ff fd27 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a146:	22ff      	movs	r2, #255	; 0xff
 801a148:	2100      	movs	r1, #0
 801a14a:	4820      	ldr	r0, [pc, #128]	; (801a1cc <csv_update+0x220>)
 801a14c:	f001 f812 	bl	801b174 <memset>
		sprintf(buffer, "NONE ,");
 801a150:	492c      	ldr	r1, [pc, #176]	; (801a204 <csv_update+0x258>)
 801a152:	481e      	ldr	r0, [pc, #120]	; (801a1cc <csv_update+0x220>)
 801a154:	f002 f814 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a158:	491c      	ldr	r1, [pc, #112]	; (801a1cc <csv_update+0x220>)
 801a15a:	481d      	ldr	r0, [pc, #116]	; (801a1d0 <csv_update+0x224>)
 801a15c:	f7ff fd1a 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a160:	22ff      	movs	r2, #255	; 0xff
 801a162:	2100      	movs	r1, #0
 801a164:	4819      	ldr	r0, [pc, #100]	; (801a1cc <csv_update+0x220>)
 801a166:	f001 f805 	bl	801b174 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801a16a:	4b20      	ldr	r3, [pc, #128]	; (801a1ec <csv_update+0x240>)
 801a16c:	6a1b      	ldr	r3, [r3, #32]
 801a16e:	4618      	mov	r0, r3
 801a170:	f7e6 fa02 	bl	8000578 <__aeabi_f2d>
 801a174:	4602      	mov	r2, r0
 801a176:	460b      	mov	r3, r1
 801a178:	4921      	ldr	r1, [pc, #132]	; (801a200 <csv_update+0x254>)
 801a17a:	4814      	ldr	r0, [pc, #80]	; (801a1cc <csv_update+0x220>)
 801a17c:	f002 f800 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a180:	4912      	ldr	r1, [pc, #72]	; (801a1cc <csv_update+0x220>)
 801a182:	4813      	ldr	r0, [pc, #76]	; (801a1d0 <csv_update+0x224>)
 801a184:	f7ff fd06 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a188:	22ff      	movs	r2, #255	; 0xff
 801a18a:	2100      	movs	r1, #0
 801a18c:	480f      	ldr	r0, [pc, #60]	; (801a1cc <csv_update+0x220>)
 801a18e:	f000 fff1 	bl	801b174 <memset>
		sprintf(buffer, "\n");
 801a192:	491d      	ldr	r1, [pc, #116]	; (801a208 <csv_update+0x25c>)
 801a194:	480d      	ldr	r0, [pc, #52]	; (801a1cc <csv_update+0x220>)
 801a196:	f001 fff3 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a19a:	490c      	ldr	r1, [pc, #48]	; (801a1cc <csv_update+0x220>)
 801a19c:	480c      	ldr	r0, [pc, #48]	; (801a1d0 <csv_update+0x224>)
 801a19e:	f7ff fcf9 	bl	8019b94 <Update_File>

		Unmount_SD("/");
 801a1a2:	4807      	ldr	r0, [pc, #28]	; (801a1c0 <csv_update+0x214>)
 801a1a4:	f7ff fc34 	bl	8019a10 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a1a8:	4b06      	ldr	r3, [pc, #24]	; (801a1c4 <csv_update+0x218>)
 801a1aa:	781b      	ldrb	r3, [r3, #0]
 801a1ac:	b25a      	sxtb	r2, r3
 801a1ae:	4b0f      	ldr	r3, [pc, #60]	; (801a1ec <csv_update+0x240>)
 801a1b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a1b4:	bf00      	nop
 801a1b6:	3718      	adds	r7, #24
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}
 801a1bc:	200017c0 	.word	0x200017c0
 801a1c0:	08021298 	.word	0x08021298
 801a1c4:	20002240 	.word	0x20002240
 801a1c8:	080213b0 	.word	0x080213b0
 801a1cc:	200022ac 	.word	0x200022ac
 801a1d0:	20002244 	.word	0x20002244
 801a1d4:	200013a5 	.word	0x200013a5
 801a1d8:	080213bc 	.word	0x080213bc
 801a1dc:	080213c4 	.word	0x080213c4
 801a1e0:	200013d7 	.word	0x200013d7
 801a1e4:	20001409 	.word	0x20001409
 801a1e8:	2000143b 	.word	0x2000143b
 801a1ec:	20001470 	.word	0x20001470
 801a1f0:	080213d8 	.word	0x080213d8
 801a1f4:	080213e0 	.word	0x080213e0
 801a1f8:	08021354 	.word	0x08021354
 801a1fc:	0802135c 	.word	0x0802135c
 801a200:	080213e8 	.word	0x080213e8
 801a204:	080213f0 	.word	0x080213f0
 801a208:	080213f8 	.word	0x080213f8

0801a20c <csv_header>:
void csv_header() {
 801a20c:	b580      	push	{r7, lr}
 801a20e:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801a210:	485d      	ldr	r0, [pc, #372]	; (801a388 <csv_header+0x17c>)
 801a212:	f7ff fbd1 	bl	80199b8 <Mount_SD>
 801a216:	4603      	mov	r3, r0
 801a218:	461a      	mov	r2, r3
 801a21a:	4b5c      	ldr	r3, [pc, #368]	; (801a38c <csv_header+0x180>)
 801a21c:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a21e:	4b5b      	ldr	r3, [pc, #364]	; (801a38c <csv_header+0x180>)
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	2b00      	cmp	r3, #0
 801a224:	f040 80a7 	bne.w	801a376 <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 801a228:	4959      	ldr	r1, [pc, #356]	; (801a390 <csv_header+0x184>)
 801a22a:	485a      	ldr	r0, [pc, #360]	; (801a394 <csv_header+0x188>)
 801a22c:	f001 ffa8 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a230:	4958      	ldr	r1, [pc, #352]	; (801a394 <csv_header+0x188>)
 801a232:	4859      	ldr	r0, [pc, #356]	; (801a398 <csv_header+0x18c>)
 801a234:	f7ff fcae 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a238:	22ff      	movs	r2, #255	; 0xff
 801a23a:	2100      	movs	r1, #0
 801a23c:	4855      	ldr	r0, [pc, #340]	; (801a394 <csv_header+0x188>)
 801a23e:	f000 ff99 	bl	801b174 <memset>
		sprintf(buffer, "id ,");
 801a242:	4956      	ldr	r1, [pc, #344]	; (801a39c <csv_header+0x190>)
 801a244:	4853      	ldr	r0, [pc, #332]	; (801a394 <csv_header+0x188>)
 801a246:	f001 ff9b 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a24a:	4952      	ldr	r1, [pc, #328]	; (801a394 <csv_header+0x188>)
 801a24c:	4852      	ldr	r0, [pc, #328]	; (801a398 <csv_header+0x18c>)
 801a24e:	f7ff fca1 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a252:	22ff      	movs	r2, #255	; 0xff
 801a254:	2100      	movs	r1, #0
 801a256:	484f      	ldr	r0, [pc, #316]	; (801a394 <csv_header+0x188>)
 801a258:	f000 ff8c 	bl	801b174 <memset>
		sprintf(buffer, "timestamp ,");
 801a25c:	4950      	ldr	r1, [pc, #320]	; (801a3a0 <csv_header+0x194>)
 801a25e:	484d      	ldr	r0, [pc, #308]	; (801a394 <csv_header+0x188>)
 801a260:	f001 ff8e 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a264:	494b      	ldr	r1, [pc, #300]	; (801a394 <csv_header+0x188>)
 801a266:	484c      	ldr	r0, [pc, #304]	; (801a398 <csv_header+0x18c>)
 801a268:	f7ff fc94 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a26c:	22ff      	movs	r2, #255	; 0xff
 801a26e:	2100      	movs	r1, #0
 801a270:	4848      	ldr	r0, [pc, #288]	; (801a394 <csv_header+0x188>)
 801a272:	f000 ff7f 	bl	801b174 <memset>
		sprintf(buffer, "location ,");
 801a276:	494b      	ldr	r1, [pc, #300]	; (801a3a4 <csv_header+0x198>)
 801a278:	4846      	ldr	r0, [pc, #280]	; (801a394 <csv_header+0x188>)
 801a27a:	f001 ff81 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a27e:	4945      	ldr	r1, [pc, #276]	; (801a394 <csv_header+0x188>)
 801a280:	4845      	ldr	r0, [pc, #276]	; (801a398 <csv_header+0x18c>)
 801a282:	f7ff fc87 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a286:	22ff      	movs	r2, #255	; 0xff
 801a288:	2100      	movs	r1, #0
 801a28a:	4842      	ldr	r0, [pc, #264]	; (801a394 <csv_header+0x188>)
 801a28c:	f000 ff72 	bl	801b174 <memset>
		sprintf(buffer, "name ,");
 801a290:	4945      	ldr	r1, [pc, #276]	; (801a3a8 <csv_header+0x19c>)
 801a292:	4840      	ldr	r0, [pc, #256]	; (801a394 <csv_header+0x188>)
 801a294:	f001 ff74 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a298:	493e      	ldr	r1, [pc, #248]	; (801a394 <csv_header+0x188>)
 801a29a:	483f      	ldr	r0, [pc, #252]	; (801a398 <csv_header+0x18c>)
 801a29c:	f7ff fc7a 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a2a0:	22ff      	movs	r2, #255	; 0xff
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	483b      	ldr	r0, [pc, #236]	; (801a394 <csv_header+0x188>)
 801a2a6:	f000 ff65 	bl	801b174 <memset>
		sprintf(buffer, "group ,");
 801a2aa:	4940      	ldr	r1, [pc, #256]	; (801a3ac <csv_header+0x1a0>)
 801a2ac:	4839      	ldr	r0, [pc, #228]	; (801a394 <csv_header+0x188>)
 801a2ae:	f001 ff67 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a2b2:	4938      	ldr	r1, [pc, #224]	; (801a394 <csv_header+0x188>)
 801a2b4:	4838      	ldr	r0, [pc, #224]	; (801a398 <csv_header+0x18c>)
 801a2b6:	f7ff fc6d 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a2ba:	22ff      	movs	r2, #255	; 0xff
 801a2bc:	2100      	movs	r1, #0
 801a2be:	4835      	ldr	r0, [pc, #212]	; (801a394 <csv_header+0x188>)
 801a2c0:	f000 ff58 	bl	801b174 <memset>
		sprintf(buffer, "co2 ,");
 801a2c4:	493a      	ldr	r1, [pc, #232]	; (801a3b0 <csv_header+0x1a4>)
 801a2c6:	4833      	ldr	r0, [pc, #204]	; (801a394 <csv_header+0x188>)
 801a2c8:	f001 ff5a 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a2cc:	4931      	ldr	r1, [pc, #196]	; (801a394 <csv_header+0x188>)
 801a2ce:	4832      	ldr	r0, [pc, #200]	; (801a398 <csv_header+0x18c>)
 801a2d0:	f7ff fc60 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a2d4:	22ff      	movs	r2, #255	; 0xff
 801a2d6:	2100      	movs	r1, #0
 801a2d8:	482e      	ldr	r0, [pc, #184]	; (801a394 <csv_header+0x188>)
 801a2da:	f000 ff4b 	bl	801b174 <memset>
		sprintf(buffer, "temperature ,");
 801a2de:	4935      	ldr	r1, [pc, #212]	; (801a3b4 <csv_header+0x1a8>)
 801a2e0:	482c      	ldr	r0, [pc, #176]	; (801a394 <csv_header+0x188>)
 801a2e2:	f001 ff4d 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a2e6:	492b      	ldr	r1, [pc, #172]	; (801a394 <csv_header+0x188>)
 801a2e8:	482b      	ldr	r0, [pc, #172]	; (801a398 <csv_header+0x18c>)
 801a2ea:	f7ff fc53 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a2ee:	22ff      	movs	r2, #255	; 0xff
 801a2f0:	2100      	movs	r1, #0
 801a2f2:	4828      	ldr	r0, [pc, #160]	; (801a394 <csv_header+0x188>)
 801a2f4:	f000 ff3e 	bl	801b174 <memset>
		sprintf(buffer, "humidity ,");
 801a2f8:	492f      	ldr	r1, [pc, #188]	; (801a3b8 <csv_header+0x1ac>)
 801a2fa:	4826      	ldr	r0, [pc, #152]	; (801a394 <csv_header+0x188>)
 801a2fc:	f001 ff40 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a300:	4924      	ldr	r1, [pc, #144]	; (801a394 <csv_header+0x188>)
 801a302:	4825      	ldr	r0, [pc, #148]	; (801a398 <csv_header+0x18c>)
 801a304:	f7ff fc46 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a308:	22ff      	movs	r2, #255	; 0xff
 801a30a:	2100      	movs	r1, #0
 801a30c:	4821      	ldr	r0, [pc, #132]	; (801a394 <csv_header+0x188>)
 801a30e:	f000 ff31 	bl	801b174 <memset>
		sprintf(buffer, "pir ,");
 801a312:	492a      	ldr	r1, [pc, #168]	; (801a3bc <csv_header+0x1b0>)
 801a314:	481f      	ldr	r0, [pc, #124]	; (801a394 <csv_header+0x188>)
 801a316:	f001 ff33 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a31a:	491e      	ldr	r1, [pc, #120]	; (801a394 <csv_header+0x188>)
 801a31c:	481e      	ldr	r0, [pc, #120]	; (801a398 <csv_header+0x18c>)
 801a31e:	f7ff fc39 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a322:	22ff      	movs	r2, #255	; 0xff
 801a324:	2100      	movs	r1, #0
 801a326:	481b      	ldr	r0, [pc, #108]	; (801a394 <csv_header+0x188>)
 801a328:	f000 ff24 	bl	801b174 <memset>
		sprintf(buffer, "pm2.5 ,");
 801a32c:	4924      	ldr	r1, [pc, #144]	; (801a3c0 <csv_header+0x1b4>)
 801a32e:	4819      	ldr	r0, [pc, #100]	; (801a394 <csv_header+0x188>)
 801a330:	f001 ff26 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a334:	4917      	ldr	r1, [pc, #92]	; (801a394 <csv_header+0x188>)
 801a336:	4818      	ldr	r0, [pc, #96]	; (801a398 <csv_header+0x18c>)
 801a338:	f7ff fc2c 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a33c:	22ff      	movs	r2, #255	; 0xff
 801a33e:	2100      	movs	r1, #0
 801a340:	4814      	ldr	r0, [pc, #80]	; (801a394 <csv_header+0x188>)
 801a342:	f000 ff17 	bl	801b174 <memset>
		sprintf(buffer, "port ,");
 801a346:	491f      	ldr	r1, [pc, #124]	; (801a3c4 <csv_header+0x1b8>)
 801a348:	4812      	ldr	r0, [pc, #72]	; (801a394 <csv_header+0x188>)
 801a34a:	f001 ff19 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a34e:	4911      	ldr	r1, [pc, #68]	; (801a394 <csv_header+0x188>)
 801a350:	4811      	ldr	r0, [pc, #68]	; (801a398 <csv_header+0x18c>)
 801a352:	f7ff fc1f 	bl	8019b94 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a356:	22ff      	movs	r2, #255	; 0xff
 801a358:	2100      	movs	r1, #0
 801a35a:	480e      	ldr	r0, [pc, #56]	; (801a394 <csv_header+0x188>)
 801a35c:	f000 ff0a 	bl	801b174 <memset>
		sprintf(buffer, "battery \n\n");
 801a360:	4919      	ldr	r1, [pc, #100]	; (801a3c8 <csv_header+0x1bc>)
 801a362:	480c      	ldr	r0, [pc, #48]	; (801a394 <csv_header+0x188>)
 801a364:	f001 ff0c 	bl	801c180 <siprintf>
		Update_File(filename_with_format, buffer);
 801a368:	490a      	ldr	r1, [pc, #40]	; (801a394 <csv_header+0x188>)
 801a36a:	480b      	ldr	r0, [pc, #44]	; (801a398 <csv_header+0x18c>)
 801a36c:	f7ff fc12 	bl	8019b94 <Update_File>

		Unmount_SD("/");
 801a370:	4805      	ldr	r0, [pc, #20]	; (801a388 <csv_header+0x17c>)
 801a372:	f7ff fb4d 	bl	8019a10 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a376:	4b05      	ldr	r3, [pc, #20]	; (801a38c <csv_header+0x180>)
 801a378:	781b      	ldrb	r3, [r3, #0]
 801a37a:	b25a      	sxtb	r2, r3
 801a37c:	4b13      	ldr	r3, [pc, #76]	; (801a3cc <csv_header+0x1c0>)
 801a37e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31


}
 801a382:	bf00      	nop
 801a384:	bd80      	pop	{r7, pc}
 801a386:	bf00      	nop
 801a388:	08021298 	.word	0x08021298
 801a38c:	20002240 	.word	0x20002240
 801a390:	080213fc 	.word	0x080213fc
 801a394:	200022ac 	.word	0x200022ac
 801a398:	20002244 	.word	0x20002244
 801a39c:	08021408 	.word	0x08021408
 801a3a0:	08021410 	.word	0x08021410
 801a3a4:	0802141c 	.word	0x0802141c
 801a3a8:	08021428 	.word	0x08021428
 801a3ac:	08021430 	.word	0x08021430
 801a3b0:	08021438 	.word	0x08021438
 801a3b4:	08021440 	.word	0x08021440
 801a3b8:	08021450 	.word	0x08021450
 801a3bc:	0802145c 	.word	0x0802145c
 801a3c0:	08021464 	.word	0x08021464
 801a3c4:	0802146c 	.word	0x0802146c
 801a3c8:	08021474 	.word	0x08021474
 801a3cc:	20001470 	.word	0x20001470

0801a3d0 <filesaving_process>:
void filesaving_process() {
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	af00      	add	r7, sp, #0
//	__disable_irq();
	memset(buffer,0,sizeof(buffer));
 801a3d4:	22ff      	movs	r2, #255	; 0xff
 801a3d6:	2100      	movs	r1, #0
 801a3d8:	4807      	ldr	r0, [pc, #28]	; (801a3f8 <filesaving_process+0x28>)
 801a3da:	f000 fecb 	bl	801b174 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801a3de:	4b07      	ldr	r3, [pc, #28]	; (801a3fc <filesaving_process+0x2c>)
 801a3e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d002      	beq.n	801a3ee <filesaving_process+0x1e>
		csv_update();
 801a3e8:	f7ff fde0 	bl	8019fac <csv_update>
	} else {
		json_update();
	}
//	__enable_irq();
}
 801a3ec:	e001      	b.n	801a3f2 <filesaving_process+0x22>
		json_update();
 801a3ee:	f7ff fc8d 	bl	8019d0c <json_update>
}
 801a3f2:	bf00      	nop
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	200022ac 	.word	0x200022ac
 801a3fc:	20001470 	.word	0x20001470

0801a400 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801a400:	b580      	push	{r7, lr}
 801a402:	b08c      	sub	sp, #48	; 0x30
 801a404:	af04      	add	r7, sp, #16
 801a406:	6078      	str	r0, [r7, #4]
 801a408:	6039      	str	r1, [r7, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801a40a:	482b      	ldr	r0, [pc, #172]	; (801a4b8 <createfile+0xb8>)
 801a40c:	f7ff fad4 	bl	80199b8 <Mount_SD>
 801a410:	4603      	mov	r3, r0
 801a412:	2b00      	cmp	r3, #0
 801a414:	d002      	beq.n	801a41c <createfile+0x1c>
	} else {
	//	__enable_irq();
		return -1;
 801a416:	f04f 33ff 	mov.w	r3, #4294967295
 801a41a:	e049      	b.n	801a4b0 <createfile+0xb0>
	}
	Unmount_SD("/");
 801a41c:	4826      	ldr	r0, [pc, #152]	; (801a4b8 <createfile+0xb8>)
 801a41e:	f7ff faf7 	bl	8019a10 <Unmount_SD>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a422:	f107 031c 	add.w	r3, r7, #28
 801a426:	2200      	movs	r2, #0
 801a428:	4619      	mov	r1, r3
 801a42a:	4824      	ldr	r0, [pc, #144]	; (801a4bc <createfile+0xbc>)
 801a42c:	f7ee fcf0 	bl	8008e10 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a430:	f107 0308 	add.w	r3, r7, #8
 801a434:	2200      	movs	r2, #0
 801a436:	4619      	mov	r1, r3
 801a438:	4820      	ldr	r0, [pc, #128]	; (801a4bc <createfile+0xbc>)
 801a43a:	f7ee fc07 	bl	8008c4c <HAL_RTC_GetTime>

	fresult1 = Mount_SD("/");
 801a43e:	481e      	ldr	r0, [pc, #120]	; (801a4b8 <createfile+0xb8>)
 801a440:	f7ff faba 	bl	80199b8 <Mount_SD>
 801a444:	4603      	mov	r3, r0
 801a446:	461a      	mov	r2, r3
 801a448:	4b1d      	ldr	r3, [pc, #116]	; (801a4c0 <createfile+0xc0>)
 801a44a:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801a44c:	4b1c      	ldr	r3, [pc, #112]	; (801a4c0 <createfile+0xc0>)
 801a44e:	781b      	ldrb	r3, [r3, #0]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d129      	bne.n	801a4a8 <createfile+0xa8>

		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a454:	7ffb      	ldrb	r3, [r7, #31]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a456:	4618      	mov	r0, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a458:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a45a:	461a      	mov	r2, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a45c:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a45e:	4619      	mov	r1, r3
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	9302      	str	r3, [sp, #8]
 801a464:	9101      	str	r1, [sp, #4]
 801a466:	9200      	str	r2, [sp, #0]
 801a468:	4603      	mov	r3, r0
 801a46a:	687a      	ldr	r2, [r7, #4]
 801a46c:	4915      	ldr	r1, [pc, #84]	; (801a4c4 <createfile+0xc4>)
 801a46e:	4816      	ldr	r0, [pc, #88]	; (801a4c8 <createfile+0xc8>)
 801a470:	f001 fe86 	bl	801c180 <siprintf>

		fresult1 = Create_File(filename_with_format);
 801a474:	4814      	ldr	r0, [pc, #80]	; (801a4c8 <createfile+0xc8>)
 801a476:	f7ff faf3 	bl	8019a60 <Create_File>
 801a47a:	4603      	mov	r3, r0
 801a47c:	461a      	mov	r2, r3
 801a47e:	4b10      	ldr	r3, [pc, #64]	; (801a4c0 <createfile+0xc0>)
 801a480:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a482:	480d      	ldr	r0, [pc, #52]	; (801a4b8 <createfile+0xb8>)
 801a484:	f7ff fac4 	bl	8019a10 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801a488:	4b10      	ldr	r3, [pc, #64]	; (801a4cc <createfile+0xcc>)
 801a48a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d00d      	beq.n	801a4ae <createfile+0xae>
			if (file_already_exist) {
 801a492:	4b0f      	ldr	r3, [pc, #60]	; (801a4d0 <createfile+0xd0>)
 801a494:	781b      	ldrb	r3, [r3, #0]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d003      	beq.n	801a4a2 <createfile+0xa2>
				file_already_exist = 0;
 801a49a:	4b0d      	ldr	r3, [pc, #52]	; (801a4d0 <createfile+0xd0>)
 801a49c:	2200      	movs	r2, #0
 801a49e:	701a      	strb	r2, [r3, #0]
 801a4a0:	e005      	b.n	801a4ae <createfile+0xae>
			} else {
				csv_header();  //json does not require an header only csv
 801a4a2:	f7ff feb3 	bl	801a20c <csv_header>
 801a4a6:	e002      	b.n	801a4ae <createfile+0xae>
			}
		}

	} else {
	//	__enable_irq();
		return -1;
 801a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 801a4ac:	e000      	b.n	801a4b0 <createfile+0xb0>
	}
//	__enable_irq();
	return 0;
 801a4ae:	2300      	movs	r3, #0
}
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	3720      	adds	r7, #32
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	bd80      	pop	{r7, pc}
 801a4b8:	08021298 	.word	0x08021298
 801a4bc:	200017c0 	.word	0x200017c0
 801a4c0:	20002240 	.word	0x20002240
 801a4c4:	08021480 	.word	0x08021480
 801a4c8:	20002244 	.word	0x20002244
 801a4cc:	20001470 	.word	0x20001470
 801a4d0:	200022a8 	.word	0x200022a8

0801a4d4 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801a4d8:	4905      	ldr	r1, [pc, #20]	; (801a4f0 <MX_USB_DEVICE_DeInit+0x1c>)
 801a4da:	4806      	ldr	r0, [pc, #24]	; (801a4f4 <MX_USB_DEVICE_DeInit+0x20>)
 801a4dc:	f7f9 f8a8 	bl	8013630 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801a4e0:	4804      	ldr	r0, [pc, #16]	; (801a4f4 <MX_USB_DEVICE_DeInit+0x20>)
 801a4e2:	f7fb f872 	bl	80155ca <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801a4e6:	4803      	ldr	r0, [pc, #12]	; (801a4f4 <MX_USB_DEVICE_DeInit+0x20>)
 801a4e8:	f7fa fffd 	bl	80154e6 <USBD_DeInit>

}
 801a4ec:	bf00      	nop
 801a4ee:	bd80      	pop	{r7, pc}
 801a4f0:	20000120 	.word	0x20000120
 801a4f4:	200023ac 	.word	0x200023ac

0801a4f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	4912      	ldr	r1, [pc, #72]	; (801a548 <MX_USB_DEVICE_Init+0x50>)
 801a500:	4812      	ldr	r0, [pc, #72]	; (801a54c <MX_USB_DEVICE_Init+0x54>)
 801a502:	f7fa ffc0 	bl	8015486 <USBD_Init>
 801a506:	4603      	mov	r3, r0
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d001      	beq.n	801a510 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a50c:	f7e8 fbce 	bl	8002cac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801a510:	490f      	ldr	r1, [pc, #60]	; (801a550 <MX_USB_DEVICE_Init+0x58>)
 801a512:	480e      	ldr	r0, [pc, #56]	; (801a54c <MX_USB_DEVICE_Init+0x54>)
 801a514:	f7fb f817 	bl	8015546 <USBD_RegisterClass>
 801a518:	4603      	mov	r3, r0
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d001      	beq.n	801a522 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a51e:	f7e8 fbc5 	bl	8002cac <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801a522:	490c      	ldr	r1, [pc, #48]	; (801a554 <MX_USB_DEVICE_Init+0x5c>)
 801a524:	4809      	ldr	r0, [pc, #36]	; (801a54c <MX_USB_DEVICE_Init+0x54>)
 801a526:	f7f9 fa8b 	bl	8013a40 <USBD_MSC_RegisterStorage>
 801a52a:	4603      	mov	r3, r0
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d001      	beq.n	801a534 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a530:	f7e8 fbbc 	bl	8002cac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a534:	4805      	ldr	r0, [pc, #20]	; (801a54c <MX_USB_DEVICE_Init+0x54>)
 801a536:	f7fb f83c 	bl	80155b2 <USBD_Start>
 801a53a:	4603      	mov	r3, r0
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d001      	beq.n	801a544 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a540:	f7e8 fbb4 	bl	8002cac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a544:	bf00      	nop
 801a546:	bd80      	pop	{r7, pc}
 801a548:	200000d0 	.word	0x200000d0
 801a54c:	200023ac 	.word	0x200023ac
 801a550:	20000028 	.word	0x20000028
 801a554:	20000120 	.word	0x20000120

0801a558 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a558:	b480      	push	{r7}
 801a55a:	b083      	sub	sp, #12
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	4603      	mov	r3, r0
 801a560:	6039      	str	r1, [r7, #0]
 801a562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a564:	683b      	ldr	r3, [r7, #0]
 801a566:	2212      	movs	r2, #18
 801a568:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a56a:	4b03      	ldr	r3, [pc, #12]	; (801a578 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a56c:	4618      	mov	r0, r3
 801a56e:	370c      	adds	r7, #12
 801a570:	46bd      	mov	sp, r7
 801a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a576:	4770      	bx	lr
 801a578:	200000ec 	.word	0x200000ec

0801a57c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a57c:	b480      	push	{r7}
 801a57e:	b083      	sub	sp, #12
 801a580:	af00      	add	r7, sp, #0
 801a582:	4603      	mov	r3, r0
 801a584:	6039      	str	r1, [r7, #0]
 801a586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a588:	683b      	ldr	r3, [r7, #0]
 801a58a:	2204      	movs	r2, #4
 801a58c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a58e:	4b03      	ldr	r3, [pc, #12]	; (801a59c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a590:	4618      	mov	r0, r3
 801a592:	370c      	adds	r7, #12
 801a594:	46bd      	mov	sp, r7
 801a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59a:	4770      	bx	lr
 801a59c:	20000100 	.word	0x20000100

0801a5a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b082      	sub	sp, #8
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	6039      	str	r1, [r7, #0]
 801a5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a5ac:	79fb      	ldrb	r3, [r7, #7]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d105      	bne.n	801a5be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a5b2:	683a      	ldr	r2, [r7, #0]
 801a5b4:	4907      	ldr	r1, [pc, #28]	; (801a5d4 <USBD_FS_ProductStrDescriptor+0x34>)
 801a5b6:	4808      	ldr	r0, [pc, #32]	; (801a5d8 <USBD_FS_ProductStrDescriptor+0x38>)
 801a5b8:	f7fc f9c2 	bl	8016940 <USBD_GetString>
 801a5bc:	e004      	b.n	801a5c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a5be:	683a      	ldr	r2, [r7, #0]
 801a5c0:	4904      	ldr	r1, [pc, #16]	; (801a5d4 <USBD_FS_ProductStrDescriptor+0x34>)
 801a5c2:	4805      	ldr	r0, [pc, #20]	; (801a5d8 <USBD_FS_ProductStrDescriptor+0x38>)
 801a5c4:	f7fc f9bc 	bl	8016940 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5c8:	4b02      	ldr	r3, [pc, #8]	; (801a5d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3708      	adds	r7, #8
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bd80      	pop	{r7, pc}
 801a5d2:	bf00      	nop
 801a5d4:	20002688 	.word	0x20002688
 801a5d8:	08021494 	.word	0x08021494

0801a5dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b082      	sub	sp, #8
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	4603      	mov	r3, r0
 801a5e4:	6039      	str	r1, [r7, #0]
 801a5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a5e8:	683a      	ldr	r2, [r7, #0]
 801a5ea:	4904      	ldr	r1, [pc, #16]	; (801a5fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a5ec:	4804      	ldr	r0, [pc, #16]	; (801a600 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a5ee:	f7fc f9a7 	bl	8016940 <USBD_GetString>
  return USBD_StrDesc;
 801a5f2:	4b02      	ldr	r3, [pc, #8]	; (801a5fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	3708      	adds	r7, #8
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}
 801a5fc:	20002688 	.word	0x20002688
 801a600:	080214a8 	.word	0x080214a8

0801a604 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b082      	sub	sp, #8
 801a608:	af00      	add	r7, sp, #0
 801a60a:	4603      	mov	r3, r0
 801a60c:	6039      	str	r1, [r7, #0]
 801a60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a610:	683b      	ldr	r3, [r7, #0]
 801a612:	221a      	movs	r2, #26
 801a614:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a616:	f000 f843 	bl	801a6a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a61a:	4b02      	ldr	r3, [pc, #8]	; (801a624 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a61c:	4618      	mov	r0, r3
 801a61e:	3708      	adds	r7, #8
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}
 801a624:	20000104 	.word	0x20000104

0801a628 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b082      	sub	sp, #8
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	4603      	mov	r3, r0
 801a630:	6039      	str	r1, [r7, #0]
 801a632:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a634:	79fb      	ldrb	r3, [r7, #7]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d105      	bne.n	801a646 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a63a:	683a      	ldr	r2, [r7, #0]
 801a63c:	4907      	ldr	r1, [pc, #28]	; (801a65c <USBD_FS_ConfigStrDescriptor+0x34>)
 801a63e:	4808      	ldr	r0, [pc, #32]	; (801a660 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a640:	f7fc f97e 	bl	8016940 <USBD_GetString>
 801a644:	e004      	b.n	801a650 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a646:	683a      	ldr	r2, [r7, #0]
 801a648:	4904      	ldr	r1, [pc, #16]	; (801a65c <USBD_FS_ConfigStrDescriptor+0x34>)
 801a64a:	4805      	ldr	r0, [pc, #20]	; (801a660 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a64c:	f7fc f978 	bl	8016940 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a650:	4b02      	ldr	r3, [pc, #8]	; (801a65c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a652:	4618      	mov	r0, r3
 801a654:	3708      	adds	r7, #8
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}
 801a65a:	bf00      	nop
 801a65c:	20002688 	.word	0x20002688
 801a660:	080214bc 	.word	0x080214bc

0801a664 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b082      	sub	sp, #8
 801a668:	af00      	add	r7, sp, #0
 801a66a:	4603      	mov	r3, r0
 801a66c:	6039      	str	r1, [r7, #0]
 801a66e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a670:	79fb      	ldrb	r3, [r7, #7]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d105      	bne.n	801a682 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a676:	683a      	ldr	r2, [r7, #0]
 801a678:	4907      	ldr	r1, [pc, #28]	; (801a698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a67a:	4808      	ldr	r0, [pc, #32]	; (801a69c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a67c:	f7fc f960 	bl	8016940 <USBD_GetString>
 801a680:	e004      	b.n	801a68c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a682:	683a      	ldr	r2, [r7, #0]
 801a684:	4904      	ldr	r1, [pc, #16]	; (801a698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a686:	4805      	ldr	r0, [pc, #20]	; (801a69c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a688:	f7fc f95a 	bl	8016940 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a68c:	4b02      	ldr	r3, [pc, #8]	; (801a698 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a68e:	4618      	mov	r0, r3
 801a690:	3708      	adds	r7, #8
 801a692:	46bd      	mov	sp, r7
 801a694:	bd80      	pop	{r7, pc}
 801a696:	bf00      	nop
 801a698:	20002688 	.word	0x20002688
 801a69c:	080214c8 	.word	0x080214c8

0801a6a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b084      	sub	sp, #16
 801a6a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a6a6:	4b0f      	ldr	r3, [pc, #60]	; (801a6e4 <Get_SerialNum+0x44>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a6ac:	4b0e      	ldr	r3, [pc, #56]	; (801a6e8 <Get_SerialNum+0x48>)
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a6b2:	4b0e      	ldr	r3, [pc, #56]	; (801a6ec <Get_SerialNum+0x4c>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a6b8:	68fa      	ldr	r2, [r7, #12]
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	4413      	add	r3, r2
 801a6be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d009      	beq.n	801a6da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a6c6:	2208      	movs	r2, #8
 801a6c8:	4909      	ldr	r1, [pc, #36]	; (801a6f0 <Get_SerialNum+0x50>)
 801a6ca:	68f8      	ldr	r0, [r7, #12]
 801a6cc:	f000 f814 	bl	801a6f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a6d0:	2204      	movs	r2, #4
 801a6d2:	4908      	ldr	r1, [pc, #32]	; (801a6f4 <Get_SerialNum+0x54>)
 801a6d4:	68b8      	ldr	r0, [r7, #8]
 801a6d6:	f000 f80f 	bl	801a6f8 <IntToUnicode>
  }
}
 801a6da:	bf00      	nop
 801a6dc:	3710      	adds	r7, #16
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	1fff7a10 	.word	0x1fff7a10
 801a6e8:	1fff7a14 	.word	0x1fff7a14
 801a6ec:	1fff7a18 	.word	0x1fff7a18
 801a6f0:	20000106 	.word	0x20000106
 801a6f4:	20000116 	.word	0x20000116

0801a6f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a6f8:	b480      	push	{r7}
 801a6fa:	b087      	sub	sp, #28
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	60f8      	str	r0, [r7, #12]
 801a700:	60b9      	str	r1, [r7, #8]
 801a702:	4613      	mov	r3, r2
 801a704:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a706:	2300      	movs	r3, #0
 801a708:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a70a:	2300      	movs	r3, #0
 801a70c:	75fb      	strb	r3, [r7, #23]
 801a70e:	e027      	b.n	801a760 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	0f1b      	lsrs	r3, r3, #28
 801a714:	2b09      	cmp	r3, #9
 801a716:	d80b      	bhi.n	801a730 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	0f1b      	lsrs	r3, r3, #28
 801a71c:	b2da      	uxtb	r2, r3
 801a71e:	7dfb      	ldrb	r3, [r7, #23]
 801a720:	005b      	lsls	r3, r3, #1
 801a722:	4619      	mov	r1, r3
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	440b      	add	r3, r1
 801a728:	3230      	adds	r2, #48	; 0x30
 801a72a:	b2d2      	uxtb	r2, r2
 801a72c:	701a      	strb	r2, [r3, #0]
 801a72e:	e00a      	b.n	801a746 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	0f1b      	lsrs	r3, r3, #28
 801a734:	b2da      	uxtb	r2, r3
 801a736:	7dfb      	ldrb	r3, [r7, #23]
 801a738:	005b      	lsls	r3, r3, #1
 801a73a:	4619      	mov	r1, r3
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	440b      	add	r3, r1
 801a740:	3237      	adds	r2, #55	; 0x37
 801a742:	b2d2      	uxtb	r2, r2
 801a744:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	011b      	lsls	r3, r3, #4
 801a74a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a74c:	7dfb      	ldrb	r3, [r7, #23]
 801a74e:	005b      	lsls	r3, r3, #1
 801a750:	3301      	adds	r3, #1
 801a752:	68ba      	ldr	r2, [r7, #8]
 801a754:	4413      	add	r3, r2
 801a756:	2200      	movs	r2, #0
 801a758:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a75a:	7dfb      	ldrb	r3, [r7, #23]
 801a75c:	3301      	adds	r3, #1
 801a75e:	75fb      	strb	r3, [r7, #23]
 801a760:	7dfa      	ldrb	r2, [r7, #23]
 801a762:	79fb      	ldrb	r3, [r7, #7]
 801a764:	429a      	cmp	r2, r3
 801a766:	d3d3      	bcc.n	801a710 <IntToUnicode+0x18>
  }
}
 801a768:	bf00      	nop
 801a76a:	bf00      	nop
 801a76c:	371c      	adds	r7, #28
 801a76e:	46bd      	mov	sp, r7
 801a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a774:	4770      	bx	lr

0801a776 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801a776:	b480      	push	{r7}
 801a778:	b083      	sub	sp, #12
 801a77a:	af00      	add	r7, sp, #0
 801a77c:	4603      	mov	r3, r0
 801a77e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801a780:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801a782:	4618      	mov	r0, r3
 801a784:	370c      	adds	r7, #12
 801a786:	46bd      	mov	sp, r7
 801a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a78c:	4770      	bx	lr
	...

0801a790 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b08e      	sub	sp, #56	; 0x38
 801a794:	af00      	add	r7, sp, #0
 801a796:	4603      	mov	r3, r0
 801a798:	60b9      	str	r1, [r7, #8]
 801a79a:	607a      	str	r2, [r7, #4]
 801a79c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801a79e:	23ff      	movs	r3, #255	; 0xff
 801a7a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801a7a4:	f107 0314 	add.w	r3, r7, #20
 801a7a8:	4619      	mov	r1, r3
 801a7aa:	480a      	ldr	r0, [pc, #40]	; (801a7d4 <STORAGE_GetCapacity_FS+0x44>)
 801a7ac:	f7ef fb88 	bl	8009ec0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7b2:	1e5a      	subs	r2, r3, #1
 801a7b4:	68bb      	ldr	r3, [r7, #8]
 801a7b6:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ba:	b29a      	uxth	r2, r3
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801a7c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	3738      	adds	r7, #56	; 0x38
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	200017e0 	.word	0x200017e0

0801a7d8 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801a7d8:	b480      	push	{r7}
 801a7da:	b083      	sub	sp, #12
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	4603      	mov	r3, r0
 801a7e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801a7e2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	370c      	adds	r7, #12
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ee:	4770      	bx	lr

0801a7f0 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801a7f0:	b480      	push	{r7}
 801a7f2:	b083      	sub	sp, #12
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801a7fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	370c      	adds	r7, #12
 801a800:	46bd      	mov	sp, r7
 801a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a806:	4770      	bx	lr

0801a808 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b088      	sub	sp, #32
 801a80c:	af02      	add	r7, sp, #8
 801a80e:	60b9      	str	r1, [r7, #8]
 801a810:	607a      	str	r2, [r7, #4]
 801a812:	461a      	mov	r2, r3
 801a814:	4603      	mov	r3, r0
 801a816:	73fb      	strb	r3, [r7, #15]
 801a818:	4613      	mov	r3, r2
 801a81a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801a81c:	23ff      	movs	r3, #255	; 0xff
 801a81e:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801a820:	f7e8 ff82 	bl	8003728 <HAL_GetTick>
 801a824:	4603      	mov	r3, r0
 801a826:	4a0d      	ldr	r2, [pc, #52]	; (801a85c <STORAGE_Read_FS+0x54>)
 801a828:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a82a:	89bb      	ldrh	r3, [r7, #12]
 801a82c:	f04f 32ff 	mov.w	r2, #4294967295
 801a830:	9200      	str	r2, [sp, #0]
 801a832:	687a      	ldr	r2, [r7, #4]
 801a834:	68b9      	ldr	r1, [r7, #8]
 801a836:	480a      	ldr	r0, [pc, #40]	; (801a860 <STORAGE_Read_FS+0x58>)
 801a838:	f7ee fe3a 	bl	80094b0 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801a83c:	bf00      	nop
 801a83e:	4808      	ldr	r0, [pc, #32]	; (801a860 <STORAGE_Read_FS+0x58>)
 801a840:	f7ef fb6a 	bl	8009f18 <HAL_SD_GetCardState>
 801a844:	4603      	mov	r3, r0
 801a846:	2b04      	cmp	r3, #4
 801a848:	d1f9      	bne.n	801a83e <STORAGE_Read_FS+0x36>
	  ret = 0;
 801a84a:	2300      	movs	r3, #0
 801a84c:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801a84e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801a852:	4618      	mov	r0, r3
 801a854:	3718      	adds	r7, #24
 801a856:	46bd      	mov	sp, r7
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	bf00      	nop
 801a85c:	200016f4 	.word	0x200016f4
 801a860:	200017e0 	.word	0x200017e0

0801a864 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b088      	sub	sp, #32
 801a868:	af02      	add	r7, sp, #8
 801a86a:	60b9      	str	r1, [r7, #8]
 801a86c:	607a      	str	r2, [r7, #4]
 801a86e:	461a      	mov	r2, r3
 801a870:	4603      	mov	r3, r0
 801a872:	73fb      	strb	r3, [r7, #15]
 801a874:	4613      	mov	r3, r2
 801a876:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801a878:	23ff      	movs	r3, #255	; 0xff
 801a87a:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a87c:	89bb      	ldrh	r3, [r7, #12]
 801a87e:	f04f 32ff 	mov.w	r2, #4294967295
 801a882:	9200      	str	r2, [sp, #0]
 801a884:	687a      	ldr	r2, [r7, #4]
 801a886:	68b9      	ldr	r1, [r7, #8]
 801a888:	4808      	ldr	r0, [pc, #32]	; (801a8ac <STORAGE_Write_FS+0x48>)
 801a88a:	f7ee ffef 	bl	800986c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801a88e:	bf00      	nop
 801a890:	4806      	ldr	r0, [pc, #24]	; (801a8ac <STORAGE_Write_FS+0x48>)
 801a892:	f7ef fb41 	bl	8009f18 <HAL_SD_GetCardState>
 801a896:	4603      	mov	r3, r0
 801a898:	2b04      	cmp	r3, #4
 801a89a:	d1f9      	bne.n	801a890 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801a89c:	2300      	movs	r3, #0
 801a89e:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801a8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	3718      	adds	r7, #24
 801a8a8:	46bd      	mov	sp, r7
 801a8aa:	bd80      	pop	{r7, pc}
 801a8ac:	200017e0 	.word	0x200017e0

0801a8b0 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801a8b0:	b480      	push	{r7}
 801a8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801a8b4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8be:	4770      	bx	lr

0801a8c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b08a      	sub	sp, #40	; 0x28
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a8c8:	f107 0314 	add.w	r3, r7, #20
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	601a      	str	r2, [r3, #0]
 801a8d0:	605a      	str	r2, [r3, #4]
 801a8d2:	609a      	str	r2, [r3, #8]
 801a8d4:	60da      	str	r2, [r3, #12]
 801a8d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8e0:	d13a      	bne.n	801a958 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	613b      	str	r3, [r7, #16]
 801a8e6:	4b1e      	ldr	r3, [pc, #120]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8ea:	4a1d      	ldr	r2, [pc, #116]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a8ec:	f043 0301 	orr.w	r3, r3, #1
 801a8f0:	6313      	str	r3, [r2, #48]	; 0x30
 801a8f2:	4b1b      	ldr	r3, [pc, #108]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8f6:	f003 0301 	and.w	r3, r3, #1
 801a8fa:	613b      	str	r3, [r7, #16]
 801a8fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a8fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a904:	2302      	movs	r3, #2
 801a906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a908:	2300      	movs	r3, #0
 801a90a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a90c:	2303      	movs	r3, #3
 801a90e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a910:	230a      	movs	r3, #10
 801a912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a914:	f107 0314 	add.w	r3, r7, #20
 801a918:	4619      	mov	r1, r3
 801a91a:	4812      	ldr	r0, [pc, #72]	; (801a964 <HAL_PCD_MspInit+0xa4>)
 801a91c:	f7ea fc68 	bl	80051f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a920:	4b0f      	ldr	r3, [pc, #60]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a924:	4a0e      	ldr	r2, [pc, #56]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a92a:	6353      	str	r3, [r2, #52]	; 0x34
 801a92c:	2300      	movs	r3, #0
 801a92e:	60fb      	str	r3, [r7, #12]
 801a930:	4b0b      	ldr	r3, [pc, #44]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a934:	4a0a      	ldr	r2, [pc, #40]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a93a:	6453      	str	r3, [r2, #68]	; 0x44
 801a93c:	4b08      	ldr	r3, [pc, #32]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a944:	60fb      	str	r3, [r7, #12]
 801a946:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a948:	2200      	movs	r2, #0
 801a94a:	2100      	movs	r1, #0
 801a94c:	2043      	movs	r0, #67	; 0x43
 801a94e:	f7e9 fcce 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a952:	2043      	movs	r0, #67	; 0x43
 801a954:	f7e9 fce7 	bl	8004326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a958:	bf00      	nop
 801a95a:	3728      	adds	r7, #40	; 0x28
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	40023800 	.word	0x40023800
 801a964:	40020000 	.word	0x40020000

0801a968 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a978:	d10d      	bne.n	801a996 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801a97a:	4b09      	ldr	r3, [pc, #36]	; (801a9a0 <HAL_PCD_MspDeInit+0x38>)
 801a97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a97e:	4a08      	ldr	r2, [pc, #32]	; (801a9a0 <HAL_PCD_MspDeInit+0x38>)
 801a980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a984:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801a986:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801a98a:	4806      	ldr	r0, [pc, #24]	; (801a9a4 <HAL_PCD_MspDeInit+0x3c>)
 801a98c:	f7ea fdb4 	bl	80054f8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801a990:	2043      	movs	r0, #67	; 0x43
 801a992:	f7e9 fcd6 	bl	8004342 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801a996:	bf00      	nop
 801a998:	3708      	adds	r7, #8
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	40023800 	.word	0x40023800
 801a9a4:	40020000 	.word	0x40020000

0801a9a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b082      	sub	sp, #8
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a9bc:	4619      	mov	r1, r3
 801a9be:	4610      	mov	r0, r2
 801a9c0:	f7fa fe5f 	bl	8015682 <USBD_LL_SetupStage>
}
 801a9c4:	bf00      	nop
 801a9c6:	3708      	adds	r7, #8
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}

0801a9cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9cc:	b580      	push	{r7, lr}
 801a9ce:	b082      	sub	sp, #8
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	6078      	str	r0, [r7, #4]
 801a9d4:	460b      	mov	r3, r1
 801a9d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a9de:	78fa      	ldrb	r2, [r7, #3]
 801a9e0:	6879      	ldr	r1, [r7, #4]
 801a9e2:	4613      	mov	r3, r2
 801a9e4:	00db      	lsls	r3, r3, #3
 801a9e6:	4413      	add	r3, r2
 801a9e8:	009b      	lsls	r3, r3, #2
 801a9ea:	440b      	add	r3, r1
 801a9ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a9f0:	681a      	ldr	r2, [r3, #0]
 801a9f2:	78fb      	ldrb	r3, [r7, #3]
 801a9f4:	4619      	mov	r1, r3
 801a9f6:	f7fa fe99 	bl	801572c <USBD_LL_DataOutStage>
}
 801a9fa:	bf00      	nop
 801a9fc:	3708      	adds	r7, #8
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa02:	b580      	push	{r7, lr}
 801aa04:	b082      	sub	sp, #8
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	6078      	str	r0, [r7, #4]
 801aa0a:	460b      	mov	r3, r1
 801aa0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801aa14:	78fa      	ldrb	r2, [r7, #3]
 801aa16:	6879      	ldr	r1, [r7, #4]
 801aa18:	4613      	mov	r3, r2
 801aa1a:	00db      	lsls	r3, r3, #3
 801aa1c:	4413      	add	r3, r2
 801aa1e:	009b      	lsls	r3, r3, #2
 801aa20:	440b      	add	r3, r1
 801aa22:	334c      	adds	r3, #76	; 0x4c
 801aa24:	681a      	ldr	r2, [r3, #0]
 801aa26:	78fb      	ldrb	r3, [r7, #3]
 801aa28:	4619      	mov	r1, r3
 801aa2a:	f7fa ff32 	bl	8015892 <USBD_LL_DataInStage>
}
 801aa2e:	bf00      	nop
 801aa30:	3708      	adds	r7, #8
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}

0801aa36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa36:	b580      	push	{r7, lr}
 801aa38:	b082      	sub	sp, #8
 801aa3a:	af00      	add	r7, sp, #0
 801aa3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7fb f866 	bl	8015b16 <USBD_LL_SOF>
}
 801aa4a:	bf00      	nop
 801aa4c:	3708      	adds	r7, #8
 801aa4e:	46bd      	mov	sp, r7
 801aa50:	bd80      	pop	{r7, pc}

0801aa52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa52:	b580      	push	{r7, lr}
 801aa54:	b084      	sub	sp, #16
 801aa56:	af00      	add	r7, sp, #0
 801aa58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	68db      	ldr	r3, [r3, #12]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d102      	bne.n	801aa6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801aa66:	2300      	movs	r3, #0
 801aa68:	73fb      	strb	r3, [r7, #15]
 801aa6a:	e008      	b.n	801aa7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	68db      	ldr	r3, [r3, #12]
 801aa70:	2b02      	cmp	r3, #2
 801aa72:	d102      	bne.n	801aa7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aa74:	2301      	movs	r3, #1
 801aa76:	73fb      	strb	r3, [r7, #15]
 801aa78:	e001      	b.n	801aa7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801aa7a:	f7e8 f917 	bl	8002cac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa84:	7bfa      	ldrb	r2, [r7, #15]
 801aa86:	4611      	mov	r1, r2
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f7fb f806 	bl	8015a9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa94:	4618      	mov	r0, r3
 801aa96:	f7fa ffae 	bl	80159f6 <USBD_LL_Reset>
}
 801aa9a:	bf00      	nop
 801aa9c:	3710      	adds	r7, #16
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd80      	pop	{r7, pc}
	...

0801aaa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b082      	sub	sp, #8
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7fb f801 	bl	8015aba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	687a      	ldr	r2, [r7, #4]
 801aac4:	6812      	ldr	r2, [r2, #0]
 801aac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aaca:	f043 0301 	orr.w	r3, r3, #1
 801aace:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6a1b      	ldr	r3, [r3, #32]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d005      	beq.n	801aae4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aad8:	4b04      	ldr	r3, [pc, #16]	; (801aaec <HAL_PCD_SuspendCallback+0x48>)
 801aada:	691b      	ldr	r3, [r3, #16]
 801aadc:	4a03      	ldr	r2, [pc, #12]	; (801aaec <HAL_PCD_SuspendCallback+0x48>)
 801aade:	f043 0306 	orr.w	r3, r3, #6
 801aae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aae4:	bf00      	nop
 801aae6:	3708      	adds	r7, #8
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}
 801aaec:	e000ed00 	.word	0xe000ed00

0801aaf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aafe:	4618      	mov	r0, r3
 801ab00:	f7fa fff1 	bl	8015ae6 <USBD_LL_Resume>
}
 801ab04:	bf00      	nop
 801ab06:	3708      	adds	r7, #8
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}

0801ab0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
 801ab14:	460b      	mov	r3, r1
 801ab16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab1e:	78fa      	ldrb	r2, [r7, #3]
 801ab20:	4611      	mov	r1, r2
 801ab22:	4618      	mov	r0, r3
 801ab24:	f7fb f849 	bl	8015bba <USBD_LL_IsoOUTIncomplete>
}
 801ab28:	bf00      	nop
 801ab2a:	3708      	adds	r7, #8
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd80      	pop	{r7, pc}

0801ab30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	460b      	mov	r3, r1
 801ab3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab42:	78fa      	ldrb	r2, [r7, #3]
 801ab44:	4611      	mov	r1, r2
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7fb f805 	bl	8015b56 <USBD_LL_IsoINIncomplete>
}
 801ab4c:	bf00      	nop
 801ab4e:	3708      	adds	r7, #8
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd80      	pop	{r7, pc}

0801ab54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab62:	4618      	mov	r0, r3
 801ab64:	f7fb f85b 	bl	8015c1e <USBD_LL_DevConnected>
}
 801ab68:	bf00      	nop
 801ab6a:	3708      	adds	r7, #8
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}

0801ab70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b082      	sub	sp, #8
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab7e:	4618      	mov	r0, r3
 801ab80:	f7fb f858 	bl	8015c34 <USBD_LL_DevDisconnected>
}
 801ab84:	bf00      	nop
 801ab86:	3708      	adds	r7, #8
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}

0801ab8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b082      	sub	sp, #8
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	781b      	ldrb	r3, [r3, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d13c      	bne.n	801ac16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801ab9c:	4a20      	ldr	r2, [pc, #128]	; (801ac20 <USBD_LL_Init+0x94>)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	4a1e      	ldr	r2, [pc, #120]	; (801ac20 <USBD_LL_Init+0x94>)
 801aba8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801abac:	4b1c      	ldr	r3, [pc, #112]	; (801ac20 <USBD_LL_Init+0x94>)
 801abae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801abb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801abb4:	4b1a      	ldr	r3, [pc, #104]	; (801ac20 <USBD_LL_Init+0x94>)
 801abb6:	2204      	movs	r2, #4
 801abb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801abba:	4b19      	ldr	r3, [pc, #100]	; (801ac20 <USBD_LL_Init+0x94>)
 801abbc:	2202      	movs	r2, #2
 801abbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801abc0:	4b17      	ldr	r3, [pc, #92]	; (801ac20 <USBD_LL_Init+0x94>)
 801abc2:	2200      	movs	r2, #0
 801abc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801abc6:	4b16      	ldr	r3, [pc, #88]	; (801ac20 <USBD_LL_Init+0x94>)
 801abc8:	2202      	movs	r2, #2
 801abca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801abcc:	4b14      	ldr	r3, [pc, #80]	; (801ac20 <USBD_LL_Init+0x94>)
 801abce:	2200      	movs	r2, #0
 801abd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801abd2:	4b13      	ldr	r3, [pc, #76]	; (801ac20 <USBD_LL_Init+0x94>)
 801abd4:	2200      	movs	r2, #0
 801abd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801abd8:	4b11      	ldr	r3, [pc, #68]	; (801ac20 <USBD_LL_Init+0x94>)
 801abda:	2200      	movs	r2, #0
 801abdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801abde:	4b10      	ldr	r3, [pc, #64]	; (801ac20 <USBD_LL_Init+0x94>)
 801abe0:	2200      	movs	r2, #0
 801abe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801abe4:	4b0e      	ldr	r3, [pc, #56]	; (801ac20 <USBD_LL_Init+0x94>)
 801abe6:	2200      	movs	r2, #0
 801abe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801abea:	480d      	ldr	r0, [pc, #52]	; (801ac20 <USBD_LL_Init+0x94>)
 801abec:	f7eb fea5 	bl	800693a <HAL_PCD_Init>
 801abf0:	4603      	mov	r3, r0
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d001      	beq.n	801abfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801abf6:	f7e8 f859 	bl	8002cac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801abfa:	2180      	movs	r1, #128	; 0x80
 801abfc:	4808      	ldr	r0, [pc, #32]	; (801ac20 <USBD_LL_Init+0x94>)
 801abfe:	f7ed f986 	bl	8007f0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ac02:	2240      	movs	r2, #64	; 0x40
 801ac04:	2100      	movs	r1, #0
 801ac06:	4806      	ldr	r0, [pc, #24]	; (801ac20 <USBD_LL_Init+0x94>)
 801ac08:	f7ed f93a 	bl	8007e80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ac0c:	2280      	movs	r2, #128	; 0x80
 801ac0e:	2101      	movs	r1, #1
 801ac10:	4803      	ldr	r0, [pc, #12]	; (801ac20 <USBD_LL_Init+0x94>)
 801ac12:	f7ed f935 	bl	8007e80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ac16:	2300      	movs	r3, #0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3708      	adds	r7, #8
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	20002888 	.word	0x20002888

0801ac24 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b084      	sub	sp, #16
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac30:	2300      	movs	r3, #0
 801ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f7eb ff9a 	bl	8006b74 <HAL_PCD_DeInit>
 801ac40:	4603      	mov	r3, r0
 801ac42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac44:	7bfb      	ldrb	r3, [r7, #15]
 801ac46:	4618      	mov	r0, r3
 801ac48:	f000 f998 	bl	801af7c <USBD_Get_USB_Status>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac50:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac52:	4618      	mov	r0, r3
 801ac54:	3710      	adds	r7, #16
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}

0801ac5a <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ac5a:	b580      	push	{r7, lr}
 801ac5c:	b084      	sub	sp, #16
 801ac5e:	af00      	add	r7, sp, #0
 801ac60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac62:	2300      	movs	r3, #0
 801ac64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac66:	2300      	movs	r3, #0
 801ac68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7eb ffa2 	bl	8006bba <HAL_PCD_Start>
 801ac76:	4603      	mov	r3, r0
 801ac78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac7a:	7bfb      	ldrb	r3, [r7, #15]
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f000 f97d 	bl	801af7c <USBD_Get_USB_Status>
 801ac82:	4603      	mov	r3, r0
 801ac84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac86:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3710      	adds	r7, #16
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}

0801ac90 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b084      	sub	sp, #16
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac98:	2300      	movs	r3, #0
 801ac9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aca6:	4618      	mov	r0, r3
 801aca8:	f7eb ffba 	bl	8006c20 <HAL_PCD_Stop>
 801acac:	4603      	mov	r3, r0
 801acae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acb0:	7bfb      	ldrb	r3, [r7, #15]
 801acb2:	4618      	mov	r0, r3
 801acb4:	f000 f962 	bl	801af7c <USBD_Get_USB_Status>
 801acb8:	4603      	mov	r3, r0
 801acba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801acbc:	7bbb      	ldrb	r3, [r7, #14]
}
 801acbe:	4618      	mov	r0, r3
 801acc0:	3710      	adds	r7, #16
 801acc2:	46bd      	mov	sp, r7
 801acc4:	bd80      	pop	{r7, pc}

0801acc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801acc6:	b580      	push	{r7, lr}
 801acc8:	b084      	sub	sp, #16
 801acca:	af00      	add	r7, sp, #0
 801accc:	6078      	str	r0, [r7, #4]
 801acce:	4608      	mov	r0, r1
 801acd0:	4611      	mov	r1, r2
 801acd2:	461a      	mov	r2, r3
 801acd4:	4603      	mov	r3, r0
 801acd6:	70fb      	strb	r3, [r7, #3]
 801acd8:	460b      	mov	r3, r1
 801acda:	70bb      	strb	r3, [r7, #2]
 801acdc:	4613      	mov	r3, r2
 801acde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ace0:	2300      	movs	r3, #0
 801ace2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ace4:	2300      	movs	r3, #0
 801ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801acee:	78bb      	ldrb	r3, [r7, #2]
 801acf0:	883a      	ldrh	r2, [r7, #0]
 801acf2:	78f9      	ldrb	r1, [r7, #3]
 801acf4:	f7ec fc91 	bl	800761a <HAL_PCD_EP_Open>
 801acf8:	4603      	mov	r3, r0
 801acfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acfc:	7bfb      	ldrb	r3, [r7, #15]
 801acfe:	4618      	mov	r0, r3
 801ad00:	f000 f93c 	bl	801af7c <USBD_Get_USB_Status>
 801ad04:	4603      	mov	r3, r0
 801ad06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad08:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3710      	adds	r7, #16
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}

0801ad12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad12:	b580      	push	{r7, lr}
 801ad14:	b084      	sub	sp, #16
 801ad16:	af00      	add	r7, sp, #0
 801ad18:	6078      	str	r0, [r7, #4]
 801ad1a:	460b      	mov	r3, r1
 801ad1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad1e:	2300      	movs	r3, #0
 801ad20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad22:	2300      	movs	r3, #0
 801ad24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad2c:	78fa      	ldrb	r2, [r7, #3]
 801ad2e:	4611      	mov	r1, r2
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7ec fcda 	bl	80076ea <HAL_PCD_EP_Close>
 801ad36:	4603      	mov	r3, r0
 801ad38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad3a:	7bfb      	ldrb	r3, [r7, #15]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	f000 f91d 	bl	801af7c <USBD_Get_USB_Status>
 801ad42:	4603      	mov	r3, r0
 801ad44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad46:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	3710      	adds	r7, #16
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd80      	pop	{r7, pc}

0801ad50 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b084      	sub	sp, #16
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
 801ad58:	460b      	mov	r3, r1
 801ad5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad60:	2300      	movs	r3, #0
 801ad62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad6a:	78fa      	ldrb	r2, [r7, #3]
 801ad6c:	4611      	mov	r1, r2
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7ec fe9d 	bl	8007aae <HAL_PCD_EP_Flush>
 801ad74:	4603      	mov	r3, r0
 801ad76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f000 f8fe 	bl	801af7c <USBD_Get_USB_Status>
 801ad80:	4603      	mov	r3, r0
 801ad82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad84:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad86:	4618      	mov	r0, r3
 801ad88:	3710      	adds	r7, #16
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bd80      	pop	{r7, pc}

0801ad8e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad8e:	b580      	push	{r7, lr}
 801ad90:	b084      	sub	sp, #16
 801ad92:	af00      	add	r7, sp, #0
 801ad94:	6078      	str	r0, [r7, #4]
 801ad96:	460b      	mov	r3, r1
 801ad98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad9e:	2300      	movs	r3, #0
 801ada0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ada8:	78fa      	ldrb	r2, [r7, #3]
 801adaa:	4611      	mov	r1, r2
 801adac:	4618      	mov	r0, r3
 801adae:	f7ec fd93 	bl	80078d8 <HAL_PCD_EP_SetStall>
 801adb2:	4603      	mov	r3, r0
 801adb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adb6:	7bfb      	ldrb	r3, [r7, #15]
 801adb8:	4618      	mov	r0, r3
 801adba:	f000 f8df 	bl	801af7c <USBD_Get_USB_Status>
 801adbe:	4603      	mov	r3, r0
 801adc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801adc2:	7bbb      	ldrb	r3, [r7, #14]
}
 801adc4:	4618      	mov	r0, r3
 801adc6:	3710      	adds	r7, #16
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}

0801adcc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b084      	sub	sp, #16
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	460b      	mov	r3, r1
 801add6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801add8:	2300      	movs	r3, #0
 801adda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801addc:	2300      	movs	r3, #0
 801adde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ade6:	78fa      	ldrb	r2, [r7, #3]
 801ade8:	4611      	mov	r1, r2
 801adea:	4618      	mov	r0, r3
 801adec:	f7ec fdd8 	bl	80079a0 <HAL_PCD_EP_ClrStall>
 801adf0:	4603      	mov	r3, r0
 801adf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adf4:	7bfb      	ldrb	r3, [r7, #15]
 801adf6:	4618      	mov	r0, r3
 801adf8:	f000 f8c0 	bl	801af7c <USBD_Get_USB_Status>
 801adfc:	4603      	mov	r3, r0
 801adfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ae00:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae02:	4618      	mov	r0, r3
 801ae04:	3710      	adds	r7, #16
 801ae06:	46bd      	mov	sp, r7
 801ae08:	bd80      	pop	{r7, pc}

0801ae0a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae0a:	b480      	push	{r7}
 801ae0c:	b085      	sub	sp, #20
 801ae0e:	af00      	add	r7, sp, #0
 801ae10:	6078      	str	r0, [r7, #4]
 801ae12:	460b      	mov	r3, r1
 801ae14:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae1c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ae1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	da0b      	bge.n	801ae3e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ae26:	78fb      	ldrb	r3, [r7, #3]
 801ae28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ae2c:	68f9      	ldr	r1, [r7, #12]
 801ae2e:	4613      	mov	r3, r2
 801ae30:	00db      	lsls	r3, r3, #3
 801ae32:	4413      	add	r3, r2
 801ae34:	009b      	lsls	r3, r3, #2
 801ae36:	440b      	add	r3, r1
 801ae38:	333e      	adds	r3, #62	; 0x3e
 801ae3a:	781b      	ldrb	r3, [r3, #0]
 801ae3c:	e00b      	b.n	801ae56 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ae3e:	78fb      	ldrb	r3, [r7, #3]
 801ae40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ae44:	68f9      	ldr	r1, [r7, #12]
 801ae46:	4613      	mov	r3, r2
 801ae48:	00db      	lsls	r3, r3, #3
 801ae4a:	4413      	add	r3, r2
 801ae4c:	009b      	lsls	r3, r3, #2
 801ae4e:	440b      	add	r3, r1
 801ae50:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ae54:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ae56:	4618      	mov	r0, r3
 801ae58:	3714      	adds	r7, #20
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae60:	4770      	bx	lr

0801ae62 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ae62:	b580      	push	{r7, lr}
 801ae64:	b084      	sub	sp, #16
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	6078      	str	r0, [r7, #4]
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae6e:	2300      	movs	r3, #0
 801ae70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae72:	2300      	movs	r3, #0
 801ae74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae7c:	78fa      	ldrb	r2, [r7, #3]
 801ae7e:	4611      	mov	r1, r2
 801ae80:	4618      	mov	r0, r3
 801ae82:	f7ec fba5 	bl	80075d0 <HAL_PCD_SetAddress>
 801ae86:	4603      	mov	r3, r0
 801ae88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ae8a:	7bfb      	ldrb	r3, [r7, #15]
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f000 f875 	bl	801af7c <USBD_Get_USB_Status>
 801ae92:	4603      	mov	r3, r0
 801ae94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ae96:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae98:	4618      	mov	r0, r3
 801ae9a:	3710      	adds	r7, #16
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd80      	pop	{r7, pc}

0801aea0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b086      	sub	sp, #24
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	60f8      	str	r0, [r7, #12]
 801aea8:	607a      	str	r2, [r7, #4]
 801aeaa:	603b      	str	r3, [r7, #0]
 801aeac:	460b      	mov	r3, r1
 801aeae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aeb0:	2300      	movs	r3, #0
 801aeb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aebe:	7af9      	ldrb	r1, [r7, #11]
 801aec0:	683b      	ldr	r3, [r7, #0]
 801aec2:	687a      	ldr	r2, [r7, #4]
 801aec4:	f7ec fcbe 	bl	8007844 <HAL_PCD_EP_Transmit>
 801aec8:	4603      	mov	r3, r0
 801aeca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aecc:	7dfb      	ldrb	r3, [r7, #23]
 801aece:	4618      	mov	r0, r3
 801aed0:	f000 f854 	bl	801af7c <USBD_Get_USB_Status>
 801aed4:	4603      	mov	r3, r0
 801aed6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801aed8:	7dbb      	ldrb	r3, [r7, #22]
}
 801aeda:	4618      	mov	r0, r3
 801aedc:	3718      	adds	r7, #24
 801aede:	46bd      	mov	sp, r7
 801aee0:	bd80      	pop	{r7, pc}

0801aee2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801aee2:	b580      	push	{r7, lr}
 801aee4:	b086      	sub	sp, #24
 801aee6:	af00      	add	r7, sp, #0
 801aee8:	60f8      	str	r0, [r7, #12]
 801aeea:	607a      	str	r2, [r7, #4]
 801aeec:	603b      	str	r3, [r7, #0]
 801aeee:	460b      	mov	r3, r1
 801aef0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aef2:	2300      	movs	r3, #0
 801aef4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aef6:	2300      	movs	r3, #0
 801aef8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801af00:	7af9      	ldrb	r1, [r7, #11]
 801af02:	683b      	ldr	r3, [r7, #0]
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	f7ec fc3a 	bl	800777e <HAL_PCD_EP_Receive>
 801af0a:	4603      	mov	r3, r0
 801af0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801af0e:	7dfb      	ldrb	r3, [r7, #23]
 801af10:	4618      	mov	r0, r3
 801af12:	f000 f833 	bl	801af7c <USBD_Get_USB_Status>
 801af16:	4603      	mov	r3, r0
 801af18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801af1a:	7dbb      	ldrb	r3, [r7, #22]
}
 801af1c:	4618      	mov	r0, r3
 801af1e:	3718      	adds	r7, #24
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}

0801af24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
 801af2c:	460b      	mov	r3, r1
 801af2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801af36:	78fa      	ldrb	r2, [r7, #3]
 801af38:	4611      	mov	r1, r2
 801af3a:	4618      	mov	r0, r3
 801af3c:	f7ec fc6a 	bl	8007814 <HAL_PCD_EP_GetRxCount>
 801af40:	4603      	mov	r3, r0
}
 801af42:	4618      	mov	r0, r3
 801af44:	3708      	adds	r7, #8
 801af46:	46bd      	mov	sp, r7
 801af48:	bd80      	pop	{r7, pc}
	...

0801af4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801af4c:	b480      	push	{r7}
 801af4e:	b083      	sub	sp, #12
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801af54:	4b03      	ldr	r3, [pc, #12]	; (801af64 <USBD_static_malloc+0x18>)
}
 801af56:	4618      	mov	r0, r3
 801af58:	370c      	adds	r7, #12
 801af5a:	46bd      	mov	sp, r7
 801af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af60:	4770      	bx	lr
 801af62:	bf00      	nop
 801af64:	20002d94 	.word	0x20002d94

0801af68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801af68:	b480      	push	{r7}
 801af6a:	b083      	sub	sp, #12
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]

}
 801af70:	bf00      	nop
 801af72:	370c      	adds	r7, #12
 801af74:	46bd      	mov	sp, r7
 801af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7a:	4770      	bx	lr

0801af7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801af7c:	b480      	push	{r7}
 801af7e:	b085      	sub	sp, #20
 801af80:	af00      	add	r7, sp, #0
 801af82:	4603      	mov	r3, r0
 801af84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801af86:	2300      	movs	r3, #0
 801af88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801af8a:	79fb      	ldrb	r3, [r7, #7]
 801af8c:	2b03      	cmp	r3, #3
 801af8e:	d817      	bhi.n	801afc0 <USBD_Get_USB_Status+0x44>
 801af90:	a201      	add	r2, pc, #4	; (adr r2, 801af98 <USBD_Get_USB_Status+0x1c>)
 801af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af96:	bf00      	nop
 801af98:	0801afa9 	.word	0x0801afa9
 801af9c:	0801afaf 	.word	0x0801afaf
 801afa0:	0801afb5 	.word	0x0801afb5
 801afa4:	0801afbb 	.word	0x0801afbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801afa8:	2300      	movs	r3, #0
 801afaa:	73fb      	strb	r3, [r7, #15]
    break;
 801afac:	e00b      	b.n	801afc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801afae:	2303      	movs	r3, #3
 801afb0:	73fb      	strb	r3, [r7, #15]
    break;
 801afb2:	e008      	b.n	801afc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801afb4:	2301      	movs	r3, #1
 801afb6:	73fb      	strb	r3, [r7, #15]
    break;
 801afb8:	e005      	b.n	801afc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801afba:	2303      	movs	r3, #3
 801afbc:	73fb      	strb	r3, [r7, #15]
    break;
 801afbe:	e002      	b.n	801afc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801afc0:	2303      	movs	r3, #3
 801afc2:	73fb      	strb	r3, [r7, #15]
    break;
 801afc4:	bf00      	nop
  }
  return usb_status;
 801afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 801afc8:	4618      	mov	r0, r3
 801afca:	3714      	adds	r7, #20
 801afcc:	46bd      	mov	sp, r7
 801afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd2:	4770      	bx	lr

0801afd4 <atoi>:
 801afd4:	220a      	movs	r2, #10
 801afd6:	2100      	movs	r1, #0
 801afd8:	f002 b826 	b.w	801d028 <strtol>

0801afdc <__errno>:
 801afdc:	4b01      	ldr	r3, [pc, #4]	; (801afe4 <__errno+0x8>)
 801afde:	6818      	ldr	r0, [r3, #0]
 801afe0:	4770      	bx	lr
 801afe2:	bf00      	nop
 801afe4:	20000140 	.word	0x20000140

0801afe8 <_fwrite_r>:
 801afe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afec:	9c08      	ldr	r4, [sp, #32]
 801afee:	468a      	mov	sl, r1
 801aff0:	4690      	mov	r8, r2
 801aff2:	fb02 f903 	mul.w	r9, r2, r3
 801aff6:	4605      	mov	r5, r0
 801aff8:	b118      	cbz	r0, 801b002 <_fwrite_r+0x1a>
 801affa:	6983      	ldr	r3, [r0, #24]
 801affc:	b90b      	cbnz	r3, 801b002 <_fwrite_r+0x1a>
 801affe:	f003 f8cb 	bl	801e198 <__sinit>
 801b002:	4b26      	ldr	r3, [pc, #152]	; (801b09c <_fwrite_r+0xb4>)
 801b004:	429c      	cmp	r4, r3
 801b006:	d123      	bne.n	801b050 <_fwrite_r+0x68>
 801b008:	686c      	ldr	r4, [r5, #4]
 801b00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b00c:	07de      	lsls	r6, r3, #31
 801b00e:	d405      	bmi.n	801b01c <_fwrite_r+0x34>
 801b010:	89a3      	ldrh	r3, [r4, #12]
 801b012:	0598      	lsls	r0, r3, #22
 801b014:	d402      	bmi.n	801b01c <_fwrite_r+0x34>
 801b016:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b018:	f000 f879 	bl	801b10e <__retarget_lock_acquire_recursive>
 801b01c:	89a3      	ldrh	r3, [r4, #12]
 801b01e:	0719      	lsls	r1, r3, #28
 801b020:	d520      	bpl.n	801b064 <_fwrite_r+0x7c>
 801b022:	6923      	ldr	r3, [r4, #16]
 801b024:	b1f3      	cbz	r3, 801b064 <_fwrite_r+0x7c>
 801b026:	2600      	movs	r6, #0
 801b028:	454e      	cmp	r6, r9
 801b02a:	d029      	beq.n	801b080 <_fwrite_r+0x98>
 801b02c:	68a7      	ldr	r7, [r4, #8]
 801b02e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801b032:	3f01      	subs	r7, #1
 801b034:	2f00      	cmp	r7, #0
 801b036:	60a7      	str	r7, [r4, #8]
 801b038:	da04      	bge.n	801b044 <_fwrite_r+0x5c>
 801b03a:	69a3      	ldr	r3, [r4, #24]
 801b03c:	429f      	cmp	r7, r3
 801b03e:	db19      	blt.n	801b074 <_fwrite_r+0x8c>
 801b040:	290a      	cmp	r1, #10
 801b042:	d017      	beq.n	801b074 <_fwrite_r+0x8c>
 801b044:	6823      	ldr	r3, [r4, #0]
 801b046:	1c5a      	adds	r2, r3, #1
 801b048:	6022      	str	r2, [r4, #0]
 801b04a:	7019      	strb	r1, [r3, #0]
 801b04c:	3601      	adds	r6, #1
 801b04e:	e7eb      	b.n	801b028 <_fwrite_r+0x40>
 801b050:	4b13      	ldr	r3, [pc, #76]	; (801b0a0 <_fwrite_r+0xb8>)
 801b052:	429c      	cmp	r4, r3
 801b054:	d101      	bne.n	801b05a <_fwrite_r+0x72>
 801b056:	68ac      	ldr	r4, [r5, #8]
 801b058:	e7d7      	b.n	801b00a <_fwrite_r+0x22>
 801b05a:	4b12      	ldr	r3, [pc, #72]	; (801b0a4 <_fwrite_r+0xbc>)
 801b05c:	429c      	cmp	r4, r3
 801b05e:	bf08      	it	eq
 801b060:	68ec      	ldreq	r4, [r5, #12]
 801b062:	e7d2      	b.n	801b00a <_fwrite_r+0x22>
 801b064:	4621      	mov	r1, r4
 801b066:	4628      	mov	r0, r5
 801b068:	f002 f874 	bl	801d154 <__swsetup_r>
 801b06c:	2800      	cmp	r0, #0
 801b06e:	d0da      	beq.n	801b026 <_fwrite_r+0x3e>
 801b070:	2600      	movs	r6, #0
 801b072:	e005      	b.n	801b080 <_fwrite_r+0x98>
 801b074:	4622      	mov	r2, r4
 801b076:	4628      	mov	r0, r5
 801b078:	f002 f81a 	bl	801d0b0 <__swbuf_r>
 801b07c:	3001      	adds	r0, #1
 801b07e:	d1e5      	bne.n	801b04c <_fwrite_r+0x64>
 801b080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b082:	07da      	lsls	r2, r3, #31
 801b084:	d405      	bmi.n	801b092 <_fwrite_r+0xaa>
 801b086:	89a3      	ldrh	r3, [r4, #12]
 801b088:	059b      	lsls	r3, r3, #22
 801b08a:	d402      	bmi.n	801b092 <_fwrite_r+0xaa>
 801b08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b08e:	f000 f83f 	bl	801b110 <__retarget_lock_release_recursive>
 801b092:	fbb6 f0f8 	udiv	r0, r6, r8
 801b096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b09a:	bf00      	nop
 801b09c:	08021df4 	.word	0x08021df4
 801b0a0:	08021e14 	.word	0x08021e14
 801b0a4:	08021dd4 	.word	0x08021dd4

0801b0a8 <fwrite>:
 801b0a8:	b507      	push	{r0, r1, r2, lr}
 801b0aa:	9300      	str	r3, [sp, #0]
 801b0ac:	4613      	mov	r3, r2
 801b0ae:	460a      	mov	r2, r1
 801b0b0:	4601      	mov	r1, r0
 801b0b2:	4803      	ldr	r0, [pc, #12]	; (801b0c0 <fwrite+0x18>)
 801b0b4:	6800      	ldr	r0, [r0, #0]
 801b0b6:	f7ff ff97 	bl	801afe8 <_fwrite_r>
 801b0ba:	b003      	add	sp, #12
 801b0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0c0:	20000140 	.word	0x20000140

0801b0c4 <__libc_init_array>:
 801b0c4:	b570      	push	{r4, r5, r6, lr}
 801b0c6:	4d0d      	ldr	r5, [pc, #52]	; (801b0fc <__libc_init_array+0x38>)
 801b0c8:	4c0d      	ldr	r4, [pc, #52]	; (801b100 <__libc_init_array+0x3c>)
 801b0ca:	1b64      	subs	r4, r4, r5
 801b0cc:	10a4      	asrs	r4, r4, #2
 801b0ce:	2600      	movs	r6, #0
 801b0d0:	42a6      	cmp	r6, r4
 801b0d2:	d109      	bne.n	801b0e8 <__libc_init_array+0x24>
 801b0d4:	4d0b      	ldr	r5, [pc, #44]	; (801b104 <__libc_init_array+0x40>)
 801b0d6:	4c0c      	ldr	r4, [pc, #48]	; (801b108 <__libc_init_array+0x44>)
 801b0d8:	f004 fdea 	bl	801fcb0 <_init>
 801b0dc:	1b64      	subs	r4, r4, r5
 801b0de:	10a4      	asrs	r4, r4, #2
 801b0e0:	2600      	movs	r6, #0
 801b0e2:	42a6      	cmp	r6, r4
 801b0e4:	d105      	bne.n	801b0f2 <__libc_init_array+0x2e>
 801b0e6:	bd70      	pop	{r4, r5, r6, pc}
 801b0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0ec:	4798      	blx	r3
 801b0ee:	3601      	adds	r6, #1
 801b0f0:	e7ee      	b.n	801b0d0 <__libc_init_array+0xc>
 801b0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0f6:	4798      	blx	r3
 801b0f8:	3601      	adds	r6, #1
 801b0fa:	e7f2      	b.n	801b0e2 <__libc_init_array+0x1e>
 801b0fc:	08022028 	.word	0x08022028
 801b100:	08022028 	.word	0x08022028
 801b104:	08022028 	.word	0x08022028
 801b108:	0802202c 	.word	0x0802202c

0801b10c <__retarget_lock_init_recursive>:
 801b10c:	4770      	bx	lr

0801b10e <__retarget_lock_acquire_recursive>:
 801b10e:	4770      	bx	lr

0801b110 <__retarget_lock_release_recursive>:
 801b110:	4770      	bx	lr
	...

0801b114 <malloc>:
 801b114:	4b02      	ldr	r3, [pc, #8]	; (801b120 <malloc+0xc>)
 801b116:	4601      	mov	r1, r0
 801b118:	6818      	ldr	r0, [r3, #0]
 801b11a:	f000 b89f 	b.w	801b25c <_malloc_r>
 801b11e:	bf00      	nop
 801b120:	20000140 	.word	0x20000140

0801b124 <memcpy>:
 801b124:	440a      	add	r2, r1
 801b126:	4291      	cmp	r1, r2
 801b128:	f100 33ff 	add.w	r3, r0, #4294967295
 801b12c:	d100      	bne.n	801b130 <memcpy+0xc>
 801b12e:	4770      	bx	lr
 801b130:	b510      	push	{r4, lr}
 801b132:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b136:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b13a:	4291      	cmp	r1, r2
 801b13c:	d1f9      	bne.n	801b132 <memcpy+0xe>
 801b13e:	bd10      	pop	{r4, pc}

0801b140 <memmove>:
 801b140:	4288      	cmp	r0, r1
 801b142:	b510      	push	{r4, lr}
 801b144:	eb01 0402 	add.w	r4, r1, r2
 801b148:	d902      	bls.n	801b150 <memmove+0x10>
 801b14a:	4284      	cmp	r4, r0
 801b14c:	4623      	mov	r3, r4
 801b14e:	d807      	bhi.n	801b160 <memmove+0x20>
 801b150:	1e43      	subs	r3, r0, #1
 801b152:	42a1      	cmp	r1, r4
 801b154:	d008      	beq.n	801b168 <memmove+0x28>
 801b156:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b15a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b15e:	e7f8      	b.n	801b152 <memmove+0x12>
 801b160:	4402      	add	r2, r0
 801b162:	4601      	mov	r1, r0
 801b164:	428a      	cmp	r2, r1
 801b166:	d100      	bne.n	801b16a <memmove+0x2a>
 801b168:	bd10      	pop	{r4, pc}
 801b16a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b16e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b172:	e7f7      	b.n	801b164 <memmove+0x24>

0801b174 <memset>:
 801b174:	4402      	add	r2, r0
 801b176:	4603      	mov	r3, r0
 801b178:	4293      	cmp	r3, r2
 801b17a:	d100      	bne.n	801b17e <memset+0xa>
 801b17c:	4770      	bx	lr
 801b17e:	f803 1b01 	strb.w	r1, [r3], #1
 801b182:	e7f9      	b.n	801b178 <memset+0x4>

0801b184 <_free_r>:
 801b184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b186:	2900      	cmp	r1, #0
 801b188:	d044      	beq.n	801b214 <_free_r+0x90>
 801b18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b18e:	9001      	str	r0, [sp, #4]
 801b190:	2b00      	cmp	r3, #0
 801b192:	f1a1 0404 	sub.w	r4, r1, #4
 801b196:	bfb8      	it	lt
 801b198:	18e4      	addlt	r4, r4, r3
 801b19a:	f003 fc97 	bl	801eacc <__malloc_lock>
 801b19e:	4a1e      	ldr	r2, [pc, #120]	; (801b218 <_free_r+0x94>)
 801b1a0:	9801      	ldr	r0, [sp, #4]
 801b1a2:	6813      	ldr	r3, [r2, #0]
 801b1a4:	b933      	cbnz	r3, 801b1b4 <_free_r+0x30>
 801b1a6:	6063      	str	r3, [r4, #4]
 801b1a8:	6014      	str	r4, [r2, #0]
 801b1aa:	b003      	add	sp, #12
 801b1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1b0:	f003 bc92 	b.w	801ead8 <__malloc_unlock>
 801b1b4:	42a3      	cmp	r3, r4
 801b1b6:	d908      	bls.n	801b1ca <_free_r+0x46>
 801b1b8:	6825      	ldr	r5, [r4, #0]
 801b1ba:	1961      	adds	r1, r4, r5
 801b1bc:	428b      	cmp	r3, r1
 801b1be:	bf01      	itttt	eq
 801b1c0:	6819      	ldreq	r1, [r3, #0]
 801b1c2:	685b      	ldreq	r3, [r3, #4]
 801b1c4:	1949      	addeq	r1, r1, r5
 801b1c6:	6021      	streq	r1, [r4, #0]
 801b1c8:	e7ed      	b.n	801b1a6 <_free_r+0x22>
 801b1ca:	461a      	mov	r2, r3
 801b1cc:	685b      	ldr	r3, [r3, #4]
 801b1ce:	b10b      	cbz	r3, 801b1d4 <_free_r+0x50>
 801b1d0:	42a3      	cmp	r3, r4
 801b1d2:	d9fa      	bls.n	801b1ca <_free_r+0x46>
 801b1d4:	6811      	ldr	r1, [r2, #0]
 801b1d6:	1855      	adds	r5, r2, r1
 801b1d8:	42a5      	cmp	r5, r4
 801b1da:	d10b      	bne.n	801b1f4 <_free_r+0x70>
 801b1dc:	6824      	ldr	r4, [r4, #0]
 801b1de:	4421      	add	r1, r4
 801b1e0:	1854      	adds	r4, r2, r1
 801b1e2:	42a3      	cmp	r3, r4
 801b1e4:	6011      	str	r1, [r2, #0]
 801b1e6:	d1e0      	bne.n	801b1aa <_free_r+0x26>
 801b1e8:	681c      	ldr	r4, [r3, #0]
 801b1ea:	685b      	ldr	r3, [r3, #4]
 801b1ec:	6053      	str	r3, [r2, #4]
 801b1ee:	4421      	add	r1, r4
 801b1f0:	6011      	str	r1, [r2, #0]
 801b1f2:	e7da      	b.n	801b1aa <_free_r+0x26>
 801b1f4:	d902      	bls.n	801b1fc <_free_r+0x78>
 801b1f6:	230c      	movs	r3, #12
 801b1f8:	6003      	str	r3, [r0, #0]
 801b1fa:	e7d6      	b.n	801b1aa <_free_r+0x26>
 801b1fc:	6825      	ldr	r5, [r4, #0]
 801b1fe:	1961      	adds	r1, r4, r5
 801b200:	428b      	cmp	r3, r1
 801b202:	bf04      	itt	eq
 801b204:	6819      	ldreq	r1, [r3, #0]
 801b206:	685b      	ldreq	r3, [r3, #4]
 801b208:	6063      	str	r3, [r4, #4]
 801b20a:	bf04      	itt	eq
 801b20c:	1949      	addeq	r1, r1, r5
 801b20e:	6021      	streq	r1, [r4, #0]
 801b210:	6054      	str	r4, [r2, #4]
 801b212:	e7ca      	b.n	801b1aa <_free_r+0x26>
 801b214:	b003      	add	sp, #12
 801b216:	bd30      	pop	{r4, r5, pc}
 801b218:	20003610 	.word	0x20003610

0801b21c <sbrk_aligned>:
 801b21c:	b570      	push	{r4, r5, r6, lr}
 801b21e:	4e0e      	ldr	r6, [pc, #56]	; (801b258 <sbrk_aligned+0x3c>)
 801b220:	460c      	mov	r4, r1
 801b222:	6831      	ldr	r1, [r6, #0]
 801b224:	4605      	mov	r5, r0
 801b226:	b911      	cbnz	r1, 801b22e <sbrk_aligned+0x12>
 801b228:	f000 ff94 	bl	801c154 <_sbrk_r>
 801b22c:	6030      	str	r0, [r6, #0]
 801b22e:	4621      	mov	r1, r4
 801b230:	4628      	mov	r0, r5
 801b232:	f000 ff8f 	bl	801c154 <_sbrk_r>
 801b236:	1c43      	adds	r3, r0, #1
 801b238:	d00a      	beq.n	801b250 <sbrk_aligned+0x34>
 801b23a:	1cc4      	adds	r4, r0, #3
 801b23c:	f024 0403 	bic.w	r4, r4, #3
 801b240:	42a0      	cmp	r0, r4
 801b242:	d007      	beq.n	801b254 <sbrk_aligned+0x38>
 801b244:	1a21      	subs	r1, r4, r0
 801b246:	4628      	mov	r0, r5
 801b248:	f000 ff84 	bl	801c154 <_sbrk_r>
 801b24c:	3001      	adds	r0, #1
 801b24e:	d101      	bne.n	801b254 <sbrk_aligned+0x38>
 801b250:	f04f 34ff 	mov.w	r4, #4294967295
 801b254:	4620      	mov	r0, r4
 801b256:	bd70      	pop	{r4, r5, r6, pc}
 801b258:	20003614 	.word	0x20003614

0801b25c <_malloc_r>:
 801b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b260:	1ccd      	adds	r5, r1, #3
 801b262:	f025 0503 	bic.w	r5, r5, #3
 801b266:	3508      	adds	r5, #8
 801b268:	2d0c      	cmp	r5, #12
 801b26a:	bf38      	it	cc
 801b26c:	250c      	movcc	r5, #12
 801b26e:	2d00      	cmp	r5, #0
 801b270:	4607      	mov	r7, r0
 801b272:	db01      	blt.n	801b278 <_malloc_r+0x1c>
 801b274:	42a9      	cmp	r1, r5
 801b276:	d905      	bls.n	801b284 <_malloc_r+0x28>
 801b278:	230c      	movs	r3, #12
 801b27a:	603b      	str	r3, [r7, #0]
 801b27c:	2600      	movs	r6, #0
 801b27e:	4630      	mov	r0, r6
 801b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b284:	4e2e      	ldr	r6, [pc, #184]	; (801b340 <_malloc_r+0xe4>)
 801b286:	f003 fc21 	bl	801eacc <__malloc_lock>
 801b28a:	6833      	ldr	r3, [r6, #0]
 801b28c:	461c      	mov	r4, r3
 801b28e:	bb34      	cbnz	r4, 801b2de <_malloc_r+0x82>
 801b290:	4629      	mov	r1, r5
 801b292:	4638      	mov	r0, r7
 801b294:	f7ff ffc2 	bl	801b21c <sbrk_aligned>
 801b298:	1c43      	adds	r3, r0, #1
 801b29a:	4604      	mov	r4, r0
 801b29c:	d14d      	bne.n	801b33a <_malloc_r+0xde>
 801b29e:	6834      	ldr	r4, [r6, #0]
 801b2a0:	4626      	mov	r6, r4
 801b2a2:	2e00      	cmp	r6, #0
 801b2a4:	d140      	bne.n	801b328 <_malloc_r+0xcc>
 801b2a6:	6823      	ldr	r3, [r4, #0]
 801b2a8:	4631      	mov	r1, r6
 801b2aa:	4638      	mov	r0, r7
 801b2ac:	eb04 0803 	add.w	r8, r4, r3
 801b2b0:	f000 ff50 	bl	801c154 <_sbrk_r>
 801b2b4:	4580      	cmp	r8, r0
 801b2b6:	d13a      	bne.n	801b32e <_malloc_r+0xd2>
 801b2b8:	6821      	ldr	r1, [r4, #0]
 801b2ba:	3503      	adds	r5, #3
 801b2bc:	1a6d      	subs	r5, r5, r1
 801b2be:	f025 0503 	bic.w	r5, r5, #3
 801b2c2:	3508      	adds	r5, #8
 801b2c4:	2d0c      	cmp	r5, #12
 801b2c6:	bf38      	it	cc
 801b2c8:	250c      	movcc	r5, #12
 801b2ca:	4629      	mov	r1, r5
 801b2cc:	4638      	mov	r0, r7
 801b2ce:	f7ff ffa5 	bl	801b21c <sbrk_aligned>
 801b2d2:	3001      	adds	r0, #1
 801b2d4:	d02b      	beq.n	801b32e <_malloc_r+0xd2>
 801b2d6:	6823      	ldr	r3, [r4, #0]
 801b2d8:	442b      	add	r3, r5
 801b2da:	6023      	str	r3, [r4, #0]
 801b2dc:	e00e      	b.n	801b2fc <_malloc_r+0xa0>
 801b2de:	6822      	ldr	r2, [r4, #0]
 801b2e0:	1b52      	subs	r2, r2, r5
 801b2e2:	d41e      	bmi.n	801b322 <_malloc_r+0xc6>
 801b2e4:	2a0b      	cmp	r2, #11
 801b2e6:	d916      	bls.n	801b316 <_malloc_r+0xba>
 801b2e8:	1961      	adds	r1, r4, r5
 801b2ea:	42a3      	cmp	r3, r4
 801b2ec:	6025      	str	r5, [r4, #0]
 801b2ee:	bf18      	it	ne
 801b2f0:	6059      	strne	r1, [r3, #4]
 801b2f2:	6863      	ldr	r3, [r4, #4]
 801b2f4:	bf08      	it	eq
 801b2f6:	6031      	streq	r1, [r6, #0]
 801b2f8:	5162      	str	r2, [r4, r5]
 801b2fa:	604b      	str	r3, [r1, #4]
 801b2fc:	4638      	mov	r0, r7
 801b2fe:	f104 060b 	add.w	r6, r4, #11
 801b302:	f003 fbe9 	bl	801ead8 <__malloc_unlock>
 801b306:	f026 0607 	bic.w	r6, r6, #7
 801b30a:	1d23      	adds	r3, r4, #4
 801b30c:	1af2      	subs	r2, r6, r3
 801b30e:	d0b6      	beq.n	801b27e <_malloc_r+0x22>
 801b310:	1b9b      	subs	r3, r3, r6
 801b312:	50a3      	str	r3, [r4, r2]
 801b314:	e7b3      	b.n	801b27e <_malloc_r+0x22>
 801b316:	6862      	ldr	r2, [r4, #4]
 801b318:	42a3      	cmp	r3, r4
 801b31a:	bf0c      	ite	eq
 801b31c:	6032      	streq	r2, [r6, #0]
 801b31e:	605a      	strne	r2, [r3, #4]
 801b320:	e7ec      	b.n	801b2fc <_malloc_r+0xa0>
 801b322:	4623      	mov	r3, r4
 801b324:	6864      	ldr	r4, [r4, #4]
 801b326:	e7b2      	b.n	801b28e <_malloc_r+0x32>
 801b328:	4634      	mov	r4, r6
 801b32a:	6876      	ldr	r6, [r6, #4]
 801b32c:	e7b9      	b.n	801b2a2 <_malloc_r+0x46>
 801b32e:	230c      	movs	r3, #12
 801b330:	603b      	str	r3, [r7, #0]
 801b332:	4638      	mov	r0, r7
 801b334:	f003 fbd0 	bl	801ead8 <__malloc_unlock>
 801b338:	e7a1      	b.n	801b27e <_malloc_r+0x22>
 801b33a:	6025      	str	r5, [r4, #0]
 801b33c:	e7de      	b.n	801b2fc <_malloc_r+0xa0>
 801b33e:	bf00      	nop
 801b340:	20003610 	.word	0x20003610

0801b344 <__cvt>:
 801b344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b348:	ec55 4b10 	vmov	r4, r5, d0
 801b34c:	2d00      	cmp	r5, #0
 801b34e:	460e      	mov	r6, r1
 801b350:	4619      	mov	r1, r3
 801b352:	462b      	mov	r3, r5
 801b354:	bfbb      	ittet	lt
 801b356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b35a:	461d      	movlt	r5, r3
 801b35c:	2300      	movge	r3, #0
 801b35e:	232d      	movlt	r3, #45	; 0x2d
 801b360:	700b      	strb	r3, [r1, #0]
 801b362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b364:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b368:	4691      	mov	r9, r2
 801b36a:	f023 0820 	bic.w	r8, r3, #32
 801b36e:	bfbc      	itt	lt
 801b370:	4622      	movlt	r2, r4
 801b372:	4614      	movlt	r4, r2
 801b374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b378:	d005      	beq.n	801b386 <__cvt+0x42>
 801b37a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b37e:	d100      	bne.n	801b382 <__cvt+0x3e>
 801b380:	3601      	adds	r6, #1
 801b382:	2102      	movs	r1, #2
 801b384:	e000      	b.n	801b388 <__cvt+0x44>
 801b386:	2103      	movs	r1, #3
 801b388:	ab03      	add	r3, sp, #12
 801b38a:	9301      	str	r3, [sp, #4]
 801b38c:	ab02      	add	r3, sp, #8
 801b38e:	9300      	str	r3, [sp, #0]
 801b390:	ec45 4b10 	vmov	d0, r4, r5
 801b394:	4653      	mov	r3, sl
 801b396:	4632      	mov	r2, r6
 801b398:	f001 fff6 	bl	801d388 <_dtoa_r>
 801b39c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b3a0:	4607      	mov	r7, r0
 801b3a2:	d102      	bne.n	801b3aa <__cvt+0x66>
 801b3a4:	f019 0f01 	tst.w	r9, #1
 801b3a8:	d022      	beq.n	801b3f0 <__cvt+0xac>
 801b3aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b3ae:	eb07 0906 	add.w	r9, r7, r6
 801b3b2:	d110      	bne.n	801b3d6 <__cvt+0x92>
 801b3b4:	783b      	ldrb	r3, [r7, #0]
 801b3b6:	2b30      	cmp	r3, #48	; 0x30
 801b3b8:	d10a      	bne.n	801b3d0 <__cvt+0x8c>
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	2300      	movs	r3, #0
 801b3be:	4620      	mov	r0, r4
 801b3c0:	4629      	mov	r1, r5
 801b3c2:	f7e5 fb99 	bl	8000af8 <__aeabi_dcmpeq>
 801b3c6:	b918      	cbnz	r0, 801b3d0 <__cvt+0x8c>
 801b3c8:	f1c6 0601 	rsb	r6, r6, #1
 801b3cc:	f8ca 6000 	str.w	r6, [sl]
 801b3d0:	f8da 3000 	ldr.w	r3, [sl]
 801b3d4:	4499      	add	r9, r3
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	2300      	movs	r3, #0
 801b3da:	4620      	mov	r0, r4
 801b3dc:	4629      	mov	r1, r5
 801b3de:	f7e5 fb8b 	bl	8000af8 <__aeabi_dcmpeq>
 801b3e2:	b108      	cbz	r0, 801b3e8 <__cvt+0xa4>
 801b3e4:	f8cd 900c 	str.w	r9, [sp, #12]
 801b3e8:	2230      	movs	r2, #48	; 0x30
 801b3ea:	9b03      	ldr	r3, [sp, #12]
 801b3ec:	454b      	cmp	r3, r9
 801b3ee:	d307      	bcc.n	801b400 <__cvt+0xbc>
 801b3f0:	9b03      	ldr	r3, [sp, #12]
 801b3f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b3f4:	1bdb      	subs	r3, r3, r7
 801b3f6:	4638      	mov	r0, r7
 801b3f8:	6013      	str	r3, [r2, #0]
 801b3fa:	b004      	add	sp, #16
 801b3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b400:	1c59      	adds	r1, r3, #1
 801b402:	9103      	str	r1, [sp, #12]
 801b404:	701a      	strb	r2, [r3, #0]
 801b406:	e7f0      	b.n	801b3ea <__cvt+0xa6>

0801b408 <__exponent>:
 801b408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b40a:	4603      	mov	r3, r0
 801b40c:	2900      	cmp	r1, #0
 801b40e:	bfb8      	it	lt
 801b410:	4249      	neglt	r1, r1
 801b412:	f803 2b02 	strb.w	r2, [r3], #2
 801b416:	bfb4      	ite	lt
 801b418:	222d      	movlt	r2, #45	; 0x2d
 801b41a:	222b      	movge	r2, #43	; 0x2b
 801b41c:	2909      	cmp	r1, #9
 801b41e:	7042      	strb	r2, [r0, #1]
 801b420:	dd2a      	ble.n	801b478 <__exponent+0x70>
 801b422:	f10d 0407 	add.w	r4, sp, #7
 801b426:	46a4      	mov	ip, r4
 801b428:	270a      	movs	r7, #10
 801b42a:	46a6      	mov	lr, r4
 801b42c:	460a      	mov	r2, r1
 801b42e:	fb91 f6f7 	sdiv	r6, r1, r7
 801b432:	fb07 1516 	mls	r5, r7, r6, r1
 801b436:	3530      	adds	r5, #48	; 0x30
 801b438:	2a63      	cmp	r2, #99	; 0x63
 801b43a:	f104 34ff 	add.w	r4, r4, #4294967295
 801b43e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b442:	4631      	mov	r1, r6
 801b444:	dcf1      	bgt.n	801b42a <__exponent+0x22>
 801b446:	3130      	adds	r1, #48	; 0x30
 801b448:	f1ae 0502 	sub.w	r5, lr, #2
 801b44c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b450:	1c44      	adds	r4, r0, #1
 801b452:	4629      	mov	r1, r5
 801b454:	4561      	cmp	r1, ip
 801b456:	d30a      	bcc.n	801b46e <__exponent+0x66>
 801b458:	f10d 0209 	add.w	r2, sp, #9
 801b45c:	eba2 020e 	sub.w	r2, r2, lr
 801b460:	4565      	cmp	r5, ip
 801b462:	bf88      	it	hi
 801b464:	2200      	movhi	r2, #0
 801b466:	4413      	add	r3, r2
 801b468:	1a18      	subs	r0, r3, r0
 801b46a:	b003      	add	sp, #12
 801b46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b472:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b476:	e7ed      	b.n	801b454 <__exponent+0x4c>
 801b478:	2330      	movs	r3, #48	; 0x30
 801b47a:	3130      	adds	r1, #48	; 0x30
 801b47c:	7083      	strb	r3, [r0, #2]
 801b47e:	70c1      	strb	r1, [r0, #3]
 801b480:	1d03      	adds	r3, r0, #4
 801b482:	e7f1      	b.n	801b468 <__exponent+0x60>

0801b484 <_printf_float>:
 801b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b488:	ed2d 8b02 	vpush	{d8}
 801b48c:	b08d      	sub	sp, #52	; 0x34
 801b48e:	460c      	mov	r4, r1
 801b490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b494:	4616      	mov	r6, r2
 801b496:	461f      	mov	r7, r3
 801b498:	4605      	mov	r5, r0
 801b49a:	f003 fa9b 	bl	801e9d4 <_localeconv_r>
 801b49e:	f8d0 a000 	ldr.w	sl, [r0]
 801b4a2:	4650      	mov	r0, sl
 801b4a4:	f7e4 fea6 	bl	80001f4 <strlen>
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	930a      	str	r3, [sp, #40]	; 0x28
 801b4ac:	6823      	ldr	r3, [r4, #0]
 801b4ae:	9305      	str	r3, [sp, #20]
 801b4b0:	f8d8 3000 	ldr.w	r3, [r8]
 801b4b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b4b8:	3307      	adds	r3, #7
 801b4ba:	f023 0307 	bic.w	r3, r3, #7
 801b4be:	f103 0208 	add.w	r2, r3, #8
 801b4c2:	f8c8 2000 	str.w	r2, [r8]
 801b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b4ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b4d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b4d6:	9307      	str	r3, [sp, #28]
 801b4d8:	f8cd 8018 	str.w	r8, [sp, #24]
 801b4dc:	ee08 0a10 	vmov	s16, r0
 801b4e0:	4b9f      	ldr	r3, [pc, #636]	; (801b760 <_printf_float+0x2dc>)
 801b4e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 801b4ea:	f7e5 fb37 	bl	8000b5c <__aeabi_dcmpun>
 801b4ee:	bb88      	cbnz	r0, 801b554 <_printf_float+0xd0>
 801b4f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b4f4:	4b9a      	ldr	r3, [pc, #616]	; (801b760 <_printf_float+0x2dc>)
 801b4f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b4fa:	f7e5 fb11 	bl	8000b20 <__aeabi_dcmple>
 801b4fe:	bb48      	cbnz	r0, 801b554 <_printf_float+0xd0>
 801b500:	2200      	movs	r2, #0
 801b502:	2300      	movs	r3, #0
 801b504:	4640      	mov	r0, r8
 801b506:	4649      	mov	r1, r9
 801b508:	f7e5 fb00 	bl	8000b0c <__aeabi_dcmplt>
 801b50c:	b110      	cbz	r0, 801b514 <_printf_float+0x90>
 801b50e:	232d      	movs	r3, #45	; 0x2d
 801b510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b514:	4b93      	ldr	r3, [pc, #588]	; (801b764 <_printf_float+0x2e0>)
 801b516:	4894      	ldr	r0, [pc, #592]	; (801b768 <_printf_float+0x2e4>)
 801b518:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b51c:	bf94      	ite	ls
 801b51e:	4698      	movls	r8, r3
 801b520:	4680      	movhi	r8, r0
 801b522:	2303      	movs	r3, #3
 801b524:	6123      	str	r3, [r4, #16]
 801b526:	9b05      	ldr	r3, [sp, #20]
 801b528:	f023 0204 	bic.w	r2, r3, #4
 801b52c:	6022      	str	r2, [r4, #0]
 801b52e:	f04f 0900 	mov.w	r9, #0
 801b532:	9700      	str	r7, [sp, #0]
 801b534:	4633      	mov	r3, r6
 801b536:	aa0b      	add	r2, sp, #44	; 0x2c
 801b538:	4621      	mov	r1, r4
 801b53a:	4628      	mov	r0, r5
 801b53c:	f000 f9d8 	bl	801b8f0 <_printf_common>
 801b540:	3001      	adds	r0, #1
 801b542:	f040 8090 	bne.w	801b666 <_printf_float+0x1e2>
 801b546:	f04f 30ff 	mov.w	r0, #4294967295
 801b54a:	b00d      	add	sp, #52	; 0x34
 801b54c:	ecbd 8b02 	vpop	{d8}
 801b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b554:	4642      	mov	r2, r8
 801b556:	464b      	mov	r3, r9
 801b558:	4640      	mov	r0, r8
 801b55a:	4649      	mov	r1, r9
 801b55c:	f7e5 fafe 	bl	8000b5c <__aeabi_dcmpun>
 801b560:	b140      	cbz	r0, 801b574 <_printf_float+0xf0>
 801b562:	464b      	mov	r3, r9
 801b564:	2b00      	cmp	r3, #0
 801b566:	bfbc      	itt	lt
 801b568:	232d      	movlt	r3, #45	; 0x2d
 801b56a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b56e:	487f      	ldr	r0, [pc, #508]	; (801b76c <_printf_float+0x2e8>)
 801b570:	4b7f      	ldr	r3, [pc, #508]	; (801b770 <_printf_float+0x2ec>)
 801b572:	e7d1      	b.n	801b518 <_printf_float+0x94>
 801b574:	6863      	ldr	r3, [r4, #4]
 801b576:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b57a:	9206      	str	r2, [sp, #24]
 801b57c:	1c5a      	adds	r2, r3, #1
 801b57e:	d13f      	bne.n	801b600 <_printf_float+0x17c>
 801b580:	2306      	movs	r3, #6
 801b582:	6063      	str	r3, [r4, #4]
 801b584:	9b05      	ldr	r3, [sp, #20]
 801b586:	6861      	ldr	r1, [r4, #4]
 801b588:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b58c:	2300      	movs	r3, #0
 801b58e:	9303      	str	r3, [sp, #12]
 801b590:	ab0a      	add	r3, sp, #40	; 0x28
 801b592:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b596:	ab09      	add	r3, sp, #36	; 0x24
 801b598:	ec49 8b10 	vmov	d0, r8, r9
 801b59c:	9300      	str	r3, [sp, #0]
 801b59e:	6022      	str	r2, [r4, #0]
 801b5a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b5a4:	4628      	mov	r0, r5
 801b5a6:	f7ff fecd 	bl	801b344 <__cvt>
 801b5aa:	9b06      	ldr	r3, [sp, #24]
 801b5ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b5ae:	2b47      	cmp	r3, #71	; 0x47
 801b5b0:	4680      	mov	r8, r0
 801b5b2:	d108      	bne.n	801b5c6 <_printf_float+0x142>
 801b5b4:	1cc8      	adds	r0, r1, #3
 801b5b6:	db02      	blt.n	801b5be <_printf_float+0x13a>
 801b5b8:	6863      	ldr	r3, [r4, #4]
 801b5ba:	4299      	cmp	r1, r3
 801b5bc:	dd41      	ble.n	801b642 <_printf_float+0x1be>
 801b5be:	f1ab 0b02 	sub.w	fp, fp, #2
 801b5c2:	fa5f fb8b 	uxtb.w	fp, fp
 801b5c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b5ca:	d820      	bhi.n	801b60e <_printf_float+0x18a>
 801b5cc:	3901      	subs	r1, #1
 801b5ce:	465a      	mov	r2, fp
 801b5d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b5d4:	9109      	str	r1, [sp, #36]	; 0x24
 801b5d6:	f7ff ff17 	bl	801b408 <__exponent>
 801b5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b5dc:	1813      	adds	r3, r2, r0
 801b5de:	2a01      	cmp	r2, #1
 801b5e0:	4681      	mov	r9, r0
 801b5e2:	6123      	str	r3, [r4, #16]
 801b5e4:	dc02      	bgt.n	801b5ec <_printf_float+0x168>
 801b5e6:	6822      	ldr	r2, [r4, #0]
 801b5e8:	07d2      	lsls	r2, r2, #31
 801b5ea:	d501      	bpl.n	801b5f0 <_printf_float+0x16c>
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	6123      	str	r3, [r4, #16]
 801b5f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d09c      	beq.n	801b532 <_printf_float+0xae>
 801b5f8:	232d      	movs	r3, #45	; 0x2d
 801b5fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5fe:	e798      	b.n	801b532 <_printf_float+0xae>
 801b600:	9a06      	ldr	r2, [sp, #24]
 801b602:	2a47      	cmp	r2, #71	; 0x47
 801b604:	d1be      	bne.n	801b584 <_printf_float+0x100>
 801b606:	2b00      	cmp	r3, #0
 801b608:	d1bc      	bne.n	801b584 <_printf_float+0x100>
 801b60a:	2301      	movs	r3, #1
 801b60c:	e7b9      	b.n	801b582 <_printf_float+0xfe>
 801b60e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b612:	d118      	bne.n	801b646 <_printf_float+0x1c2>
 801b614:	2900      	cmp	r1, #0
 801b616:	6863      	ldr	r3, [r4, #4]
 801b618:	dd0b      	ble.n	801b632 <_printf_float+0x1ae>
 801b61a:	6121      	str	r1, [r4, #16]
 801b61c:	b913      	cbnz	r3, 801b624 <_printf_float+0x1a0>
 801b61e:	6822      	ldr	r2, [r4, #0]
 801b620:	07d0      	lsls	r0, r2, #31
 801b622:	d502      	bpl.n	801b62a <_printf_float+0x1a6>
 801b624:	3301      	adds	r3, #1
 801b626:	440b      	add	r3, r1
 801b628:	6123      	str	r3, [r4, #16]
 801b62a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b62c:	f04f 0900 	mov.w	r9, #0
 801b630:	e7de      	b.n	801b5f0 <_printf_float+0x16c>
 801b632:	b913      	cbnz	r3, 801b63a <_printf_float+0x1b6>
 801b634:	6822      	ldr	r2, [r4, #0]
 801b636:	07d2      	lsls	r2, r2, #31
 801b638:	d501      	bpl.n	801b63e <_printf_float+0x1ba>
 801b63a:	3302      	adds	r3, #2
 801b63c:	e7f4      	b.n	801b628 <_printf_float+0x1a4>
 801b63e:	2301      	movs	r3, #1
 801b640:	e7f2      	b.n	801b628 <_printf_float+0x1a4>
 801b642:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b648:	4299      	cmp	r1, r3
 801b64a:	db05      	blt.n	801b658 <_printf_float+0x1d4>
 801b64c:	6823      	ldr	r3, [r4, #0]
 801b64e:	6121      	str	r1, [r4, #16]
 801b650:	07d8      	lsls	r0, r3, #31
 801b652:	d5ea      	bpl.n	801b62a <_printf_float+0x1a6>
 801b654:	1c4b      	adds	r3, r1, #1
 801b656:	e7e7      	b.n	801b628 <_printf_float+0x1a4>
 801b658:	2900      	cmp	r1, #0
 801b65a:	bfd4      	ite	le
 801b65c:	f1c1 0202 	rsble	r2, r1, #2
 801b660:	2201      	movgt	r2, #1
 801b662:	4413      	add	r3, r2
 801b664:	e7e0      	b.n	801b628 <_printf_float+0x1a4>
 801b666:	6823      	ldr	r3, [r4, #0]
 801b668:	055a      	lsls	r2, r3, #21
 801b66a:	d407      	bmi.n	801b67c <_printf_float+0x1f8>
 801b66c:	6923      	ldr	r3, [r4, #16]
 801b66e:	4642      	mov	r2, r8
 801b670:	4631      	mov	r1, r6
 801b672:	4628      	mov	r0, r5
 801b674:	47b8      	blx	r7
 801b676:	3001      	adds	r0, #1
 801b678:	d12c      	bne.n	801b6d4 <_printf_float+0x250>
 801b67a:	e764      	b.n	801b546 <_printf_float+0xc2>
 801b67c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b680:	f240 80e0 	bls.w	801b844 <_printf_float+0x3c0>
 801b684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b688:	2200      	movs	r2, #0
 801b68a:	2300      	movs	r3, #0
 801b68c:	f7e5 fa34 	bl	8000af8 <__aeabi_dcmpeq>
 801b690:	2800      	cmp	r0, #0
 801b692:	d034      	beq.n	801b6fe <_printf_float+0x27a>
 801b694:	4a37      	ldr	r2, [pc, #220]	; (801b774 <_printf_float+0x2f0>)
 801b696:	2301      	movs	r3, #1
 801b698:	4631      	mov	r1, r6
 801b69a:	4628      	mov	r0, r5
 801b69c:	47b8      	blx	r7
 801b69e:	3001      	adds	r0, #1
 801b6a0:	f43f af51 	beq.w	801b546 <_printf_float+0xc2>
 801b6a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b6a8:	429a      	cmp	r2, r3
 801b6aa:	db02      	blt.n	801b6b2 <_printf_float+0x22e>
 801b6ac:	6823      	ldr	r3, [r4, #0]
 801b6ae:	07d8      	lsls	r0, r3, #31
 801b6b0:	d510      	bpl.n	801b6d4 <_printf_float+0x250>
 801b6b2:	ee18 3a10 	vmov	r3, s16
 801b6b6:	4652      	mov	r2, sl
 801b6b8:	4631      	mov	r1, r6
 801b6ba:	4628      	mov	r0, r5
 801b6bc:	47b8      	blx	r7
 801b6be:	3001      	adds	r0, #1
 801b6c0:	f43f af41 	beq.w	801b546 <_printf_float+0xc2>
 801b6c4:	f04f 0800 	mov.w	r8, #0
 801b6c8:	f104 091a 	add.w	r9, r4, #26
 801b6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6ce:	3b01      	subs	r3, #1
 801b6d0:	4543      	cmp	r3, r8
 801b6d2:	dc09      	bgt.n	801b6e8 <_printf_float+0x264>
 801b6d4:	6823      	ldr	r3, [r4, #0]
 801b6d6:	079b      	lsls	r3, r3, #30
 801b6d8:	f100 8105 	bmi.w	801b8e6 <_printf_float+0x462>
 801b6dc:	68e0      	ldr	r0, [r4, #12]
 801b6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6e0:	4298      	cmp	r0, r3
 801b6e2:	bfb8      	it	lt
 801b6e4:	4618      	movlt	r0, r3
 801b6e6:	e730      	b.n	801b54a <_printf_float+0xc6>
 801b6e8:	2301      	movs	r3, #1
 801b6ea:	464a      	mov	r2, r9
 801b6ec:	4631      	mov	r1, r6
 801b6ee:	4628      	mov	r0, r5
 801b6f0:	47b8      	blx	r7
 801b6f2:	3001      	adds	r0, #1
 801b6f4:	f43f af27 	beq.w	801b546 <_printf_float+0xc2>
 801b6f8:	f108 0801 	add.w	r8, r8, #1
 801b6fc:	e7e6      	b.n	801b6cc <_printf_float+0x248>
 801b6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b700:	2b00      	cmp	r3, #0
 801b702:	dc39      	bgt.n	801b778 <_printf_float+0x2f4>
 801b704:	4a1b      	ldr	r2, [pc, #108]	; (801b774 <_printf_float+0x2f0>)
 801b706:	2301      	movs	r3, #1
 801b708:	4631      	mov	r1, r6
 801b70a:	4628      	mov	r0, r5
 801b70c:	47b8      	blx	r7
 801b70e:	3001      	adds	r0, #1
 801b710:	f43f af19 	beq.w	801b546 <_printf_float+0xc2>
 801b714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b718:	4313      	orrs	r3, r2
 801b71a:	d102      	bne.n	801b722 <_printf_float+0x29e>
 801b71c:	6823      	ldr	r3, [r4, #0]
 801b71e:	07d9      	lsls	r1, r3, #31
 801b720:	d5d8      	bpl.n	801b6d4 <_printf_float+0x250>
 801b722:	ee18 3a10 	vmov	r3, s16
 801b726:	4652      	mov	r2, sl
 801b728:	4631      	mov	r1, r6
 801b72a:	4628      	mov	r0, r5
 801b72c:	47b8      	blx	r7
 801b72e:	3001      	adds	r0, #1
 801b730:	f43f af09 	beq.w	801b546 <_printf_float+0xc2>
 801b734:	f04f 0900 	mov.w	r9, #0
 801b738:	f104 0a1a 	add.w	sl, r4, #26
 801b73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b73e:	425b      	negs	r3, r3
 801b740:	454b      	cmp	r3, r9
 801b742:	dc01      	bgt.n	801b748 <_printf_float+0x2c4>
 801b744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b746:	e792      	b.n	801b66e <_printf_float+0x1ea>
 801b748:	2301      	movs	r3, #1
 801b74a:	4652      	mov	r2, sl
 801b74c:	4631      	mov	r1, r6
 801b74e:	4628      	mov	r0, r5
 801b750:	47b8      	blx	r7
 801b752:	3001      	adds	r0, #1
 801b754:	f43f aef7 	beq.w	801b546 <_printf_float+0xc2>
 801b758:	f109 0901 	add.w	r9, r9, #1
 801b75c:	e7ee      	b.n	801b73c <_printf_float+0x2b8>
 801b75e:	bf00      	nop
 801b760:	7fefffff 	.word	0x7fefffff
 801b764:	08021b1c 	.word	0x08021b1c
 801b768:	08021b20 	.word	0x08021b20
 801b76c:	08021b28 	.word	0x08021b28
 801b770:	08021b24 	.word	0x08021b24
 801b774:	08021b2c 	.word	0x08021b2c
 801b778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b77a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b77c:	429a      	cmp	r2, r3
 801b77e:	bfa8      	it	ge
 801b780:	461a      	movge	r2, r3
 801b782:	2a00      	cmp	r2, #0
 801b784:	4691      	mov	r9, r2
 801b786:	dc37      	bgt.n	801b7f8 <_printf_float+0x374>
 801b788:	f04f 0b00 	mov.w	fp, #0
 801b78c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b790:	f104 021a 	add.w	r2, r4, #26
 801b794:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b796:	9305      	str	r3, [sp, #20]
 801b798:	eba3 0309 	sub.w	r3, r3, r9
 801b79c:	455b      	cmp	r3, fp
 801b79e:	dc33      	bgt.n	801b808 <_printf_float+0x384>
 801b7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b7a4:	429a      	cmp	r2, r3
 801b7a6:	db3b      	blt.n	801b820 <_printf_float+0x39c>
 801b7a8:	6823      	ldr	r3, [r4, #0]
 801b7aa:	07da      	lsls	r2, r3, #31
 801b7ac:	d438      	bmi.n	801b820 <_printf_float+0x39c>
 801b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7b0:	9a05      	ldr	r2, [sp, #20]
 801b7b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b7b4:	1a9a      	subs	r2, r3, r2
 801b7b6:	eba3 0901 	sub.w	r9, r3, r1
 801b7ba:	4591      	cmp	r9, r2
 801b7bc:	bfa8      	it	ge
 801b7be:	4691      	movge	r9, r2
 801b7c0:	f1b9 0f00 	cmp.w	r9, #0
 801b7c4:	dc35      	bgt.n	801b832 <_printf_float+0x3ae>
 801b7c6:	f04f 0800 	mov.w	r8, #0
 801b7ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b7ce:	f104 0a1a 	add.w	sl, r4, #26
 801b7d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b7d6:	1a9b      	subs	r3, r3, r2
 801b7d8:	eba3 0309 	sub.w	r3, r3, r9
 801b7dc:	4543      	cmp	r3, r8
 801b7de:	f77f af79 	ble.w	801b6d4 <_printf_float+0x250>
 801b7e2:	2301      	movs	r3, #1
 801b7e4:	4652      	mov	r2, sl
 801b7e6:	4631      	mov	r1, r6
 801b7e8:	4628      	mov	r0, r5
 801b7ea:	47b8      	blx	r7
 801b7ec:	3001      	adds	r0, #1
 801b7ee:	f43f aeaa 	beq.w	801b546 <_printf_float+0xc2>
 801b7f2:	f108 0801 	add.w	r8, r8, #1
 801b7f6:	e7ec      	b.n	801b7d2 <_printf_float+0x34e>
 801b7f8:	4613      	mov	r3, r2
 801b7fa:	4631      	mov	r1, r6
 801b7fc:	4642      	mov	r2, r8
 801b7fe:	4628      	mov	r0, r5
 801b800:	47b8      	blx	r7
 801b802:	3001      	adds	r0, #1
 801b804:	d1c0      	bne.n	801b788 <_printf_float+0x304>
 801b806:	e69e      	b.n	801b546 <_printf_float+0xc2>
 801b808:	2301      	movs	r3, #1
 801b80a:	4631      	mov	r1, r6
 801b80c:	4628      	mov	r0, r5
 801b80e:	9205      	str	r2, [sp, #20]
 801b810:	47b8      	blx	r7
 801b812:	3001      	adds	r0, #1
 801b814:	f43f ae97 	beq.w	801b546 <_printf_float+0xc2>
 801b818:	9a05      	ldr	r2, [sp, #20]
 801b81a:	f10b 0b01 	add.w	fp, fp, #1
 801b81e:	e7b9      	b.n	801b794 <_printf_float+0x310>
 801b820:	ee18 3a10 	vmov	r3, s16
 801b824:	4652      	mov	r2, sl
 801b826:	4631      	mov	r1, r6
 801b828:	4628      	mov	r0, r5
 801b82a:	47b8      	blx	r7
 801b82c:	3001      	adds	r0, #1
 801b82e:	d1be      	bne.n	801b7ae <_printf_float+0x32a>
 801b830:	e689      	b.n	801b546 <_printf_float+0xc2>
 801b832:	9a05      	ldr	r2, [sp, #20]
 801b834:	464b      	mov	r3, r9
 801b836:	4442      	add	r2, r8
 801b838:	4631      	mov	r1, r6
 801b83a:	4628      	mov	r0, r5
 801b83c:	47b8      	blx	r7
 801b83e:	3001      	adds	r0, #1
 801b840:	d1c1      	bne.n	801b7c6 <_printf_float+0x342>
 801b842:	e680      	b.n	801b546 <_printf_float+0xc2>
 801b844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b846:	2a01      	cmp	r2, #1
 801b848:	dc01      	bgt.n	801b84e <_printf_float+0x3ca>
 801b84a:	07db      	lsls	r3, r3, #31
 801b84c:	d538      	bpl.n	801b8c0 <_printf_float+0x43c>
 801b84e:	2301      	movs	r3, #1
 801b850:	4642      	mov	r2, r8
 801b852:	4631      	mov	r1, r6
 801b854:	4628      	mov	r0, r5
 801b856:	47b8      	blx	r7
 801b858:	3001      	adds	r0, #1
 801b85a:	f43f ae74 	beq.w	801b546 <_printf_float+0xc2>
 801b85e:	ee18 3a10 	vmov	r3, s16
 801b862:	4652      	mov	r2, sl
 801b864:	4631      	mov	r1, r6
 801b866:	4628      	mov	r0, r5
 801b868:	47b8      	blx	r7
 801b86a:	3001      	adds	r0, #1
 801b86c:	f43f ae6b 	beq.w	801b546 <_printf_float+0xc2>
 801b870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b874:	2200      	movs	r2, #0
 801b876:	2300      	movs	r3, #0
 801b878:	f7e5 f93e 	bl	8000af8 <__aeabi_dcmpeq>
 801b87c:	b9d8      	cbnz	r0, 801b8b6 <_printf_float+0x432>
 801b87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b880:	f108 0201 	add.w	r2, r8, #1
 801b884:	3b01      	subs	r3, #1
 801b886:	4631      	mov	r1, r6
 801b888:	4628      	mov	r0, r5
 801b88a:	47b8      	blx	r7
 801b88c:	3001      	adds	r0, #1
 801b88e:	d10e      	bne.n	801b8ae <_printf_float+0x42a>
 801b890:	e659      	b.n	801b546 <_printf_float+0xc2>
 801b892:	2301      	movs	r3, #1
 801b894:	4652      	mov	r2, sl
 801b896:	4631      	mov	r1, r6
 801b898:	4628      	mov	r0, r5
 801b89a:	47b8      	blx	r7
 801b89c:	3001      	adds	r0, #1
 801b89e:	f43f ae52 	beq.w	801b546 <_printf_float+0xc2>
 801b8a2:	f108 0801 	add.w	r8, r8, #1
 801b8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8a8:	3b01      	subs	r3, #1
 801b8aa:	4543      	cmp	r3, r8
 801b8ac:	dcf1      	bgt.n	801b892 <_printf_float+0x40e>
 801b8ae:	464b      	mov	r3, r9
 801b8b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b8b4:	e6dc      	b.n	801b670 <_printf_float+0x1ec>
 801b8b6:	f04f 0800 	mov.w	r8, #0
 801b8ba:	f104 0a1a 	add.w	sl, r4, #26
 801b8be:	e7f2      	b.n	801b8a6 <_printf_float+0x422>
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	4642      	mov	r2, r8
 801b8c4:	e7df      	b.n	801b886 <_printf_float+0x402>
 801b8c6:	2301      	movs	r3, #1
 801b8c8:	464a      	mov	r2, r9
 801b8ca:	4631      	mov	r1, r6
 801b8cc:	4628      	mov	r0, r5
 801b8ce:	47b8      	blx	r7
 801b8d0:	3001      	adds	r0, #1
 801b8d2:	f43f ae38 	beq.w	801b546 <_printf_float+0xc2>
 801b8d6:	f108 0801 	add.w	r8, r8, #1
 801b8da:	68e3      	ldr	r3, [r4, #12]
 801b8dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b8de:	1a5b      	subs	r3, r3, r1
 801b8e0:	4543      	cmp	r3, r8
 801b8e2:	dcf0      	bgt.n	801b8c6 <_printf_float+0x442>
 801b8e4:	e6fa      	b.n	801b6dc <_printf_float+0x258>
 801b8e6:	f04f 0800 	mov.w	r8, #0
 801b8ea:	f104 0919 	add.w	r9, r4, #25
 801b8ee:	e7f4      	b.n	801b8da <_printf_float+0x456>

0801b8f0 <_printf_common>:
 801b8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8f4:	4616      	mov	r6, r2
 801b8f6:	4699      	mov	r9, r3
 801b8f8:	688a      	ldr	r2, [r1, #8]
 801b8fa:	690b      	ldr	r3, [r1, #16]
 801b8fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b900:	4293      	cmp	r3, r2
 801b902:	bfb8      	it	lt
 801b904:	4613      	movlt	r3, r2
 801b906:	6033      	str	r3, [r6, #0]
 801b908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b90c:	4607      	mov	r7, r0
 801b90e:	460c      	mov	r4, r1
 801b910:	b10a      	cbz	r2, 801b916 <_printf_common+0x26>
 801b912:	3301      	adds	r3, #1
 801b914:	6033      	str	r3, [r6, #0]
 801b916:	6823      	ldr	r3, [r4, #0]
 801b918:	0699      	lsls	r1, r3, #26
 801b91a:	bf42      	ittt	mi
 801b91c:	6833      	ldrmi	r3, [r6, #0]
 801b91e:	3302      	addmi	r3, #2
 801b920:	6033      	strmi	r3, [r6, #0]
 801b922:	6825      	ldr	r5, [r4, #0]
 801b924:	f015 0506 	ands.w	r5, r5, #6
 801b928:	d106      	bne.n	801b938 <_printf_common+0x48>
 801b92a:	f104 0a19 	add.w	sl, r4, #25
 801b92e:	68e3      	ldr	r3, [r4, #12]
 801b930:	6832      	ldr	r2, [r6, #0]
 801b932:	1a9b      	subs	r3, r3, r2
 801b934:	42ab      	cmp	r3, r5
 801b936:	dc26      	bgt.n	801b986 <_printf_common+0x96>
 801b938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b93c:	1e13      	subs	r3, r2, #0
 801b93e:	6822      	ldr	r2, [r4, #0]
 801b940:	bf18      	it	ne
 801b942:	2301      	movne	r3, #1
 801b944:	0692      	lsls	r2, r2, #26
 801b946:	d42b      	bmi.n	801b9a0 <_printf_common+0xb0>
 801b948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b94c:	4649      	mov	r1, r9
 801b94e:	4638      	mov	r0, r7
 801b950:	47c0      	blx	r8
 801b952:	3001      	adds	r0, #1
 801b954:	d01e      	beq.n	801b994 <_printf_common+0xa4>
 801b956:	6823      	ldr	r3, [r4, #0]
 801b958:	68e5      	ldr	r5, [r4, #12]
 801b95a:	6832      	ldr	r2, [r6, #0]
 801b95c:	f003 0306 	and.w	r3, r3, #6
 801b960:	2b04      	cmp	r3, #4
 801b962:	bf08      	it	eq
 801b964:	1aad      	subeq	r5, r5, r2
 801b966:	68a3      	ldr	r3, [r4, #8]
 801b968:	6922      	ldr	r2, [r4, #16]
 801b96a:	bf0c      	ite	eq
 801b96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b970:	2500      	movne	r5, #0
 801b972:	4293      	cmp	r3, r2
 801b974:	bfc4      	itt	gt
 801b976:	1a9b      	subgt	r3, r3, r2
 801b978:	18ed      	addgt	r5, r5, r3
 801b97a:	2600      	movs	r6, #0
 801b97c:	341a      	adds	r4, #26
 801b97e:	42b5      	cmp	r5, r6
 801b980:	d11a      	bne.n	801b9b8 <_printf_common+0xc8>
 801b982:	2000      	movs	r0, #0
 801b984:	e008      	b.n	801b998 <_printf_common+0xa8>
 801b986:	2301      	movs	r3, #1
 801b988:	4652      	mov	r2, sl
 801b98a:	4649      	mov	r1, r9
 801b98c:	4638      	mov	r0, r7
 801b98e:	47c0      	blx	r8
 801b990:	3001      	adds	r0, #1
 801b992:	d103      	bne.n	801b99c <_printf_common+0xac>
 801b994:	f04f 30ff 	mov.w	r0, #4294967295
 801b998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b99c:	3501      	adds	r5, #1
 801b99e:	e7c6      	b.n	801b92e <_printf_common+0x3e>
 801b9a0:	18e1      	adds	r1, r4, r3
 801b9a2:	1c5a      	adds	r2, r3, #1
 801b9a4:	2030      	movs	r0, #48	; 0x30
 801b9a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b9aa:	4422      	add	r2, r4
 801b9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b9b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b9b4:	3302      	adds	r3, #2
 801b9b6:	e7c7      	b.n	801b948 <_printf_common+0x58>
 801b9b8:	2301      	movs	r3, #1
 801b9ba:	4622      	mov	r2, r4
 801b9bc:	4649      	mov	r1, r9
 801b9be:	4638      	mov	r0, r7
 801b9c0:	47c0      	blx	r8
 801b9c2:	3001      	adds	r0, #1
 801b9c4:	d0e6      	beq.n	801b994 <_printf_common+0xa4>
 801b9c6:	3601      	adds	r6, #1
 801b9c8:	e7d9      	b.n	801b97e <_printf_common+0x8e>
	...

0801b9cc <_printf_i>:
 801b9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b9d0:	7e0f      	ldrb	r7, [r1, #24]
 801b9d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b9d4:	2f78      	cmp	r7, #120	; 0x78
 801b9d6:	4691      	mov	r9, r2
 801b9d8:	4680      	mov	r8, r0
 801b9da:	460c      	mov	r4, r1
 801b9dc:	469a      	mov	sl, r3
 801b9de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b9e2:	d807      	bhi.n	801b9f4 <_printf_i+0x28>
 801b9e4:	2f62      	cmp	r7, #98	; 0x62
 801b9e6:	d80a      	bhi.n	801b9fe <_printf_i+0x32>
 801b9e8:	2f00      	cmp	r7, #0
 801b9ea:	f000 80d8 	beq.w	801bb9e <_printf_i+0x1d2>
 801b9ee:	2f58      	cmp	r7, #88	; 0x58
 801b9f0:	f000 80a3 	beq.w	801bb3a <_printf_i+0x16e>
 801b9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b9f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b9fc:	e03a      	b.n	801ba74 <_printf_i+0xa8>
 801b9fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba02:	2b15      	cmp	r3, #21
 801ba04:	d8f6      	bhi.n	801b9f4 <_printf_i+0x28>
 801ba06:	a101      	add	r1, pc, #4	; (adr r1, 801ba0c <_printf_i+0x40>)
 801ba08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ba0c:	0801ba65 	.word	0x0801ba65
 801ba10:	0801ba79 	.word	0x0801ba79
 801ba14:	0801b9f5 	.word	0x0801b9f5
 801ba18:	0801b9f5 	.word	0x0801b9f5
 801ba1c:	0801b9f5 	.word	0x0801b9f5
 801ba20:	0801b9f5 	.word	0x0801b9f5
 801ba24:	0801ba79 	.word	0x0801ba79
 801ba28:	0801b9f5 	.word	0x0801b9f5
 801ba2c:	0801b9f5 	.word	0x0801b9f5
 801ba30:	0801b9f5 	.word	0x0801b9f5
 801ba34:	0801b9f5 	.word	0x0801b9f5
 801ba38:	0801bb85 	.word	0x0801bb85
 801ba3c:	0801baa9 	.word	0x0801baa9
 801ba40:	0801bb67 	.word	0x0801bb67
 801ba44:	0801b9f5 	.word	0x0801b9f5
 801ba48:	0801b9f5 	.word	0x0801b9f5
 801ba4c:	0801bba7 	.word	0x0801bba7
 801ba50:	0801b9f5 	.word	0x0801b9f5
 801ba54:	0801baa9 	.word	0x0801baa9
 801ba58:	0801b9f5 	.word	0x0801b9f5
 801ba5c:	0801b9f5 	.word	0x0801b9f5
 801ba60:	0801bb6f 	.word	0x0801bb6f
 801ba64:	682b      	ldr	r3, [r5, #0]
 801ba66:	1d1a      	adds	r2, r3, #4
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	602a      	str	r2, [r5, #0]
 801ba6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ba74:	2301      	movs	r3, #1
 801ba76:	e0a3      	b.n	801bbc0 <_printf_i+0x1f4>
 801ba78:	6820      	ldr	r0, [r4, #0]
 801ba7a:	6829      	ldr	r1, [r5, #0]
 801ba7c:	0606      	lsls	r6, r0, #24
 801ba7e:	f101 0304 	add.w	r3, r1, #4
 801ba82:	d50a      	bpl.n	801ba9a <_printf_i+0xce>
 801ba84:	680e      	ldr	r6, [r1, #0]
 801ba86:	602b      	str	r3, [r5, #0]
 801ba88:	2e00      	cmp	r6, #0
 801ba8a:	da03      	bge.n	801ba94 <_printf_i+0xc8>
 801ba8c:	232d      	movs	r3, #45	; 0x2d
 801ba8e:	4276      	negs	r6, r6
 801ba90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba94:	485e      	ldr	r0, [pc, #376]	; (801bc10 <_printf_i+0x244>)
 801ba96:	230a      	movs	r3, #10
 801ba98:	e019      	b.n	801bace <_printf_i+0x102>
 801ba9a:	680e      	ldr	r6, [r1, #0]
 801ba9c:	602b      	str	r3, [r5, #0]
 801ba9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801baa2:	bf18      	it	ne
 801baa4:	b236      	sxthne	r6, r6
 801baa6:	e7ef      	b.n	801ba88 <_printf_i+0xbc>
 801baa8:	682b      	ldr	r3, [r5, #0]
 801baaa:	6820      	ldr	r0, [r4, #0]
 801baac:	1d19      	adds	r1, r3, #4
 801baae:	6029      	str	r1, [r5, #0]
 801bab0:	0601      	lsls	r1, r0, #24
 801bab2:	d501      	bpl.n	801bab8 <_printf_i+0xec>
 801bab4:	681e      	ldr	r6, [r3, #0]
 801bab6:	e002      	b.n	801babe <_printf_i+0xf2>
 801bab8:	0646      	lsls	r6, r0, #25
 801baba:	d5fb      	bpl.n	801bab4 <_printf_i+0xe8>
 801babc:	881e      	ldrh	r6, [r3, #0]
 801babe:	4854      	ldr	r0, [pc, #336]	; (801bc10 <_printf_i+0x244>)
 801bac0:	2f6f      	cmp	r7, #111	; 0x6f
 801bac2:	bf0c      	ite	eq
 801bac4:	2308      	moveq	r3, #8
 801bac6:	230a      	movne	r3, #10
 801bac8:	2100      	movs	r1, #0
 801baca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bace:	6865      	ldr	r5, [r4, #4]
 801bad0:	60a5      	str	r5, [r4, #8]
 801bad2:	2d00      	cmp	r5, #0
 801bad4:	bfa2      	ittt	ge
 801bad6:	6821      	ldrge	r1, [r4, #0]
 801bad8:	f021 0104 	bicge.w	r1, r1, #4
 801badc:	6021      	strge	r1, [r4, #0]
 801bade:	b90e      	cbnz	r6, 801bae4 <_printf_i+0x118>
 801bae0:	2d00      	cmp	r5, #0
 801bae2:	d04d      	beq.n	801bb80 <_printf_i+0x1b4>
 801bae4:	4615      	mov	r5, r2
 801bae6:	fbb6 f1f3 	udiv	r1, r6, r3
 801baea:	fb03 6711 	mls	r7, r3, r1, r6
 801baee:	5dc7      	ldrb	r7, [r0, r7]
 801baf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801baf4:	4637      	mov	r7, r6
 801baf6:	42bb      	cmp	r3, r7
 801baf8:	460e      	mov	r6, r1
 801bafa:	d9f4      	bls.n	801bae6 <_printf_i+0x11a>
 801bafc:	2b08      	cmp	r3, #8
 801bafe:	d10b      	bne.n	801bb18 <_printf_i+0x14c>
 801bb00:	6823      	ldr	r3, [r4, #0]
 801bb02:	07de      	lsls	r6, r3, #31
 801bb04:	d508      	bpl.n	801bb18 <_printf_i+0x14c>
 801bb06:	6923      	ldr	r3, [r4, #16]
 801bb08:	6861      	ldr	r1, [r4, #4]
 801bb0a:	4299      	cmp	r1, r3
 801bb0c:	bfde      	ittt	le
 801bb0e:	2330      	movle	r3, #48	; 0x30
 801bb10:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bb14:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bb18:	1b52      	subs	r2, r2, r5
 801bb1a:	6122      	str	r2, [r4, #16]
 801bb1c:	f8cd a000 	str.w	sl, [sp]
 801bb20:	464b      	mov	r3, r9
 801bb22:	aa03      	add	r2, sp, #12
 801bb24:	4621      	mov	r1, r4
 801bb26:	4640      	mov	r0, r8
 801bb28:	f7ff fee2 	bl	801b8f0 <_printf_common>
 801bb2c:	3001      	adds	r0, #1
 801bb2e:	d14c      	bne.n	801bbca <_printf_i+0x1fe>
 801bb30:	f04f 30ff 	mov.w	r0, #4294967295
 801bb34:	b004      	add	sp, #16
 801bb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb3a:	4835      	ldr	r0, [pc, #212]	; (801bc10 <_printf_i+0x244>)
 801bb3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bb40:	6829      	ldr	r1, [r5, #0]
 801bb42:	6823      	ldr	r3, [r4, #0]
 801bb44:	f851 6b04 	ldr.w	r6, [r1], #4
 801bb48:	6029      	str	r1, [r5, #0]
 801bb4a:	061d      	lsls	r5, r3, #24
 801bb4c:	d514      	bpl.n	801bb78 <_printf_i+0x1ac>
 801bb4e:	07df      	lsls	r7, r3, #31
 801bb50:	bf44      	itt	mi
 801bb52:	f043 0320 	orrmi.w	r3, r3, #32
 801bb56:	6023      	strmi	r3, [r4, #0]
 801bb58:	b91e      	cbnz	r6, 801bb62 <_printf_i+0x196>
 801bb5a:	6823      	ldr	r3, [r4, #0]
 801bb5c:	f023 0320 	bic.w	r3, r3, #32
 801bb60:	6023      	str	r3, [r4, #0]
 801bb62:	2310      	movs	r3, #16
 801bb64:	e7b0      	b.n	801bac8 <_printf_i+0xfc>
 801bb66:	6823      	ldr	r3, [r4, #0]
 801bb68:	f043 0320 	orr.w	r3, r3, #32
 801bb6c:	6023      	str	r3, [r4, #0]
 801bb6e:	2378      	movs	r3, #120	; 0x78
 801bb70:	4828      	ldr	r0, [pc, #160]	; (801bc14 <_printf_i+0x248>)
 801bb72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bb76:	e7e3      	b.n	801bb40 <_printf_i+0x174>
 801bb78:	0659      	lsls	r1, r3, #25
 801bb7a:	bf48      	it	mi
 801bb7c:	b2b6      	uxthmi	r6, r6
 801bb7e:	e7e6      	b.n	801bb4e <_printf_i+0x182>
 801bb80:	4615      	mov	r5, r2
 801bb82:	e7bb      	b.n	801bafc <_printf_i+0x130>
 801bb84:	682b      	ldr	r3, [r5, #0]
 801bb86:	6826      	ldr	r6, [r4, #0]
 801bb88:	6961      	ldr	r1, [r4, #20]
 801bb8a:	1d18      	adds	r0, r3, #4
 801bb8c:	6028      	str	r0, [r5, #0]
 801bb8e:	0635      	lsls	r5, r6, #24
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	d501      	bpl.n	801bb98 <_printf_i+0x1cc>
 801bb94:	6019      	str	r1, [r3, #0]
 801bb96:	e002      	b.n	801bb9e <_printf_i+0x1d2>
 801bb98:	0670      	lsls	r0, r6, #25
 801bb9a:	d5fb      	bpl.n	801bb94 <_printf_i+0x1c8>
 801bb9c:	8019      	strh	r1, [r3, #0]
 801bb9e:	2300      	movs	r3, #0
 801bba0:	6123      	str	r3, [r4, #16]
 801bba2:	4615      	mov	r5, r2
 801bba4:	e7ba      	b.n	801bb1c <_printf_i+0x150>
 801bba6:	682b      	ldr	r3, [r5, #0]
 801bba8:	1d1a      	adds	r2, r3, #4
 801bbaa:	602a      	str	r2, [r5, #0]
 801bbac:	681d      	ldr	r5, [r3, #0]
 801bbae:	6862      	ldr	r2, [r4, #4]
 801bbb0:	2100      	movs	r1, #0
 801bbb2:	4628      	mov	r0, r5
 801bbb4:	f7e4 fb2c 	bl	8000210 <memchr>
 801bbb8:	b108      	cbz	r0, 801bbbe <_printf_i+0x1f2>
 801bbba:	1b40      	subs	r0, r0, r5
 801bbbc:	6060      	str	r0, [r4, #4]
 801bbbe:	6863      	ldr	r3, [r4, #4]
 801bbc0:	6123      	str	r3, [r4, #16]
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bbc8:	e7a8      	b.n	801bb1c <_printf_i+0x150>
 801bbca:	6923      	ldr	r3, [r4, #16]
 801bbcc:	462a      	mov	r2, r5
 801bbce:	4649      	mov	r1, r9
 801bbd0:	4640      	mov	r0, r8
 801bbd2:	47d0      	blx	sl
 801bbd4:	3001      	adds	r0, #1
 801bbd6:	d0ab      	beq.n	801bb30 <_printf_i+0x164>
 801bbd8:	6823      	ldr	r3, [r4, #0]
 801bbda:	079b      	lsls	r3, r3, #30
 801bbdc:	d413      	bmi.n	801bc06 <_printf_i+0x23a>
 801bbde:	68e0      	ldr	r0, [r4, #12]
 801bbe0:	9b03      	ldr	r3, [sp, #12]
 801bbe2:	4298      	cmp	r0, r3
 801bbe4:	bfb8      	it	lt
 801bbe6:	4618      	movlt	r0, r3
 801bbe8:	e7a4      	b.n	801bb34 <_printf_i+0x168>
 801bbea:	2301      	movs	r3, #1
 801bbec:	4632      	mov	r2, r6
 801bbee:	4649      	mov	r1, r9
 801bbf0:	4640      	mov	r0, r8
 801bbf2:	47d0      	blx	sl
 801bbf4:	3001      	adds	r0, #1
 801bbf6:	d09b      	beq.n	801bb30 <_printf_i+0x164>
 801bbf8:	3501      	adds	r5, #1
 801bbfa:	68e3      	ldr	r3, [r4, #12]
 801bbfc:	9903      	ldr	r1, [sp, #12]
 801bbfe:	1a5b      	subs	r3, r3, r1
 801bc00:	42ab      	cmp	r3, r5
 801bc02:	dcf2      	bgt.n	801bbea <_printf_i+0x21e>
 801bc04:	e7eb      	b.n	801bbde <_printf_i+0x212>
 801bc06:	2500      	movs	r5, #0
 801bc08:	f104 0619 	add.w	r6, r4, #25
 801bc0c:	e7f5      	b.n	801bbfa <_printf_i+0x22e>
 801bc0e:	bf00      	nop
 801bc10:	08021b2e 	.word	0x08021b2e
 801bc14:	08021b3f 	.word	0x08021b3f

0801bc18 <_scanf_float>:
 801bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc1c:	b087      	sub	sp, #28
 801bc1e:	4617      	mov	r7, r2
 801bc20:	9303      	str	r3, [sp, #12]
 801bc22:	688b      	ldr	r3, [r1, #8]
 801bc24:	1e5a      	subs	r2, r3, #1
 801bc26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bc2a:	bf83      	ittte	hi
 801bc2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bc30:	195b      	addhi	r3, r3, r5
 801bc32:	9302      	strhi	r3, [sp, #8]
 801bc34:	2300      	movls	r3, #0
 801bc36:	bf86      	itte	hi
 801bc38:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bc3c:	608b      	strhi	r3, [r1, #8]
 801bc3e:	9302      	strls	r3, [sp, #8]
 801bc40:	680b      	ldr	r3, [r1, #0]
 801bc42:	468b      	mov	fp, r1
 801bc44:	2500      	movs	r5, #0
 801bc46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bc4a:	f84b 3b1c 	str.w	r3, [fp], #28
 801bc4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bc52:	4680      	mov	r8, r0
 801bc54:	460c      	mov	r4, r1
 801bc56:	465e      	mov	r6, fp
 801bc58:	46aa      	mov	sl, r5
 801bc5a:	46a9      	mov	r9, r5
 801bc5c:	9501      	str	r5, [sp, #4]
 801bc5e:	68a2      	ldr	r2, [r4, #8]
 801bc60:	b152      	cbz	r2, 801bc78 <_scanf_float+0x60>
 801bc62:	683b      	ldr	r3, [r7, #0]
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	2b4e      	cmp	r3, #78	; 0x4e
 801bc68:	d864      	bhi.n	801bd34 <_scanf_float+0x11c>
 801bc6a:	2b40      	cmp	r3, #64	; 0x40
 801bc6c:	d83c      	bhi.n	801bce8 <_scanf_float+0xd0>
 801bc6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801bc72:	b2c8      	uxtb	r0, r1
 801bc74:	280e      	cmp	r0, #14
 801bc76:	d93a      	bls.n	801bcee <_scanf_float+0xd6>
 801bc78:	f1b9 0f00 	cmp.w	r9, #0
 801bc7c:	d003      	beq.n	801bc86 <_scanf_float+0x6e>
 801bc7e:	6823      	ldr	r3, [r4, #0]
 801bc80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bc84:	6023      	str	r3, [r4, #0]
 801bc86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc8a:	f1ba 0f01 	cmp.w	sl, #1
 801bc8e:	f200 8113 	bhi.w	801beb8 <_scanf_float+0x2a0>
 801bc92:	455e      	cmp	r6, fp
 801bc94:	f200 8105 	bhi.w	801bea2 <_scanf_float+0x28a>
 801bc98:	2501      	movs	r5, #1
 801bc9a:	4628      	mov	r0, r5
 801bc9c:	b007      	add	sp, #28
 801bc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bca2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801bca6:	2a0d      	cmp	r2, #13
 801bca8:	d8e6      	bhi.n	801bc78 <_scanf_float+0x60>
 801bcaa:	a101      	add	r1, pc, #4	; (adr r1, 801bcb0 <_scanf_float+0x98>)
 801bcac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bcb0:	0801bdef 	.word	0x0801bdef
 801bcb4:	0801bc79 	.word	0x0801bc79
 801bcb8:	0801bc79 	.word	0x0801bc79
 801bcbc:	0801bc79 	.word	0x0801bc79
 801bcc0:	0801be4f 	.word	0x0801be4f
 801bcc4:	0801be27 	.word	0x0801be27
 801bcc8:	0801bc79 	.word	0x0801bc79
 801bccc:	0801bc79 	.word	0x0801bc79
 801bcd0:	0801bdfd 	.word	0x0801bdfd
 801bcd4:	0801bc79 	.word	0x0801bc79
 801bcd8:	0801bc79 	.word	0x0801bc79
 801bcdc:	0801bc79 	.word	0x0801bc79
 801bce0:	0801bc79 	.word	0x0801bc79
 801bce4:	0801bdb5 	.word	0x0801bdb5
 801bce8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bcec:	e7db      	b.n	801bca6 <_scanf_float+0x8e>
 801bcee:	290e      	cmp	r1, #14
 801bcf0:	d8c2      	bhi.n	801bc78 <_scanf_float+0x60>
 801bcf2:	a001      	add	r0, pc, #4	; (adr r0, 801bcf8 <_scanf_float+0xe0>)
 801bcf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bcf8:	0801bda7 	.word	0x0801bda7
 801bcfc:	0801bc79 	.word	0x0801bc79
 801bd00:	0801bda7 	.word	0x0801bda7
 801bd04:	0801be3b 	.word	0x0801be3b
 801bd08:	0801bc79 	.word	0x0801bc79
 801bd0c:	0801bd55 	.word	0x0801bd55
 801bd10:	0801bd91 	.word	0x0801bd91
 801bd14:	0801bd91 	.word	0x0801bd91
 801bd18:	0801bd91 	.word	0x0801bd91
 801bd1c:	0801bd91 	.word	0x0801bd91
 801bd20:	0801bd91 	.word	0x0801bd91
 801bd24:	0801bd91 	.word	0x0801bd91
 801bd28:	0801bd91 	.word	0x0801bd91
 801bd2c:	0801bd91 	.word	0x0801bd91
 801bd30:	0801bd91 	.word	0x0801bd91
 801bd34:	2b6e      	cmp	r3, #110	; 0x6e
 801bd36:	d809      	bhi.n	801bd4c <_scanf_float+0x134>
 801bd38:	2b60      	cmp	r3, #96	; 0x60
 801bd3a:	d8b2      	bhi.n	801bca2 <_scanf_float+0x8a>
 801bd3c:	2b54      	cmp	r3, #84	; 0x54
 801bd3e:	d077      	beq.n	801be30 <_scanf_float+0x218>
 801bd40:	2b59      	cmp	r3, #89	; 0x59
 801bd42:	d199      	bne.n	801bc78 <_scanf_float+0x60>
 801bd44:	2d07      	cmp	r5, #7
 801bd46:	d197      	bne.n	801bc78 <_scanf_float+0x60>
 801bd48:	2508      	movs	r5, #8
 801bd4a:	e029      	b.n	801bda0 <_scanf_float+0x188>
 801bd4c:	2b74      	cmp	r3, #116	; 0x74
 801bd4e:	d06f      	beq.n	801be30 <_scanf_float+0x218>
 801bd50:	2b79      	cmp	r3, #121	; 0x79
 801bd52:	e7f6      	b.n	801bd42 <_scanf_float+0x12a>
 801bd54:	6821      	ldr	r1, [r4, #0]
 801bd56:	05c8      	lsls	r0, r1, #23
 801bd58:	d51a      	bpl.n	801bd90 <_scanf_float+0x178>
 801bd5a:	9b02      	ldr	r3, [sp, #8]
 801bd5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bd60:	6021      	str	r1, [r4, #0]
 801bd62:	f109 0901 	add.w	r9, r9, #1
 801bd66:	b11b      	cbz	r3, 801bd70 <_scanf_float+0x158>
 801bd68:	3b01      	subs	r3, #1
 801bd6a:	3201      	adds	r2, #1
 801bd6c:	9302      	str	r3, [sp, #8]
 801bd6e:	60a2      	str	r2, [r4, #8]
 801bd70:	68a3      	ldr	r3, [r4, #8]
 801bd72:	3b01      	subs	r3, #1
 801bd74:	60a3      	str	r3, [r4, #8]
 801bd76:	6923      	ldr	r3, [r4, #16]
 801bd78:	3301      	adds	r3, #1
 801bd7a:	6123      	str	r3, [r4, #16]
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	3b01      	subs	r3, #1
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	607b      	str	r3, [r7, #4]
 801bd84:	f340 8084 	ble.w	801be90 <_scanf_float+0x278>
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	603b      	str	r3, [r7, #0]
 801bd8e:	e766      	b.n	801bc5e <_scanf_float+0x46>
 801bd90:	eb1a 0f05 	cmn.w	sl, r5
 801bd94:	f47f af70 	bne.w	801bc78 <_scanf_float+0x60>
 801bd98:	6822      	ldr	r2, [r4, #0]
 801bd9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bd9e:	6022      	str	r2, [r4, #0]
 801bda0:	f806 3b01 	strb.w	r3, [r6], #1
 801bda4:	e7e4      	b.n	801bd70 <_scanf_float+0x158>
 801bda6:	6822      	ldr	r2, [r4, #0]
 801bda8:	0610      	lsls	r0, r2, #24
 801bdaa:	f57f af65 	bpl.w	801bc78 <_scanf_float+0x60>
 801bdae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bdb2:	e7f4      	b.n	801bd9e <_scanf_float+0x186>
 801bdb4:	f1ba 0f00 	cmp.w	sl, #0
 801bdb8:	d10e      	bne.n	801bdd8 <_scanf_float+0x1c0>
 801bdba:	f1b9 0f00 	cmp.w	r9, #0
 801bdbe:	d10e      	bne.n	801bdde <_scanf_float+0x1c6>
 801bdc0:	6822      	ldr	r2, [r4, #0]
 801bdc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bdc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bdca:	d108      	bne.n	801bdde <_scanf_float+0x1c6>
 801bdcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bdd0:	6022      	str	r2, [r4, #0]
 801bdd2:	f04f 0a01 	mov.w	sl, #1
 801bdd6:	e7e3      	b.n	801bda0 <_scanf_float+0x188>
 801bdd8:	f1ba 0f02 	cmp.w	sl, #2
 801bddc:	d055      	beq.n	801be8a <_scanf_float+0x272>
 801bdde:	2d01      	cmp	r5, #1
 801bde0:	d002      	beq.n	801bde8 <_scanf_float+0x1d0>
 801bde2:	2d04      	cmp	r5, #4
 801bde4:	f47f af48 	bne.w	801bc78 <_scanf_float+0x60>
 801bde8:	3501      	adds	r5, #1
 801bdea:	b2ed      	uxtb	r5, r5
 801bdec:	e7d8      	b.n	801bda0 <_scanf_float+0x188>
 801bdee:	f1ba 0f01 	cmp.w	sl, #1
 801bdf2:	f47f af41 	bne.w	801bc78 <_scanf_float+0x60>
 801bdf6:	f04f 0a02 	mov.w	sl, #2
 801bdfa:	e7d1      	b.n	801bda0 <_scanf_float+0x188>
 801bdfc:	b97d      	cbnz	r5, 801be1e <_scanf_float+0x206>
 801bdfe:	f1b9 0f00 	cmp.w	r9, #0
 801be02:	f47f af3c 	bne.w	801bc7e <_scanf_float+0x66>
 801be06:	6822      	ldr	r2, [r4, #0]
 801be08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801be0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801be10:	f47f af39 	bne.w	801bc86 <_scanf_float+0x6e>
 801be14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801be18:	6022      	str	r2, [r4, #0]
 801be1a:	2501      	movs	r5, #1
 801be1c:	e7c0      	b.n	801bda0 <_scanf_float+0x188>
 801be1e:	2d03      	cmp	r5, #3
 801be20:	d0e2      	beq.n	801bde8 <_scanf_float+0x1d0>
 801be22:	2d05      	cmp	r5, #5
 801be24:	e7de      	b.n	801bde4 <_scanf_float+0x1cc>
 801be26:	2d02      	cmp	r5, #2
 801be28:	f47f af26 	bne.w	801bc78 <_scanf_float+0x60>
 801be2c:	2503      	movs	r5, #3
 801be2e:	e7b7      	b.n	801bda0 <_scanf_float+0x188>
 801be30:	2d06      	cmp	r5, #6
 801be32:	f47f af21 	bne.w	801bc78 <_scanf_float+0x60>
 801be36:	2507      	movs	r5, #7
 801be38:	e7b2      	b.n	801bda0 <_scanf_float+0x188>
 801be3a:	6822      	ldr	r2, [r4, #0]
 801be3c:	0591      	lsls	r1, r2, #22
 801be3e:	f57f af1b 	bpl.w	801bc78 <_scanf_float+0x60>
 801be42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801be46:	6022      	str	r2, [r4, #0]
 801be48:	f8cd 9004 	str.w	r9, [sp, #4]
 801be4c:	e7a8      	b.n	801bda0 <_scanf_float+0x188>
 801be4e:	6822      	ldr	r2, [r4, #0]
 801be50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801be54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801be58:	d006      	beq.n	801be68 <_scanf_float+0x250>
 801be5a:	0550      	lsls	r0, r2, #21
 801be5c:	f57f af0c 	bpl.w	801bc78 <_scanf_float+0x60>
 801be60:	f1b9 0f00 	cmp.w	r9, #0
 801be64:	f43f af0f 	beq.w	801bc86 <_scanf_float+0x6e>
 801be68:	0591      	lsls	r1, r2, #22
 801be6a:	bf58      	it	pl
 801be6c:	9901      	ldrpl	r1, [sp, #4]
 801be6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801be72:	bf58      	it	pl
 801be74:	eba9 0101 	subpl.w	r1, r9, r1
 801be78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801be7c:	bf58      	it	pl
 801be7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801be82:	6022      	str	r2, [r4, #0]
 801be84:	f04f 0900 	mov.w	r9, #0
 801be88:	e78a      	b.n	801bda0 <_scanf_float+0x188>
 801be8a:	f04f 0a03 	mov.w	sl, #3
 801be8e:	e787      	b.n	801bda0 <_scanf_float+0x188>
 801be90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801be94:	4639      	mov	r1, r7
 801be96:	4640      	mov	r0, r8
 801be98:	4798      	blx	r3
 801be9a:	2800      	cmp	r0, #0
 801be9c:	f43f aedf 	beq.w	801bc5e <_scanf_float+0x46>
 801bea0:	e6ea      	b.n	801bc78 <_scanf_float+0x60>
 801bea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801beaa:	463a      	mov	r2, r7
 801beac:	4640      	mov	r0, r8
 801beae:	4798      	blx	r3
 801beb0:	6923      	ldr	r3, [r4, #16]
 801beb2:	3b01      	subs	r3, #1
 801beb4:	6123      	str	r3, [r4, #16]
 801beb6:	e6ec      	b.n	801bc92 <_scanf_float+0x7a>
 801beb8:	1e6b      	subs	r3, r5, #1
 801beba:	2b06      	cmp	r3, #6
 801bebc:	d825      	bhi.n	801bf0a <_scanf_float+0x2f2>
 801bebe:	2d02      	cmp	r5, #2
 801bec0:	d836      	bhi.n	801bf30 <_scanf_float+0x318>
 801bec2:	455e      	cmp	r6, fp
 801bec4:	f67f aee8 	bls.w	801bc98 <_scanf_float+0x80>
 801bec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801becc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bed0:	463a      	mov	r2, r7
 801bed2:	4640      	mov	r0, r8
 801bed4:	4798      	blx	r3
 801bed6:	6923      	ldr	r3, [r4, #16]
 801bed8:	3b01      	subs	r3, #1
 801beda:	6123      	str	r3, [r4, #16]
 801bedc:	e7f1      	b.n	801bec2 <_scanf_float+0x2aa>
 801bede:	9802      	ldr	r0, [sp, #8]
 801bee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bee4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bee8:	9002      	str	r0, [sp, #8]
 801beea:	463a      	mov	r2, r7
 801beec:	4640      	mov	r0, r8
 801beee:	4798      	blx	r3
 801bef0:	6923      	ldr	r3, [r4, #16]
 801bef2:	3b01      	subs	r3, #1
 801bef4:	6123      	str	r3, [r4, #16]
 801bef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801befa:	fa5f fa8a 	uxtb.w	sl, sl
 801befe:	f1ba 0f02 	cmp.w	sl, #2
 801bf02:	d1ec      	bne.n	801bede <_scanf_float+0x2c6>
 801bf04:	3d03      	subs	r5, #3
 801bf06:	b2ed      	uxtb	r5, r5
 801bf08:	1b76      	subs	r6, r6, r5
 801bf0a:	6823      	ldr	r3, [r4, #0]
 801bf0c:	05da      	lsls	r2, r3, #23
 801bf0e:	d52f      	bpl.n	801bf70 <_scanf_float+0x358>
 801bf10:	055b      	lsls	r3, r3, #21
 801bf12:	d510      	bpl.n	801bf36 <_scanf_float+0x31e>
 801bf14:	455e      	cmp	r6, fp
 801bf16:	f67f aebf 	bls.w	801bc98 <_scanf_float+0x80>
 801bf1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bf22:	463a      	mov	r2, r7
 801bf24:	4640      	mov	r0, r8
 801bf26:	4798      	blx	r3
 801bf28:	6923      	ldr	r3, [r4, #16]
 801bf2a:	3b01      	subs	r3, #1
 801bf2c:	6123      	str	r3, [r4, #16]
 801bf2e:	e7f1      	b.n	801bf14 <_scanf_float+0x2fc>
 801bf30:	46aa      	mov	sl, r5
 801bf32:	9602      	str	r6, [sp, #8]
 801bf34:	e7df      	b.n	801bef6 <_scanf_float+0x2de>
 801bf36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bf3a:	6923      	ldr	r3, [r4, #16]
 801bf3c:	2965      	cmp	r1, #101	; 0x65
 801bf3e:	f103 33ff 	add.w	r3, r3, #4294967295
 801bf42:	f106 35ff 	add.w	r5, r6, #4294967295
 801bf46:	6123      	str	r3, [r4, #16]
 801bf48:	d00c      	beq.n	801bf64 <_scanf_float+0x34c>
 801bf4a:	2945      	cmp	r1, #69	; 0x45
 801bf4c:	d00a      	beq.n	801bf64 <_scanf_float+0x34c>
 801bf4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf52:	463a      	mov	r2, r7
 801bf54:	4640      	mov	r0, r8
 801bf56:	4798      	blx	r3
 801bf58:	6923      	ldr	r3, [r4, #16]
 801bf5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bf5e:	3b01      	subs	r3, #1
 801bf60:	1eb5      	subs	r5, r6, #2
 801bf62:	6123      	str	r3, [r4, #16]
 801bf64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf68:	463a      	mov	r2, r7
 801bf6a:	4640      	mov	r0, r8
 801bf6c:	4798      	blx	r3
 801bf6e:	462e      	mov	r6, r5
 801bf70:	6825      	ldr	r5, [r4, #0]
 801bf72:	f015 0510 	ands.w	r5, r5, #16
 801bf76:	d159      	bne.n	801c02c <_scanf_float+0x414>
 801bf78:	7035      	strb	r5, [r6, #0]
 801bf7a:	6823      	ldr	r3, [r4, #0]
 801bf7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bf80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf84:	d11b      	bne.n	801bfbe <_scanf_float+0x3a6>
 801bf86:	9b01      	ldr	r3, [sp, #4]
 801bf88:	454b      	cmp	r3, r9
 801bf8a:	eba3 0209 	sub.w	r2, r3, r9
 801bf8e:	d123      	bne.n	801bfd8 <_scanf_float+0x3c0>
 801bf90:	2200      	movs	r2, #0
 801bf92:	4659      	mov	r1, fp
 801bf94:	4640      	mov	r0, r8
 801bf96:	f000 ff61 	bl	801ce5c <_strtod_r>
 801bf9a:	6822      	ldr	r2, [r4, #0]
 801bf9c:	9b03      	ldr	r3, [sp, #12]
 801bf9e:	f012 0f02 	tst.w	r2, #2
 801bfa2:	ec57 6b10 	vmov	r6, r7, d0
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	d021      	beq.n	801bfee <_scanf_float+0x3d6>
 801bfaa:	9903      	ldr	r1, [sp, #12]
 801bfac:	1d1a      	adds	r2, r3, #4
 801bfae:	600a      	str	r2, [r1, #0]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	e9c3 6700 	strd	r6, r7, [r3]
 801bfb6:	68e3      	ldr	r3, [r4, #12]
 801bfb8:	3301      	adds	r3, #1
 801bfba:	60e3      	str	r3, [r4, #12]
 801bfbc:	e66d      	b.n	801bc9a <_scanf_float+0x82>
 801bfbe:	9b04      	ldr	r3, [sp, #16]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d0e5      	beq.n	801bf90 <_scanf_float+0x378>
 801bfc4:	9905      	ldr	r1, [sp, #20]
 801bfc6:	230a      	movs	r3, #10
 801bfc8:	462a      	mov	r2, r5
 801bfca:	3101      	adds	r1, #1
 801bfcc:	4640      	mov	r0, r8
 801bfce:	f001 f829 	bl	801d024 <_strtol_r>
 801bfd2:	9b04      	ldr	r3, [sp, #16]
 801bfd4:	9e05      	ldr	r6, [sp, #20]
 801bfd6:	1ac2      	subs	r2, r0, r3
 801bfd8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bfdc:	429e      	cmp	r6, r3
 801bfde:	bf28      	it	cs
 801bfe0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bfe4:	4912      	ldr	r1, [pc, #72]	; (801c030 <_scanf_float+0x418>)
 801bfe6:	4630      	mov	r0, r6
 801bfe8:	f000 f8ca 	bl	801c180 <siprintf>
 801bfec:	e7d0      	b.n	801bf90 <_scanf_float+0x378>
 801bfee:	9903      	ldr	r1, [sp, #12]
 801bff0:	f012 0f04 	tst.w	r2, #4
 801bff4:	f103 0204 	add.w	r2, r3, #4
 801bff8:	600a      	str	r2, [r1, #0]
 801bffa:	d1d9      	bne.n	801bfb0 <_scanf_float+0x398>
 801bffc:	f8d3 8000 	ldr.w	r8, [r3]
 801c000:	ee10 2a10 	vmov	r2, s0
 801c004:	ee10 0a10 	vmov	r0, s0
 801c008:	463b      	mov	r3, r7
 801c00a:	4639      	mov	r1, r7
 801c00c:	f7e4 fda6 	bl	8000b5c <__aeabi_dcmpun>
 801c010:	b128      	cbz	r0, 801c01e <_scanf_float+0x406>
 801c012:	4808      	ldr	r0, [pc, #32]	; (801c034 <_scanf_float+0x41c>)
 801c014:	f000 f8ae 	bl	801c174 <nanf>
 801c018:	ed88 0a00 	vstr	s0, [r8]
 801c01c:	e7cb      	b.n	801bfb6 <_scanf_float+0x39e>
 801c01e:	4630      	mov	r0, r6
 801c020:	4639      	mov	r1, r7
 801c022:	f7e4 fdf9 	bl	8000c18 <__aeabi_d2f>
 801c026:	f8c8 0000 	str.w	r0, [r8]
 801c02a:	e7c4      	b.n	801bfb6 <_scanf_float+0x39e>
 801c02c:	2500      	movs	r5, #0
 801c02e:	e634      	b.n	801bc9a <_scanf_float+0x82>
 801c030:	08021b50 	.word	0x08021b50
 801c034:	08021c57 	.word	0x08021c57

0801c038 <iprintf>:
 801c038:	b40f      	push	{r0, r1, r2, r3}
 801c03a:	4b0a      	ldr	r3, [pc, #40]	; (801c064 <iprintf+0x2c>)
 801c03c:	b513      	push	{r0, r1, r4, lr}
 801c03e:	681c      	ldr	r4, [r3, #0]
 801c040:	b124      	cbz	r4, 801c04c <iprintf+0x14>
 801c042:	69a3      	ldr	r3, [r4, #24]
 801c044:	b913      	cbnz	r3, 801c04c <iprintf+0x14>
 801c046:	4620      	mov	r0, r4
 801c048:	f002 f8a6 	bl	801e198 <__sinit>
 801c04c:	ab05      	add	r3, sp, #20
 801c04e:	9a04      	ldr	r2, [sp, #16]
 801c050:	68a1      	ldr	r1, [r4, #8]
 801c052:	9301      	str	r3, [sp, #4]
 801c054:	4620      	mov	r0, r4
 801c056:	f003 fba1 	bl	801f79c <_vfiprintf_r>
 801c05a:	b002      	add	sp, #8
 801c05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c060:	b004      	add	sp, #16
 801c062:	4770      	bx	lr
 801c064:	20000140 	.word	0x20000140

0801c068 <_puts_r>:
 801c068:	b570      	push	{r4, r5, r6, lr}
 801c06a:	460e      	mov	r6, r1
 801c06c:	4605      	mov	r5, r0
 801c06e:	b118      	cbz	r0, 801c078 <_puts_r+0x10>
 801c070:	6983      	ldr	r3, [r0, #24]
 801c072:	b90b      	cbnz	r3, 801c078 <_puts_r+0x10>
 801c074:	f002 f890 	bl	801e198 <__sinit>
 801c078:	69ab      	ldr	r3, [r5, #24]
 801c07a:	68ac      	ldr	r4, [r5, #8]
 801c07c:	b913      	cbnz	r3, 801c084 <_puts_r+0x1c>
 801c07e:	4628      	mov	r0, r5
 801c080:	f002 f88a 	bl	801e198 <__sinit>
 801c084:	4b2c      	ldr	r3, [pc, #176]	; (801c138 <_puts_r+0xd0>)
 801c086:	429c      	cmp	r4, r3
 801c088:	d120      	bne.n	801c0cc <_puts_r+0x64>
 801c08a:	686c      	ldr	r4, [r5, #4]
 801c08c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c08e:	07db      	lsls	r3, r3, #31
 801c090:	d405      	bmi.n	801c09e <_puts_r+0x36>
 801c092:	89a3      	ldrh	r3, [r4, #12]
 801c094:	0598      	lsls	r0, r3, #22
 801c096:	d402      	bmi.n	801c09e <_puts_r+0x36>
 801c098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c09a:	f7ff f838 	bl	801b10e <__retarget_lock_acquire_recursive>
 801c09e:	89a3      	ldrh	r3, [r4, #12]
 801c0a0:	0719      	lsls	r1, r3, #28
 801c0a2:	d51d      	bpl.n	801c0e0 <_puts_r+0x78>
 801c0a4:	6923      	ldr	r3, [r4, #16]
 801c0a6:	b1db      	cbz	r3, 801c0e0 <_puts_r+0x78>
 801c0a8:	3e01      	subs	r6, #1
 801c0aa:	68a3      	ldr	r3, [r4, #8]
 801c0ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c0b0:	3b01      	subs	r3, #1
 801c0b2:	60a3      	str	r3, [r4, #8]
 801c0b4:	bb39      	cbnz	r1, 801c106 <_puts_r+0x9e>
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	da38      	bge.n	801c12c <_puts_r+0xc4>
 801c0ba:	4622      	mov	r2, r4
 801c0bc:	210a      	movs	r1, #10
 801c0be:	4628      	mov	r0, r5
 801c0c0:	f000 fff6 	bl	801d0b0 <__swbuf_r>
 801c0c4:	3001      	adds	r0, #1
 801c0c6:	d011      	beq.n	801c0ec <_puts_r+0x84>
 801c0c8:	250a      	movs	r5, #10
 801c0ca:	e011      	b.n	801c0f0 <_puts_r+0x88>
 801c0cc:	4b1b      	ldr	r3, [pc, #108]	; (801c13c <_puts_r+0xd4>)
 801c0ce:	429c      	cmp	r4, r3
 801c0d0:	d101      	bne.n	801c0d6 <_puts_r+0x6e>
 801c0d2:	68ac      	ldr	r4, [r5, #8]
 801c0d4:	e7da      	b.n	801c08c <_puts_r+0x24>
 801c0d6:	4b1a      	ldr	r3, [pc, #104]	; (801c140 <_puts_r+0xd8>)
 801c0d8:	429c      	cmp	r4, r3
 801c0da:	bf08      	it	eq
 801c0dc:	68ec      	ldreq	r4, [r5, #12]
 801c0de:	e7d5      	b.n	801c08c <_puts_r+0x24>
 801c0e0:	4621      	mov	r1, r4
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	f001 f836 	bl	801d154 <__swsetup_r>
 801c0e8:	2800      	cmp	r0, #0
 801c0ea:	d0dd      	beq.n	801c0a8 <_puts_r+0x40>
 801c0ec:	f04f 35ff 	mov.w	r5, #4294967295
 801c0f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c0f2:	07da      	lsls	r2, r3, #31
 801c0f4:	d405      	bmi.n	801c102 <_puts_r+0x9a>
 801c0f6:	89a3      	ldrh	r3, [r4, #12]
 801c0f8:	059b      	lsls	r3, r3, #22
 801c0fa:	d402      	bmi.n	801c102 <_puts_r+0x9a>
 801c0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0fe:	f7ff f807 	bl	801b110 <__retarget_lock_release_recursive>
 801c102:	4628      	mov	r0, r5
 801c104:	bd70      	pop	{r4, r5, r6, pc}
 801c106:	2b00      	cmp	r3, #0
 801c108:	da04      	bge.n	801c114 <_puts_r+0xac>
 801c10a:	69a2      	ldr	r2, [r4, #24]
 801c10c:	429a      	cmp	r2, r3
 801c10e:	dc06      	bgt.n	801c11e <_puts_r+0xb6>
 801c110:	290a      	cmp	r1, #10
 801c112:	d004      	beq.n	801c11e <_puts_r+0xb6>
 801c114:	6823      	ldr	r3, [r4, #0]
 801c116:	1c5a      	adds	r2, r3, #1
 801c118:	6022      	str	r2, [r4, #0]
 801c11a:	7019      	strb	r1, [r3, #0]
 801c11c:	e7c5      	b.n	801c0aa <_puts_r+0x42>
 801c11e:	4622      	mov	r2, r4
 801c120:	4628      	mov	r0, r5
 801c122:	f000 ffc5 	bl	801d0b0 <__swbuf_r>
 801c126:	3001      	adds	r0, #1
 801c128:	d1bf      	bne.n	801c0aa <_puts_r+0x42>
 801c12a:	e7df      	b.n	801c0ec <_puts_r+0x84>
 801c12c:	6823      	ldr	r3, [r4, #0]
 801c12e:	250a      	movs	r5, #10
 801c130:	1c5a      	adds	r2, r3, #1
 801c132:	6022      	str	r2, [r4, #0]
 801c134:	701d      	strb	r5, [r3, #0]
 801c136:	e7db      	b.n	801c0f0 <_puts_r+0x88>
 801c138:	08021df4 	.word	0x08021df4
 801c13c:	08021e14 	.word	0x08021e14
 801c140:	08021dd4 	.word	0x08021dd4

0801c144 <puts>:
 801c144:	4b02      	ldr	r3, [pc, #8]	; (801c150 <puts+0xc>)
 801c146:	4601      	mov	r1, r0
 801c148:	6818      	ldr	r0, [r3, #0]
 801c14a:	f7ff bf8d 	b.w	801c068 <_puts_r>
 801c14e:	bf00      	nop
 801c150:	20000140 	.word	0x20000140

0801c154 <_sbrk_r>:
 801c154:	b538      	push	{r3, r4, r5, lr}
 801c156:	4d06      	ldr	r5, [pc, #24]	; (801c170 <_sbrk_r+0x1c>)
 801c158:	2300      	movs	r3, #0
 801c15a:	4604      	mov	r4, r0
 801c15c:	4608      	mov	r0, r1
 801c15e:	602b      	str	r3, [r5, #0]
 801c160:	f7e7 fa0a 	bl	8003578 <_sbrk>
 801c164:	1c43      	adds	r3, r0, #1
 801c166:	d102      	bne.n	801c16e <_sbrk_r+0x1a>
 801c168:	682b      	ldr	r3, [r5, #0]
 801c16a:	b103      	cbz	r3, 801c16e <_sbrk_r+0x1a>
 801c16c:	6023      	str	r3, [r4, #0]
 801c16e:	bd38      	pop	{r3, r4, r5, pc}
 801c170:	20003618 	.word	0x20003618

0801c174 <nanf>:
 801c174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c17c <nanf+0x8>
 801c178:	4770      	bx	lr
 801c17a:	bf00      	nop
 801c17c:	7fc00000 	.word	0x7fc00000

0801c180 <siprintf>:
 801c180:	b40e      	push	{r1, r2, r3}
 801c182:	b500      	push	{lr}
 801c184:	b09c      	sub	sp, #112	; 0x70
 801c186:	ab1d      	add	r3, sp, #116	; 0x74
 801c188:	9002      	str	r0, [sp, #8]
 801c18a:	9006      	str	r0, [sp, #24]
 801c18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c190:	4809      	ldr	r0, [pc, #36]	; (801c1b8 <siprintf+0x38>)
 801c192:	9107      	str	r1, [sp, #28]
 801c194:	9104      	str	r1, [sp, #16]
 801c196:	4909      	ldr	r1, [pc, #36]	; (801c1bc <siprintf+0x3c>)
 801c198:	f853 2b04 	ldr.w	r2, [r3], #4
 801c19c:	9105      	str	r1, [sp, #20]
 801c19e:	6800      	ldr	r0, [r0, #0]
 801c1a0:	9301      	str	r3, [sp, #4]
 801c1a2:	a902      	add	r1, sp, #8
 801c1a4:	f003 f9d0 	bl	801f548 <_svfiprintf_r>
 801c1a8:	9b02      	ldr	r3, [sp, #8]
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	701a      	strb	r2, [r3, #0]
 801c1ae:	b01c      	add	sp, #112	; 0x70
 801c1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c1b4:	b003      	add	sp, #12
 801c1b6:	4770      	bx	lr
 801c1b8:	20000140 	.word	0x20000140
 801c1bc:	ffff0208 	.word	0xffff0208

0801c1c0 <strchr>:
 801c1c0:	b2c9      	uxtb	r1, r1
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c1c8:	b11a      	cbz	r2, 801c1d2 <strchr+0x12>
 801c1ca:	428a      	cmp	r2, r1
 801c1cc:	d1f9      	bne.n	801c1c2 <strchr+0x2>
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	4770      	bx	lr
 801c1d2:	2900      	cmp	r1, #0
 801c1d4:	bf18      	it	ne
 801c1d6:	2300      	movne	r3, #0
 801c1d8:	e7f9      	b.n	801c1ce <strchr+0xe>

0801c1da <strcpy>:
 801c1da:	4603      	mov	r3, r0
 801c1dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c1e0:	f803 2b01 	strb.w	r2, [r3], #1
 801c1e4:	2a00      	cmp	r2, #0
 801c1e6:	d1f9      	bne.n	801c1dc <strcpy+0x2>
 801c1e8:	4770      	bx	lr

0801c1ea <strstr>:
 801c1ea:	780a      	ldrb	r2, [r1, #0]
 801c1ec:	b570      	push	{r4, r5, r6, lr}
 801c1ee:	b96a      	cbnz	r2, 801c20c <strstr+0x22>
 801c1f0:	bd70      	pop	{r4, r5, r6, pc}
 801c1f2:	429a      	cmp	r2, r3
 801c1f4:	d109      	bne.n	801c20a <strstr+0x20>
 801c1f6:	460c      	mov	r4, r1
 801c1f8:	4605      	mov	r5, r0
 801c1fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d0f6      	beq.n	801c1f0 <strstr+0x6>
 801c202:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c206:	429e      	cmp	r6, r3
 801c208:	d0f7      	beq.n	801c1fa <strstr+0x10>
 801c20a:	3001      	adds	r0, #1
 801c20c:	7803      	ldrb	r3, [r0, #0]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d1ef      	bne.n	801c1f2 <strstr+0x8>
 801c212:	4618      	mov	r0, r3
 801c214:	e7ec      	b.n	801c1f0 <strstr+0x6>

0801c216 <sulp>:
 801c216:	b570      	push	{r4, r5, r6, lr}
 801c218:	4604      	mov	r4, r0
 801c21a:	460d      	mov	r5, r1
 801c21c:	ec45 4b10 	vmov	d0, r4, r5
 801c220:	4616      	mov	r6, r2
 801c222:	f002 ffd1 	bl	801f1c8 <__ulp>
 801c226:	ec51 0b10 	vmov	r0, r1, d0
 801c22a:	b17e      	cbz	r6, 801c24c <sulp+0x36>
 801c22c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c230:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c234:	2b00      	cmp	r3, #0
 801c236:	dd09      	ble.n	801c24c <sulp+0x36>
 801c238:	051b      	lsls	r3, r3, #20
 801c23a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c23e:	2400      	movs	r4, #0
 801c240:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c244:	4622      	mov	r2, r4
 801c246:	462b      	mov	r3, r5
 801c248:	f7e4 f9ee 	bl	8000628 <__aeabi_dmul>
 801c24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c250 <_strtod_l>:
 801c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c254:	ed2d 8b02 	vpush	{d8}
 801c258:	b09d      	sub	sp, #116	; 0x74
 801c25a:	461f      	mov	r7, r3
 801c25c:	2300      	movs	r3, #0
 801c25e:	9318      	str	r3, [sp, #96]	; 0x60
 801c260:	4ba2      	ldr	r3, [pc, #648]	; (801c4ec <_strtod_l+0x29c>)
 801c262:	9213      	str	r2, [sp, #76]	; 0x4c
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	9305      	str	r3, [sp, #20]
 801c268:	4604      	mov	r4, r0
 801c26a:	4618      	mov	r0, r3
 801c26c:	4688      	mov	r8, r1
 801c26e:	f7e3 ffc1 	bl	80001f4 <strlen>
 801c272:	f04f 0a00 	mov.w	sl, #0
 801c276:	4605      	mov	r5, r0
 801c278:	f04f 0b00 	mov.w	fp, #0
 801c27c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c282:	781a      	ldrb	r2, [r3, #0]
 801c284:	2a2b      	cmp	r2, #43	; 0x2b
 801c286:	d04e      	beq.n	801c326 <_strtod_l+0xd6>
 801c288:	d83b      	bhi.n	801c302 <_strtod_l+0xb2>
 801c28a:	2a0d      	cmp	r2, #13
 801c28c:	d834      	bhi.n	801c2f8 <_strtod_l+0xa8>
 801c28e:	2a08      	cmp	r2, #8
 801c290:	d834      	bhi.n	801c2fc <_strtod_l+0xac>
 801c292:	2a00      	cmp	r2, #0
 801c294:	d03e      	beq.n	801c314 <_strtod_l+0xc4>
 801c296:	2300      	movs	r3, #0
 801c298:	930a      	str	r3, [sp, #40]	; 0x28
 801c29a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c29c:	7833      	ldrb	r3, [r6, #0]
 801c29e:	2b30      	cmp	r3, #48	; 0x30
 801c2a0:	f040 80b0 	bne.w	801c404 <_strtod_l+0x1b4>
 801c2a4:	7873      	ldrb	r3, [r6, #1]
 801c2a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c2aa:	2b58      	cmp	r3, #88	; 0x58
 801c2ac:	d168      	bne.n	801c380 <_strtod_l+0x130>
 801c2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2b0:	9301      	str	r3, [sp, #4]
 801c2b2:	ab18      	add	r3, sp, #96	; 0x60
 801c2b4:	9702      	str	r7, [sp, #8]
 801c2b6:	9300      	str	r3, [sp, #0]
 801c2b8:	4a8d      	ldr	r2, [pc, #564]	; (801c4f0 <_strtod_l+0x2a0>)
 801c2ba:	ab19      	add	r3, sp, #100	; 0x64
 801c2bc:	a917      	add	r1, sp, #92	; 0x5c
 801c2be:	4620      	mov	r0, r4
 801c2c0:	f002 f880 	bl	801e3c4 <__gethex>
 801c2c4:	f010 0707 	ands.w	r7, r0, #7
 801c2c8:	4605      	mov	r5, r0
 801c2ca:	d005      	beq.n	801c2d8 <_strtod_l+0x88>
 801c2cc:	2f06      	cmp	r7, #6
 801c2ce:	d12c      	bne.n	801c32a <_strtod_l+0xda>
 801c2d0:	3601      	adds	r6, #1
 801c2d2:	2300      	movs	r3, #0
 801c2d4:	9617      	str	r6, [sp, #92]	; 0x5c
 801c2d6:	930a      	str	r3, [sp, #40]	; 0x28
 801c2d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f040 8590 	bne.w	801ce00 <_strtod_l+0xbb0>
 801c2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2e2:	b1eb      	cbz	r3, 801c320 <_strtod_l+0xd0>
 801c2e4:	4652      	mov	r2, sl
 801c2e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c2ea:	ec43 2b10 	vmov	d0, r2, r3
 801c2ee:	b01d      	add	sp, #116	; 0x74
 801c2f0:	ecbd 8b02 	vpop	{d8}
 801c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f8:	2a20      	cmp	r2, #32
 801c2fa:	d1cc      	bne.n	801c296 <_strtod_l+0x46>
 801c2fc:	3301      	adds	r3, #1
 801c2fe:	9317      	str	r3, [sp, #92]	; 0x5c
 801c300:	e7be      	b.n	801c280 <_strtod_l+0x30>
 801c302:	2a2d      	cmp	r2, #45	; 0x2d
 801c304:	d1c7      	bne.n	801c296 <_strtod_l+0x46>
 801c306:	2201      	movs	r2, #1
 801c308:	920a      	str	r2, [sp, #40]	; 0x28
 801c30a:	1c5a      	adds	r2, r3, #1
 801c30c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c30e:	785b      	ldrb	r3, [r3, #1]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d1c2      	bne.n	801c29a <_strtod_l+0x4a>
 801c314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c316:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	f040 856e 	bne.w	801cdfc <_strtod_l+0xbac>
 801c320:	4652      	mov	r2, sl
 801c322:	465b      	mov	r3, fp
 801c324:	e7e1      	b.n	801c2ea <_strtod_l+0x9a>
 801c326:	2200      	movs	r2, #0
 801c328:	e7ee      	b.n	801c308 <_strtod_l+0xb8>
 801c32a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c32c:	b13a      	cbz	r2, 801c33e <_strtod_l+0xee>
 801c32e:	2135      	movs	r1, #53	; 0x35
 801c330:	a81a      	add	r0, sp, #104	; 0x68
 801c332:	f003 f854 	bl	801f3de <__copybits>
 801c336:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c338:	4620      	mov	r0, r4
 801c33a:	f002 fc13 	bl	801eb64 <_Bfree>
 801c33e:	3f01      	subs	r7, #1
 801c340:	2f04      	cmp	r7, #4
 801c342:	d806      	bhi.n	801c352 <_strtod_l+0x102>
 801c344:	e8df f007 	tbb	[pc, r7]
 801c348:	1714030a 	.word	0x1714030a
 801c34c:	0a          	.byte	0x0a
 801c34d:	00          	.byte	0x00
 801c34e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c352:	0728      	lsls	r0, r5, #28
 801c354:	d5c0      	bpl.n	801c2d8 <_strtod_l+0x88>
 801c356:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c35a:	e7bd      	b.n	801c2d8 <_strtod_l+0x88>
 801c35c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c366:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c36a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c36e:	e7f0      	b.n	801c352 <_strtod_l+0x102>
 801c370:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c4f4 <_strtod_l+0x2a4>
 801c374:	e7ed      	b.n	801c352 <_strtod_l+0x102>
 801c376:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c37a:	f04f 3aff 	mov.w	sl, #4294967295
 801c37e:	e7e8      	b.n	801c352 <_strtod_l+0x102>
 801c380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c382:	1c5a      	adds	r2, r3, #1
 801c384:	9217      	str	r2, [sp, #92]	; 0x5c
 801c386:	785b      	ldrb	r3, [r3, #1]
 801c388:	2b30      	cmp	r3, #48	; 0x30
 801c38a:	d0f9      	beq.n	801c380 <_strtod_l+0x130>
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d0a3      	beq.n	801c2d8 <_strtod_l+0x88>
 801c390:	2301      	movs	r3, #1
 801c392:	f04f 0900 	mov.w	r9, #0
 801c396:	9304      	str	r3, [sp, #16]
 801c398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c39a:	9308      	str	r3, [sp, #32]
 801c39c:	f8cd 901c 	str.w	r9, [sp, #28]
 801c3a0:	464f      	mov	r7, r9
 801c3a2:	220a      	movs	r2, #10
 801c3a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c3a6:	7806      	ldrb	r6, [r0, #0]
 801c3a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c3ac:	b2d9      	uxtb	r1, r3
 801c3ae:	2909      	cmp	r1, #9
 801c3b0:	d92a      	bls.n	801c408 <_strtod_l+0x1b8>
 801c3b2:	9905      	ldr	r1, [sp, #20]
 801c3b4:	462a      	mov	r2, r5
 801c3b6:	f003 fb6e 	bl	801fa96 <strncmp>
 801c3ba:	b398      	cbz	r0, 801c424 <_strtod_l+0x1d4>
 801c3bc:	2000      	movs	r0, #0
 801c3be:	4632      	mov	r2, r6
 801c3c0:	463d      	mov	r5, r7
 801c3c2:	9005      	str	r0, [sp, #20]
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	2a65      	cmp	r2, #101	; 0x65
 801c3c8:	d001      	beq.n	801c3ce <_strtod_l+0x17e>
 801c3ca:	2a45      	cmp	r2, #69	; 0x45
 801c3cc:	d118      	bne.n	801c400 <_strtod_l+0x1b0>
 801c3ce:	b91d      	cbnz	r5, 801c3d8 <_strtod_l+0x188>
 801c3d0:	9a04      	ldr	r2, [sp, #16]
 801c3d2:	4302      	orrs	r2, r0
 801c3d4:	d09e      	beq.n	801c314 <_strtod_l+0xc4>
 801c3d6:	2500      	movs	r5, #0
 801c3d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c3dc:	f108 0201 	add.w	r2, r8, #1
 801c3e0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c3e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c3e6:	2a2b      	cmp	r2, #43	; 0x2b
 801c3e8:	d075      	beq.n	801c4d6 <_strtod_l+0x286>
 801c3ea:	2a2d      	cmp	r2, #45	; 0x2d
 801c3ec:	d07b      	beq.n	801c4e6 <_strtod_l+0x296>
 801c3ee:	f04f 0c00 	mov.w	ip, #0
 801c3f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c3f6:	2909      	cmp	r1, #9
 801c3f8:	f240 8082 	bls.w	801c500 <_strtod_l+0x2b0>
 801c3fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c400:	2600      	movs	r6, #0
 801c402:	e09d      	b.n	801c540 <_strtod_l+0x2f0>
 801c404:	2300      	movs	r3, #0
 801c406:	e7c4      	b.n	801c392 <_strtod_l+0x142>
 801c408:	2f08      	cmp	r7, #8
 801c40a:	bfd8      	it	le
 801c40c:	9907      	ldrle	r1, [sp, #28]
 801c40e:	f100 0001 	add.w	r0, r0, #1
 801c412:	bfda      	itte	le
 801c414:	fb02 3301 	mlale	r3, r2, r1, r3
 801c418:	9307      	strle	r3, [sp, #28]
 801c41a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c41e:	3701      	adds	r7, #1
 801c420:	9017      	str	r0, [sp, #92]	; 0x5c
 801c422:	e7bf      	b.n	801c3a4 <_strtod_l+0x154>
 801c424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c426:	195a      	adds	r2, r3, r5
 801c428:	9217      	str	r2, [sp, #92]	; 0x5c
 801c42a:	5d5a      	ldrb	r2, [r3, r5]
 801c42c:	2f00      	cmp	r7, #0
 801c42e:	d037      	beq.n	801c4a0 <_strtod_l+0x250>
 801c430:	9005      	str	r0, [sp, #20]
 801c432:	463d      	mov	r5, r7
 801c434:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c438:	2b09      	cmp	r3, #9
 801c43a:	d912      	bls.n	801c462 <_strtod_l+0x212>
 801c43c:	2301      	movs	r3, #1
 801c43e:	e7c2      	b.n	801c3c6 <_strtod_l+0x176>
 801c440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c442:	1c5a      	adds	r2, r3, #1
 801c444:	9217      	str	r2, [sp, #92]	; 0x5c
 801c446:	785a      	ldrb	r2, [r3, #1]
 801c448:	3001      	adds	r0, #1
 801c44a:	2a30      	cmp	r2, #48	; 0x30
 801c44c:	d0f8      	beq.n	801c440 <_strtod_l+0x1f0>
 801c44e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c452:	2b08      	cmp	r3, #8
 801c454:	f200 84d9 	bhi.w	801ce0a <_strtod_l+0xbba>
 801c458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c45a:	9005      	str	r0, [sp, #20]
 801c45c:	2000      	movs	r0, #0
 801c45e:	9308      	str	r3, [sp, #32]
 801c460:	4605      	mov	r5, r0
 801c462:	3a30      	subs	r2, #48	; 0x30
 801c464:	f100 0301 	add.w	r3, r0, #1
 801c468:	d014      	beq.n	801c494 <_strtod_l+0x244>
 801c46a:	9905      	ldr	r1, [sp, #20]
 801c46c:	4419      	add	r1, r3
 801c46e:	9105      	str	r1, [sp, #20]
 801c470:	462b      	mov	r3, r5
 801c472:	eb00 0e05 	add.w	lr, r0, r5
 801c476:	210a      	movs	r1, #10
 801c478:	4573      	cmp	r3, lr
 801c47a:	d113      	bne.n	801c4a4 <_strtod_l+0x254>
 801c47c:	182b      	adds	r3, r5, r0
 801c47e:	2b08      	cmp	r3, #8
 801c480:	f105 0501 	add.w	r5, r5, #1
 801c484:	4405      	add	r5, r0
 801c486:	dc1c      	bgt.n	801c4c2 <_strtod_l+0x272>
 801c488:	9907      	ldr	r1, [sp, #28]
 801c48a:	230a      	movs	r3, #10
 801c48c:	fb03 2301 	mla	r3, r3, r1, r2
 801c490:	9307      	str	r3, [sp, #28]
 801c492:	2300      	movs	r3, #0
 801c494:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c496:	1c51      	adds	r1, r2, #1
 801c498:	9117      	str	r1, [sp, #92]	; 0x5c
 801c49a:	7852      	ldrb	r2, [r2, #1]
 801c49c:	4618      	mov	r0, r3
 801c49e:	e7c9      	b.n	801c434 <_strtod_l+0x1e4>
 801c4a0:	4638      	mov	r0, r7
 801c4a2:	e7d2      	b.n	801c44a <_strtod_l+0x1fa>
 801c4a4:	2b08      	cmp	r3, #8
 801c4a6:	dc04      	bgt.n	801c4b2 <_strtod_l+0x262>
 801c4a8:	9e07      	ldr	r6, [sp, #28]
 801c4aa:	434e      	muls	r6, r1
 801c4ac:	9607      	str	r6, [sp, #28]
 801c4ae:	3301      	adds	r3, #1
 801c4b0:	e7e2      	b.n	801c478 <_strtod_l+0x228>
 801c4b2:	f103 0c01 	add.w	ip, r3, #1
 801c4b6:	f1bc 0f10 	cmp.w	ip, #16
 801c4ba:	bfd8      	it	le
 801c4bc:	fb01 f909 	mulle.w	r9, r1, r9
 801c4c0:	e7f5      	b.n	801c4ae <_strtod_l+0x25e>
 801c4c2:	2d10      	cmp	r5, #16
 801c4c4:	bfdc      	itt	le
 801c4c6:	230a      	movle	r3, #10
 801c4c8:	fb03 2909 	mlale	r9, r3, r9, r2
 801c4cc:	e7e1      	b.n	801c492 <_strtod_l+0x242>
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	9305      	str	r3, [sp, #20]
 801c4d2:	2301      	movs	r3, #1
 801c4d4:	e77c      	b.n	801c3d0 <_strtod_l+0x180>
 801c4d6:	f04f 0c00 	mov.w	ip, #0
 801c4da:	f108 0202 	add.w	r2, r8, #2
 801c4de:	9217      	str	r2, [sp, #92]	; 0x5c
 801c4e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c4e4:	e785      	b.n	801c3f2 <_strtod_l+0x1a2>
 801c4e6:	f04f 0c01 	mov.w	ip, #1
 801c4ea:	e7f6      	b.n	801c4da <_strtod_l+0x28a>
 801c4ec:	08021e9c 	.word	0x08021e9c
 801c4f0:	08021b58 	.word	0x08021b58
 801c4f4:	7ff00000 	.word	0x7ff00000
 801c4f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c4fa:	1c51      	adds	r1, r2, #1
 801c4fc:	9117      	str	r1, [sp, #92]	; 0x5c
 801c4fe:	7852      	ldrb	r2, [r2, #1]
 801c500:	2a30      	cmp	r2, #48	; 0x30
 801c502:	d0f9      	beq.n	801c4f8 <_strtod_l+0x2a8>
 801c504:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c508:	2908      	cmp	r1, #8
 801c50a:	f63f af79 	bhi.w	801c400 <_strtod_l+0x1b0>
 801c50e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c514:	9206      	str	r2, [sp, #24]
 801c516:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c518:	1c51      	adds	r1, r2, #1
 801c51a:	9117      	str	r1, [sp, #92]	; 0x5c
 801c51c:	7852      	ldrb	r2, [r2, #1]
 801c51e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c522:	2e09      	cmp	r6, #9
 801c524:	d937      	bls.n	801c596 <_strtod_l+0x346>
 801c526:	9e06      	ldr	r6, [sp, #24]
 801c528:	1b89      	subs	r1, r1, r6
 801c52a:	2908      	cmp	r1, #8
 801c52c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c530:	dc02      	bgt.n	801c538 <_strtod_l+0x2e8>
 801c532:	4576      	cmp	r6, lr
 801c534:	bfa8      	it	ge
 801c536:	4676      	movge	r6, lr
 801c538:	f1bc 0f00 	cmp.w	ip, #0
 801c53c:	d000      	beq.n	801c540 <_strtod_l+0x2f0>
 801c53e:	4276      	negs	r6, r6
 801c540:	2d00      	cmp	r5, #0
 801c542:	d14d      	bne.n	801c5e0 <_strtod_l+0x390>
 801c544:	9904      	ldr	r1, [sp, #16]
 801c546:	4301      	orrs	r1, r0
 801c548:	f47f aec6 	bne.w	801c2d8 <_strtod_l+0x88>
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	f47f aee1 	bne.w	801c314 <_strtod_l+0xc4>
 801c552:	2a69      	cmp	r2, #105	; 0x69
 801c554:	d027      	beq.n	801c5a6 <_strtod_l+0x356>
 801c556:	dc24      	bgt.n	801c5a2 <_strtod_l+0x352>
 801c558:	2a49      	cmp	r2, #73	; 0x49
 801c55a:	d024      	beq.n	801c5a6 <_strtod_l+0x356>
 801c55c:	2a4e      	cmp	r2, #78	; 0x4e
 801c55e:	f47f aed9 	bne.w	801c314 <_strtod_l+0xc4>
 801c562:	499f      	ldr	r1, [pc, #636]	; (801c7e0 <_strtod_l+0x590>)
 801c564:	a817      	add	r0, sp, #92	; 0x5c
 801c566:	f002 f985 	bl	801e874 <__match>
 801c56a:	2800      	cmp	r0, #0
 801c56c:	f43f aed2 	beq.w	801c314 <_strtod_l+0xc4>
 801c570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c572:	781b      	ldrb	r3, [r3, #0]
 801c574:	2b28      	cmp	r3, #40	; 0x28
 801c576:	d12d      	bne.n	801c5d4 <_strtod_l+0x384>
 801c578:	499a      	ldr	r1, [pc, #616]	; (801c7e4 <_strtod_l+0x594>)
 801c57a:	aa1a      	add	r2, sp, #104	; 0x68
 801c57c:	a817      	add	r0, sp, #92	; 0x5c
 801c57e:	f002 f98d 	bl	801e89c <__hexnan>
 801c582:	2805      	cmp	r0, #5
 801c584:	d126      	bne.n	801c5d4 <_strtod_l+0x384>
 801c586:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c588:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c58c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c590:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c594:	e6a0      	b.n	801c2d8 <_strtod_l+0x88>
 801c596:	210a      	movs	r1, #10
 801c598:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c59c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c5a0:	e7b9      	b.n	801c516 <_strtod_l+0x2c6>
 801c5a2:	2a6e      	cmp	r2, #110	; 0x6e
 801c5a4:	e7db      	b.n	801c55e <_strtod_l+0x30e>
 801c5a6:	4990      	ldr	r1, [pc, #576]	; (801c7e8 <_strtod_l+0x598>)
 801c5a8:	a817      	add	r0, sp, #92	; 0x5c
 801c5aa:	f002 f963 	bl	801e874 <__match>
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	f43f aeb0 	beq.w	801c314 <_strtod_l+0xc4>
 801c5b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c5b6:	498d      	ldr	r1, [pc, #564]	; (801c7ec <_strtod_l+0x59c>)
 801c5b8:	3b01      	subs	r3, #1
 801c5ba:	a817      	add	r0, sp, #92	; 0x5c
 801c5bc:	9317      	str	r3, [sp, #92]	; 0x5c
 801c5be:	f002 f959 	bl	801e874 <__match>
 801c5c2:	b910      	cbnz	r0, 801c5ca <_strtod_l+0x37a>
 801c5c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c5c6:	3301      	adds	r3, #1
 801c5c8:	9317      	str	r3, [sp, #92]	; 0x5c
 801c5ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 801c7fc <_strtod_l+0x5ac>
 801c5ce:	f04f 0a00 	mov.w	sl, #0
 801c5d2:	e681      	b.n	801c2d8 <_strtod_l+0x88>
 801c5d4:	4886      	ldr	r0, [pc, #536]	; (801c7f0 <_strtod_l+0x5a0>)
 801c5d6:	f003 fa13 	bl	801fa00 <nan>
 801c5da:	ec5b ab10 	vmov	sl, fp, d0
 801c5de:	e67b      	b.n	801c2d8 <_strtod_l+0x88>
 801c5e0:	9b05      	ldr	r3, [sp, #20]
 801c5e2:	9807      	ldr	r0, [sp, #28]
 801c5e4:	1af3      	subs	r3, r6, r3
 801c5e6:	2f00      	cmp	r7, #0
 801c5e8:	bf08      	it	eq
 801c5ea:	462f      	moveq	r7, r5
 801c5ec:	2d10      	cmp	r5, #16
 801c5ee:	9306      	str	r3, [sp, #24]
 801c5f0:	46a8      	mov	r8, r5
 801c5f2:	bfa8      	it	ge
 801c5f4:	f04f 0810 	movge.w	r8, #16
 801c5f8:	f7e3 ff9c 	bl	8000534 <__aeabi_ui2d>
 801c5fc:	2d09      	cmp	r5, #9
 801c5fe:	4682      	mov	sl, r0
 801c600:	468b      	mov	fp, r1
 801c602:	dd13      	ble.n	801c62c <_strtod_l+0x3dc>
 801c604:	4b7b      	ldr	r3, [pc, #492]	; (801c7f4 <_strtod_l+0x5a4>)
 801c606:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c60a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c60e:	f7e4 f80b 	bl	8000628 <__aeabi_dmul>
 801c612:	4682      	mov	sl, r0
 801c614:	4648      	mov	r0, r9
 801c616:	468b      	mov	fp, r1
 801c618:	f7e3 ff8c 	bl	8000534 <__aeabi_ui2d>
 801c61c:	4602      	mov	r2, r0
 801c61e:	460b      	mov	r3, r1
 801c620:	4650      	mov	r0, sl
 801c622:	4659      	mov	r1, fp
 801c624:	f7e3 fe4a 	bl	80002bc <__adddf3>
 801c628:	4682      	mov	sl, r0
 801c62a:	468b      	mov	fp, r1
 801c62c:	2d0f      	cmp	r5, #15
 801c62e:	dc38      	bgt.n	801c6a2 <_strtod_l+0x452>
 801c630:	9b06      	ldr	r3, [sp, #24]
 801c632:	2b00      	cmp	r3, #0
 801c634:	f43f ae50 	beq.w	801c2d8 <_strtod_l+0x88>
 801c638:	dd24      	ble.n	801c684 <_strtod_l+0x434>
 801c63a:	2b16      	cmp	r3, #22
 801c63c:	dc0b      	bgt.n	801c656 <_strtod_l+0x406>
 801c63e:	496d      	ldr	r1, [pc, #436]	; (801c7f4 <_strtod_l+0x5a4>)
 801c640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c644:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c648:	4652      	mov	r2, sl
 801c64a:	465b      	mov	r3, fp
 801c64c:	f7e3 ffec 	bl	8000628 <__aeabi_dmul>
 801c650:	4682      	mov	sl, r0
 801c652:	468b      	mov	fp, r1
 801c654:	e640      	b.n	801c2d8 <_strtod_l+0x88>
 801c656:	9a06      	ldr	r2, [sp, #24]
 801c658:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c65c:	4293      	cmp	r3, r2
 801c65e:	db20      	blt.n	801c6a2 <_strtod_l+0x452>
 801c660:	4c64      	ldr	r4, [pc, #400]	; (801c7f4 <_strtod_l+0x5a4>)
 801c662:	f1c5 050f 	rsb	r5, r5, #15
 801c666:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c66a:	4652      	mov	r2, sl
 801c66c:	465b      	mov	r3, fp
 801c66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c672:	f7e3 ffd9 	bl	8000628 <__aeabi_dmul>
 801c676:	9b06      	ldr	r3, [sp, #24]
 801c678:	1b5d      	subs	r5, r3, r5
 801c67a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c67e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c682:	e7e3      	b.n	801c64c <_strtod_l+0x3fc>
 801c684:	9b06      	ldr	r3, [sp, #24]
 801c686:	3316      	adds	r3, #22
 801c688:	db0b      	blt.n	801c6a2 <_strtod_l+0x452>
 801c68a:	9b05      	ldr	r3, [sp, #20]
 801c68c:	1b9e      	subs	r6, r3, r6
 801c68e:	4b59      	ldr	r3, [pc, #356]	; (801c7f4 <_strtod_l+0x5a4>)
 801c690:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c694:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c698:	4650      	mov	r0, sl
 801c69a:	4659      	mov	r1, fp
 801c69c:	f7e4 f8ee 	bl	800087c <__aeabi_ddiv>
 801c6a0:	e7d6      	b.n	801c650 <_strtod_l+0x400>
 801c6a2:	9b06      	ldr	r3, [sp, #24]
 801c6a4:	eba5 0808 	sub.w	r8, r5, r8
 801c6a8:	4498      	add	r8, r3
 801c6aa:	f1b8 0f00 	cmp.w	r8, #0
 801c6ae:	dd74      	ble.n	801c79a <_strtod_l+0x54a>
 801c6b0:	f018 030f 	ands.w	r3, r8, #15
 801c6b4:	d00a      	beq.n	801c6cc <_strtod_l+0x47c>
 801c6b6:	494f      	ldr	r1, [pc, #316]	; (801c7f4 <_strtod_l+0x5a4>)
 801c6b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c6bc:	4652      	mov	r2, sl
 801c6be:	465b      	mov	r3, fp
 801c6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6c4:	f7e3 ffb0 	bl	8000628 <__aeabi_dmul>
 801c6c8:	4682      	mov	sl, r0
 801c6ca:	468b      	mov	fp, r1
 801c6cc:	f038 080f 	bics.w	r8, r8, #15
 801c6d0:	d04f      	beq.n	801c772 <_strtod_l+0x522>
 801c6d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c6d6:	dd22      	ble.n	801c71e <_strtod_l+0x4ce>
 801c6d8:	2500      	movs	r5, #0
 801c6da:	462e      	mov	r6, r5
 801c6dc:	9507      	str	r5, [sp, #28]
 801c6de:	9505      	str	r5, [sp, #20]
 801c6e0:	2322      	movs	r3, #34	; 0x22
 801c6e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c7fc <_strtod_l+0x5ac>
 801c6e6:	6023      	str	r3, [r4, #0]
 801c6e8:	f04f 0a00 	mov.w	sl, #0
 801c6ec:	9b07      	ldr	r3, [sp, #28]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	f43f adf2 	beq.w	801c2d8 <_strtod_l+0x88>
 801c6f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c6f6:	4620      	mov	r0, r4
 801c6f8:	f002 fa34 	bl	801eb64 <_Bfree>
 801c6fc:	9905      	ldr	r1, [sp, #20]
 801c6fe:	4620      	mov	r0, r4
 801c700:	f002 fa30 	bl	801eb64 <_Bfree>
 801c704:	4631      	mov	r1, r6
 801c706:	4620      	mov	r0, r4
 801c708:	f002 fa2c 	bl	801eb64 <_Bfree>
 801c70c:	9907      	ldr	r1, [sp, #28]
 801c70e:	4620      	mov	r0, r4
 801c710:	f002 fa28 	bl	801eb64 <_Bfree>
 801c714:	4629      	mov	r1, r5
 801c716:	4620      	mov	r0, r4
 801c718:	f002 fa24 	bl	801eb64 <_Bfree>
 801c71c:	e5dc      	b.n	801c2d8 <_strtod_l+0x88>
 801c71e:	4b36      	ldr	r3, [pc, #216]	; (801c7f8 <_strtod_l+0x5a8>)
 801c720:	9304      	str	r3, [sp, #16]
 801c722:	2300      	movs	r3, #0
 801c724:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c728:	4650      	mov	r0, sl
 801c72a:	4659      	mov	r1, fp
 801c72c:	4699      	mov	r9, r3
 801c72e:	f1b8 0f01 	cmp.w	r8, #1
 801c732:	dc21      	bgt.n	801c778 <_strtod_l+0x528>
 801c734:	b10b      	cbz	r3, 801c73a <_strtod_l+0x4ea>
 801c736:	4682      	mov	sl, r0
 801c738:	468b      	mov	fp, r1
 801c73a:	4b2f      	ldr	r3, [pc, #188]	; (801c7f8 <_strtod_l+0x5a8>)
 801c73c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c740:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c744:	4652      	mov	r2, sl
 801c746:	465b      	mov	r3, fp
 801c748:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c74c:	f7e3 ff6c 	bl	8000628 <__aeabi_dmul>
 801c750:	4b2a      	ldr	r3, [pc, #168]	; (801c7fc <_strtod_l+0x5ac>)
 801c752:	460a      	mov	r2, r1
 801c754:	400b      	ands	r3, r1
 801c756:	492a      	ldr	r1, [pc, #168]	; (801c800 <_strtod_l+0x5b0>)
 801c758:	428b      	cmp	r3, r1
 801c75a:	4682      	mov	sl, r0
 801c75c:	d8bc      	bhi.n	801c6d8 <_strtod_l+0x488>
 801c75e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c762:	428b      	cmp	r3, r1
 801c764:	bf86      	itte	hi
 801c766:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801c804 <_strtod_l+0x5b4>
 801c76a:	f04f 3aff 	movhi.w	sl, #4294967295
 801c76e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c772:	2300      	movs	r3, #0
 801c774:	9304      	str	r3, [sp, #16]
 801c776:	e084      	b.n	801c882 <_strtod_l+0x632>
 801c778:	f018 0f01 	tst.w	r8, #1
 801c77c:	d005      	beq.n	801c78a <_strtod_l+0x53a>
 801c77e:	9b04      	ldr	r3, [sp, #16]
 801c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c784:	f7e3 ff50 	bl	8000628 <__aeabi_dmul>
 801c788:	2301      	movs	r3, #1
 801c78a:	9a04      	ldr	r2, [sp, #16]
 801c78c:	3208      	adds	r2, #8
 801c78e:	f109 0901 	add.w	r9, r9, #1
 801c792:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c796:	9204      	str	r2, [sp, #16]
 801c798:	e7c9      	b.n	801c72e <_strtod_l+0x4de>
 801c79a:	d0ea      	beq.n	801c772 <_strtod_l+0x522>
 801c79c:	f1c8 0800 	rsb	r8, r8, #0
 801c7a0:	f018 020f 	ands.w	r2, r8, #15
 801c7a4:	d00a      	beq.n	801c7bc <_strtod_l+0x56c>
 801c7a6:	4b13      	ldr	r3, [pc, #76]	; (801c7f4 <_strtod_l+0x5a4>)
 801c7a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7ac:	4650      	mov	r0, sl
 801c7ae:	4659      	mov	r1, fp
 801c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b4:	f7e4 f862 	bl	800087c <__aeabi_ddiv>
 801c7b8:	4682      	mov	sl, r0
 801c7ba:	468b      	mov	fp, r1
 801c7bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c7c0:	d0d7      	beq.n	801c772 <_strtod_l+0x522>
 801c7c2:	f1b8 0f1f 	cmp.w	r8, #31
 801c7c6:	dd1f      	ble.n	801c808 <_strtod_l+0x5b8>
 801c7c8:	2500      	movs	r5, #0
 801c7ca:	462e      	mov	r6, r5
 801c7cc:	9507      	str	r5, [sp, #28]
 801c7ce:	9505      	str	r5, [sp, #20]
 801c7d0:	2322      	movs	r3, #34	; 0x22
 801c7d2:	f04f 0a00 	mov.w	sl, #0
 801c7d6:	f04f 0b00 	mov.w	fp, #0
 801c7da:	6023      	str	r3, [r4, #0]
 801c7dc:	e786      	b.n	801c6ec <_strtod_l+0x49c>
 801c7de:	bf00      	nop
 801c7e0:	08021b29 	.word	0x08021b29
 801c7e4:	08021b6c 	.word	0x08021b6c
 801c7e8:	08021b21 	.word	0x08021b21
 801c7ec:	08021d5c 	.word	0x08021d5c
 801c7f0:	08021c57 	.word	0x08021c57
 801c7f4:	08021f38 	.word	0x08021f38
 801c7f8:	08021f10 	.word	0x08021f10
 801c7fc:	7ff00000 	.word	0x7ff00000
 801c800:	7ca00000 	.word	0x7ca00000
 801c804:	7fefffff 	.word	0x7fefffff
 801c808:	f018 0310 	ands.w	r3, r8, #16
 801c80c:	bf18      	it	ne
 801c80e:	236a      	movne	r3, #106	; 0x6a
 801c810:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801cbc0 <_strtod_l+0x970>
 801c814:	9304      	str	r3, [sp, #16]
 801c816:	4650      	mov	r0, sl
 801c818:	4659      	mov	r1, fp
 801c81a:	2300      	movs	r3, #0
 801c81c:	f018 0f01 	tst.w	r8, #1
 801c820:	d004      	beq.n	801c82c <_strtod_l+0x5dc>
 801c822:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c826:	f7e3 feff 	bl	8000628 <__aeabi_dmul>
 801c82a:	2301      	movs	r3, #1
 801c82c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c830:	f109 0908 	add.w	r9, r9, #8
 801c834:	d1f2      	bne.n	801c81c <_strtod_l+0x5cc>
 801c836:	b10b      	cbz	r3, 801c83c <_strtod_l+0x5ec>
 801c838:	4682      	mov	sl, r0
 801c83a:	468b      	mov	fp, r1
 801c83c:	9b04      	ldr	r3, [sp, #16]
 801c83e:	b1c3      	cbz	r3, 801c872 <_strtod_l+0x622>
 801c840:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c844:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c848:	2b00      	cmp	r3, #0
 801c84a:	4659      	mov	r1, fp
 801c84c:	dd11      	ble.n	801c872 <_strtod_l+0x622>
 801c84e:	2b1f      	cmp	r3, #31
 801c850:	f340 8124 	ble.w	801ca9c <_strtod_l+0x84c>
 801c854:	2b34      	cmp	r3, #52	; 0x34
 801c856:	bfde      	ittt	le
 801c858:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c85c:	f04f 33ff 	movle.w	r3, #4294967295
 801c860:	fa03 f202 	lslle.w	r2, r3, r2
 801c864:	f04f 0a00 	mov.w	sl, #0
 801c868:	bfcc      	ite	gt
 801c86a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c86e:	ea02 0b01 	andle.w	fp, r2, r1
 801c872:	2200      	movs	r2, #0
 801c874:	2300      	movs	r3, #0
 801c876:	4650      	mov	r0, sl
 801c878:	4659      	mov	r1, fp
 801c87a:	f7e4 f93d 	bl	8000af8 <__aeabi_dcmpeq>
 801c87e:	2800      	cmp	r0, #0
 801c880:	d1a2      	bne.n	801c7c8 <_strtod_l+0x578>
 801c882:	9b07      	ldr	r3, [sp, #28]
 801c884:	9300      	str	r3, [sp, #0]
 801c886:	9908      	ldr	r1, [sp, #32]
 801c888:	462b      	mov	r3, r5
 801c88a:	463a      	mov	r2, r7
 801c88c:	4620      	mov	r0, r4
 801c88e:	f002 f9d1 	bl	801ec34 <__s2b>
 801c892:	9007      	str	r0, [sp, #28]
 801c894:	2800      	cmp	r0, #0
 801c896:	f43f af1f 	beq.w	801c6d8 <_strtod_l+0x488>
 801c89a:	9b05      	ldr	r3, [sp, #20]
 801c89c:	1b9e      	subs	r6, r3, r6
 801c89e:	9b06      	ldr	r3, [sp, #24]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	bfb4      	ite	lt
 801c8a4:	4633      	movlt	r3, r6
 801c8a6:	2300      	movge	r3, #0
 801c8a8:	930c      	str	r3, [sp, #48]	; 0x30
 801c8aa:	9b06      	ldr	r3, [sp, #24]
 801c8ac:	2500      	movs	r5, #0
 801c8ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8b2:	9312      	str	r3, [sp, #72]	; 0x48
 801c8b4:	462e      	mov	r6, r5
 801c8b6:	9b07      	ldr	r3, [sp, #28]
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	6859      	ldr	r1, [r3, #4]
 801c8bc:	f002 f912 	bl	801eae4 <_Balloc>
 801c8c0:	9005      	str	r0, [sp, #20]
 801c8c2:	2800      	cmp	r0, #0
 801c8c4:	f43f af0c 	beq.w	801c6e0 <_strtod_l+0x490>
 801c8c8:	9b07      	ldr	r3, [sp, #28]
 801c8ca:	691a      	ldr	r2, [r3, #16]
 801c8cc:	3202      	adds	r2, #2
 801c8ce:	f103 010c 	add.w	r1, r3, #12
 801c8d2:	0092      	lsls	r2, r2, #2
 801c8d4:	300c      	adds	r0, #12
 801c8d6:	f7fe fc25 	bl	801b124 <memcpy>
 801c8da:	ec4b ab10 	vmov	d0, sl, fp
 801c8de:	aa1a      	add	r2, sp, #104	; 0x68
 801c8e0:	a919      	add	r1, sp, #100	; 0x64
 801c8e2:	4620      	mov	r0, r4
 801c8e4:	f002 fcec 	bl	801f2c0 <__d2b>
 801c8e8:	ec4b ab18 	vmov	d8, sl, fp
 801c8ec:	9018      	str	r0, [sp, #96]	; 0x60
 801c8ee:	2800      	cmp	r0, #0
 801c8f0:	f43f aef6 	beq.w	801c6e0 <_strtod_l+0x490>
 801c8f4:	2101      	movs	r1, #1
 801c8f6:	4620      	mov	r0, r4
 801c8f8:	f002 fa36 	bl	801ed68 <__i2b>
 801c8fc:	4606      	mov	r6, r0
 801c8fe:	2800      	cmp	r0, #0
 801c900:	f43f aeee 	beq.w	801c6e0 <_strtod_l+0x490>
 801c904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c906:	9904      	ldr	r1, [sp, #16]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	bfab      	itete	ge
 801c90c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c90e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c910:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c912:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c916:	bfac      	ite	ge
 801c918:	eb03 0902 	addge.w	r9, r3, r2
 801c91c:	1ad7      	sublt	r7, r2, r3
 801c91e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c920:	eba3 0801 	sub.w	r8, r3, r1
 801c924:	4490      	add	r8, r2
 801c926:	4ba1      	ldr	r3, [pc, #644]	; (801cbac <_strtod_l+0x95c>)
 801c928:	f108 38ff 	add.w	r8, r8, #4294967295
 801c92c:	4598      	cmp	r8, r3
 801c92e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c932:	f280 80c7 	bge.w	801cac4 <_strtod_l+0x874>
 801c936:	eba3 0308 	sub.w	r3, r3, r8
 801c93a:	2b1f      	cmp	r3, #31
 801c93c:	eba2 0203 	sub.w	r2, r2, r3
 801c940:	f04f 0101 	mov.w	r1, #1
 801c944:	f300 80b1 	bgt.w	801caaa <_strtod_l+0x85a>
 801c948:	fa01 f303 	lsl.w	r3, r1, r3
 801c94c:	930d      	str	r3, [sp, #52]	; 0x34
 801c94e:	2300      	movs	r3, #0
 801c950:	9308      	str	r3, [sp, #32]
 801c952:	eb09 0802 	add.w	r8, r9, r2
 801c956:	9b04      	ldr	r3, [sp, #16]
 801c958:	45c1      	cmp	r9, r8
 801c95a:	4417      	add	r7, r2
 801c95c:	441f      	add	r7, r3
 801c95e:	464b      	mov	r3, r9
 801c960:	bfa8      	it	ge
 801c962:	4643      	movge	r3, r8
 801c964:	42bb      	cmp	r3, r7
 801c966:	bfa8      	it	ge
 801c968:	463b      	movge	r3, r7
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	bfc2      	ittt	gt
 801c96e:	eba8 0803 	subgt.w	r8, r8, r3
 801c972:	1aff      	subgt	r7, r7, r3
 801c974:	eba9 0903 	subgt.w	r9, r9, r3
 801c978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	dd17      	ble.n	801c9ae <_strtod_l+0x75e>
 801c97e:	4631      	mov	r1, r6
 801c980:	461a      	mov	r2, r3
 801c982:	4620      	mov	r0, r4
 801c984:	f002 fab0 	bl	801eee8 <__pow5mult>
 801c988:	4606      	mov	r6, r0
 801c98a:	2800      	cmp	r0, #0
 801c98c:	f43f aea8 	beq.w	801c6e0 <_strtod_l+0x490>
 801c990:	4601      	mov	r1, r0
 801c992:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c994:	4620      	mov	r0, r4
 801c996:	f002 f9fd 	bl	801ed94 <__multiply>
 801c99a:	900b      	str	r0, [sp, #44]	; 0x2c
 801c99c:	2800      	cmp	r0, #0
 801c99e:	f43f ae9f 	beq.w	801c6e0 <_strtod_l+0x490>
 801c9a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	f002 f8dd 	bl	801eb64 <_Bfree>
 801c9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9ac:	9318      	str	r3, [sp, #96]	; 0x60
 801c9ae:	f1b8 0f00 	cmp.w	r8, #0
 801c9b2:	f300 808c 	bgt.w	801cace <_strtod_l+0x87e>
 801c9b6:	9b06      	ldr	r3, [sp, #24]
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	dd08      	ble.n	801c9ce <_strtod_l+0x77e>
 801c9bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c9be:	9905      	ldr	r1, [sp, #20]
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	f002 fa91 	bl	801eee8 <__pow5mult>
 801c9c6:	9005      	str	r0, [sp, #20]
 801c9c8:	2800      	cmp	r0, #0
 801c9ca:	f43f ae89 	beq.w	801c6e0 <_strtod_l+0x490>
 801c9ce:	2f00      	cmp	r7, #0
 801c9d0:	dd08      	ble.n	801c9e4 <_strtod_l+0x794>
 801c9d2:	9905      	ldr	r1, [sp, #20]
 801c9d4:	463a      	mov	r2, r7
 801c9d6:	4620      	mov	r0, r4
 801c9d8:	f002 fae0 	bl	801ef9c <__lshift>
 801c9dc:	9005      	str	r0, [sp, #20]
 801c9de:	2800      	cmp	r0, #0
 801c9e0:	f43f ae7e 	beq.w	801c6e0 <_strtod_l+0x490>
 801c9e4:	f1b9 0f00 	cmp.w	r9, #0
 801c9e8:	dd08      	ble.n	801c9fc <_strtod_l+0x7ac>
 801c9ea:	4631      	mov	r1, r6
 801c9ec:	464a      	mov	r2, r9
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	f002 fad4 	bl	801ef9c <__lshift>
 801c9f4:	4606      	mov	r6, r0
 801c9f6:	2800      	cmp	r0, #0
 801c9f8:	f43f ae72 	beq.w	801c6e0 <_strtod_l+0x490>
 801c9fc:	9a05      	ldr	r2, [sp, #20]
 801c9fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ca00:	4620      	mov	r0, r4
 801ca02:	f002 fb57 	bl	801f0b4 <__mdiff>
 801ca06:	4605      	mov	r5, r0
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	f43f ae69 	beq.w	801c6e0 <_strtod_l+0x490>
 801ca0e:	68c3      	ldr	r3, [r0, #12]
 801ca10:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca12:	2300      	movs	r3, #0
 801ca14:	60c3      	str	r3, [r0, #12]
 801ca16:	4631      	mov	r1, r6
 801ca18:	f002 fb30 	bl	801f07c <__mcmp>
 801ca1c:	2800      	cmp	r0, #0
 801ca1e:	da60      	bge.n	801cae2 <_strtod_l+0x892>
 801ca20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca22:	ea53 030a 	orrs.w	r3, r3, sl
 801ca26:	f040 8082 	bne.w	801cb2e <_strtod_l+0x8de>
 801ca2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d17d      	bne.n	801cb2e <_strtod_l+0x8de>
 801ca32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ca36:	0d1b      	lsrs	r3, r3, #20
 801ca38:	051b      	lsls	r3, r3, #20
 801ca3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ca3e:	d976      	bls.n	801cb2e <_strtod_l+0x8de>
 801ca40:	696b      	ldr	r3, [r5, #20]
 801ca42:	b913      	cbnz	r3, 801ca4a <_strtod_l+0x7fa>
 801ca44:	692b      	ldr	r3, [r5, #16]
 801ca46:	2b01      	cmp	r3, #1
 801ca48:	dd71      	ble.n	801cb2e <_strtod_l+0x8de>
 801ca4a:	4629      	mov	r1, r5
 801ca4c:	2201      	movs	r2, #1
 801ca4e:	4620      	mov	r0, r4
 801ca50:	f002 faa4 	bl	801ef9c <__lshift>
 801ca54:	4631      	mov	r1, r6
 801ca56:	4605      	mov	r5, r0
 801ca58:	f002 fb10 	bl	801f07c <__mcmp>
 801ca5c:	2800      	cmp	r0, #0
 801ca5e:	dd66      	ble.n	801cb2e <_strtod_l+0x8de>
 801ca60:	9904      	ldr	r1, [sp, #16]
 801ca62:	4a53      	ldr	r2, [pc, #332]	; (801cbb0 <_strtod_l+0x960>)
 801ca64:	465b      	mov	r3, fp
 801ca66:	2900      	cmp	r1, #0
 801ca68:	f000 8081 	beq.w	801cb6e <_strtod_l+0x91e>
 801ca6c:	ea02 010b 	and.w	r1, r2, fp
 801ca70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ca74:	dc7b      	bgt.n	801cb6e <_strtod_l+0x91e>
 801ca76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ca7a:	f77f aea9 	ble.w	801c7d0 <_strtod_l+0x580>
 801ca7e:	4b4d      	ldr	r3, [pc, #308]	; (801cbb4 <_strtod_l+0x964>)
 801ca80:	4650      	mov	r0, sl
 801ca82:	4659      	mov	r1, fp
 801ca84:	2200      	movs	r2, #0
 801ca86:	f7e3 fdcf 	bl	8000628 <__aeabi_dmul>
 801ca8a:	460b      	mov	r3, r1
 801ca8c:	4303      	orrs	r3, r0
 801ca8e:	bf08      	it	eq
 801ca90:	2322      	moveq	r3, #34	; 0x22
 801ca92:	4682      	mov	sl, r0
 801ca94:	468b      	mov	fp, r1
 801ca96:	bf08      	it	eq
 801ca98:	6023      	streq	r3, [r4, #0]
 801ca9a:	e62b      	b.n	801c6f4 <_strtod_l+0x4a4>
 801ca9c:	f04f 32ff 	mov.w	r2, #4294967295
 801caa0:	fa02 f303 	lsl.w	r3, r2, r3
 801caa4:	ea03 0a0a 	and.w	sl, r3, sl
 801caa8:	e6e3      	b.n	801c872 <_strtod_l+0x622>
 801caaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801caae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801cab2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801cab6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801caba:	fa01 f308 	lsl.w	r3, r1, r8
 801cabe:	9308      	str	r3, [sp, #32]
 801cac0:	910d      	str	r1, [sp, #52]	; 0x34
 801cac2:	e746      	b.n	801c952 <_strtod_l+0x702>
 801cac4:	2300      	movs	r3, #0
 801cac6:	9308      	str	r3, [sp, #32]
 801cac8:	2301      	movs	r3, #1
 801caca:	930d      	str	r3, [sp, #52]	; 0x34
 801cacc:	e741      	b.n	801c952 <_strtod_l+0x702>
 801cace:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cad0:	4642      	mov	r2, r8
 801cad2:	4620      	mov	r0, r4
 801cad4:	f002 fa62 	bl	801ef9c <__lshift>
 801cad8:	9018      	str	r0, [sp, #96]	; 0x60
 801cada:	2800      	cmp	r0, #0
 801cadc:	f47f af6b 	bne.w	801c9b6 <_strtod_l+0x766>
 801cae0:	e5fe      	b.n	801c6e0 <_strtod_l+0x490>
 801cae2:	465f      	mov	r7, fp
 801cae4:	d16e      	bne.n	801cbc4 <_strtod_l+0x974>
 801cae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801caec:	b342      	cbz	r2, 801cb40 <_strtod_l+0x8f0>
 801caee:	4a32      	ldr	r2, [pc, #200]	; (801cbb8 <_strtod_l+0x968>)
 801caf0:	4293      	cmp	r3, r2
 801caf2:	d128      	bne.n	801cb46 <_strtod_l+0x8f6>
 801caf4:	9b04      	ldr	r3, [sp, #16]
 801caf6:	4651      	mov	r1, sl
 801caf8:	b1eb      	cbz	r3, 801cb36 <_strtod_l+0x8e6>
 801cafa:	4b2d      	ldr	r3, [pc, #180]	; (801cbb0 <_strtod_l+0x960>)
 801cafc:	403b      	ands	r3, r7
 801cafe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cb02:	f04f 32ff 	mov.w	r2, #4294967295
 801cb06:	d819      	bhi.n	801cb3c <_strtod_l+0x8ec>
 801cb08:	0d1b      	lsrs	r3, r3, #20
 801cb0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cb0e:	fa02 f303 	lsl.w	r3, r2, r3
 801cb12:	4299      	cmp	r1, r3
 801cb14:	d117      	bne.n	801cb46 <_strtod_l+0x8f6>
 801cb16:	4b29      	ldr	r3, [pc, #164]	; (801cbbc <_strtod_l+0x96c>)
 801cb18:	429f      	cmp	r7, r3
 801cb1a:	d102      	bne.n	801cb22 <_strtod_l+0x8d2>
 801cb1c:	3101      	adds	r1, #1
 801cb1e:	f43f addf 	beq.w	801c6e0 <_strtod_l+0x490>
 801cb22:	4b23      	ldr	r3, [pc, #140]	; (801cbb0 <_strtod_l+0x960>)
 801cb24:	403b      	ands	r3, r7
 801cb26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801cb2a:	f04f 0a00 	mov.w	sl, #0
 801cb2e:	9b04      	ldr	r3, [sp, #16]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d1a4      	bne.n	801ca7e <_strtod_l+0x82e>
 801cb34:	e5de      	b.n	801c6f4 <_strtod_l+0x4a4>
 801cb36:	f04f 33ff 	mov.w	r3, #4294967295
 801cb3a:	e7ea      	b.n	801cb12 <_strtod_l+0x8c2>
 801cb3c:	4613      	mov	r3, r2
 801cb3e:	e7e8      	b.n	801cb12 <_strtod_l+0x8c2>
 801cb40:	ea53 030a 	orrs.w	r3, r3, sl
 801cb44:	d08c      	beq.n	801ca60 <_strtod_l+0x810>
 801cb46:	9b08      	ldr	r3, [sp, #32]
 801cb48:	b1db      	cbz	r3, 801cb82 <_strtod_l+0x932>
 801cb4a:	423b      	tst	r3, r7
 801cb4c:	d0ef      	beq.n	801cb2e <_strtod_l+0x8de>
 801cb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb50:	9a04      	ldr	r2, [sp, #16]
 801cb52:	4650      	mov	r0, sl
 801cb54:	4659      	mov	r1, fp
 801cb56:	b1c3      	cbz	r3, 801cb8a <_strtod_l+0x93a>
 801cb58:	f7ff fb5d 	bl	801c216 <sulp>
 801cb5c:	4602      	mov	r2, r0
 801cb5e:	460b      	mov	r3, r1
 801cb60:	ec51 0b18 	vmov	r0, r1, d8
 801cb64:	f7e3 fbaa 	bl	80002bc <__adddf3>
 801cb68:	4682      	mov	sl, r0
 801cb6a:	468b      	mov	fp, r1
 801cb6c:	e7df      	b.n	801cb2e <_strtod_l+0x8de>
 801cb6e:	4013      	ands	r3, r2
 801cb70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cb74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cb78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cb7c:	f04f 3aff 	mov.w	sl, #4294967295
 801cb80:	e7d5      	b.n	801cb2e <_strtod_l+0x8de>
 801cb82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb84:	ea13 0f0a 	tst.w	r3, sl
 801cb88:	e7e0      	b.n	801cb4c <_strtod_l+0x8fc>
 801cb8a:	f7ff fb44 	bl	801c216 <sulp>
 801cb8e:	4602      	mov	r2, r0
 801cb90:	460b      	mov	r3, r1
 801cb92:	ec51 0b18 	vmov	r0, r1, d8
 801cb96:	f7e3 fb8f 	bl	80002b8 <__aeabi_dsub>
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	2300      	movs	r3, #0
 801cb9e:	4682      	mov	sl, r0
 801cba0:	468b      	mov	fp, r1
 801cba2:	f7e3 ffa9 	bl	8000af8 <__aeabi_dcmpeq>
 801cba6:	2800      	cmp	r0, #0
 801cba8:	d0c1      	beq.n	801cb2e <_strtod_l+0x8de>
 801cbaa:	e611      	b.n	801c7d0 <_strtod_l+0x580>
 801cbac:	fffffc02 	.word	0xfffffc02
 801cbb0:	7ff00000 	.word	0x7ff00000
 801cbb4:	39500000 	.word	0x39500000
 801cbb8:	000fffff 	.word	0x000fffff
 801cbbc:	7fefffff 	.word	0x7fefffff
 801cbc0:	08021b80 	.word	0x08021b80
 801cbc4:	4631      	mov	r1, r6
 801cbc6:	4628      	mov	r0, r5
 801cbc8:	f002 fbd6 	bl	801f378 <__ratio>
 801cbcc:	ec59 8b10 	vmov	r8, r9, d0
 801cbd0:	ee10 0a10 	vmov	r0, s0
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cbda:	4649      	mov	r1, r9
 801cbdc:	f7e3 ffa0 	bl	8000b20 <__aeabi_dcmple>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	d07a      	beq.n	801ccda <_strtod_l+0xa8a>
 801cbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d04a      	beq.n	801cc80 <_strtod_l+0xa30>
 801cbea:	4b95      	ldr	r3, [pc, #596]	; (801ce40 <_strtod_l+0xbf0>)
 801cbec:	2200      	movs	r2, #0
 801cbee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cbf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ce40 <_strtod_l+0xbf0>
 801cbf6:	f04f 0800 	mov.w	r8, #0
 801cbfa:	4b92      	ldr	r3, [pc, #584]	; (801ce44 <_strtod_l+0xbf4>)
 801cbfc:	403b      	ands	r3, r7
 801cbfe:	930d      	str	r3, [sp, #52]	; 0x34
 801cc00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc02:	4b91      	ldr	r3, [pc, #580]	; (801ce48 <_strtod_l+0xbf8>)
 801cc04:	429a      	cmp	r2, r3
 801cc06:	f040 80b0 	bne.w	801cd6a <_strtod_l+0xb1a>
 801cc0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801cc12:	ec4b ab10 	vmov	d0, sl, fp
 801cc16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cc1a:	f002 fad5 	bl	801f1c8 <__ulp>
 801cc1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc22:	ec53 2b10 	vmov	r2, r3, d0
 801cc26:	f7e3 fcff 	bl	8000628 <__aeabi_dmul>
 801cc2a:	4652      	mov	r2, sl
 801cc2c:	465b      	mov	r3, fp
 801cc2e:	f7e3 fb45 	bl	80002bc <__adddf3>
 801cc32:	460b      	mov	r3, r1
 801cc34:	4983      	ldr	r1, [pc, #524]	; (801ce44 <_strtod_l+0xbf4>)
 801cc36:	4a85      	ldr	r2, [pc, #532]	; (801ce4c <_strtod_l+0xbfc>)
 801cc38:	4019      	ands	r1, r3
 801cc3a:	4291      	cmp	r1, r2
 801cc3c:	4682      	mov	sl, r0
 801cc3e:	d960      	bls.n	801cd02 <_strtod_l+0xab2>
 801cc40:	ee18 3a90 	vmov	r3, s17
 801cc44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cc48:	4293      	cmp	r3, r2
 801cc4a:	d104      	bne.n	801cc56 <_strtod_l+0xa06>
 801cc4c:	ee18 3a10 	vmov	r3, s16
 801cc50:	3301      	adds	r3, #1
 801cc52:	f43f ad45 	beq.w	801c6e0 <_strtod_l+0x490>
 801cc56:	f8df b200 	ldr.w	fp, [pc, #512]	; 801ce58 <_strtod_l+0xc08>
 801cc5a:	f04f 3aff 	mov.w	sl, #4294967295
 801cc5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cc60:	4620      	mov	r0, r4
 801cc62:	f001 ff7f 	bl	801eb64 <_Bfree>
 801cc66:	9905      	ldr	r1, [sp, #20]
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f001 ff7b 	bl	801eb64 <_Bfree>
 801cc6e:	4631      	mov	r1, r6
 801cc70:	4620      	mov	r0, r4
 801cc72:	f001 ff77 	bl	801eb64 <_Bfree>
 801cc76:	4629      	mov	r1, r5
 801cc78:	4620      	mov	r0, r4
 801cc7a:	f001 ff73 	bl	801eb64 <_Bfree>
 801cc7e:	e61a      	b.n	801c8b6 <_strtod_l+0x666>
 801cc80:	f1ba 0f00 	cmp.w	sl, #0
 801cc84:	d11b      	bne.n	801ccbe <_strtod_l+0xa6e>
 801cc86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc8a:	b9f3      	cbnz	r3, 801ccca <_strtod_l+0xa7a>
 801cc8c:	4b6c      	ldr	r3, [pc, #432]	; (801ce40 <_strtod_l+0xbf0>)
 801cc8e:	2200      	movs	r2, #0
 801cc90:	4640      	mov	r0, r8
 801cc92:	4649      	mov	r1, r9
 801cc94:	f7e3 ff3a 	bl	8000b0c <__aeabi_dcmplt>
 801cc98:	b9d0      	cbnz	r0, 801ccd0 <_strtod_l+0xa80>
 801cc9a:	4640      	mov	r0, r8
 801cc9c:	4649      	mov	r1, r9
 801cc9e:	4b6c      	ldr	r3, [pc, #432]	; (801ce50 <_strtod_l+0xc00>)
 801cca0:	2200      	movs	r2, #0
 801cca2:	f7e3 fcc1 	bl	8000628 <__aeabi_dmul>
 801cca6:	4680      	mov	r8, r0
 801cca8:	4689      	mov	r9, r1
 801ccaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ccae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801ccb2:	9315      	str	r3, [sp, #84]	; 0x54
 801ccb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801ccb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ccbc:	e79d      	b.n	801cbfa <_strtod_l+0x9aa>
 801ccbe:	f1ba 0f01 	cmp.w	sl, #1
 801ccc2:	d102      	bne.n	801ccca <_strtod_l+0xa7a>
 801ccc4:	2f00      	cmp	r7, #0
 801ccc6:	f43f ad83 	beq.w	801c7d0 <_strtod_l+0x580>
 801ccca:	4b62      	ldr	r3, [pc, #392]	; (801ce54 <_strtod_l+0xc04>)
 801cccc:	2200      	movs	r2, #0
 801ccce:	e78e      	b.n	801cbee <_strtod_l+0x99e>
 801ccd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801ce50 <_strtod_l+0xc00>
 801ccd4:	f04f 0800 	mov.w	r8, #0
 801ccd8:	e7e7      	b.n	801ccaa <_strtod_l+0xa5a>
 801ccda:	4b5d      	ldr	r3, [pc, #372]	; (801ce50 <_strtod_l+0xc00>)
 801ccdc:	4640      	mov	r0, r8
 801ccde:	4649      	mov	r1, r9
 801cce0:	2200      	movs	r2, #0
 801cce2:	f7e3 fca1 	bl	8000628 <__aeabi_dmul>
 801cce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cce8:	4680      	mov	r8, r0
 801ccea:	4689      	mov	r9, r1
 801ccec:	b933      	cbnz	r3, 801ccfc <_strtod_l+0xaac>
 801ccee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ccf2:	900e      	str	r0, [sp, #56]	; 0x38
 801ccf4:	930f      	str	r3, [sp, #60]	; 0x3c
 801ccf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ccfa:	e7dd      	b.n	801ccb8 <_strtod_l+0xa68>
 801ccfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801cd00:	e7f9      	b.n	801ccf6 <_strtod_l+0xaa6>
 801cd02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801cd06:	9b04      	ldr	r3, [sp, #16]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d1a8      	bne.n	801cc5e <_strtod_l+0xa0e>
 801cd0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cd10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd12:	0d1b      	lsrs	r3, r3, #20
 801cd14:	051b      	lsls	r3, r3, #20
 801cd16:	429a      	cmp	r2, r3
 801cd18:	d1a1      	bne.n	801cc5e <_strtod_l+0xa0e>
 801cd1a:	4640      	mov	r0, r8
 801cd1c:	4649      	mov	r1, r9
 801cd1e:	f7e3 ffe3 	bl	8000ce8 <__aeabi_d2lz>
 801cd22:	f7e3 fc53 	bl	80005cc <__aeabi_l2d>
 801cd26:	4602      	mov	r2, r0
 801cd28:	460b      	mov	r3, r1
 801cd2a:	4640      	mov	r0, r8
 801cd2c:	4649      	mov	r1, r9
 801cd2e:	f7e3 fac3 	bl	80002b8 <__aeabi_dsub>
 801cd32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cd34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cd38:	ea43 030a 	orr.w	r3, r3, sl
 801cd3c:	4313      	orrs	r3, r2
 801cd3e:	4680      	mov	r8, r0
 801cd40:	4689      	mov	r9, r1
 801cd42:	d055      	beq.n	801cdf0 <_strtod_l+0xba0>
 801cd44:	a336      	add	r3, pc, #216	; (adr r3, 801ce20 <_strtod_l+0xbd0>)
 801cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd4a:	f7e3 fedf 	bl	8000b0c <__aeabi_dcmplt>
 801cd4e:	2800      	cmp	r0, #0
 801cd50:	f47f acd0 	bne.w	801c6f4 <_strtod_l+0x4a4>
 801cd54:	a334      	add	r3, pc, #208	; (adr r3, 801ce28 <_strtod_l+0xbd8>)
 801cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd5a:	4640      	mov	r0, r8
 801cd5c:	4649      	mov	r1, r9
 801cd5e:	f7e3 fef3 	bl	8000b48 <__aeabi_dcmpgt>
 801cd62:	2800      	cmp	r0, #0
 801cd64:	f43f af7b 	beq.w	801cc5e <_strtod_l+0xa0e>
 801cd68:	e4c4      	b.n	801c6f4 <_strtod_l+0x4a4>
 801cd6a:	9b04      	ldr	r3, [sp, #16]
 801cd6c:	b333      	cbz	r3, 801cdbc <_strtod_l+0xb6c>
 801cd6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cd74:	d822      	bhi.n	801cdbc <_strtod_l+0xb6c>
 801cd76:	a32e      	add	r3, pc, #184	; (adr r3, 801ce30 <_strtod_l+0xbe0>)
 801cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd7c:	4640      	mov	r0, r8
 801cd7e:	4649      	mov	r1, r9
 801cd80:	f7e3 fece 	bl	8000b20 <__aeabi_dcmple>
 801cd84:	b1a0      	cbz	r0, 801cdb0 <_strtod_l+0xb60>
 801cd86:	4649      	mov	r1, r9
 801cd88:	4640      	mov	r0, r8
 801cd8a:	f7e3 ff25 	bl	8000bd8 <__aeabi_d2uiz>
 801cd8e:	2801      	cmp	r0, #1
 801cd90:	bf38      	it	cc
 801cd92:	2001      	movcc	r0, #1
 801cd94:	f7e3 fbce 	bl	8000534 <__aeabi_ui2d>
 801cd98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd9a:	4680      	mov	r8, r0
 801cd9c:	4689      	mov	r9, r1
 801cd9e:	bb23      	cbnz	r3, 801cdea <_strtod_l+0xb9a>
 801cda0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cda4:	9010      	str	r0, [sp, #64]	; 0x40
 801cda6:	9311      	str	r3, [sp, #68]	; 0x44
 801cda8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cdac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cdb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cdb8:	1a9b      	subs	r3, r3, r2
 801cdba:	9309      	str	r3, [sp, #36]	; 0x24
 801cdbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cdc0:	eeb0 0a48 	vmov.f32	s0, s16
 801cdc4:	eef0 0a68 	vmov.f32	s1, s17
 801cdc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cdcc:	f002 f9fc 	bl	801f1c8 <__ulp>
 801cdd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cdd4:	ec53 2b10 	vmov	r2, r3, d0
 801cdd8:	f7e3 fc26 	bl	8000628 <__aeabi_dmul>
 801cddc:	ec53 2b18 	vmov	r2, r3, d8
 801cde0:	f7e3 fa6c 	bl	80002bc <__adddf3>
 801cde4:	4682      	mov	sl, r0
 801cde6:	468b      	mov	fp, r1
 801cde8:	e78d      	b.n	801cd06 <_strtod_l+0xab6>
 801cdea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801cdee:	e7db      	b.n	801cda8 <_strtod_l+0xb58>
 801cdf0:	a311      	add	r3, pc, #68	; (adr r3, 801ce38 <_strtod_l+0xbe8>)
 801cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdf6:	f7e3 fe89 	bl	8000b0c <__aeabi_dcmplt>
 801cdfa:	e7b2      	b.n	801cd62 <_strtod_l+0xb12>
 801cdfc:	2300      	movs	r3, #0
 801cdfe:	930a      	str	r3, [sp, #40]	; 0x28
 801ce00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ce04:	6013      	str	r3, [r2, #0]
 801ce06:	f7ff ba6b 	b.w	801c2e0 <_strtod_l+0x90>
 801ce0a:	2a65      	cmp	r2, #101	; 0x65
 801ce0c:	f43f ab5f 	beq.w	801c4ce <_strtod_l+0x27e>
 801ce10:	2a45      	cmp	r2, #69	; 0x45
 801ce12:	f43f ab5c 	beq.w	801c4ce <_strtod_l+0x27e>
 801ce16:	2301      	movs	r3, #1
 801ce18:	f7ff bb94 	b.w	801c544 <_strtod_l+0x2f4>
 801ce1c:	f3af 8000 	nop.w
 801ce20:	94a03595 	.word	0x94a03595
 801ce24:	3fdfffff 	.word	0x3fdfffff
 801ce28:	35afe535 	.word	0x35afe535
 801ce2c:	3fe00000 	.word	0x3fe00000
 801ce30:	ffc00000 	.word	0xffc00000
 801ce34:	41dfffff 	.word	0x41dfffff
 801ce38:	94a03595 	.word	0x94a03595
 801ce3c:	3fcfffff 	.word	0x3fcfffff
 801ce40:	3ff00000 	.word	0x3ff00000
 801ce44:	7ff00000 	.word	0x7ff00000
 801ce48:	7fe00000 	.word	0x7fe00000
 801ce4c:	7c9fffff 	.word	0x7c9fffff
 801ce50:	3fe00000 	.word	0x3fe00000
 801ce54:	bff00000 	.word	0xbff00000
 801ce58:	7fefffff 	.word	0x7fefffff

0801ce5c <_strtod_r>:
 801ce5c:	4b01      	ldr	r3, [pc, #4]	; (801ce64 <_strtod_r+0x8>)
 801ce5e:	f7ff b9f7 	b.w	801c250 <_strtod_l>
 801ce62:	bf00      	nop
 801ce64:	200001a8 	.word	0x200001a8

0801ce68 <strtok>:
 801ce68:	4b16      	ldr	r3, [pc, #88]	; (801cec4 <strtok+0x5c>)
 801ce6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce6c:	681e      	ldr	r6, [r3, #0]
 801ce6e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801ce70:	4605      	mov	r5, r0
 801ce72:	b9fc      	cbnz	r4, 801ceb4 <strtok+0x4c>
 801ce74:	2050      	movs	r0, #80	; 0x50
 801ce76:	9101      	str	r1, [sp, #4]
 801ce78:	f7fe f94c 	bl	801b114 <malloc>
 801ce7c:	9901      	ldr	r1, [sp, #4]
 801ce7e:	65b0      	str	r0, [r6, #88]	; 0x58
 801ce80:	4602      	mov	r2, r0
 801ce82:	b920      	cbnz	r0, 801ce8e <strtok+0x26>
 801ce84:	4b10      	ldr	r3, [pc, #64]	; (801cec8 <strtok+0x60>)
 801ce86:	4811      	ldr	r0, [pc, #68]	; (801cecc <strtok+0x64>)
 801ce88:	2157      	movs	r1, #87	; 0x57
 801ce8a:	f000 f9d1 	bl	801d230 <__assert_func>
 801ce8e:	e9c0 4400 	strd	r4, r4, [r0]
 801ce92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ce96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ce9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801ce9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801cea2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801cea6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801ceaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801ceae:	6184      	str	r4, [r0, #24]
 801ceb0:	7704      	strb	r4, [r0, #28]
 801ceb2:	6244      	str	r4, [r0, #36]	; 0x24
 801ceb4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801ceb6:	2301      	movs	r3, #1
 801ceb8:	4628      	mov	r0, r5
 801ceba:	b002      	add	sp, #8
 801cebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cec0:	f000 b806 	b.w	801ced0 <__strtok_r>
 801cec4:	20000140 	.word	0x20000140
 801cec8:	08021ba8 	.word	0x08021ba8
 801cecc:	08021bbf 	.word	0x08021bbf

0801ced0 <__strtok_r>:
 801ced0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ced2:	b908      	cbnz	r0, 801ced8 <__strtok_r+0x8>
 801ced4:	6810      	ldr	r0, [r2, #0]
 801ced6:	b188      	cbz	r0, 801cefc <__strtok_r+0x2c>
 801ced8:	4604      	mov	r4, r0
 801ceda:	4620      	mov	r0, r4
 801cedc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801cee0:	460f      	mov	r7, r1
 801cee2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801cee6:	b91e      	cbnz	r6, 801cef0 <__strtok_r+0x20>
 801cee8:	b965      	cbnz	r5, 801cf04 <__strtok_r+0x34>
 801ceea:	6015      	str	r5, [r2, #0]
 801ceec:	4628      	mov	r0, r5
 801ceee:	e005      	b.n	801cefc <__strtok_r+0x2c>
 801cef0:	42b5      	cmp	r5, r6
 801cef2:	d1f6      	bne.n	801cee2 <__strtok_r+0x12>
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d1f0      	bne.n	801ceda <__strtok_r+0xa>
 801cef8:	6014      	str	r4, [r2, #0]
 801cefa:	7003      	strb	r3, [r0, #0]
 801cefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cefe:	461c      	mov	r4, r3
 801cf00:	e00c      	b.n	801cf1c <__strtok_r+0x4c>
 801cf02:	b915      	cbnz	r5, 801cf0a <__strtok_r+0x3a>
 801cf04:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cf08:	460e      	mov	r6, r1
 801cf0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cf0e:	42ab      	cmp	r3, r5
 801cf10:	d1f7      	bne.n	801cf02 <__strtok_r+0x32>
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d0f3      	beq.n	801cefe <__strtok_r+0x2e>
 801cf16:	2300      	movs	r3, #0
 801cf18:	f804 3c01 	strb.w	r3, [r4, #-1]
 801cf1c:	6014      	str	r4, [r2, #0]
 801cf1e:	e7ed      	b.n	801cefc <__strtok_r+0x2c>

0801cf20 <_strtol_l.constprop.0>:
 801cf20:	2b01      	cmp	r3, #1
 801cf22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf26:	d001      	beq.n	801cf2c <_strtol_l.constprop.0+0xc>
 801cf28:	2b24      	cmp	r3, #36	; 0x24
 801cf2a:	d906      	bls.n	801cf3a <_strtol_l.constprop.0+0x1a>
 801cf2c:	f7fe f856 	bl	801afdc <__errno>
 801cf30:	2316      	movs	r3, #22
 801cf32:	6003      	str	r3, [r0, #0]
 801cf34:	2000      	movs	r0, #0
 801cf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d020 <_strtol_l.constprop.0+0x100>
 801cf3e:	460d      	mov	r5, r1
 801cf40:	462e      	mov	r6, r5
 801cf42:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cf46:	f814 700c 	ldrb.w	r7, [r4, ip]
 801cf4a:	f017 0708 	ands.w	r7, r7, #8
 801cf4e:	d1f7      	bne.n	801cf40 <_strtol_l.constprop.0+0x20>
 801cf50:	2c2d      	cmp	r4, #45	; 0x2d
 801cf52:	d132      	bne.n	801cfba <_strtol_l.constprop.0+0x9a>
 801cf54:	782c      	ldrb	r4, [r5, #0]
 801cf56:	2701      	movs	r7, #1
 801cf58:	1cb5      	adds	r5, r6, #2
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d05b      	beq.n	801d016 <_strtol_l.constprop.0+0xf6>
 801cf5e:	2b10      	cmp	r3, #16
 801cf60:	d109      	bne.n	801cf76 <_strtol_l.constprop.0+0x56>
 801cf62:	2c30      	cmp	r4, #48	; 0x30
 801cf64:	d107      	bne.n	801cf76 <_strtol_l.constprop.0+0x56>
 801cf66:	782c      	ldrb	r4, [r5, #0]
 801cf68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cf6c:	2c58      	cmp	r4, #88	; 0x58
 801cf6e:	d14d      	bne.n	801d00c <_strtol_l.constprop.0+0xec>
 801cf70:	786c      	ldrb	r4, [r5, #1]
 801cf72:	2310      	movs	r3, #16
 801cf74:	3502      	adds	r5, #2
 801cf76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801cf7a:	f108 38ff 	add.w	r8, r8, #4294967295
 801cf7e:	f04f 0c00 	mov.w	ip, #0
 801cf82:	fbb8 f9f3 	udiv	r9, r8, r3
 801cf86:	4666      	mov	r6, ip
 801cf88:	fb03 8a19 	mls	sl, r3, r9, r8
 801cf8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801cf90:	f1be 0f09 	cmp.w	lr, #9
 801cf94:	d816      	bhi.n	801cfc4 <_strtol_l.constprop.0+0xa4>
 801cf96:	4674      	mov	r4, lr
 801cf98:	42a3      	cmp	r3, r4
 801cf9a:	dd24      	ble.n	801cfe6 <_strtol_l.constprop.0+0xc6>
 801cf9c:	f1bc 0f00 	cmp.w	ip, #0
 801cfa0:	db1e      	blt.n	801cfe0 <_strtol_l.constprop.0+0xc0>
 801cfa2:	45b1      	cmp	r9, r6
 801cfa4:	d31c      	bcc.n	801cfe0 <_strtol_l.constprop.0+0xc0>
 801cfa6:	d101      	bne.n	801cfac <_strtol_l.constprop.0+0x8c>
 801cfa8:	45a2      	cmp	sl, r4
 801cfaa:	db19      	blt.n	801cfe0 <_strtol_l.constprop.0+0xc0>
 801cfac:	fb06 4603 	mla	r6, r6, r3, r4
 801cfb0:	f04f 0c01 	mov.w	ip, #1
 801cfb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cfb8:	e7e8      	b.n	801cf8c <_strtol_l.constprop.0+0x6c>
 801cfba:	2c2b      	cmp	r4, #43	; 0x2b
 801cfbc:	bf04      	itt	eq
 801cfbe:	782c      	ldrbeq	r4, [r5, #0]
 801cfc0:	1cb5      	addeq	r5, r6, #2
 801cfc2:	e7ca      	b.n	801cf5a <_strtol_l.constprop.0+0x3a>
 801cfc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801cfc8:	f1be 0f19 	cmp.w	lr, #25
 801cfcc:	d801      	bhi.n	801cfd2 <_strtol_l.constprop.0+0xb2>
 801cfce:	3c37      	subs	r4, #55	; 0x37
 801cfd0:	e7e2      	b.n	801cf98 <_strtol_l.constprop.0+0x78>
 801cfd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801cfd6:	f1be 0f19 	cmp.w	lr, #25
 801cfda:	d804      	bhi.n	801cfe6 <_strtol_l.constprop.0+0xc6>
 801cfdc:	3c57      	subs	r4, #87	; 0x57
 801cfde:	e7db      	b.n	801cf98 <_strtol_l.constprop.0+0x78>
 801cfe0:	f04f 3cff 	mov.w	ip, #4294967295
 801cfe4:	e7e6      	b.n	801cfb4 <_strtol_l.constprop.0+0x94>
 801cfe6:	f1bc 0f00 	cmp.w	ip, #0
 801cfea:	da05      	bge.n	801cff8 <_strtol_l.constprop.0+0xd8>
 801cfec:	2322      	movs	r3, #34	; 0x22
 801cfee:	6003      	str	r3, [r0, #0]
 801cff0:	4646      	mov	r6, r8
 801cff2:	b942      	cbnz	r2, 801d006 <_strtol_l.constprop.0+0xe6>
 801cff4:	4630      	mov	r0, r6
 801cff6:	e79e      	b.n	801cf36 <_strtol_l.constprop.0+0x16>
 801cff8:	b107      	cbz	r7, 801cffc <_strtol_l.constprop.0+0xdc>
 801cffa:	4276      	negs	r6, r6
 801cffc:	2a00      	cmp	r2, #0
 801cffe:	d0f9      	beq.n	801cff4 <_strtol_l.constprop.0+0xd4>
 801d000:	f1bc 0f00 	cmp.w	ip, #0
 801d004:	d000      	beq.n	801d008 <_strtol_l.constprop.0+0xe8>
 801d006:	1e69      	subs	r1, r5, #1
 801d008:	6011      	str	r1, [r2, #0]
 801d00a:	e7f3      	b.n	801cff4 <_strtol_l.constprop.0+0xd4>
 801d00c:	2430      	movs	r4, #48	; 0x30
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d1b1      	bne.n	801cf76 <_strtol_l.constprop.0+0x56>
 801d012:	2308      	movs	r3, #8
 801d014:	e7af      	b.n	801cf76 <_strtol_l.constprop.0+0x56>
 801d016:	2c30      	cmp	r4, #48	; 0x30
 801d018:	d0a5      	beq.n	801cf66 <_strtol_l.constprop.0+0x46>
 801d01a:	230a      	movs	r3, #10
 801d01c:	e7ab      	b.n	801cf76 <_strtol_l.constprop.0+0x56>
 801d01e:	bf00      	nop
 801d020:	08021c59 	.word	0x08021c59

0801d024 <_strtol_r>:
 801d024:	f7ff bf7c 	b.w	801cf20 <_strtol_l.constprop.0>

0801d028 <strtol>:
 801d028:	4613      	mov	r3, r2
 801d02a:	460a      	mov	r2, r1
 801d02c:	4601      	mov	r1, r0
 801d02e:	4802      	ldr	r0, [pc, #8]	; (801d038 <strtol+0x10>)
 801d030:	6800      	ldr	r0, [r0, #0]
 801d032:	f7ff bf75 	b.w	801cf20 <_strtol_l.constprop.0>
 801d036:	bf00      	nop
 801d038:	20000140 	.word	0x20000140

0801d03c <_vsniprintf_r>:
 801d03c:	b530      	push	{r4, r5, lr}
 801d03e:	4614      	mov	r4, r2
 801d040:	2c00      	cmp	r4, #0
 801d042:	b09b      	sub	sp, #108	; 0x6c
 801d044:	4605      	mov	r5, r0
 801d046:	461a      	mov	r2, r3
 801d048:	da05      	bge.n	801d056 <_vsniprintf_r+0x1a>
 801d04a:	238b      	movs	r3, #139	; 0x8b
 801d04c:	6003      	str	r3, [r0, #0]
 801d04e:	f04f 30ff 	mov.w	r0, #4294967295
 801d052:	b01b      	add	sp, #108	; 0x6c
 801d054:	bd30      	pop	{r4, r5, pc}
 801d056:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d05a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d05e:	bf14      	ite	ne
 801d060:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d064:	4623      	moveq	r3, r4
 801d066:	9302      	str	r3, [sp, #8]
 801d068:	9305      	str	r3, [sp, #20]
 801d06a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d06e:	9100      	str	r1, [sp, #0]
 801d070:	9104      	str	r1, [sp, #16]
 801d072:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d076:	4669      	mov	r1, sp
 801d078:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d07a:	f002 fa65 	bl	801f548 <_svfiprintf_r>
 801d07e:	1c43      	adds	r3, r0, #1
 801d080:	bfbc      	itt	lt
 801d082:	238b      	movlt	r3, #139	; 0x8b
 801d084:	602b      	strlt	r3, [r5, #0]
 801d086:	2c00      	cmp	r4, #0
 801d088:	d0e3      	beq.n	801d052 <_vsniprintf_r+0x16>
 801d08a:	9b00      	ldr	r3, [sp, #0]
 801d08c:	2200      	movs	r2, #0
 801d08e:	701a      	strb	r2, [r3, #0]
 801d090:	e7df      	b.n	801d052 <_vsniprintf_r+0x16>
	...

0801d094 <vsniprintf>:
 801d094:	b507      	push	{r0, r1, r2, lr}
 801d096:	9300      	str	r3, [sp, #0]
 801d098:	4613      	mov	r3, r2
 801d09a:	460a      	mov	r2, r1
 801d09c:	4601      	mov	r1, r0
 801d09e:	4803      	ldr	r0, [pc, #12]	; (801d0ac <vsniprintf+0x18>)
 801d0a0:	6800      	ldr	r0, [r0, #0]
 801d0a2:	f7ff ffcb 	bl	801d03c <_vsniprintf_r>
 801d0a6:	b003      	add	sp, #12
 801d0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0ac:	20000140 	.word	0x20000140

0801d0b0 <__swbuf_r>:
 801d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0b2:	460e      	mov	r6, r1
 801d0b4:	4614      	mov	r4, r2
 801d0b6:	4605      	mov	r5, r0
 801d0b8:	b118      	cbz	r0, 801d0c2 <__swbuf_r+0x12>
 801d0ba:	6983      	ldr	r3, [r0, #24]
 801d0bc:	b90b      	cbnz	r3, 801d0c2 <__swbuf_r+0x12>
 801d0be:	f001 f86b 	bl	801e198 <__sinit>
 801d0c2:	4b21      	ldr	r3, [pc, #132]	; (801d148 <__swbuf_r+0x98>)
 801d0c4:	429c      	cmp	r4, r3
 801d0c6:	d12b      	bne.n	801d120 <__swbuf_r+0x70>
 801d0c8:	686c      	ldr	r4, [r5, #4]
 801d0ca:	69a3      	ldr	r3, [r4, #24]
 801d0cc:	60a3      	str	r3, [r4, #8]
 801d0ce:	89a3      	ldrh	r3, [r4, #12]
 801d0d0:	071a      	lsls	r2, r3, #28
 801d0d2:	d52f      	bpl.n	801d134 <__swbuf_r+0x84>
 801d0d4:	6923      	ldr	r3, [r4, #16]
 801d0d6:	b36b      	cbz	r3, 801d134 <__swbuf_r+0x84>
 801d0d8:	6923      	ldr	r3, [r4, #16]
 801d0da:	6820      	ldr	r0, [r4, #0]
 801d0dc:	1ac0      	subs	r0, r0, r3
 801d0de:	6963      	ldr	r3, [r4, #20]
 801d0e0:	b2f6      	uxtb	r6, r6
 801d0e2:	4283      	cmp	r3, r0
 801d0e4:	4637      	mov	r7, r6
 801d0e6:	dc04      	bgt.n	801d0f2 <__swbuf_r+0x42>
 801d0e8:	4621      	mov	r1, r4
 801d0ea:	4628      	mov	r0, r5
 801d0ec:	f000 ffc0 	bl	801e070 <_fflush_r>
 801d0f0:	bb30      	cbnz	r0, 801d140 <__swbuf_r+0x90>
 801d0f2:	68a3      	ldr	r3, [r4, #8]
 801d0f4:	3b01      	subs	r3, #1
 801d0f6:	60a3      	str	r3, [r4, #8]
 801d0f8:	6823      	ldr	r3, [r4, #0]
 801d0fa:	1c5a      	adds	r2, r3, #1
 801d0fc:	6022      	str	r2, [r4, #0]
 801d0fe:	701e      	strb	r6, [r3, #0]
 801d100:	6963      	ldr	r3, [r4, #20]
 801d102:	3001      	adds	r0, #1
 801d104:	4283      	cmp	r3, r0
 801d106:	d004      	beq.n	801d112 <__swbuf_r+0x62>
 801d108:	89a3      	ldrh	r3, [r4, #12]
 801d10a:	07db      	lsls	r3, r3, #31
 801d10c:	d506      	bpl.n	801d11c <__swbuf_r+0x6c>
 801d10e:	2e0a      	cmp	r6, #10
 801d110:	d104      	bne.n	801d11c <__swbuf_r+0x6c>
 801d112:	4621      	mov	r1, r4
 801d114:	4628      	mov	r0, r5
 801d116:	f000 ffab 	bl	801e070 <_fflush_r>
 801d11a:	b988      	cbnz	r0, 801d140 <__swbuf_r+0x90>
 801d11c:	4638      	mov	r0, r7
 801d11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d120:	4b0a      	ldr	r3, [pc, #40]	; (801d14c <__swbuf_r+0x9c>)
 801d122:	429c      	cmp	r4, r3
 801d124:	d101      	bne.n	801d12a <__swbuf_r+0x7a>
 801d126:	68ac      	ldr	r4, [r5, #8]
 801d128:	e7cf      	b.n	801d0ca <__swbuf_r+0x1a>
 801d12a:	4b09      	ldr	r3, [pc, #36]	; (801d150 <__swbuf_r+0xa0>)
 801d12c:	429c      	cmp	r4, r3
 801d12e:	bf08      	it	eq
 801d130:	68ec      	ldreq	r4, [r5, #12]
 801d132:	e7ca      	b.n	801d0ca <__swbuf_r+0x1a>
 801d134:	4621      	mov	r1, r4
 801d136:	4628      	mov	r0, r5
 801d138:	f000 f80c 	bl	801d154 <__swsetup_r>
 801d13c:	2800      	cmp	r0, #0
 801d13e:	d0cb      	beq.n	801d0d8 <__swbuf_r+0x28>
 801d140:	f04f 37ff 	mov.w	r7, #4294967295
 801d144:	e7ea      	b.n	801d11c <__swbuf_r+0x6c>
 801d146:	bf00      	nop
 801d148:	08021df4 	.word	0x08021df4
 801d14c:	08021e14 	.word	0x08021e14
 801d150:	08021dd4 	.word	0x08021dd4

0801d154 <__swsetup_r>:
 801d154:	4b32      	ldr	r3, [pc, #200]	; (801d220 <__swsetup_r+0xcc>)
 801d156:	b570      	push	{r4, r5, r6, lr}
 801d158:	681d      	ldr	r5, [r3, #0]
 801d15a:	4606      	mov	r6, r0
 801d15c:	460c      	mov	r4, r1
 801d15e:	b125      	cbz	r5, 801d16a <__swsetup_r+0x16>
 801d160:	69ab      	ldr	r3, [r5, #24]
 801d162:	b913      	cbnz	r3, 801d16a <__swsetup_r+0x16>
 801d164:	4628      	mov	r0, r5
 801d166:	f001 f817 	bl	801e198 <__sinit>
 801d16a:	4b2e      	ldr	r3, [pc, #184]	; (801d224 <__swsetup_r+0xd0>)
 801d16c:	429c      	cmp	r4, r3
 801d16e:	d10f      	bne.n	801d190 <__swsetup_r+0x3c>
 801d170:	686c      	ldr	r4, [r5, #4]
 801d172:	89a3      	ldrh	r3, [r4, #12]
 801d174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d178:	0719      	lsls	r1, r3, #28
 801d17a:	d42c      	bmi.n	801d1d6 <__swsetup_r+0x82>
 801d17c:	06dd      	lsls	r5, r3, #27
 801d17e:	d411      	bmi.n	801d1a4 <__swsetup_r+0x50>
 801d180:	2309      	movs	r3, #9
 801d182:	6033      	str	r3, [r6, #0]
 801d184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d188:	81a3      	strh	r3, [r4, #12]
 801d18a:	f04f 30ff 	mov.w	r0, #4294967295
 801d18e:	e03e      	b.n	801d20e <__swsetup_r+0xba>
 801d190:	4b25      	ldr	r3, [pc, #148]	; (801d228 <__swsetup_r+0xd4>)
 801d192:	429c      	cmp	r4, r3
 801d194:	d101      	bne.n	801d19a <__swsetup_r+0x46>
 801d196:	68ac      	ldr	r4, [r5, #8]
 801d198:	e7eb      	b.n	801d172 <__swsetup_r+0x1e>
 801d19a:	4b24      	ldr	r3, [pc, #144]	; (801d22c <__swsetup_r+0xd8>)
 801d19c:	429c      	cmp	r4, r3
 801d19e:	bf08      	it	eq
 801d1a0:	68ec      	ldreq	r4, [r5, #12]
 801d1a2:	e7e6      	b.n	801d172 <__swsetup_r+0x1e>
 801d1a4:	0758      	lsls	r0, r3, #29
 801d1a6:	d512      	bpl.n	801d1ce <__swsetup_r+0x7a>
 801d1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d1aa:	b141      	cbz	r1, 801d1be <__swsetup_r+0x6a>
 801d1ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d1b0:	4299      	cmp	r1, r3
 801d1b2:	d002      	beq.n	801d1ba <__swsetup_r+0x66>
 801d1b4:	4630      	mov	r0, r6
 801d1b6:	f7fd ffe5 	bl	801b184 <_free_r>
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	6363      	str	r3, [r4, #52]	; 0x34
 801d1be:	89a3      	ldrh	r3, [r4, #12]
 801d1c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d1c4:	81a3      	strh	r3, [r4, #12]
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	6063      	str	r3, [r4, #4]
 801d1ca:	6923      	ldr	r3, [r4, #16]
 801d1cc:	6023      	str	r3, [r4, #0]
 801d1ce:	89a3      	ldrh	r3, [r4, #12]
 801d1d0:	f043 0308 	orr.w	r3, r3, #8
 801d1d4:	81a3      	strh	r3, [r4, #12]
 801d1d6:	6923      	ldr	r3, [r4, #16]
 801d1d8:	b94b      	cbnz	r3, 801d1ee <__swsetup_r+0x9a>
 801d1da:	89a3      	ldrh	r3, [r4, #12]
 801d1dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d1e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d1e4:	d003      	beq.n	801d1ee <__swsetup_r+0x9a>
 801d1e6:	4621      	mov	r1, r4
 801d1e8:	4630      	mov	r0, r6
 801d1ea:	f001 fc1d 	bl	801ea28 <__smakebuf_r>
 801d1ee:	89a0      	ldrh	r0, [r4, #12]
 801d1f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d1f4:	f010 0301 	ands.w	r3, r0, #1
 801d1f8:	d00a      	beq.n	801d210 <__swsetup_r+0xbc>
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	60a3      	str	r3, [r4, #8]
 801d1fe:	6963      	ldr	r3, [r4, #20]
 801d200:	425b      	negs	r3, r3
 801d202:	61a3      	str	r3, [r4, #24]
 801d204:	6923      	ldr	r3, [r4, #16]
 801d206:	b943      	cbnz	r3, 801d21a <__swsetup_r+0xc6>
 801d208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d20c:	d1ba      	bne.n	801d184 <__swsetup_r+0x30>
 801d20e:	bd70      	pop	{r4, r5, r6, pc}
 801d210:	0781      	lsls	r1, r0, #30
 801d212:	bf58      	it	pl
 801d214:	6963      	ldrpl	r3, [r4, #20]
 801d216:	60a3      	str	r3, [r4, #8]
 801d218:	e7f4      	b.n	801d204 <__swsetup_r+0xb0>
 801d21a:	2000      	movs	r0, #0
 801d21c:	e7f7      	b.n	801d20e <__swsetup_r+0xba>
 801d21e:	bf00      	nop
 801d220:	20000140 	.word	0x20000140
 801d224:	08021df4 	.word	0x08021df4
 801d228:	08021e14 	.word	0x08021e14
 801d22c:	08021dd4 	.word	0x08021dd4

0801d230 <__assert_func>:
 801d230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d232:	4614      	mov	r4, r2
 801d234:	461a      	mov	r2, r3
 801d236:	4b09      	ldr	r3, [pc, #36]	; (801d25c <__assert_func+0x2c>)
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	4605      	mov	r5, r0
 801d23c:	68d8      	ldr	r0, [r3, #12]
 801d23e:	b14c      	cbz	r4, 801d254 <__assert_func+0x24>
 801d240:	4b07      	ldr	r3, [pc, #28]	; (801d260 <__assert_func+0x30>)
 801d242:	9100      	str	r1, [sp, #0]
 801d244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d248:	4906      	ldr	r1, [pc, #24]	; (801d264 <__assert_func+0x34>)
 801d24a:	462b      	mov	r3, r5
 801d24c:	f001 f822 	bl	801e294 <fiprintf>
 801d250:	f002 fc54 	bl	801fafc <abort>
 801d254:	4b04      	ldr	r3, [pc, #16]	; (801d268 <__assert_func+0x38>)
 801d256:	461c      	mov	r4, r3
 801d258:	e7f3      	b.n	801d242 <__assert_func+0x12>
 801d25a:	bf00      	nop
 801d25c:	20000140 	.word	0x20000140
 801d260:	08021c1c 	.word	0x08021c1c
 801d264:	08021c29 	.word	0x08021c29
 801d268:	08021c57 	.word	0x08021c57

0801d26c <quorem>:
 801d26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d270:	6903      	ldr	r3, [r0, #16]
 801d272:	690c      	ldr	r4, [r1, #16]
 801d274:	42a3      	cmp	r3, r4
 801d276:	4607      	mov	r7, r0
 801d278:	f2c0 8081 	blt.w	801d37e <quorem+0x112>
 801d27c:	3c01      	subs	r4, #1
 801d27e:	f101 0814 	add.w	r8, r1, #20
 801d282:	f100 0514 	add.w	r5, r0, #20
 801d286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d28a:	9301      	str	r3, [sp, #4]
 801d28c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d294:	3301      	adds	r3, #1
 801d296:	429a      	cmp	r2, r3
 801d298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d29c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d2a0:	fbb2 f6f3 	udiv	r6, r2, r3
 801d2a4:	d331      	bcc.n	801d30a <quorem+0x9e>
 801d2a6:	f04f 0e00 	mov.w	lr, #0
 801d2aa:	4640      	mov	r0, r8
 801d2ac:	46ac      	mov	ip, r5
 801d2ae:	46f2      	mov	sl, lr
 801d2b0:	f850 2b04 	ldr.w	r2, [r0], #4
 801d2b4:	b293      	uxth	r3, r2
 801d2b6:	fb06 e303 	mla	r3, r6, r3, lr
 801d2ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d2be:	b29b      	uxth	r3, r3
 801d2c0:	ebaa 0303 	sub.w	r3, sl, r3
 801d2c4:	f8dc a000 	ldr.w	sl, [ip]
 801d2c8:	0c12      	lsrs	r2, r2, #16
 801d2ca:	fa13 f38a 	uxtah	r3, r3, sl
 801d2ce:	fb06 e202 	mla	r2, r6, r2, lr
 801d2d2:	9300      	str	r3, [sp, #0]
 801d2d4:	9b00      	ldr	r3, [sp, #0]
 801d2d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d2da:	b292      	uxth	r2, r2
 801d2dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d2e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d2e4:	f8bd 3000 	ldrh.w	r3, [sp]
 801d2e8:	4581      	cmp	r9, r0
 801d2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d2ee:	f84c 3b04 	str.w	r3, [ip], #4
 801d2f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d2f6:	d2db      	bcs.n	801d2b0 <quorem+0x44>
 801d2f8:	f855 300b 	ldr.w	r3, [r5, fp]
 801d2fc:	b92b      	cbnz	r3, 801d30a <quorem+0x9e>
 801d2fe:	9b01      	ldr	r3, [sp, #4]
 801d300:	3b04      	subs	r3, #4
 801d302:	429d      	cmp	r5, r3
 801d304:	461a      	mov	r2, r3
 801d306:	d32e      	bcc.n	801d366 <quorem+0xfa>
 801d308:	613c      	str	r4, [r7, #16]
 801d30a:	4638      	mov	r0, r7
 801d30c:	f001 feb6 	bl	801f07c <__mcmp>
 801d310:	2800      	cmp	r0, #0
 801d312:	db24      	blt.n	801d35e <quorem+0xf2>
 801d314:	3601      	adds	r6, #1
 801d316:	4628      	mov	r0, r5
 801d318:	f04f 0c00 	mov.w	ip, #0
 801d31c:	f858 2b04 	ldr.w	r2, [r8], #4
 801d320:	f8d0 e000 	ldr.w	lr, [r0]
 801d324:	b293      	uxth	r3, r2
 801d326:	ebac 0303 	sub.w	r3, ip, r3
 801d32a:	0c12      	lsrs	r2, r2, #16
 801d32c:	fa13 f38e 	uxtah	r3, r3, lr
 801d330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d338:	b29b      	uxth	r3, r3
 801d33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d33e:	45c1      	cmp	r9, r8
 801d340:	f840 3b04 	str.w	r3, [r0], #4
 801d344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d348:	d2e8      	bcs.n	801d31c <quorem+0xb0>
 801d34a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d34e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d352:	b922      	cbnz	r2, 801d35e <quorem+0xf2>
 801d354:	3b04      	subs	r3, #4
 801d356:	429d      	cmp	r5, r3
 801d358:	461a      	mov	r2, r3
 801d35a:	d30a      	bcc.n	801d372 <quorem+0x106>
 801d35c:	613c      	str	r4, [r7, #16]
 801d35e:	4630      	mov	r0, r6
 801d360:	b003      	add	sp, #12
 801d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d366:	6812      	ldr	r2, [r2, #0]
 801d368:	3b04      	subs	r3, #4
 801d36a:	2a00      	cmp	r2, #0
 801d36c:	d1cc      	bne.n	801d308 <quorem+0x9c>
 801d36e:	3c01      	subs	r4, #1
 801d370:	e7c7      	b.n	801d302 <quorem+0x96>
 801d372:	6812      	ldr	r2, [r2, #0]
 801d374:	3b04      	subs	r3, #4
 801d376:	2a00      	cmp	r2, #0
 801d378:	d1f0      	bne.n	801d35c <quorem+0xf0>
 801d37a:	3c01      	subs	r4, #1
 801d37c:	e7eb      	b.n	801d356 <quorem+0xea>
 801d37e:	2000      	movs	r0, #0
 801d380:	e7ee      	b.n	801d360 <quorem+0xf4>
 801d382:	0000      	movs	r0, r0
 801d384:	0000      	movs	r0, r0
	...

0801d388 <_dtoa_r>:
 801d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d38c:	ed2d 8b04 	vpush	{d8-d9}
 801d390:	ec57 6b10 	vmov	r6, r7, d0
 801d394:	b093      	sub	sp, #76	; 0x4c
 801d396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d39c:	9106      	str	r1, [sp, #24]
 801d39e:	ee10 aa10 	vmov	sl, s0
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	9209      	str	r2, [sp, #36]	; 0x24
 801d3a6:	930c      	str	r3, [sp, #48]	; 0x30
 801d3a8:	46bb      	mov	fp, r7
 801d3aa:	b975      	cbnz	r5, 801d3ca <_dtoa_r+0x42>
 801d3ac:	2010      	movs	r0, #16
 801d3ae:	f7fd feb1 	bl	801b114 <malloc>
 801d3b2:	4602      	mov	r2, r0
 801d3b4:	6260      	str	r0, [r4, #36]	; 0x24
 801d3b6:	b920      	cbnz	r0, 801d3c2 <_dtoa_r+0x3a>
 801d3b8:	4ba7      	ldr	r3, [pc, #668]	; (801d658 <_dtoa_r+0x2d0>)
 801d3ba:	21ea      	movs	r1, #234	; 0xea
 801d3bc:	48a7      	ldr	r0, [pc, #668]	; (801d65c <_dtoa_r+0x2d4>)
 801d3be:	f7ff ff37 	bl	801d230 <__assert_func>
 801d3c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d3c6:	6005      	str	r5, [r0, #0]
 801d3c8:	60c5      	str	r5, [r0, #12]
 801d3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d3cc:	6819      	ldr	r1, [r3, #0]
 801d3ce:	b151      	cbz	r1, 801d3e6 <_dtoa_r+0x5e>
 801d3d0:	685a      	ldr	r2, [r3, #4]
 801d3d2:	604a      	str	r2, [r1, #4]
 801d3d4:	2301      	movs	r3, #1
 801d3d6:	4093      	lsls	r3, r2
 801d3d8:	608b      	str	r3, [r1, #8]
 801d3da:	4620      	mov	r0, r4
 801d3dc:	f001 fbc2 	bl	801eb64 <_Bfree>
 801d3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	601a      	str	r2, [r3, #0]
 801d3e6:	1e3b      	subs	r3, r7, #0
 801d3e8:	bfaa      	itet	ge
 801d3ea:	2300      	movge	r3, #0
 801d3ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d3f0:	f8c8 3000 	strge.w	r3, [r8]
 801d3f4:	4b9a      	ldr	r3, [pc, #616]	; (801d660 <_dtoa_r+0x2d8>)
 801d3f6:	bfbc      	itt	lt
 801d3f8:	2201      	movlt	r2, #1
 801d3fa:	f8c8 2000 	strlt.w	r2, [r8]
 801d3fe:	ea33 030b 	bics.w	r3, r3, fp
 801d402:	d11b      	bne.n	801d43c <_dtoa_r+0xb4>
 801d404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d406:	f242 730f 	movw	r3, #9999	; 0x270f
 801d40a:	6013      	str	r3, [r2, #0]
 801d40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d410:	4333      	orrs	r3, r6
 801d412:	f000 8592 	beq.w	801df3a <_dtoa_r+0xbb2>
 801d416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d418:	b963      	cbnz	r3, 801d434 <_dtoa_r+0xac>
 801d41a:	4b92      	ldr	r3, [pc, #584]	; (801d664 <_dtoa_r+0x2dc>)
 801d41c:	e022      	b.n	801d464 <_dtoa_r+0xdc>
 801d41e:	4b92      	ldr	r3, [pc, #584]	; (801d668 <_dtoa_r+0x2e0>)
 801d420:	9301      	str	r3, [sp, #4]
 801d422:	3308      	adds	r3, #8
 801d424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d426:	6013      	str	r3, [r2, #0]
 801d428:	9801      	ldr	r0, [sp, #4]
 801d42a:	b013      	add	sp, #76	; 0x4c
 801d42c:	ecbd 8b04 	vpop	{d8-d9}
 801d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d434:	4b8b      	ldr	r3, [pc, #556]	; (801d664 <_dtoa_r+0x2dc>)
 801d436:	9301      	str	r3, [sp, #4]
 801d438:	3303      	adds	r3, #3
 801d43a:	e7f3      	b.n	801d424 <_dtoa_r+0x9c>
 801d43c:	2200      	movs	r2, #0
 801d43e:	2300      	movs	r3, #0
 801d440:	4650      	mov	r0, sl
 801d442:	4659      	mov	r1, fp
 801d444:	f7e3 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 801d448:	ec4b ab19 	vmov	d9, sl, fp
 801d44c:	4680      	mov	r8, r0
 801d44e:	b158      	cbz	r0, 801d468 <_dtoa_r+0xe0>
 801d450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d452:	2301      	movs	r3, #1
 801d454:	6013      	str	r3, [r2, #0]
 801d456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d458:	2b00      	cmp	r3, #0
 801d45a:	f000 856b 	beq.w	801df34 <_dtoa_r+0xbac>
 801d45e:	4883      	ldr	r0, [pc, #524]	; (801d66c <_dtoa_r+0x2e4>)
 801d460:	6018      	str	r0, [r3, #0]
 801d462:	1e43      	subs	r3, r0, #1
 801d464:	9301      	str	r3, [sp, #4]
 801d466:	e7df      	b.n	801d428 <_dtoa_r+0xa0>
 801d468:	ec4b ab10 	vmov	d0, sl, fp
 801d46c:	aa10      	add	r2, sp, #64	; 0x40
 801d46e:	a911      	add	r1, sp, #68	; 0x44
 801d470:	4620      	mov	r0, r4
 801d472:	f001 ff25 	bl	801f2c0 <__d2b>
 801d476:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d47a:	ee08 0a10 	vmov	s16, r0
 801d47e:	2d00      	cmp	r5, #0
 801d480:	f000 8084 	beq.w	801d58c <_dtoa_r+0x204>
 801d484:	ee19 3a90 	vmov	r3, s19
 801d488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d48c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d490:	4656      	mov	r6, sl
 801d492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d49a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d49e:	4b74      	ldr	r3, [pc, #464]	; (801d670 <_dtoa_r+0x2e8>)
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	4630      	mov	r0, r6
 801d4a4:	4639      	mov	r1, r7
 801d4a6:	f7e2 ff07 	bl	80002b8 <__aeabi_dsub>
 801d4aa:	a365      	add	r3, pc, #404	; (adr r3, 801d640 <_dtoa_r+0x2b8>)
 801d4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b0:	f7e3 f8ba 	bl	8000628 <__aeabi_dmul>
 801d4b4:	a364      	add	r3, pc, #400	; (adr r3, 801d648 <_dtoa_r+0x2c0>)
 801d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ba:	f7e2 feff 	bl	80002bc <__adddf3>
 801d4be:	4606      	mov	r6, r0
 801d4c0:	4628      	mov	r0, r5
 801d4c2:	460f      	mov	r7, r1
 801d4c4:	f7e3 f846 	bl	8000554 <__aeabi_i2d>
 801d4c8:	a361      	add	r3, pc, #388	; (adr r3, 801d650 <_dtoa_r+0x2c8>)
 801d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ce:	f7e3 f8ab 	bl	8000628 <__aeabi_dmul>
 801d4d2:	4602      	mov	r2, r0
 801d4d4:	460b      	mov	r3, r1
 801d4d6:	4630      	mov	r0, r6
 801d4d8:	4639      	mov	r1, r7
 801d4da:	f7e2 feef 	bl	80002bc <__adddf3>
 801d4de:	4606      	mov	r6, r0
 801d4e0:	460f      	mov	r7, r1
 801d4e2:	f7e3 fb51 	bl	8000b88 <__aeabi_d2iz>
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	9000      	str	r0, [sp, #0]
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	4630      	mov	r0, r6
 801d4ee:	4639      	mov	r1, r7
 801d4f0:	f7e3 fb0c 	bl	8000b0c <__aeabi_dcmplt>
 801d4f4:	b150      	cbz	r0, 801d50c <_dtoa_r+0x184>
 801d4f6:	9800      	ldr	r0, [sp, #0]
 801d4f8:	f7e3 f82c 	bl	8000554 <__aeabi_i2d>
 801d4fc:	4632      	mov	r2, r6
 801d4fe:	463b      	mov	r3, r7
 801d500:	f7e3 fafa 	bl	8000af8 <__aeabi_dcmpeq>
 801d504:	b910      	cbnz	r0, 801d50c <_dtoa_r+0x184>
 801d506:	9b00      	ldr	r3, [sp, #0]
 801d508:	3b01      	subs	r3, #1
 801d50a:	9300      	str	r3, [sp, #0]
 801d50c:	9b00      	ldr	r3, [sp, #0]
 801d50e:	2b16      	cmp	r3, #22
 801d510:	d85a      	bhi.n	801d5c8 <_dtoa_r+0x240>
 801d512:	9a00      	ldr	r2, [sp, #0]
 801d514:	4b57      	ldr	r3, [pc, #348]	; (801d674 <_dtoa_r+0x2ec>)
 801d516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d51e:	ec51 0b19 	vmov	r0, r1, d9
 801d522:	f7e3 faf3 	bl	8000b0c <__aeabi_dcmplt>
 801d526:	2800      	cmp	r0, #0
 801d528:	d050      	beq.n	801d5cc <_dtoa_r+0x244>
 801d52a:	9b00      	ldr	r3, [sp, #0]
 801d52c:	3b01      	subs	r3, #1
 801d52e:	9300      	str	r3, [sp, #0]
 801d530:	2300      	movs	r3, #0
 801d532:	930b      	str	r3, [sp, #44]	; 0x2c
 801d534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d536:	1b5d      	subs	r5, r3, r5
 801d538:	1e6b      	subs	r3, r5, #1
 801d53a:	9305      	str	r3, [sp, #20]
 801d53c:	bf45      	ittet	mi
 801d53e:	f1c5 0301 	rsbmi	r3, r5, #1
 801d542:	9304      	strmi	r3, [sp, #16]
 801d544:	2300      	movpl	r3, #0
 801d546:	2300      	movmi	r3, #0
 801d548:	bf4c      	ite	mi
 801d54a:	9305      	strmi	r3, [sp, #20]
 801d54c:	9304      	strpl	r3, [sp, #16]
 801d54e:	9b00      	ldr	r3, [sp, #0]
 801d550:	2b00      	cmp	r3, #0
 801d552:	db3d      	blt.n	801d5d0 <_dtoa_r+0x248>
 801d554:	9b05      	ldr	r3, [sp, #20]
 801d556:	9a00      	ldr	r2, [sp, #0]
 801d558:	920a      	str	r2, [sp, #40]	; 0x28
 801d55a:	4413      	add	r3, r2
 801d55c:	9305      	str	r3, [sp, #20]
 801d55e:	2300      	movs	r3, #0
 801d560:	9307      	str	r3, [sp, #28]
 801d562:	9b06      	ldr	r3, [sp, #24]
 801d564:	2b09      	cmp	r3, #9
 801d566:	f200 8089 	bhi.w	801d67c <_dtoa_r+0x2f4>
 801d56a:	2b05      	cmp	r3, #5
 801d56c:	bfc4      	itt	gt
 801d56e:	3b04      	subgt	r3, #4
 801d570:	9306      	strgt	r3, [sp, #24]
 801d572:	9b06      	ldr	r3, [sp, #24]
 801d574:	f1a3 0302 	sub.w	r3, r3, #2
 801d578:	bfcc      	ite	gt
 801d57a:	2500      	movgt	r5, #0
 801d57c:	2501      	movle	r5, #1
 801d57e:	2b03      	cmp	r3, #3
 801d580:	f200 8087 	bhi.w	801d692 <_dtoa_r+0x30a>
 801d584:	e8df f003 	tbb	[pc, r3]
 801d588:	59383a2d 	.word	0x59383a2d
 801d58c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d590:	441d      	add	r5, r3
 801d592:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d596:	2b20      	cmp	r3, #32
 801d598:	bfc1      	itttt	gt
 801d59a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d59e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d5a2:	fa0b f303 	lslgt.w	r3, fp, r3
 801d5a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d5aa:	bfda      	itte	le
 801d5ac:	f1c3 0320 	rsble	r3, r3, #32
 801d5b0:	fa06 f003 	lslle.w	r0, r6, r3
 801d5b4:	4318      	orrgt	r0, r3
 801d5b6:	f7e2 ffbd 	bl	8000534 <__aeabi_ui2d>
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	4606      	mov	r6, r0
 801d5be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d5c2:	3d01      	subs	r5, #1
 801d5c4:	930e      	str	r3, [sp, #56]	; 0x38
 801d5c6:	e76a      	b.n	801d49e <_dtoa_r+0x116>
 801d5c8:	2301      	movs	r3, #1
 801d5ca:	e7b2      	b.n	801d532 <_dtoa_r+0x1aa>
 801d5cc:	900b      	str	r0, [sp, #44]	; 0x2c
 801d5ce:	e7b1      	b.n	801d534 <_dtoa_r+0x1ac>
 801d5d0:	9b04      	ldr	r3, [sp, #16]
 801d5d2:	9a00      	ldr	r2, [sp, #0]
 801d5d4:	1a9b      	subs	r3, r3, r2
 801d5d6:	9304      	str	r3, [sp, #16]
 801d5d8:	4253      	negs	r3, r2
 801d5da:	9307      	str	r3, [sp, #28]
 801d5dc:	2300      	movs	r3, #0
 801d5de:	930a      	str	r3, [sp, #40]	; 0x28
 801d5e0:	e7bf      	b.n	801d562 <_dtoa_r+0x1da>
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	9308      	str	r3, [sp, #32]
 801d5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	dc55      	bgt.n	801d698 <_dtoa_r+0x310>
 801d5ec:	2301      	movs	r3, #1
 801d5ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d5f2:	461a      	mov	r2, r3
 801d5f4:	9209      	str	r2, [sp, #36]	; 0x24
 801d5f6:	e00c      	b.n	801d612 <_dtoa_r+0x28a>
 801d5f8:	2301      	movs	r3, #1
 801d5fa:	e7f3      	b.n	801d5e4 <_dtoa_r+0x25c>
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d600:	9308      	str	r3, [sp, #32]
 801d602:	9b00      	ldr	r3, [sp, #0]
 801d604:	4413      	add	r3, r2
 801d606:	9302      	str	r3, [sp, #8]
 801d608:	3301      	adds	r3, #1
 801d60a:	2b01      	cmp	r3, #1
 801d60c:	9303      	str	r3, [sp, #12]
 801d60e:	bfb8      	it	lt
 801d610:	2301      	movlt	r3, #1
 801d612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d614:	2200      	movs	r2, #0
 801d616:	6042      	str	r2, [r0, #4]
 801d618:	2204      	movs	r2, #4
 801d61a:	f102 0614 	add.w	r6, r2, #20
 801d61e:	429e      	cmp	r6, r3
 801d620:	6841      	ldr	r1, [r0, #4]
 801d622:	d93d      	bls.n	801d6a0 <_dtoa_r+0x318>
 801d624:	4620      	mov	r0, r4
 801d626:	f001 fa5d 	bl	801eae4 <_Balloc>
 801d62a:	9001      	str	r0, [sp, #4]
 801d62c:	2800      	cmp	r0, #0
 801d62e:	d13b      	bne.n	801d6a8 <_dtoa_r+0x320>
 801d630:	4b11      	ldr	r3, [pc, #68]	; (801d678 <_dtoa_r+0x2f0>)
 801d632:	4602      	mov	r2, r0
 801d634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d638:	e6c0      	b.n	801d3bc <_dtoa_r+0x34>
 801d63a:	2301      	movs	r3, #1
 801d63c:	e7df      	b.n	801d5fe <_dtoa_r+0x276>
 801d63e:	bf00      	nop
 801d640:	636f4361 	.word	0x636f4361
 801d644:	3fd287a7 	.word	0x3fd287a7
 801d648:	8b60c8b3 	.word	0x8b60c8b3
 801d64c:	3fc68a28 	.word	0x3fc68a28
 801d650:	509f79fb 	.word	0x509f79fb
 801d654:	3fd34413 	.word	0x3fd34413
 801d658:	08021ba8 	.word	0x08021ba8
 801d65c:	08021d66 	.word	0x08021d66
 801d660:	7ff00000 	.word	0x7ff00000
 801d664:	08021d62 	.word	0x08021d62
 801d668:	08021d59 	.word	0x08021d59
 801d66c:	08021b2d 	.word	0x08021b2d
 801d670:	3ff80000 	.word	0x3ff80000
 801d674:	08021f38 	.word	0x08021f38
 801d678:	08021dc1 	.word	0x08021dc1
 801d67c:	2501      	movs	r5, #1
 801d67e:	2300      	movs	r3, #0
 801d680:	9306      	str	r3, [sp, #24]
 801d682:	9508      	str	r5, [sp, #32]
 801d684:	f04f 33ff 	mov.w	r3, #4294967295
 801d688:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d68c:	2200      	movs	r2, #0
 801d68e:	2312      	movs	r3, #18
 801d690:	e7b0      	b.n	801d5f4 <_dtoa_r+0x26c>
 801d692:	2301      	movs	r3, #1
 801d694:	9308      	str	r3, [sp, #32]
 801d696:	e7f5      	b.n	801d684 <_dtoa_r+0x2fc>
 801d698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d69a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d69e:	e7b8      	b.n	801d612 <_dtoa_r+0x28a>
 801d6a0:	3101      	adds	r1, #1
 801d6a2:	6041      	str	r1, [r0, #4]
 801d6a4:	0052      	lsls	r2, r2, #1
 801d6a6:	e7b8      	b.n	801d61a <_dtoa_r+0x292>
 801d6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d6aa:	9a01      	ldr	r2, [sp, #4]
 801d6ac:	601a      	str	r2, [r3, #0]
 801d6ae:	9b03      	ldr	r3, [sp, #12]
 801d6b0:	2b0e      	cmp	r3, #14
 801d6b2:	f200 809d 	bhi.w	801d7f0 <_dtoa_r+0x468>
 801d6b6:	2d00      	cmp	r5, #0
 801d6b8:	f000 809a 	beq.w	801d7f0 <_dtoa_r+0x468>
 801d6bc:	9b00      	ldr	r3, [sp, #0]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	dd32      	ble.n	801d728 <_dtoa_r+0x3a0>
 801d6c2:	4ab7      	ldr	r2, [pc, #732]	; (801d9a0 <_dtoa_r+0x618>)
 801d6c4:	f003 030f 	and.w	r3, r3, #15
 801d6c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d6cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d6d0:	9b00      	ldr	r3, [sp, #0]
 801d6d2:	05d8      	lsls	r0, r3, #23
 801d6d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d6d8:	d516      	bpl.n	801d708 <_dtoa_r+0x380>
 801d6da:	4bb2      	ldr	r3, [pc, #712]	; (801d9a4 <_dtoa_r+0x61c>)
 801d6dc:	ec51 0b19 	vmov	r0, r1, d9
 801d6e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d6e4:	f7e3 f8ca 	bl	800087c <__aeabi_ddiv>
 801d6e8:	f007 070f 	and.w	r7, r7, #15
 801d6ec:	4682      	mov	sl, r0
 801d6ee:	468b      	mov	fp, r1
 801d6f0:	2503      	movs	r5, #3
 801d6f2:	4eac      	ldr	r6, [pc, #688]	; (801d9a4 <_dtoa_r+0x61c>)
 801d6f4:	b957      	cbnz	r7, 801d70c <_dtoa_r+0x384>
 801d6f6:	4642      	mov	r2, r8
 801d6f8:	464b      	mov	r3, r9
 801d6fa:	4650      	mov	r0, sl
 801d6fc:	4659      	mov	r1, fp
 801d6fe:	f7e3 f8bd 	bl	800087c <__aeabi_ddiv>
 801d702:	4682      	mov	sl, r0
 801d704:	468b      	mov	fp, r1
 801d706:	e028      	b.n	801d75a <_dtoa_r+0x3d2>
 801d708:	2502      	movs	r5, #2
 801d70a:	e7f2      	b.n	801d6f2 <_dtoa_r+0x36a>
 801d70c:	07f9      	lsls	r1, r7, #31
 801d70e:	d508      	bpl.n	801d722 <_dtoa_r+0x39a>
 801d710:	4640      	mov	r0, r8
 801d712:	4649      	mov	r1, r9
 801d714:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d718:	f7e2 ff86 	bl	8000628 <__aeabi_dmul>
 801d71c:	3501      	adds	r5, #1
 801d71e:	4680      	mov	r8, r0
 801d720:	4689      	mov	r9, r1
 801d722:	107f      	asrs	r7, r7, #1
 801d724:	3608      	adds	r6, #8
 801d726:	e7e5      	b.n	801d6f4 <_dtoa_r+0x36c>
 801d728:	f000 809b 	beq.w	801d862 <_dtoa_r+0x4da>
 801d72c:	9b00      	ldr	r3, [sp, #0]
 801d72e:	4f9d      	ldr	r7, [pc, #628]	; (801d9a4 <_dtoa_r+0x61c>)
 801d730:	425e      	negs	r6, r3
 801d732:	4b9b      	ldr	r3, [pc, #620]	; (801d9a0 <_dtoa_r+0x618>)
 801d734:	f006 020f 	and.w	r2, r6, #15
 801d738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d740:	ec51 0b19 	vmov	r0, r1, d9
 801d744:	f7e2 ff70 	bl	8000628 <__aeabi_dmul>
 801d748:	1136      	asrs	r6, r6, #4
 801d74a:	4682      	mov	sl, r0
 801d74c:	468b      	mov	fp, r1
 801d74e:	2300      	movs	r3, #0
 801d750:	2502      	movs	r5, #2
 801d752:	2e00      	cmp	r6, #0
 801d754:	d17a      	bne.n	801d84c <_dtoa_r+0x4c4>
 801d756:	2b00      	cmp	r3, #0
 801d758:	d1d3      	bne.n	801d702 <_dtoa_r+0x37a>
 801d75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	f000 8082 	beq.w	801d866 <_dtoa_r+0x4de>
 801d762:	4b91      	ldr	r3, [pc, #580]	; (801d9a8 <_dtoa_r+0x620>)
 801d764:	2200      	movs	r2, #0
 801d766:	4650      	mov	r0, sl
 801d768:	4659      	mov	r1, fp
 801d76a:	f7e3 f9cf 	bl	8000b0c <__aeabi_dcmplt>
 801d76e:	2800      	cmp	r0, #0
 801d770:	d079      	beq.n	801d866 <_dtoa_r+0x4de>
 801d772:	9b03      	ldr	r3, [sp, #12]
 801d774:	2b00      	cmp	r3, #0
 801d776:	d076      	beq.n	801d866 <_dtoa_r+0x4de>
 801d778:	9b02      	ldr	r3, [sp, #8]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	dd36      	ble.n	801d7ec <_dtoa_r+0x464>
 801d77e:	9b00      	ldr	r3, [sp, #0]
 801d780:	4650      	mov	r0, sl
 801d782:	4659      	mov	r1, fp
 801d784:	1e5f      	subs	r7, r3, #1
 801d786:	2200      	movs	r2, #0
 801d788:	4b88      	ldr	r3, [pc, #544]	; (801d9ac <_dtoa_r+0x624>)
 801d78a:	f7e2 ff4d 	bl	8000628 <__aeabi_dmul>
 801d78e:	9e02      	ldr	r6, [sp, #8]
 801d790:	4682      	mov	sl, r0
 801d792:	468b      	mov	fp, r1
 801d794:	3501      	adds	r5, #1
 801d796:	4628      	mov	r0, r5
 801d798:	f7e2 fedc 	bl	8000554 <__aeabi_i2d>
 801d79c:	4652      	mov	r2, sl
 801d79e:	465b      	mov	r3, fp
 801d7a0:	f7e2 ff42 	bl	8000628 <__aeabi_dmul>
 801d7a4:	4b82      	ldr	r3, [pc, #520]	; (801d9b0 <_dtoa_r+0x628>)
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	f7e2 fd88 	bl	80002bc <__adddf3>
 801d7ac:	46d0      	mov	r8, sl
 801d7ae:	46d9      	mov	r9, fp
 801d7b0:	4682      	mov	sl, r0
 801d7b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d7b6:	2e00      	cmp	r6, #0
 801d7b8:	d158      	bne.n	801d86c <_dtoa_r+0x4e4>
 801d7ba:	4b7e      	ldr	r3, [pc, #504]	; (801d9b4 <_dtoa_r+0x62c>)
 801d7bc:	2200      	movs	r2, #0
 801d7be:	4640      	mov	r0, r8
 801d7c0:	4649      	mov	r1, r9
 801d7c2:	f7e2 fd79 	bl	80002b8 <__aeabi_dsub>
 801d7c6:	4652      	mov	r2, sl
 801d7c8:	465b      	mov	r3, fp
 801d7ca:	4680      	mov	r8, r0
 801d7cc:	4689      	mov	r9, r1
 801d7ce:	f7e3 f9bb 	bl	8000b48 <__aeabi_dcmpgt>
 801d7d2:	2800      	cmp	r0, #0
 801d7d4:	f040 8295 	bne.w	801dd02 <_dtoa_r+0x97a>
 801d7d8:	4652      	mov	r2, sl
 801d7da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d7de:	4640      	mov	r0, r8
 801d7e0:	4649      	mov	r1, r9
 801d7e2:	f7e3 f993 	bl	8000b0c <__aeabi_dcmplt>
 801d7e6:	2800      	cmp	r0, #0
 801d7e8:	f040 8289 	bne.w	801dcfe <_dtoa_r+0x976>
 801d7ec:	ec5b ab19 	vmov	sl, fp, d9
 801d7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	f2c0 8148 	blt.w	801da88 <_dtoa_r+0x700>
 801d7f8:	9a00      	ldr	r2, [sp, #0]
 801d7fa:	2a0e      	cmp	r2, #14
 801d7fc:	f300 8144 	bgt.w	801da88 <_dtoa_r+0x700>
 801d800:	4b67      	ldr	r3, [pc, #412]	; (801d9a0 <_dtoa_r+0x618>)
 801d802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d806:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	f280 80d5 	bge.w	801d9bc <_dtoa_r+0x634>
 801d812:	9b03      	ldr	r3, [sp, #12]
 801d814:	2b00      	cmp	r3, #0
 801d816:	f300 80d1 	bgt.w	801d9bc <_dtoa_r+0x634>
 801d81a:	f040 826f 	bne.w	801dcfc <_dtoa_r+0x974>
 801d81e:	4b65      	ldr	r3, [pc, #404]	; (801d9b4 <_dtoa_r+0x62c>)
 801d820:	2200      	movs	r2, #0
 801d822:	4640      	mov	r0, r8
 801d824:	4649      	mov	r1, r9
 801d826:	f7e2 feff 	bl	8000628 <__aeabi_dmul>
 801d82a:	4652      	mov	r2, sl
 801d82c:	465b      	mov	r3, fp
 801d82e:	f7e3 f981 	bl	8000b34 <__aeabi_dcmpge>
 801d832:	9e03      	ldr	r6, [sp, #12]
 801d834:	4637      	mov	r7, r6
 801d836:	2800      	cmp	r0, #0
 801d838:	f040 8245 	bne.w	801dcc6 <_dtoa_r+0x93e>
 801d83c:	9d01      	ldr	r5, [sp, #4]
 801d83e:	2331      	movs	r3, #49	; 0x31
 801d840:	f805 3b01 	strb.w	r3, [r5], #1
 801d844:	9b00      	ldr	r3, [sp, #0]
 801d846:	3301      	adds	r3, #1
 801d848:	9300      	str	r3, [sp, #0]
 801d84a:	e240      	b.n	801dcce <_dtoa_r+0x946>
 801d84c:	07f2      	lsls	r2, r6, #31
 801d84e:	d505      	bpl.n	801d85c <_dtoa_r+0x4d4>
 801d850:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d854:	f7e2 fee8 	bl	8000628 <__aeabi_dmul>
 801d858:	3501      	adds	r5, #1
 801d85a:	2301      	movs	r3, #1
 801d85c:	1076      	asrs	r6, r6, #1
 801d85e:	3708      	adds	r7, #8
 801d860:	e777      	b.n	801d752 <_dtoa_r+0x3ca>
 801d862:	2502      	movs	r5, #2
 801d864:	e779      	b.n	801d75a <_dtoa_r+0x3d2>
 801d866:	9f00      	ldr	r7, [sp, #0]
 801d868:	9e03      	ldr	r6, [sp, #12]
 801d86a:	e794      	b.n	801d796 <_dtoa_r+0x40e>
 801d86c:	9901      	ldr	r1, [sp, #4]
 801d86e:	4b4c      	ldr	r3, [pc, #304]	; (801d9a0 <_dtoa_r+0x618>)
 801d870:	4431      	add	r1, r6
 801d872:	910d      	str	r1, [sp, #52]	; 0x34
 801d874:	9908      	ldr	r1, [sp, #32]
 801d876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d87a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d87e:	2900      	cmp	r1, #0
 801d880:	d043      	beq.n	801d90a <_dtoa_r+0x582>
 801d882:	494d      	ldr	r1, [pc, #308]	; (801d9b8 <_dtoa_r+0x630>)
 801d884:	2000      	movs	r0, #0
 801d886:	f7e2 fff9 	bl	800087c <__aeabi_ddiv>
 801d88a:	4652      	mov	r2, sl
 801d88c:	465b      	mov	r3, fp
 801d88e:	f7e2 fd13 	bl	80002b8 <__aeabi_dsub>
 801d892:	9d01      	ldr	r5, [sp, #4]
 801d894:	4682      	mov	sl, r0
 801d896:	468b      	mov	fp, r1
 801d898:	4649      	mov	r1, r9
 801d89a:	4640      	mov	r0, r8
 801d89c:	f7e3 f974 	bl	8000b88 <__aeabi_d2iz>
 801d8a0:	4606      	mov	r6, r0
 801d8a2:	f7e2 fe57 	bl	8000554 <__aeabi_i2d>
 801d8a6:	4602      	mov	r2, r0
 801d8a8:	460b      	mov	r3, r1
 801d8aa:	4640      	mov	r0, r8
 801d8ac:	4649      	mov	r1, r9
 801d8ae:	f7e2 fd03 	bl	80002b8 <__aeabi_dsub>
 801d8b2:	3630      	adds	r6, #48	; 0x30
 801d8b4:	f805 6b01 	strb.w	r6, [r5], #1
 801d8b8:	4652      	mov	r2, sl
 801d8ba:	465b      	mov	r3, fp
 801d8bc:	4680      	mov	r8, r0
 801d8be:	4689      	mov	r9, r1
 801d8c0:	f7e3 f924 	bl	8000b0c <__aeabi_dcmplt>
 801d8c4:	2800      	cmp	r0, #0
 801d8c6:	d163      	bne.n	801d990 <_dtoa_r+0x608>
 801d8c8:	4642      	mov	r2, r8
 801d8ca:	464b      	mov	r3, r9
 801d8cc:	4936      	ldr	r1, [pc, #216]	; (801d9a8 <_dtoa_r+0x620>)
 801d8ce:	2000      	movs	r0, #0
 801d8d0:	f7e2 fcf2 	bl	80002b8 <__aeabi_dsub>
 801d8d4:	4652      	mov	r2, sl
 801d8d6:	465b      	mov	r3, fp
 801d8d8:	f7e3 f918 	bl	8000b0c <__aeabi_dcmplt>
 801d8dc:	2800      	cmp	r0, #0
 801d8de:	f040 80b5 	bne.w	801da4c <_dtoa_r+0x6c4>
 801d8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8e4:	429d      	cmp	r5, r3
 801d8e6:	d081      	beq.n	801d7ec <_dtoa_r+0x464>
 801d8e8:	4b30      	ldr	r3, [pc, #192]	; (801d9ac <_dtoa_r+0x624>)
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	4650      	mov	r0, sl
 801d8ee:	4659      	mov	r1, fp
 801d8f0:	f7e2 fe9a 	bl	8000628 <__aeabi_dmul>
 801d8f4:	4b2d      	ldr	r3, [pc, #180]	; (801d9ac <_dtoa_r+0x624>)
 801d8f6:	4682      	mov	sl, r0
 801d8f8:	468b      	mov	fp, r1
 801d8fa:	4640      	mov	r0, r8
 801d8fc:	4649      	mov	r1, r9
 801d8fe:	2200      	movs	r2, #0
 801d900:	f7e2 fe92 	bl	8000628 <__aeabi_dmul>
 801d904:	4680      	mov	r8, r0
 801d906:	4689      	mov	r9, r1
 801d908:	e7c6      	b.n	801d898 <_dtoa_r+0x510>
 801d90a:	4650      	mov	r0, sl
 801d90c:	4659      	mov	r1, fp
 801d90e:	f7e2 fe8b 	bl	8000628 <__aeabi_dmul>
 801d912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d914:	9d01      	ldr	r5, [sp, #4]
 801d916:	930f      	str	r3, [sp, #60]	; 0x3c
 801d918:	4682      	mov	sl, r0
 801d91a:	468b      	mov	fp, r1
 801d91c:	4649      	mov	r1, r9
 801d91e:	4640      	mov	r0, r8
 801d920:	f7e3 f932 	bl	8000b88 <__aeabi_d2iz>
 801d924:	4606      	mov	r6, r0
 801d926:	f7e2 fe15 	bl	8000554 <__aeabi_i2d>
 801d92a:	3630      	adds	r6, #48	; 0x30
 801d92c:	4602      	mov	r2, r0
 801d92e:	460b      	mov	r3, r1
 801d930:	4640      	mov	r0, r8
 801d932:	4649      	mov	r1, r9
 801d934:	f7e2 fcc0 	bl	80002b8 <__aeabi_dsub>
 801d938:	f805 6b01 	strb.w	r6, [r5], #1
 801d93c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d93e:	429d      	cmp	r5, r3
 801d940:	4680      	mov	r8, r0
 801d942:	4689      	mov	r9, r1
 801d944:	f04f 0200 	mov.w	r2, #0
 801d948:	d124      	bne.n	801d994 <_dtoa_r+0x60c>
 801d94a:	4b1b      	ldr	r3, [pc, #108]	; (801d9b8 <_dtoa_r+0x630>)
 801d94c:	4650      	mov	r0, sl
 801d94e:	4659      	mov	r1, fp
 801d950:	f7e2 fcb4 	bl	80002bc <__adddf3>
 801d954:	4602      	mov	r2, r0
 801d956:	460b      	mov	r3, r1
 801d958:	4640      	mov	r0, r8
 801d95a:	4649      	mov	r1, r9
 801d95c:	f7e3 f8f4 	bl	8000b48 <__aeabi_dcmpgt>
 801d960:	2800      	cmp	r0, #0
 801d962:	d173      	bne.n	801da4c <_dtoa_r+0x6c4>
 801d964:	4652      	mov	r2, sl
 801d966:	465b      	mov	r3, fp
 801d968:	4913      	ldr	r1, [pc, #76]	; (801d9b8 <_dtoa_r+0x630>)
 801d96a:	2000      	movs	r0, #0
 801d96c:	f7e2 fca4 	bl	80002b8 <__aeabi_dsub>
 801d970:	4602      	mov	r2, r0
 801d972:	460b      	mov	r3, r1
 801d974:	4640      	mov	r0, r8
 801d976:	4649      	mov	r1, r9
 801d978:	f7e3 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 801d97c:	2800      	cmp	r0, #0
 801d97e:	f43f af35 	beq.w	801d7ec <_dtoa_r+0x464>
 801d982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d984:	1e6b      	subs	r3, r5, #1
 801d986:	930f      	str	r3, [sp, #60]	; 0x3c
 801d988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d98c:	2b30      	cmp	r3, #48	; 0x30
 801d98e:	d0f8      	beq.n	801d982 <_dtoa_r+0x5fa>
 801d990:	9700      	str	r7, [sp, #0]
 801d992:	e049      	b.n	801da28 <_dtoa_r+0x6a0>
 801d994:	4b05      	ldr	r3, [pc, #20]	; (801d9ac <_dtoa_r+0x624>)
 801d996:	f7e2 fe47 	bl	8000628 <__aeabi_dmul>
 801d99a:	4680      	mov	r8, r0
 801d99c:	4689      	mov	r9, r1
 801d99e:	e7bd      	b.n	801d91c <_dtoa_r+0x594>
 801d9a0:	08021f38 	.word	0x08021f38
 801d9a4:	08021f10 	.word	0x08021f10
 801d9a8:	3ff00000 	.word	0x3ff00000
 801d9ac:	40240000 	.word	0x40240000
 801d9b0:	401c0000 	.word	0x401c0000
 801d9b4:	40140000 	.word	0x40140000
 801d9b8:	3fe00000 	.word	0x3fe00000
 801d9bc:	9d01      	ldr	r5, [sp, #4]
 801d9be:	4656      	mov	r6, sl
 801d9c0:	465f      	mov	r7, fp
 801d9c2:	4642      	mov	r2, r8
 801d9c4:	464b      	mov	r3, r9
 801d9c6:	4630      	mov	r0, r6
 801d9c8:	4639      	mov	r1, r7
 801d9ca:	f7e2 ff57 	bl	800087c <__aeabi_ddiv>
 801d9ce:	f7e3 f8db 	bl	8000b88 <__aeabi_d2iz>
 801d9d2:	4682      	mov	sl, r0
 801d9d4:	f7e2 fdbe 	bl	8000554 <__aeabi_i2d>
 801d9d8:	4642      	mov	r2, r8
 801d9da:	464b      	mov	r3, r9
 801d9dc:	f7e2 fe24 	bl	8000628 <__aeabi_dmul>
 801d9e0:	4602      	mov	r2, r0
 801d9e2:	460b      	mov	r3, r1
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	4639      	mov	r1, r7
 801d9e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d9ec:	f7e2 fc64 	bl	80002b8 <__aeabi_dsub>
 801d9f0:	f805 6b01 	strb.w	r6, [r5], #1
 801d9f4:	9e01      	ldr	r6, [sp, #4]
 801d9f6:	9f03      	ldr	r7, [sp, #12]
 801d9f8:	1bae      	subs	r6, r5, r6
 801d9fa:	42b7      	cmp	r7, r6
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	460b      	mov	r3, r1
 801da00:	d135      	bne.n	801da6e <_dtoa_r+0x6e6>
 801da02:	f7e2 fc5b 	bl	80002bc <__adddf3>
 801da06:	4642      	mov	r2, r8
 801da08:	464b      	mov	r3, r9
 801da0a:	4606      	mov	r6, r0
 801da0c:	460f      	mov	r7, r1
 801da0e:	f7e3 f89b 	bl	8000b48 <__aeabi_dcmpgt>
 801da12:	b9d0      	cbnz	r0, 801da4a <_dtoa_r+0x6c2>
 801da14:	4642      	mov	r2, r8
 801da16:	464b      	mov	r3, r9
 801da18:	4630      	mov	r0, r6
 801da1a:	4639      	mov	r1, r7
 801da1c:	f7e3 f86c 	bl	8000af8 <__aeabi_dcmpeq>
 801da20:	b110      	cbz	r0, 801da28 <_dtoa_r+0x6a0>
 801da22:	f01a 0f01 	tst.w	sl, #1
 801da26:	d110      	bne.n	801da4a <_dtoa_r+0x6c2>
 801da28:	4620      	mov	r0, r4
 801da2a:	ee18 1a10 	vmov	r1, s16
 801da2e:	f001 f899 	bl	801eb64 <_Bfree>
 801da32:	2300      	movs	r3, #0
 801da34:	9800      	ldr	r0, [sp, #0]
 801da36:	702b      	strb	r3, [r5, #0]
 801da38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da3a:	3001      	adds	r0, #1
 801da3c:	6018      	str	r0, [r3, #0]
 801da3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da40:	2b00      	cmp	r3, #0
 801da42:	f43f acf1 	beq.w	801d428 <_dtoa_r+0xa0>
 801da46:	601d      	str	r5, [r3, #0]
 801da48:	e4ee      	b.n	801d428 <_dtoa_r+0xa0>
 801da4a:	9f00      	ldr	r7, [sp, #0]
 801da4c:	462b      	mov	r3, r5
 801da4e:	461d      	mov	r5, r3
 801da50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801da54:	2a39      	cmp	r2, #57	; 0x39
 801da56:	d106      	bne.n	801da66 <_dtoa_r+0x6de>
 801da58:	9a01      	ldr	r2, [sp, #4]
 801da5a:	429a      	cmp	r2, r3
 801da5c:	d1f7      	bne.n	801da4e <_dtoa_r+0x6c6>
 801da5e:	9901      	ldr	r1, [sp, #4]
 801da60:	2230      	movs	r2, #48	; 0x30
 801da62:	3701      	adds	r7, #1
 801da64:	700a      	strb	r2, [r1, #0]
 801da66:	781a      	ldrb	r2, [r3, #0]
 801da68:	3201      	adds	r2, #1
 801da6a:	701a      	strb	r2, [r3, #0]
 801da6c:	e790      	b.n	801d990 <_dtoa_r+0x608>
 801da6e:	4ba6      	ldr	r3, [pc, #664]	; (801dd08 <_dtoa_r+0x980>)
 801da70:	2200      	movs	r2, #0
 801da72:	f7e2 fdd9 	bl	8000628 <__aeabi_dmul>
 801da76:	2200      	movs	r2, #0
 801da78:	2300      	movs	r3, #0
 801da7a:	4606      	mov	r6, r0
 801da7c:	460f      	mov	r7, r1
 801da7e:	f7e3 f83b 	bl	8000af8 <__aeabi_dcmpeq>
 801da82:	2800      	cmp	r0, #0
 801da84:	d09d      	beq.n	801d9c2 <_dtoa_r+0x63a>
 801da86:	e7cf      	b.n	801da28 <_dtoa_r+0x6a0>
 801da88:	9a08      	ldr	r2, [sp, #32]
 801da8a:	2a00      	cmp	r2, #0
 801da8c:	f000 80d7 	beq.w	801dc3e <_dtoa_r+0x8b6>
 801da90:	9a06      	ldr	r2, [sp, #24]
 801da92:	2a01      	cmp	r2, #1
 801da94:	f300 80ba 	bgt.w	801dc0c <_dtoa_r+0x884>
 801da98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801da9a:	2a00      	cmp	r2, #0
 801da9c:	f000 80b2 	beq.w	801dc04 <_dtoa_r+0x87c>
 801daa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801daa4:	9e07      	ldr	r6, [sp, #28]
 801daa6:	9d04      	ldr	r5, [sp, #16]
 801daa8:	9a04      	ldr	r2, [sp, #16]
 801daaa:	441a      	add	r2, r3
 801daac:	9204      	str	r2, [sp, #16]
 801daae:	9a05      	ldr	r2, [sp, #20]
 801dab0:	2101      	movs	r1, #1
 801dab2:	441a      	add	r2, r3
 801dab4:	4620      	mov	r0, r4
 801dab6:	9205      	str	r2, [sp, #20]
 801dab8:	f001 f956 	bl	801ed68 <__i2b>
 801dabc:	4607      	mov	r7, r0
 801dabe:	2d00      	cmp	r5, #0
 801dac0:	dd0c      	ble.n	801dadc <_dtoa_r+0x754>
 801dac2:	9b05      	ldr	r3, [sp, #20]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	dd09      	ble.n	801dadc <_dtoa_r+0x754>
 801dac8:	42ab      	cmp	r3, r5
 801daca:	9a04      	ldr	r2, [sp, #16]
 801dacc:	bfa8      	it	ge
 801dace:	462b      	movge	r3, r5
 801dad0:	1ad2      	subs	r2, r2, r3
 801dad2:	9204      	str	r2, [sp, #16]
 801dad4:	9a05      	ldr	r2, [sp, #20]
 801dad6:	1aed      	subs	r5, r5, r3
 801dad8:	1ad3      	subs	r3, r2, r3
 801dada:	9305      	str	r3, [sp, #20]
 801dadc:	9b07      	ldr	r3, [sp, #28]
 801dade:	b31b      	cbz	r3, 801db28 <_dtoa_r+0x7a0>
 801dae0:	9b08      	ldr	r3, [sp, #32]
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	f000 80af 	beq.w	801dc46 <_dtoa_r+0x8be>
 801dae8:	2e00      	cmp	r6, #0
 801daea:	dd13      	ble.n	801db14 <_dtoa_r+0x78c>
 801daec:	4639      	mov	r1, r7
 801daee:	4632      	mov	r2, r6
 801daf0:	4620      	mov	r0, r4
 801daf2:	f001 f9f9 	bl	801eee8 <__pow5mult>
 801daf6:	ee18 2a10 	vmov	r2, s16
 801dafa:	4601      	mov	r1, r0
 801dafc:	4607      	mov	r7, r0
 801dafe:	4620      	mov	r0, r4
 801db00:	f001 f948 	bl	801ed94 <__multiply>
 801db04:	ee18 1a10 	vmov	r1, s16
 801db08:	4680      	mov	r8, r0
 801db0a:	4620      	mov	r0, r4
 801db0c:	f001 f82a 	bl	801eb64 <_Bfree>
 801db10:	ee08 8a10 	vmov	s16, r8
 801db14:	9b07      	ldr	r3, [sp, #28]
 801db16:	1b9a      	subs	r2, r3, r6
 801db18:	d006      	beq.n	801db28 <_dtoa_r+0x7a0>
 801db1a:	ee18 1a10 	vmov	r1, s16
 801db1e:	4620      	mov	r0, r4
 801db20:	f001 f9e2 	bl	801eee8 <__pow5mult>
 801db24:	ee08 0a10 	vmov	s16, r0
 801db28:	2101      	movs	r1, #1
 801db2a:	4620      	mov	r0, r4
 801db2c:	f001 f91c 	bl	801ed68 <__i2b>
 801db30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db32:	2b00      	cmp	r3, #0
 801db34:	4606      	mov	r6, r0
 801db36:	f340 8088 	ble.w	801dc4a <_dtoa_r+0x8c2>
 801db3a:	461a      	mov	r2, r3
 801db3c:	4601      	mov	r1, r0
 801db3e:	4620      	mov	r0, r4
 801db40:	f001 f9d2 	bl	801eee8 <__pow5mult>
 801db44:	9b06      	ldr	r3, [sp, #24]
 801db46:	2b01      	cmp	r3, #1
 801db48:	4606      	mov	r6, r0
 801db4a:	f340 8081 	ble.w	801dc50 <_dtoa_r+0x8c8>
 801db4e:	f04f 0800 	mov.w	r8, #0
 801db52:	6933      	ldr	r3, [r6, #16]
 801db54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801db58:	6918      	ldr	r0, [r3, #16]
 801db5a:	f001 f8b5 	bl	801ecc8 <__hi0bits>
 801db5e:	f1c0 0020 	rsb	r0, r0, #32
 801db62:	9b05      	ldr	r3, [sp, #20]
 801db64:	4418      	add	r0, r3
 801db66:	f010 001f 	ands.w	r0, r0, #31
 801db6a:	f000 8092 	beq.w	801dc92 <_dtoa_r+0x90a>
 801db6e:	f1c0 0320 	rsb	r3, r0, #32
 801db72:	2b04      	cmp	r3, #4
 801db74:	f340 808a 	ble.w	801dc8c <_dtoa_r+0x904>
 801db78:	f1c0 001c 	rsb	r0, r0, #28
 801db7c:	9b04      	ldr	r3, [sp, #16]
 801db7e:	4403      	add	r3, r0
 801db80:	9304      	str	r3, [sp, #16]
 801db82:	9b05      	ldr	r3, [sp, #20]
 801db84:	4403      	add	r3, r0
 801db86:	4405      	add	r5, r0
 801db88:	9305      	str	r3, [sp, #20]
 801db8a:	9b04      	ldr	r3, [sp, #16]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	dd07      	ble.n	801dba0 <_dtoa_r+0x818>
 801db90:	ee18 1a10 	vmov	r1, s16
 801db94:	461a      	mov	r2, r3
 801db96:	4620      	mov	r0, r4
 801db98:	f001 fa00 	bl	801ef9c <__lshift>
 801db9c:	ee08 0a10 	vmov	s16, r0
 801dba0:	9b05      	ldr	r3, [sp, #20]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	dd05      	ble.n	801dbb2 <_dtoa_r+0x82a>
 801dba6:	4631      	mov	r1, r6
 801dba8:	461a      	mov	r2, r3
 801dbaa:	4620      	mov	r0, r4
 801dbac:	f001 f9f6 	bl	801ef9c <__lshift>
 801dbb0:	4606      	mov	r6, r0
 801dbb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d06e      	beq.n	801dc96 <_dtoa_r+0x90e>
 801dbb8:	ee18 0a10 	vmov	r0, s16
 801dbbc:	4631      	mov	r1, r6
 801dbbe:	f001 fa5d 	bl	801f07c <__mcmp>
 801dbc2:	2800      	cmp	r0, #0
 801dbc4:	da67      	bge.n	801dc96 <_dtoa_r+0x90e>
 801dbc6:	9b00      	ldr	r3, [sp, #0]
 801dbc8:	3b01      	subs	r3, #1
 801dbca:	ee18 1a10 	vmov	r1, s16
 801dbce:	9300      	str	r3, [sp, #0]
 801dbd0:	220a      	movs	r2, #10
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	4620      	mov	r0, r4
 801dbd6:	f000 ffe7 	bl	801eba8 <__multadd>
 801dbda:	9b08      	ldr	r3, [sp, #32]
 801dbdc:	ee08 0a10 	vmov	s16, r0
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	f000 81b1 	beq.w	801df48 <_dtoa_r+0xbc0>
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	4639      	mov	r1, r7
 801dbea:	220a      	movs	r2, #10
 801dbec:	4620      	mov	r0, r4
 801dbee:	f000 ffdb 	bl	801eba8 <__multadd>
 801dbf2:	9b02      	ldr	r3, [sp, #8]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	4607      	mov	r7, r0
 801dbf8:	f300 808e 	bgt.w	801dd18 <_dtoa_r+0x990>
 801dbfc:	9b06      	ldr	r3, [sp, #24]
 801dbfe:	2b02      	cmp	r3, #2
 801dc00:	dc51      	bgt.n	801dca6 <_dtoa_r+0x91e>
 801dc02:	e089      	b.n	801dd18 <_dtoa_r+0x990>
 801dc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dc0a:	e74b      	b.n	801daa4 <_dtoa_r+0x71c>
 801dc0c:	9b03      	ldr	r3, [sp, #12]
 801dc0e:	1e5e      	subs	r6, r3, #1
 801dc10:	9b07      	ldr	r3, [sp, #28]
 801dc12:	42b3      	cmp	r3, r6
 801dc14:	bfbf      	itttt	lt
 801dc16:	9b07      	ldrlt	r3, [sp, #28]
 801dc18:	9607      	strlt	r6, [sp, #28]
 801dc1a:	1af2      	sublt	r2, r6, r3
 801dc1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801dc1e:	bfb6      	itet	lt
 801dc20:	189b      	addlt	r3, r3, r2
 801dc22:	1b9e      	subge	r6, r3, r6
 801dc24:	930a      	strlt	r3, [sp, #40]	; 0x28
 801dc26:	9b03      	ldr	r3, [sp, #12]
 801dc28:	bfb8      	it	lt
 801dc2a:	2600      	movlt	r6, #0
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	bfb7      	itett	lt
 801dc30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801dc34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801dc38:	1a9d      	sublt	r5, r3, r2
 801dc3a:	2300      	movlt	r3, #0
 801dc3c:	e734      	b.n	801daa8 <_dtoa_r+0x720>
 801dc3e:	9e07      	ldr	r6, [sp, #28]
 801dc40:	9d04      	ldr	r5, [sp, #16]
 801dc42:	9f08      	ldr	r7, [sp, #32]
 801dc44:	e73b      	b.n	801dabe <_dtoa_r+0x736>
 801dc46:	9a07      	ldr	r2, [sp, #28]
 801dc48:	e767      	b.n	801db1a <_dtoa_r+0x792>
 801dc4a:	9b06      	ldr	r3, [sp, #24]
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	dc18      	bgt.n	801dc82 <_dtoa_r+0x8fa>
 801dc50:	f1ba 0f00 	cmp.w	sl, #0
 801dc54:	d115      	bne.n	801dc82 <_dtoa_r+0x8fa>
 801dc56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801dc5a:	b993      	cbnz	r3, 801dc82 <_dtoa_r+0x8fa>
 801dc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801dc60:	0d1b      	lsrs	r3, r3, #20
 801dc62:	051b      	lsls	r3, r3, #20
 801dc64:	b183      	cbz	r3, 801dc88 <_dtoa_r+0x900>
 801dc66:	9b04      	ldr	r3, [sp, #16]
 801dc68:	3301      	adds	r3, #1
 801dc6a:	9304      	str	r3, [sp, #16]
 801dc6c:	9b05      	ldr	r3, [sp, #20]
 801dc6e:	3301      	adds	r3, #1
 801dc70:	9305      	str	r3, [sp, #20]
 801dc72:	f04f 0801 	mov.w	r8, #1
 801dc76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	f47f af6a 	bne.w	801db52 <_dtoa_r+0x7ca>
 801dc7e:	2001      	movs	r0, #1
 801dc80:	e76f      	b.n	801db62 <_dtoa_r+0x7da>
 801dc82:	f04f 0800 	mov.w	r8, #0
 801dc86:	e7f6      	b.n	801dc76 <_dtoa_r+0x8ee>
 801dc88:	4698      	mov	r8, r3
 801dc8a:	e7f4      	b.n	801dc76 <_dtoa_r+0x8ee>
 801dc8c:	f43f af7d 	beq.w	801db8a <_dtoa_r+0x802>
 801dc90:	4618      	mov	r0, r3
 801dc92:	301c      	adds	r0, #28
 801dc94:	e772      	b.n	801db7c <_dtoa_r+0x7f4>
 801dc96:	9b03      	ldr	r3, [sp, #12]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	dc37      	bgt.n	801dd0c <_dtoa_r+0x984>
 801dc9c:	9b06      	ldr	r3, [sp, #24]
 801dc9e:	2b02      	cmp	r3, #2
 801dca0:	dd34      	ble.n	801dd0c <_dtoa_r+0x984>
 801dca2:	9b03      	ldr	r3, [sp, #12]
 801dca4:	9302      	str	r3, [sp, #8]
 801dca6:	9b02      	ldr	r3, [sp, #8]
 801dca8:	b96b      	cbnz	r3, 801dcc6 <_dtoa_r+0x93e>
 801dcaa:	4631      	mov	r1, r6
 801dcac:	2205      	movs	r2, #5
 801dcae:	4620      	mov	r0, r4
 801dcb0:	f000 ff7a 	bl	801eba8 <__multadd>
 801dcb4:	4601      	mov	r1, r0
 801dcb6:	4606      	mov	r6, r0
 801dcb8:	ee18 0a10 	vmov	r0, s16
 801dcbc:	f001 f9de 	bl	801f07c <__mcmp>
 801dcc0:	2800      	cmp	r0, #0
 801dcc2:	f73f adbb 	bgt.w	801d83c <_dtoa_r+0x4b4>
 801dcc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcc8:	9d01      	ldr	r5, [sp, #4]
 801dcca:	43db      	mvns	r3, r3
 801dccc:	9300      	str	r3, [sp, #0]
 801dcce:	f04f 0800 	mov.w	r8, #0
 801dcd2:	4631      	mov	r1, r6
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	f000 ff45 	bl	801eb64 <_Bfree>
 801dcda:	2f00      	cmp	r7, #0
 801dcdc:	f43f aea4 	beq.w	801da28 <_dtoa_r+0x6a0>
 801dce0:	f1b8 0f00 	cmp.w	r8, #0
 801dce4:	d005      	beq.n	801dcf2 <_dtoa_r+0x96a>
 801dce6:	45b8      	cmp	r8, r7
 801dce8:	d003      	beq.n	801dcf2 <_dtoa_r+0x96a>
 801dcea:	4641      	mov	r1, r8
 801dcec:	4620      	mov	r0, r4
 801dcee:	f000 ff39 	bl	801eb64 <_Bfree>
 801dcf2:	4639      	mov	r1, r7
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	f000 ff35 	bl	801eb64 <_Bfree>
 801dcfa:	e695      	b.n	801da28 <_dtoa_r+0x6a0>
 801dcfc:	2600      	movs	r6, #0
 801dcfe:	4637      	mov	r7, r6
 801dd00:	e7e1      	b.n	801dcc6 <_dtoa_r+0x93e>
 801dd02:	9700      	str	r7, [sp, #0]
 801dd04:	4637      	mov	r7, r6
 801dd06:	e599      	b.n	801d83c <_dtoa_r+0x4b4>
 801dd08:	40240000 	.word	0x40240000
 801dd0c:	9b08      	ldr	r3, [sp, #32]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	f000 80ca 	beq.w	801dea8 <_dtoa_r+0xb20>
 801dd14:	9b03      	ldr	r3, [sp, #12]
 801dd16:	9302      	str	r3, [sp, #8]
 801dd18:	2d00      	cmp	r5, #0
 801dd1a:	dd05      	ble.n	801dd28 <_dtoa_r+0x9a0>
 801dd1c:	4639      	mov	r1, r7
 801dd1e:	462a      	mov	r2, r5
 801dd20:	4620      	mov	r0, r4
 801dd22:	f001 f93b 	bl	801ef9c <__lshift>
 801dd26:	4607      	mov	r7, r0
 801dd28:	f1b8 0f00 	cmp.w	r8, #0
 801dd2c:	d05b      	beq.n	801dde6 <_dtoa_r+0xa5e>
 801dd2e:	6879      	ldr	r1, [r7, #4]
 801dd30:	4620      	mov	r0, r4
 801dd32:	f000 fed7 	bl	801eae4 <_Balloc>
 801dd36:	4605      	mov	r5, r0
 801dd38:	b928      	cbnz	r0, 801dd46 <_dtoa_r+0x9be>
 801dd3a:	4b87      	ldr	r3, [pc, #540]	; (801df58 <_dtoa_r+0xbd0>)
 801dd3c:	4602      	mov	r2, r0
 801dd3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801dd42:	f7ff bb3b 	b.w	801d3bc <_dtoa_r+0x34>
 801dd46:	693a      	ldr	r2, [r7, #16]
 801dd48:	3202      	adds	r2, #2
 801dd4a:	0092      	lsls	r2, r2, #2
 801dd4c:	f107 010c 	add.w	r1, r7, #12
 801dd50:	300c      	adds	r0, #12
 801dd52:	f7fd f9e7 	bl	801b124 <memcpy>
 801dd56:	2201      	movs	r2, #1
 801dd58:	4629      	mov	r1, r5
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f001 f91e 	bl	801ef9c <__lshift>
 801dd60:	9b01      	ldr	r3, [sp, #4]
 801dd62:	f103 0901 	add.w	r9, r3, #1
 801dd66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801dd6a:	4413      	add	r3, r2
 801dd6c:	9305      	str	r3, [sp, #20]
 801dd6e:	f00a 0301 	and.w	r3, sl, #1
 801dd72:	46b8      	mov	r8, r7
 801dd74:	9304      	str	r3, [sp, #16]
 801dd76:	4607      	mov	r7, r0
 801dd78:	4631      	mov	r1, r6
 801dd7a:	ee18 0a10 	vmov	r0, s16
 801dd7e:	f7ff fa75 	bl	801d26c <quorem>
 801dd82:	4641      	mov	r1, r8
 801dd84:	9002      	str	r0, [sp, #8]
 801dd86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801dd8a:	ee18 0a10 	vmov	r0, s16
 801dd8e:	f001 f975 	bl	801f07c <__mcmp>
 801dd92:	463a      	mov	r2, r7
 801dd94:	9003      	str	r0, [sp, #12]
 801dd96:	4631      	mov	r1, r6
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f001 f98b 	bl	801f0b4 <__mdiff>
 801dd9e:	68c2      	ldr	r2, [r0, #12]
 801dda0:	f109 3bff 	add.w	fp, r9, #4294967295
 801dda4:	4605      	mov	r5, r0
 801dda6:	bb02      	cbnz	r2, 801ddea <_dtoa_r+0xa62>
 801dda8:	4601      	mov	r1, r0
 801ddaa:	ee18 0a10 	vmov	r0, s16
 801ddae:	f001 f965 	bl	801f07c <__mcmp>
 801ddb2:	4602      	mov	r2, r0
 801ddb4:	4629      	mov	r1, r5
 801ddb6:	4620      	mov	r0, r4
 801ddb8:	9207      	str	r2, [sp, #28]
 801ddba:	f000 fed3 	bl	801eb64 <_Bfree>
 801ddbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ddc2:	ea43 0102 	orr.w	r1, r3, r2
 801ddc6:	9b04      	ldr	r3, [sp, #16]
 801ddc8:	430b      	orrs	r3, r1
 801ddca:	464d      	mov	r5, r9
 801ddcc:	d10f      	bne.n	801ddee <_dtoa_r+0xa66>
 801ddce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ddd2:	d02a      	beq.n	801de2a <_dtoa_r+0xaa2>
 801ddd4:	9b03      	ldr	r3, [sp, #12]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	dd02      	ble.n	801dde0 <_dtoa_r+0xa58>
 801ddda:	9b02      	ldr	r3, [sp, #8]
 801dddc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801dde0:	f88b a000 	strb.w	sl, [fp]
 801dde4:	e775      	b.n	801dcd2 <_dtoa_r+0x94a>
 801dde6:	4638      	mov	r0, r7
 801dde8:	e7ba      	b.n	801dd60 <_dtoa_r+0x9d8>
 801ddea:	2201      	movs	r2, #1
 801ddec:	e7e2      	b.n	801ddb4 <_dtoa_r+0xa2c>
 801ddee:	9b03      	ldr	r3, [sp, #12]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	db04      	blt.n	801ddfe <_dtoa_r+0xa76>
 801ddf4:	9906      	ldr	r1, [sp, #24]
 801ddf6:	430b      	orrs	r3, r1
 801ddf8:	9904      	ldr	r1, [sp, #16]
 801ddfa:	430b      	orrs	r3, r1
 801ddfc:	d122      	bne.n	801de44 <_dtoa_r+0xabc>
 801ddfe:	2a00      	cmp	r2, #0
 801de00:	ddee      	ble.n	801dde0 <_dtoa_r+0xa58>
 801de02:	ee18 1a10 	vmov	r1, s16
 801de06:	2201      	movs	r2, #1
 801de08:	4620      	mov	r0, r4
 801de0a:	f001 f8c7 	bl	801ef9c <__lshift>
 801de0e:	4631      	mov	r1, r6
 801de10:	ee08 0a10 	vmov	s16, r0
 801de14:	f001 f932 	bl	801f07c <__mcmp>
 801de18:	2800      	cmp	r0, #0
 801de1a:	dc03      	bgt.n	801de24 <_dtoa_r+0xa9c>
 801de1c:	d1e0      	bne.n	801dde0 <_dtoa_r+0xa58>
 801de1e:	f01a 0f01 	tst.w	sl, #1
 801de22:	d0dd      	beq.n	801dde0 <_dtoa_r+0xa58>
 801de24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801de28:	d1d7      	bne.n	801ddda <_dtoa_r+0xa52>
 801de2a:	2339      	movs	r3, #57	; 0x39
 801de2c:	f88b 3000 	strb.w	r3, [fp]
 801de30:	462b      	mov	r3, r5
 801de32:	461d      	mov	r5, r3
 801de34:	3b01      	subs	r3, #1
 801de36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801de3a:	2a39      	cmp	r2, #57	; 0x39
 801de3c:	d071      	beq.n	801df22 <_dtoa_r+0xb9a>
 801de3e:	3201      	adds	r2, #1
 801de40:	701a      	strb	r2, [r3, #0]
 801de42:	e746      	b.n	801dcd2 <_dtoa_r+0x94a>
 801de44:	2a00      	cmp	r2, #0
 801de46:	dd07      	ble.n	801de58 <_dtoa_r+0xad0>
 801de48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801de4c:	d0ed      	beq.n	801de2a <_dtoa_r+0xaa2>
 801de4e:	f10a 0301 	add.w	r3, sl, #1
 801de52:	f88b 3000 	strb.w	r3, [fp]
 801de56:	e73c      	b.n	801dcd2 <_dtoa_r+0x94a>
 801de58:	9b05      	ldr	r3, [sp, #20]
 801de5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801de5e:	4599      	cmp	r9, r3
 801de60:	d047      	beq.n	801def2 <_dtoa_r+0xb6a>
 801de62:	ee18 1a10 	vmov	r1, s16
 801de66:	2300      	movs	r3, #0
 801de68:	220a      	movs	r2, #10
 801de6a:	4620      	mov	r0, r4
 801de6c:	f000 fe9c 	bl	801eba8 <__multadd>
 801de70:	45b8      	cmp	r8, r7
 801de72:	ee08 0a10 	vmov	s16, r0
 801de76:	f04f 0300 	mov.w	r3, #0
 801de7a:	f04f 020a 	mov.w	r2, #10
 801de7e:	4641      	mov	r1, r8
 801de80:	4620      	mov	r0, r4
 801de82:	d106      	bne.n	801de92 <_dtoa_r+0xb0a>
 801de84:	f000 fe90 	bl	801eba8 <__multadd>
 801de88:	4680      	mov	r8, r0
 801de8a:	4607      	mov	r7, r0
 801de8c:	f109 0901 	add.w	r9, r9, #1
 801de90:	e772      	b.n	801dd78 <_dtoa_r+0x9f0>
 801de92:	f000 fe89 	bl	801eba8 <__multadd>
 801de96:	4639      	mov	r1, r7
 801de98:	4680      	mov	r8, r0
 801de9a:	2300      	movs	r3, #0
 801de9c:	220a      	movs	r2, #10
 801de9e:	4620      	mov	r0, r4
 801dea0:	f000 fe82 	bl	801eba8 <__multadd>
 801dea4:	4607      	mov	r7, r0
 801dea6:	e7f1      	b.n	801de8c <_dtoa_r+0xb04>
 801dea8:	9b03      	ldr	r3, [sp, #12]
 801deaa:	9302      	str	r3, [sp, #8]
 801deac:	9d01      	ldr	r5, [sp, #4]
 801deae:	ee18 0a10 	vmov	r0, s16
 801deb2:	4631      	mov	r1, r6
 801deb4:	f7ff f9da 	bl	801d26c <quorem>
 801deb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801debc:	9b01      	ldr	r3, [sp, #4]
 801debe:	f805 ab01 	strb.w	sl, [r5], #1
 801dec2:	1aea      	subs	r2, r5, r3
 801dec4:	9b02      	ldr	r3, [sp, #8]
 801dec6:	4293      	cmp	r3, r2
 801dec8:	dd09      	ble.n	801dede <_dtoa_r+0xb56>
 801deca:	ee18 1a10 	vmov	r1, s16
 801dece:	2300      	movs	r3, #0
 801ded0:	220a      	movs	r2, #10
 801ded2:	4620      	mov	r0, r4
 801ded4:	f000 fe68 	bl	801eba8 <__multadd>
 801ded8:	ee08 0a10 	vmov	s16, r0
 801dedc:	e7e7      	b.n	801deae <_dtoa_r+0xb26>
 801dede:	9b02      	ldr	r3, [sp, #8]
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	bfc8      	it	gt
 801dee4:	461d      	movgt	r5, r3
 801dee6:	9b01      	ldr	r3, [sp, #4]
 801dee8:	bfd8      	it	le
 801deea:	2501      	movle	r5, #1
 801deec:	441d      	add	r5, r3
 801deee:	f04f 0800 	mov.w	r8, #0
 801def2:	ee18 1a10 	vmov	r1, s16
 801def6:	2201      	movs	r2, #1
 801def8:	4620      	mov	r0, r4
 801defa:	f001 f84f 	bl	801ef9c <__lshift>
 801defe:	4631      	mov	r1, r6
 801df00:	ee08 0a10 	vmov	s16, r0
 801df04:	f001 f8ba 	bl	801f07c <__mcmp>
 801df08:	2800      	cmp	r0, #0
 801df0a:	dc91      	bgt.n	801de30 <_dtoa_r+0xaa8>
 801df0c:	d102      	bne.n	801df14 <_dtoa_r+0xb8c>
 801df0e:	f01a 0f01 	tst.w	sl, #1
 801df12:	d18d      	bne.n	801de30 <_dtoa_r+0xaa8>
 801df14:	462b      	mov	r3, r5
 801df16:	461d      	mov	r5, r3
 801df18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801df1c:	2a30      	cmp	r2, #48	; 0x30
 801df1e:	d0fa      	beq.n	801df16 <_dtoa_r+0xb8e>
 801df20:	e6d7      	b.n	801dcd2 <_dtoa_r+0x94a>
 801df22:	9a01      	ldr	r2, [sp, #4]
 801df24:	429a      	cmp	r2, r3
 801df26:	d184      	bne.n	801de32 <_dtoa_r+0xaaa>
 801df28:	9b00      	ldr	r3, [sp, #0]
 801df2a:	3301      	adds	r3, #1
 801df2c:	9300      	str	r3, [sp, #0]
 801df2e:	2331      	movs	r3, #49	; 0x31
 801df30:	7013      	strb	r3, [r2, #0]
 801df32:	e6ce      	b.n	801dcd2 <_dtoa_r+0x94a>
 801df34:	4b09      	ldr	r3, [pc, #36]	; (801df5c <_dtoa_r+0xbd4>)
 801df36:	f7ff ba95 	b.w	801d464 <_dtoa_r+0xdc>
 801df3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	f47f aa6e 	bne.w	801d41e <_dtoa_r+0x96>
 801df42:	4b07      	ldr	r3, [pc, #28]	; (801df60 <_dtoa_r+0xbd8>)
 801df44:	f7ff ba8e 	b.w	801d464 <_dtoa_r+0xdc>
 801df48:	9b02      	ldr	r3, [sp, #8]
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	dcae      	bgt.n	801deac <_dtoa_r+0xb24>
 801df4e:	9b06      	ldr	r3, [sp, #24]
 801df50:	2b02      	cmp	r3, #2
 801df52:	f73f aea8 	bgt.w	801dca6 <_dtoa_r+0x91e>
 801df56:	e7a9      	b.n	801deac <_dtoa_r+0xb24>
 801df58:	08021dc1 	.word	0x08021dc1
 801df5c:	08021b2c 	.word	0x08021b2c
 801df60:	08021d59 	.word	0x08021d59

0801df64 <__sflush_r>:
 801df64:	898a      	ldrh	r2, [r1, #12]
 801df66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df6a:	4605      	mov	r5, r0
 801df6c:	0710      	lsls	r0, r2, #28
 801df6e:	460c      	mov	r4, r1
 801df70:	d458      	bmi.n	801e024 <__sflush_r+0xc0>
 801df72:	684b      	ldr	r3, [r1, #4]
 801df74:	2b00      	cmp	r3, #0
 801df76:	dc05      	bgt.n	801df84 <__sflush_r+0x20>
 801df78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	dc02      	bgt.n	801df84 <__sflush_r+0x20>
 801df7e:	2000      	movs	r0, #0
 801df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df86:	2e00      	cmp	r6, #0
 801df88:	d0f9      	beq.n	801df7e <__sflush_r+0x1a>
 801df8a:	2300      	movs	r3, #0
 801df8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801df90:	682f      	ldr	r7, [r5, #0]
 801df92:	602b      	str	r3, [r5, #0]
 801df94:	d032      	beq.n	801dffc <__sflush_r+0x98>
 801df96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801df98:	89a3      	ldrh	r3, [r4, #12]
 801df9a:	075a      	lsls	r2, r3, #29
 801df9c:	d505      	bpl.n	801dfaa <__sflush_r+0x46>
 801df9e:	6863      	ldr	r3, [r4, #4]
 801dfa0:	1ac0      	subs	r0, r0, r3
 801dfa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dfa4:	b10b      	cbz	r3, 801dfaa <__sflush_r+0x46>
 801dfa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dfa8:	1ac0      	subs	r0, r0, r3
 801dfaa:	2300      	movs	r3, #0
 801dfac:	4602      	mov	r2, r0
 801dfae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dfb0:	6a21      	ldr	r1, [r4, #32]
 801dfb2:	4628      	mov	r0, r5
 801dfb4:	47b0      	blx	r6
 801dfb6:	1c43      	adds	r3, r0, #1
 801dfb8:	89a3      	ldrh	r3, [r4, #12]
 801dfba:	d106      	bne.n	801dfca <__sflush_r+0x66>
 801dfbc:	6829      	ldr	r1, [r5, #0]
 801dfbe:	291d      	cmp	r1, #29
 801dfc0:	d82c      	bhi.n	801e01c <__sflush_r+0xb8>
 801dfc2:	4a2a      	ldr	r2, [pc, #168]	; (801e06c <__sflush_r+0x108>)
 801dfc4:	40ca      	lsrs	r2, r1
 801dfc6:	07d6      	lsls	r6, r2, #31
 801dfc8:	d528      	bpl.n	801e01c <__sflush_r+0xb8>
 801dfca:	2200      	movs	r2, #0
 801dfcc:	6062      	str	r2, [r4, #4]
 801dfce:	04d9      	lsls	r1, r3, #19
 801dfd0:	6922      	ldr	r2, [r4, #16]
 801dfd2:	6022      	str	r2, [r4, #0]
 801dfd4:	d504      	bpl.n	801dfe0 <__sflush_r+0x7c>
 801dfd6:	1c42      	adds	r2, r0, #1
 801dfd8:	d101      	bne.n	801dfde <__sflush_r+0x7a>
 801dfda:	682b      	ldr	r3, [r5, #0]
 801dfdc:	b903      	cbnz	r3, 801dfe0 <__sflush_r+0x7c>
 801dfde:	6560      	str	r0, [r4, #84]	; 0x54
 801dfe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dfe2:	602f      	str	r7, [r5, #0]
 801dfe4:	2900      	cmp	r1, #0
 801dfe6:	d0ca      	beq.n	801df7e <__sflush_r+0x1a>
 801dfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dfec:	4299      	cmp	r1, r3
 801dfee:	d002      	beq.n	801dff6 <__sflush_r+0x92>
 801dff0:	4628      	mov	r0, r5
 801dff2:	f7fd f8c7 	bl	801b184 <_free_r>
 801dff6:	2000      	movs	r0, #0
 801dff8:	6360      	str	r0, [r4, #52]	; 0x34
 801dffa:	e7c1      	b.n	801df80 <__sflush_r+0x1c>
 801dffc:	6a21      	ldr	r1, [r4, #32]
 801dffe:	2301      	movs	r3, #1
 801e000:	4628      	mov	r0, r5
 801e002:	47b0      	blx	r6
 801e004:	1c41      	adds	r1, r0, #1
 801e006:	d1c7      	bne.n	801df98 <__sflush_r+0x34>
 801e008:	682b      	ldr	r3, [r5, #0]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d0c4      	beq.n	801df98 <__sflush_r+0x34>
 801e00e:	2b1d      	cmp	r3, #29
 801e010:	d001      	beq.n	801e016 <__sflush_r+0xb2>
 801e012:	2b16      	cmp	r3, #22
 801e014:	d101      	bne.n	801e01a <__sflush_r+0xb6>
 801e016:	602f      	str	r7, [r5, #0]
 801e018:	e7b1      	b.n	801df7e <__sflush_r+0x1a>
 801e01a:	89a3      	ldrh	r3, [r4, #12]
 801e01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e020:	81a3      	strh	r3, [r4, #12]
 801e022:	e7ad      	b.n	801df80 <__sflush_r+0x1c>
 801e024:	690f      	ldr	r7, [r1, #16]
 801e026:	2f00      	cmp	r7, #0
 801e028:	d0a9      	beq.n	801df7e <__sflush_r+0x1a>
 801e02a:	0793      	lsls	r3, r2, #30
 801e02c:	680e      	ldr	r6, [r1, #0]
 801e02e:	bf08      	it	eq
 801e030:	694b      	ldreq	r3, [r1, #20]
 801e032:	600f      	str	r7, [r1, #0]
 801e034:	bf18      	it	ne
 801e036:	2300      	movne	r3, #0
 801e038:	eba6 0807 	sub.w	r8, r6, r7
 801e03c:	608b      	str	r3, [r1, #8]
 801e03e:	f1b8 0f00 	cmp.w	r8, #0
 801e042:	dd9c      	ble.n	801df7e <__sflush_r+0x1a>
 801e044:	6a21      	ldr	r1, [r4, #32]
 801e046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e048:	4643      	mov	r3, r8
 801e04a:	463a      	mov	r2, r7
 801e04c:	4628      	mov	r0, r5
 801e04e:	47b0      	blx	r6
 801e050:	2800      	cmp	r0, #0
 801e052:	dc06      	bgt.n	801e062 <__sflush_r+0xfe>
 801e054:	89a3      	ldrh	r3, [r4, #12]
 801e056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e05a:	81a3      	strh	r3, [r4, #12]
 801e05c:	f04f 30ff 	mov.w	r0, #4294967295
 801e060:	e78e      	b.n	801df80 <__sflush_r+0x1c>
 801e062:	4407      	add	r7, r0
 801e064:	eba8 0800 	sub.w	r8, r8, r0
 801e068:	e7e9      	b.n	801e03e <__sflush_r+0xda>
 801e06a:	bf00      	nop
 801e06c:	20400001 	.word	0x20400001

0801e070 <_fflush_r>:
 801e070:	b538      	push	{r3, r4, r5, lr}
 801e072:	690b      	ldr	r3, [r1, #16]
 801e074:	4605      	mov	r5, r0
 801e076:	460c      	mov	r4, r1
 801e078:	b913      	cbnz	r3, 801e080 <_fflush_r+0x10>
 801e07a:	2500      	movs	r5, #0
 801e07c:	4628      	mov	r0, r5
 801e07e:	bd38      	pop	{r3, r4, r5, pc}
 801e080:	b118      	cbz	r0, 801e08a <_fflush_r+0x1a>
 801e082:	6983      	ldr	r3, [r0, #24]
 801e084:	b90b      	cbnz	r3, 801e08a <_fflush_r+0x1a>
 801e086:	f000 f887 	bl	801e198 <__sinit>
 801e08a:	4b14      	ldr	r3, [pc, #80]	; (801e0dc <_fflush_r+0x6c>)
 801e08c:	429c      	cmp	r4, r3
 801e08e:	d11b      	bne.n	801e0c8 <_fflush_r+0x58>
 801e090:	686c      	ldr	r4, [r5, #4]
 801e092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d0ef      	beq.n	801e07a <_fflush_r+0xa>
 801e09a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e09c:	07d0      	lsls	r0, r2, #31
 801e09e:	d404      	bmi.n	801e0aa <_fflush_r+0x3a>
 801e0a0:	0599      	lsls	r1, r3, #22
 801e0a2:	d402      	bmi.n	801e0aa <_fflush_r+0x3a>
 801e0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0a6:	f7fd f832 	bl	801b10e <__retarget_lock_acquire_recursive>
 801e0aa:	4628      	mov	r0, r5
 801e0ac:	4621      	mov	r1, r4
 801e0ae:	f7ff ff59 	bl	801df64 <__sflush_r>
 801e0b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0b4:	07da      	lsls	r2, r3, #31
 801e0b6:	4605      	mov	r5, r0
 801e0b8:	d4e0      	bmi.n	801e07c <_fflush_r+0xc>
 801e0ba:	89a3      	ldrh	r3, [r4, #12]
 801e0bc:	059b      	lsls	r3, r3, #22
 801e0be:	d4dd      	bmi.n	801e07c <_fflush_r+0xc>
 801e0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0c2:	f7fd f825 	bl	801b110 <__retarget_lock_release_recursive>
 801e0c6:	e7d9      	b.n	801e07c <_fflush_r+0xc>
 801e0c8:	4b05      	ldr	r3, [pc, #20]	; (801e0e0 <_fflush_r+0x70>)
 801e0ca:	429c      	cmp	r4, r3
 801e0cc:	d101      	bne.n	801e0d2 <_fflush_r+0x62>
 801e0ce:	68ac      	ldr	r4, [r5, #8]
 801e0d0:	e7df      	b.n	801e092 <_fflush_r+0x22>
 801e0d2:	4b04      	ldr	r3, [pc, #16]	; (801e0e4 <_fflush_r+0x74>)
 801e0d4:	429c      	cmp	r4, r3
 801e0d6:	bf08      	it	eq
 801e0d8:	68ec      	ldreq	r4, [r5, #12]
 801e0da:	e7da      	b.n	801e092 <_fflush_r+0x22>
 801e0dc:	08021df4 	.word	0x08021df4
 801e0e0:	08021e14 	.word	0x08021e14
 801e0e4:	08021dd4 	.word	0x08021dd4

0801e0e8 <std>:
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	b510      	push	{r4, lr}
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	e9c0 3300 	strd	r3, r3, [r0]
 801e0f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e0f6:	6083      	str	r3, [r0, #8]
 801e0f8:	8181      	strh	r1, [r0, #12]
 801e0fa:	6643      	str	r3, [r0, #100]	; 0x64
 801e0fc:	81c2      	strh	r2, [r0, #14]
 801e0fe:	6183      	str	r3, [r0, #24]
 801e100:	4619      	mov	r1, r3
 801e102:	2208      	movs	r2, #8
 801e104:	305c      	adds	r0, #92	; 0x5c
 801e106:	f7fd f835 	bl	801b174 <memset>
 801e10a:	4b05      	ldr	r3, [pc, #20]	; (801e120 <std+0x38>)
 801e10c:	6263      	str	r3, [r4, #36]	; 0x24
 801e10e:	4b05      	ldr	r3, [pc, #20]	; (801e124 <std+0x3c>)
 801e110:	62a3      	str	r3, [r4, #40]	; 0x28
 801e112:	4b05      	ldr	r3, [pc, #20]	; (801e128 <std+0x40>)
 801e114:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e116:	4b05      	ldr	r3, [pc, #20]	; (801e12c <std+0x44>)
 801e118:	6224      	str	r4, [r4, #32]
 801e11a:	6323      	str	r3, [r4, #48]	; 0x30
 801e11c:	bd10      	pop	{r4, pc}
 801e11e:	bf00      	nop
 801e120:	0801fa11 	.word	0x0801fa11
 801e124:	0801fa33 	.word	0x0801fa33
 801e128:	0801fa6b 	.word	0x0801fa6b
 801e12c:	0801fa8f 	.word	0x0801fa8f

0801e130 <_cleanup_r>:
 801e130:	4901      	ldr	r1, [pc, #4]	; (801e138 <_cleanup_r+0x8>)
 801e132:	f000 b8c1 	b.w	801e2b8 <_fwalk_reent>
 801e136:	bf00      	nop
 801e138:	0801e071 	.word	0x0801e071

0801e13c <__sfmoreglue>:
 801e13c:	b570      	push	{r4, r5, r6, lr}
 801e13e:	2268      	movs	r2, #104	; 0x68
 801e140:	1e4d      	subs	r5, r1, #1
 801e142:	4355      	muls	r5, r2
 801e144:	460e      	mov	r6, r1
 801e146:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e14a:	f7fd f887 	bl	801b25c <_malloc_r>
 801e14e:	4604      	mov	r4, r0
 801e150:	b140      	cbz	r0, 801e164 <__sfmoreglue+0x28>
 801e152:	2100      	movs	r1, #0
 801e154:	e9c0 1600 	strd	r1, r6, [r0]
 801e158:	300c      	adds	r0, #12
 801e15a:	60a0      	str	r0, [r4, #8]
 801e15c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e160:	f7fd f808 	bl	801b174 <memset>
 801e164:	4620      	mov	r0, r4
 801e166:	bd70      	pop	{r4, r5, r6, pc}

0801e168 <__sfp_lock_acquire>:
 801e168:	4801      	ldr	r0, [pc, #4]	; (801e170 <__sfp_lock_acquire+0x8>)
 801e16a:	f7fc bfd0 	b.w	801b10e <__retarget_lock_acquire_recursive>
 801e16e:	bf00      	nop
 801e170:	2000360d 	.word	0x2000360d

0801e174 <__sfp_lock_release>:
 801e174:	4801      	ldr	r0, [pc, #4]	; (801e17c <__sfp_lock_release+0x8>)
 801e176:	f7fc bfcb 	b.w	801b110 <__retarget_lock_release_recursive>
 801e17a:	bf00      	nop
 801e17c:	2000360d 	.word	0x2000360d

0801e180 <__sinit_lock_acquire>:
 801e180:	4801      	ldr	r0, [pc, #4]	; (801e188 <__sinit_lock_acquire+0x8>)
 801e182:	f7fc bfc4 	b.w	801b10e <__retarget_lock_acquire_recursive>
 801e186:	bf00      	nop
 801e188:	2000360e 	.word	0x2000360e

0801e18c <__sinit_lock_release>:
 801e18c:	4801      	ldr	r0, [pc, #4]	; (801e194 <__sinit_lock_release+0x8>)
 801e18e:	f7fc bfbf 	b.w	801b110 <__retarget_lock_release_recursive>
 801e192:	bf00      	nop
 801e194:	2000360e 	.word	0x2000360e

0801e198 <__sinit>:
 801e198:	b510      	push	{r4, lr}
 801e19a:	4604      	mov	r4, r0
 801e19c:	f7ff fff0 	bl	801e180 <__sinit_lock_acquire>
 801e1a0:	69a3      	ldr	r3, [r4, #24]
 801e1a2:	b11b      	cbz	r3, 801e1ac <__sinit+0x14>
 801e1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1a8:	f7ff bff0 	b.w	801e18c <__sinit_lock_release>
 801e1ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e1b0:	6523      	str	r3, [r4, #80]	; 0x50
 801e1b2:	4b13      	ldr	r3, [pc, #76]	; (801e200 <__sinit+0x68>)
 801e1b4:	4a13      	ldr	r2, [pc, #76]	; (801e204 <__sinit+0x6c>)
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	62a2      	str	r2, [r4, #40]	; 0x28
 801e1ba:	42a3      	cmp	r3, r4
 801e1bc:	bf04      	itt	eq
 801e1be:	2301      	moveq	r3, #1
 801e1c0:	61a3      	streq	r3, [r4, #24]
 801e1c2:	4620      	mov	r0, r4
 801e1c4:	f000 f820 	bl	801e208 <__sfp>
 801e1c8:	6060      	str	r0, [r4, #4]
 801e1ca:	4620      	mov	r0, r4
 801e1cc:	f000 f81c 	bl	801e208 <__sfp>
 801e1d0:	60a0      	str	r0, [r4, #8]
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	f000 f818 	bl	801e208 <__sfp>
 801e1d8:	2200      	movs	r2, #0
 801e1da:	60e0      	str	r0, [r4, #12]
 801e1dc:	2104      	movs	r1, #4
 801e1de:	6860      	ldr	r0, [r4, #4]
 801e1e0:	f7ff ff82 	bl	801e0e8 <std>
 801e1e4:	68a0      	ldr	r0, [r4, #8]
 801e1e6:	2201      	movs	r2, #1
 801e1e8:	2109      	movs	r1, #9
 801e1ea:	f7ff ff7d 	bl	801e0e8 <std>
 801e1ee:	68e0      	ldr	r0, [r4, #12]
 801e1f0:	2202      	movs	r2, #2
 801e1f2:	2112      	movs	r1, #18
 801e1f4:	f7ff ff78 	bl	801e0e8 <std>
 801e1f8:	2301      	movs	r3, #1
 801e1fa:	61a3      	str	r3, [r4, #24]
 801e1fc:	e7d2      	b.n	801e1a4 <__sinit+0xc>
 801e1fe:	bf00      	nop
 801e200:	08021b18 	.word	0x08021b18
 801e204:	0801e131 	.word	0x0801e131

0801e208 <__sfp>:
 801e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e20a:	4607      	mov	r7, r0
 801e20c:	f7ff ffac 	bl	801e168 <__sfp_lock_acquire>
 801e210:	4b1e      	ldr	r3, [pc, #120]	; (801e28c <__sfp+0x84>)
 801e212:	681e      	ldr	r6, [r3, #0]
 801e214:	69b3      	ldr	r3, [r6, #24]
 801e216:	b913      	cbnz	r3, 801e21e <__sfp+0x16>
 801e218:	4630      	mov	r0, r6
 801e21a:	f7ff ffbd 	bl	801e198 <__sinit>
 801e21e:	3648      	adds	r6, #72	; 0x48
 801e220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e224:	3b01      	subs	r3, #1
 801e226:	d503      	bpl.n	801e230 <__sfp+0x28>
 801e228:	6833      	ldr	r3, [r6, #0]
 801e22a:	b30b      	cbz	r3, 801e270 <__sfp+0x68>
 801e22c:	6836      	ldr	r6, [r6, #0]
 801e22e:	e7f7      	b.n	801e220 <__sfp+0x18>
 801e230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e234:	b9d5      	cbnz	r5, 801e26c <__sfp+0x64>
 801e236:	4b16      	ldr	r3, [pc, #88]	; (801e290 <__sfp+0x88>)
 801e238:	60e3      	str	r3, [r4, #12]
 801e23a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e23e:	6665      	str	r5, [r4, #100]	; 0x64
 801e240:	f7fc ff64 	bl	801b10c <__retarget_lock_init_recursive>
 801e244:	f7ff ff96 	bl	801e174 <__sfp_lock_release>
 801e248:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e24c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e250:	6025      	str	r5, [r4, #0]
 801e252:	61a5      	str	r5, [r4, #24]
 801e254:	2208      	movs	r2, #8
 801e256:	4629      	mov	r1, r5
 801e258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e25c:	f7fc ff8a 	bl	801b174 <memset>
 801e260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e268:	4620      	mov	r0, r4
 801e26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e26c:	3468      	adds	r4, #104	; 0x68
 801e26e:	e7d9      	b.n	801e224 <__sfp+0x1c>
 801e270:	2104      	movs	r1, #4
 801e272:	4638      	mov	r0, r7
 801e274:	f7ff ff62 	bl	801e13c <__sfmoreglue>
 801e278:	4604      	mov	r4, r0
 801e27a:	6030      	str	r0, [r6, #0]
 801e27c:	2800      	cmp	r0, #0
 801e27e:	d1d5      	bne.n	801e22c <__sfp+0x24>
 801e280:	f7ff ff78 	bl	801e174 <__sfp_lock_release>
 801e284:	230c      	movs	r3, #12
 801e286:	603b      	str	r3, [r7, #0]
 801e288:	e7ee      	b.n	801e268 <__sfp+0x60>
 801e28a:	bf00      	nop
 801e28c:	08021b18 	.word	0x08021b18
 801e290:	ffff0001 	.word	0xffff0001

0801e294 <fiprintf>:
 801e294:	b40e      	push	{r1, r2, r3}
 801e296:	b503      	push	{r0, r1, lr}
 801e298:	4601      	mov	r1, r0
 801e29a:	ab03      	add	r3, sp, #12
 801e29c:	4805      	ldr	r0, [pc, #20]	; (801e2b4 <fiprintf+0x20>)
 801e29e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e2a2:	6800      	ldr	r0, [r0, #0]
 801e2a4:	9301      	str	r3, [sp, #4]
 801e2a6:	f001 fa79 	bl	801f79c <_vfiprintf_r>
 801e2aa:	b002      	add	sp, #8
 801e2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2b0:	b003      	add	sp, #12
 801e2b2:	4770      	bx	lr
 801e2b4:	20000140 	.word	0x20000140

0801e2b8 <_fwalk_reent>:
 801e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2bc:	4606      	mov	r6, r0
 801e2be:	4688      	mov	r8, r1
 801e2c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e2c4:	2700      	movs	r7, #0
 801e2c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e2ca:	f1b9 0901 	subs.w	r9, r9, #1
 801e2ce:	d505      	bpl.n	801e2dc <_fwalk_reent+0x24>
 801e2d0:	6824      	ldr	r4, [r4, #0]
 801e2d2:	2c00      	cmp	r4, #0
 801e2d4:	d1f7      	bne.n	801e2c6 <_fwalk_reent+0xe>
 801e2d6:	4638      	mov	r0, r7
 801e2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2dc:	89ab      	ldrh	r3, [r5, #12]
 801e2de:	2b01      	cmp	r3, #1
 801e2e0:	d907      	bls.n	801e2f2 <_fwalk_reent+0x3a>
 801e2e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e2e6:	3301      	adds	r3, #1
 801e2e8:	d003      	beq.n	801e2f2 <_fwalk_reent+0x3a>
 801e2ea:	4629      	mov	r1, r5
 801e2ec:	4630      	mov	r0, r6
 801e2ee:	47c0      	blx	r8
 801e2f0:	4307      	orrs	r7, r0
 801e2f2:	3568      	adds	r5, #104	; 0x68
 801e2f4:	e7e9      	b.n	801e2ca <_fwalk_reent+0x12>

0801e2f6 <rshift>:
 801e2f6:	6903      	ldr	r3, [r0, #16]
 801e2f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e300:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e304:	f100 0414 	add.w	r4, r0, #20
 801e308:	dd45      	ble.n	801e396 <rshift+0xa0>
 801e30a:	f011 011f 	ands.w	r1, r1, #31
 801e30e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e312:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e316:	d10c      	bne.n	801e332 <rshift+0x3c>
 801e318:	f100 0710 	add.w	r7, r0, #16
 801e31c:	4629      	mov	r1, r5
 801e31e:	42b1      	cmp	r1, r6
 801e320:	d334      	bcc.n	801e38c <rshift+0x96>
 801e322:	1a9b      	subs	r3, r3, r2
 801e324:	009b      	lsls	r3, r3, #2
 801e326:	1eea      	subs	r2, r5, #3
 801e328:	4296      	cmp	r6, r2
 801e32a:	bf38      	it	cc
 801e32c:	2300      	movcc	r3, #0
 801e32e:	4423      	add	r3, r4
 801e330:	e015      	b.n	801e35e <rshift+0x68>
 801e332:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e336:	f1c1 0820 	rsb	r8, r1, #32
 801e33a:	40cf      	lsrs	r7, r1
 801e33c:	f105 0e04 	add.w	lr, r5, #4
 801e340:	46a1      	mov	r9, r4
 801e342:	4576      	cmp	r6, lr
 801e344:	46f4      	mov	ip, lr
 801e346:	d815      	bhi.n	801e374 <rshift+0x7e>
 801e348:	1a9a      	subs	r2, r3, r2
 801e34a:	0092      	lsls	r2, r2, #2
 801e34c:	3a04      	subs	r2, #4
 801e34e:	3501      	adds	r5, #1
 801e350:	42ae      	cmp	r6, r5
 801e352:	bf38      	it	cc
 801e354:	2200      	movcc	r2, #0
 801e356:	18a3      	adds	r3, r4, r2
 801e358:	50a7      	str	r7, [r4, r2]
 801e35a:	b107      	cbz	r7, 801e35e <rshift+0x68>
 801e35c:	3304      	adds	r3, #4
 801e35e:	1b1a      	subs	r2, r3, r4
 801e360:	42a3      	cmp	r3, r4
 801e362:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e366:	bf08      	it	eq
 801e368:	2300      	moveq	r3, #0
 801e36a:	6102      	str	r2, [r0, #16]
 801e36c:	bf08      	it	eq
 801e36e:	6143      	streq	r3, [r0, #20]
 801e370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e374:	f8dc c000 	ldr.w	ip, [ip]
 801e378:	fa0c fc08 	lsl.w	ip, ip, r8
 801e37c:	ea4c 0707 	orr.w	r7, ip, r7
 801e380:	f849 7b04 	str.w	r7, [r9], #4
 801e384:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e388:	40cf      	lsrs	r7, r1
 801e38a:	e7da      	b.n	801e342 <rshift+0x4c>
 801e38c:	f851 cb04 	ldr.w	ip, [r1], #4
 801e390:	f847 cf04 	str.w	ip, [r7, #4]!
 801e394:	e7c3      	b.n	801e31e <rshift+0x28>
 801e396:	4623      	mov	r3, r4
 801e398:	e7e1      	b.n	801e35e <rshift+0x68>

0801e39a <__hexdig_fun>:
 801e39a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e39e:	2b09      	cmp	r3, #9
 801e3a0:	d802      	bhi.n	801e3a8 <__hexdig_fun+0xe>
 801e3a2:	3820      	subs	r0, #32
 801e3a4:	b2c0      	uxtb	r0, r0
 801e3a6:	4770      	bx	lr
 801e3a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e3ac:	2b05      	cmp	r3, #5
 801e3ae:	d801      	bhi.n	801e3b4 <__hexdig_fun+0x1a>
 801e3b0:	3847      	subs	r0, #71	; 0x47
 801e3b2:	e7f7      	b.n	801e3a4 <__hexdig_fun+0xa>
 801e3b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e3b8:	2b05      	cmp	r3, #5
 801e3ba:	d801      	bhi.n	801e3c0 <__hexdig_fun+0x26>
 801e3bc:	3827      	subs	r0, #39	; 0x27
 801e3be:	e7f1      	b.n	801e3a4 <__hexdig_fun+0xa>
 801e3c0:	2000      	movs	r0, #0
 801e3c2:	4770      	bx	lr

0801e3c4 <__gethex>:
 801e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c8:	ed2d 8b02 	vpush	{d8}
 801e3cc:	b089      	sub	sp, #36	; 0x24
 801e3ce:	ee08 0a10 	vmov	s16, r0
 801e3d2:	9304      	str	r3, [sp, #16]
 801e3d4:	4bb4      	ldr	r3, [pc, #720]	; (801e6a8 <__gethex+0x2e4>)
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	9301      	str	r3, [sp, #4]
 801e3da:	4618      	mov	r0, r3
 801e3dc:	468b      	mov	fp, r1
 801e3de:	4690      	mov	r8, r2
 801e3e0:	f7e1 ff08 	bl	80001f4 <strlen>
 801e3e4:	9b01      	ldr	r3, [sp, #4]
 801e3e6:	f8db 2000 	ldr.w	r2, [fp]
 801e3ea:	4403      	add	r3, r0
 801e3ec:	4682      	mov	sl, r0
 801e3ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e3f2:	9305      	str	r3, [sp, #20]
 801e3f4:	1c93      	adds	r3, r2, #2
 801e3f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e3fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e3fe:	32fe      	adds	r2, #254	; 0xfe
 801e400:	18d1      	adds	r1, r2, r3
 801e402:	461f      	mov	r7, r3
 801e404:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e408:	9100      	str	r1, [sp, #0]
 801e40a:	2830      	cmp	r0, #48	; 0x30
 801e40c:	d0f8      	beq.n	801e400 <__gethex+0x3c>
 801e40e:	f7ff ffc4 	bl	801e39a <__hexdig_fun>
 801e412:	4604      	mov	r4, r0
 801e414:	2800      	cmp	r0, #0
 801e416:	d13a      	bne.n	801e48e <__gethex+0xca>
 801e418:	9901      	ldr	r1, [sp, #4]
 801e41a:	4652      	mov	r2, sl
 801e41c:	4638      	mov	r0, r7
 801e41e:	f001 fb3a 	bl	801fa96 <strncmp>
 801e422:	4605      	mov	r5, r0
 801e424:	2800      	cmp	r0, #0
 801e426:	d168      	bne.n	801e4fa <__gethex+0x136>
 801e428:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e42c:	eb07 060a 	add.w	r6, r7, sl
 801e430:	f7ff ffb3 	bl	801e39a <__hexdig_fun>
 801e434:	2800      	cmp	r0, #0
 801e436:	d062      	beq.n	801e4fe <__gethex+0x13a>
 801e438:	4633      	mov	r3, r6
 801e43a:	7818      	ldrb	r0, [r3, #0]
 801e43c:	2830      	cmp	r0, #48	; 0x30
 801e43e:	461f      	mov	r7, r3
 801e440:	f103 0301 	add.w	r3, r3, #1
 801e444:	d0f9      	beq.n	801e43a <__gethex+0x76>
 801e446:	f7ff ffa8 	bl	801e39a <__hexdig_fun>
 801e44a:	2301      	movs	r3, #1
 801e44c:	fab0 f480 	clz	r4, r0
 801e450:	0964      	lsrs	r4, r4, #5
 801e452:	4635      	mov	r5, r6
 801e454:	9300      	str	r3, [sp, #0]
 801e456:	463a      	mov	r2, r7
 801e458:	4616      	mov	r6, r2
 801e45a:	3201      	adds	r2, #1
 801e45c:	7830      	ldrb	r0, [r6, #0]
 801e45e:	f7ff ff9c 	bl	801e39a <__hexdig_fun>
 801e462:	2800      	cmp	r0, #0
 801e464:	d1f8      	bne.n	801e458 <__gethex+0x94>
 801e466:	9901      	ldr	r1, [sp, #4]
 801e468:	4652      	mov	r2, sl
 801e46a:	4630      	mov	r0, r6
 801e46c:	f001 fb13 	bl	801fa96 <strncmp>
 801e470:	b980      	cbnz	r0, 801e494 <__gethex+0xd0>
 801e472:	b94d      	cbnz	r5, 801e488 <__gethex+0xc4>
 801e474:	eb06 050a 	add.w	r5, r6, sl
 801e478:	462a      	mov	r2, r5
 801e47a:	4616      	mov	r6, r2
 801e47c:	3201      	adds	r2, #1
 801e47e:	7830      	ldrb	r0, [r6, #0]
 801e480:	f7ff ff8b 	bl	801e39a <__hexdig_fun>
 801e484:	2800      	cmp	r0, #0
 801e486:	d1f8      	bne.n	801e47a <__gethex+0xb6>
 801e488:	1bad      	subs	r5, r5, r6
 801e48a:	00ad      	lsls	r5, r5, #2
 801e48c:	e004      	b.n	801e498 <__gethex+0xd4>
 801e48e:	2400      	movs	r4, #0
 801e490:	4625      	mov	r5, r4
 801e492:	e7e0      	b.n	801e456 <__gethex+0x92>
 801e494:	2d00      	cmp	r5, #0
 801e496:	d1f7      	bne.n	801e488 <__gethex+0xc4>
 801e498:	7833      	ldrb	r3, [r6, #0]
 801e49a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e49e:	2b50      	cmp	r3, #80	; 0x50
 801e4a0:	d13b      	bne.n	801e51a <__gethex+0x156>
 801e4a2:	7873      	ldrb	r3, [r6, #1]
 801e4a4:	2b2b      	cmp	r3, #43	; 0x2b
 801e4a6:	d02c      	beq.n	801e502 <__gethex+0x13e>
 801e4a8:	2b2d      	cmp	r3, #45	; 0x2d
 801e4aa:	d02e      	beq.n	801e50a <__gethex+0x146>
 801e4ac:	1c71      	adds	r1, r6, #1
 801e4ae:	f04f 0900 	mov.w	r9, #0
 801e4b2:	7808      	ldrb	r0, [r1, #0]
 801e4b4:	f7ff ff71 	bl	801e39a <__hexdig_fun>
 801e4b8:	1e43      	subs	r3, r0, #1
 801e4ba:	b2db      	uxtb	r3, r3
 801e4bc:	2b18      	cmp	r3, #24
 801e4be:	d82c      	bhi.n	801e51a <__gethex+0x156>
 801e4c0:	f1a0 0210 	sub.w	r2, r0, #16
 801e4c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e4c8:	f7ff ff67 	bl	801e39a <__hexdig_fun>
 801e4cc:	1e43      	subs	r3, r0, #1
 801e4ce:	b2db      	uxtb	r3, r3
 801e4d0:	2b18      	cmp	r3, #24
 801e4d2:	d91d      	bls.n	801e510 <__gethex+0x14c>
 801e4d4:	f1b9 0f00 	cmp.w	r9, #0
 801e4d8:	d000      	beq.n	801e4dc <__gethex+0x118>
 801e4da:	4252      	negs	r2, r2
 801e4dc:	4415      	add	r5, r2
 801e4de:	f8cb 1000 	str.w	r1, [fp]
 801e4e2:	b1e4      	cbz	r4, 801e51e <__gethex+0x15a>
 801e4e4:	9b00      	ldr	r3, [sp, #0]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	bf14      	ite	ne
 801e4ea:	2700      	movne	r7, #0
 801e4ec:	2706      	moveq	r7, #6
 801e4ee:	4638      	mov	r0, r7
 801e4f0:	b009      	add	sp, #36	; 0x24
 801e4f2:	ecbd 8b02 	vpop	{d8}
 801e4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4fa:	463e      	mov	r6, r7
 801e4fc:	4625      	mov	r5, r4
 801e4fe:	2401      	movs	r4, #1
 801e500:	e7ca      	b.n	801e498 <__gethex+0xd4>
 801e502:	f04f 0900 	mov.w	r9, #0
 801e506:	1cb1      	adds	r1, r6, #2
 801e508:	e7d3      	b.n	801e4b2 <__gethex+0xee>
 801e50a:	f04f 0901 	mov.w	r9, #1
 801e50e:	e7fa      	b.n	801e506 <__gethex+0x142>
 801e510:	230a      	movs	r3, #10
 801e512:	fb03 0202 	mla	r2, r3, r2, r0
 801e516:	3a10      	subs	r2, #16
 801e518:	e7d4      	b.n	801e4c4 <__gethex+0x100>
 801e51a:	4631      	mov	r1, r6
 801e51c:	e7df      	b.n	801e4de <__gethex+0x11a>
 801e51e:	1bf3      	subs	r3, r6, r7
 801e520:	3b01      	subs	r3, #1
 801e522:	4621      	mov	r1, r4
 801e524:	2b07      	cmp	r3, #7
 801e526:	dc0b      	bgt.n	801e540 <__gethex+0x17c>
 801e528:	ee18 0a10 	vmov	r0, s16
 801e52c:	f000 fada 	bl	801eae4 <_Balloc>
 801e530:	4604      	mov	r4, r0
 801e532:	b940      	cbnz	r0, 801e546 <__gethex+0x182>
 801e534:	4b5d      	ldr	r3, [pc, #372]	; (801e6ac <__gethex+0x2e8>)
 801e536:	4602      	mov	r2, r0
 801e538:	21de      	movs	r1, #222	; 0xde
 801e53a:	485d      	ldr	r0, [pc, #372]	; (801e6b0 <__gethex+0x2ec>)
 801e53c:	f7fe fe78 	bl	801d230 <__assert_func>
 801e540:	3101      	adds	r1, #1
 801e542:	105b      	asrs	r3, r3, #1
 801e544:	e7ee      	b.n	801e524 <__gethex+0x160>
 801e546:	f100 0914 	add.w	r9, r0, #20
 801e54a:	f04f 0b00 	mov.w	fp, #0
 801e54e:	f1ca 0301 	rsb	r3, sl, #1
 801e552:	f8cd 9008 	str.w	r9, [sp, #8]
 801e556:	f8cd b000 	str.w	fp, [sp]
 801e55a:	9306      	str	r3, [sp, #24]
 801e55c:	42b7      	cmp	r7, r6
 801e55e:	d340      	bcc.n	801e5e2 <__gethex+0x21e>
 801e560:	9802      	ldr	r0, [sp, #8]
 801e562:	9b00      	ldr	r3, [sp, #0]
 801e564:	f840 3b04 	str.w	r3, [r0], #4
 801e568:	eba0 0009 	sub.w	r0, r0, r9
 801e56c:	1080      	asrs	r0, r0, #2
 801e56e:	0146      	lsls	r6, r0, #5
 801e570:	6120      	str	r0, [r4, #16]
 801e572:	4618      	mov	r0, r3
 801e574:	f000 fba8 	bl	801ecc8 <__hi0bits>
 801e578:	1a30      	subs	r0, r6, r0
 801e57a:	f8d8 6000 	ldr.w	r6, [r8]
 801e57e:	42b0      	cmp	r0, r6
 801e580:	dd63      	ble.n	801e64a <__gethex+0x286>
 801e582:	1b87      	subs	r7, r0, r6
 801e584:	4639      	mov	r1, r7
 801e586:	4620      	mov	r0, r4
 801e588:	f000 ff4c 	bl	801f424 <__any_on>
 801e58c:	4682      	mov	sl, r0
 801e58e:	b1a8      	cbz	r0, 801e5bc <__gethex+0x1f8>
 801e590:	1e7b      	subs	r3, r7, #1
 801e592:	1159      	asrs	r1, r3, #5
 801e594:	f003 021f 	and.w	r2, r3, #31
 801e598:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e59c:	f04f 0a01 	mov.w	sl, #1
 801e5a0:	fa0a f202 	lsl.w	r2, sl, r2
 801e5a4:	420a      	tst	r2, r1
 801e5a6:	d009      	beq.n	801e5bc <__gethex+0x1f8>
 801e5a8:	4553      	cmp	r3, sl
 801e5aa:	dd05      	ble.n	801e5b8 <__gethex+0x1f4>
 801e5ac:	1eb9      	subs	r1, r7, #2
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f000 ff38 	bl	801f424 <__any_on>
 801e5b4:	2800      	cmp	r0, #0
 801e5b6:	d145      	bne.n	801e644 <__gethex+0x280>
 801e5b8:	f04f 0a02 	mov.w	sl, #2
 801e5bc:	4639      	mov	r1, r7
 801e5be:	4620      	mov	r0, r4
 801e5c0:	f7ff fe99 	bl	801e2f6 <rshift>
 801e5c4:	443d      	add	r5, r7
 801e5c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e5ca:	42ab      	cmp	r3, r5
 801e5cc:	da4c      	bge.n	801e668 <__gethex+0x2a4>
 801e5ce:	ee18 0a10 	vmov	r0, s16
 801e5d2:	4621      	mov	r1, r4
 801e5d4:	f000 fac6 	bl	801eb64 <_Bfree>
 801e5d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e5da:	2300      	movs	r3, #0
 801e5dc:	6013      	str	r3, [r2, #0]
 801e5de:	27a3      	movs	r7, #163	; 0xa3
 801e5e0:	e785      	b.n	801e4ee <__gethex+0x12a>
 801e5e2:	1e73      	subs	r3, r6, #1
 801e5e4:	9a05      	ldr	r2, [sp, #20]
 801e5e6:	9303      	str	r3, [sp, #12]
 801e5e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e5ec:	4293      	cmp	r3, r2
 801e5ee:	d019      	beq.n	801e624 <__gethex+0x260>
 801e5f0:	f1bb 0f20 	cmp.w	fp, #32
 801e5f4:	d107      	bne.n	801e606 <__gethex+0x242>
 801e5f6:	9b02      	ldr	r3, [sp, #8]
 801e5f8:	9a00      	ldr	r2, [sp, #0]
 801e5fa:	f843 2b04 	str.w	r2, [r3], #4
 801e5fe:	9302      	str	r3, [sp, #8]
 801e600:	2300      	movs	r3, #0
 801e602:	9300      	str	r3, [sp, #0]
 801e604:	469b      	mov	fp, r3
 801e606:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e60a:	f7ff fec6 	bl	801e39a <__hexdig_fun>
 801e60e:	9b00      	ldr	r3, [sp, #0]
 801e610:	f000 000f 	and.w	r0, r0, #15
 801e614:	fa00 f00b 	lsl.w	r0, r0, fp
 801e618:	4303      	orrs	r3, r0
 801e61a:	9300      	str	r3, [sp, #0]
 801e61c:	f10b 0b04 	add.w	fp, fp, #4
 801e620:	9b03      	ldr	r3, [sp, #12]
 801e622:	e00d      	b.n	801e640 <__gethex+0x27c>
 801e624:	9b03      	ldr	r3, [sp, #12]
 801e626:	9a06      	ldr	r2, [sp, #24]
 801e628:	4413      	add	r3, r2
 801e62a:	42bb      	cmp	r3, r7
 801e62c:	d3e0      	bcc.n	801e5f0 <__gethex+0x22c>
 801e62e:	4618      	mov	r0, r3
 801e630:	9901      	ldr	r1, [sp, #4]
 801e632:	9307      	str	r3, [sp, #28]
 801e634:	4652      	mov	r2, sl
 801e636:	f001 fa2e 	bl	801fa96 <strncmp>
 801e63a:	9b07      	ldr	r3, [sp, #28]
 801e63c:	2800      	cmp	r0, #0
 801e63e:	d1d7      	bne.n	801e5f0 <__gethex+0x22c>
 801e640:	461e      	mov	r6, r3
 801e642:	e78b      	b.n	801e55c <__gethex+0x198>
 801e644:	f04f 0a03 	mov.w	sl, #3
 801e648:	e7b8      	b.n	801e5bc <__gethex+0x1f8>
 801e64a:	da0a      	bge.n	801e662 <__gethex+0x29e>
 801e64c:	1a37      	subs	r7, r6, r0
 801e64e:	4621      	mov	r1, r4
 801e650:	ee18 0a10 	vmov	r0, s16
 801e654:	463a      	mov	r2, r7
 801e656:	f000 fca1 	bl	801ef9c <__lshift>
 801e65a:	1bed      	subs	r5, r5, r7
 801e65c:	4604      	mov	r4, r0
 801e65e:	f100 0914 	add.w	r9, r0, #20
 801e662:	f04f 0a00 	mov.w	sl, #0
 801e666:	e7ae      	b.n	801e5c6 <__gethex+0x202>
 801e668:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e66c:	42a8      	cmp	r0, r5
 801e66e:	dd72      	ble.n	801e756 <__gethex+0x392>
 801e670:	1b45      	subs	r5, r0, r5
 801e672:	42ae      	cmp	r6, r5
 801e674:	dc36      	bgt.n	801e6e4 <__gethex+0x320>
 801e676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e67a:	2b02      	cmp	r3, #2
 801e67c:	d02a      	beq.n	801e6d4 <__gethex+0x310>
 801e67e:	2b03      	cmp	r3, #3
 801e680:	d02c      	beq.n	801e6dc <__gethex+0x318>
 801e682:	2b01      	cmp	r3, #1
 801e684:	d11c      	bne.n	801e6c0 <__gethex+0x2fc>
 801e686:	42ae      	cmp	r6, r5
 801e688:	d11a      	bne.n	801e6c0 <__gethex+0x2fc>
 801e68a:	2e01      	cmp	r6, #1
 801e68c:	d112      	bne.n	801e6b4 <__gethex+0x2f0>
 801e68e:	9a04      	ldr	r2, [sp, #16]
 801e690:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e694:	6013      	str	r3, [r2, #0]
 801e696:	2301      	movs	r3, #1
 801e698:	6123      	str	r3, [r4, #16]
 801e69a:	f8c9 3000 	str.w	r3, [r9]
 801e69e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e6a0:	2762      	movs	r7, #98	; 0x62
 801e6a2:	601c      	str	r4, [r3, #0]
 801e6a4:	e723      	b.n	801e4ee <__gethex+0x12a>
 801e6a6:	bf00      	nop
 801e6a8:	08021e9c 	.word	0x08021e9c
 801e6ac:	08021dc1 	.word	0x08021dc1
 801e6b0:	08021e34 	.word	0x08021e34
 801e6b4:	1e71      	subs	r1, r6, #1
 801e6b6:	4620      	mov	r0, r4
 801e6b8:	f000 feb4 	bl	801f424 <__any_on>
 801e6bc:	2800      	cmp	r0, #0
 801e6be:	d1e6      	bne.n	801e68e <__gethex+0x2ca>
 801e6c0:	ee18 0a10 	vmov	r0, s16
 801e6c4:	4621      	mov	r1, r4
 801e6c6:	f000 fa4d 	bl	801eb64 <_Bfree>
 801e6ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	6013      	str	r3, [r2, #0]
 801e6d0:	2750      	movs	r7, #80	; 0x50
 801e6d2:	e70c      	b.n	801e4ee <__gethex+0x12a>
 801e6d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d1f2      	bne.n	801e6c0 <__gethex+0x2fc>
 801e6da:	e7d8      	b.n	801e68e <__gethex+0x2ca>
 801e6dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d1d5      	bne.n	801e68e <__gethex+0x2ca>
 801e6e2:	e7ed      	b.n	801e6c0 <__gethex+0x2fc>
 801e6e4:	1e6f      	subs	r7, r5, #1
 801e6e6:	f1ba 0f00 	cmp.w	sl, #0
 801e6ea:	d131      	bne.n	801e750 <__gethex+0x38c>
 801e6ec:	b127      	cbz	r7, 801e6f8 <__gethex+0x334>
 801e6ee:	4639      	mov	r1, r7
 801e6f0:	4620      	mov	r0, r4
 801e6f2:	f000 fe97 	bl	801f424 <__any_on>
 801e6f6:	4682      	mov	sl, r0
 801e6f8:	117b      	asrs	r3, r7, #5
 801e6fa:	2101      	movs	r1, #1
 801e6fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e700:	f007 071f 	and.w	r7, r7, #31
 801e704:	fa01 f707 	lsl.w	r7, r1, r7
 801e708:	421f      	tst	r7, r3
 801e70a:	4629      	mov	r1, r5
 801e70c:	4620      	mov	r0, r4
 801e70e:	bf18      	it	ne
 801e710:	f04a 0a02 	orrne.w	sl, sl, #2
 801e714:	1b76      	subs	r6, r6, r5
 801e716:	f7ff fdee 	bl	801e2f6 <rshift>
 801e71a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e71e:	2702      	movs	r7, #2
 801e720:	f1ba 0f00 	cmp.w	sl, #0
 801e724:	d048      	beq.n	801e7b8 <__gethex+0x3f4>
 801e726:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e72a:	2b02      	cmp	r3, #2
 801e72c:	d015      	beq.n	801e75a <__gethex+0x396>
 801e72e:	2b03      	cmp	r3, #3
 801e730:	d017      	beq.n	801e762 <__gethex+0x39e>
 801e732:	2b01      	cmp	r3, #1
 801e734:	d109      	bne.n	801e74a <__gethex+0x386>
 801e736:	f01a 0f02 	tst.w	sl, #2
 801e73a:	d006      	beq.n	801e74a <__gethex+0x386>
 801e73c:	f8d9 0000 	ldr.w	r0, [r9]
 801e740:	ea4a 0a00 	orr.w	sl, sl, r0
 801e744:	f01a 0f01 	tst.w	sl, #1
 801e748:	d10e      	bne.n	801e768 <__gethex+0x3a4>
 801e74a:	f047 0710 	orr.w	r7, r7, #16
 801e74e:	e033      	b.n	801e7b8 <__gethex+0x3f4>
 801e750:	f04f 0a01 	mov.w	sl, #1
 801e754:	e7d0      	b.n	801e6f8 <__gethex+0x334>
 801e756:	2701      	movs	r7, #1
 801e758:	e7e2      	b.n	801e720 <__gethex+0x35c>
 801e75a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e75c:	f1c3 0301 	rsb	r3, r3, #1
 801e760:	9315      	str	r3, [sp, #84]	; 0x54
 801e762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e764:	2b00      	cmp	r3, #0
 801e766:	d0f0      	beq.n	801e74a <__gethex+0x386>
 801e768:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e76c:	f104 0314 	add.w	r3, r4, #20
 801e770:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e774:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e778:	f04f 0c00 	mov.w	ip, #0
 801e77c:	4618      	mov	r0, r3
 801e77e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e782:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e786:	d01c      	beq.n	801e7c2 <__gethex+0x3fe>
 801e788:	3201      	adds	r2, #1
 801e78a:	6002      	str	r2, [r0, #0]
 801e78c:	2f02      	cmp	r7, #2
 801e78e:	f104 0314 	add.w	r3, r4, #20
 801e792:	d13f      	bne.n	801e814 <__gethex+0x450>
 801e794:	f8d8 2000 	ldr.w	r2, [r8]
 801e798:	3a01      	subs	r2, #1
 801e79a:	42b2      	cmp	r2, r6
 801e79c:	d10a      	bne.n	801e7b4 <__gethex+0x3f0>
 801e79e:	1171      	asrs	r1, r6, #5
 801e7a0:	2201      	movs	r2, #1
 801e7a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e7a6:	f006 061f 	and.w	r6, r6, #31
 801e7aa:	fa02 f606 	lsl.w	r6, r2, r6
 801e7ae:	421e      	tst	r6, r3
 801e7b0:	bf18      	it	ne
 801e7b2:	4617      	movne	r7, r2
 801e7b4:	f047 0720 	orr.w	r7, r7, #32
 801e7b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e7ba:	601c      	str	r4, [r3, #0]
 801e7bc:	9b04      	ldr	r3, [sp, #16]
 801e7be:	601d      	str	r5, [r3, #0]
 801e7c0:	e695      	b.n	801e4ee <__gethex+0x12a>
 801e7c2:	4299      	cmp	r1, r3
 801e7c4:	f843 cc04 	str.w	ip, [r3, #-4]
 801e7c8:	d8d8      	bhi.n	801e77c <__gethex+0x3b8>
 801e7ca:	68a3      	ldr	r3, [r4, #8]
 801e7cc:	459b      	cmp	fp, r3
 801e7ce:	db19      	blt.n	801e804 <__gethex+0x440>
 801e7d0:	6861      	ldr	r1, [r4, #4]
 801e7d2:	ee18 0a10 	vmov	r0, s16
 801e7d6:	3101      	adds	r1, #1
 801e7d8:	f000 f984 	bl	801eae4 <_Balloc>
 801e7dc:	4681      	mov	r9, r0
 801e7de:	b918      	cbnz	r0, 801e7e8 <__gethex+0x424>
 801e7e0:	4b1a      	ldr	r3, [pc, #104]	; (801e84c <__gethex+0x488>)
 801e7e2:	4602      	mov	r2, r0
 801e7e4:	2184      	movs	r1, #132	; 0x84
 801e7e6:	e6a8      	b.n	801e53a <__gethex+0x176>
 801e7e8:	6922      	ldr	r2, [r4, #16]
 801e7ea:	3202      	adds	r2, #2
 801e7ec:	f104 010c 	add.w	r1, r4, #12
 801e7f0:	0092      	lsls	r2, r2, #2
 801e7f2:	300c      	adds	r0, #12
 801e7f4:	f7fc fc96 	bl	801b124 <memcpy>
 801e7f8:	4621      	mov	r1, r4
 801e7fa:	ee18 0a10 	vmov	r0, s16
 801e7fe:	f000 f9b1 	bl	801eb64 <_Bfree>
 801e802:	464c      	mov	r4, r9
 801e804:	6923      	ldr	r3, [r4, #16]
 801e806:	1c5a      	adds	r2, r3, #1
 801e808:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e80c:	6122      	str	r2, [r4, #16]
 801e80e:	2201      	movs	r2, #1
 801e810:	615a      	str	r2, [r3, #20]
 801e812:	e7bb      	b.n	801e78c <__gethex+0x3c8>
 801e814:	6922      	ldr	r2, [r4, #16]
 801e816:	455a      	cmp	r2, fp
 801e818:	dd0b      	ble.n	801e832 <__gethex+0x46e>
 801e81a:	2101      	movs	r1, #1
 801e81c:	4620      	mov	r0, r4
 801e81e:	f7ff fd6a 	bl	801e2f6 <rshift>
 801e822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e826:	3501      	adds	r5, #1
 801e828:	42ab      	cmp	r3, r5
 801e82a:	f6ff aed0 	blt.w	801e5ce <__gethex+0x20a>
 801e82e:	2701      	movs	r7, #1
 801e830:	e7c0      	b.n	801e7b4 <__gethex+0x3f0>
 801e832:	f016 061f 	ands.w	r6, r6, #31
 801e836:	d0fa      	beq.n	801e82e <__gethex+0x46a>
 801e838:	4453      	add	r3, sl
 801e83a:	f1c6 0620 	rsb	r6, r6, #32
 801e83e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e842:	f000 fa41 	bl	801ecc8 <__hi0bits>
 801e846:	42b0      	cmp	r0, r6
 801e848:	dbe7      	blt.n	801e81a <__gethex+0x456>
 801e84a:	e7f0      	b.n	801e82e <__gethex+0x46a>
 801e84c:	08021dc1 	.word	0x08021dc1

0801e850 <L_shift>:
 801e850:	f1c2 0208 	rsb	r2, r2, #8
 801e854:	0092      	lsls	r2, r2, #2
 801e856:	b570      	push	{r4, r5, r6, lr}
 801e858:	f1c2 0620 	rsb	r6, r2, #32
 801e85c:	6843      	ldr	r3, [r0, #4]
 801e85e:	6804      	ldr	r4, [r0, #0]
 801e860:	fa03 f506 	lsl.w	r5, r3, r6
 801e864:	432c      	orrs	r4, r5
 801e866:	40d3      	lsrs	r3, r2
 801e868:	6004      	str	r4, [r0, #0]
 801e86a:	f840 3f04 	str.w	r3, [r0, #4]!
 801e86e:	4288      	cmp	r0, r1
 801e870:	d3f4      	bcc.n	801e85c <L_shift+0xc>
 801e872:	bd70      	pop	{r4, r5, r6, pc}

0801e874 <__match>:
 801e874:	b530      	push	{r4, r5, lr}
 801e876:	6803      	ldr	r3, [r0, #0]
 801e878:	3301      	adds	r3, #1
 801e87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e87e:	b914      	cbnz	r4, 801e886 <__match+0x12>
 801e880:	6003      	str	r3, [r0, #0]
 801e882:	2001      	movs	r0, #1
 801e884:	bd30      	pop	{r4, r5, pc}
 801e886:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e88a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e88e:	2d19      	cmp	r5, #25
 801e890:	bf98      	it	ls
 801e892:	3220      	addls	r2, #32
 801e894:	42a2      	cmp	r2, r4
 801e896:	d0f0      	beq.n	801e87a <__match+0x6>
 801e898:	2000      	movs	r0, #0
 801e89a:	e7f3      	b.n	801e884 <__match+0x10>

0801e89c <__hexnan>:
 801e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a0:	680b      	ldr	r3, [r1, #0]
 801e8a2:	115e      	asrs	r6, r3, #5
 801e8a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e8a8:	f013 031f 	ands.w	r3, r3, #31
 801e8ac:	b087      	sub	sp, #28
 801e8ae:	bf18      	it	ne
 801e8b0:	3604      	addne	r6, #4
 801e8b2:	2500      	movs	r5, #0
 801e8b4:	1f37      	subs	r7, r6, #4
 801e8b6:	4690      	mov	r8, r2
 801e8b8:	6802      	ldr	r2, [r0, #0]
 801e8ba:	9301      	str	r3, [sp, #4]
 801e8bc:	4682      	mov	sl, r0
 801e8be:	f846 5c04 	str.w	r5, [r6, #-4]
 801e8c2:	46b9      	mov	r9, r7
 801e8c4:	463c      	mov	r4, r7
 801e8c6:	9502      	str	r5, [sp, #8]
 801e8c8:	46ab      	mov	fp, r5
 801e8ca:	7851      	ldrb	r1, [r2, #1]
 801e8cc:	1c53      	adds	r3, r2, #1
 801e8ce:	9303      	str	r3, [sp, #12]
 801e8d0:	b341      	cbz	r1, 801e924 <__hexnan+0x88>
 801e8d2:	4608      	mov	r0, r1
 801e8d4:	9205      	str	r2, [sp, #20]
 801e8d6:	9104      	str	r1, [sp, #16]
 801e8d8:	f7ff fd5f 	bl	801e39a <__hexdig_fun>
 801e8dc:	2800      	cmp	r0, #0
 801e8de:	d14f      	bne.n	801e980 <__hexnan+0xe4>
 801e8e0:	9904      	ldr	r1, [sp, #16]
 801e8e2:	9a05      	ldr	r2, [sp, #20]
 801e8e4:	2920      	cmp	r1, #32
 801e8e6:	d818      	bhi.n	801e91a <__hexnan+0x7e>
 801e8e8:	9b02      	ldr	r3, [sp, #8]
 801e8ea:	459b      	cmp	fp, r3
 801e8ec:	dd13      	ble.n	801e916 <__hexnan+0x7a>
 801e8ee:	454c      	cmp	r4, r9
 801e8f0:	d206      	bcs.n	801e900 <__hexnan+0x64>
 801e8f2:	2d07      	cmp	r5, #7
 801e8f4:	dc04      	bgt.n	801e900 <__hexnan+0x64>
 801e8f6:	462a      	mov	r2, r5
 801e8f8:	4649      	mov	r1, r9
 801e8fa:	4620      	mov	r0, r4
 801e8fc:	f7ff ffa8 	bl	801e850 <L_shift>
 801e900:	4544      	cmp	r4, r8
 801e902:	d950      	bls.n	801e9a6 <__hexnan+0x10a>
 801e904:	2300      	movs	r3, #0
 801e906:	f1a4 0904 	sub.w	r9, r4, #4
 801e90a:	f844 3c04 	str.w	r3, [r4, #-4]
 801e90e:	f8cd b008 	str.w	fp, [sp, #8]
 801e912:	464c      	mov	r4, r9
 801e914:	461d      	mov	r5, r3
 801e916:	9a03      	ldr	r2, [sp, #12]
 801e918:	e7d7      	b.n	801e8ca <__hexnan+0x2e>
 801e91a:	2929      	cmp	r1, #41	; 0x29
 801e91c:	d156      	bne.n	801e9cc <__hexnan+0x130>
 801e91e:	3202      	adds	r2, #2
 801e920:	f8ca 2000 	str.w	r2, [sl]
 801e924:	f1bb 0f00 	cmp.w	fp, #0
 801e928:	d050      	beq.n	801e9cc <__hexnan+0x130>
 801e92a:	454c      	cmp	r4, r9
 801e92c:	d206      	bcs.n	801e93c <__hexnan+0xa0>
 801e92e:	2d07      	cmp	r5, #7
 801e930:	dc04      	bgt.n	801e93c <__hexnan+0xa0>
 801e932:	462a      	mov	r2, r5
 801e934:	4649      	mov	r1, r9
 801e936:	4620      	mov	r0, r4
 801e938:	f7ff ff8a 	bl	801e850 <L_shift>
 801e93c:	4544      	cmp	r4, r8
 801e93e:	d934      	bls.n	801e9aa <__hexnan+0x10e>
 801e940:	f1a8 0204 	sub.w	r2, r8, #4
 801e944:	4623      	mov	r3, r4
 801e946:	f853 1b04 	ldr.w	r1, [r3], #4
 801e94a:	f842 1f04 	str.w	r1, [r2, #4]!
 801e94e:	429f      	cmp	r7, r3
 801e950:	d2f9      	bcs.n	801e946 <__hexnan+0xaa>
 801e952:	1b3b      	subs	r3, r7, r4
 801e954:	f023 0303 	bic.w	r3, r3, #3
 801e958:	3304      	adds	r3, #4
 801e95a:	3401      	adds	r4, #1
 801e95c:	3e03      	subs	r6, #3
 801e95e:	42b4      	cmp	r4, r6
 801e960:	bf88      	it	hi
 801e962:	2304      	movhi	r3, #4
 801e964:	4443      	add	r3, r8
 801e966:	2200      	movs	r2, #0
 801e968:	f843 2b04 	str.w	r2, [r3], #4
 801e96c:	429f      	cmp	r7, r3
 801e96e:	d2fb      	bcs.n	801e968 <__hexnan+0xcc>
 801e970:	683b      	ldr	r3, [r7, #0]
 801e972:	b91b      	cbnz	r3, 801e97c <__hexnan+0xe0>
 801e974:	4547      	cmp	r7, r8
 801e976:	d127      	bne.n	801e9c8 <__hexnan+0x12c>
 801e978:	2301      	movs	r3, #1
 801e97a:	603b      	str	r3, [r7, #0]
 801e97c:	2005      	movs	r0, #5
 801e97e:	e026      	b.n	801e9ce <__hexnan+0x132>
 801e980:	3501      	adds	r5, #1
 801e982:	2d08      	cmp	r5, #8
 801e984:	f10b 0b01 	add.w	fp, fp, #1
 801e988:	dd06      	ble.n	801e998 <__hexnan+0xfc>
 801e98a:	4544      	cmp	r4, r8
 801e98c:	d9c3      	bls.n	801e916 <__hexnan+0x7a>
 801e98e:	2300      	movs	r3, #0
 801e990:	f844 3c04 	str.w	r3, [r4, #-4]
 801e994:	2501      	movs	r5, #1
 801e996:	3c04      	subs	r4, #4
 801e998:	6822      	ldr	r2, [r4, #0]
 801e99a:	f000 000f 	and.w	r0, r0, #15
 801e99e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e9a2:	6022      	str	r2, [r4, #0]
 801e9a4:	e7b7      	b.n	801e916 <__hexnan+0x7a>
 801e9a6:	2508      	movs	r5, #8
 801e9a8:	e7b5      	b.n	801e916 <__hexnan+0x7a>
 801e9aa:	9b01      	ldr	r3, [sp, #4]
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d0df      	beq.n	801e970 <__hexnan+0xd4>
 801e9b0:	f04f 32ff 	mov.w	r2, #4294967295
 801e9b4:	f1c3 0320 	rsb	r3, r3, #32
 801e9b8:	fa22 f303 	lsr.w	r3, r2, r3
 801e9bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e9c0:	401a      	ands	r2, r3
 801e9c2:	f846 2c04 	str.w	r2, [r6, #-4]
 801e9c6:	e7d3      	b.n	801e970 <__hexnan+0xd4>
 801e9c8:	3f04      	subs	r7, #4
 801e9ca:	e7d1      	b.n	801e970 <__hexnan+0xd4>
 801e9cc:	2004      	movs	r0, #4
 801e9ce:	b007      	add	sp, #28
 801e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9d4 <_localeconv_r>:
 801e9d4:	4800      	ldr	r0, [pc, #0]	; (801e9d8 <_localeconv_r+0x4>)
 801e9d6:	4770      	bx	lr
 801e9d8:	20000298 	.word	0x20000298

0801e9dc <__swhatbuf_r>:
 801e9dc:	b570      	push	{r4, r5, r6, lr}
 801e9de:	460e      	mov	r6, r1
 801e9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9e4:	2900      	cmp	r1, #0
 801e9e6:	b096      	sub	sp, #88	; 0x58
 801e9e8:	4614      	mov	r4, r2
 801e9ea:	461d      	mov	r5, r3
 801e9ec:	da08      	bge.n	801ea00 <__swhatbuf_r+0x24>
 801e9ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e9f2:	2200      	movs	r2, #0
 801e9f4:	602a      	str	r2, [r5, #0]
 801e9f6:	061a      	lsls	r2, r3, #24
 801e9f8:	d410      	bmi.n	801ea1c <__swhatbuf_r+0x40>
 801e9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e9fe:	e00e      	b.n	801ea1e <__swhatbuf_r+0x42>
 801ea00:	466a      	mov	r2, sp
 801ea02:	f001 f893 	bl	801fb2c <_fstat_r>
 801ea06:	2800      	cmp	r0, #0
 801ea08:	dbf1      	blt.n	801e9ee <__swhatbuf_r+0x12>
 801ea0a:	9a01      	ldr	r2, [sp, #4]
 801ea0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ea10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ea14:	425a      	negs	r2, r3
 801ea16:	415a      	adcs	r2, r3
 801ea18:	602a      	str	r2, [r5, #0]
 801ea1a:	e7ee      	b.n	801e9fa <__swhatbuf_r+0x1e>
 801ea1c:	2340      	movs	r3, #64	; 0x40
 801ea1e:	2000      	movs	r0, #0
 801ea20:	6023      	str	r3, [r4, #0]
 801ea22:	b016      	add	sp, #88	; 0x58
 801ea24:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ea28 <__smakebuf_r>:
 801ea28:	898b      	ldrh	r3, [r1, #12]
 801ea2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ea2c:	079d      	lsls	r5, r3, #30
 801ea2e:	4606      	mov	r6, r0
 801ea30:	460c      	mov	r4, r1
 801ea32:	d507      	bpl.n	801ea44 <__smakebuf_r+0x1c>
 801ea34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ea38:	6023      	str	r3, [r4, #0]
 801ea3a:	6123      	str	r3, [r4, #16]
 801ea3c:	2301      	movs	r3, #1
 801ea3e:	6163      	str	r3, [r4, #20]
 801ea40:	b002      	add	sp, #8
 801ea42:	bd70      	pop	{r4, r5, r6, pc}
 801ea44:	ab01      	add	r3, sp, #4
 801ea46:	466a      	mov	r2, sp
 801ea48:	f7ff ffc8 	bl	801e9dc <__swhatbuf_r>
 801ea4c:	9900      	ldr	r1, [sp, #0]
 801ea4e:	4605      	mov	r5, r0
 801ea50:	4630      	mov	r0, r6
 801ea52:	f7fc fc03 	bl	801b25c <_malloc_r>
 801ea56:	b948      	cbnz	r0, 801ea6c <__smakebuf_r+0x44>
 801ea58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea5c:	059a      	lsls	r2, r3, #22
 801ea5e:	d4ef      	bmi.n	801ea40 <__smakebuf_r+0x18>
 801ea60:	f023 0303 	bic.w	r3, r3, #3
 801ea64:	f043 0302 	orr.w	r3, r3, #2
 801ea68:	81a3      	strh	r3, [r4, #12]
 801ea6a:	e7e3      	b.n	801ea34 <__smakebuf_r+0xc>
 801ea6c:	4b0d      	ldr	r3, [pc, #52]	; (801eaa4 <__smakebuf_r+0x7c>)
 801ea6e:	62b3      	str	r3, [r6, #40]	; 0x28
 801ea70:	89a3      	ldrh	r3, [r4, #12]
 801ea72:	6020      	str	r0, [r4, #0]
 801ea74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ea78:	81a3      	strh	r3, [r4, #12]
 801ea7a:	9b00      	ldr	r3, [sp, #0]
 801ea7c:	6163      	str	r3, [r4, #20]
 801ea7e:	9b01      	ldr	r3, [sp, #4]
 801ea80:	6120      	str	r0, [r4, #16]
 801ea82:	b15b      	cbz	r3, 801ea9c <__smakebuf_r+0x74>
 801ea84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea88:	4630      	mov	r0, r6
 801ea8a:	f001 f861 	bl	801fb50 <_isatty_r>
 801ea8e:	b128      	cbz	r0, 801ea9c <__smakebuf_r+0x74>
 801ea90:	89a3      	ldrh	r3, [r4, #12]
 801ea92:	f023 0303 	bic.w	r3, r3, #3
 801ea96:	f043 0301 	orr.w	r3, r3, #1
 801ea9a:	81a3      	strh	r3, [r4, #12]
 801ea9c:	89a0      	ldrh	r0, [r4, #12]
 801ea9e:	4305      	orrs	r5, r0
 801eaa0:	81a5      	strh	r5, [r4, #12]
 801eaa2:	e7cd      	b.n	801ea40 <__smakebuf_r+0x18>
 801eaa4:	0801e131 	.word	0x0801e131

0801eaa8 <__ascii_mbtowc>:
 801eaa8:	b082      	sub	sp, #8
 801eaaa:	b901      	cbnz	r1, 801eaae <__ascii_mbtowc+0x6>
 801eaac:	a901      	add	r1, sp, #4
 801eaae:	b142      	cbz	r2, 801eac2 <__ascii_mbtowc+0x1a>
 801eab0:	b14b      	cbz	r3, 801eac6 <__ascii_mbtowc+0x1e>
 801eab2:	7813      	ldrb	r3, [r2, #0]
 801eab4:	600b      	str	r3, [r1, #0]
 801eab6:	7812      	ldrb	r2, [r2, #0]
 801eab8:	1e10      	subs	r0, r2, #0
 801eaba:	bf18      	it	ne
 801eabc:	2001      	movne	r0, #1
 801eabe:	b002      	add	sp, #8
 801eac0:	4770      	bx	lr
 801eac2:	4610      	mov	r0, r2
 801eac4:	e7fb      	b.n	801eabe <__ascii_mbtowc+0x16>
 801eac6:	f06f 0001 	mvn.w	r0, #1
 801eaca:	e7f8      	b.n	801eabe <__ascii_mbtowc+0x16>

0801eacc <__malloc_lock>:
 801eacc:	4801      	ldr	r0, [pc, #4]	; (801ead4 <__malloc_lock+0x8>)
 801eace:	f7fc bb1e 	b.w	801b10e <__retarget_lock_acquire_recursive>
 801ead2:	bf00      	nop
 801ead4:	2000360c 	.word	0x2000360c

0801ead8 <__malloc_unlock>:
 801ead8:	4801      	ldr	r0, [pc, #4]	; (801eae0 <__malloc_unlock+0x8>)
 801eada:	f7fc bb19 	b.w	801b110 <__retarget_lock_release_recursive>
 801eade:	bf00      	nop
 801eae0:	2000360c 	.word	0x2000360c

0801eae4 <_Balloc>:
 801eae4:	b570      	push	{r4, r5, r6, lr}
 801eae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eae8:	4604      	mov	r4, r0
 801eaea:	460d      	mov	r5, r1
 801eaec:	b976      	cbnz	r6, 801eb0c <_Balloc+0x28>
 801eaee:	2010      	movs	r0, #16
 801eaf0:	f7fc fb10 	bl	801b114 <malloc>
 801eaf4:	4602      	mov	r2, r0
 801eaf6:	6260      	str	r0, [r4, #36]	; 0x24
 801eaf8:	b920      	cbnz	r0, 801eb04 <_Balloc+0x20>
 801eafa:	4b18      	ldr	r3, [pc, #96]	; (801eb5c <_Balloc+0x78>)
 801eafc:	4818      	ldr	r0, [pc, #96]	; (801eb60 <_Balloc+0x7c>)
 801eafe:	2166      	movs	r1, #102	; 0x66
 801eb00:	f7fe fb96 	bl	801d230 <__assert_func>
 801eb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eb08:	6006      	str	r6, [r0, #0]
 801eb0a:	60c6      	str	r6, [r0, #12]
 801eb0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801eb0e:	68f3      	ldr	r3, [r6, #12]
 801eb10:	b183      	cbz	r3, 801eb34 <_Balloc+0x50>
 801eb12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eb14:	68db      	ldr	r3, [r3, #12]
 801eb16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801eb1a:	b9b8      	cbnz	r0, 801eb4c <_Balloc+0x68>
 801eb1c:	2101      	movs	r1, #1
 801eb1e:	fa01 f605 	lsl.w	r6, r1, r5
 801eb22:	1d72      	adds	r2, r6, #5
 801eb24:	0092      	lsls	r2, r2, #2
 801eb26:	4620      	mov	r0, r4
 801eb28:	f000 fc9d 	bl	801f466 <_calloc_r>
 801eb2c:	b160      	cbz	r0, 801eb48 <_Balloc+0x64>
 801eb2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801eb32:	e00e      	b.n	801eb52 <_Balloc+0x6e>
 801eb34:	2221      	movs	r2, #33	; 0x21
 801eb36:	2104      	movs	r1, #4
 801eb38:	4620      	mov	r0, r4
 801eb3a:	f000 fc94 	bl	801f466 <_calloc_r>
 801eb3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eb40:	60f0      	str	r0, [r6, #12]
 801eb42:	68db      	ldr	r3, [r3, #12]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d1e4      	bne.n	801eb12 <_Balloc+0x2e>
 801eb48:	2000      	movs	r0, #0
 801eb4a:	bd70      	pop	{r4, r5, r6, pc}
 801eb4c:	6802      	ldr	r2, [r0, #0]
 801eb4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801eb52:	2300      	movs	r3, #0
 801eb54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801eb58:	e7f7      	b.n	801eb4a <_Balloc+0x66>
 801eb5a:	bf00      	nop
 801eb5c:	08021ba8 	.word	0x08021ba8
 801eb60:	08021eb0 	.word	0x08021eb0

0801eb64 <_Bfree>:
 801eb64:	b570      	push	{r4, r5, r6, lr}
 801eb66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eb68:	4605      	mov	r5, r0
 801eb6a:	460c      	mov	r4, r1
 801eb6c:	b976      	cbnz	r6, 801eb8c <_Bfree+0x28>
 801eb6e:	2010      	movs	r0, #16
 801eb70:	f7fc fad0 	bl	801b114 <malloc>
 801eb74:	4602      	mov	r2, r0
 801eb76:	6268      	str	r0, [r5, #36]	; 0x24
 801eb78:	b920      	cbnz	r0, 801eb84 <_Bfree+0x20>
 801eb7a:	4b09      	ldr	r3, [pc, #36]	; (801eba0 <_Bfree+0x3c>)
 801eb7c:	4809      	ldr	r0, [pc, #36]	; (801eba4 <_Bfree+0x40>)
 801eb7e:	218a      	movs	r1, #138	; 0x8a
 801eb80:	f7fe fb56 	bl	801d230 <__assert_func>
 801eb84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eb88:	6006      	str	r6, [r0, #0]
 801eb8a:	60c6      	str	r6, [r0, #12]
 801eb8c:	b13c      	cbz	r4, 801eb9e <_Bfree+0x3a>
 801eb8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801eb90:	6862      	ldr	r2, [r4, #4]
 801eb92:	68db      	ldr	r3, [r3, #12]
 801eb94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801eb98:	6021      	str	r1, [r4, #0]
 801eb9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801eb9e:	bd70      	pop	{r4, r5, r6, pc}
 801eba0:	08021ba8 	.word	0x08021ba8
 801eba4:	08021eb0 	.word	0x08021eb0

0801eba8 <__multadd>:
 801eba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebac:	690d      	ldr	r5, [r1, #16]
 801ebae:	4607      	mov	r7, r0
 801ebb0:	460c      	mov	r4, r1
 801ebb2:	461e      	mov	r6, r3
 801ebb4:	f101 0c14 	add.w	ip, r1, #20
 801ebb8:	2000      	movs	r0, #0
 801ebba:	f8dc 3000 	ldr.w	r3, [ip]
 801ebbe:	b299      	uxth	r1, r3
 801ebc0:	fb02 6101 	mla	r1, r2, r1, r6
 801ebc4:	0c1e      	lsrs	r6, r3, #16
 801ebc6:	0c0b      	lsrs	r3, r1, #16
 801ebc8:	fb02 3306 	mla	r3, r2, r6, r3
 801ebcc:	b289      	uxth	r1, r1
 801ebce:	3001      	adds	r0, #1
 801ebd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ebd4:	4285      	cmp	r5, r0
 801ebd6:	f84c 1b04 	str.w	r1, [ip], #4
 801ebda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ebde:	dcec      	bgt.n	801ebba <__multadd+0x12>
 801ebe0:	b30e      	cbz	r6, 801ec26 <__multadd+0x7e>
 801ebe2:	68a3      	ldr	r3, [r4, #8]
 801ebe4:	42ab      	cmp	r3, r5
 801ebe6:	dc19      	bgt.n	801ec1c <__multadd+0x74>
 801ebe8:	6861      	ldr	r1, [r4, #4]
 801ebea:	4638      	mov	r0, r7
 801ebec:	3101      	adds	r1, #1
 801ebee:	f7ff ff79 	bl	801eae4 <_Balloc>
 801ebf2:	4680      	mov	r8, r0
 801ebf4:	b928      	cbnz	r0, 801ec02 <__multadd+0x5a>
 801ebf6:	4602      	mov	r2, r0
 801ebf8:	4b0c      	ldr	r3, [pc, #48]	; (801ec2c <__multadd+0x84>)
 801ebfa:	480d      	ldr	r0, [pc, #52]	; (801ec30 <__multadd+0x88>)
 801ebfc:	21b5      	movs	r1, #181	; 0xb5
 801ebfe:	f7fe fb17 	bl	801d230 <__assert_func>
 801ec02:	6922      	ldr	r2, [r4, #16]
 801ec04:	3202      	adds	r2, #2
 801ec06:	f104 010c 	add.w	r1, r4, #12
 801ec0a:	0092      	lsls	r2, r2, #2
 801ec0c:	300c      	adds	r0, #12
 801ec0e:	f7fc fa89 	bl	801b124 <memcpy>
 801ec12:	4621      	mov	r1, r4
 801ec14:	4638      	mov	r0, r7
 801ec16:	f7ff ffa5 	bl	801eb64 <_Bfree>
 801ec1a:	4644      	mov	r4, r8
 801ec1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ec20:	3501      	adds	r5, #1
 801ec22:	615e      	str	r6, [r3, #20]
 801ec24:	6125      	str	r5, [r4, #16]
 801ec26:	4620      	mov	r0, r4
 801ec28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec2c:	08021dc1 	.word	0x08021dc1
 801ec30:	08021eb0 	.word	0x08021eb0

0801ec34 <__s2b>:
 801ec34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec38:	460c      	mov	r4, r1
 801ec3a:	4615      	mov	r5, r2
 801ec3c:	461f      	mov	r7, r3
 801ec3e:	2209      	movs	r2, #9
 801ec40:	3308      	adds	r3, #8
 801ec42:	4606      	mov	r6, r0
 801ec44:	fb93 f3f2 	sdiv	r3, r3, r2
 801ec48:	2100      	movs	r1, #0
 801ec4a:	2201      	movs	r2, #1
 801ec4c:	429a      	cmp	r2, r3
 801ec4e:	db09      	blt.n	801ec64 <__s2b+0x30>
 801ec50:	4630      	mov	r0, r6
 801ec52:	f7ff ff47 	bl	801eae4 <_Balloc>
 801ec56:	b940      	cbnz	r0, 801ec6a <__s2b+0x36>
 801ec58:	4602      	mov	r2, r0
 801ec5a:	4b19      	ldr	r3, [pc, #100]	; (801ecc0 <__s2b+0x8c>)
 801ec5c:	4819      	ldr	r0, [pc, #100]	; (801ecc4 <__s2b+0x90>)
 801ec5e:	21ce      	movs	r1, #206	; 0xce
 801ec60:	f7fe fae6 	bl	801d230 <__assert_func>
 801ec64:	0052      	lsls	r2, r2, #1
 801ec66:	3101      	adds	r1, #1
 801ec68:	e7f0      	b.n	801ec4c <__s2b+0x18>
 801ec6a:	9b08      	ldr	r3, [sp, #32]
 801ec6c:	6143      	str	r3, [r0, #20]
 801ec6e:	2d09      	cmp	r5, #9
 801ec70:	f04f 0301 	mov.w	r3, #1
 801ec74:	6103      	str	r3, [r0, #16]
 801ec76:	dd16      	ble.n	801eca6 <__s2b+0x72>
 801ec78:	f104 0909 	add.w	r9, r4, #9
 801ec7c:	46c8      	mov	r8, r9
 801ec7e:	442c      	add	r4, r5
 801ec80:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ec84:	4601      	mov	r1, r0
 801ec86:	3b30      	subs	r3, #48	; 0x30
 801ec88:	220a      	movs	r2, #10
 801ec8a:	4630      	mov	r0, r6
 801ec8c:	f7ff ff8c 	bl	801eba8 <__multadd>
 801ec90:	45a0      	cmp	r8, r4
 801ec92:	d1f5      	bne.n	801ec80 <__s2b+0x4c>
 801ec94:	f1a5 0408 	sub.w	r4, r5, #8
 801ec98:	444c      	add	r4, r9
 801ec9a:	1b2d      	subs	r5, r5, r4
 801ec9c:	1963      	adds	r3, r4, r5
 801ec9e:	42bb      	cmp	r3, r7
 801eca0:	db04      	blt.n	801ecac <__s2b+0x78>
 801eca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eca6:	340a      	adds	r4, #10
 801eca8:	2509      	movs	r5, #9
 801ecaa:	e7f6      	b.n	801ec9a <__s2b+0x66>
 801ecac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ecb0:	4601      	mov	r1, r0
 801ecb2:	3b30      	subs	r3, #48	; 0x30
 801ecb4:	220a      	movs	r2, #10
 801ecb6:	4630      	mov	r0, r6
 801ecb8:	f7ff ff76 	bl	801eba8 <__multadd>
 801ecbc:	e7ee      	b.n	801ec9c <__s2b+0x68>
 801ecbe:	bf00      	nop
 801ecc0:	08021dc1 	.word	0x08021dc1
 801ecc4:	08021eb0 	.word	0x08021eb0

0801ecc8 <__hi0bits>:
 801ecc8:	0c03      	lsrs	r3, r0, #16
 801ecca:	041b      	lsls	r3, r3, #16
 801eccc:	b9d3      	cbnz	r3, 801ed04 <__hi0bits+0x3c>
 801ecce:	0400      	lsls	r0, r0, #16
 801ecd0:	2310      	movs	r3, #16
 801ecd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ecd6:	bf04      	itt	eq
 801ecd8:	0200      	lsleq	r0, r0, #8
 801ecda:	3308      	addeq	r3, #8
 801ecdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ece0:	bf04      	itt	eq
 801ece2:	0100      	lsleq	r0, r0, #4
 801ece4:	3304      	addeq	r3, #4
 801ece6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ecea:	bf04      	itt	eq
 801ecec:	0080      	lsleq	r0, r0, #2
 801ecee:	3302      	addeq	r3, #2
 801ecf0:	2800      	cmp	r0, #0
 801ecf2:	db05      	blt.n	801ed00 <__hi0bits+0x38>
 801ecf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ecf8:	f103 0301 	add.w	r3, r3, #1
 801ecfc:	bf08      	it	eq
 801ecfe:	2320      	moveq	r3, #32
 801ed00:	4618      	mov	r0, r3
 801ed02:	4770      	bx	lr
 801ed04:	2300      	movs	r3, #0
 801ed06:	e7e4      	b.n	801ecd2 <__hi0bits+0xa>

0801ed08 <__lo0bits>:
 801ed08:	6803      	ldr	r3, [r0, #0]
 801ed0a:	f013 0207 	ands.w	r2, r3, #7
 801ed0e:	4601      	mov	r1, r0
 801ed10:	d00b      	beq.n	801ed2a <__lo0bits+0x22>
 801ed12:	07da      	lsls	r2, r3, #31
 801ed14:	d423      	bmi.n	801ed5e <__lo0bits+0x56>
 801ed16:	0798      	lsls	r0, r3, #30
 801ed18:	bf49      	itett	mi
 801ed1a:	085b      	lsrmi	r3, r3, #1
 801ed1c:	089b      	lsrpl	r3, r3, #2
 801ed1e:	2001      	movmi	r0, #1
 801ed20:	600b      	strmi	r3, [r1, #0]
 801ed22:	bf5c      	itt	pl
 801ed24:	600b      	strpl	r3, [r1, #0]
 801ed26:	2002      	movpl	r0, #2
 801ed28:	4770      	bx	lr
 801ed2a:	b298      	uxth	r0, r3
 801ed2c:	b9a8      	cbnz	r0, 801ed5a <__lo0bits+0x52>
 801ed2e:	0c1b      	lsrs	r3, r3, #16
 801ed30:	2010      	movs	r0, #16
 801ed32:	b2da      	uxtb	r2, r3
 801ed34:	b90a      	cbnz	r2, 801ed3a <__lo0bits+0x32>
 801ed36:	3008      	adds	r0, #8
 801ed38:	0a1b      	lsrs	r3, r3, #8
 801ed3a:	071a      	lsls	r2, r3, #28
 801ed3c:	bf04      	itt	eq
 801ed3e:	091b      	lsreq	r3, r3, #4
 801ed40:	3004      	addeq	r0, #4
 801ed42:	079a      	lsls	r2, r3, #30
 801ed44:	bf04      	itt	eq
 801ed46:	089b      	lsreq	r3, r3, #2
 801ed48:	3002      	addeq	r0, #2
 801ed4a:	07da      	lsls	r2, r3, #31
 801ed4c:	d403      	bmi.n	801ed56 <__lo0bits+0x4e>
 801ed4e:	085b      	lsrs	r3, r3, #1
 801ed50:	f100 0001 	add.w	r0, r0, #1
 801ed54:	d005      	beq.n	801ed62 <__lo0bits+0x5a>
 801ed56:	600b      	str	r3, [r1, #0]
 801ed58:	4770      	bx	lr
 801ed5a:	4610      	mov	r0, r2
 801ed5c:	e7e9      	b.n	801ed32 <__lo0bits+0x2a>
 801ed5e:	2000      	movs	r0, #0
 801ed60:	4770      	bx	lr
 801ed62:	2020      	movs	r0, #32
 801ed64:	4770      	bx	lr
	...

0801ed68 <__i2b>:
 801ed68:	b510      	push	{r4, lr}
 801ed6a:	460c      	mov	r4, r1
 801ed6c:	2101      	movs	r1, #1
 801ed6e:	f7ff feb9 	bl	801eae4 <_Balloc>
 801ed72:	4602      	mov	r2, r0
 801ed74:	b928      	cbnz	r0, 801ed82 <__i2b+0x1a>
 801ed76:	4b05      	ldr	r3, [pc, #20]	; (801ed8c <__i2b+0x24>)
 801ed78:	4805      	ldr	r0, [pc, #20]	; (801ed90 <__i2b+0x28>)
 801ed7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ed7e:	f7fe fa57 	bl	801d230 <__assert_func>
 801ed82:	2301      	movs	r3, #1
 801ed84:	6144      	str	r4, [r0, #20]
 801ed86:	6103      	str	r3, [r0, #16]
 801ed88:	bd10      	pop	{r4, pc}
 801ed8a:	bf00      	nop
 801ed8c:	08021dc1 	.word	0x08021dc1
 801ed90:	08021eb0 	.word	0x08021eb0

0801ed94 <__multiply>:
 801ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed98:	4691      	mov	r9, r2
 801ed9a:	690a      	ldr	r2, [r1, #16]
 801ed9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801eda0:	429a      	cmp	r2, r3
 801eda2:	bfb8      	it	lt
 801eda4:	460b      	movlt	r3, r1
 801eda6:	460c      	mov	r4, r1
 801eda8:	bfbc      	itt	lt
 801edaa:	464c      	movlt	r4, r9
 801edac:	4699      	movlt	r9, r3
 801edae:	6927      	ldr	r7, [r4, #16]
 801edb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801edb4:	68a3      	ldr	r3, [r4, #8]
 801edb6:	6861      	ldr	r1, [r4, #4]
 801edb8:	eb07 060a 	add.w	r6, r7, sl
 801edbc:	42b3      	cmp	r3, r6
 801edbe:	b085      	sub	sp, #20
 801edc0:	bfb8      	it	lt
 801edc2:	3101      	addlt	r1, #1
 801edc4:	f7ff fe8e 	bl	801eae4 <_Balloc>
 801edc8:	b930      	cbnz	r0, 801edd8 <__multiply+0x44>
 801edca:	4602      	mov	r2, r0
 801edcc:	4b44      	ldr	r3, [pc, #272]	; (801eee0 <__multiply+0x14c>)
 801edce:	4845      	ldr	r0, [pc, #276]	; (801eee4 <__multiply+0x150>)
 801edd0:	f240 115d 	movw	r1, #349	; 0x15d
 801edd4:	f7fe fa2c 	bl	801d230 <__assert_func>
 801edd8:	f100 0514 	add.w	r5, r0, #20
 801eddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ede0:	462b      	mov	r3, r5
 801ede2:	2200      	movs	r2, #0
 801ede4:	4543      	cmp	r3, r8
 801ede6:	d321      	bcc.n	801ee2c <__multiply+0x98>
 801ede8:	f104 0314 	add.w	r3, r4, #20
 801edec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801edf0:	f109 0314 	add.w	r3, r9, #20
 801edf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801edf8:	9202      	str	r2, [sp, #8]
 801edfa:	1b3a      	subs	r2, r7, r4
 801edfc:	3a15      	subs	r2, #21
 801edfe:	f022 0203 	bic.w	r2, r2, #3
 801ee02:	3204      	adds	r2, #4
 801ee04:	f104 0115 	add.w	r1, r4, #21
 801ee08:	428f      	cmp	r7, r1
 801ee0a:	bf38      	it	cc
 801ee0c:	2204      	movcc	r2, #4
 801ee0e:	9201      	str	r2, [sp, #4]
 801ee10:	9a02      	ldr	r2, [sp, #8]
 801ee12:	9303      	str	r3, [sp, #12]
 801ee14:	429a      	cmp	r2, r3
 801ee16:	d80c      	bhi.n	801ee32 <__multiply+0x9e>
 801ee18:	2e00      	cmp	r6, #0
 801ee1a:	dd03      	ble.n	801ee24 <__multiply+0x90>
 801ee1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d05a      	beq.n	801eeda <__multiply+0x146>
 801ee24:	6106      	str	r6, [r0, #16]
 801ee26:	b005      	add	sp, #20
 801ee28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee2c:	f843 2b04 	str.w	r2, [r3], #4
 801ee30:	e7d8      	b.n	801ede4 <__multiply+0x50>
 801ee32:	f8b3 a000 	ldrh.w	sl, [r3]
 801ee36:	f1ba 0f00 	cmp.w	sl, #0
 801ee3a:	d024      	beq.n	801ee86 <__multiply+0xf2>
 801ee3c:	f104 0e14 	add.w	lr, r4, #20
 801ee40:	46a9      	mov	r9, r5
 801ee42:	f04f 0c00 	mov.w	ip, #0
 801ee46:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ee4a:	f8d9 1000 	ldr.w	r1, [r9]
 801ee4e:	fa1f fb82 	uxth.w	fp, r2
 801ee52:	b289      	uxth	r1, r1
 801ee54:	fb0a 110b 	mla	r1, sl, fp, r1
 801ee58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ee5c:	f8d9 2000 	ldr.w	r2, [r9]
 801ee60:	4461      	add	r1, ip
 801ee62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ee66:	fb0a c20b 	mla	r2, sl, fp, ip
 801ee6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ee6e:	b289      	uxth	r1, r1
 801ee70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ee74:	4577      	cmp	r7, lr
 801ee76:	f849 1b04 	str.w	r1, [r9], #4
 801ee7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ee7e:	d8e2      	bhi.n	801ee46 <__multiply+0xb2>
 801ee80:	9a01      	ldr	r2, [sp, #4]
 801ee82:	f845 c002 	str.w	ip, [r5, r2]
 801ee86:	9a03      	ldr	r2, [sp, #12]
 801ee88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ee8c:	3304      	adds	r3, #4
 801ee8e:	f1b9 0f00 	cmp.w	r9, #0
 801ee92:	d020      	beq.n	801eed6 <__multiply+0x142>
 801ee94:	6829      	ldr	r1, [r5, #0]
 801ee96:	f104 0c14 	add.w	ip, r4, #20
 801ee9a:	46ae      	mov	lr, r5
 801ee9c:	f04f 0a00 	mov.w	sl, #0
 801eea0:	f8bc b000 	ldrh.w	fp, [ip]
 801eea4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801eea8:	fb09 220b 	mla	r2, r9, fp, r2
 801eeac:	4492      	add	sl, r2
 801eeae:	b289      	uxth	r1, r1
 801eeb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801eeb4:	f84e 1b04 	str.w	r1, [lr], #4
 801eeb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801eebc:	f8be 1000 	ldrh.w	r1, [lr]
 801eec0:	0c12      	lsrs	r2, r2, #16
 801eec2:	fb09 1102 	mla	r1, r9, r2, r1
 801eec6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801eeca:	4567      	cmp	r7, ip
 801eecc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801eed0:	d8e6      	bhi.n	801eea0 <__multiply+0x10c>
 801eed2:	9a01      	ldr	r2, [sp, #4]
 801eed4:	50a9      	str	r1, [r5, r2]
 801eed6:	3504      	adds	r5, #4
 801eed8:	e79a      	b.n	801ee10 <__multiply+0x7c>
 801eeda:	3e01      	subs	r6, #1
 801eedc:	e79c      	b.n	801ee18 <__multiply+0x84>
 801eede:	bf00      	nop
 801eee0:	08021dc1 	.word	0x08021dc1
 801eee4:	08021eb0 	.word	0x08021eb0

0801eee8 <__pow5mult>:
 801eee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eeec:	4615      	mov	r5, r2
 801eeee:	f012 0203 	ands.w	r2, r2, #3
 801eef2:	4606      	mov	r6, r0
 801eef4:	460f      	mov	r7, r1
 801eef6:	d007      	beq.n	801ef08 <__pow5mult+0x20>
 801eef8:	4c25      	ldr	r4, [pc, #148]	; (801ef90 <__pow5mult+0xa8>)
 801eefa:	3a01      	subs	r2, #1
 801eefc:	2300      	movs	r3, #0
 801eefe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ef02:	f7ff fe51 	bl	801eba8 <__multadd>
 801ef06:	4607      	mov	r7, r0
 801ef08:	10ad      	asrs	r5, r5, #2
 801ef0a:	d03d      	beq.n	801ef88 <__pow5mult+0xa0>
 801ef0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ef0e:	b97c      	cbnz	r4, 801ef30 <__pow5mult+0x48>
 801ef10:	2010      	movs	r0, #16
 801ef12:	f7fc f8ff 	bl	801b114 <malloc>
 801ef16:	4602      	mov	r2, r0
 801ef18:	6270      	str	r0, [r6, #36]	; 0x24
 801ef1a:	b928      	cbnz	r0, 801ef28 <__pow5mult+0x40>
 801ef1c:	4b1d      	ldr	r3, [pc, #116]	; (801ef94 <__pow5mult+0xac>)
 801ef1e:	481e      	ldr	r0, [pc, #120]	; (801ef98 <__pow5mult+0xb0>)
 801ef20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ef24:	f7fe f984 	bl	801d230 <__assert_func>
 801ef28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ef2c:	6004      	str	r4, [r0, #0]
 801ef2e:	60c4      	str	r4, [r0, #12]
 801ef30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ef34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ef38:	b94c      	cbnz	r4, 801ef4e <__pow5mult+0x66>
 801ef3a:	f240 2171 	movw	r1, #625	; 0x271
 801ef3e:	4630      	mov	r0, r6
 801ef40:	f7ff ff12 	bl	801ed68 <__i2b>
 801ef44:	2300      	movs	r3, #0
 801ef46:	f8c8 0008 	str.w	r0, [r8, #8]
 801ef4a:	4604      	mov	r4, r0
 801ef4c:	6003      	str	r3, [r0, #0]
 801ef4e:	f04f 0900 	mov.w	r9, #0
 801ef52:	07eb      	lsls	r3, r5, #31
 801ef54:	d50a      	bpl.n	801ef6c <__pow5mult+0x84>
 801ef56:	4639      	mov	r1, r7
 801ef58:	4622      	mov	r2, r4
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	f7ff ff1a 	bl	801ed94 <__multiply>
 801ef60:	4639      	mov	r1, r7
 801ef62:	4680      	mov	r8, r0
 801ef64:	4630      	mov	r0, r6
 801ef66:	f7ff fdfd 	bl	801eb64 <_Bfree>
 801ef6a:	4647      	mov	r7, r8
 801ef6c:	106d      	asrs	r5, r5, #1
 801ef6e:	d00b      	beq.n	801ef88 <__pow5mult+0xa0>
 801ef70:	6820      	ldr	r0, [r4, #0]
 801ef72:	b938      	cbnz	r0, 801ef84 <__pow5mult+0x9c>
 801ef74:	4622      	mov	r2, r4
 801ef76:	4621      	mov	r1, r4
 801ef78:	4630      	mov	r0, r6
 801ef7a:	f7ff ff0b 	bl	801ed94 <__multiply>
 801ef7e:	6020      	str	r0, [r4, #0]
 801ef80:	f8c0 9000 	str.w	r9, [r0]
 801ef84:	4604      	mov	r4, r0
 801ef86:	e7e4      	b.n	801ef52 <__pow5mult+0x6a>
 801ef88:	4638      	mov	r0, r7
 801ef8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef8e:	bf00      	nop
 801ef90:	08022000 	.word	0x08022000
 801ef94:	08021ba8 	.word	0x08021ba8
 801ef98:	08021eb0 	.word	0x08021eb0

0801ef9c <__lshift>:
 801ef9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801efa0:	460c      	mov	r4, r1
 801efa2:	6849      	ldr	r1, [r1, #4]
 801efa4:	6923      	ldr	r3, [r4, #16]
 801efa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801efaa:	68a3      	ldr	r3, [r4, #8]
 801efac:	4607      	mov	r7, r0
 801efae:	4691      	mov	r9, r2
 801efb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801efb4:	f108 0601 	add.w	r6, r8, #1
 801efb8:	42b3      	cmp	r3, r6
 801efba:	db0b      	blt.n	801efd4 <__lshift+0x38>
 801efbc:	4638      	mov	r0, r7
 801efbe:	f7ff fd91 	bl	801eae4 <_Balloc>
 801efc2:	4605      	mov	r5, r0
 801efc4:	b948      	cbnz	r0, 801efda <__lshift+0x3e>
 801efc6:	4602      	mov	r2, r0
 801efc8:	4b2a      	ldr	r3, [pc, #168]	; (801f074 <__lshift+0xd8>)
 801efca:	482b      	ldr	r0, [pc, #172]	; (801f078 <__lshift+0xdc>)
 801efcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801efd0:	f7fe f92e 	bl	801d230 <__assert_func>
 801efd4:	3101      	adds	r1, #1
 801efd6:	005b      	lsls	r3, r3, #1
 801efd8:	e7ee      	b.n	801efb8 <__lshift+0x1c>
 801efda:	2300      	movs	r3, #0
 801efdc:	f100 0114 	add.w	r1, r0, #20
 801efe0:	f100 0210 	add.w	r2, r0, #16
 801efe4:	4618      	mov	r0, r3
 801efe6:	4553      	cmp	r3, sl
 801efe8:	db37      	blt.n	801f05a <__lshift+0xbe>
 801efea:	6920      	ldr	r0, [r4, #16]
 801efec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eff0:	f104 0314 	add.w	r3, r4, #20
 801eff4:	f019 091f 	ands.w	r9, r9, #31
 801eff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801effc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f000:	d02f      	beq.n	801f062 <__lshift+0xc6>
 801f002:	f1c9 0e20 	rsb	lr, r9, #32
 801f006:	468a      	mov	sl, r1
 801f008:	f04f 0c00 	mov.w	ip, #0
 801f00c:	681a      	ldr	r2, [r3, #0]
 801f00e:	fa02 f209 	lsl.w	r2, r2, r9
 801f012:	ea42 020c 	orr.w	r2, r2, ip
 801f016:	f84a 2b04 	str.w	r2, [sl], #4
 801f01a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f01e:	4298      	cmp	r0, r3
 801f020:	fa22 fc0e 	lsr.w	ip, r2, lr
 801f024:	d8f2      	bhi.n	801f00c <__lshift+0x70>
 801f026:	1b03      	subs	r3, r0, r4
 801f028:	3b15      	subs	r3, #21
 801f02a:	f023 0303 	bic.w	r3, r3, #3
 801f02e:	3304      	adds	r3, #4
 801f030:	f104 0215 	add.w	r2, r4, #21
 801f034:	4290      	cmp	r0, r2
 801f036:	bf38      	it	cc
 801f038:	2304      	movcc	r3, #4
 801f03a:	f841 c003 	str.w	ip, [r1, r3]
 801f03e:	f1bc 0f00 	cmp.w	ip, #0
 801f042:	d001      	beq.n	801f048 <__lshift+0xac>
 801f044:	f108 0602 	add.w	r6, r8, #2
 801f048:	3e01      	subs	r6, #1
 801f04a:	4638      	mov	r0, r7
 801f04c:	612e      	str	r6, [r5, #16]
 801f04e:	4621      	mov	r1, r4
 801f050:	f7ff fd88 	bl	801eb64 <_Bfree>
 801f054:	4628      	mov	r0, r5
 801f056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f05a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f05e:	3301      	adds	r3, #1
 801f060:	e7c1      	b.n	801efe6 <__lshift+0x4a>
 801f062:	3904      	subs	r1, #4
 801f064:	f853 2b04 	ldr.w	r2, [r3], #4
 801f068:	f841 2f04 	str.w	r2, [r1, #4]!
 801f06c:	4298      	cmp	r0, r3
 801f06e:	d8f9      	bhi.n	801f064 <__lshift+0xc8>
 801f070:	e7ea      	b.n	801f048 <__lshift+0xac>
 801f072:	bf00      	nop
 801f074:	08021dc1 	.word	0x08021dc1
 801f078:	08021eb0 	.word	0x08021eb0

0801f07c <__mcmp>:
 801f07c:	b530      	push	{r4, r5, lr}
 801f07e:	6902      	ldr	r2, [r0, #16]
 801f080:	690c      	ldr	r4, [r1, #16]
 801f082:	1b12      	subs	r2, r2, r4
 801f084:	d10e      	bne.n	801f0a4 <__mcmp+0x28>
 801f086:	f100 0314 	add.w	r3, r0, #20
 801f08a:	3114      	adds	r1, #20
 801f08c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f090:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f094:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f098:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f09c:	42a5      	cmp	r5, r4
 801f09e:	d003      	beq.n	801f0a8 <__mcmp+0x2c>
 801f0a0:	d305      	bcc.n	801f0ae <__mcmp+0x32>
 801f0a2:	2201      	movs	r2, #1
 801f0a4:	4610      	mov	r0, r2
 801f0a6:	bd30      	pop	{r4, r5, pc}
 801f0a8:	4283      	cmp	r3, r0
 801f0aa:	d3f3      	bcc.n	801f094 <__mcmp+0x18>
 801f0ac:	e7fa      	b.n	801f0a4 <__mcmp+0x28>
 801f0ae:	f04f 32ff 	mov.w	r2, #4294967295
 801f0b2:	e7f7      	b.n	801f0a4 <__mcmp+0x28>

0801f0b4 <__mdiff>:
 801f0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0b8:	460c      	mov	r4, r1
 801f0ba:	4606      	mov	r6, r0
 801f0bc:	4611      	mov	r1, r2
 801f0be:	4620      	mov	r0, r4
 801f0c0:	4690      	mov	r8, r2
 801f0c2:	f7ff ffdb 	bl	801f07c <__mcmp>
 801f0c6:	1e05      	subs	r5, r0, #0
 801f0c8:	d110      	bne.n	801f0ec <__mdiff+0x38>
 801f0ca:	4629      	mov	r1, r5
 801f0cc:	4630      	mov	r0, r6
 801f0ce:	f7ff fd09 	bl	801eae4 <_Balloc>
 801f0d2:	b930      	cbnz	r0, 801f0e2 <__mdiff+0x2e>
 801f0d4:	4b3a      	ldr	r3, [pc, #232]	; (801f1c0 <__mdiff+0x10c>)
 801f0d6:	4602      	mov	r2, r0
 801f0d8:	f240 2132 	movw	r1, #562	; 0x232
 801f0dc:	4839      	ldr	r0, [pc, #228]	; (801f1c4 <__mdiff+0x110>)
 801f0de:	f7fe f8a7 	bl	801d230 <__assert_func>
 801f0e2:	2301      	movs	r3, #1
 801f0e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ec:	bfa4      	itt	ge
 801f0ee:	4643      	movge	r3, r8
 801f0f0:	46a0      	movge	r8, r4
 801f0f2:	4630      	mov	r0, r6
 801f0f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f0f8:	bfa6      	itte	ge
 801f0fa:	461c      	movge	r4, r3
 801f0fc:	2500      	movge	r5, #0
 801f0fe:	2501      	movlt	r5, #1
 801f100:	f7ff fcf0 	bl	801eae4 <_Balloc>
 801f104:	b920      	cbnz	r0, 801f110 <__mdiff+0x5c>
 801f106:	4b2e      	ldr	r3, [pc, #184]	; (801f1c0 <__mdiff+0x10c>)
 801f108:	4602      	mov	r2, r0
 801f10a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f10e:	e7e5      	b.n	801f0dc <__mdiff+0x28>
 801f110:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f114:	6926      	ldr	r6, [r4, #16]
 801f116:	60c5      	str	r5, [r0, #12]
 801f118:	f104 0914 	add.w	r9, r4, #20
 801f11c:	f108 0514 	add.w	r5, r8, #20
 801f120:	f100 0e14 	add.w	lr, r0, #20
 801f124:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f128:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f12c:	f108 0210 	add.w	r2, r8, #16
 801f130:	46f2      	mov	sl, lr
 801f132:	2100      	movs	r1, #0
 801f134:	f859 3b04 	ldr.w	r3, [r9], #4
 801f138:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f13c:	fa1f f883 	uxth.w	r8, r3
 801f140:	fa11 f18b 	uxtah	r1, r1, fp
 801f144:	0c1b      	lsrs	r3, r3, #16
 801f146:	eba1 0808 	sub.w	r8, r1, r8
 801f14a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f14e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f152:	fa1f f888 	uxth.w	r8, r8
 801f156:	1419      	asrs	r1, r3, #16
 801f158:	454e      	cmp	r6, r9
 801f15a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f15e:	f84a 3b04 	str.w	r3, [sl], #4
 801f162:	d8e7      	bhi.n	801f134 <__mdiff+0x80>
 801f164:	1b33      	subs	r3, r6, r4
 801f166:	3b15      	subs	r3, #21
 801f168:	f023 0303 	bic.w	r3, r3, #3
 801f16c:	3304      	adds	r3, #4
 801f16e:	3415      	adds	r4, #21
 801f170:	42a6      	cmp	r6, r4
 801f172:	bf38      	it	cc
 801f174:	2304      	movcc	r3, #4
 801f176:	441d      	add	r5, r3
 801f178:	4473      	add	r3, lr
 801f17a:	469e      	mov	lr, r3
 801f17c:	462e      	mov	r6, r5
 801f17e:	4566      	cmp	r6, ip
 801f180:	d30e      	bcc.n	801f1a0 <__mdiff+0xec>
 801f182:	f10c 0203 	add.w	r2, ip, #3
 801f186:	1b52      	subs	r2, r2, r5
 801f188:	f022 0203 	bic.w	r2, r2, #3
 801f18c:	3d03      	subs	r5, #3
 801f18e:	45ac      	cmp	ip, r5
 801f190:	bf38      	it	cc
 801f192:	2200      	movcc	r2, #0
 801f194:	441a      	add	r2, r3
 801f196:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f19a:	b17b      	cbz	r3, 801f1bc <__mdiff+0x108>
 801f19c:	6107      	str	r7, [r0, #16]
 801f19e:	e7a3      	b.n	801f0e8 <__mdiff+0x34>
 801f1a0:	f856 8b04 	ldr.w	r8, [r6], #4
 801f1a4:	fa11 f288 	uxtah	r2, r1, r8
 801f1a8:	1414      	asrs	r4, r2, #16
 801f1aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f1ae:	b292      	uxth	r2, r2
 801f1b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f1b4:	f84e 2b04 	str.w	r2, [lr], #4
 801f1b8:	1421      	asrs	r1, r4, #16
 801f1ba:	e7e0      	b.n	801f17e <__mdiff+0xca>
 801f1bc:	3f01      	subs	r7, #1
 801f1be:	e7ea      	b.n	801f196 <__mdiff+0xe2>
 801f1c0:	08021dc1 	.word	0x08021dc1
 801f1c4:	08021eb0 	.word	0x08021eb0

0801f1c8 <__ulp>:
 801f1c8:	b082      	sub	sp, #8
 801f1ca:	ed8d 0b00 	vstr	d0, [sp]
 801f1ce:	9b01      	ldr	r3, [sp, #4]
 801f1d0:	4912      	ldr	r1, [pc, #72]	; (801f21c <__ulp+0x54>)
 801f1d2:	4019      	ands	r1, r3
 801f1d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f1d8:	2900      	cmp	r1, #0
 801f1da:	dd05      	ble.n	801f1e8 <__ulp+0x20>
 801f1dc:	2200      	movs	r2, #0
 801f1de:	460b      	mov	r3, r1
 801f1e0:	ec43 2b10 	vmov	d0, r2, r3
 801f1e4:	b002      	add	sp, #8
 801f1e6:	4770      	bx	lr
 801f1e8:	4249      	negs	r1, r1
 801f1ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f1ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f1f2:	f04f 0200 	mov.w	r2, #0
 801f1f6:	f04f 0300 	mov.w	r3, #0
 801f1fa:	da04      	bge.n	801f206 <__ulp+0x3e>
 801f1fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f200:	fa41 f300 	asr.w	r3, r1, r0
 801f204:	e7ec      	b.n	801f1e0 <__ulp+0x18>
 801f206:	f1a0 0114 	sub.w	r1, r0, #20
 801f20a:	291e      	cmp	r1, #30
 801f20c:	bfda      	itte	le
 801f20e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f212:	fa20 f101 	lsrle.w	r1, r0, r1
 801f216:	2101      	movgt	r1, #1
 801f218:	460a      	mov	r2, r1
 801f21a:	e7e1      	b.n	801f1e0 <__ulp+0x18>
 801f21c:	7ff00000 	.word	0x7ff00000

0801f220 <__b2d>:
 801f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f222:	6905      	ldr	r5, [r0, #16]
 801f224:	f100 0714 	add.w	r7, r0, #20
 801f228:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f22c:	1f2e      	subs	r6, r5, #4
 801f22e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f232:	4620      	mov	r0, r4
 801f234:	f7ff fd48 	bl	801ecc8 <__hi0bits>
 801f238:	f1c0 0320 	rsb	r3, r0, #32
 801f23c:	280a      	cmp	r0, #10
 801f23e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f2bc <__b2d+0x9c>
 801f242:	600b      	str	r3, [r1, #0]
 801f244:	dc14      	bgt.n	801f270 <__b2d+0x50>
 801f246:	f1c0 0e0b 	rsb	lr, r0, #11
 801f24a:	fa24 f10e 	lsr.w	r1, r4, lr
 801f24e:	42b7      	cmp	r7, r6
 801f250:	ea41 030c 	orr.w	r3, r1, ip
 801f254:	bf34      	ite	cc
 801f256:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f25a:	2100      	movcs	r1, #0
 801f25c:	3015      	adds	r0, #21
 801f25e:	fa04 f000 	lsl.w	r0, r4, r0
 801f262:	fa21 f10e 	lsr.w	r1, r1, lr
 801f266:	ea40 0201 	orr.w	r2, r0, r1
 801f26a:	ec43 2b10 	vmov	d0, r2, r3
 801f26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f270:	42b7      	cmp	r7, r6
 801f272:	bf3a      	itte	cc
 801f274:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f278:	f1a5 0608 	subcc.w	r6, r5, #8
 801f27c:	2100      	movcs	r1, #0
 801f27e:	380b      	subs	r0, #11
 801f280:	d017      	beq.n	801f2b2 <__b2d+0x92>
 801f282:	f1c0 0c20 	rsb	ip, r0, #32
 801f286:	fa04 f500 	lsl.w	r5, r4, r0
 801f28a:	42be      	cmp	r6, r7
 801f28c:	fa21 f40c 	lsr.w	r4, r1, ip
 801f290:	ea45 0504 	orr.w	r5, r5, r4
 801f294:	bf8c      	ite	hi
 801f296:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f29a:	2400      	movls	r4, #0
 801f29c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f2a0:	fa01 f000 	lsl.w	r0, r1, r0
 801f2a4:	fa24 f40c 	lsr.w	r4, r4, ip
 801f2a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f2ac:	ea40 0204 	orr.w	r2, r0, r4
 801f2b0:	e7db      	b.n	801f26a <__b2d+0x4a>
 801f2b2:	ea44 030c 	orr.w	r3, r4, ip
 801f2b6:	460a      	mov	r2, r1
 801f2b8:	e7d7      	b.n	801f26a <__b2d+0x4a>
 801f2ba:	bf00      	nop
 801f2bc:	3ff00000 	.word	0x3ff00000

0801f2c0 <__d2b>:
 801f2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f2c4:	4689      	mov	r9, r1
 801f2c6:	2101      	movs	r1, #1
 801f2c8:	ec57 6b10 	vmov	r6, r7, d0
 801f2cc:	4690      	mov	r8, r2
 801f2ce:	f7ff fc09 	bl	801eae4 <_Balloc>
 801f2d2:	4604      	mov	r4, r0
 801f2d4:	b930      	cbnz	r0, 801f2e4 <__d2b+0x24>
 801f2d6:	4602      	mov	r2, r0
 801f2d8:	4b25      	ldr	r3, [pc, #148]	; (801f370 <__d2b+0xb0>)
 801f2da:	4826      	ldr	r0, [pc, #152]	; (801f374 <__d2b+0xb4>)
 801f2dc:	f240 310a 	movw	r1, #778	; 0x30a
 801f2e0:	f7fd ffa6 	bl	801d230 <__assert_func>
 801f2e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f2e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f2ec:	bb35      	cbnz	r5, 801f33c <__d2b+0x7c>
 801f2ee:	2e00      	cmp	r6, #0
 801f2f0:	9301      	str	r3, [sp, #4]
 801f2f2:	d028      	beq.n	801f346 <__d2b+0x86>
 801f2f4:	4668      	mov	r0, sp
 801f2f6:	9600      	str	r6, [sp, #0]
 801f2f8:	f7ff fd06 	bl	801ed08 <__lo0bits>
 801f2fc:	9900      	ldr	r1, [sp, #0]
 801f2fe:	b300      	cbz	r0, 801f342 <__d2b+0x82>
 801f300:	9a01      	ldr	r2, [sp, #4]
 801f302:	f1c0 0320 	rsb	r3, r0, #32
 801f306:	fa02 f303 	lsl.w	r3, r2, r3
 801f30a:	430b      	orrs	r3, r1
 801f30c:	40c2      	lsrs	r2, r0
 801f30e:	6163      	str	r3, [r4, #20]
 801f310:	9201      	str	r2, [sp, #4]
 801f312:	9b01      	ldr	r3, [sp, #4]
 801f314:	61a3      	str	r3, [r4, #24]
 801f316:	2b00      	cmp	r3, #0
 801f318:	bf14      	ite	ne
 801f31a:	2202      	movne	r2, #2
 801f31c:	2201      	moveq	r2, #1
 801f31e:	6122      	str	r2, [r4, #16]
 801f320:	b1d5      	cbz	r5, 801f358 <__d2b+0x98>
 801f322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f326:	4405      	add	r5, r0
 801f328:	f8c9 5000 	str.w	r5, [r9]
 801f32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f330:	f8c8 0000 	str.w	r0, [r8]
 801f334:	4620      	mov	r0, r4
 801f336:	b003      	add	sp, #12
 801f338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f340:	e7d5      	b.n	801f2ee <__d2b+0x2e>
 801f342:	6161      	str	r1, [r4, #20]
 801f344:	e7e5      	b.n	801f312 <__d2b+0x52>
 801f346:	a801      	add	r0, sp, #4
 801f348:	f7ff fcde 	bl	801ed08 <__lo0bits>
 801f34c:	9b01      	ldr	r3, [sp, #4]
 801f34e:	6163      	str	r3, [r4, #20]
 801f350:	2201      	movs	r2, #1
 801f352:	6122      	str	r2, [r4, #16]
 801f354:	3020      	adds	r0, #32
 801f356:	e7e3      	b.n	801f320 <__d2b+0x60>
 801f358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f35c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f360:	f8c9 0000 	str.w	r0, [r9]
 801f364:	6918      	ldr	r0, [r3, #16]
 801f366:	f7ff fcaf 	bl	801ecc8 <__hi0bits>
 801f36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f36e:	e7df      	b.n	801f330 <__d2b+0x70>
 801f370:	08021dc1 	.word	0x08021dc1
 801f374:	08021eb0 	.word	0x08021eb0

0801f378 <__ratio>:
 801f378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f37c:	4688      	mov	r8, r1
 801f37e:	4669      	mov	r1, sp
 801f380:	4681      	mov	r9, r0
 801f382:	f7ff ff4d 	bl	801f220 <__b2d>
 801f386:	a901      	add	r1, sp, #4
 801f388:	4640      	mov	r0, r8
 801f38a:	ec55 4b10 	vmov	r4, r5, d0
 801f38e:	f7ff ff47 	bl	801f220 <__b2d>
 801f392:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f396:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f39a:	eba3 0c02 	sub.w	ip, r3, r2
 801f39e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f3a2:	1a9b      	subs	r3, r3, r2
 801f3a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f3a8:	ec51 0b10 	vmov	r0, r1, d0
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	bfd6      	itet	le
 801f3b0:	460a      	movle	r2, r1
 801f3b2:	462a      	movgt	r2, r5
 801f3b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f3b8:	468b      	mov	fp, r1
 801f3ba:	462f      	mov	r7, r5
 801f3bc:	bfd4      	ite	le
 801f3be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f3c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f3c6:	4620      	mov	r0, r4
 801f3c8:	ee10 2a10 	vmov	r2, s0
 801f3cc:	465b      	mov	r3, fp
 801f3ce:	4639      	mov	r1, r7
 801f3d0:	f7e1 fa54 	bl	800087c <__aeabi_ddiv>
 801f3d4:	ec41 0b10 	vmov	d0, r0, r1
 801f3d8:	b003      	add	sp, #12
 801f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3de <__copybits>:
 801f3de:	3901      	subs	r1, #1
 801f3e0:	b570      	push	{r4, r5, r6, lr}
 801f3e2:	1149      	asrs	r1, r1, #5
 801f3e4:	6914      	ldr	r4, [r2, #16]
 801f3e6:	3101      	adds	r1, #1
 801f3e8:	f102 0314 	add.w	r3, r2, #20
 801f3ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f3f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f3f4:	1f05      	subs	r5, r0, #4
 801f3f6:	42a3      	cmp	r3, r4
 801f3f8:	d30c      	bcc.n	801f414 <__copybits+0x36>
 801f3fa:	1aa3      	subs	r3, r4, r2
 801f3fc:	3b11      	subs	r3, #17
 801f3fe:	f023 0303 	bic.w	r3, r3, #3
 801f402:	3211      	adds	r2, #17
 801f404:	42a2      	cmp	r2, r4
 801f406:	bf88      	it	hi
 801f408:	2300      	movhi	r3, #0
 801f40a:	4418      	add	r0, r3
 801f40c:	2300      	movs	r3, #0
 801f40e:	4288      	cmp	r0, r1
 801f410:	d305      	bcc.n	801f41e <__copybits+0x40>
 801f412:	bd70      	pop	{r4, r5, r6, pc}
 801f414:	f853 6b04 	ldr.w	r6, [r3], #4
 801f418:	f845 6f04 	str.w	r6, [r5, #4]!
 801f41c:	e7eb      	b.n	801f3f6 <__copybits+0x18>
 801f41e:	f840 3b04 	str.w	r3, [r0], #4
 801f422:	e7f4      	b.n	801f40e <__copybits+0x30>

0801f424 <__any_on>:
 801f424:	f100 0214 	add.w	r2, r0, #20
 801f428:	6900      	ldr	r0, [r0, #16]
 801f42a:	114b      	asrs	r3, r1, #5
 801f42c:	4298      	cmp	r0, r3
 801f42e:	b510      	push	{r4, lr}
 801f430:	db11      	blt.n	801f456 <__any_on+0x32>
 801f432:	dd0a      	ble.n	801f44a <__any_on+0x26>
 801f434:	f011 011f 	ands.w	r1, r1, #31
 801f438:	d007      	beq.n	801f44a <__any_on+0x26>
 801f43a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f43e:	fa24 f001 	lsr.w	r0, r4, r1
 801f442:	fa00 f101 	lsl.w	r1, r0, r1
 801f446:	428c      	cmp	r4, r1
 801f448:	d10b      	bne.n	801f462 <__any_on+0x3e>
 801f44a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f44e:	4293      	cmp	r3, r2
 801f450:	d803      	bhi.n	801f45a <__any_on+0x36>
 801f452:	2000      	movs	r0, #0
 801f454:	bd10      	pop	{r4, pc}
 801f456:	4603      	mov	r3, r0
 801f458:	e7f7      	b.n	801f44a <__any_on+0x26>
 801f45a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f45e:	2900      	cmp	r1, #0
 801f460:	d0f5      	beq.n	801f44e <__any_on+0x2a>
 801f462:	2001      	movs	r0, #1
 801f464:	e7f6      	b.n	801f454 <__any_on+0x30>

0801f466 <_calloc_r>:
 801f466:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f468:	fba1 2402 	umull	r2, r4, r1, r2
 801f46c:	b94c      	cbnz	r4, 801f482 <_calloc_r+0x1c>
 801f46e:	4611      	mov	r1, r2
 801f470:	9201      	str	r2, [sp, #4]
 801f472:	f7fb fef3 	bl	801b25c <_malloc_r>
 801f476:	9a01      	ldr	r2, [sp, #4]
 801f478:	4605      	mov	r5, r0
 801f47a:	b930      	cbnz	r0, 801f48a <_calloc_r+0x24>
 801f47c:	4628      	mov	r0, r5
 801f47e:	b003      	add	sp, #12
 801f480:	bd30      	pop	{r4, r5, pc}
 801f482:	220c      	movs	r2, #12
 801f484:	6002      	str	r2, [r0, #0]
 801f486:	2500      	movs	r5, #0
 801f488:	e7f8      	b.n	801f47c <_calloc_r+0x16>
 801f48a:	4621      	mov	r1, r4
 801f48c:	f7fb fe72 	bl	801b174 <memset>
 801f490:	e7f4      	b.n	801f47c <_calloc_r+0x16>

0801f492 <__ssputs_r>:
 801f492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f496:	688e      	ldr	r6, [r1, #8]
 801f498:	429e      	cmp	r6, r3
 801f49a:	4682      	mov	sl, r0
 801f49c:	460c      	mov	r4, r1
 801f49e:	4690      	mov	r8, r2
 801f4a0:	461f      	mov	r7, r3
 801f4a2:	d838      	bhi.n	801f516 <__ssputs_r+0x84>
 801f4a4:	898a      	ldrh	r2, [r1, #12]
 801f4a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f4aa:	d032      	beq.n	801f512 <__ssputs_r+0x80>
 801f4ac:	6825      	ldr	r5, [r4, #0]
 801f4ae:	6909      	ldr	r1, [r1, #16]
 801f4b0:	eba5 0901 	sub.w	r9, r5, r1
 801f4b4:	6965      	ldr	r5, [r4, #20]
 801f4b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f4be:	3301      	adds	r3, #1
 801f4c0:	444b      	add	r3, r9
 801f4c2:	106d      	asrs	r5, r5, #1
 801f4c4:	429d      	cmp	r5, r3
 801f4c6:	bf38      	it	cc
 801f4c8:	461d      	movcc	r5, r3
 801f4ca:	0553      	lsls	r3, r2, #21
 801f4cc:	d531      	bpl.n	801f532 <__ssputs_r+0xa0>
 801f4ce:	4629      	mov	r1, r5
 801f4d0:	f7fb fec4 	bl	801b25c <_malloc_r>
 801f4d4:	4606      	mov	r6, r0
 801f4d6:	b950      	cbnz	r0, 801f4ee <__ssputs_r+0x5c>
 801f4d8:	230c      	movs	r3, #12
 801f4da:	f8ca 3000 	str.w	r3, [sl]
 801f4de:	89a3      	ldrh	r3, [r4, #12]
 801f4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4e4:	81a3      	strh	r3, [r4, #12]
 801f4e6:	f04f 30ff 	mov.w	r0, #4294967295
 801f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4ee:	6921      	ldr	r1, [r4, #16]
 801f4f0:	464a      	mov	r2, r9
 801f4f2:	f7fb fe17 	bl	801b124 <memcpy>
 801f4f6:	89a3      	ldrh	r3, [r4, #12]
 801f4f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f500:	81a3      	strh	r3, [r4, #12]
 801f502:	6126      	str	r6, [r4, #16]
 801f504:	6165      	str	r5, [r4, #20]
 801f506:	444e      	add	r6, r9
 801f508:	eba5 0509 	sub.w	r5, r5, r9
 801f50c:	6026      	str	r6, [r4, #0]
 801f50e:	60a5      	str	r5, [r4, #8]
 801f510:	463e      	mov	r6, r7
 801f512:	42be      	cmp	r6, r7
 801f514:	d900      	bls.n	801f518 <__ssputs_r+0x86>
 801f516:	463e      	mov	r6, r7
 801f518:	6820      	ldr	r0, [r4, #0]
 801f51a:	4632      	mov	r2, r6
 801f51c:	4641      	mov	r1, r8
 801f51e:	f7fb fe0f 	bl	801b140 <memmove>
 801f522:	68a3      	ldr	r3, [r4, #8]
 801f524:	1b9b      	subs	r3, r3, r6
 801f526:	60a3      	str	r3, [r4, #8]
 801f528:	6823      	ldr	r3, [r4, #0]
 801f52a:	4433      	add	r3, r6
 801f52c:	6023      	str	r3, [r4, #0]
 801f52e:	2000      	movs	r0, #0
 801f530:	e7db      	b.n	801f4ea <__ssputs_r+0x58>
 801f532:	462a      	mov	r2, r5
 801f534:	f000 fb2e 	bl	801fb94 <_realloc_r>
 801f538:	4606      	mov	r6, r0
 801f53a:	2800      	cmp	r0, #0
 801f53c:	d1e1      	bne.n	801f502 <__ssputs_r+0x70>
 801f53e:	6921      	ldr	r1, [r4, #16]
 801f540:	4650      	mov	r0, sl
 801f542:	f7fb fe1f 	bl	801b184 <_free_r>
 801f546:	e7c7      	b.n	801f4d8 <__ssputs_r+0x46>

0801f548 <_svfiprintf_r>:
 801f548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f54c:	4698      	mov	r8, r3
 801f54e:	898b      	ldrh	r3, [r1, #12]
 801f550:	061b      	lsls	r3, r3, #24
 801f552:	b09d      	sub	sp, #116	; 0x74
 801f554:	4607      	mov	r7, r0
 801f556:	460d      	mov	r5, r1
 801f558:	4614      	mov	r4, r2
 801f55a:	d50e      	bpl.n	801f57a <_svfiprintf_r+0x32>
 801f55c:	690b      	ldr	r3, [r1, #16]
 801f55e:	b963      	cbnz	r3, 801f57a <_svfiprintf_r+0x32>
 801f560:	2140      	movs	r1, #64	; 0x40
 801f562:	f7fb fe7b 	bl	801b25c <_malloc_r>
 801f566:	6028      	str	r0, [r5, #0]
 801f568:	6128      	str	r0, [r5, #16]
 801f56a:	b920      	cbnz	r0, 801f576 <_svfiprintf_r+0x2e>
 801f56c:	230c      	movs	r3, #12
 801f56e:	603b      	str	r3, [r7, #0]
 801f570:	f04f 30ff 	mov.w	r0, #4294967295
 801f574:	e0d1      	b.n	801f71a <_svfiprintf_r+0x1d2>
 801f576:	2340      	movs	r3, #64	; 0x40
 801f578:	616b      	str	r3, [r5, #20]
 801f57a:	2300      	movs	r3, #0
 801f57c:	9309      	str	r3, [sp, #36]	; 0x24
 801f57e:	2320      	movs	r3, #32
 801f580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f584:	f8cd 800c 	str.w	r8, [sp, #12]
 801f588:	2330      	movs	r3, #48	; 0x30
 801f58a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f734 <_svfiprintf_r+0x1ec>
 801f58e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f592:	f04f 0901 	mov.w	r9, #1
 801f596:	4623      	mov	r3, r4
 801f598:	469a      	mov	sl, r3
 801f59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f59e:	b10a      	cbz	r2, 801f5a4 <_svfiprintf_r+0x5c>
 801f5a0:	2a25      	cmp	r2, #37	; 0x25
 801f5a2:	d1f9      	bne.n	801f598 <_svfiprintf_r+0x50>
 801f5a4:	ebba 0b04 	subs.w	fp, sl, r4
 801f5a8:	d00b      	beq.n	801f5c2 <_svfiprintf_r+0x7a>
 801f5aa:	465b      	mov	r3, fp
 801f5ac:	4622      	mov	r2, r4
 801f5ae:	4629      	mov	r1, r5
 801f5b0:	4638      	mov	r0, r7
 801f5b2:	f7ff ff6e 	bl	801f492 <__ssputs_r>
 801f5b6:	3001      	adds	r0, #1
 801f5b8:	f000 80aa 	beq.w	801f710 <_svfiprintf_r+0x1c8>
 801f5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5be:	445a      	add	r2, fp
 801f5c0:	9209      	str	r2, [sp, #36]	; 0x24
 801f5c2:	f89a 3000 	ldrb.w	r3, [sl]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	f000 80a2 	beq.w	801f710 <_svfiprintf_r+0x1c8>
 801f5cc:	2300      	movs	r3, #0
 801f5ce:	f04f 32ff 	mov.w	r2, #4294967295
 801f5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f5d6:	f10a 0a01 	add.w	sl, sl, #1
 801f5da:	9304      	str	r3, [sp, #16]
 801f5dc:	9307      	str	r3, [sp, #28]
 801f5de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f5e2:	931a      	str	r3, [sp, #104]	; 0x68
 801f5e4:	4654      	mov	r4, sl
 801f5e6:	2205      	movs	r2, #5
 801f5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5ec:	4851      	ldr	r0, [pc, #324]	; (801f734 <_svfiprintf_r+0x1ec>)
 801f5ee:	f7e0 fe0f 	bl	8000210 <memchr>
 801f5f2:	9a04      	ldr	r2, [sp, #16]
 801f5f4:	b9d8      	cbnz	r0, 801f62e <_svfiprintf_r+0xe6>
 801f5f6:	06d0      	lsls	r0, r2, #27
 801f5f8:	bf44      	itt	mi
 801f5fa:	2320      	movmi	r3, #32
 801f5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f600:	0711      	lsls	r1, r2, #28
 801f602:	bf44      	itt	mi
 801f604:	232b      	movmi	r3, #43	; 0x2b
 801f606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f60a:	f89a 3000 	ldrb.w	r3, [sl]
 801f60e:	2b2a      	cmp	r3, #42	; 0x2a
 801f610:	d015      	beq.n	801f63e <_svfiprintf_r+0xf6>
 801f612:	9a07      	ldr	r2, [sp, #28]
 801f614:	4654      	mov	r4, sl
 801f616:	2000      	movs	r0, #0
 801f618:	f04f 0c0a 	mov.w	ip, #10
 801f61c:	4621      	mov	r1, r4
 801f61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f622:	3b30      	subs	r3, #48	; 0x30
 801f624:	2b09      	cmp	r3, #9
 801f626:	d94e      	bls.n	801f6c6 <_svfiprintf_r+0x17e>
 801f628:	b1b0      	cbz	r0, 801f658 <_svfiprintf_r+0x110>
 801f62a:	9207      	str	r2, [sp, #28]
 801f62c:	e014      	b.n	801f658 <_svfiprintf_r+0x110>
 801f62e:	eba0 0308 	sub.w	r3, r0, r8
 801f632:	fa09 f303 	lsl.w	r3, r9, r3
 801f636:	4313      	orrs	r3, r2
 801f638:	9304      	str	r3, [sp, #16]
 801f63a:	46a2      	mov	sl, r4
 801f63c:	e7d2      	b.n	801f5e4 <_svfiprintf_r+0x9c>
 801f63e:	9b03      	ldr	r3, [sp, #12]
 801f640:	1d19      	adds	r1, r3, #4
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	9103      	str	r1, [sp, #12]
 801f646:	2b00      	cmp	r3, #0
 801f648:	bfbb      	ittet	lt
 801f64a:	425b      	neglt	r3, r3
 801f64c:	f042 0202 	orrlt.w	r2, r2, #2
 801f650:	9307      	strge	r3, [sp, #28]
 801f652:	9307      	strlt	r3, [sp, #28]
 801f654:	bfb8      	it	lt
 801f656:	9204      	strlt	r2, [sp, #16]
 801f658:	7823      	ldrb	r3, [r4, #0]
 801f65a:	2b2e      	cmp	r3, #46	; 0x2e
 801f65c:	d10c      	bne.n	801f678 <_svfiprintf_r+0x130>
 801f65e:	7863      	ldrb	r3, [r4, #1]
 801f660:	2b2a      	cmp	r3, #42	; 0x2a
 801f662:	d135      	bne.n	801f6d0 <_svfiprintf_r+0x188>
 801f664:	9b03      	ldr	r3, [sp, #12]
 801f666:	1d1a      	adds	r2, r3, #4
 801f668:	681b      	ldr	r3, [r3, #0]
 801f66a:	9203      	str	r2, [sp, #12]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	bfb8      	it	lt
 801f670:	f04f 33ff 	movlt.w	r3, #4294967295
 801f674:	3402      	adds	r4, #2
 801f676:	9305      	str	r3, [sp, #20]
 801f678:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f744 <_svfiprintf_r+0x1fc>
 801f67c:	7821      	ldrb	r1, [r4, #0]
 801f67e:	2203      	movs	r2, #3
 801f680:	4650      	mov	r0, sl
 801f682:	f7e0 fdc5 	bl	8000210 <memchr>
 801f686:	b140      	cbz	r0, 801f69a <_svfiprintf_r+0x152>
 801f688:	2340      	movs	r3, #64	; 0x40
 801f68a:	eba0 000a 	sub.w	r0, r0, sl
 801f68e:	fa03 f000 	lsl.w	r0, r3, r0
 801f692:	9b04      	ldr	r3, [sp, #16]
 801f694:	4303      	orrs	r3, r0
 801f696:	3401      	adds	r4, #1
 801f698:	9304      	str	r3, [sp, #16]
 801f69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f69e:	4826      	ldr	r0, [pc, #152]	; (801f738 <_svfiprintf_r+0x1f0>)
 801f6a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f6a4:	2206      	movs	r2, #6
 801f6a6:	f7e0 fdb3 	bl	8000210 <memchr>
 801f6aa:	2800      	cmp	r0, #0
 801f6ac:	d038      	beq.n	801f720 <_svfiprintf_r+0x1d8>
 801f6ae:	4b23      	ldr	r3, [pc, #140]	; (801f73c <_svfiprintf_r+0x1f4>)
 801f6b0:	bb1b      	cbnz	r3, 801f6fa <_svfiprintf_r+0x1b2>
 801f6b2:	9b03      	ldr	r3, [sp, #12]
 801f6b4:	3307      	adds	r3, #7
 801f6b6:	f023 0307 	bic.w	r3, r3, #7
 801f6ba:	3308      	adds	r3, #8
 801f6bc:	9303      	str	r3, [sp, #12]
 801f6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6c0:	4433      	add	r3, r6
 801f6c2:	9309      	str	r3, [sp, #36]	; 0x24
 801f6c4:	e767      	b.n	801f596 <_svfiprintf_r+0x4e>
 801f6c6:	fb0c 3202 	mla	r2, ip, r2, r3
 801f6ca:	460c      	mov	r4, r1
 801f6cc:	2001      	movs	r0, #1
 801f6ce:	e7a5      	b.n	801f61c <_svfiprintf_r+0xd4>
 801f6d0:	2300      	movs	r3, #0
 801f6d2:	3401      	adds	r4, #1
 801f6d4:	9305      	str	r3, [sp, #20]
 801f6d6:	4619      	mov	r1, r3
 801f6d8:	f04f 0c0a 	mov.w	ip, #10
 801f6dc:	4620      	mov	r0, r4
 801f6de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f6e2:	3a30      	subs	r2, #48	; 0x30
 801f6e4:	2a09      	cmp	r2, #9
 801f6e6:	d903      	bls.n	801f6f0 <_svfiprintf_r+0x1a8>
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	d0c5      	beq.n	801f678 <_svfiprintf_r+0x130>
 801f6ec:	9105      	str	r1, [sp, #20]
 801f6ee:	e7c3      	b.n	801f678 <_svfiprintf_r+0x130>
 801f6f0:	fb0c 2101 	mla	r1, ip, r1, r2
 801f6f4:	4604      	mov	r4, r0
 801f6f6:	2301      	movs	r3, #1
 801f6f8:	e7f0      	b.n	801f6dc <_svfiprintf_r+0x194>
 801f6fa:	ab03      	add	r3, sp, #12
 801f6fc:	9300      	str	r3, [sp, #0]
 801f6fe:	462a      	mov	r2, r5
 801f700:	4b0f      	ldr	r3, [pc, #60]	; (801f740 <_svfiprintf_r+0x1f8>)
 801f702:	a904      	add	r1, sp, #16
 801f704:	4638      	mov	r0, r7
 801f706:	f7fb febd 	bl	801b484 <_printf_float>
 801f70a:	1c42      	adds	r2, r0, #1
 801f70c:	4606      	mov	r6, r0
 801f70e:	d1d6      	bne.n	801f6be <_svfiprintf_r+0x176>
 801f710:	89ab      	ldrh	r3, [r5, #12]
 801f712:	065b      	lsls	r3, r3, #25
 801f714:	f53f af2c 	bmi.w	801f570 <_svfiprintf_r+0x28>
 801f718:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f71a:	b01d      	add	sp, #116	; 0x74
 801f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f720:	ab03      	add	r3, sp, #12
 801f722:	9300      	str	r3, [sp, #0]
 801f724:	462a      	mov	r2, r5
 801f726:	4b06      	ldr	r3, [pc, #24]	; (801f740 <_svfiprintf_r+0x1f8>)
 801f728:	a904      	add	r1, sp, #16
 801f72a:	4638      	mov	r0, r7
 801f72c:	f7fc f94e 	bl	801b9cc <_printf_i>
 801f730:	e7eb      	b.n	801f70a <_svfiprintf_r+0x1c2>
 801f732:	bf00      	nop
 801f734:	0802200c 	.word	0x0802200c
 801f738:	08022016 	.word	0x08022016
 801f73c:	0801b485 	.word	0x0801b485
 801f740:	0801f493 	.word	0x0801f493
 801f744:	08022012 	.word	0x08022012

0801f748 <__sfputc_r>:
 801f748:	6893      	ldr	r3, [r2, #8]
 801f74a:	3b01      	subs	r3, #1
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	b410      	push	{r4}
 801f750:	6093      	str	r3, [r2, #8]
 801f752:	da08      	bge.n	801f766 <__sfputc_r+0x1e>
 801f754:	6994      	ldr	r4, [r2, #24]
 801f756:	42a3      	cmp	r3, r4
 801f758:	db01      	blt.n	801f75e <__sfputc_r+0x16>
 801f75a:	290a      	cmp	r1, #10
 801f75c:	d103      	bne.n	801f766 <__sfputc_r+0x1e>
 801f75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f762:	f7fd bca5 	b.w	801d0b0 <__swbuf_r>
 801f766:	6813      	ldr	r3, [r2, #0]
 801f768:	1c58      	adds	r0, r3, #1
 801f76a:	6010      	str	r0, [r2, #0]
 801f76c:	7019      	strb	r1, [r3, #0]
 801f76e:	4608      	mov	r0, r1
 801f770:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f774:	4770      	bx	lr

0801f776 <__sfputs_r>:
 801f776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f778:	4606      	mov	r6, r0
 801f77a:	460f      	mov	r7, r1
 801f77c:	4614      	mov	r4, r2
 801f77e:	18d5      	adds	r5, r2, r3
 801f780:	42ac      	cmp	r4, r5
 801f782:	d101      	bne.n	801f788 <__sfputs_r+0x12>
 801f784:	2000      	movs	r0, #0
 801f786:	e007      	b.n	801f798 <__sfputs_r+0x22>
 801f788:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f78c:	463a      	mov	r2, r7
 801f78e:	4630      	mov	r0, r6
 801f790:	f7ff ffda 	bl	801f748 <__sfputc_r>
 801f794:	1c43      	adds	r3, r0, #1
 801f796:	d1f3      	bne.n	801f780 <__sfputs_r+0xa>
 801f798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f79c <_vfiprintf_r>:
 801f79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a0:	460d      	mov	r5, r1
 801f7a2:	b09d      	sub	sp, #116	; 0x74
 801f7a4:	4614      	mov	r4, r2
 801f7a6:	4698      	mov	r8, r3
 801f7a8:	4606      	mov	r6, r0
 801f7aa:	b118      	cbz	r0, 801f7b4 <_vfiprintf_r+0x18>
 801f7ac:	6983      	ldr	r3, [r0, #24]
 801f7ae:	b90b      	cbnz	r3, 801f7b4 <_vfiprintf_r+0x18>
 801f7b0:	f7fe fcf2 	bl	801e198 <__sinit>
 801f7b4:	4b89      	ldr	r3, [pc, #548]	; (801f9dc <_vfiprintf_r+0x240>)
 801f7b6:	429d      	cmp	r5, r3
 801f7b8:	d11b      	bne.n	801f7f2 <_vfiprintf_r+0x56>
 801f7ba:	6875      	ldr	r5, [r6, #4]
 801f7bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7be:	07d9      	lsls	r1, r3, #31
 801f7c0:	d405      	bmi.n	801f7ce <_vfiprintf_r+0x32>
 801f7c2:	89ab      	ldrh	r3, [r5, #12]
 801f7c4:	059a      	lsls	r2, r3, #22
 801f7c6:	d402      	bmi.n	801f7ce <_vfiprintf_r+0x32>
 801f7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7ca:	f7fb fca0 	bl	801b10e <__retarget_lock_acquire_recursive>
 801f7ce:	89ab      	ldrh	r3, [r5, #12]
 801f7d0:	071b      	lsls	r3, r3, #28
 801f7d2:	d501      	bpl.n	801f7d8 <_vfiprintf_r+0x3c>
 801f7d4:	692b      	ldr	r3, [r5, #16]
 801f7d6:	b9eb      	cbnz	r3, 801f814 <_vfiprintf_r+0x78>
 801f7d8:	4629      	mov	r1, r5
 801f7da:	4630      	mov	r0, r6
 801f7dc:	f7fd fcba 	bl	801d154 <__swsetup_r>
 801f7e0:	b1c0      	cbz	r0, 801f814 <_vfiprintf_r+0x78>
 801f7e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7e4:	07dc      	lsls	r4, r3, #31
 801f7e6:	d50e      	bpl.n	801f806 <_vfiprintf_r+0x6a>
 801f7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801f7ec:	b01d      	add	sp, #116	; 0x74
 801f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7f2:	4b7b      	ldr	r3, [pc, #492]	; (801f9e0 <_vfiprintf_r+0x244>)
 801f7f4:	429d      	cmp	r5, r3
 801f7f6:	d101      	bne.n	801f7fc <_vfiprintf_r+0x60>
 801f7f8:	68b5      	ldr	r5, [r6, #8]
 801f7fa:	e7df      	b.n	801f7bc <_vfiprintf_r+0x20>
 801f7fc:	4b79      	ldr	r3, [pc, #484]	; (801f9e4 <_vfiprintf_r+0x248>)
 801f7fe:	429d      	cmp	r5, r3
 801f800:	bf08      	it	eq
 801f802:	68f5      	ldreq	r5, [r6, #12]
 801f804:	e7da      	b.n	801f7bc <_vfiprintf_r+0x20>
 801f806:	89ab      	ldrh	r3, [r5, #12]
 801f808:	0598      	lsls	r0, r3, #22
 801f80a:	d4ed      	bmi.n	801f7e8 <_vfiprintf_r+0x4c>
 801f80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f80e:	f7fb fc7f 	bl	801b110 <__retarget_lock_release_recursive>
 801f812:	e7e9      	b.n	801f7e8 <_vfiprintf_r+0x4c>
 801f814:	2300      	movs	r3, #0
 801f816:	9309      	str	r3, [sp, #36]	; 0x24
 801f818:	2320      	movs	r3, #32
 801f81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f81e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f822:	2330      	movs	r3, #48	; 0x30
 801f824:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f9e8 <_vfiprintf_r+0x24c>
 801f828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f82c:	f04f 0901 	mov.w	r9, #1
 801f830:	4623      	mov	r3, r4
 801f832:	469a      	mov	sl, r3
 801f834:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f838:	b10a      	cbz	r2, 801f83e <_vfiprintf_r+0xa2>
 801f83a:	2a25      	cmp	r2, #37	; 0x25
 801f83c:	d1f9      	bne.n	801f832 <_vfiprintf_r+0x96>
 801f83e:	ebba 0b04 	subs.w	fp, sl, r4
 801f842:	d00b      	beq.n	801f85c <_vfiprintf_r+0xc0>
 801f844:	465b      	mov	r3, fp
 801f846:	4622      	mov	r2, r4
 801f848:	4629      	mov	r1, r5
 801f84a:	4630      	mov	r0, r6
 801f84c:	f7ff ff93 	bl	801f776 <__sfputs_r>
 801f850:	3001      	adds	r0, #1
 801f852:	f000 80aa 	beq.w	801f9aa <_vfiprintf_r+0x20e>
 801f856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f858:	445a      	add	r2, fp
 801f85a:	9209      	str	r2, [sp, #36]	; 0x24
 801f85c:	f89a 3000 	ldrb.w	r3, [sl]
 801f860:	2b00      	cmp	r3, #0
 801f862:	f000 80a2 	beq.w	801f9aa <_vfiprintf_r+0x20e>
 801f866:	2300      	movs	r3, #0
 801f868:	f04f 32ff 	mov.w	r2, #4294967295
 801f86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f870:	f10a 0a01 	add.w	sl, sl, #1
 801f874:	9304      	str	r3, [sp, #16]
 801f876:	9307      	str	r3, [sp, #28]
 801f878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f87c:	931a      	str	r3, [sp, #104]	; 0x68
 801f87e:	4654      	mov	r4, sl
 801f880:	2205      	movs	r2, #5
 801f882:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f886:	4858      	ldr	r0, [pc, #352]	; (801f9e8 <_vfiprintf_r+0x24c>)
 801f888:	f7e0 fcc2 	bl	8000210 <memchr>
 801f88c:	9a04      	ldr	r2, [sp, #16]
 801f88e:	b9d8      	cbnz	r0, 801f8c8 <_vfiprintf_r+0x12c>
 801f890:	06d1      	lsls	r1, r2, #27
 801f892:	bf44      	itt	mi
 801f894:	2320      	movmi	r3, #32
 801f896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f89a:	0713      	lsls	r3, r2, #28
 801f89c:	bf44      	itt	mi
 801f89e:	232b      	movmi	r3, #43	; 0x2b
 801f8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8a4:	f89a 3000 	ldrb.w	r3, [sl]
 801f8a8:	2b2a      	cmp	r3, #42	; 0x2a
 801f8aa:	d015      	beq.n	801f8d8 <_vfiprintf_r+0x13c>
 801f8ac:	9a07      	ldr	r2, [sp, #28]
 801f8ae:	4654      	mov	r4, sl
 801f8b0:	2000      	movs	r0, #0
 801f8b2:	f04f 0c0a 	mov.w	ip, #10
 801f8b6:	4621      	mov	r1, r4
 801f8b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8bc:	3b30      	subs	r3, #48	; 0x30
 801f8be:	2b09      	cmp	r3, #9
 801f8c0:	d94e      	bls.n	801f960 <_vfiprintf_r+0x1c4>
 801f8c2:	b1b0      	cbz	r0, 801f8f2 <_vfiprintf_r+0x156>
 801f8c4:	9207      	str	r2, [sp, #28]
 801f8c6:	e014      	b.n	801f8f2 <_vfiprintf_r+0x156>
 801f8c8:	eba0 0308 	sub.w	r3, r0, r8
 801f8cc:	fa09 f303 	lsl.w	r3, r9, r3
 801f8d0:	4313      	orrs	r3, r2
 801f8d2:	9304      	str	r3, [sp, #16]
 801f8d4:	46a2      	mov	sl, r4
 801f8d6:	e7d2      	b.n	801f87e <_vfiprintf_r+0xe2>
 801f8d8:	9b03      	ldr	r3, [sp, #12]
 801f8da:	1d19      	adds	r1, r3, #4
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	9103      	str	r1, [sp, #12]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	bfbb      	ittet	lt
 801f8e4:	425b      	neglt	r3, r3
 801f8e6:	f042 0202 	orrlt.w	r2, r2, #2
 801f8ea:	9307      	strge	r3, [sp, #28]
 801f8ec:	9307      	strlt	r3, [sp, #28]
 801f8ee:	bfb8      	it	lt
 801f8f0:	9204      	strlt	r2, [sp, #16]
 801f8f2:	7823      	ldrb	r3, [r4, #0]
 801f8f4:	2b2e      	cmp	r3, #46	; 0x2e
 801f8f6:	d10c      	bne.n	801f912 <_vfiprintf_r+0x176>
 801f8f8:	7863      	ldrb	r3, [r4, #1]
 801f8fa:	2b2a      	cmp	r3, #42	; 0x2a
 801f8fc:	d135      	bne.n	801f96a <_vfiprintf_r+0x1ce>
 801f8fe:	9b03      	ldr	r3, [sp, #12]
 801f900:	1d1a      	adds	r2, r3, #4
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	9203      	str	r2, [sp, #12]
 801f906:	2b00      	cmp	r3, #0
 801f908:	bfb8      	it	lt
 801f90a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f90e:	3402      	adds	r4, #2
 801f910:	9305      	str	r3, [sp, #20]
 801f912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f9f8 <_vfiprintf_r+0x25c>
 801f916:	7821      	ldrb	r1, [r4, #0]
 801f918:	2203      	movs	r2, #3
 801f91a:	4650      	mov	r0, sl
 801f91c:	f7e0 fc78 	bl	8000210 <memchr>
 801f920:	b140      	cbz	r0, 801f934 <_vfiprintf_r+0x198>
 801f922:	2340      	movs	r3, #64	; 0x40
 801f924:	eba0 000a 	sub.w	r0, r0, sl
 801f928:	fa03 f000 	lsl.w	r0, r3, r0
 801f92c:	9b04      	ldr	r3, [sp, #16]
 801f92e:	4303      	orrs	r3, r0
 801f930:	3401      	adds	r4, #1
 801f932:	9304      	str	r3, [sp, #16]
 801f934:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f938:	482c      	ldr	r0, [pc, #176]	; (801f9ec <_vfiprintf_r+0x250>)
 801f93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f93e:	2206      	movs	r2, #6
 801f940:	f7e0 fc66 	bl	8000210 <memchr>
 801f944:	2800      	cmp	r0, #0
 801f946:	d03f      	beq.n	801f9c8 <_vfiprintf_r+0x22c>
 801f948:	4b29      	ldr	r3, [pc, #164]	; (801f9f0 <_vfiprintf_r+0x254>)
 801f94a:	bb1b      	cbnz	r3, 801f994 <_vfiprintf_r+0x1f8>
 801f94c:	9b03      	ldr	r3, [sp, #12]
 801f94e:	3307      	adds	r3, #7
 801f950:	f023 0307 	bic.w	r3, r3, #7
 801f954:	3308      	adds	r3, #8
 801f956:	9303      	str	r3, [sp, #12]
 801f958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f95a:	443b      	add	r3, r7
 801f95c:	9309      	str	r3, [sp, #36]	; 0x24
 801f95e:	e767      	b.n	801f830 <_vfiprintf_r+0x94>
 801f960:	fb0c 3202 	mla	r2, ip, r2, r3
 801f964:	460c      	mov	r4, r1
 801f966:	2001      	movs	r0, #1
 801f968:	e7a5      	b.n	801f8b6 <_vfiprintf_r+0x11a>
 801f96a:	2300      	movs	r3, #0
 801f96c:	3401      	adds	r4, #1
 801f96e:	9305      	str	r3, [sp, #20]
 801f970:	4619      	mov	r1, r3
 801f972:	f04f 0c0a 	mov.w	ip, #10
 801f976:	4620      	mov	r0, r4
 801f978:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f97c:	3a30      	subs	r2, #48	; 0x30
 801f97e:	2a09      	cmp	r2, #9
 801f980:	d903      	bls.n	801f98a <_vfiprintf_r+0x1ee>
 801f982:	2b00      	cmp	r3, #0
 801f984:	d0c5      	beq.n	801f912 <_vfiprintf_r+0x176>
 801f986:	9105      	str	r1, [sp, #20]
 801f988:	e7c3      	b.n	801f912 <_vfiprintf_r+0x176>
 801f98a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f98e:	4604      	mov	r4, r0
 801f990:	2301      	movs	r3, #1
 801f992:	e7f0      	b.n	801f976 <_vfiprintf_r+0x1da>
 801f994:	ab03      	add	r3, sp, #12
 801f996:	9300      	str	r3, [sp, #0]
 801f998:	462a      	mov	r2, r5
 801f99a:	4b16      	ldr	r3, [pc, #88]	; (801f9f4 <_vfiprintf_r+0x258>)
 801f99c:	a904      	add	r1, sp, #16
 801f99e:	4630      	mov	r0, r6
 801f9a0:	f7fb fd70 	bl	801b484 <_printf_float>
 801f9a4:	4607      	mov	r7, r0
 801f9a6:	1c78      	adds	r0, r7, #1
 801f9a8:	d1d6      	bne.n	801f958 <_vfiprintf_r+0x1bc>
 801f9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f9ac:	07d9      	lsls	r1, r3, #31
 801f9ae:	d405      	bmi.n	801f9bc <_vfiprintf_r+0x220>
 801f9b0:	89ab      	ldrh	r3, [r5, #12]
 801f9b2:	059a      	lsls	r2, r3, #22
 801f9b4:	d402      	bmi.n	801f9bc <_vfiprintf_r+0x220>
 801f9b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f9b8:	f7fb fbaa 	bl	801b110 <__retarget_lock_release_recursive>
 801f9bc:	89ab      	ldrh	r3, [r5, #12]
 801f9be:	065b      	lsls	r3, r3, #25
 801f9c0:	f53f af12 	bmi.w	801f7e8 <_vfiprintf_r+0x4c>
 801f9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9c6:	e711      	b.n	801f7ec <_vfiprintf_r+0x50>
 801f9c8:	ab03      	add	r3, sp, #12
 801f9ca:	9300      	str	r3, [sp, #0]
 801f9cc:	462a      	mov	r2, r5
 801f9ce:	4b09      	ldr	r3, [pc, #36]	; (801f9f4 <_vfiprintf_r+0x258>)
 801f9d0:	a904      	add	r1, sp, #16
 801f9d2:	4630      	mov	r0, r6
 801f9d4:	f7fb fffa 	bl	801b9cc <_printf_i>
 801f9d8:	e7e4      	b.n	801f9a4 <_vfiprintf_r+0x208>
 801f9da:	bf00      	nop
 801f9dc:	08021df4 	.word	0x08021df4
 801f9e0:	08021e14 	.word	0x08021e14
 801f9e4:	08021dd4 	.word	0x08021dd4
 801f9e8:	0802200c 	.word	0x0802200c
 801f9ec:	08022016 	.word	0x08022016
 801f9f0:	0801b485 	.word	0x0801b485
 801f9f4:	0801f777 	.word	0x0801f777
 801f9f8:	08022012 	.word	0x08022012
 801f9fc:	00000000 	.word	0x00000000

0801fa00 <nan>:
 801fa00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801fa08 <nan+0x8>
 801fa04:	4770      	bx	lr
 801fa06:	bf00      	nop
 801fa08:	00000000 	.word	0x00000000
 801fa0c:	7ff80000 	.word	0x7ff80000

0801fa10 <__sread>:
 801fa10:	b510      	push	{r4, lr}
 801fa12:	460c      	mov	r4, r1
 801fa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa18:	f000 f8ec 	bl	801fbf4 <_read_r>
 801fa1c:	2800      	cmp	r0, #0
 801fa1e:	bfab      	itete	ge
 801fa20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fa22:	89a3      	ldrhlt	r3, [r4, #12]
 801fa24:	181b      	addge	r3, r3, r0
 801fa26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fa2a:	bfac      	ite	ge
 801fa2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801fa2e:	81a3      	strhlt	r3, [r4, #12]
 801fa30:	bd10      	pop	{r4, pc}

0801fa32 <__swrite>:
 801fa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa36:	461f      	mov	r7, r3
 801fa38:	898b      	ldrh	r3, [r1, #12]
 801fa3a:	05db      	lsls	r3, r3, #23
 801fa3c:	4605      	mov	r5, r0
 801fa3e:	460c      	mov	r4, r1
 801fa40:	4616      	mov	r6, r2
 801fa42:	d505      	bpl.n	801fa50 <__swrite+0x1e>
 801fa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa48:	2302      	movs	r3, #2
 801fa4a:	2200      	movs	r2, #0
 801fa4c:	f000 f890 	bl	801fb70 <_lseek_r>
 801fa50:	89a3      	ldrh	r3, [r4, #12]
 801fa52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fa56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fa5a:	81a3      	strh	r3, [r4, #12]
 801fa5c:	4632      	mov	r2, r6
 801fa5e:	463b      	mov	r3, r7
 801fa60:	4628      	mov	r0, r5
 801fa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fa66:	f000 b837 	b.w	801fad8 <_write_r>

0801fa6a <__sseek>:
 801fa6a:	b510      	push	{r4, lr}
 801fa6c:	460c      	mov	r4, r1
 801fa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa72:	f000 f87d 	bl	801fb70 <_lseek_r>
 801fa76:	1c43      	adds	r3, r0, #1
 801fa78:	89a3      	ldrh	r3, [r4, #12]
 801fa7a:	bf15      	itete	ne
 801fa7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801fa7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fa82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fa86:	81a3      	strheq	r3, [r4, #12]
 801fa88:	bf18      	it	ne
 801fa8a:	81a3      	strhne	r3, [r4, #12]
 801fa8c:	bd10      	pop	{r4, pc}

0801fa8e <__sclose>:
 801fa8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa92:	f000 b83b 	b.w	801fb0c <_close_r>

0801fa96 <strncmp>:
 801fa96:	b510      	push	{r4, lr}
 801fa98:	b17a      	cbz	r2, 801faba <strncmp+0x24>
 801fa9a:	4603      	mov	r3, r0
 801fa9c:	3901      	subs	r1, #1
 801fa9e:	1884      	adds	r4, r0, r2
 801faa0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801faa4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801faa8:	4290      	cmp	r0, r2
 801faaa:	d101      	bne.n	801fab0 <strncmp+0x1a>
 801faac:	42a3      	cmp	r3, r4
 801faae:	d101      	bne.n	801fab4 <strncmp+0x1e>
 801fab0:	1a80      	subs	r0, r0, r2
 801fab2:	bd10      	pop	{r4, pc}
 801fab4:	2800      	cmp	r0, #0
 801fab6:	d1f3      	bne.n	801faa0 <strncmp+0xa>
 801fab8:	e7fa      	b.n	801fab0 <strncmp+0x1a>
 801faba:	4610      	mov	r0, r2
 801fabc:	e7f9      	b.n	801fab2 <strncmp+0x1c>

0801fabe <__ascii_wctomb>:
 801fabe:	b149      	cbz	r1, 801fad4 <__ascii_wctomb+0x16>
 801fac0:	2aff      	cmp	r2, #255	; 0xff
 801fac2:	bf85      	ittet	hi
 801fac4:	238a      	movhi	r3, #138	; 0x8a
 801fac6:	6003      	strhi	r3, [r0, #0]
 801fac8:	700a      	strbls	r2, [r1, #0]
 801faca:	f04f 30ff 	movhi.w	r0, #4294967295
 801face:	bf98      	it	ls
 801fad0:	2001      	movls	r0, #1
 801fad2:	4770      	bx	lr
 801fad4:	4608      	mov	r0, r1
 801fad6:	4770      	bx	lr

0801fad8 <_write_r>:
 801fad8:	b538      	push	{r3, r4, r5, lr}
 801fada:	4d07      	ldr	r5, [pc, #28]	; (801faf8 <_write_r+0x20>)
 801fadc:	4604      	mov	r4, r0
 801fade:	4608      	mov	r0, r1
 801fae0:	4611      	mov	r1, r2
 801fae2:	2200      	movs	r2, #0
 801fae4:	602a      	str	r2, [r5, #0]
 801fae6:	461a      	mov	r2, r3
 801fae8:	f7e3 fcf5 	bl	80034d6 <_write>
 801faec:	1c43      	adds	r3, r0, #1
 801faee:	d102      	bne.n	801faf6 <_write_r+0x1e>
 801faf0:	682b      	ldr	r3, [r5, #0]
 801faf2:	b103      	cbz	r3, 801faf6 <_write_r+0x1e>
 801faf4:	6023      	str	r3, [r4, #0]
 801faf6:	bd38      	pop	{r3, r4, r5, pc}
 801faf8:	20003618 	.word	0x20003618

0801fafc <abort>:
 801fafc:	b508      	push	{r3, lr}
 801fafe:	2006      	movs	r0, #6
 801fb00:	f000 f8b2 	bl	801fc68 <raise>
 801fb04:	2001      	movs	r0, #1
 801fb06:	f7e3 fcbf 	bl	8003488 <_exit>
	...

0801fb0c <_close_r>:
 801fb0c:	b538      	push	{r3, r4, r5, lr}
 801fb0e:	4d06      	ldr	r5, [pc, #24]	; (801fb28 <_close_r+0x1c>)
 801fb10:	2300      	movs	r3, #0
 801fb12:	4604      	mov	r4, r0
 801fb14:	4608      	mov	r0, r1
 801fb16:	602b      	str	r3, [r5, #0]
 801fb18:	f7e3 fcf9 	bl	800350e <_close>
 801fb1c:	1c43      	adds	r3, r0, #1
 801fb1e:	d102      	bne.n	801fb26 <_close_r+0x1a>
 801fb20:	682b      	ldr	r3, [r5, #0]
 801fb22:	b103      	cbz	r3, 801fb26 <_close_r+0x1a>
 801fb24:	6023      	str	r3, [r4, #0]
 801fb26:	bd38      	pop	{r3, r4, r5, pc}
 801fb28:	20003618 	.word	0x20003618

0801fb2c <_fstat_r>:
 801fb2c:	b538      	push	{r3, r4, r5, lr}
 801fb2e:	4d07      	ldr	r5, [pc, #28]	; (801fb4c <_fstat_r+0x20>)
 801fb30:	2300      	movs	r3, #0
 801fb32:	4604      	mov	r4, r0
 801fb34:	4608      	mov	r0, r1
 801fb36:	4611      	mov	r1, r2
 801fb38:	602b      	str	r3, [r5, #0]
 801fb3a:	f7e3 fcf4 	bl	8003526 <_fstat>
 801fb3e:	1c43      	adds	r3, r0, #1
 801fb40:	d102      	bne.n	801fb48 <_fstat_r+0x1c>
 801fb42:	682b      	ldr	r3, [r5, #0]
 801fb44:	b103      	cbz	r3, 801fb48 <_fstat_r+0x1c>
 801fb46:	6023      	str	r3, [r4, #0]
 801fb48:	bd38      	pop	{r3, r4, r5, pc}
 801fb4a:	bf00      	nop
 801fb4c:	20003618 	.word	0x20003618

0801fb50 <_isatty_r>:
 801fb50:	b538      	push	{r3, r4, r5, lr}
 801fb52:	4d06      	ldr	r5, [pc, #24]	; (801fb6c <_isatty_r+0x1c>)
 801fb54:	2300      	movs	r3, #0
 801fb56:	4604      	mov	r4, r0
 801fb58:	4608      	mov	r0, r1
 801fb5a:	602b      	str	r3, [r5, #0]
 801fb5c:	f7e3 fcf3 	bl	8003546 <_isatty>
 801fb60:	1c43      	adds	r3, r0, #1
 801fb62:	d102      	bne.n	801fb6a <_isatty_r+0x1a>
 801fb64:	682b      	ldr	r3, [r5, #0]
 801fb66:	b103      	cbz	r3, 801fb6a <_isatty_r+0x1a>
 801fb68:	6023      	str	r3, [r4, #0]
 801fb6a:	bd38      	pop	{r3, r4, r5, pc}
 801fb6c:	20003618 	.word	0x20003618

0801fb70 <_lseek_r>:
 801fb70:	b538      	push	{r3, r4, r5, lr}
 801fb72:	4d07      	ldr	r5, [pc, #28]	; (801fb90 <_lseek_r+0x20>)
 801fb74:	4604      	mov	r4, r0
 801fb76:	4608      	mov	r0, r1
 801fb78:	4611      	mov	r1, r2
 801fb7a:	2200      	movs	r2, #0
 801fb7c:	602a      	str	r2, [r5, #0]
 801fb7e:	461a      	mov	r2, r3
 801fb80:	f7e3 fcec 	bl	800355c <_lseek>
 801fb84:	1c43      	adds	r3, r0, #1
 801fb86:	d102      	bne.n	801fb8e <_lseek_r+0x1e>
 801fb88:	682b      	ldr	r3, [r5, #0]
 801fb8a:	b103      	cbz	r3, 801fb8e <_lseek_r+0x1e>
 801fb8c:	6023      	str	r3, [r4, #0]
 801fb8e:	bd38      	pop	{r3, r4, r5, pc}
 801fb90:	20003618 	.word	0x20003618

0801fb94 <_realloc_r>:
 801fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb98:	4680      	mov	r8, r0
 801fb9a:	4614      	mov	r4, r2
 801fb9c:	460e      	mov	r6, r1
 801fb9e:	b921      	cbnz	r1, 801fbaa <_realloc_r+0x16>
 801fba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fba4:	4611      	mov	r1, r2
 801fba6:	f7fb bb59 	b.w	801b25c <_malloc_r>
 801fbaa:	b92a      	cbnz	r2, 801fbb8 <_realloc_r+0x24>
 801fbac:	f7fb faea 	bl	801b184 <_free_r>
 801fbb0:	4625      	mov	r5, r4
 801fbb2:	4628      	mov	r0, r5
 801fbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbb8:	f000 f872 	bl	801fca0 <_malloc_usable_size_r>
 801fbbc:	4284      	cmp	r4, r0
 801fbbe:	4607      	mov	r7, r0
 801fbc0:	d802      	bhi.n	801fbc8 <_realloc_r+0x34>
 801fbc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fbc6:	d812      	bhi.n	801fbee <_realloc_r+0x5a>
 801fbc8:	4621      	mov	r1, r4
 801fbca:	4640      	mov	r0, r8
 801fbcc:	f7fb fb46 	bl	801b25c <_malloc_r>
 801fbd0:	4605      	mov	r5, r0
 801fbd2:	2800      	cmp	r0, #0
 801fbd4:	d0ed      	beq.n	801fbb2 <_realloc_r+0x1e>
 801fbd6:	42bc      	cmp	r4, r7
 801fbd8:	4622      	mov	r2, r4
 801fbda:	4631      	mov	r1, r6
 801fbdc:	bf28      	it	cs
 801fbde:	463a      	movcs	r2, r7
 801fbe0:	f7fb faa0 	bl	801b124 <memcpy>
 801fbe4:	4631      	mov	r1, r6
 801fbe6:	4640      	mov	r0, r8
 801fbe8:	f7fb facc 	bl	801b184 <_free_r>
 801fbec:	e7e1      	b.n	801fbb2 <_realloc_r+0x1e>
 801fbee:	4635      	mov	r5, r6
 801fbf0:	e7df      	b.n	801fbb2 <_realloc_r+0x1e>
	...

0801fbf4 <_read_r>:
 801fbf4:	b538      	push	{r3, r4, r5, lr}
 801fbf6:	4d07      	ldr	r5, [pc, #28]	; (801fc14 <_read_r+0x20>)
 801fbf8:	4604      	mov	r4, r0
 801fbfa:	4608      	mov	r0, r1
 801fbfc:	4611      	mov	r1, r2
 801fbfe:	2200      	movs	r2, #0
 801fc00:	602a      	str	r2, [r5, #0]
 801fc02:	461a      	mov	r2, r3
 801fc04:	f7e3 fc4a 	bl	800349c <_read>
 801fc08:	1c43      	adds	r3, r0, #1
 801fc0a:	d102      	bne.n	801fc12 <_read_r+0x1e>
 801fc0c:	682b      	ldr	r3, [r5, #0]
 801fc0e:	b103      	cbz	r3, 801fc12 <_read_r+0x1e>
 801fc10:	6023      	str	r3, [r4, #0]
 801fc12:	bd38      	pop	{r3, r4, r5, pc}
 801fc14:	20003618 	.word	0x20003618

0801fc18 <_raise_r>:
 801fc18:	291f      	cmp	r1, #31
 801fc1a:	b538      	push	{r3, r4, r5, lr}
 801fc1c:	4604      	mov	r4, r0
 801fc1e:	460d      	mov	r5, r1
 801fc20:	d904      	bls.n	801fc2c <_raise_r+0x14>
 801fc22:	2316      	movs	r3, #22
 801fc24:	6003      	str	r3, [r0, #0]
 801fc26:	f04f 30ff 	mov.w	r0, #4294967295
 801fc2a:	bd38      	pop	{r3, r4, r5, pc}
 801fc2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fc2e:	b112      	cbz	r2, 801fc36 <_raise_r+0x1e>
 801fc30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fc34:	b94b      	cbnz	r3, 801fc4a <_raise_r+0x32>
 801fc36:	4620      	mov	r0, r4
 801fc38:	f000 f830 	bl	801fc9c <_getpid_r>
 801fc3c:	462a      	mov	r2, r5
 801fc3e:	4601      	mov	r1, r0
 801fc40:	4620      	mov	r0, r4
 801fc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc46:	f000 b817 	b.w	801fc78 <_kill_r>
 801fc4a:	2b01      	cmp	r3, #1
 801fc4c:	d00a      	beq.n	801fc64 <_raise_r+0x4c>
 801fc4e:	1c59      	adds	r1, r3, #1
 801fc50:	d103      	bne.n	801fc5a <_raise_r+0x42>
 801fc52:	2316      	movs	r3, #22
 801fc54:	6003      	str	r3, [r0, #0]
 801fc56:	2001      	movs	r0, #1
 801fc58:	e7e7      	b.n	801fc2a <_raise_r+0x12>
 801fc5a:	2400      	movs	r4, #0
 801fc5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fc60:	4628      	mov	r0, r5
 801fc62:	4798      	blx	r3
 801fc64:	2000      	movs	r0, #0
 801fc66:	e7e0      	b.n	801fc2a <_raise_r+0x12>

0801fc68 <raise>:
 801fc68:	4b02      	ldr	r3, [pc, #8]	; (801fc74 <raise+0xc>)
 801fc6a:	4601      	mov	r1, r0
 801fc6c:	6818      	ldr	r0, [r3, #0]
 801fc6e:	f7ff bfd3 	b.w	801fc18 <_raise_r>
 801fc72:	bf00      	nop
 801fc74:	20000140 	.word	0x20000140

0801fc78 <_kill_r>:
 801fc78:	b538      	push	{r3, r4, r5, lr}
 801fc7a:	4d07      	ldr	r5, [pc, #28]	; (801fc98 <_kill_r+0x20>)
 801fc7c:	2300      	movs	r3, #0
 801fc7e:	4604      	mov	r4, r0
 801fc80:	4608      	mov	r0, r1
 801fc82:	4611      	mov	r1, r2
 801fc84:	602b      	str	r3, [r5, #0]
 801fc86:	f7e3 fbef 	bl	8003468 <_kill>
 801fc8a:	1c43      	adds	r3, r0, #1
 801fc8c:	d102      	bne.n	801fc94 <_kill_r+0x1c>
 801fc8e:	682b      	ldr	r3, [r5, #0]
 801fc90:	b103      	cbz	r3, 801fc94 <_kill_r+0x1c>
 801fc92:	6023      	str	r3, [r4, #0]
 801fc94:	bd38      	pop	{r3, r4, r5, pc}
 801fc96:	bf00      	nop
 801fc98:	20003618 	.word	0x20003618

0801fc9c <_getpid_r>:
 801fc9c:	f7e3 bbdc 	b.w	8003458 <_getpid>

0801fca0 <_malloc_usable_size_r>:
 801fca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fca4:	1f18      	subs	r0, r3, #4
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	bfbc      	itt	lt
 801fcaa:	580b      	ldrlt	r3, [r1, r0]
 801fcac:	18c0      	addlt	r0, r0, r3
 801fcae:	4770      	bx	lr

0801fcb0 <_init>:
 801fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcb2:	bf00      	nop
 801fcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcb6:	bc08      	pop	{r3}
 801fcb8:	469e      	mov	lr, r3
 801fcba:	4770      	bx	lr

0801fcbc <_fini>:
 801fcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcbe:	bf00      	nop
 801fcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcc2:	bc08      	pop	{r3}
 801fcc4:	469e      	mov	lr, r3
 801fcc6:	4770      	bx	lr
